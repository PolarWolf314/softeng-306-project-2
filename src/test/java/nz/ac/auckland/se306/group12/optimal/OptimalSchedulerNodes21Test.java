package nz.ac.auckland.se306.group12.optimal;

import nz.ac.auckland.se306.group12.TestUtil;
import nz.ac.auckland.se306.group12.models.Graph;
import nz.ac.auckland.se306.group12.models.Schedule;
import nz.ac.auckland.se306.group12.models.ScheduledTask;
import nz.ac.auckland.se306.group12.scheduler.Scheduler;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;

/**
 * This class has been automatically generated by the GenerateUnitTests.py script.
 * Do not modify this file directly as it will be overwritten the next time the script is run.
 * <p>
 * The optimal schedules for each test have been sourced from 
 * <a href="https://parallel.auckland.ac.nz/OptimalTaskScheduling/OptimalSchedules.html">the amazing work</a>
 * done by the Parallel and Reconfigurable Computing Lab at the University of Auckland.
 */
public class OptimalSchedulerNodes21Test {

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_21_CCR_0dot10_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Join_Nodes_21_CCR_0.10_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 162000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 160, 0), new ScheduledTask(70000, 70200, 0), new ScheduledTask(138000, 138200, 0), new ScheduledTask(90000, 90180, 0), new ScheduledTask(48000, 48180, 0), new ScheduledTask(52300, 52460, 1), new ScheduledTask(118000, 118160, 0), new ScheduledTask(16600, 16740, 2), new ScheduledTask(64500, 64640, 3), new ScheduledTask(30000, 30140, 0), new ScheduledTask(20000, 20100, 0), new ScheduledTask(16500, 16580, 3), new ScheduledTask(100600, 100680, 2), new ScheduledTask(16300, 16360, 1), new ScheduledTask(112000, 112060, 0), new ScheduledTask(108000, 108040, 0), new ScheduledTask(44000, 44040, 0), new ScheduledTask(134000, 134040, 0), new ScheduledTask(16000, 16040, 0), new ScheduledTask(66000, 66040, 0), new ScheduledTask(158000, 158040, 0)};
        int[] expectedProcessorEndTimes = new int[]{158040, 52460, 100680, 64640};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_21_CCR_0dot10_WeightType_Random2_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Join_Nodes_21_CCR_0.10_WeightType_Random#2_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 170900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 82, 0), new ScheduledTask(67900, 68085, 0), new ScheduledTask(49400, 49585, 0), new ScheduledTask(8700, 8865, 1), new ScheduledTask(111100, 111265, 0), new ScheduledTask(58300, 58465, 2), new ScheduledTask(127600, 127765, 0), new ScheduledTask(58300, 58465, 3), new ScheduledTask(86400, 86544, 0), new ScheduledTask(20600, 20744, 0), new ScheduledTask(150300, 150444, 0), new ScheduledTask(35000, 35144, 0), new ScheduledTask(8200, 8324, 0), new ScheduledTask(100800, 100903, 0), new ScheduledTask(9100, 9182, 3), new ScheduledTask(144100, 144162, 0), new ScheduledTask(9100, 9141, 2), new ScheduledTask(33700, 33741, 2), new ScheduledTask(107700, 107741, 1), new ScheduledTask(132300, 132341, 1), new ScheduledTask(164700, 164762, 0)};
        int[] expectedProcessorEndTimes = new int[]{164762, 132341, 58465, 58465};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_21_CCR_0dot10_WeightType_Random2_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Join_Nodes_21_CCR_0.10_WeightType_Random#2_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 109000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 82, 0), new ScheduledTask(47200, 47385, 0), new ScheduledTask(28700, 28885, 0), new ScheduledTask(8700, 8865, 1), new ScheduledTask(41700, 41865, 1), new ScheduledTask(76000, 76165, 0), new ScheduledTask(37700, 37865, 2), new ScheduledTask(66500, 66665, 3), new ScheduledTask(8900, 9044, 3), new ScheduledTask(37700, 37844, 3), new ScheduledTask(70700, 70844, 2), new ScheduledTask(8900, 9044, 2), new ScheduledTask(74700, 74824, 1), new ScheduledTask(65700, 65803, 0), new ScheduledTask(12300, 12382, 0), new ScheduledTask(96600, 96662, 0), new ScheduledTask(24600, 24641, 0), new ScheduledTask(92500, 92541, 0), new ScheduledTask(20500, 20541, 0), new ScheduledTask(8200, 8241, 0), new ScheduledTask(102800, 102862, 0)};
        int[] expectedProcessorEndTimes = new int[]{102862, 74824, 70844, 66665};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_21_CCR_0dot10_WeightType_Random2_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Join_Nodes_21_CCR_0.10_WeightType_Random#2_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 92500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 82, 0), new ScheduledTask(24080, 24265, 1), new ScheduledTask(33250, 33435, 2), new ScheduledTask(50300, 50465, 3), new ScheduledTask(17300, 17465, 3), new ScheduledTask(8500, 8665, 2), new ScheduledTask(53720, 53885, 1), new ScheduledTask(61000, 61165, 2), new ScheduledTask(53400, 53544, 0), new ScheduledTask(24600, 24744, 0), new ScheduledTask(71900, 72044, 0), new ScheduledTask(39000, 39144, 0), new ScheduledTask(9200, 9324, 1), new ScheduledTask(73520, 73623, 1), new ScheduledTask(12300, 12382, 0), new ScheduledTask(46280, 46342, 1), new ScheduledTask(9100, 9141, 3), new ScheduledTask(67800, 67841, 0), new ScheduledTask(20500, 20541, 0), new ScheduledTask(8200, 8241, 0), new ScheduledTask(86300, 86362, 0)};
        int[] expectedProcessorEndTimes = new int[]{86362, 73623, 61165, 50465};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_21_CCR_0dot10_WeightType_Random3_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Join_Nodes_21_CCR_0.10_WeightType_Random#3_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 153000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 35, 0), new ScheduledTask(59100, 59274, 0), new ScheduledTask(3900, 4074, 1), new ScheduledTask(36500, 36674, 0), new ScheduledTask(118200, 118374, 0), new ScheduledTask(3500, 3674, 0), new ScheduledTask(76500, 76674, 0), new ScheduledTask(93900, 94039, 0), new ScheduledTask(24700, 24822, 2), new ScheduledTask(107800, 107904, 0), new ScheduledTask(26100, 26204, 0), new ScheduledTask(46300, 46387, 3), new ScheduledTask(97900, 97970, 2), new ScheduledTask(4300, 4370, 3), new ScheduledTask(98500, 98570, 3), new ScheduledTask(108300, 108352, 1), new ScheduledTask(135600, 135652, 0), new ScheduledTask(53900, 53952, 0), new ScheduledTask(20900, 20952, 0), new ScheduledTask(3700, 3735, 2), new ScheduledTask(140800, 140922, 0)};
        int[] expectedProcessorEndTimes = new int[]{140922, 108352, 97970, 98570};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_21_CCR_0dot10_WeightType_Random4_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Join_Nodes_21_CCR_0.10_WeightType_Random#4_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 155200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 80, 0), new ScheduledTask(84800, 84960, 0), new ScheduledTask(12800, 12960, 0), new ScheduledTask(129600, 129760, 0), new ScheduledTask(52800, 52960, 0), new ScheduledTask(36800, 36960, 0), new ScheduledTask(8400, 8544, 1), new ScheduledTask(108800, 108928, 0), new ScheduledTask(37200, 37328, 2), new ScheduledTask(8300, 8428, 3), new ScheduledTask(68800, 68928, 0), new ScheduledTask(85100, 85196, 3), new ScheduledTask(100800, 100880, 0), new ScheduledTask(121600, 121680, 0), new ScheduledTask(94800, 94880, 1), new ScheduledTask(28800, 28880, 0), new ScheduledTask(8400, 8448, 2), new ScheduledTask(114000, 114048, 2), new ScheduledTask(8000, 8048, 0), new ScheduledTask(81600, 81632, 0), new ScheduledTask(145600, 145696, 0)};
        int[] expectedProcessorEndTimes = new int[]{145696, 94880, 114048, 85196};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_21_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Join_Nodes_21_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1202;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 80, 0), new ScheduledTask(576, 736, 0), new ScheduledTask(128, 288, 0), new ScheduledTask(514, 674, 1), new ScheduledTask(946, 1106, 1), new ScheduledTask(944, 1104, 0), new ScheduledTask(674, 818, 1), new ScheduledTask(130, 258, 1), new ScheduledTask(258, 386, 1), new ScheduledTask(386, 514, 1), new ScheduledTask(818, 946, 1), new ScheduledTask(368, 464, 0), new ScheduledTask(736, 816, 0), new ScheduledTask(864, 944, 0), new ScheduledTask(464, 544, 0), new ScheduledTask(288, 368, 0), new ScheduledTask(816, 864, 0), new ScheduledTask(82, 130, 1), new ScheduledTask(80, 128, 0), new ScheduledTask(544, 576, 0), new ScheduledTask(1106, 1202, 1)};
        int[] expectedProcessorEndTimes = new int[]{1104, 1202};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_21_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Join_Nodes_21_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 530;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 80, 0), new ScheduledTask(264, 424, 1), new ScheduledTask(80, 240, 0), new ScheduledTask(84, 244, 2), new ScheduledTask(85, 245, 3), new ScheduledTask(272, 432, 0), new ScheduledTask(210, 354, 4), new ScheduledTask(83, 211, 5), new ScheduledTask(211, 339, 5), new ScheduledTask(293, 421, 3), new ScheduledTask(244, 372, 2), new ScheduledTask(168, 264, 1), new ScheduledTask(339, 419, 5), new ScheduledTask(130, 210, 4), new ScheduledTask(354, 434, 4), new ScheduledTask(88, 168, 1), new ScheduledTask(245, 293, 3), new ScheduledTask(82, 130, 4), new ScheduledTask(372, 420, 2), new ScheduledTask(240, 272, 0), new ScheduledTask(434, 530, 4)};
        int[] expectedProcessorEndTimes = new int[]{432, 424, 420, 421, 530, 419};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_21_CCR_0dot10_WeightType_Random5_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Join_Nodes_21_CCR_0.10_WeightType_Random#5_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 161000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 77, 0), new ScheduledTask(41600, 41754, 0), new ScheduledTask(7900, 8054, 1), new ScheduledTask(26200, 26354, 0), new ScheduledTask(57000, 57139, 0), new ScheduledTask(106400, 106539, 0), new ScheduledTask(92500, 92639, 0), new ScheduledTask(80200, 80323, 0), new ScheduledTask(45100, 45223, 2), new ScheduledTask(13900, 14023, 0), new ScheduledTask(73100, 73223, 3), new ScheduledTask(8300, 8408, 3), new ScheduledTask(120300, 120393, 0), new ScheduledTask(137300, 137393, 0), new ScheduledTask(70900, 70993, 0), new ScheduledTask(129600, 129677, 0), new ScheduledTask(100300, 100377, 1), new ScheduledTask(7900, 7962, 2), new ScheduledTask(7700, 7762, 0), new ScheduledTask(118900, 118946, 2), new ScheduledTask(147100, 147239, 0)};
        int[] expectedProcessorEndTimes = new int[]{147239, 100377, 118946, 73223};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_21_CCR_0dot10_WeightType_Random6_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Join_Nodes_21_CCR_0.10_WeightType_Random#6_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 144500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 111, 0), new ScheduledTask(47600, 47759, 0), new ScheduledTask(63500, 63659, 0), new ScheduledTask(40500, 40659, 1), new ScheduledTask(79400, 79543, 0), new ScheduledTask(33300, 33443, 0), new ScheduledTask(106400, 106527, 0), new ScheduledTask(93700, 93827, 0), new ScheduledTask(130200, 130311, 0), new ScheduledTask(22200, 22311, 0), new ScheduledTask(119100, 119211, 0), new ScheduledTask(11100, 11211, 0), new ScheduledTask(11800, 11896, 2), new ScheduledTask(59900, 59980, 3), new ScheduledTask(11900, 11980, 3), new ScheduledTask(107900, 107948, 3), new ScheduledTask(107800, 107848, 2), new ScheduledTask(11700, 11748, 1), new ScheduledTask(69400, 69432, 2), new ScheduledTask(88600, 88632, 2), new ScheduledTask(141300, 141332, 0)};
        int[] expectedProcessorEndTimes = new int[]{141332, 40659, 107848, 107948};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_21_CCR_0dot10_WeightType_Random6_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Join_Nodes_21_CCR_0.10_WeightType_Random#6_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 92100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 111, 0), new ScheduledTask(73000, 73159, 0), new ScheduledTask(56700, 56859, 1), new ScheduledTask(11700, 11859, 2), new ScheduledTask(59700, 59843, 3), new ScheduledTask(11900, 12043, 3), new ScheduledTask(53100, 53227, 2), new ScheduledTask(55500, 55627, 0), new ScheduledTask(33300, 33411, 0), new ScheduledTask(22200, 22311, 0), new ScheduledTask(44400, 44511, 0), new ScheduledTask(11100, 11211, 0), new ScheduledTask(40500, 40596, 3), new ScheduledTask(34300, 34380, 1), new ScheduledTask(11900, 11980, 1), new ScheduledTask(78500, 78548, 2), new ScheduledTask(43500, 43548, 2), new ScheduledTask(68200, 68248, 0), new ScheduledTask(27900, 27932, 1), new ScheduledTask(50300, 50332, 1), new ScheduledTask(88900, 88932, 0)};
        int[] expectedProcessorEndTimes = new int[]{88932, 56859, 78548, 59843};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_21_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Join_Nodes_21_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 635;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 111, 0), new ScheduledTask(289, 448, 1), new ScheduledTask(440, 599, 2), new ScheduledTask(117, 276, 3), new ScheduledTask(460, 603, 0), new ScheduledTask(448, 591, 1), new ScheduledTask(356, 483, 3), new ScheduledTask(333, 460, 0), new ScheduledTask(483, 594, 3), new ScheduledTask(121, 232, 2), new ScheduledTask(222, 333, 0), new ScheduledTask(111, 222, 0), new ScheduledTask(312, 408, 2), new ScheduledTask(276, 356, 3), new ScheduledTask(232, 312, 2), new ScheduledTask(113, 161, 1), new ScheduledTask(193, 241, 1), new ScheduledTask(241, 289, 1), new ScheduledTask(408, 440, 2), new ScheduledTask(161, 193, 1), new ScheduledTask(603, 635, 0)};
        int[] expectedProcessorEndTimes = new int[]{635, 591, 599, 594};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_21_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Join_Nodes_21_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 476;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 111, 0), new ScheduledTask(197, 356, 1), new ScheduledTask(278, 437, 2), new ScheduledTask(272, 431, 3), new ScheduledTask(292, 435, 4), new ScheduledTask(289, 432, 5), new ScheduledTask(114, 241, 5), new ScheduledTask(165, 292, 4), new ScheduledTask(113, 224, 3), new ScheduledTask(222, 333, 0), new ScheduledTask(111, 222, 0), new ScheduledTask(333, 444, 0), new ScheduledTask(118, 214, 2), new ScheduledTask(117, 197, 1), new ScheduledTask(356, 436, 1), new ScheduledTask(241, 289, 5), new ScheduledTask(117, 165, 4), new ScheduledTask(224, 272, 3), new ScheduledTask(214, 246, 2), new ScheduledTask(246, 278, 2), new ScheduledTask(444, 476, 0)};
        int[] expectedProcessorEndTimes = new int[]{476, 436, 437, 431, 435, 432};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_21_CCR_0dot10_WeightType_Random7_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Join_Nodes_21_CCR_0.10_WeightType_Random#7_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 186200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 186, 0), new ScheduledTask(43400, 43607, 0), new ScheduledTask(119900, 120107, 0), new ScheduledTask(72300, 72507, 0), new ScheduledTask(93000, 93207, 0), new ScheduledTask(56500, 56686, 1), new ScheduledTask(68800, 68966, 2), new ScheduledTask(155100, 155266, 0), new ScheduledTask(140600, 140745, 0), new ScheduledTask(24800, 24924, 0), new ScheduledTask(106600, 106704, 3), new ScheduledTask(44200, 44304, 3), new ScheduledTask(19000, 19083, 2), new ScheduledTask(19300, 19362, 1), new ScheduledTask(37200, 37262, 0), new ScheduledTask(18600, 18662, 0), new ScheduledTask(113700, 113762, 0), new ScheduledTask(19600, 19641, 3), new ScheduledTask(64100, 64141, 0), new ScheduledTask(68200, 68241, 0), new ScheduledTask(171700, 171845, 0)};
        int[] expectedProcessorEndTimes = new int[]{171845, 56686, 68966, 106704};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_21_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Join_Nodes_21_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 726;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 186, 0), new ScheduledTask(186, 393, 0), new ScheduledTask(191, 398, 1), new ScheduledTask(374, 581, 2), new ScheduledTask(192, 399, 3), new ScheduledTask(382, 568, 4), new ScheduledTask(398, 564, 1), new ScheduledTask(400, 566, 5), new ScheduledTask(255, 400, 5), new ScheduledTask(196, 320, 4), new ScheduledTask(399, 503, 3), new ScheduledTask(188, 292, 2), new ScheduledTask(434, 517, 0), new ScheduledTask(193, 255, 5), new ScheduledTask(320, 382, 4), new ScheduledTask(503, 565, 3), new ScheduledTask(517, 579, 0), new ScheduledTask(292, 333, 2), new ScheduledTask(333, 374, 2), new ScheduledTask(393, 434, 0), new ScheduledTask(581, 726, 2)};
        int[] expectedProcessorEndTimes = new int[]{579, 564, 726, 565, 568, 566};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_21_CCR_0dot10_WeightType_Random8_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Join_Nodes_21_CCR_0.10_WeightType_Random#8_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 167700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 166, 0), new ScheduledTask(120100, 120286, 0), new ScheduledTask(97300, 97466, 0), new ScheduledTask(54500, 54645, 1), new ScheduledTask(49700, 49845, 0), new ScheduledTask(16600, 16745, 0), new ScheduledTask(67000, 67124, 2), new ScheduledTask(37300, 37424, 0), new ScheduledTask(138700, 138824, 0), new ScheduledTask(17200, 17304, 3), new ScheduledTask(79600, 79704, 3), new ScheduledTask(64200, 64304, 0), new ScheduledTask(17200, 17283, 2), new ScheduledTask(82800, 82883, 0), new ScheduledTask(17300, 17362, 1), new ScheduledTask(91100, 91162, 0), new ScheduledTask(113900, 113962, 0), new ScheduledTask(31100, 31162, 0), new ScheduledTask(74600, 74641, 0), new ScheduledTask(78700, 78741, 0), new ScheduledTask(151100, 151266, 0)};
        int[] expectedProcessorEndTimes = new int[]{151266, 54645, 67124, 79704};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_21_CCR_0dot10_WeightType_Random9_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Join_Nodes_21_CCR_0.10_WeightType_Random#9_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 143300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 81, 0), new ScheduledTask(21100, 21247, 0), new ScheduledTask(79800, 79947, 0), new ScheduledTask(8100, 8230, 0), new ScheduledTask(47200, 47314, 0), new ScheduledTask(35800, 35914, 0), new ScheduledTask(94500, 94614, 0), new ScheduledTask(120500, 120614, 0), new ScheduledTask(68400, 68514, 0), new ScheduledTask(58600, 58698, 0), new ScheduledTask(28400, 28498, 1), new ScheduledTask(8700, 8798, 2), new ScheduledTask(8900, 8998, 3), new ScheduledTask(67700, 67798, 3), new ScheduledTask(67500, 67598, 2), new ScheduledTask(105900, 105981, 0), new ScheduledTask(114000, 114065, 0), new ScheduledTask(8600, 8633, 1), new ScheduledTask(87200, 87233, 1), new ScheduledTask(107000, 107033, 1), new ScheduledTask(131900, 132014, 0)};
        int[] expectedProcessorEndTimes = new int[]{132014, 107033, 67598, 67798};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_21_CCR_0dot10_WeightType_Random9_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Join_Nodes_21_CCR_0.10_WeightType_Random#9_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 94400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 81, 0), new ScheduledTask(8900, 9047, 1), new ScheduledTask(51500, 51647, 1), new ScheduledTask(17900, 18030, 0), new ScheduledTask(51300, 51414, 2), new ScheduledTask(28500, 28614, 2), new ScheduledTask(42300, 42414, 0), new ScheduledTask(61800, 61914, 0), new ScheduledTask(30900, 31014, 0), new ScheduledTask(8900, 8998, 3), new ScheduledTask(41500, 41598, 3), new ScheduledTask(61100, 61198, 3), new ScheduledTask(8900, 8998, 2), new ScheduledTask(8100, 8198, 0), new ScheduledTask(73200, 73298, 0), new ScheduledTask(53700, 53781, 0), new ScheduledTask(28500, 28565, 3), new ScheduledTask(74100, 74133, 2), new ScheduledTask(38300, 38333, 1), new ScheduledTask(44900, 44933, 1), new ScheduledTask(83000, 83114, 0)};
        int[] expectedProcessorEndTimes = new int[]{83114, 51647, 74133, 61198};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_21_CCR_0dot10_WeightType_Random9_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Join_Nodes_21_CCR_0.10_WeightType_Random#9_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 81300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 81, 0), new ScheduledTask(8900, 9047, 3), new ScheduledTask(47600, 47747, 2), new ScheduledTask(8100, 8230, 0), new ScheduledTask(21100, 21214, 0), new ScheduledTask(38300, 38414, 3), new ScheduledTask(8600, 8714, 1), new ScheduledTask(58500, 58614, 0), new ScheduledTask(32500, 32614, 0), new ScheduledTask(23000, 23098, 2), new ScheduledTask(22280, 22378, 1), new ScheduledTask(34040, 34138, 1), new ScheduledTask(45800, 45898, 1), new ScheduledTask(57560, 57658, 1), new ScheduledTask(8300, 8398, 2), new ScheduledTask(43900, 43981, 0), new ScheduledTask(52000, 52065, 0), new ScheduledTask(61100, 61133, 3), new ScheduledTask(37700, 37733, 2), new ScheduledTask(42650, 42683, 2), new ScheduledTask(69900, 70014, 0)};
        int[] expectedProcessorEndTimes = new int[]{70014, 57658, 47747, 61133};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Join_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 16;
        int expectedScheduleEndTime = 394;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 53, 0), new ScheduledTask(58, 235, 1), new ScheduledTask(53, 230, 0), new ScheduledTask(62, 221, 2), new ScheduledTask(62, 221, 3), new ScheduledTask(59, 200, 4), new ScheduledTask(58, 182, 5), new ScheduledTask(58, 182, 6), new ScheduledTask(63, 187, 7), new ScheduledTask(55, 179, 8), new ScheduledTask(58, 164, 9), new ScheduledTask(61, 167, 10), new ScheduledTask(58, 164, 11), new ScheduledTask(60, 166, 12), new ScheduledTask(56, 144, 13), new ScheduledTask(61, 132, 14), new ScheduledTask(125, 196, 15), new ScheduledTask(90, 125, 15), new ScheduledTask(55, 90, 15), new ScheduledTask(196, 231, 15), new ScheduledTask(235, 394, 1)};
        int[] expectedProcessorEndTimes = new int[]{230, 394, 221, 221, 200, 182, 182, 187, 179, 164, 167, 164, 166, 144, 132, 231};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Join_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 741;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 53, 0), new ScheduledTask(58, 235, 1), new ScheduledTask(398, 575, 2), new ScheduledTask(62, 221, 2), new ScheduledTask(412, 571, 3), new ScheduledTask(306, 447, 1), new ScheduledTask(58, 182, 3), new ScheduledTask(182, 306, 3), new ScheduledTask(447, 571, 1), new ScheduledTask(458, 582, 0), new ScheduledTask(306, 412, 3), new ScheduledTask(221, 327, 2), new ScheduledTask(194, 300, 0), new ScheduledTask(88, 194, 0), new ScheduledTask(300, 388, 0), new ScheduledTask(327, 398, 2), new ScheduledTask(235, 306, 1), new ScheduledTask(388, 423, 0), new ScheduledTask(423, 458, 0), new ScheduledTask(53, 88, 0), new ScheduledTask(582, 741, 0)};
        int[] expectedProcessorEndTimes = new int[]{741, 571, 575, 571};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Join_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 482;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 53, 0), new ScheduledTask(58, 235, 1), new ScheduledTask(132, 309, 2), new ScheduledTask(164, 323, 3), new ScheduledTask(159, 318, 0), new ScheduledTask(144, 285, 4), new ScheduledTask(58, 182, 5), new ScheduledTask(182, 306, 5), new ScheduledTask(90, 214, 6), new ScheduledTask(196, 320, 7), new ScheduledTask(90, 196, 7), new ScheduledTask(53, 159, 0), new ScheduledTask(58, 164, 3), new ScheduledTask(214, 320, 6), new ScheduledTask(56, 144, 4), new ScheduledTask(61, 132, 2), new ScheduledTask(235, 306, 1), new ScheduledTask(55, 90, 7), new ScheduledTask(55, 90, 6), new ScheduledTask(285, 320, 4), new ScheduledTask(323, 482, 3)};
        int[] expectedProcessorEndTimes = new int[]{318, 306, 309, 482, 320, 306, 320, 320};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_21_CCR_0dot10_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Join_Nodes_21_CCR_0.10_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 181200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 142, 0), new ScheduledTask(91500, 91703, 0), new ScheduledTask(71200, 71403, 0), new ScheduledTask(111800, 111983, 0), new ScheduledTask(14200, 14363, 0), new ScheduledTask(130100, 130263, 0), new ScheduledTask(156600, 156763, 0), new ScheduledTask(15200, 15342, 1), new ScheduledTask(87600, 87742, 2), new ScheduledTask(87900, 88022, 3), new ScheduledTask(14700, 14822, 3), new ScheduledTask(44700, 44802, 0), new ScheduledTask(100400, 100502, 1), new ScheduledTask(61000, 61102, 0), new ScheduledTask(146400, 146502, 0), new ScheduledTask(39000, 39081, 2), new ScheduledTask(30500, 30581, 0), new ScheduledTask(54900, 54961, 0), new ScheduledTask(38600, 38661, 0), new ScheduledTask(14400, 14441, 2), new ScheduledTask(173100, 173181, 0)};
        int[] expectedProcessorEndTimes = new int[]{173181, 100502, 87742, 88022};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_21_CCR_0dot10_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Join_Nodes_21_CCR_0.10_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 101500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 142, 0), new ScheduledTask(14800, 15003, 1), new ScheduledTask(61000, 61203, 2), new ScheduledTask(56000, 56183, 3), new ScheduledTask(15200, 15363, 3), new ScheduledTask(53800, 53963, 1), new ScheduledTask(73360, 73523, 1), new ScheduledTask(28400, 28542, 0), new ScheduledTask(14200, 14342, 0), new ScheduledTask(39160, 39282, 1), new ScheduledTask(62900, 63022, 0), new ScheduledTask(30400, 30502, 2), new ScheduledTask(15100, 15202, 2), new ScheduledTask(45700, 45802, 2), new ScheduledTask(83200, 83302, 0), new ScheduledTask(75100, 75181, 0), new ScheduledTask(42600, 42681, 0), new ScheduledTask(56800, 56861, 0), new ScheduledTask(50700, 50761, 0), new ScheduledTask(47800, 47841, 3), new ScheduledTask(93400, 93481, 0)};
        int[] expectedProcessorEndTimes = new int[]{93481, 73523, 61203, 56183};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_21_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Join_Nodes_21_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 629;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 142, 0), new ScheduledTask(142, 345, 0), new ScheduledTask(345, 548, 0), new ScheduledTask(354, 537, 1), new ScheduledTask(152, 315, 2), new ScheduledTask(374, 537, 3), new ScheduledTask(375, 538, 4), new ScheduledTask(294, 436, 5), new ScheduledTask(152, 294, 5), new ScheduledTask(253, 375, 4), new ScheduledTask(252, 374, 3), new ScheduledTask(151, 253, 4), new ScheduledTask(436, 538, 5), new ScheduledTask(150, 252, 3), new ScheduledTask(437, 539, 2), new ScheduledTask(356, 437, 2), new ScheduledTask(151, 232, 1), new ScheduledTask(293, 354, 1), new ScheduledTask(232, 293, 1), new ScheduledTask(315, 356, 2), new ScheduledTask(548, 629, 0)};
        int[] expectedProcessorEndTimes = new int[]{629, 537, 539, 537, 538, 538};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_21_CCR_0dot99_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Join_Nodes_21_CCR_0.99_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 16200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 13, 0), new ScheduledTask(9200, 9219, 0), new ScheduledTask(11100, 11119, 0), new ScheduledTask(7500, 7517, 0), new ScheduledTask(3900, 3917, 0), new ScheduledTask(1500, 1511, 1), new ScheduledTask(1500, 1513, 2), new ScheduledTask(2700, 2708, 0), new ScheduledTask(13000, 13015, 0), new ScheduledTask(6400, 6406, 3), new ScheduledTask(8100, 8111, 1), new ScheduledTask(6700, 6708, 0), new ScheduledTask(1900, 1908, 0), new ScheduledTask(1600, 1608, 3), new ScheduledTask(5600, 5611, 0), new ScheduledTask(1300, 1306, 0), new ScheduledTask(10000, 10008, 3), new ScheduledTask(9300, 9309, 2), new ScheduledTask(3500, 3504, 0), new ScheduledTask(14500, 14508, 0), new ScheduledTask(15300, 15309, 0)};
        int[] expectedProcessorEndTimes = new int[]{15309, 8111, 9309, 10008};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_21_CCR_0dot99_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Join_Nodes_21_CCR_0.99_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 16600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(11600, 11620, 0), new ScheduledTask(800, 818, 1), new ScheduledTask(5800, 5820, 0), new ScheduledTask(1900, 1916, 0), new ScheduledTask(800, 820, 2), new ScheduledTask(4100, 4114, 3), new ScheduledTask(8700, 8718, 0), new ScheduledTask(7800, 7809, 0), new ScheduledTask(4200, 4216, 0), new ScheduledTask(13600, 13611, 0), new ScheduledTask(10500, 10511, 0), new ScheduledTask(14700, 14714, 0), new ScheduledTask(3500, 3507, 0), new ScheduledTask(1100, 1105, 3), new ScheduledTask(500, 509, 0), new ScheduledTask(1400, 1405, 0), new ScheduledTask(11600, 11607, 1), new ScheduledTask(12500, 12505, 3), new ScheduledTask(12800, 12805, 2), new ScheduledTask(16100, 16105, 0)};
        int[] expectedProcessorEndTimes = new int[]{16105, 11607, 12805, 12505};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_21_CCR_1dot00_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Join_Nodes_21_CCR_1.00_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 15800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(2200, 2216, 0), new ScheduledTask(4700, 4716, 0), new ScheduledTask(10100, 10117, 0), new ScheduledTask(1500, 1510, 1), new ScheduledTask(12700, 12714, 0), new ScheduledTask(6300, 6312, 2), new ScheduledTask(1800, 1809, 3), new ScheduledTask(7200, 7210, 3), new ScheduledTask(11800, 11809, 0), new ScheduledTask(7300, 7307, 0), new ScheduledTask(7500, 7510, 1), new ScheduledTask(1200, 1210, 0), new ScheduledTask(8000, 8012, 0), new ScheduledTask(3300, 3305, 2), new ScheduledTask(9200, 9209, 0), new ScheduledTask(6800, 6805, 0), new ScheduledTask(6300, 6305, 0), new ScheduledTask(3800, 3809, 0), new ScheduledTask(1500, 1503, 2), new ScheduledTask(14100, 14117, 0)};
        int[] expectedProcessorEndTimes = new int[]{14117, 7510, 6312, 7210};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_21_CCR_1dot00_WeightType_Random2_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Join_Nodes_21_CCR_1.00_WeightType_Random#2_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 14900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(5200, 5216, 0), new ScheduledTask(1100, 1115, 0), new ScheduledTask(2600, 2616, 0), new ScheduledTask(11600, 11616, 0), new ScheduledTask(1000, 1011, 1), new ScheduledTask(10100, 10115, 0), new ScheduledTask(8200, 8216, 0), new ScheduledTask(4200, 4210, 0), new ScheduledTask(5900, 5913, 2), new ScheduledTask(6800, 6811, 3), new ScheduledTask(800, 810, 3), new ScheduledTask(7600, 7610, 1), new ScheduledTask(1100, 1108, 2), new ScheduledTask(600, 605, 0), new ScheduledTask(7100, 7111, 0), new ScheduledTask(6800, 6803, 0), new ScheduledTask(13500, 13506, 0), new ScheduledTask(13200, 13203, 0), new ScheduledTask(9800, 9803, 0), new ScheduledTask(14100, 14108, 0)};
        int[] expectedProcessorEndTimes = new int[]{14108, 7610, 5913, 6811};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_21_CCR_1dot00_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Join_Nodes_21_CCR_1.00_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 17900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 15, 0), new ScheduledTask(13400, 13421, 0), new ScheduledTask(9400, 9421, 0), new ScheduledTask(3000, 3019, 0), new ScheduledTask(5800, 5817, 0), new ScheduledTask(11500, 11519, 0), new ScheduledTask(5700, 5711, 1), new ScheduledTask(1900, 1911, 0), new ScheduledTask(4900, 4909, 0), new ScheduledTask(2000, 2013, 2), new ScheduledTask(7900, 7915, 0), new ScheduledTask(8500, 8509, 3), new ScheduledTask(1900, 1911, 3), new ScheduledTask(15500, 15513, 0), new ScheduledTask(9800, 9811, 2), new ScheduledTask(2100, 2106, 1), new ScheduledTask(12300, 12306, 1), new ScheduledTask(1500, 1504, 0), new ScheduledTask(13900, 13904, 3), new ScheduledTask(7500, 7504, 0), new ScheduledTask(16800, 16811, 0)};
        int[] expectedProcessorEndTimes = new int[]{16811, 12306, 9811, 13904};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_21_CCR_1dot01_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Join_Nodes_21_CCR_1.01_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 15200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(10200, 10217, 0), new ScheduledTask(1600, 1617, 1), new ScheduledTask(9000, 9012, 0), new ScheduledTask(1500, 1515, 2), new ScheduledTask(8000, 8010, 0), new ScheduledTask(6700, 6713, 0), new ScheduledTask(2700, 2715, 0), new ScheduledTask(5200, 5215, 0), new ScheduledTask(1600, 1608, 3), new ScheduledTask(13200, 13213, 0), new ScheduledTask(11900, 11913, 0), new ScheduledTask(6400, 6408, 3), new ScheduledTask(4200, 4210, 0), new ScheduledTask(1200, 1208, 0), new ScheduledTask(2000, 2007, 0), new ScheduledTask(10500, 10503, 2), new ScheduledTask(11800, 11803, 1), new ScheduledTask(11200, 11205, 3), new ScheduledTask(12300, 12303, 2), new ScheduledTask(14500, 14507, 0)};
        int[] expectedProcessorEndTimes = new int[]{14507, 11803, 12303, 11205};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_21_CCR_1dot01_WeightType_Random2_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Join_Nodes_21_CCR_1.01_WeightType_Random#2_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 18200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 21, 0), new ScheduledTask(13700, 13719, 0), new ScheduledTask(6400, 6421, 0), new ScheduledTask(9900, 9919, 0), new ScheduledTask(8500, 8514, 0), new ScheduledTask(2500, 2514, 1), new ScheduledTask(6500, 6514, 2), new ScheduledTask(5400, 5410, 0), new ScheduledTask(2400, 2412, 3), new ScheduledTask(3500, 3512, 0), new ScheduledTask(11800, 11812, 0), new ScheduledTask(2300, 2307, 2), new ScheduledTask(10900, 10907, 1), new ScheduledTask(15600, 15607, 0), new ScheduledTask(4700, 4707, 0), new ScheduledTask(13000, 13007, 0), new ScheduledTask(2800, 2807, 0), new ScheduledTask(9600, 9605, 3), new ScheduledTask(2100, 2107, 0), new ScheduledTask(12600, 12605, 3), new ScheduledTask(16300, 16319, 0)};
        int[] expectedProcessorEndTimes = new int[]{16319, 10907, 6514, 12605};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_21_CCR_1dot01_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Join_Nodes_21_CCR_1.01_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 14300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(2800, 2814, 0), new ScheduledTask(10200, 10213, 0), new ScheduledTask(11800, 11814, 0), new ScheduledTask(6300, 6314, 0), new ScheduledTask(1600, 1611, 1), new ScheduledTask(5800, 5808, 2), new ScheduledTask(1400, 1414, 0), new ScheduledTask(1600, 1607, 3), new ScheduledTask(7700, 7710, 0), new ScheduledTask(5800, 5811, 3), new ScheduledTask(2200, 2206, 2), new ScheduledTask(8700, 8708, 0), new ScheduledTask(4200, 4211, 0), new ScheduledTask(8200, 8207, 1), new ScheduledTask(5300, 5307, 0), new ScheduledTask(9500, 9507, 0), new ScheduledTask(6000, 6003, 0), new ScheduledTask(11500, 11503, 0), new ScheduledTask(10600, 10604, 2), new ScheduledTask(13200, 13211, 0)};
        int[] expectedProcessorEndTimes = new int[]{13211, 8207, 10604, 5811};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_21_CCR_1dot02_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Join_Nodes_21_CCR_1.02_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 16200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(5100, 5117, 0), new ScheduledTask(3700, 3714, 0), new ScheduledTask(13100, 13117, 0), new ScheduledTask(11700, 11714, 0), new ScheduledTask(1000, 1017, 0), new ScheduledTask(1300, 1312, 1), new ScheduledTask(8100, 8116, 0), new ScheduledTask(4200, 4217, 2), new ScheduledTask(1300, 1314, 3), new ScheduledTask(7100, 7110, 0), new ScheduledTask(10700, 10710, 0), new ScheduledTask(9700, 9710, 0), new ScheduledTask(9700, 9705, 3), new ScheduledTask(2700, 2707, 0), new ScheduledTask(8500, 8510, 1), new ScheduledTask(1200, 1205, 2), new ScheduledTask(3400, 3403, 0), new ScheduledTask(6800, 6803, 0), new ScheduledTask(12700, 12703, 3), new ScheduledTask(14800, 14814, 0)};
        int[] expectedProcessorEndTimes = new int[]{14814, 8510, 4217, 12703};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_21_CCR_1dot02_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Join_Nodes_21_CCR_1.02_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 19000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(13400, 13420, 0), new ScheduledTask(7000, 7020, 0), new ScheduledTask(11800, 11816, 0), new ScheduledTask(10200, 10216, 0), new ScheduledTask(4000, 4016, 0), new ScheduledTask(4100, 4120, 1), new ScheduledTask(2400, 2416, 0), new ScheduledTask(1000, 1016, 2), new ScheduledTask(5000, 5012, 3), new ScheduledTask(5600, 5614, 0), new ScheduledTask(16200, 16210, 0), new ScheduledTask(800, 816, 0), new ScheduledTask(9600, 9606, 0), new ScheduledTask(15400, 15408, 0), new ScheduledTask(1400, 1406, 3), new ScheduledTask(10600, 10610, 2), new ScheduledTask(1700, 1704, 1), new ScheduledTask(12200, 12208, 3), new ScheduledTask(9000, 9006, 0), new ScheduledTask(17200, 17218, 0)};
        int[] expectedProcessorEndTimes = new int[]{17218, 4120, 10610, 12208};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_21_CCR_1dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Join_Nodes_21_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 148;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(82, 102, 0), new ScheduledTask(96, 116, 1), new ScheduledTask(60, 76, 0), new ScheduledTask(44, 60, 0), new ScheduledTask(74, 90, 1), new ScheduledTask(26, 46, 1), new ScheduledTask(46, 62, 1), new ScheduledTask(10, 26, 1), new ScheduledTask(62, 74, 1), new ScheduledTask(116, 130, 1), new ScheduledTask(110, 120, 0), new ScheduledTask(8, 24, 0), new ScheduledTask(90, 96, 1), new ScheduledTask(102, 110, 0), new ScheduledTask(76, 82, 0), new ScheduledTask(28, 38, 0), new ScheduledTask(24, 28, 0), new ScheduledTask(120, 128, 0), new ScheduledTask(38, 44, 0), new ScheduledTask(130, 148, 1)};
        int[] expectedProcessorEndTimes = new int[]{128, 148};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_21_CCR_10dot01_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Join_Nodes_21_CCR_10.01_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 11000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(5100, 5107, 0), new ScheduledTask(1100, 1110, 0), new ScheduledTask(2100, 2110, 0), new ScheduledTask(3100, 3104, 0), new ScheduledTask(9300, 9307, 0), new ScheduledTask(8300, 8310, 0), new ScheduledTask(7600, 7607, 0), new ScheduledTask(4100, 4106, 0), new ScheduledTask(6700, 6704, 0), new ScheduledTask(5800, 5809, 0), new ScheduledTask(3700, 3702, 1), new ScheduledTask(4700, 4704, 0), new ScheduledTask(1900, 1905, 2), new ScheduledTask(4900, 4903, 2), new ScheduledTask(7100, 7105, 0), new ScheduledTask(5000, 5004, 1), new ScheduledTask(3500, 3506, 0), new ScheduledTask(2500, 2510, 3), new ScheduledTask(700, 704, 0), new ScheduledTask(10000, 10010, 0)};
        int[] expectedProcessorEndTimes = new int[]{10010, 5004, 4903, 2510};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_21_CCR_10dot02_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Join_Nodes_21_CCR_10.02_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(8100, 8104, 0), new ScheduledTask(1100, 1107, 0), new ScheduledTask(5800, 5807, 0), new ScheduledTask(5200, 5206, 0), new ScheduledTask(4900, 4903, 0), new ScheduledTask(7200, 7209, 0), new ScheduledTask(300, 308, 0), new ScheduledTask(2300, 2307, 0), new ScheduledTask(4300, 4306, 0), new ScheduledTask(8500, 8508, 0), new ScheduledTask(1800, 1805, 0), new ScheduledTask(2400, 2408, 1), new ScheduledTask(3200, 3206, 2), new ScheduledTask(3300, 3310, 0), new ScheduledTask(4200, 4202, 3), new ScheduledTask(6500, 6507, 0), new ScheduledTask(5400, 5404, 3), new ScheduledTask(2400, 2403, 3), new ScheduledTask(3000, 3003, 0), new ScheduledTask(9300, 9308, 0)};
        int[] expectedProcessorEndTimes = new int[]{9308, 2408, 3206, 5404};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_21_CCR_10dot03_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Join_Nodes_21_CCR_10.03_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(7000, 7010, 0), new ScheduledTask(6200, 6208, 0), new ScheduledTask(2700, 2708, 0), new ScheduledTask(5200, 5210, 0), new ScheduledTask(2100, 2106, 0), new ScheduledTask(1300, 1308, 0), new ScheduledTask(9000, 9010, 0), new ScheduledTask(600, 607, 0), new ScheduledTask(1500, 1502, 1), new ScheduledTask(2000, 2002, 2), new ScheduledTask(4700, 4702, 1), new ScheduledTask(3500, 3507, 0), new ScheduledTask(8000, 8010, 0), new ScheduledTask(3300, 3303, 3), new ScheduledTask(4200, 4210, 0), new ScheduledTask(5100, 5103, 3), new ScheduledTask(4200, 4203, 2), new ScheduledTask(6000, 6004, 2), new ScheduledTask(5900, 5903, 1), new ScheduledTask(10000, 10003, 0)};
        int[] expectedProcessorEndTimes = new int[]{10003, 5903, 6004, 5103};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_21_CCR_9dot94_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Join_Nodes_21_CCR_9.94_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 11100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(4800, 4807, 0), new ScheduledTask(9900, 9904, 0), new ScheduledTask(1200, 1204, 0), new ScheduledTask(1800, 1803, 1), new ScheduledTask(2600, 2610, 0), new ScheduledTask(3600, 3603, 0), new ScheduledTask(800, 804, 0), new ScheduledTask(5500, 5507, 0), new ScheduledTask(6900, 6909, 0), new ScheduledTask(1600, 1610, 0), new ScheduledTask(6200, 6207, 0), new ScheduledTask(9400, 9405, 0), new ScheduledTask(1800, 1809, 2), new ScheduledTask(500, 503, 0), new ScheduledTask(1800, 1810, 3), new ScheduledTask(8500, 8509, 0), new ScheduledTask(7800, 7807, 0), new ScheduledTask(3900, 3909, 0), new ScheduledTask(3700, 3709, 1), new ScheduledTask(10400, 10407, 0)};
        int[] expectedProcessorEndTimes = new int[]{10407, 3709, 1809, 1810};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_21_CCR_9dot96_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Join_Nodes_21_CCR_9.96_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7700, 7708, 0), new ScheduledTask(1200, 1206, 0), new ScheduledTask(6700, 6710, 0), new ScheduledTask(5700, 5703, 0), new ScheduledTask(5500, 5502, 0), new ScheduledTask(1800, 1804, 0), new ScheduledTask(1000, 1002, 0), new ScheduledTask(3200, 3206, 0), new ScheduledTask(5100, 5104, 0), new ScheduledTask(700, 703, 0), new ScheduledTask(2900, 2903, 0), new ScheduledTask(2200, 2208, 1), new ScheduledTask(6000, 6007, 0), new ScheduledTask(4400, 4407, 0), new ScheduledTask(3800, 3806, 0), new ScheduledTask(2200, 2204, 2), new ScheduledTask(2200, 2208, 3), new ScheduledTask(4600, 4603, 2), new ScheduledTask(2200, 2207, 0), new ScheduledTask(8500, 8505, 0)};
        int[] expectedProcessorEndTimes = new int[]{8505, 2208, 4603, 2208};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_21_CCR_9dot98_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Join_Nodes_21_CCR_9.98_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(9200, 9205, 0), new ScheduledTask(3700, 3704, 0), new ScheduledTask(2800, 2809, 0), new ScheduledTask(7400, 7408, 0), new ScheduledTask(6900, 6905, 0), new ScheduledTask(6500, 6504, 0), new ScheduledTask(5500, 5506, 0), new ScheduledTask(2100, 2106, 1), new ScheduledTask(4500, 4510, 0), new ScheduledTask(800, 806, 0), new ScheduledTask(8200, 8210, 0), new ScheduledTask(4100, 4104, 0), new ScheduledTask(6100, 6104, 0), new ScheduledTask(600, 602, 0), new ScheduledTask(2000, 2008, 0), new ScheduledTask(5700, 5702, 1), new ScheduledTask(1400, 1406, 0), new ScheduledTask(2600, 2608, 2), new ScheduledTask(2600, 2608, 3), new ScheduledTask(9700, 9706, 0)};
        int[] expectedProcessorEndTimes = new int[]{9706, 5702, 2608, 2608};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_21_CCR_9dot99_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Join_Nodes_21_CCR_9.99_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(5100, 5110, 0), new ScheduledTask(4100, 4110, 0), new ScheduledTask(8400, 8409, 0), new ScheduledTask(7600, 7608, 0), new ScheduledTask(2100, 2103, 0), new ScheduledTask(2400, 2408, 0), new ScheduledTask(6900, 6907, 0), new ScheduledTask(1800, 1807, 1), new ScheduledTask(2500, 2506, 2), new ScheduledTask(1800, 1803, 0), new ScheduledTask(3600, 3606, 3), new ScheduledTask(1300, 1305, 0), new ScheduledTask(6000, 6002, 1), new ScheduledTask(9300, 9310, 0), new ScheduledTask(3200, 3209, 0), new ScheduledTask(6100, 6108, 0), new ScheduledTask(600, 607, 0), new ScheduledTask(7200, 7203, 3), new ScheduledTask(1800, 1803, 3), new ScheduledTask(10400, 10404, 0)};
        int[] expectedProcessorEndTimes = new int[]{10404, 6002, 2506, 7203};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_21_CCR_9dot99_WeightType_Random2_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Join_Nodes_21_CCR_9.99_WeightType_Random#2_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 11800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(5600, 5609, 0), new ScheduledTask(1700, 1709, 0), new ScheduledTask(8500, 8507, 0), new ScheduledTask(4900, 4907, 0), new ScheduledTask(9200, 9209, 0), new ScheduledTask(4400, 4402, 1), new ScheduledTask(4100, 4108, 0), new ScheduledTask(8000, 8005, 0), new ScheduledTask(1900, 1904, 1), new ScheduledTask(2600, 2602, 0), new ScheduledTask(7400, 7406, 0), new ScheduledTask(700, 710, 0), new ScheduledTask(6500, 6509, 0), new ScheduledTask(2600, 2602, 2), new ScheduledTask(3400, 3407, 0), new ScheduledTask(2800, 2806, 0), new ScheduledTask(2600, 2602, 3), new ScheduledTask(4400, 4409, 3), new ScheduledTask(3800, 3805, 2), new ScheduledTask(11000, 11008, 0)};
        int[] expectedProcessorEndTimes = new int[]{11008, 4402, 3805, 4409};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_21_CCR_9dot99_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Join_Nodes_21_CCR_9.99_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2600, 2609, 0), new ScheduledTask(4800, 4806, 0), new ScheduledTask(200, 209, 0), new ScheduledTask(4300, 4305, 0), new ScheduledTask(8700, 8704, 0), new ScheduledTask(1900, 1903, 1), new ScheduledTask(1900, 1907, 0), new ScheduledTask(5400, 5406, 0), new ScheduledTask(8300, 8304, 0), new ScheduledTask(7500, 7508, 0), new ScheduledTask(1300, 1306, 2), new ScheduledTask(6900, 6906, 0), new ScheduledTask(3500, 3508, 0), new ScheduledTask(4900, 4902, 2), new ScheduledTask(6000, 6009, 0), new ScheduledTask(1100, 1108, 0), new ScheduledTask(1900, 1910, 3), new ScheduledTask(3700, 3705, 1), new ScheduledTask(6100, 6102, 2), new ScheduledTask(9100, 9110, 0)};
        int[] expectedProcessorEndTimes = new int[]{9110, 3705, 6102, 1910};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 81000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 79, 0), new ScheduledTask(26700, 26799, 0), new ScheduledTask(71100, 71199, 0), new ScheduledTask(7900, 7989, 0), new ScheduledTask(36600, 36679, 0), new ScheduledTask(44500, 44569, 0), new ScheduledTask(58300, 58369, 0), new ScheduledTask(51400, 51469, 0), new ScheduledTask(16800, 16859, 0), new ScheduledTask(65200, 65259, 0), new ScheduledTask(32100, 32150, 1), new ScheduledTask(8300, 8350, 2), new ScheduledTask(50100, 50150, 3), new ScheduledTask(8100, 8150, 3), new ScheduledTask(56300, 56340, 2), new ScheduledTask(8100, 8140, 1), new ScheduledTask(38300, 38330, 2), new ScheduledTask(62100, 62130, 1), new ScheduledTask(38100, 38120, 3), new ScheduledTask(22700, 22720, 0), new ScheduledTask(24700, 24720, 0)};
        int[] expectedProcessorEndTimes = new int[]{71199, 62130, 56340, 50150};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 51700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 79, 0), new ScheduledTask(19900, 19999, 0), new ScheduledTask(41800, 41899, 0), new ScheduledTask(8100, 8189, 1), new ScheduledTask(35900, 35979, 1), new ScheduledTask(26100, 26169, 2), new ScheduledTask(37700, 37769, 3), new ScheduledTask(23900, 23969, 3), new ScheduledTask(12100, 12159, 3), new ScheduledTask(39900, 39959, 2), new ScheduledTask(16100, 16150, 2), new ScheduledTask(25900, 25950, 1), new ScheduledTask(29800, 29850, 0), new ScheduledTask(7900, 7950, 0), new ScheduledTask(37800, 37840, 0), new ScheduledTask(8100, 8140, 2), new ScheduledTask(12900, 12930, 0), new ScheduledTask(34800, 34830, 0), new ScheduledTask(8100, 8120, 3), new ScheduledTask(15900, 15920, 0), new ScheduledTask(17900, 17920, 0)};
        int[] expectedProcessorEndTimes = new int[]{41899, 35979, 39959, 37769};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 44820;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 79, 0), new ScheduledTask(28950, 29049, 2), new ScheduledTask(24400, 24499, 3), new ScheduledTask(8100, 8189, 2), new ScheduledTask(8600, 8679, 3), new ScheduledTask(19980, 20049, 1), new ScheduledTask(36540, 36609, 1), new ScheduledTask(28260, 28329, 1), new ScheduledTask(12900, 12959, 1), new ScheduledTask(34900, 34959, 0), new ScheduledTask(21450, 21500, 2), new ScheduledTask(14900, 14950, 0), new ScheduledTask(26900, 26950, 0), new ScheduledTask(7900, 7950, 0), new ScheduledTask(40800, 40840, 0), new ScheduledTask(8100, 8140, 1), new ScheduledTask(19900, 19930, 0), new ScheduledTask(31900, 31930, 0), new ScheduledTask(12900, 12920, 0), new ScheduledTask(22900, 22920, 0), new ScheduledTask(24900, 24920, 0)};
        int[] expectedProcessorEndTimes = new int[]{40840, 36609, 29049, 24499};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 626;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 79, 0), new ScheduledTask(260, 359, 1), new ScheduledTask(527, 626, 1), new ScheduledTask(79, 168, 0), new ScheduledTask(328, 407, 0), new ScheduledTask(407, 476, 0), new ScheduledTask(476, 545, 0), new ScheduledTask(359, 428, 1), new ScheduledTask(101, 160, 1), new ScheduledTask(428, 487, 1), new ScheduledTask(210, 260, 1), new ScheduledTask(160, 210, 1), new ScheduledTask(545, 595, 0), new ScheduledTask(168, 218, 0), new ScheduledTask(487, 527, 1), new ScheduledTask(218, 258, 0), new ScheduledTask(258, 288, 0), new ScheduledTask(595, 625, 0), new ScheduledTask(81, 101, 1), new ScheduledTask(288, 308, 0), new ScheduledTask(308, 328, 0)};
        int[] expectedProcessorEndTimes = new int[]{625, 626};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 357;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 79, 0), new ScheduledTask(129, 228, 0), new ScheduledTask(258, 357, 0), new ScheduledTask(81, 170, 1), new ScheduledTask(203, 282, 2), new ScheduledTask(160, 229, 3), new ScheduledTask(282, 351, 2), new ScheduledTask(229, 298, 3), new ScheduledTask(101, 160, 3), new ScheduledTask(298, 357, 3), new ScheduledTask(133, 183, 2), new ScheduledTask(83, 133, 2), new ScheduledTask(260, 310, 1), new ScheduledTask(170, 220, 1), new ScheduledTask(310, 350, 1), new ScheduledTask(220, 260, 1), new ScheduledTask(79, 109, 0), new ScheduledTask(228, 258, 0), new ScheduledTask(81, 101, 3), new ScheduledTask(183, 203, 2), new ScheduledTask(109, 129, 0)};
        int[] expectedProcessorEndTimes = new int[]{357, 350, 351, 357};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 269;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 79, 0), new ScheduledTask(121, 220, 1), new ScheduledTask(169, 268, 0), new ScheduledTask(81, 170, 2), new ScheduledTask(131, 210, 3), new ScheduledTask(133, 202, 4), new ScheduledTask(200, 269, 2), new ScheduledTask(192, 261, 5), new ScheduledTask(83, 142, 5), new ScheduledTask(202, 261, 4), new ScheduledTask(142, 192, 5), new ScheduledTask(83, 133, 4), new ScheduledTask(210, 260, 3), new ScheduledTask(81, 131, 3), new ScheduledTask(220, 260, 1), new ScheduledTask(81, 121, 1), new ScheduledTask(170, 200, 2), new ScheduledTask(139, 169, 0), new ScheduledTask(79, 99, 0), new ScheduledTask(99, 119, 0), new ScheduledTask(119, 139, 0)};
        int[] expectedProcessorEndTimes = new int[]{268, 260, 269, 260, 261, 261};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random2_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#2_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 73100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 27, 0), new ScheduledTask(59400, 59482, 0), new ScheduledTask(36600, 36682, 0), new ScheduledTask(44800, 44873, 0), new ScheduledTask(52100, 52173, 0), new ScheduledTask(6400, 6464, 0), new ScheduledTask(30800, 30864, 1), new ScheduledTask(12800, 12864, 0), new ScheduledTask(19200, 19264, 0), new ScheduledTask(25600, 25655, 0), new ScheduledTask(67600, 67655, 0), new ScheduledTask(31100, 31155, 0), new ScheduledTask(3000, 3055, 2), new ScheduledTask(36000, 36055, 2), new ScheduledTask(3200, 3246, 1), new ScheduledTask(2700, 2737, 0), new ScheduledTask(35300, 35327, 3), new ScheduledTask(19100, 19127, 3), new ScheduledTask(2900, 2927, 3), new ScheduledTask(62300, 62318, 3), new ScheduledTask(51500, 51518, 3)};
        int[] expectedProcessorEndTimes = new int[]{67655, 30864, 36055, 62318};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random2_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#2_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 44800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 27, 0), new ScheduledTask(28300, 28382, 1), new ScheduledTask(11900, 11982, 1), new ScheduledTask(26500, 26573, 0), new ScheduledTask(26600, 26673, 2), new ScheduledTask(8200, 8264, 0), new ScheduledTask(30500, 30564, 3), new ScheduledTask(14600, 14664, 0), new ScheduledTask(8400, 8464, 2), new ScheduledTask(10300, 10355, 3), new ScheduledTask(39300, 39355, 0), new ScheduledTask(21000, 21055, 0), new ScheduledTask(2700, 2755, 0), new ScheduledTask(33800, 33855, 0), new ScheduledTask(21300, 21346, 3), new ScheduledTask(2900, 2937, 3), new ScheduledTask(21200, 21227, 2), new ScheduledTask(3000, 3027, 2), new ScheduledTask(2900, 2927, 1), new ScheduledTask(41200, 41218, 2), new ScheduledTask(8300, 8318, 1)};
        int[] expectedProcessorEndTimes = new int[]{39355, 28382, 41218, 30564};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random2_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#2_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 37820;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 27, 0), new ScheduledTask(23800, 23882, 0), new ScheduledTask(18140, 18222, 1), new ScheduledTask(8600, 8673, 3), new ScheduledTask(23200, 23273, 3), new ScheduledTask(8450, 8514, 2), new ScheduledTask(27980, 28044, 1), new ScheduledTask(18050, 18114, 2), new ScheduledTask(27650, 27714, 2), new ScheduledTask(9380, 9435, 1), new ScheduledTask(32000, 32055, 0), new ScheduledTask(8200, 8255, 0), new ScheduledTask(2700, 2755, 0), new ScheduledTask(18300, 18355, 0), new ScheduledTask(13700, 13746, 0), new ScheduledTask(2900, 2937, 2), new ScheduledTask(3200, 3227, 3), new ScheduledTask(6140, 6167, 1), new ScheduledTask(2900, 2927, 1), new ScheduledTask(35660, 35678, 1), new ScheduledTask(15980, 15998, 1)};
        int[] expectedProcessorEndTimes = new int[]{32055, 35678, 27714, 23273};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 549;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 27, 0), new ScheduledTask(411, 493, 0), new ScheduledTask(303, 385, 1), new ScheduledTask(385, 458, 1), new ScheduledTask(458, 531, 1), new ScheduledTask(56, 120, 1), new ScheduledTask(292, 356, 0), new ScheduledTask(120, 184, 1), new ScheduledTask(184, 248, 1), new ScheduledTask(248, 303, 1), new ScheduledTask(493, 548, 0), new ScheduledTask(146, 201, 0), new ScheduledTask(64, 119, 0), new ScheduledTask(356, 411, 0), new ScheduledTask(201, 247, 0), new ScheduledTask(27, 64, 0), new ScheduledTask(247, 274, 0), new ScheduledTask(119, 146, 0), new ScheduledTask(29, 56, 1), new ScheduledTask(531, 549, 1), new ScheduledTask(274, 292, 0)};
        int[] expectedProcessorEndTimes = new int[]{548, 549};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 292;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 27, 0), new ScheduledTask(210, 292, 1), new ScheduledTask(155, 237, 0), new ScheduledTask(140, 213, 2), new ScheduledTask(213, 286, 2), new ScheduledTask(27, 91, 0), new ScheduledTask(167, 231, 3), new ScheduledTask(91, 155, 0), new ScheduledTask(83, 147, 1), new ScheduledTask(66, 121, 3), new ScheduledTask(231, 286, 3), new ScheduledTask(85, 140, 2), new ScheduledTask(30, 85, 2), new ScheduledTask(237, 292, 0), new ScheduledTask(121, 167, 3), new ScheduledTask(29, 66, 3), new ScheduledTask(147, 174, 1), new ScheduledTask(56, 83, 1), new ScheduledTask(29, 56, 1), new ScheduledTask(192, 210, 1), new ScheduledTask(174, 192, 1)};
        int[] expectedProcessorEndTimes = new int[]{292, 292, 286, 286};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 204;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 27, 0), new ScheduledTask(66, 148, 1), new ScheduledTask(120, 202, 2), new ScheduledTask(131, 204, 3), new ScheduledTask(130, 203, 4), new ScheduledTask(56, 120, 2), new ScheduledTask(82, 146, 0), new ScheduledTask(31, 95, 5), new ScheduledTask(95, 159, 5), new ScheduledTask(57, 112, 4), new ScheduledTask(148, 203, 1), new ScheduledTask(27, 82, 0), new ScheduledTask(30, 85, 3), new ScheduledTask(146, 201, 0), new ScheduledTask(85, 131, 3), new ScheduledTask(29, 66, 1), new ScheduledTask(159, 186, 5), new ScheduledTask(30, 57, 4), new ScheduledTask(29, 56, 2), new ScheduledTask(186, 204, 5), new ScheduledTask(112, 130, 4)};
        int[] expectedProcessorEndTimes = new int[]{201, 203, 202, 204, 203, 204};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random3_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#3_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 76100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 69, 0), new ScheduledTask(58700, 58777, 0), new ScheduledTask(66400, 66469, 0), new ScheduledTask(34700, 34769, 1), new ScheduledTask(34700, 34769, 2), new ScheduledTask(7100, 7169, 3), new ScheduledTask(16100, 16162, 0), new ScheduledTask(33900, 33962, 0), new ScheduledTask(40100, 40162, 0), new ScheduledTask(52500, 52562, 0), new ScheduledTask(46300, 46362, 0), new ScheduledTask(6900, 6954, 0), new ScheduledTask(22300, 22354, 0), new ScheduledTask(7100, 7146, 2), new ScheduledTask(48500, 48546, 3), new ScheduledTask(12300, 12338, 0), new ScheduledTask(27700, 27731, 0), new ScheduledTask(7100, 7131, 1), new ScheduledTask(30800, 30831, 0), new ScheduledTask(73300, 73323, 0), new ScheduledTask(25700, 25715, 1)};
        int[] expectedProcessorEndTimes = new int[]{73323, 34769, 34769, 48546};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random3_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#3_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 48600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 69, 0), new ScheduledTask(32400, 32477, 1), new ScheduledTask(30200, 30269, 2), new ScheduledTask(34700, 34769, 3), new ScheduledTask(20900, 20969, 3), new ScheduledTask(7100, 7169, 3), new ScheduledTask(14800, 14862, 2), new ScheduledTask(31600, 31662, 0), new ScheduledTask(7600, 7662, 1), new ScheduledTask(37800, 37862, 0), new ScheduledTask(20000, 20062, 1), new ScheduledTask(14600, 14654, 0), new ScheduledTask(20000, 20054, 0), new ScheduledTask(6900, 6946, 0), new ScheduledTask(44000, 44046, 0), new ScheduledTask(7200, 7238, 2), new ScheduledTask(25400, 25431, 0), new ScheduledTask(11500, 11531, 0), new ScheduledTask(28500, 28531, 0), new ScheduledTask(44000, 44023, 2), new ScheduledTask(27200, 27215, 2)};
        int[] expectedProcessorEndTimes = new int[]{44046, 32477, 44023, 34769};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random3_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#3_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 41600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 69, 0), new ScheduledTask(30050, 30127, 2), new ScheduledTask(27400, 27469, 3), new ScheduledTask(13600, 13669, 3), new ScheduledTask(17450, 17519, 2), new ScheduledTask(7100, 7169, 2), new ScheduledTask(11760, 11822, 1), new ScheduledTask(19200, 19262, 1), new ScheduledTask(26640, 26702, 1), new ScheduledTask(28500, 28562, 0), new ScheduledTask(34080, 34142, 1), new ScheduledTask(14600, 14654, 0), new ScheduledTask(20000, 20054, 0), new ScheduledTask(6900, 6946, 0), new ScheduledTask(34700, 34746, 0), new ScheduledTask(7200, 7238, 1), new ScheduledTask(7400, 7431, 3), new ScheduledTask(11500, 11531, 0), new ScheduledTask(25400, 25431, 0), new ScheduledTask(39300, 39323, 0), new ScheduledTask(27800, 27815, 2)};
        int[] expectedProcessorEndTimes = new int[]{39323, 34142, 30127, 27469};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 586;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 69, 0), new ScheduledTask(440, 517, 1), new ScheduledTask(517, 586, 1), new ScheduledTask(309, 378, 1), new ScheduledTask(178, 247, 1), new ScheduledTask(71, 140, 1), new ScheduledTask(247, 309, 1), new ScheduledTask(331, 393, 0), new ScheduledTask(393, 455, 0), new ScheduledTask(378, 440, 1), new ScheduledTask(455, 517, 0), new ScheduledTask(146, 200, 0), new ScheduledTask(200, 254, 0), new ScheduledTask(69, 115, 0), new ScheduledTask(517, 563, 0), new ScheduledTask(140, 178, 1), new ScheduledTask(269, 300, 0), new ScheduledTask(115, 146, 0), new ScheduledTask(300, 331, 0), new ScheduledTask(563, 586, 0), new ScheduledTask(254, 269, 0)};
        int[] expectedProcessorEndTimes = new int[]{586, 586};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 331;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 69, 0), new ScheduledTask(250, 327, 1), new ScheduledTask(259, 328, 2), new ScheduledTask(262, 331, 3), new ScheduledTask(178, 247, 3), new ScheduledTask(71, 140, 3), new ScheduledTask(73, 135, 2), new ScheduledTask(126, 188, 1), new ScheduledTask(135, 197, 2), new ScheduledTask(188, 250, 1), new ScheduledTask(197, 259, 2), new ScheduledTask(72, 126, 1), new ScheduledTask(146, 200, 0), new ScheduledTask(69, 115, 0), new ScheduledTask(262, 308, 0), new ScheduledTask(140, 178, 3), new ScheduledTask(200, 231, 0), new ScheduledTask(115, 146, 0), new ScheduledTask(231, 262, 0), new ScheduledTask(308, 331, 0), new ScheduledTask(247, 262, 3)};
        int[] expectedProcessorEndTimes = new int[]{331, 327, 328, 331};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 247;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 69, 0), new ScheduledTask(100, 177, 0), new ScheduledTask(177, 246, 0), new ScheduledTask(171, 240, 1), new ScheduledTask(102, 171, 1), new ScheduledTask(71, 140, 2), new ScheduledTask(126, 188, 3), new ScheduledTask(76, 138, 4), new ScheduledTask(117, 179, 5), new ScheduledTask(138, 200, 4), new ScheduledTask(179, 241, 5), new ScheduledTask(72, 126, 3), new ScheduledTask(188, 242, 3), new ScheduledTask(71, 117, 5), new ScheduledTask(200, 246, 4), new ScheduledTask(140, 178, 2), new ScheduledTask(193, 224, 2), new ScheduledTask(71, 102, 1), new ScheduledTask(69, 100, 0), new ScheduledTask(224, 247, 2), new ScheduledTask(178, 193, 2)};
        int[] expectedProcessorEndTimes = new int[]{246, 240, 247, 242, 246, 241};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random4_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#4_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 77400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 48, 0), new ScheduledTask(9600, 9696, 0), new ScheduledTask(19200, 19296, 0), new ScheduledTask(34500, 34586, 0), new ScheduledTask(5000, 5086, 1), new ScheduledTask(28000, 28077, 2), new ScheduledTask(28000, 28077, 3), new ScheduledTask(28800, 28857, 0), new ScheduledTask(52600, 52657, 0), new ScheduledTask(58300, 58357, 0), new ScheduledTask(43100, 43157, 0), new ScheduledTask(4800, 4848, 0), new ScheduledTask(64000, 64048, 0), new ScheduledTask(5200, 5238, 2), new ScheduledTask(73600, 73638, 0), new ScheduledTask(5200, 5238, 3), new ScheduledTask(56600, 56629, 1), new ScheduledTask(70700, 70729, 0), new ScheduledTask(68800, 68819, 0), new ScheduledTask(48800, 48819, 0), new ScheduledTask(50700, 50719, 0)};
        int[] expectedProcessorEndTimes = new int[]{73638, 56629, 28077, 28077};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random4_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#4_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 48600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 48, 0), new ScheduledTask(4800, 4896, 0), new ScheduledTask(22200, 22296, 1), new ScheduledTask(14600, 14686, 2), new ScheduledTask(5000, 5086, 1), new ScheduledTask(16500, 16577, 3), new ScheduledTask(31900, 31977, 3), new ScheduledTask(5100, 5157, 3), new ScheduledTask(31500, 31557, 0), new ScheduledTask(37200, 37257, 0), new ScheduledTask(22000, 22057, 0), new ScheduledTask(5000, 5048, 2), new ScheduledTask(37600, 37648, 2), new ScheduledTask(14400, 14438, 0), new ScheduledTask(44800, 44838, 0), new ScheduledTask(18200, 18238, 0), new ScheduledTask(31800, 31829, 2), new ScheduledTask(41400, 41429, 1), new ScheduledTask(42900, 42919, 0), new ScheduledTask(27700, 27719, 0), new ScheduledTask(29600, 29619, 0)};
        int[] expectedProcessorEndTimes = new int[]{44838, 41429, 37648, 31977};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random4_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#4_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 40900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 48, 0), new ScheduledTask(5100, 5196, 1), new ScheduledTask(5100, 5196, 3), new ScheduledTask(25100, 25186, 2), new ScheduledTask(5000, 5086, 2), new ScheduledTask(24300, 24377, 3), new ScheduledTask(31620, 31697, 1), new ScheduledTask(4800, 4857, 0), new ScheduledTask(25700, 25757, 0), new ScheduledTask(31400, 31457, 0), new ScheduledTask(18100, 18157, 0), new ScheduledTask(17900, 17948, 2), new ScheduledTask(22380, 22428, 1), new ScheduledTask(10500, 10538, 0), new ScheduledTask(37100, 37138, 0), new ScheduledTask(14300, 14338, 0), new ScheduledTask(16620, 16649, 1), new ScheduledTask(28140, 28169, 1), new ScheduledTask(38000, 38019, 2), new ScheduledTask(23800, 23819, 0), new ScheduledTask(20100, 20119, 1)};
        int[] expectedProcessorEndTimes = new int[]{37138, 31697, 38019, 24377};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 585;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 48, 0), new ScheduledTask(48, 144, 0), new ScheduledTask(184, 280, 1), new ScheduledTask(144, 230, 0), new ScheduledTask(50, 136, 1), new ScheduledTask(363, 440, 0), new ScheduledTask(469, 546, 0), new ScheduledTask(280, 337, 1), new ScheduledTask(423, 480, 1), new ScheduledTask(480, 537, 1), new ScheduledTask(337, 394, 1), new ScheduledTask(136, 184, 1), new ScheduledTask(537, 585, 1), new ScheduledTask(230, 268, 0), new ScheduledTask(546, 584, 0), new ScheduledTask(268, 306, 0), new ScheduledTask(394, 423, 1), new ScheduledTask(440, 469, 0), new ScheduledTask(344, 363, 0), new ScheduledTask(306, 325, 0), new ScheduledTask(325, 344, 0)};
        int[] expectedProcessorEndTimes = new int[]{584, 585};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 318;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 48, 0), new ScheduledTask(51, 147, 1), new ScheduledTask(51, 147, 2), new ScheduledTask(155, 241, 3), new ScheduledTask(48, 134, 0), new ScheduledTask(211, 288, 0), new ScheduledTask(241, 318, 3), new ScheduledTask(98, 155, 3), new ScheduledTask(204, 261, 2), new ScheduledTask(261, 318, 2), new ScheduledTask(147, 204, 2), new ScheduledTask(50, 98, 3), new ScheduledTask(163, 211, 0), new ScheduledTask(147, 185, 1), new ScheduledTask(280, 318, 1), new ScheduledTask(185, 223, 1), new ScheduledTask(134, 163, 0), new ScheduledTask(288, 317, 0), new ScheduledTask(261, 280, 1), new ScheduledTask(223, 242, 1), new ScheduledTask(242, 261, 1)};
        int[] expectedProcessorEndTimes = new int[]{317, 318, 318, 318};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 232;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 48, 0), new ScheduledTask(48, 144, 0), new ScheduledTask(51, 147, 1), new ScheduledTask(108, 194, 2), new ScheduledTask(50, 136, 3), new ScheduledTask(147, 224, 4), new ScheduledTask(155, 232, 5), new ScheduledTask(51, 108, 2), new ScheduledTask(90, 147, 4), new ScheduledTask(98, 155, 5), new ScheduledTask(174, 231, 3), new ScheduledTask(50, 98, 5), new ScheduledTask(176, 224, 1), new ScheduledTask(136, 174, 3), new ScheduledTask(194, 232, 2), new ScheduledTask(52, 90, 4), new ScheduledTask(147, 176, 1), new ScheduledTask(201, 230, 0), new ScheduledTask(182, 201, 0), new ScheduledTask(144, 163, 0), new ScheduledTask(163, 182, 0)};
        int[] expectedProcessorEndTimes = new int[]{230, 224, 232, 231, 224, 232};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random5_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#5_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 79400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 25, 0), new ScheduledTask(39600, 39685, 0), new ScheduledTask(59100, 59185, 0), new ScheduledTask(48100, 48176, 0), new ScheduledTask(29500, 29576, 0), new ScheduledTask(17700, 17776, 0), new ScheduledTask(67600, 67676, 0), new ScheduledTask(3000, 3076, 1), new ScheduledTask(2500, 2576, 0), new ScheduledTask(10100, 10176, 0), new ScheduledTask(38300, 38368, 2), new ScheduledTask(38400, 38468, 3), new ScheduledTask(3000, 3059, 3), new ScheduledTask(2900, 2942, 2), new ScheduledTask(75200, 75242, 0), new ScheduledTask(25300, 25342, 0), new ScheduledTask(58800, 58834, 1), new ScheduledTask(55700, 55734, 0), new ScheduledTask(37100, 37125, 0), new ScheduledTask(28100, 28117, 2), new ScheduledTask(48600, 48617, 1)};
        int[] expectedProcessorEndTimes = new int[]{75242, 58834, 38368, 38468};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random5_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#5_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 48900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 25, 0), new ScheduledTask(3100, 3185, 1), new ScheduledTask(31600, 31685, 2), new ScheduledTask(33400, 33476, 3), new ScheduledTask(3000, 3076, 3), new ScheduledTask(2800, 2876, 2), new ScheduledTask(20100, 20176, 1), new ScheduledTask(18200, 18276, 3), new ScheduledTask(2500, 2576, 0), new ScheduledTask(10100, 10176, 0), new ScheduledTask(18000, 18068, 2), new ScheduledTask(35300, 35368, 1), new ScheduledTask(26100, 26159, 0), new ScheduledTask(21900, 21942, 0), new ScheduledTask(41300, 41342, 0), new ScheduledTask(17700, 17742, 0), new ScheduledTask(45500, 45534, 0), new ScheduledTask(36200, 36234, 0), new ScheduledTask(32000, 32025, 0), new ScheduledTask(34500, 34517, 0), new ScheduledTask(39600, 39617, 0)};
        int[] expectedProcessorEndTimes = new int[]{45534, 35368, 31685, 33476};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random5_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#5_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 41300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 25, 0), new ScheduledTask(3100, 3185, 3), new ScheduledTask(23500, 23585, 3), new ScheduledTask(14200, 14276, 2), new ScheduledTask(11820, 11896, 1), new ScheduledTask(2800, 2876, 2), new ScheduledTask(32100, 32176, 1), new ScheduledTask(20940, 21016, 1), new ScheduledTask(2500, 2576, 0), new ScheduledTask(2700, 2776, 1), new ScheduledTask(25600, 25668, 2), new ScheduledTask(30300, 30368, 0), new ScheduledTask(18500, 18559, 0), new ScheduledTask(14300, 14342, 0), new ScheduledTask(37100, 37142, 0), new ScheduledTask(10100, 10142, 0), new ScheduledTask(35800, 35834, 2), new ScheduledTask(26900, 26934, 0), new ScheduledTask(24400, 24425, 0), new ScheduledTask(20100, 20117, 3), new ScheduledTask(30060, 30077, 1)};
        int[] expectedProcessorEndTimes = new int[]{37142, 32176, 35834, 23585};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 601;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 25, 0), new ScheduledTask(151, 236, 0), new ScheduledTask(372, 457, 0), new ScheduledTask(449, 525, 1), new ScheduledTask(297, 373, 1), new ScheduledTask(179, 255, 1), new ScheduledTask(525, 601, 1), new ScheduledTask(373, 449, 1), new ScheduledTask(27, 103, 1), new ScheduledTask(103, 179, 1), new ScheduledTask(253, 321, 0), new ScheduledTask(457, 525, 0), new ScheduledTask(67, 126, 0), new ScheduledTask(255, 297, 1), new ScheduledTask(525, 567, 0), new ScheduledTask(25, 67, 0), new ScheduledTask(567, 601, 0), new ScheduledTask(321, 355, 0), new ScheduledTask(126, 151, 0), new ScheduledTask(236, 253, 0), new ScheduledTask(355, 372, 0)};
        int[] expectedProcessorEndTimes = new int[]{601, 601};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 315;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 25, 0), new ScheduledTask(103, 188, 1), new ScheduledTask(188, 273, 1), new ScheduledTask(145, 221, 2), new ScheduledTask(104, 180, 3), new ScheduledTask(28, 104, 3), new ScheduledTask(238, 314, 2), new ScheduledTask(180, 256, 3), new ScheduledTask(27, 103, 1), new ScheduledTask(27, 103, 2), new ScheduledTask(92, 160, 0), new ScheduledTask(211, 279, 0), new ScheduledTask(256, 315, 3), new ScheduledTask(103, 145, 2), new ScheduledTask(273, 315, 1), new ScheduledTask(25, 67, 0), new ScheduledTask(279, 313, 0), new ScheduledTask(160, 194, 0), new ScheduledTask(67, 92, 0), new ScheduledTask(221, 238, 2), new ScheduledTask(194, 211, 0)};
        int[] expectedProcessorEndTimes = new int[]{313, 315, 314, 315};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 222;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 25, 0), new ScheduledTask(31, 116, 1), new ScheduledTask(100, 185, 2), new ScheduledTask(109, 185, 0), new ScheduledTask(103, 179, 3), new ScheduledTask(103, 179, 4), new ScheduledTask(146, 222, 5), new ScheduledTask(70, 146, 5), new ScheduledTask(27, 103, 3), new ScheduledTask(27, 103, 4), new ScheduledTask(32, 100, 2), new ScheduledTask(150, 218, 1), new ScheduledTask(25, 84, 0), new ScheduledTask(179, 221, 4), new ScheduledTask(179, 221, 3), new ScheduledTask(28, 70, 5), new ScheduledTask(185, 219, 2), new ScheduledTask(116, 150, 1), new ScheduledTask(84, 109, 0), new ScheduledTask(185, 202, 0), new ScheduledTask(202, 219, 0)};
        int[] expectedProcessorEndTimes = new int[]{219, 218, 219, 221, 221, 222};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random6_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#6_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 81300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 74, 0), new ScheduledTask(43600, 43682, 0), new ScheduledTask(60000, 60082, 0), new ScheduledTask(51800, 51882, 0), new ScheduledTask(68200, 68282, 0), new ScheduledTask(19800, 19882, 0), new ScheduledTask(7400, 7474, 0), new ScheduledTask(32500, 32574, 1), new ScheduledTask(31300, 31374, 0), new ScheduledTask(7900, 7958, 2), new ScheduledTask(42600, 42658, 3), new ScheduledTask(7800, 7858, 3), new ScheduledTask(76400, 76449, 0), new ScheduledTask(38700, 38749, 0), new ScheduledTask(57700, 57733, 2), new ScheduledTask(28000, 28033, 0), new ScheduledTask(7900, 7925, 1), new ScheduledTask(14800, 14825, 0), new ScheduledTask(42700, 42725, 2), new ScheduledTask(17300, 17325, 0), new ScheduledTask(22900, 22916, 1)};
        int[] expectedProcessorEndTimes = new int[]{76449, 32574, 57733, 42658};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random6_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#6_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 51600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 74, 0), new ScheduledTask(34200, 34282, 1), new ScheduledTask(30300, 30382, 0), new ScheduledTask(22100, 22182, 0), new ScheduledTask(38500, 38582, 0), new ScheduledTask(7400, 7482, 0), new ScheduledTask(7600, 7674, 2), new ScheduledTask(35800, 35874, 3), new ScheduledTask(14400, 14474, 3), new ScheduledTask(22400, 22458, 2), new ScheduledTask(39000, 39058, 2), new ScheduledTask(17600, 17658, 1), new ScheduledTask(46700, 46749, 0), new ScheduledTask(15600, 15649, 0), new ScheduledTask(29200, 29233, 3), new ScheduledTask(7800, 7833, 3), new ScheduledTask(29200, 29225, 1), new ScheduledTask(7600, 7625, 1), new ScheduledTask(34000, 34025, 2), new ScheduledTask(12600, 12625, 1), new ScheduledTask(20500, 20516, 0)};
        int[] expectedProcessorEndTimes = new int[]{46749, 34282, 39058, 35874};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random6_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#6_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 43960;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 74, 0), new ScheduledTask(26400, 26482, 0), new ScheduledTask(28240, 28322, 1), new ScheduledTask(18400, 18482, 1), new ScheduledTask(27400, 27482, 3), new ScheduledTask(7700, 7782, 2), new ScheduledTask(7600, 7674, 3), new ScheduledTask(32450, 32524, 2), new ScheduledTask(19000, 19074, 0), new ScheduledTask(20000, 20058, 2), new ScheduledTask(37900, 37958, 0), new ScheduledTask(9900, 9958, 0), new ScheduledTask(38080, 38129, 1), new ScheduledTask(10600, 10649, 1), new ScheduledTask(34600, 34633, 0), new ScheduledTask(15700, 15733, 0), new ScheduledTask(28700, 28725, 2), new ScheduledTask(7400, 7425, 0), new ScheduledTask(22400, 22425, 3), new ScheduledTask(7600, 7625, 1), new ScheduledTask(16480, 16496, 1)};
        int[] expectedProcessorEndTimes = new int[]{37958, 38129, 32524, 27482};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 618;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 74, 0), new ScheduledTask(364, 446, 1), new ScheduledTask(487, 569, 0), new ScheduledTask(405, 487, 0), new ScheduledTask(536, 618, 1), new ScheduledTask(150, 232, 1), new ScheduledTask(76, 150, 1), new ScheduledTask(462, 536, 1), new ScheduledTask(232, 306, 1), new ScheduledTask(306, 364, 1), new ScheduledTask(347, 405, 0), new ScheduledTask(124, 182, 0), new ScheduledTask(569, 618, 0), new ScheduledTask(215, 264, 0), new ScheduledTask(314, 347, 0), new ScheduledTask(182, 215, 0), new ScheduledTask(264, 289, 0), new ScheduledTask(74, 99, 0), new ScheduledTask(289, 314, 0), new ScheduledTask(99, 124, 0), new ScheduledTask(446, 462, 1)};
        int[] expectedProcessorEndTimes = new int[]{618, 618};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 347;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 74, 0), new ScheduledTask(134, 216, 1), new ScheduledTask(216, 298, 1), new ScheduledTask(265, 347, 2), new ScheduledTask(265, 347, 3), new ScheduledTask(150, 232, 3), new ScheduledTask(76, 150, 3), new ScheduledTask(191, 265, 2), new ScheduledTask(101, 175, 2), new ScheduledTask(132, 190, 0), new ScheduledTask(289, 347, 0), new ScheduledTask(74, 132, 0), new ScheduledTask(298, 347, 1), new ScheduledTask(190, 239, 0), new ScheduledTask(232, 265, 3), new ScheduledTask(101, 134, 1), new ScheduledTask(239, 264, 0), new ScheduledTask(76, 101, 1), new ScheduledTask(264, 289, 0), new ScheduledTask(76, 101, 2), new ScheduledTask(175, 191, 2)};
        int[] expectedProcessorEndTimes = new int[]{347, 347, 347, 347};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 259;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 74, 0), new ScheduledTask(128, 210, 1), new ScheduledTask(177, 259, 2), new ScheduledTask(175, 257, 3), new ScheduledTask(175, 257, 4), new ScheduledTask(150, 232, 5), new ScheduledTask(76, 150, 5), new ScheduledTask(101, 175, 4), new ScheduledTask(101, 175, 3), new ScheduledTask(107, 165, 0), new ScheduledTask(198, 256, 0), new ScheduledTask(78, 136, 2), new ScheduledTask(210, 259, 1), new ScheduledTask(79, 128, 1), new ScheduledTask(165, 198, 0), new ScheduledTask(74, 107, 0), new ScheduledTask(136, 161, 2), new ScheduledTask(76, 101, 3), new ScheduledTask(232, 257, 5), new ScheduledTask(76, 101, 4), new ScheduledTask(161, 177, 2)};
        int[] expectedProcessorEndTimes = new int[]{256, 259, 259, 257, 257, 257};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random7_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#7_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 74600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 52, 0), new ScheduledTask(18200, 18278, 0), new ScheduledTask(26000, 26078, 0), new ScheduledTask(54700, 54778, 0), new ScheduledTask(62500, 62578, 0), new ScheduledTask(5400, 5470, 1), new ScheduledTask(47700, 47770, 0), new ScheduledTask(32200, 32270, 2), new ScheduledTask(5600, 5661, 3), new ScheduledTask(5200, 5261, 0), new ScheduledTask(42200, 42252, 3), new ScheduledTask(11300, 11352, 0), new ScheduledTask(42500, 42552, 0), new ScheduledTask(5800, 5844, 2), new ScheduledTask(47400, 47444, 1), new ScheduledTask(33800, 33835, 0), new ScheduledTask(39000, 39035, 0), new ScheduledTask(70300, 70326, 0), new ScheduledTask(37300, 37317, 0), new ScheduledTask(72900, 72917, 0), new ScheduledTask(16500, 16517, 0)};
        int[] expectedProcessorEndTimes = new int[]{72917, 47444, 32270, 42252};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random7_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#7_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 47000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 52, 0), new ScheduledTask(15800, 15878, 1), new ScheduledTask(17600, 17678, 2), new ScheduledTask(25300, 25378, 0), new ScheduledTask(33100, 33178, 0), new ScheduledTask(5200, 5270, 0), new ScheduledTask(17800, 17870, 3), new ScheduledTask(31800, 31870, 3), new ScheduledTask(5600, 5661, 3), new ScheduledTask(5400, 5461, 2), new ScheduledTask(36600, 36652, 2), new ScheduledTask(5400, 5452, 1), new ScheduledTask(31400, 31452, 1), new ScheduledTask(20900, 20944, 0), new ScheduledTask(40900, 40944, 0), new ScheduledTask(13900, 13935, 0), new ScheduledTask(17400, 17435, 0), new ScheduledTask(41800, 41826, 1), new ScheduledTask(33200, 33217, 2), new ScheduledTask(45300, 45317, 0), new ScheduledTask(12200, 12217, 0)};
        int[] expectedProcessorEndTimes = new int[]{45317, 41826, 36652, 31870};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random7_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#7_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 40000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 52, 0), new ScheduledTask(10400, 10478, 0), new ScheduledTask(12720, 12798, 1), new ScheduledTask(8800, 8878, 3), new ScheduledTask(24400, 24478, 3), new ScheduledTask(5400, 5470, 2), new ScheduledTask(18450, 18520, 2), new ScheduledTask(28950, 29020, 2), new ScheduledTask(26280, 26341, 1), new ScheduledTask(5400, 5461, 1), new ScheduledTask(33600, 33652, 1), new ScheduledTask(5200, 5252, 0), new ScheduledTask(21700, 21752, 0), new ScheduledTask(26900, 26944, 0), new ScheduledTask(31300, 31344, 0), new ScheduledTask(22080, 22115, 1), new ScheduledTask(18200, 18235, 0), new ScheduledTask(35700, 35726, 0), new ScheduledTask(15900, 15917, 2), new ScheduledTask(38300, 38317, 0), new ScheduledTask(5400, 5417, 3)};
        int[] expectedProcessorEndTimes = new int[]{38317, 33652, 29020, 24478};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 571;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 52, 0), new ScheduledTask(121, 199, 0), new ScheduledTask(199, 277, 0), new ScheduledTask(346, 424, 0), new ScheduledTask(424, 502, 0), new ScheduledTask(54, 124, 1), new ScheduledTask(360, 430, 1), new ScheduledTask(430, 500, 1), new ScheduledTask(220, 281, 1), new ScheduledTask(124, 185, 1), new ScheduledTask(502, 554, 0), new ScheduledTask(52, 104, 0), new ScheduledTask(294, 346, 0), new ScheduledTask(316, 360, 1), new ScheduledTask(500, 544, 1), new ScheduledTask(185, 220, 1), new ScheduledTask(281, 316, 1), new ScheduledTask(544, 570, 1), new ScheduledTask(277, 294, 0), new ScheduledTask(554, 571, 0), new ScheduledTask(104, 121, 0)};
        int[] expectedProcessorEndTimes = new int[]{571, 570};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 314;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 52, 0), new ScheduledTask(122, 200, 0), new ScheduledTask(71, 149, 1), new ScheduledTask(184, 262, 2), new ScheduledTask(231, 309, 3), new ScheduledTask(52, 122, 0), new ScheduledTask(201, 271, 1), new ScheduledTask(161, 231, 3), new ScheduledTask(56, 117, 3), new ScheduledTask(54, 115, 2), new ScheduledTask(262, 314, 2), new ScheduledTask(115, 167, 2), new ScheduledTask(149, 201, 1), new ScheduledTask(117, 161, 3), new ScheduledTask(270, 314, 0), new ScheduledTask(200, 235, 0), new ScheduledTask(235, 270, 0), new ScheduledTask(271, 297, 1), new ScheduledTask(167, 184, 2), new ScheduledTask(297, 314, 1), new ScheduledTask(54, 71, 1)};
        int[] expectedProcessorEndTimes = new int[]{314, 314, 314, 309};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 228;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 52, 0), new ScheduledTask(106, 184, 1), new ScheduledTask(55, 133, 2), new ScheduledTask(133, 211, 2), new ScheduledTask(150, 228, 3), new ScheduledTask(54, 124, 4), new ScheduledTask(88, 158, 5), new ScheduledTask(158, 228, 5), new ScheduledTask(159, 220, 4), new ScheduledTask(54, 115, 3), new ScheduledTask(104, 156, 0), new ScheduledTask(54, 106, 1), new ScheduledTask(52, 104, 0), new ScheduledTask(184, 228, 1), new ScheduledTask(156, 200, 0), new ScheduledTask(124, 159, 4), new ScheduledTask(115, 150, 3), new ScheduledTask(200, 226, 0), new ScheduledTask(71, 88, 5), new ScheduledTask(211, 228, 2), new ScheduledTask(54, 71, 5)};
        int[] expectedProcessorEndTimes = new int[]{226, 228, 228, 228, 220, 228};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random8_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#8_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 87300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 97, 0), new ScheduledTask(38900, 39008, 0), new ScheduledTask(9700, 9808, 0), new ScheduledTask(68000, 68108, 0), new ScheduledTask(49700, 49797, 0), new ScheduledTask(9900, 9986, 1), new ScheduledTask(59400, 59486, 0), new ScheduledTask(10500, 10575, 2), new ScheduledTask(29100, 29154, 0), new ScheduledTask(23700, 23754, 0), new ScheduledTask(29100, 29154, 3), new ScheduledTask(61500, 61543, 3), new ScheduledTask(61500, 61543, 1), new ScheduledTask(55500, 55543, 2), new ScheduledTask(20500, 20532, 0), new ScheduledTask(83200, 83232, 0), new ScheduledTask(9900, 9932, 3), new ScheduledTask(78800, 78822, 0), new ScheduledTask(81000, 81022, 0), new ScheduledTask(34500, 34522, 0), new ScheduledTask(36700, 36722, 0)};
        int[] expectedProcessorEndTimes = new int[]{83232, 61543, 55543, 61543};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random8_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#8_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 55900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 97, 0), new ScheduledTask(29700, 29808, 1), new ScheduledTask(9900, 10008, 2), new ScheduledTask(29800, 29908, 3), new ScheduledTask(10400, 10497, 3), new ScheduledTask(31500, 31586, 2), new ScheduledTask(23700, 23786, 0), new ScheduledTask(32300, 32375, 0), new ScheduledTask(12900, 12954, 0), new ScheduledTask(10100, 10154, 1), new ScheduledTask(18300, 18354, 0), new ScheduledTask(51600, 51643, 0), new ScheduledTask(39800, 39843, 0), new ScheduledTask(44100, 44143, 0), new ScheduledTask(48700, 48732, 2), new ScheduledTask(48400, 48432, 0), new ScheduledTask(9700, 9732, 0), new ScheduledTask(51300, 51322, 1), new ScheduledTask(51400, 51422, 3), new ScheduledTask(20900, 20922, 1), new ScheduledTask(25300, 25322, 1)};
        int[] expectedProcessorEndTimes = new int[]{51643, 51322, 48732, 51422};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random8_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#8_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 48500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 97, 0), new ScheduledTask(17300, 17408, 0), new ScheduledTask(9900, 10008, 1), new ScheduledTask(31980, 32088, 1), new ScheduledTask(22700, 22797, 3), new ScheduledTask(9900, 9986, 2), new ScheduledTask(30900, 30986, 2), new ScheduledTask(28100, 28175, 0), new ScheduledTask(22860, 22914, 1), new ScheduledTask(9700, 9754, 0), new ScheduledTask(22800, 22854, 2), new ScheduledTask(44200, 44243, 0), new ScheduledTask(35600, 35643, 0), new ScheduledTask(39900, 39943, 0), new ScheduledTask(16300, 16332, 3), new ScheduledTask(42100, 42132, 3), new ScheduledTask(9900, 9932, 3), new ScheduledTask(44940, 44962, 1), new ScheduledTask(43800, 43822, 2), new ScheduledTask(29340, 29362, 1), new ScheduledTask(15100, 15122, 0)};
        int[] expectedProcessorEndTimes = new int[]{44243, 44962, 43822, 42132};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 670;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 97, 0), new ScheduledTask(97, 205, 0), new ScheduledTask(99, 207, 1), new ScheduledTask(205, 313, 0), new ScheduledTask(207, 304, 1), new ScheduledTask(304, 390, 1), new ScheduledTask(313, 399, 0), new ScheduledTask(390, 465, 1), new ScheduledTask(399, 453, 0), new ScheduledTask(453, 507, 0), new ScheduledTask(465, 519, 1), new ScheduledTask(507, 550, 0), new ScheduledTask(519, 562, 1), new ScheduledTask(550, 593, 0), new ScheduledTask(562, 594, 1), new ScheduledTask(593, 625, 0), new ScheduledTask(594, 626, 1), new ScheduledTask(625, 647, 0), new ScheduledTask(626, 648, 1), new ScheduledTask(647, 669, 0), new ScheduledTask(648, 670, 1)};
        int[] expectedProcessorEndTimes = new int[]{669, 670};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 389;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 97, 0), new ScheduledTask(249, 357, 0), new ScheduledTask(97, 205, 0), new ScheduledTask(163, 271, 1), new ScheduledTask(263, 360, 2), new ScheduledTask(99, 185, 3), new ScheduledTask(185, 271, 3), new ScheduledTask(271, 346, 3), new ScheduledTask(155, 209, 2), new ScheduledTask(101, 155, 2), new ScheduledTask(209, 263, 2), new ScheduledTask(346, 389, 3), new ScheduledTask(271, 314, 1), new ScheduledTask(314, 357, 1), new ScheduledTask(131, 163, 1), new ScheduledTask(357, 389, 1), new ScheduledTask(99, 131, 1), new ScheduledTask(357, 379, 0), new ScheduledTask(360, 382, 2), new ScheduledTask(205, 227, 0), new ScheduledTask(227, 249, 0)};
        int[] expectedProcessorEndTimes = new int[]{379, 389, 382, 389};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 293;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 97, 0), new ScheduledTask(104, 212, 1), new ScheduledTask(99, 207, 2), new ScheduledTask(185, 293, 3), new ScheduledTask(141, 238, 0), new ScheduledTask(99, 185, 4), new ScheduledTask(132, 218, 5), new ScheduledTask(218, 293, 5), new ScheduledTask(185, 239, 4), new ScheduledTask(131, 185, 3), new ScheduledTask(239, 293, 4), new ScheduledTask(250, 293, 2), new ScheduledTask(212, 255, 1), new ScheduledTask(207, 250, 2), new ScheduledTask(100, 132, 5), new ScheduledTask(255, 287, 1), new ScheduledTask(99, 131, 3), new ScheduledTask(238, 260, 0), new ScheduledTask(260, 282, 0), new ScheduledTask(97, 119, 0), new ScheduledTask(119, 141, 0)};
        int[] expectedProcessorEndTimes = new int[]{282, 287, 293, 293, 293, 293};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random9_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#9_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 79700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 35, 0), new ScheduledTask(46900, 46989, 0), new ScheduledTask(12300, 12389, 0), new ScheduledTask(55800, 55889, 0), new ScheduledTask(35300, 35389, 0), new ScheduledTask(24900, 24989, 1), new ScheduledTask(4200, 4289, 2), new ScheduledTask(14800, 14880, 3), new ScheduledTask(30000, 30053, 0), new ScheduledTask(74400, 74453, 0), new ScheduledTask(64700, 64753, 0), new ScheduledTask(3500, 3544, 0), new ScheduledTask(21200, 21244, 0), new ScheduledTask(7900, 7944, 0), new ScheduledTask(70000, 70044, 0), new ScheduledTask(25600, 25644, 0), new ScheduledTask(57600, 57635, 2), new ScheduledTask(3900, 3935, 1), new ScheduledTask(62800, 62827, 3), new ScheduledTask(44200, 44227, 0), new ScheduledTask(4000, 4018, 3)};
        int[] expectedProcessorEndTimes = new int[]{74453, 24989, 57635, 62827};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random9_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#9_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 49600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 35, 0), new ScheduledTask(18500, 18589, 0), new ScheduledTask(3800, 3889, 1), new ScheduledTask(27400, 27489, 0), new ScheduledTask(21600, 21689, 1), new ScheduledTask(30800, 30889, 2), new ScheduledTask(4200, 4289, 2), new ScheduledTask(41600, 41680, 0), new ScheduledTask(21300, 21353, 3), new ScheduledTask(31900, 31953, 3), new ScheduledTask(36300, 36353, 0), new ScheduledTask(3700, 3744, 3), new ScheduledTask(3500, 3544, 0), new ScheduledTask(12500, 12544, 3), new ScheduledTask(22000, 22044, 2), new ScheduledTask(7900, 7944, 0), new ScheduledTask(42500, 42535, 3), new ScheduledTask(12300, 12335, 0), new ScheduledTask(43000, 43027, 1), new ScheduledTask(15800, 15827, 0), new ScheduledTask(39400, 39418, 1)};
        int[] expectedProcessorEndTimes = new int[]{41680, 43027, 30889, 42535};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random9_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#9_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 41740;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 35, 0), new ScheduledTask(23900, 23989, 0), new ScheduledTask(3500, 3589, 0), new ScheduledTask(7600, 7689, 3), new ScheduledTask(10300, 10389, 2), new ScheduledTask(27700, 27789, 2), new ScheduledTask(32800, 32889, 0), new ScheduledTask(25400, 25480, 3), new ScheduledTask(8980, 9033, 1), new ScheduledTask(31180, 31233, 1), new ScheduledTask(19540, 19593, 1), new ScheduledTask(3700, 3744, 1), new ScheduledTask(12400, 12444, 0), new ScheduledTask(3700, 3744, 2), new ScheduledTask(25900, 25944, 1), new ScheduledTask(16800, 16844, 0), new ScheduledTask(37540, 37575, 1), new ScheduledTask(15340, 15375, 1), new ScheduledTask(23650, 23677, 2), new ScheduledTask(21200, 21227, 0), new ScheduledTask(4000, 4018, 3)};
        int[] expectedProcessorEndTimes = new int[]{32889, 37575, 27789, 25480};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 604;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 35, 0), new ScheduledTask(212, 301, 0), new ScheduledTask(81, 170, 1), new ScheduledTask(301, 390, 0), new ScheduledTask(258, 347, 1), new ScheduledTask(514, 603, 0), new ScheduledTask(347, 436, 1), new ScheduledTask(436, 516, 1), new ScheduledTask(170, 223, 1), new ScheduledTask(516, 569, 1), new ScheduledTask(390, 443, 0), new ScheduledTask(35, 79, 0), new ScheduledTask(79, 123, 0), new ScheduledTask(37, 81, 1), new ScheduledTask(443, 487, 0), new ScheduledTask(123, 167, 0), new ScheduledTask(569, 604, 1), new ScheduledTask(223, 258, 1), new ScheduledTask(487, 514, 0), new ScheduledTask(167, 194, 0), new ScheduledTask(194, 212, 0)};
        int[] expectedProcessorEndTimes = new int[]{603, 604};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 321;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 35, 0), new ScheduledTask(186, 275, 0), new ScheduledTask(38, 127, 1), new ScheduledTask(152, 241, 2), new ScheduledTask(70, 159, 0), new ScheduledTask(197, 286, 3), new ScheduledTask(81, 170, 3), new ScheduledTask(241, 321, 2), new ScheduledTask(81, 134, 2), new ScheduledTask(268, 321, 1), new ScheduledTask(215, 268, 1), new ScheduledTask(37, 81, 2), new ScheduledTask(127, 171, 1), new ScheduledTask(37, 81, 3), new ScheduledTask(275, 319, 0), new ScheduledTask(171, 215, 1), new ScheduledTask(286, 321, 3), new ScheduledTask(35, 70, 0), new ScheduledTask(170, 197, 3), new ScheduledTask(159, 186, 0), new ScheduledTask(134, 152, 2)};
        int[] expectedProcessorEndTimes = new int[]{319, 321, 321, 321};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 231;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 35, 0), new ScheduledTask(53, 142, 0), new ScheduledTask(38, 127, 1), new ScheduledTask(142, 231, 0), new ScheduledTask(82, 171, 2), new ScheduledTask(82, 171, 3), new ScheduledTask(134, 223, 4), new ScheduledTask(116, 196, 5), new ScheduledTask(81, 134, 4), new ScheduledTask(171, 224, 3), new ScheduledTask(171, 224, 2), new ScheduledTask(37, 81, 4), new ScheduledTask(38, 82, 2), new ScheduledTask(37, 81, 5), new ScheduledTask(154, 198, 1), new ScheduledTask(38, 82, 3), new ScheduledTask(196, 231, 5), new ScheduledTask(81, 116, 5), new ScheduledTask(198, 225, 1), new ScheduledTask(127, 154, 1), new ScheduledTask(35, 53, 0)};
        int[] expectedProcessorEndTimes = new int[]{231, 225, 224, 224, 223, 231};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 16;
        int expectedScheduleEndTime = 164;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 70, 0), new ScheduledTask(70, 157, 0), new ScheduledTask(72, 159, 1), new ScheduledTask(77, 164, 2), new ScheduledTask(76, 163, 3), new ScheduledTask(80, 159, 4), new ScheduledTask(74, 153, 5), new ScheduledTask(79, 149, 6), new ScheduledTask(72, 142, 7), new ScheduledTask(78, 148, 8), new ScheduledTask(78, 148, 9), new ScheduledTask(72, 142, 10), new ScheduledTask(76, 146, 11), new ScheduledTask(79, 140, 12), new ScheduledTask(76, 137, 13), new ScheduledTask(77, 129, 14), new ScheduledTask(80, 124, 15), new ScheduledTask(124, 159, 15), new ScheduledTask(129, 164, 14), new ScheduledTask(137, 154, 13), new ScheduledTask(140, 157, 12)};
        int[] expectedProcessorEndTimes = new int[]{157, 159, 164, 163, 159, 153, 149, 142, 148, 148, 142, 146, 157, 154, 164, 159};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 696;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 70, 0), new ScheduledTask(157, 244, 0), new ScheduledTask(70, 157, 0), new ScheduledTask(409, 496, 0), new ScheduledTask(244, 331, 0), new ScheduledTask(571, 650, 1), new ScheduledTask(212, 291, 1), new ScheduledTask(501, 571, 1), new ScheduledTask(72, 142, 1), new ScheduledTask(361, 431, 1), new ScheduledTask(431, 501, 1), new ScheduledTask(142, 212, 1), new ScheduledTask(291, 361, 1), new ScheduledTask(583, 644, 0), new ScheduledTask(331, 392, 0), new ScheduledTask(496, 548, 0), new ScheduledTask(650, 694, 1), new ScheduledTask(644, 679, 0), new ScheduledTask(548, 583, 0), new ScheduledTask(392, 409, 0), new ScheduledTask(679, 696, 0)};
        int[] expectedProcessorEndTimes = new int[]{696, 694};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 385;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 70, 0), new ScheduledTask(142, 229, 1), new ScheduledTask(72, 159, 2), new ScheduledTask(237, 324, 2), new ScheduledTask(229, 316, 1), new ScheduledTask(258, 337, 3), new ScheduledTask(74, 153, 3), new ScheduledTask(153, 223, 3), new ScheduledTask(70, 140, 0), new ScheduledTask(245, 315, 0), new ScheduledTask(315, 385, 0), new ScheduledTask(72, 142, 1), new ScheduledTask(140, 210, 0), new ScheduledTask(324, 385, 2), new ScheduledTask(159, 220, 2), new ScheduledTask(316, 368, 1), new ScheduledTask(337, 381, 3), new ScheduledTask(223, 258, 3), new ScheduledTask(210, 245, 0), new ScheduledTask(220, 237, 2), new ScheduledTask(368, 385, 1)};
        int[] expectedProcessorEndTimes = new int[]{385, 385, 385, 381};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 232;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 70, 0), new ScheduledTask(74, 161, 1), new ScheduledTask(72, 159, 2), new ScheduledTask(93, 180, 3), new ScheduledTask(142, 229, 4), new ScheduledTask(148, 227, 5), new ScheduledTask(74, 153, 6), new ScheduledTask(142, 212, 7), new ScheduledTask(72, 142, 4), new ScheduledTask(159, 229, 2), new ScheduledTask(78, 148, 5), new ScheduledTask(72, 142, 7), new ScheduledTask(161, 231, 1), new ScheduledTask(166, 227, 0), new ScheduledTask(70, 131, 0), new ScheduledTask(180, 232, 3), new ScheduledTask(188, 232, 6), new ScheduledTask(153, 188, 6), new ScheduledTask(131, 166, 0), new ScheduledTask(76, 93, 3), new ScheduledTask(212, 229, 7)};
        int[] expectedProcessorEndTimes = new int[]{227, 231, 229, 232, 229, 227, 232, 229};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 62900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 63, 0), new ScheduledTask(21900, 21963, 0), new ScheduledTask(43300, 43363, 0), new ScheduledTask(51500, 51563, 0), new ScheduledTask(29300, 29356, 1), new ScheduledTask(28200, 28256, 0), new ScheduledTask(29300, 29356, 2), new ScheduledTask(32900, 32950, 3), new ScheduledTask(6300, 6350, 0), new ScheduledTask(57800, 57850, 0), new ScheduledTask(38900, 38944, 0), new ScheduledTask(6500, 6544, 3), new ScheduledTask(33800, 33838, 0), new ScheduledTask(6500, 6538, 1), new ScheduledTask(6500, 6538, 2), new ScheduledTask(11300, 11331, 0), new ScheduledTask(16900, 16931, 0), new ScheduledTask(14400, 14425, 0), new ScheduledTask(49600, 49619, 0), new ScheduledTask(20000, 20019, 0), new ScheduledTask(37600, 37613, 0)};
        int[] expectedProcessorEndTimes = new int[]{57850, 29356, 29356, 32950};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 40300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 63, 0), new ScheduledTask(18900, 18963, 1), new ScheduledTask(27700, 27763, 0), new ScheduledTask(34000, 34063, 0), new ScheduledTask(15300, 15356, 2), new ScheduledTask(18300, 18356, 0), new ScheduledTask(16500, 16556, 3), new ScheduledTask(27700, 27750, 3), new ScheduledTask(6500, 6550, 3), new ScheduledTask(30300, 30350, 2), new ScheduledTask(31500, 31544, 1), new ScheduledTask(6500, 6544, 2), new ScheduledTask(23900, 23938, 0), new ScheduledTask(6300, 6338, 0), new ScheduledTask(10100, 10138, 0), new ScheduledTask(6500, 6531, 1), new ScheduledTask(12700, 12731, 1), new ScheduledTask(13900, 13925, 0), new ScheduledTask(26500, 26519, 2), new ScheduledTask(16400, 16419, 0), new ScheduledTask(37700, 37713, 3)};
        int[] expectedProcessorEndTimes = new int[]{34063, 31544, 30350, 37713};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 34940;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 63, 0), new ScheduledTask(20200, 20263, 0), new ScheduledTask(9400, 9463, 3), new ScheduledTask(22000, 22063, 3), new ScheduledTask(6600, 6656, 2), new ScheduledTask(23400, 23456, 2), new ScheduledTask(15000, 15056, 2), new ScheduledTask(19220, 19270, 1), new ScheduledTask(6500, 6550, 1), new ScheduledTask(28940, 28990, 1), new ScheduledTask(30300, 30344, 0), new ScheduledTask(6300, 6344, 0), new ScheduledTask(26500, 26538, 0), new ScheduledTask(10700, 10738, 0), new ScheduledTask(14500, 14538, 0), new ScheduledTask(12500, 12531, 1), new ScheduledTask(25220, 25251, 1), new ScheduledTask(16220, 16245, 1), new ScheduledTask(31800, 31819, 2), new ScheduledTask(18300, 18319, 0), new ScheduledTask(6800, 6813, 3)};
        int[] expectedProcessorEndTimes = new int[]{30344, 28990, 31819, 22063};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 488;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 63, 0), new ScheduledTask(325, 388, 0), new ScheduledTask(292, 355, 1), new ScheduledTask(374, 437, 1), new ScheduledTask(163, 219, 0), new ScheduledTask(388, 444, 0), new ScheduledTask(219, 275, 0), new ScheduledTask(191, 241, 1), new ScheduledTask(65, 115, 1), new ScheduledTask(437, 487, 1), new ScheduledTask(444, 488, 0), new ScheduledTask(63, 107, 0), new ScheduledTask(241, 279, 1), new ScheduledTask(115, 153, 1), new ScheduledTask(153, 191, 1), new ScheduledTask(107, 138, 0), new ScheduledTask(275, 306, 0), new ScheduledTask(138, 163, 0), new ScheduledTask(355, 374, 1), new ScheduledTask(306, 325, 0), new ScheduledTask(279, 292, 1)};
        int[] expectedProcessorEndTimes = new int[]{488, 487};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 277;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 63, 0), new ScheduledTask(151, 214, 0), new ScheduledTask(192, 255, 1), new ScheduledTask(214, 277, 0), new ScheduledTask(96, 152, 2), new ScheduledTask(221, 277, 3), new ScheduledTask(115, 171, 3), new ScheduledTask(171, 221, 3), new ScheduledTask(65, 115, 3), new ScheduledTask(227, 277, 2), new ScheduledTask(183, 227, 2), new ScheduledTask(63, 107, 0), new ScheduledTask(141, 179, 1), new ScheduledTask(65, 103, 1), new ScheduledTask(103, 141, 1), new ScheduledTask(65, 96, 2), new ScheduledTask(152, 183, 2), new ScheduledTask(107, 132, 0), new ScheduledTask(255, 274, 1), new ScheduledTask(132, 151, 0), new ScheduledTask(179, 192, 1)};
        int[] expectedProcessorEndTimes = new int[]{277, 274, 277, 277};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 209;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 63, 0), new ScheduledTask(140, 203, 1), new ScheduledTask(140, 203, 2), new ScheduledTask(139, 202, 0), new ScheduledTask(103, 159, 3), new ScheduledTask(153, 209, 4), new ScheduledTask(115, 171, 5), new ScheduledTask(103, 153, 4), new ScheduledTask(65, 115, 5), new ScheduledTask(159, 209, 3), new ScheduledTask(96, 140, 2), new ScheduledTask(65, 109, 1), new ScheduledTask(171, 209, 5), new ScheduledTask(65, 103, 3), new ScheduledTask(65, 103, 4), new ScheduledTask(65, 96, 2), new ScheduledTask(109, 140, 1), new ScheduledTask(63, 88, 0), new ScheduledTask(120, 139, 0), new ScheduledTask(88, 107, 0), new ScheduledTask(107, 120, 0)};
        int[] expectedProcessorEndTimes = new int[]{202, 203, 203, 209, 209, 209};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot96_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.96_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 16;
        int expectedScheduleEndTime = 21;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 16, 0), new ScheduledTask(10, 18, 1), new ScheduledTask(13, 21, 2), new ScheduledTask(13, 20, 3), new ScheduledTask(12, 19, 4), new ScheduledTask(13, 20, 5), new ScheduledTask(12, 18, 6), new ScheduledTask(14, 20, 7), new ScheduledTask(13, 19, 8), new ScheduledTask(15, 20, 9), new ScheduledTask(15, 20, 10), new ScheduledTask(16, 20, 0), new ScheduledTask(11, 15, 11), new ScheduledTask(11, 15, 12), new ScheduledTask(10, 14, 13), new ScheduledTask(10, 13, 14), new ScheduledTask(14, 17, 13), new ScheduledTask(11, 13, 15), new ScheduledTask(13, 15, 14), new ScheduledTask(13, 15, 15)};
        int[] expectedProcessorEndTimes = new int[]{20, 18, 21, 20, 19, 20, 18, 20, 19, 20, 20, 15, 15, 17, 15, 15};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot96_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.96_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(24, 33, 0), new ScheduledTask(11, 19, 1), new ScheduledTask(33, 41, 0), new ScheduledTask(34, 41, 1), new ScheduledTask(21, 28, 1), new ScheduledTask(41, 48, 1), new ScheduledTask(28, 34, 1), new ScheduledTask(48, 54, 1), new ScheduledTask(41, 47, 0), new ScheduledTask(50, 55, 0), new ScheduledTask(54, 59, 1), new ScheduledTask(55, 59, 0), new ScheduledTask(14, 18, 0), new ScheduledTask(18, 22, 0), new ScheduledTask(7, 11, 0), new ScheduledTask(11, 14, 0), new ScheduledTask(47, 50, 0), new ScheduledTask(22, 24, 0), new ScheduledTask(19, 21, 1), new ScheduledTask(9, 11, 1)};
        int[] expectedProcessorEndTimes = new int[]{59, 59};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot96_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.96_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(15, 24, 1), new ScheduledTask(10, 18, 2), new ScheduledTask(21, 29, 3), new ScheduledTask(25, 32, 0), new ScheduledTask(18, 25, 0), new ScheduledTask(18, 25, 2), new ScheduledTask(15, 21, 3), new ScheduledTask(29, 35, 3), new ScheduledTask(25, 31, 2), new ScheduledTask(24, 29, 1), new ScheduledTask(29, 34, 1), new ScheduledTask(31, 35, 2), new ScheduledTask(11, 15, 1), new ScheduledTask(11, 15, 3), new ScheduledTask(7, 11, 0), new ScheduledTask(11, 14, 0), new ScheduledTask(32, 35, 0), new ScheduledTask(14, 16, 0), new ScheduledTask(16, 18, 0), new ScheduledTask(9, 11, 3)};
        int[] expectedProcessorEndTimes = new int[]{35, 34, 35, 35};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot96_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.96_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 23;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 16, 0), new ScheduledTask(10, 18, 1), new ScheduledTask(15, 23, 2), new ScheduledTask(13, 20, 3), new ScheduledTask(12, 19, 4), new ScheduledTask(16, 23, 5), new ScheduledTask(12, 18, 6), new ScheduledTask(17, 23, 7), new ScheduledTask(16, 22, 0), new ScheduledTask(18, 23, 1), new ScheduledTask(18, 23, 6), new ScheduledTask(19, 23, 4), new ScheduledTask(11, 15, 2), new ScheduledTask(13, 17, 7), new ScheduledTask(10, 14, 5), new ScheduledTask(10, 13, 7), new ScheduledTask(20, 23, 3), new ScheduledTask(11, 13, 3), new ScheduledTask(14, 16, 5), new ScheduledTask(9, 11, 6)};
        int[] expectedProcessorEndTimes = new int[]{22, 23, 23, 23, 23, 23, 23, 23};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot98_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.98_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(2500, 2510, 0), new ScheduledTask(500, 510, 0), new ScheduledTask(1500, 1510, 0), new ScheduledTask(4400, 4410, 0), new ScheduledTask(3500, 3509, 0), new ScheduledTask(3100, 3108, 1), new ScheduledTask(4100, 4107, 2), new ScheduledTask(7400, 7406, 0), new ScheduledTask(5600, 5606, 0), new ScheduledTask(700, 705, 3), new ScheduledTask(4900, 4905, 3), new ScheduledTask(1100, 1105, 2), new ScheduledTask(6400, 6404, 0), new ScheduledTask(8000, 8004, 0), new ScheduledTask(700, 704, 1), new ScheduledTask(6800, 6804, 0), new ScheduledTask(3700, 3702, 3), new ScheduledTask(6200, 6202, 0), new ScheduledTask(5400, 5402, 0), new ScheduledTask(7200, 7202, 0)};
        int[] expectedProcessorEndTimes = new int[]{8004, 3108, 4107, 4905};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot98_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.98_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(1700, 1710, 1), new ScheduledTask(700, 710, 2), new ScheduledTask(2700, 2710, 2), new ScheduledTask(3300, 3310, 3), new ScheduledTask(1500, 1509, 3), new ScheduledTask(3700, 3708, 1), new ScheduledTask(3500, 3507, 0), new ScheduledTask(4200, 4206, 0), new ScheduledTask(1200, 1206, 0), new ScheduledTask(700, 705, 1), new ScheduledTask(1800, 1805, 0), new ScheduledTask(500, 505, 0), new ScheduledTask(2500, 2504, 0), new ScheduledTask(4800, 4804, 0), new ScheduledTask(700, 704, 3), new ScheduledTask(2900, 2904, 0), new ScheduledTask(4700, 4702, 2), new ScheduledTask(2300, 2302, 0), new ScheduledTask(1000, 1002, 0), new ScheduledTask(3300, 3302, 0)};
        int[] expectedProcessorEndTimes = new int[]{4804, 3708, 4702, 3310};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot98_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.98_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(500, 510, 0), new ScheduledTask(700, 710, 1), new ScheduledTask(700, 710, 3), new ScheduledTask(1700, 1710, 0), new ScheduledTask(2700, 2709, 3), new ScheduledTask(2200, 2208, 2), new ScheduledTask(3400, 3407, 2), new ScheduledTask(3700, 3706, 1), new ScheduledTask(1300, 1306, 2), new ScheduledTask(1900, 1905, 1), new ScheduledTask(3100, 3105, 1), new ScheduledTask(2500, 2505, 1), new ScheduledTask(3100, 3104, 0), new ScheduledTask(4100, 4104, 0), new ScheduledTask(700, 704, 2), new ScheduledTask(3500, 3504, 0), new ScheduledTask(1500, 1502, 0), new ScheduledTask(2900, 2902, 0), new ScheduledTask(2700, 2702, 0), new ScheduledTask(3900, 3902, 0)};
        int[] expectedProcessorEndTimes = new int[]{4104, 3706, 3407, 2709};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot98_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.98_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 15, 0), new ScheduledTask(7, 17, 1), new ScheduledTask(15, 25, 0), new ScheduledTask(17, 27, 1), new ScheduledTask(25, 34, 0), new ScheduledTask(27, 35, 1), new ScheduledTask(34, 41, 0), new ScheduledTask(35, 41, 1), new ScheduledTask(41, 47, 0), new ScheduledTask(41, 46, 1), new ScheduledTask(46, 51, 1), new ScheduledTask(47, 52, 0), new ScheduledTask(51, 55, 1), new ScheduledTask(52, 56, 0), new ScheduledTask(55, 59, 1), new ScheduledTask(56, 60, 0), new ScheduledTask(59, 61, 1), new ScheduledTask(60, 62, 0), new ScheduledTask(61, 63, 1), new ScheduledTask(62, 64, 0)};
        int[] expectedProcessorEndTimes = new int[]{64, 63};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot98_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.98_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 36;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(9, 19, 0), new ScheduledTask(7, 17, 1), new ScheduledTask(7, 17, 2), new ScheduledTask(17, 27, 1), new ScheduledTask(12, 21, 3), new ScheduledTask(21, 29, 3), new ScheduledTask(29, 36, 3), new ScheduledTask(30, 36, 2), new ScheduledTask(19, 25, 2), new ScheduledTask(7, 12, 3), new ScheduledTask(25, 30, 2), new ScheduledTask(27, 32, 1), new ScheduledTask(23, 27, 0), new ScheduledTask(32, 36, 1), new ScheduledTask(5, 9, 0), new ScheduledTask(27, 31, 0), new ScheduledTask(17, 19, 2), new ScheduledTask(21, 23, 0), new ScheduledTask(19, 21, 0), new ScheduledTask(31, 33, 0)};
        int[] expectedProcessorEndTimes = new int[]{33, 36, 36, 36};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot98_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.98_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 27;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(9, 19, 1), new ScheduledTask(7, 17, 2), new ScheduledTask(7, 17, 3), new ScheduledTask(5, 15, 0), new ScheduledTask(17, 26, 2), new ScheduledTask(19, 27, 4), new ScheduledTask(14, 21, 5), new ScheduledTask(21, 27, 5), new ScheduledTask(13, 19, 4), new ScheduledTask(7, 12, 5), new ScheduledTask(22, 27, 3), new ScheduledTask(17, 22, 3), new ScheduledTask(19, 23, 1), new ScheduledTask(19, 23, 0), new ScheduledTask(7, 11, 4), new ScheduledTask(23, 27, 1), new ScheduledTask(12, 14, 5), new ScheduledTask(15, 17, 0), new ScheduledTask(11, 13, 4), new ScheduledTask(17, 19, 0)};
        int[] expectedProcessorEndTimes = new int[]{23, 27, 26, 27, 27, 27};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot98_WeightType_Random2_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.98_WeightType_Random#2_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(900, 910, 0), new ScheduledTask(4200, 4209, 0), new ScheduledTask(5800, 5809, 0), new ScheduledTask(6700, 6709, 0), new ScheduledTask(700, 708, 1), new ScheduledTask(3700, 3708, 2), new ScheduledTask(3100, 3107, 0), new ScheduledTask(4200, 4207, 3), new ScheduledTask(1900, 1906, 0), new ScheduledTask(2500, 2506, 0), new ScheduledTask(600, 606, 3), new ScheduledTask(5500, 5505, 1), new ScheduledTask(700, 705, 2), new ScheduledTask(7600, 7605, 0), new ScheduledTask(3800, 3804, 0), new ScheduledTask(5100, 5104, 0), new ScheduledTask(8100, 8104, 0), new ScheduledTask(5500, 5503, 0), new ScheduledTask(400, 403, 0), new ScheduledTask(700, 702, 0)};
        int[] expectedProcessorEndTimes = new int[]{8104, 5505, 3708, 4207};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot98_WeightType_Random2_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.98_WeightType_Random#2_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(1200, 1210, 0), new ScheduledTask(3600, 3609, 1), new ScheduledTask(3600, 3609, 2), new ScheduledTask(3500, 3509, 3), new ScheduledTask(700, 708, 3), new ScheduledTask(2000, 2008, 2), new ScheduledTask(2200, 2207, 0), new ScheduledTask(2200, 2207, 1), new ScheduledTask(800, 806, 2), new ScheduledTask(2300, 2306, 3), new ScheduledTask(600, 606, 1), new ScheduledTask(3300, 3305, 0), new ScheduledTask(400, 405, 0), new ScheduledTask(4500, 4505, 0), new ScheduledTask(2900, 2904, 0), new ScheduledTask(3800, 3804, 0), new ScheduledTask(5000, 5004, 0), new ScheduledTask(4200, 4203, 0), new ScheduledTask(900, 903, 0), new ScheduledTask(1800, 1802, 1)};
        int[] expectedProcessorEndTimes = new int[]{5004, 3609, 3609, 3509};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot98_WeightType_Random2_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.98_WeightType_Random#2_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(800, 810, 3), new ScheduledTask(2800, 2809, 3), new ScheduledTask(1900, 1909, 2), new ScheduledTask(3250, 3259, 2), new ScheduledTask(700, 708, 2), new ScheduledTask(1320, 1328, 1), new ScheduledTask(2280, 2287, 1), new ScheduledTask(3120, 3127, 1), new ScheduledTask(1400, 1406, 0), new ScheduledTask(2000, 2006, 0), new ScheduledTask(600, 606, 1), new ScheduledTask(3960, 3965, 1), new ScheduledTask(400, 405, 0), new ScheduledTask(3700, 3705, 0), new ScheduledTask(2600, 2604, 0), new ScheduledTask(3000, 3004, 0), new ScheduledTask(4200, 4204, 0), new ScheduledTask(3400, 3403, 0), new ScheduledTask(900, 903, 0), new ScheduledTask(1200, 1202, 0)};
        int[] expectedProcessorEndTimes = new int[]{4204, 3965, 3259, 2809};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot98_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.98_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(17, 27, 0), new ScheduledTask(51, 60, 1), new ScheduledTask(38, 47, 0), new ScheduledTask(47, 56, 0), new ScheduledTask(4, 12, 0), new ScheduledTask(29, 37, 1), new ScheduledTask(37, 44, 1), new ScheduledTask(44, 51, 1), new ScheduledTask(17, 23, 1), new ScheduledTask(23, 29, 1), new ScheduledTask(6, 12, 1), new ScheduledTask(60, 65, 1), new ScheduledTask(12, 17, 1), new ScheduledTask(56, 61, 0), new ScheduledTask(27, 31, 0), new ScheduledTask(31, 35, 0), new ScheduledTask(61, 65, 0), new ScheduledTask(35, 38, 0), new ScheduledTask(12, 15, 0), new ScheduledTask(15, 17, 0)};
        int[] expectedProcessorEndTimes = new int[]{65, 65};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot98_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.98_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 36;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(12, 22, 1), new ScheduledTask(11, 20, 0), new ScheduledTask(27, 36, 1), new ScheduledTask(27, 36, 2), new ScheduledTask(7, 15, 3), new ScheduledTask(21, 29, 3), new ScheduledTask(20, 27, 2), new ScheduledTask(29, 36, 3), new ScheduledTask(14, 20, 2), new ScheduledTask(15, 21, 3), new ScheduledTask(6, 12, 2), new ScheduledTask(22, 27, 1), new ScheduledTask(7, 12, 1), new ScheduledTask(27, 32, 0), new ScheduledTask(7, 11, 0), new ScheduledTask(20, 24, 0), new ScheduledTask(32, 36, 0), new ScheduledTask(24, 27, 0), new ScheduledTask(4, 7, 0), new ScheduledTask(12, 14, 2)};
        int[] expectedProcessorEndTimes = new int[]{36, 36, 36, 36};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot98_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.98_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 27;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(8, 18, 1), new ScheduledTask(12, 21, 2), new ScheduledTask(13, 22, 0), new ScheduledTask(18, 27, 3), new ScheduledTask(7, 15, 4), new ScheduledTask(10, 18, 3), new ScheduledTask(12, 19, 5), new ScheduledTask(19, 26, 5), new ScheduledTask(15, 21, 4), new ScheduledTask(21, 27, 4), new ScheduledTask(6, 12, 5), new ScheduledTask(21, 26, 2), new ScheduledTask(7, 12, 2), new ScheduledTask(22, 27, 1), new ScheduledTask(18, 22, 1), new ScheduledTask(6, 10, 0), new ScheduledTask(22, 26, 0), new ScheduledTask(10, 13, 0), new ScheduledTask(7, 10, 3), new ScheduledTask(4, 6, 0)};
        int[] expectedProcessorEndTimes = new int[]{26, 27, 26, 27, 27, 26};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot98_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.98_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(6800, 6810, 0), new ScheduledTask(1200, 1210, 0), new ScheduledTask(200, 210, 0), new ScheduledTask(2200, 2210, 0), new ScheduledTask(3200, 3210, 0), new ScheduledTask(5700, 5709, 0), new ScheduledTask(500, 509, 1), new ScheduledTask(3500, 3508, 2), new ScheduledTask(1800, 1806, 3), new ScheduledTask(4500, 4505, 0), new ScheduledTask(5400, 5405, 3), new ScheduledTask(500, 505, 2), new ScheduledTask(5200, 5205, 0), new ScheduledTask(5900, 5904, 1), new ScheduledTask(8000, 8004, 0), new ScheduledTask(4200, 4203, 0), new ScheduledTask(7800, 7802, 0), new ScheduledTask(6600, 6602, 0), new ScheduledTask(5000, 5002, 0), new ScheduledTask(600, 602, 3)};
        int[] expectedProcessorEndTimes = new int[]{8004, 5904, 3508, 5405};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot98_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.98_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2700, 2710, 0), new ScheduledTask(500, 510, 1), new ScheduledTask(400, 410, 2), new ScheduledTask(500, 510, 3), new ScheduledTask(2500, 2510, 3), new ScheduledTask(3400, 3409, 2), new ScheduledTask(2500, 2509, 1), new ScheduledTask(3700, 3708, 0), new ScheduledTask(900, 906, 0), new ScheduledTask(2400, 2405, 2), new ScheduledTask(4300, 4305, 1), new ScheduledTask(200, 205, 0), new ScheduledTask(2000, 2005, 0), new ScheduledTask(4500, 4504, 3), new ScheduledTask(4700, 4704, 0), new ScheduledTask(1500, 1503, 0), new ScheduledTask(4500, 4502, 0), new ScheduledTask(2500, 2502, 0), new ScheduledTask(1800, 1802, 0), new ScheduledTask(700, 702, 0)};
        int[] expectedProcessorEndTimes = new int[]{4704, 4305, 3409, 4504};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot98_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.98_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4460;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2400, 2410, 3), new ScheduledTask(500, 510, 2), new ScheduledTask(400, 410, 3), new ScheduledTask(2000, 2010, 2), new ScheduledTask(1580, 1590, 1), new ScheduledTask(3380, 3389, 1), new ScheduledTask(500, 509, 1), new ScheduledTask(2500, 2508, 0), new ScheduledTask(3500, 3506, 2), new ScheduledTask(2780, 2785, 1), new ScheduledTask(3500, 3505, 0), new ScheduledTask(200, 205, 0), new ScheduledTask(1800, 1805, 0), new ScheduledTask(900, 904, 0), new ScheduledTask(4000, 4004, 0), new ScheduledTask(1300, 1303, 0), new ScheduledTask(3300, 3302, 0), new ScheduledTask(2300, 2302, 0), new ScheduledTask(1600, 1602, 0), new ScheduledTask(700, 702, 0)};
        int[] expectedProcessorEndTimes = new int[]{4004, 3389, 3506, 2410};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 12, 0), new ScheduledTask(5, 15, 1), new ScheduledTask(12, 22, 0), new ScheduledTask(15, 25, 1), new ScheduledTask(22, 32, 0), new ScheduledTask(25, 34, 1), new ScheduledTask(32, 41, 0), new ScheduledTask(34, 42, 1), new ScheduledTask(41, 47, 0), new ScheduledTask(42, 47, 1), new ScheduledTask(47, 52, 0), new ScheduledTask(47, 52, 1), new ScheduledTask(52, 57, 0), new ScheduledTask(52, 56, 1), new ScheduledTask(56, 60, 1), new ScheduledTask(57, 60, 0), new ScheduledTask(60, 62, 0), new ScheduledTask(60, 62, 1), new ScheduledTask(62, 64, 0), new ScheduledTask(62, 64, 1)};
        int[] expectedProcessorEndTimes = new int[]{64, 64};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 12, 0), new ScheduledTask(5, 15, 1), new ScheduledTask(4, 14, 2), new ScheduledTask(5, 15, 3), new ScheduledTask(12, 22, 0), new ScheduledTask(14, 23, 2), new ScheduledTask(15, 24, 1), new ScheduledTask(15, 23, 3), new ScheduledTask(22, 28, 0), new ScheduledTask(23, 28, 2), new ScheduledTask(23, 28, 3), new ScheduledTask(24, 29, 1), new ScheduledTask(28, 33, 0), new ScheduledTask(28, 32, 2), new ScheduledTask(28, 32, 3), new ScheduledTask(29, 32, 1), new ScheduledTask(32, 34, 1), new ScheduledTask(32, 34, 2), new ScheduledTask(32, 34, 3), new ScheduledTask(33, 35, 0)};
        int[] expectedProcessorEndTimes = new int[]{35, 34, 34, 34};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_0dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_0.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 25;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(8, 18, 0), new ScheduledTask(5, 15, 1), new ScheduledTask(4, 14, 2), new ScheduledTask(5, 15, 3), new ScheduledTask(15, 25, 1), new ScheduledTask(16, 25, 4), new ScheduledTask(5, 14, 5), new ScheduledTask(17, 25, 5), new ScheduledTask(10, 16, 4), new ScheduledTask(15, 20, 3), new ScheduledTask(20, 25, 3), new ScheduledTask(5, 10, 4), new ScheduledTask(18, 23, 2), new ScheduledTask(14, 18, 2), new ScheduledTask(18, 22, 0), new ScheduledTask(14, 17, 5), new ScheduledTask(23, 25, 2), new ScheduledTask(6, 8, 0), new ScheduledTask(4, 6, 0), new ScheduledTask(2, 4, 0)};
        int[] expectedProcessorEndTimes = new int[]{22, 25, 25, 25, 25, 25};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_1dot00_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_1.00_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(5500, 5510, 0), new ScheduledTask(600, 610, 0), new ScheduledTask(4100, 4110, 0), new ScheduledTask(1600, 1609, 0), new ScheduledTask(2500, 2509, 0), new ScheduledTask(3200, 3208, 1), new ScheduledTask(6500, 6507, 0), new ScheduledTask(3400, 3407, 0), new ScheduledTask(7200, 7206, 0), new ScheduledTask(2000, 2006, 2), new ScheduledTask(4500, 4505, 3), new ScheduledTask(2100, 2104, 3), new ScheduledTask(5600, 5603, 2), new ScheduledTask(900, 902, 3), new ScheduledTask(800, 802, 1), new ScheduledTask(7800, 7802, 0), new ScheduledTask(5100, 5102, 0), new ScheduledTask(2000, 2002, 1), new ScheduledTask(5300, 5302, 0), new ScheduledTask(800, 802, 2)};
        int[] expectedProcessorEndTimes = new int[]{7802, 3208, 5603, 4505};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_1dot00_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_1.00_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(4100, 4110, 0), new ScheduledTask(800, 810, 1), new ScheduledTask(2600, 2610, 2), new ScheduledTask(1000, 1009, 0), new ScheduledTask(1900, 1909, 0), new ScheduledTask(2100, 2108, 3), new ScheduledTask(3700, 3707, 3), new ScheduledTask(1200, 1207, 2), new ScheduledTask(3800, 3806, 1), new ScheduledTask(2800, 2806, 0), new ScheduledTask(2800, 2805, 1), new ScheduledTask(1300, 1304, 3), new ScheduledTask(3400, 3403, 0), new ScheduledTask(900, 902, 3), new ScheduledTask(600, 602, 0), new ScheduledTask(4600, 4602, 2), new ScheduledTask(3700, 3702, 0), new ScheduledTask(800, 802, 0), new ScheduledTask(3900, 3902, 0), new ScheduledTask(800, 802, 2)};
        int[] expectedProcessorEndTimes = new int[]{4110, 3806, 4602, 3707};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_1dot00_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_1.00_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(3100, 3110, 0), new ScheduledTask(800, 810, 1), new ScheduledTask(2450, 2460, 2), new ScheduledTask(1100, 1109, 2), new ScheduledTask(1000, 1009, 3), new ScheduledTask(2800, 2808, 3), new ScheduledTask(2840, 2847, 1), new ScheduledTask(2000, 2007, 1), new ScheduledTask(3680, 3686, 1), new ScheduledTask(1200, 1206, 0), new ScheduledTask(2400, 2405, 0), new ScheduledTask(1800, 1804, 0), new ScheduledTask(3950, 3953, 2), new ScheduledTask(1000, 1002, 0), new ScheduledTask(600, 602, 0), new ScheduledTask(4100, 4102, 0), new ScheduledTask(2200, 2202, 0), new ScheduledTask(800, 802, 0), new ScheduledTask(2900, 2902, 0), new ScheduledTask(800, 802, 2)};
        int[] expectedProcessorEndTimes = new int[]{4102, 3686, 3953, 2808};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 16, 0), new ScheduledTask(8, 18, 1), new ScheduledTask(16, 26, 0), new ScheduledTask(18, 27, 1), new ScheduledTask(26, 35, 0), new ScheduledTask(27, 35, 1), new ScheduledTask(35, 42, 0), new ScheduledTask(35, 42, 1), new ScheduledTask(42, 48, 0), new ScheduledTask(42, 48, 1), new ScheduledTask(48, 53, 0), new ScheduledTask(48, 52, 1), new ScheduledTask(52, 55, 1), new ScheduledTask(53, 55, 0), new ScheduledTask(55, 57, 0), new ScheduledTask(55, 57, 1), new ScheduledTask(57, 59, 0), new ScheduledTask(57, 59, 1), new ScheduledTask(59, 61, 0), new ScheduledTask(59, 61, 1)};
        int[] expectedProcessorEndTimes = new int[]{61, 61};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(22, 32, 0), new ScheduledTask(8, 18, 1), new ScheduledTask(12, 22, 2), new ScheduledTask(6, 15, 0), new ScheduledTask(12, 21, 3), new ScheduledTask(22, 30, 1), new ScheduledTask(28, 35, 3), new ScheduledTask(21, 28, 3), new ScheduledTask(28, 34, 2), new ScheduledTask(22, 28, 2), new ScheduledTask(30, 35, 1), new ScheduledTask(18, 22, 1), new ScheduledTask(15, 18, 0), new ScheduledTask(10, 12, 3), new ScheduledTask(8, 10, 2), new ScheduledTask(32, 34, 0), new ScheduledTask(18, 20, 0), new ScheduledTask(10, 12, 2), new ScheduledTask(20, 22, 0), new ScheduledTask(8, 10, 3)};
        int[] expectedProcessorEndTimes = new int[]{34, 35, 34, 35};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 26;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(16, 26, 0), new ScheduledTask(8, 18, 1), new ScheduledTask(6, 16, 0), new ScheduledTask(10, 19, 2), new ScheduledTask(10, 19, 3), new ScheduledTask(18, 26, 1), new ScheduledTask(19, 26, 2), new ScheduledTask(10, 17, 4), new ScheduledTask(18, 24, 5), new ScheduledTask(12, 18, 5), new ScheduledTask(21, 26, 4), new ScheduledTask(17, 21, 4), new ScheduledTask(19, 22, 3), new ScheduledTask(10, 12, 5), new ScheduledTask(8, 10, 3), new ScheduledTask(24, 26, 5), new ScheduledTask(22, 24, 3), new ScheduledTask(8, 10, 4), new ScheduledTask(24, 26, 3), new ScheduledTask(8, 10, 5)};
        int[] expectedProcessorEndTimes = new int[]{26, 26, 26, 26, 26, 26};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_1dot00_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_1.00_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(4600, 4610, 0), new ScheduledTask(5600, 5610, 0), new ScheduledTask(800, 810, 0), new ScheduledTask(2600, 2610, 0), new ScheduledTask(7900, 7910, 0), new ScheduledTask(1700, 1709, 1), new ScheduledTask(1300, 1308, 2), new ScheduledTask(1800, 1808, 0), new ScheduledTask(5400, 5408, 3), new ScheduledTask(6600, 6608, 0), new ScheduledTask(1200, 1207, 3), new ScheduledTask(6100, 6107, 2), new ScheduledTask(9800, 9807, 0), new ScheduledTask(8900, 8906, 0), new ScheduledTask(7100, 7106, 1), new ScheduledTask(3600, 3605, 0), new ScheduledTask(4100, 4105, 0), new ScheduledTask(7400, 7405, 0), new ScheduledTask(9500, 9503, 0), new ScheduledTask(10500, 10502, 0)};
        int[] expectedProcessorEndTimes = new int[]{10502, 7106, 6107, 5408};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_1dot00_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_1.00_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 6800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(1500, 1510, 0), new ScheduledTask(3200, 3210, 0), new ScheduledTask(1100, 1110, 1), new ScheduledTask(1200, 1210, 2), new ScheduledTask(3200, 3210, 2), new ScheduledTask(4300, 4309, 3), new ScheduledTask(2700, 2708, 3), new ScheduledTask(1100, 1108, 3), new ScheduledTask(5200, 5208, 2), new ScheduledTask(5100, 5108, 1), new ScheduledTask(800, 807, 0), new ScheduledTask(2500, 2507, 0), new ScheduledTask(5900, 5907, 0), new ScheduledTask(4700, 4706, 0), new ScheduledTask(5300, 5306, 0), new ScheduledTask(3100, 3105, 1), new ScheduledTask(4100, 4105, 1), new ScheduledTask(4200, 4205, 0), new ScheduledTask(6100, 6103, 3), new ScheduledTask(6600, 6602, 0)};
        int[] expectedProcessorEndTimes = new int[]{6602, 5108, 5208, 6103};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_1dot00_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_1.00_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(1800, 1810, 0), new ScheduledTask(3100, 3110, 3), new ScheduledTask(1100, 1110, 3), new ScheduledTask(1200, 1210, 2), new ScheduledTask(4050, 4060, 2), new ScheduledTask(2700, 2709, 2), new ScheduledTask(2900, 2908, 1), new ScheduledTask(1100, 1108, 1), new ScheduledTask(4820, 4828, 1), new ScheduledTask(3860, 3868, 1), new ScheduledTask(2060, 2067, 1), new ScheduledTask(2800, 2807, 0), new ScheduledTask(5200, 5207, 0), new ScheduledTask(4000, 4006, 0), new ScheduledTask(4600, 4606, 0), new ScheduledTask(800, 805, 0), new ScheduledTask(1300, 1305, 0), new ScheduledTask(3500, 3505, 0), new ScheduledTask(5100, 5103, 3), new ScheduledTask(5550, 5552, 2)};
        int[] expectedProcessorEndTimes = new int[]{5207, 4828, 5552, 5103};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(34, 44, 1), new ScheduledTask(45, 55, 0), new ScheduledTask(8, 18, 0), new ScheduledTask(18, 28, 0), new ScheduledTask(61, 71, 1), new ScheduledTask(52, 61, 1), new ScheduledTask(26, 34, 1), new ScheduledTask(11, 19, 1), new ScheduledTask(74, 82, 1), new ScheduledTask(44, 52, 1), new ScheduledTask(19, 26, 1), new ScheduledTask(38, 45, 0), new ScheduledTask(72, 79, 0), new ScheduledTask(60, 66, 0), new ScheduledTask(66, 72, 0), new ScheduledTask(28, 33, 0), new ScheduledTask(33, 38, 0), new ScheduledTask(55, 60, 0), new ScheduledTask(71, 74, 1), new ScheduledTask(79, 81, 0)};
        int[] expectedProcessorEndTimes = new int[]{81, 82};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(22, 32, 1), new ScheduledTask(27, 37, 2), new ScheduledTask(11, 21, 3), new ScheduledTask(8, 18, 0), new ScheduledTask(37, 47, 3), new ScheduledTask(28, 37, 3), new ScheduledTask(19, 27, 2), new ScheduledTask(11, 19, 2), new ScheduledTask(37, 45, 2), new ScheduledTask(39, 47, 1), new ScheduledTask(21, 28, 3), new ScheduledTask(32, 39, 1), new ScheduledTask(38, 45, 0), new ScheduledTask(23, 29, 0), new ScheduledTask(29, 35, 0), new ScheduledTask(12, 17, 1), new ScheduledTask(17, 22, 1), new ScheduledTask(18, 23, 0), new ScheduledTask(35, 38, 0), new ScheduledTask(45, 47, 2)};
        int[] expectedProcessorEndTimes = new int[]{45, 47, 47, 47};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(17, 27, 1), new ScheduledTask(13, 23, 0), new ScheduledTask(11, 21, 2), new ScheduledTask(12, 22, 3), new ScheduledTask(22, 32, 3), new ScheduledTask(26, 35, 4), new ScheduledTask(19, 27, 5), new ScheduledTask(11, 19, 5), new ScheduledTask(27, 35, 5), new ScheduledTask(21, 29, 2), new ScheduledTask(12, 19, 4), new ScheduledTask(19, 26, 4), new ScheduledTask(28, 35, 0), new ScheduledTask(27, 33, 1), new ScheduledTask(29, 35, 2), new ScheduledTask(12, 17, 1), new ScheduledTask(8, 13, 0), new ScheduledTask(23, 28, 0), new ScheduledTask(32, 35, 3), new ScheduledTask(33, 35, 1)};
        int[] expectedProcessorEndTimes = new int[]{35, 35, 35, 35, 35, 35};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_1dot01_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_1.01_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(900, 911, 1), new ScheduledTask(7200, 7210, 0), new ScheduledTask(3900, 3910, 0), new ScheduledTask(1000, 1010, 2), new ScheduledTask(4900, 4909, 0), new ScheduledTask(4100, 4109, 3), new ScheduledTask(3000, 3009, 0), new ScheduledTask(5800, 5809, 0), new ScheduledTask(2200, 2208, 0), new ScheduledTask(8200, 8207, 0), new ScheduledTask(700, 706, 0), new ScheduledTask(8900, 8906, 0), new ScheduledTask(1100, 1105, 3), new ScheduledTask(6700, 6705, 0), new ScheduledTask(1300, 1303, 0), new ScheduledTask(1600, 1603, 0), new ScheduledTask(7500, 7503, 1), new ScheduledTask(1900, 1903, 0), new ScheduledTask(7000, 7002, 2), new ScheduledTask(8200, 8202, 2)};
        int[] expectedProcessorEndTimes = new int[]{8906, 7503, 8202, 4109};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_1dot01_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_1.01_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 6100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(900, 911, 1), new ScheduledTask(4300, 4310, 0), new ScheduledTask(2800, 2810, 0), new ScheduledTask(1000, 1010, 2), new ScheduledTask(2500, 2509, 3), new ScheduledTask(1600, 1609, 0), new ScheduledTask(4300, 4309, 1), new ScheduledTask(4300, 4309, 3), new ScheduledTask(3000, 3008, 2), new ScheduledTask(4600, 4607, 2), new ScheduledTask(3100, 3106, 1), new ScheduledTask(5300, 5306, 0), new ScheduledTask(1100, 1105, 3), new ScheduledTask(3800, 3805, 0), new ScheduledTask(700, 703, 0), new ScheduledTask(1000, 1003, 0), new ScheduledTask(2500, 2503, 0), new ScheduledTask(1300, 1303, 0), new ScheduledTask(2100, 2102, 3), new ScheduledTask(5900, 5902, 0)};
        int[] expectedProcessorEndTimes = new int[]{5902, 4309, 4607, 4309};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_1dot01_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_1.01_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(900, 911, 2), new ScheduledTask(3000, 3010, 3), new ScheduledTask(3750, 3760, 2), new ScheduledTask(1000, 1010, 3), new ScheduledTask(3140, 3149, 1), new ScheduledTask(1700, 1709, 1), new ScheduledTask(2400, 2409, 0), new ScheduledTask(4220, 4229, 1), new ScheduledTask(2550, 2558, 2), new ScheduledTask(3800, 3807, 0), new ScheduledTask(700, 706, 0), new ScheduledTask(4500, 4506, 0), new ScheduledTask(1100, 1105, 1), new ScheduledTask(3300, 3305, 0), new ScheduledTask(1300, 1303, 0), new ScheduledTask(1600, 1603, 0), new ScheduledTask(2780, 2783, 1), new ScheduledTask(1900, 1903, 0), new ScheduledTask(2200, 2202, 0), new ScheduledTask(5100, 5102, 0)};
        int[] expectedProcessorEndTimes = new int[]{5102, 4229, 3760, 3010};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_1dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_1.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(9, 20, 1), new ScheduledTask(57, 67, 0), new ScheduledTask(33, 43, 0), new ScheduledTask(20, 30, 1), new ScheduledTask(43, 52, 0), new ScheduledTask(21, 30, 0), new ScheduledTask(46, 55, 1), new ScheduledTask(55, 64, 1), new ScheduledTask(38, 46, 1), new ScheduledTask(64, 71, 1), new ScheduledTask(30, 36, 1), new ScheduledTask(67, 73, 0), new ScheduledTask(7, 12, 0), new ScheduledTask(52, 57, 0), new ScheduledTask(12, 15, 0), new ScheduledTask(15, 18, 0), new ScheduledTask(30, 33, 0), new ScheduledTask(18, 21, 0), new ScheduledTask(36, 38, 1), new ScheduledTask(71, 73, 1)};
        int[] expectedProcessorEndTimes = new int[]{73, 73};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_1dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_1.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 42;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(9, 20, 1), new ScheduledTask(30, 40, 0), new ScheduledTask(15, 25, 0), new ScheduledTask(10, 20, 2), new ScheduledTask(24, 33, 3), new ScheduledTask(15, 24, 3), new ScheduledTask(33, 42, 2), new ScheduledTask(33, 42, 3), new ScheduledTask(25, 33, 2), new ScheduledTask(29, 36, 1), new ScheduledTask(20, 26, 1), new ScheduledTask(36, 42, 1), new ScheduledTask(20, 25, 2), new ScheduledTask(25, 30, 0), new ScheduledTask(7, 10, 0), new ScheduledTask(26, 29, 1), new ScheduledTask(12, 15, 0), new ScheduledTask(12, 15, 3), new ScheduledTask(10, 12, 0), new ScheduledTask(40, 42, 0)};
        int[] expectedProcessorEndTimes = new int[]{42, 42, 42, 42};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_1dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_1.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(9, 20, 1), new ScheduledTask(20, 30, 0), new ScheduledTask(22, 32, 2), new ScheduledTask(10, 20, 3), new ScheduledTask(16, 25, 4), new ScheduledTask(13, 22, 2), new ScheduledTask(23, 32, 3), new ScheduledTask(23, 32, 5), new ScheduledTask(15, 23, 5), new ScheduledTask(25, 32, 4), new ScheduledTask(20, 26, 1), new ScheduledTask(26, 32, 1), new ScheduledTask(11, 16, 4), new ScheduledTask(15, 20, 0), new ScheduledTask(7, 10, 0), new ScheduledTask(20, 23, 3), new ScheduledTask(12, 15, 0), new ScheduledTask(12, 15, 5), new ScheduledTask(10, 12, 0), new ScheduledTask(30, 32, 0)};
        int[] expectedProcessorEndTimes = new int[]{32, 32, 32, 32, 32, 32};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_1dot01_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_1.01_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(600, 612, 0), new ScheduledTask(3000, 3012, 0), new ScheduledTask(4200, 4211, 0), new ScheduledTask(2000, 2010, 0), new ScheduledTask(1000, 1008, 1), new ScheduledTask(800, 807, 2), new ScheduledTask(6600, 6607, 0), new ScheduledTask(7300, 7307, 0), new ScheduledTask(4400, 4407, 3), new ScheduledTask(800, 806, 3), new ScheduledTask(5000, 5006, 2), new ScheduledTask(8000, 8006, 0), new ScheduledTask(5800, 5805, 1), new ScheduledTask(8600, 8605, 0), new ScheduledTask(5500, 5505, 0), new ScheduledTask(5300, 5302, 0), new ScheduledTask(6000, 6002, 0), new ScheduledTask(6400, 6402, 0), new ScheduledTask(1800, 1802, 0), new ScheduledTask(6200, 6202, 0)};
        int[] expectedProcessorEndTimes = new int[]{8605, 5805, 5006, 4407};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_1dot01_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_1.01_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(600, 612, 0), new ScheduledTask(1800, 1812, 0), new ScheduledTask(3000, 3011, 0), new ScheduledTask(1400, 1410, 1), new ScheduledTask(2000, 2008, 2), new ScheduledTask(800, 807, 3), new ScheduledTask(3000, 3007, 3), new ScheduledTask(4400, 4407, 3), new ScheduledTask(4400, 4407, 2), new ScheduledTask(800, 806, 2), new ScheduledTask(3400, 3406, 1), new ScheduledTask(4600, 4606, 1), new ScheduledTask(4100, 4105, 0), new ScheduledTask(5100, 5105, 0), new ScheduledTask(4600, 4605, 0), new ScheduledTask(2200, 2202, 3), new ScheduledTask(3600, 3602, 2), new ScheduledTask(2600, 2602, 3), new ScheduledTask(1000, 1002, 1), new ScheduledTask(4000, 4002, 2)};
        int[] expectedProcessorEndTimes = new int[]{5105, 4606, 4407, 4407};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_1dot01_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_1.01_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(900, 912, 3), new ScheduledTask(2750, 2762, 2), new ScheduledTask(2720, 2731, 1), new ScheduledTask(1520, 1530, 1), new ScheduledTask(3300, 3308, 3), new ScheduledTask(800, 807, 2), new ScheduledTask(3100, 3107, 0), new ScheduledTask(4040, 4047, 1), new ScheduledTask(2200, 2207, 0), new ScheduledTask(800, 806, 1), new ScheduledTask(1850, 1856, 2), new ScheduledTask(3800, 3806, 0), new ScheduledTask(800, 805, 0), new ScheduledTask(4400, 4405, 0), new ScheduledTask(1300, 1305, 0), new ScheduledTask(4550, 4552, 2), new ScheduledTask(1800, 1802, 0), new ScheduledTask(2900, 2902, 0), new ScheduledTask(600, 602, 0), new ScheduledTask(2000, 2002, 0)};
        int[] expectedProcessorEndTimes = new int[]{4405, 4047, 4552, 3308};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 18, 0), new ScheduledTask(28, 40, 0), new ScheduledTask(37, 48, 1), new ScheduledTask(21, 31, 1), new ScheduledTask(18, 26, 0), new ScheduledTask(8, 15, 1), new ScheduledTask(55, 62, 1), new ScheduledTask(62, 69, 1), new ScheduledTask(48, 55, 1), new ScheduledTask(15, 21, 1), new ScheduledTask(31, 37, 1), new ScheduledTask(58, 64, 0), new ScheduledTask(40, 45, 0), new ScheduledTask(64, 69, 0), new ScheduledTask(47, 52, 0), new ScheduledTask(45, 47, 0), new ScheduledTask(52, 54, 0), new ScheduledTask(56, 58, 0), new ScheduledTask(26, 28, 0), new ScheduledTask(54, 56, 0)};
        int[] expectedProcessorEndTimes = new int[]{69, 69};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 39;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 18, 0), new ScheduledTask(18, 30, 0), new ScheduledTask(12, 23, 1), new ScheduledTask(14, 24, 2), new ScheduledTask(15, 23, 3), new ScheduledTask(8, 15, 3), new ScheduledTask(25, 32, 3), new ScheduledTask(32, 39, 3), new ScheduledTask(30, 37, 2), new ScheduledTask(8, 14, 2), new ScheduledTask(24, 30, 2), new ScheduledTask(28, 34, 1), new ScheduledTask(23, 28, 1), new ScheduledTask(34, 39, 1), new ScheduledTask(30, 35, 0), new ScheduledTask(23, 25, 3), new ScheduledTask(35, 37, 0), new ScheduledTask(37, 39, 2), new ScheduledTask(10, 12, 1), new ScheduledTask(37, 39, 0)};
        int[] expectedProcessorEndTimes = new int[]{39, 39, 39, 39};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 30;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(9, 21, 1), new ScheduledTask(6, 18, 0), new ScheduledTask(12, 23, 2), new ScheduledTask(12, 22, 3), new ScheduledTask(15, 23, 4), new ScheduledTask(8, 15, 4), new ScheduledTask(23, 30, 2), new ScheduledTask(23, 30, 5), new ScheduledTask(16, 23, 5), new ScheduledTask(8, 14, 5), new ScheduledTask(23, 29, 4), new ScheduledTask(24, 30, 3), new ScheduledTask(21, 26, 1), new ScheduledTask(23, 28, 0), new ScheduledTask(18, 23, 0), new ScheduledTask(14, 16, 5), new ScheduledTask(26, 28, 1), new ScheduledTask(22, 24, 3), new ScheduledTask(10, 12, 3), new ScheduledTask(28, 30, 1)};
        int[] expectedProcessorEndTimes = new int[]{28, 30, 30, 30, 29, 30};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_1dot02_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_1.02_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(6700, 6710, 0), new ScheduledTask(1600, 1610, 0), new ScheduledTask(3200, 3209, 0), new ScheduledTask(4000, 4008, 1), new ScheduledTask(1300, 1307, 2), new ScheduledTask(6000, 6007, 0), new ScheduledTask(4700, 4707, 3), new ScheduledTask(900, 907, 0), new ScheduledTask(4100, 4107, 0), new ScheduledTask(4800, 4806, 0), new ScheduledTask(1100, 1106, 3), new ScheduledTask(5400, 5406, 0), new ScheduledTask(5500, 5504, 2), new ScheduledTask(1600, 1604, 1), new ScheduledTask(2600, 2604, 0), new ScheduledTask(8500, 8504, 0), new ScheduledTask(7700, 7704, 0), new ScheduledTask(8100, 8102, 0), new ScheduledTask(8300, 8302, 0), new ScheduledTask(3000, 3002, 0)};
        int[] expectedProcessorEndTimes = new int[]{8504, 4008, 5504, 4707};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_1dot02_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_1.02_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(3500, 3510, 0), new ScheduledTask(2300, 2310, 1), new ScheduledTask(2500, 2509, 2), new ScheduledTask(4100, 4108, 3), new ScheduledTask(1300, 1307, 3), new ScheduledTask(4300, 4307, 2), new ScheduledTask(2700, 2707, 3), new ScheduledTask(1100, 1107, 2), new ScheduledTask(4300, 4307, 1), new ScheduledTask(1500, 1506, 0), new ScheduledTask(1100, 1106, 1), new ScheduledTask(2100, 2106, 0), new ScheduledTask(3100, 3104, 0), new ScheduledTask(2700, 2704, 0), new ScheduledTask(900, 904, 0), new ScheduledTask(5300, 5304, 0), new ScheduledTask(4500, 4504, 0), new ScheduledTask(4900, 4902, 0), new ScheduledTask(5100, 5102, 0), new ScheduledTask(1300, 1302, 0)};
        int[] expectedProcessorEndTimes = new int[]{5304, 4307, 4307, 4108};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_1dot02_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_1.02_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(2700, 2710, 3), new ScheduledTask(2150, 2160, 2), new ScheduledTask(3650, 3659, 2), new ScheduledTask(3980, 3988, 1), new ScheduledTask(1300, 1307, 3), new ScheduledTask(1820, 1827, 1), new ScheduledTask(2660, 2667, 1), new ScheduledTask(1100, 1107, 2), new ScheduledTask(1500, 1507, 0), new ScheduledTask(2200, 2206, 0), new ScheduledTask(1100, 1106, 1), new ScheduledTask(2800, 2806, 0), new ScheduledTask(3500, 3504, 1), new ScheduledTask(3400, 3404, 0), new ScheduledTask(900, 904, 0), new ScheduledTask(4600, 4604, 0), new ScheduledTask(3800, 3804, 0), new ScheduledTask(4200, 4202, 0), new ScheduledTask(4400, 4402, 0), new ScheduledTask(1300, 1302, 0)};
        int[] expectedProcessorEndTimes = new int[]{4604, 3988, 3659, 2710};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_1dot02_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_1.02_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(48, 58, 1), new ScheduledTask(15, 25, 0), new ScheduledTask(25, 34, 1), new ScheduledTask(58, 66, 1), new ScheduledTask(18, 25, 1), new ScheduledTask(34, 41, 1), new ScheduledTask(41, 48, 1), new ScheduledTask(11, 18, 1), new ScheduledTask(31, 38, 0), new ScheduledTask(38, 44, 0), new ScheduledTask(9, 15, 0), new ScheduledTask(44, 50, 0), new ScheduledTask(54, 58, 0), new ScheduledTask(50, 54, 0), new ScheduledTask(25, 29, 0), new ScheduledTask(64, 68, 0), new ScheduledTask(58, 62, 0), new ScheduledTask(62, 64, 0), new ScheduledTask(66, 68, 1), new ScheduledTask(29, 31, 0)};
        int[] expectedProcessorEndTimes = new int[]{68, 68};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_1dot02_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_1.02_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 40;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(22, 32, 0), new ScheduledTask(13, 23, 1), new ScheduledTask(17, 26, 2), new ScheduledTask(32, 40, 3), new ScheduledTask(18, 25, 3), new ScheduledTask(15, 22, 0), new ScheduledTask(23, 30, 1), new ScheduledTask(11, 18, 3), new ScheduledTask(25, 32, 3), new ScheduledTask(26, 32, 2), new ScheduledTask(11, 17, 2), new ScheduledTask(32, 38, 2), new ScheduledTask(34, 38, 1), new ScheduledTask(30, 34, 1), new ScheduledTask(9, 13, 0), new ScheduledTask(36, 40, 0), new ScheduledTask(32, 36, 0), new ScheduledTask(38, 40, 1), new ScheduledTask(38, 40, 2), new ScheduledTask(13, 15, 0)};
        int[] expectedProcessorEndTimes = new int[]{40, 40, 40, 40};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_1dot02_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_1.02_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 19, 0), new ScheduledTask(13, 23, 1), new ScheduledTask(15, 24, 2), new ScheduledTask(23, 31, 3), new ScheduledTask(17, 24, 4), new ScheduledTask(24, 31, 2), new ScheduledTask(24, 31, 5), new ScheduledTask(11, 18, 5), new ScheduledTask(24, 31, 4), new ScheduledTask(17, 23, 3), new ScheduledTask(11, 17, 4), new ScheduledTask(18, 24, 5), new ScheduledTask(27, 31, 1), new ScheduledTask(23, 27, 1), new ScheduledTask(13, 17, 3), new ScheduledTask(27, 31, 0), new ScheduledTask(19, 23, 0), new ScheduledTask(23, 25, 0), new ScheduledTask(25, 27, 0), new ScheduledTask(13, 15, 2)};
        int[] expectedProcessorEndTimes = new int[]{31, 31, 31, 31, 31, 31};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_1dot02_WeightType_Random2_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_1.02_WeightType_Random#2_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(7100, 7110, 0), new ScheduledTask(1000, 1010, 0), new ScheduledTask(2000, 2009, 0), new ScheduledTask(3200, 3209, 0), new ScheduledTask(5500, 5508, 0), new ScheduledTask(6300, 6308, 0), new ScheduledTask(700, 708, 1), new ScheduledTask(4100, 4107, 0), new ScheduledTask(500, 506, 2), new ScheduledTask(4600, 4606, 3), new ScheduledTask(1000, 1006, 3), new ScheduledTask(4100, 4105, 2), new ScheduledTask(5500, 5504, 1), new ScheduledTask(5100, 5104, 0), new ScheduledTask(300, 304, 0), new ScheduledTask(2900, 2903, 0), new ScheduledTask(4800, 4803, 0), new ScheduledTask(700, 703, 0), new ScheduledTask(8100, 8103, 0), new ScheduledTask(7100, 7102, 2)};
        int[] expectedProcessorEndTimes = new int[]{8103, 5504, 7102, 4606};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_1dot02_WeightType_Random2_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_1.02_WeightType_Random#2_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3500, 3510, 0), new ScheduledTask(1500, 1510, 0), new ScheduledTask(800, 809, 1), new ScheduledTask(2300, 2309, 2), new ScheduledTask(2100, 2108, 3), new ScheduledTask(3700, 3708, 3), new ScheduledTask(700, 708, 2), new ScheduledTask(2600, 2607, 1), new ScheduledTask(500, 506, 3), new ScheduledTask(4100, 4106, 2), new ScheduledTask(4000, 4006, 1), new ScheduledTask(300, 305, 0), new ScheduledTask(4500, 4504, 0), new ScheduledTask(3100, 3104, 0), new ScheduledTask(800, 804, 0), new ScheduledTask(2500, 2503, 0), new ScheduledTask(2800, 2803, 0), new ScheduledTask(1200, 1203, 0), new ScheduledTask(4900, 4903, 0), new ScheduledTask(1700, 1702, 3)};
        int[] expectedProcessorEndTimes = new int[]{4903, 4006, 4106, 3708};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_1dot02_WeightType_Random2_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_1.02_WeightType_Random#2_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4460;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(1600, 1610, 3), new ScheduledTask(1150, 1160, 2), new ScheduledTask(2650, 2659, 2), new ScheduledTask(1220, 1229, 1), new ScheduledTask(2540, 2548, 1), new ScheduledTask(3500, 3508, 1), new ScheduledTask(300, 308, 0), new ScheduledTask(1500, 1507, 0), new ScheduledTask(500, 506, 1), new ScheduledTask(3500, 3506, 0), new ScheduledTask(2500, 2506, 0), new ScheduledTask(600, 605, 3), new ScheduledTask(3600, 3604, 3), new ScheduledTask(3100, 3104, 0), new ScheduledTask(1100, 1104, 0), new ScheduledTask(4000, 4003, 2), new ScheduledTask(2200, 2203, 0), new ScheduledTask(700, 703, 2), new ScheduledTask(4100, 4103, 0), new ScheduledTask(2300, 2302, 1)};
        int[] expectedProcessorEndTimes = new int[]{4103, 3508, 4003, 3604};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_1dot02_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_1.02_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(53, 63, 1), new ScheduledTask(24, 34, 1), new ScheduledTask(10, 19, 0), new ScheduledTask(22, 31, 0), new ScheduledTask(40, 48, 0), new ScheduledTask(48, 56, 0), new ScheduledTask(16, 24, 1), new ScheduledTask(34, 41, 1), new ScheduledTask(5, 11, 1), new ScheduledTask(47, 53, 1), new ScheduledTask(41, 47, 1), new ScheduledTask(11, 16, 1), new ScheduledTask(56, 60, 0), new ScheduledTask(36, 40, 0), new ScheduledTask(3, 7, 0), new ScheduledTask(19, 22, 0), new ScheduledTask(31, 34, 0), new ScheduledTask(7, 10, 0), new ScheduledTask(60, 63, 0), new ScheduledTask(34, 36, 0)};
        int[] expectedProcessorEndTimes = new int[]{63, 63};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_1dot02_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_1.02_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(21, 31, 0), new ScheduledTask(11, 21, 1), new ScheduledTask(6, 15, 0), new ScheduledTask(11, 20, 2), new ScheduledTask(19, 27, 3), new ScheduledTask(27, 35, 3), new ScheduledTask(11, 19, 3), new ScheduledTask(20, 27, 2), new ScheduledTask(5, 11, 3), new ScheduledTask(29, 35, 2), new ScheduledTask(21, 27, 1), new ScheduledTask(6, 11, 2), new ScheduledTask(31, 35, 1), new ScheduledTask(27, 31, 1), new ScheduledTask(7, 11, 1), new ScheduledTask(15, 18, 0), new ScheduledTask(18, 21, 0), new ScheduledTask(3, 6, 0), new ScheduledTask(31, 34, 0), new ScheduledTask(27, 29, 2)};
        int[] expectedProcessorEndTimes = new int[]{34, 35, 35, 35};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_1dot02_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_1.02_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 26;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(11, 21, 0), new ScheduledTask(8, 18, 1), new ScheduledTask(11, 20, 2), new ScheduledTask(11, 20, 3), new ScheduledTask(18, 26, 4), new ScheduledTask(18, 26, 5), new ScheduledTask(7, 15, 4), new ScheduledTask(11, 18, 5), new ScheduledTask(5, 11, 5), new ScheduledTask(20, 26, 3), new ScheduledTask(20, 26, 2), new ScheduledTask(6, 11, 3), new ScheduledTask(22, 26, 1), new ScheduledTask(18, 22, 1), new ScheduledTask(7, 11, 2), new ScheduledTask(15, 18, 4), new ScheduledTask(6, 9, 0), new ScheduledTask(3, 6, 0), new ScheduledTask(21, 24, 0), new ScheduledTask(9, 11, 0)};
        int[] expectedProcessorEndTimes = new int[]{24, 26, 26, 26, 26, 26};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_1dot02_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_1.02_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(200, 210, 0), new ScheduledTask(1800, 1810, 1), new ScheduledTask(900, 909, 2), new ScheduledTask(700, 709, 3), new ScheduledTask(2700, 2707, 0), new ScheduledTask(4500, 4507, 0), new ScheduledTask(1600, 1607, 0), new ScheduledTask(5200, 5207, 0), new ScheduledTask(3400, 3407, 0), new ScheduledTask(6300, 6307, 0), new ScheduledTask(7000, 7004, 0), new ScheduledTask(2300, 2304, 0), new ScheduledTask(4100, 4104, 0), new ScheduledTask(1200, 1204, 0), new ScheduledTask(7700, 7704, 0), new ScheduledTask(5900, 5904, 0), new ScheduledTask(6300, 6303, 2), new ScheduledTask(6100, 6103, 3), new ScheduledTask(7400, 7403, 0), new ScheduledTask(600, 602, 1)};
        int[] expectedProcessorEndTimes = new int[]{7704, 1810, 6303, 6103};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_1dot02_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_1.02_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(400, 410, 1), new ScheduledTask(1500, 1510, 0), new ScheduledTask(2400, 2409, 1), new ScheduledTask(1200, 1209, 2), new ScheduledTask(700, 707, 3), new ScheduledTask(3000, 3007, 2), new ScheduledTask(200, 207, 0), new ScheduledTask(3500, 3507, 3), new ScheduledTask(2100, 2107, 3), new ScheduledTask(3300, 3307, 0), new ScheduledTask(4200, 4204, 1), new ScheduledTask(900, 904, 0), new ScheduledTask(2500, 2504, 0), new ScheduledTask(400, 404, 2), new ScheduledTask(4300, 4304, 0), new ScheduledTask(2900, 2904, 0), new ScheduledTask(4700, 4703, 0), new ScheduledTask(4400, 4403, 2), new ScheduledTask(4000, 4003, 0), new ScheduledTask(1300, 1302, 0)};
        int[] expectedProcessorEndTimes = new int[]{4703, 4204, 4403, 3507};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_1dot02_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_1.02_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4220;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(400, 410, 3), new ScheduledTask(1300, 1310, 2), new ScheduledTask(2400, 2409, 3), new ScheduledTask(2800, 2809, 2), new ScheduledTask(1340, 1347, 1), new ScheduledTask(1000, 1007, 0), new ScheduledTask(500, 507, 1), new ScheduledTask(3020, 3027, 1), new ScheduledTask(2180, 2187, 1), new ScheduledTask(2100, 2107, 0), new ScheduledTask(2800, 2804, 0), new ScheduledTask(200, 204, 0), new ScheduledTask(600, 604, 0), new ScheduledTask(400, 404, 2), new ScheduledTask(3500, 3504, 0), new ScheduledTask(1700, 1704, 0), new ScheduledTask(3900, 3903, 0), new ScheduledTask(3860, 3863, 1), new ScheduledTask(3200, 3203, 0), new ScheduledTask(1000, 1002, 2)};
        int[] expectedProcessorEndTimes = new int[]{3903, 3863, 2809, 2409};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_1dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 12, 0), new ScheduledTask(12, 22, 1), new ScheduledTask(52, 61, 1), new ScheduledTask(22, 31, 1), new ScheduledTask(31, 38, 1), new ScheduledTask(26, 33, 0), new ScheduledTask(5, 12, 1), new ScheduledTask(45, 52, 1), new ScheduledTask(38, 45, 1), new ScheduledTask(37, 44, 0), new ScheduledTask(44, 48, 0), new ScheduledTask(16, 20, 0), new ScheduledTask(22, 26, 0), new ScheduledTask(12, 16, 0), new ScheduledTask(51, 55, 0), new ScheduledTask(33, 37, 0), new ScheduledTask(55, 58, 0), new ScheduledTask(58, 61, 0), new ScheduledTask(48, 51, 0), new ScheduledTask(20, 22, 0)};
        int[] expectedProcessorEndTimes = new int[]{61, 61};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_1dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_1.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 33;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(4, 14, 1), new ScheduledTask(8, 18, 2), new ScheduledTask(21, 30, 3), new ScheduledTask(12, 21, 3), new ScheduledTask(18, 25, 2), new ScheduledTask(14, 21, 1), new ScheduledTask(5, 12, 3), new ScheduledTask(21, 28, 1), new ScheduledTask(25, 32, 2), new ScheduledTask(16, 23, 0), new ScheduledTask(28, 32, 1), new ScheduledTask(2, 6, 0), new ScheduledTask(8, 12, 0), new ScheduledTask(4, 8, 2), new ScheduledTask(26, 30, 0), new ScheduledTask(12, 16, 0), new ScheduledTask(30, 33, 0), new ScheduledTask(30, 33, 3), new ScheduledTask(23, 26, 0), new ScheduledTask(6, 8, 0)};
        int[] expectedProcessorEndTimes = new int[]{33, 32, 32, 33};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_1dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_1.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 24;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(4, 14, 1), new ScheduledTask(7, 17, 2), new ScheduledTask(9, 18, 0), new ScheduledTask(8, 17, 3), new ScheduledTask(10, 17, 4), new ScheduledTask(2, 9, 0), new ScheduledTask(5, 12, 5), new ScheduledTask(12, 19, 5), new ScheduledTask(17, 24, 4), new ScheduledTask(17, 24, 3), new ScheduledTask(19, 23, 5), new ScheduledTask(6, 10, 4), new ScheduledTask(17, 21, 2), new ScheduledTask(4, 8, 3), new ScheduledTask(20, 24, 1), new ScheduledTask(16, 20, 1), new ScheduledTask(21, 24, 0), new ScheduledTask(21, 24, 2), new ScheduledTask(18, 21, 0), new ScheduledTask(14, 16, 1)};
        int[] expectedProcessorEndTimes = new int[]{24, 24, 24, 24, 24, 23};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_1dot99_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_1.99_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 10;
        int expectedScheduleEndTime = 28;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 12, 0), new ScheduledTask(8, 17, 1), new ScheduledTask(12, 21, 0), new ScheduledTask(19, 28, 1), new ScheduledTask(7, 15, 2), new ScheduledTask(16, 24, 2), new ScheduledTask(16, 24, 3), new ScheduledTask(21, 28, 0), new ScheduledTask(14, 20, 4), new ScheduledTask(12, 18, 5), new ScheduledTask(19, 24, 5), new ScheduledTask(12, 17, 6), new ScheduledTask(8, 13, 7), new ScheduledTask(7, 12, 8), new ScheduledTask(12, 16, 8), new ScheduledTask(16, 19, 7), new ScheduledTask(16, 19, 8), new ScheduledTask(19, 22, 6), new ScheduledTask(16, 18, 9), new ScheduledTask(21, 23, 4)};
        int[] expectedProcessorEndTimes = new int[]{28, 28, 24, 24, 23, 24, 22, 19, 19, 18};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_1dot99_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_1.99_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(31, 40, 0), new ScheduledTask(8, 17, 0), new ScheduledTask(40, 49, 0), new ScheduledTask(49, 58, 0), new ScheduledTask(7, 15, 1), new ScheduledTask(32, 40, 1), new ScheduledTask(40, 48, 1), new ScheduledTask(56, 63, 1), new ScheduledTask(26, 32, 1), new ScheduledTask(15, 21, 1), new ScheduledTask(51, 56, 1), new ScheduledTask(21, 26, 1), new ScheduledTask(17, 22, 0), new ScheduledTask(3, 8, 0), new ScheduledTask(22, 26, 0), new ScheduledTask(26, 29, 0), new ScheduledTask(48, 51, 1), new ScheduledTask(58, 61, 0), new ScheduledTask(29, 31, 0), new ScheduledTask(61, 63, 0)};
        int[] expectedProcessorEndTimes = new int[]{63, 63};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_1dot99_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_1.99_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 36;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(13, 22, 0), new ScheduledTask(12, 21, 1), new ScheduledTask(22, 31, 0), new ScheduledTask(22, 31, 2), new ScheduledTask(7, 15, 3), new ScheduledTask(3, 11, 0), new ScheduledTask(21, 29, 3), new ScheduledTask(29, 36, 3), new ScheduledTask(15, 21, 3), new ScheduledTask(13, 19, 2), new ScheduledTask(31, 36, 2), new ScheduledTask(21, 26, 1), new ScheduledTask(8, 13, 2), new ScheduledTask(7, 12, 1), new ScheduledTask(26, 30, 1), new ScheduledTask(30, 33, 1), new ScheduledTask(19, 22, 2), new ScheduledTask(33, 36, 1), new ScheduledTask(11, 13, 0), new ScheduledTask(31, 33, 0)};
        int[] expectedProcessorEndTimes = new int[]{33, 36, 36, 36};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_1dot99_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_1.99_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 28;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 12, 0), new ScheduledTask(8, 17, 1), new ScheduledTask(12, 21, 0), new ScheduledTask(19, 28, 1), new ScheduledTask(7, 15, 2), new ScheduledTask(16, 24, 2), new ScheduledTask(16, 24, 3), new ScheduledTask(21, 28, 0), new ScheduledTask(14, 20, 4), new ScheduledTask(12, 18, 5), new ScheduledTask(19, 24, 5), new ScheduledTask(12, 17, 6), new ScheduledTask(8, 13, 7), new ScheduledTask(13, 18, 7), new ScheduledTask(17, 21, 6), new ScheduledTask(18, 21, 7), new ScheduledTask(20, 23, 4), new ScheduledTask(21, 24, 6), new ScheduledTask(21, 23, 7), new ScheduledTask(23, 25, 4)};
        int[] expectedProcessorEndTimes = new int[]{28, 28, 24, 24, 25, 24, 24, 23};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot00_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.00_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(3000, 3010, 0), new ScheduledTask(4000, 4009, 0), new ScheduledTask(200, 209, 0), new ScheduledTask(7100, 7108, 0), new ScheduledTask(1100, 1108, 0), new ScheduledTask(4900, 4908, 0), new ScheduledTask(2900, 2908, 1), new ScheduledTask(7900, 7907, 0), new ScheduledTask(8600, 8606, 0), new ScheduledTask(1900, 1906, 0), new ScheduledTask(5700, 5706, 0), new ScheduledTask(2000, 2005, 2), new ScheduledTask(5000, 5005, 2), new ScheduledTask(2500, 2505, 0), new ScheduledTask(6300, 6304, 0), new ScheduledTask(6700, 6704, 0), new ScheduledTask(4700, 4703, 3), new ScheduledTask(6500, 6503, 3), new ScheduledTask(2900, 2903, 3), new ScheduledTask(8000, 8002, 2)};
        int[] expectedProcessorEndTimes = new int[]{8606, 2908, 8002, 6503};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot00_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.00_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(1900, 1910, 0), new ScheduledTask(2900, 2909, 0), new ScheduledTask(200, 209, 0), new ScheduledTask(6000, 6008, 0), new ScheduledTask(1100, 1108, 0), new ScheduledTask(3800, 3808, 0), new ScheduledTask(2900, 2908, 1), new ScheduledTask(6800, 6807, 0), new ScheduledTask(7500, 7506, 0), new ScheduledTask(6600, 6606, 2), new ScheduledTask(4600, 4606, 0), new ScheduledTask(2000, 2005, 3), new ScheduledTask(4700, 4705, 1), new ScheduledTask(6600, 6605, 1), new ScheduledTask(5200, 5204, 0), new ScheduledTask(5600, 5604, 0), new ScheduledTask(3800, 3803, 3), new ScheduledTask(4400, 4403, 3), new ScheduledTask(3000, 3003, 3), new ScheduledTask(5000, 5002, 3)};
        int[] expectedProcessorEndTimes = new int[]{7506, 6605, 6606, 5002};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot00_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.00_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 7600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(1100, 1110, 0), new ScheduledTask(2100, 2109, 0), new ScheduledTask(200, 209, 0), new ScheduledTask(5200, 5208, 0), new ScheduledTask(6600, 6608, 1), new ScheduledTask(3000, 3008, 0), new ScheduledTask(3000, 3008, 3), new ScheduledTask(6000, 6007, 0), new ScheduledTask(6700, 6706, 0), new ScheduledTask(6600, 6606, 2), new ScheduledTask(3800, 3806, 0), new ScheduledTask(2000, 2005, 3), new ScheduledTask(5200, 5205, 3), new ScheduledTask(6600, 6605, 3), new ScheduledTask(4400, 4404, 0), new ScheduledTask(4800, 4804, 0), new ScheduledTask(3800, 3803, 2), new ScheduledTask(4600, 4603, 3), new ScheduledTask(2900, 2903, 2), new ScheduledTask(6200, 6202, 3)};
        int[] expectedProcessorEndTimes = new int[]{6706, 6608, 6606, 6605};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 79;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(17, 27, 0), new ScheduledTask(27, 36, 0), new ScheduledTask(2, 11, 0), new ScheduledTask(58, 66, 0), new ScheduledTask(66, 74, 1), new ScheduledTask(36, 44, 0), new ScheduledTask(29, 37, 1), new ScheduledTask(66, 73, 0), new ScheduledTask(73, 79, 0), new ScheduledTask(11, 17, 0), new ScheduledTask(44, 50, 0), new ScheduledTask(20, 25, 1), new ScheduledTask(47, 52, 1), new ScheduledTask(74, 79, 1), new ScheduledTask(50, 54, 0), new ScheduledTask(54, 58, 0), new ScheduledTask(40, 43, 1), new ScheduledTask(43, 46, 1), new ScheduledTask(37, 40, 1), new ScheduledTask(52, 54, 1)};
        int[] expectedProcessorEndTimes = new int[]{79, 79};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 74;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(11, 21, 0), new ScheduledTask(21, 30, 0), new ScheduledTask(2, 11, 0), new ScheduledTask(52, 60, 0), new ScheduledTask(66, 74, 1), new ScheduledTask(30, 38, 0), new ScheduledTask(29, 37, 1), new ScheduledTask(60, 67, 0), new ScheduledTask(67, 73, 0), new ScheduledTask(66, 72, 2), new ScheduledTask(38, 44, 0), new ScheduledTask(20, 25, 3), new ScheduledTask(47, 52, 3), new ScheduledTask(66, 71, 3), new ScheduledTask(44, 48, 0), new ScheduledTask(48, 52, 0), new ScheduledTask(38, 41, 3), new ScheduledTask(41, 44, 3), new ScheduledTask(29, 32, 3), new ScheduledTask(52, 54, 3)};
        int[] expectedProcessorEndTimes = new int[]{73, 74, 72, 71};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 74;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(11, 21, 0), new ScheduledTask(21, 30, 0), new ScheduledTask(2, 11, 0), new ScheduledTask(52, 60, 0), new ScheduledTask(66, 74, 1), new ScheduledTask(30, 38, 0), new ScheduledTask(29, 37, 2), new ScheduledTask(60, 67, 0), new ScheduledTask(67, 73, 0), new ScheduledTask(66, 72, 3), new ScheduledTask(38, 44, 0), new ScheduledTask(20, 25, 4), new ScheduledTask(47, 52, 5), new ScheduledTask(66, 71, 5), new ScheduledTask(44, 48, 0), new ScheduledTask(48, 52, 0), new ScheduledTask(38, 41, 5), new ScheduledTask(41, 44, 5), new ScheduledTask(29, 32, 5), new ScheduledTask(52, 54, 5)};
        int[] expectedProcessorEndTimes = new int[]{73, 74, 37, 72, 25, 71};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot00_WeightType_Random2_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.00_WeightType_Random#2_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(5100, 5110, 0), new ScheduledTask(7600, 7610, 0), new ScheduledTask(700, 710, 0), new ScheduledTask(2300, 2310, 0), new ScheduledTask(6100, 6109, 0), new ScheduledTask(3800, 3808, 1), new ScheduledTask(3300, 3307, 0), new ScheduledTask(8600, 8607, 0), new ScheduledTask(9300, 9307, 0), new ScheduledTask(3800, 3807, 2), new ScheduledTask(7000, 7006, 0), new ScheduledTask(1700, 1706, 0), new ScheduledTask(4000, 4006, 0), new ScheduledTask(3800, 3805, 3), new ScheduledTask(4600, 4605, 0), new ScheduledTask(8000, 8004, 2), new ScheduledTask(8600, 8603, 3), new ScheduledTask(6800, 6803, 3), new ScheduledTask(8600, 8602, 1), new ScheduledTask(10000, 10002, 0)};
        int[] expectedProcessorEndTimes = new int[]{10002, 8602, 8004, 8603};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot00_WeightType_Random2_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.00_WeightType_Random#2_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(3500, 3510, 0), new ScheduledTask(6000, 6010, 0), new ScheduledTask(4900, 4910, 1), new ScheduledTask(700, 710, 0), new ScheduledTask(4500, 4509, 0), new ScheduledTask(3800, 3808, 2), new ScheduledTask(1700, 1707, 0), new ScheduledTask(7000, 7007, 0), new ScheduledTask(7700, 7707, 0), new ScheduledTask(5400, 5407, 2), new ScheduledTask(5400, 5406, 0), new ScheduledTask(6900, 6906, 1), new ScheduledTask(2400, 2406, 0), new ScheduledTask(3800, 3805, 3), new ScheduledTask(3000, 3005, 0), new ScheduledTask(4800, 4804, 3), new ScheduledTask(6200, 6203, 3), new ScheduledTask(5600, 5603, 3), new ScheduledTask(6800, 6802, 3), new ScheduledTask(8400, 8402, 0)};
        int[] expectedProcessorEndTimes = new int[]{8402, 6906, 5407, 6802};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot00_WeightType_Random2_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.00_WeightType_Random#2_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(3000, 3010, 0), new ScheduledTask(5500, 5510, 0), new ScheduledTask(4900, 4910, 1), new ScheduledTask(700, 710, 0), new ScheduledTask(4000, 4009, 0), new ScheduledTask(3800, 3808, 3), new ScheduledTask(1700, 1707, 0), new ScheduledTask(6500, 6507, 0), new ScheduledTask(7200, 7207, 0), new ScheduledTask(3800, 3807, 2), new ScheduledTask(4900, 4906, 0), new ScheduledTask(7200, 7206, 3), new ScheduledTask(2400, 2406, 0), new ScheduledTask(5400, 5405, 3), new ScheduledTask(8000, 8005, 1), new ScheduledTask(6400, 6404, 3), new ScheduledTask(5900, 5903, 2), new ScheduledTask(4850, 4853, 2), new ScheduledTask(6350, 6352, 2), new ScheduledTask(7900, 7902, 0)};
        int[] expectedProcessorEndTimes = new int[]{7902, 8005, 6352, 7206};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 86;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(35, 45, 0), new ScheduledTask(60, 70, 0), new ScheduledTask(65, 75, 1), new ScheduledTask(7, 17, 0), new ScheduledTask(45, 54, 0), new ScheduledTask(38, 46, 1), new ScheduledTask(17, 24, 0), new ScheduledTask(70, 77, 0), new ScheduledTask(77, 84, 0), new ScheduledTask(46, 53, 1), new ScheduledTask(54, 60, 0), new ScheduledTask(75, 81, 1), new ScheduledTask(24, 30, 0), new ScheduledTask(53, 58, 1), new ScheduledTask(30, 35, 0), new ScheduledTask(58, 62, 1), new ScheduledTask(81, 84, 1), new ScheduledTask(62, 65, 1), new ScheduledTask(84, 86, 1), new ScheduledTask(84, 86, 0)};
        int[] expectedProcessorEndTimes = new int[]{86, 86};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 85;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(30, 40, 0), new ScheduledTask(55, 65, 0), new ScheduledTask(49, 59, 1), new ScheduledTask(7, 17, 0), new ScheduledTask(40, 49, 0), new ScheduledTask(38, 46, 2), new ScheduledTask(17, 24, 0), new ScheduledTask(65, 72, 0), new ScheduledTask(72, 79, 0), new ScheduledTask(46, 53, 2), new ScheduledTask(49, 55, 0), new ScheduledTask(59, 65, 2), new ScheduledTask(24, 30, 0), new ScheduledTask(38, 43, 3), new ScheduledTask(80, 85, 3), new ScheduledTask(43, 47, 3), new ScheduledTask(59, 62, 3), new ScheduledTask(47, 50, 3), new ScheduledTask(62, 64, 3), new ScheduledTask(79, 81, 0)};
        int[] expectedProcessorEndTimes = new int[]{81, 59, 65, 85};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 85;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(30, 40, 0), new ScheduledTask(55, 65, 0), new ScheduledTask(53, 63, 1), new ScheduledTask(7, 17, 0), new ScheduledTask(40, 49, 0), new ScheduledTask(38, 46, 1), new ScheduledTask(17, 24, 0), new ScheduledTask(65, 72, 0), new ScheduledTask(72, 79, 0), new ScheduledTask(46, 53, 1), new ScheduledTask(49, 55, 0), new ScheduledTask(63, 69, 1), new ScheduledTask(24, 30, 0), new ScheduledTask(38, 43, 2), new ScheduledTask(80, 85, 3), new ScheduledTask(38, 42, 4), new ScheduledTask(59, 62, 5), new ScheduledTask(38, 41, 5), new ScheduledTask(62, 64, 5), new ScheduledTask(79, 81, 0)};
        int[] expectedProcessorEndTimes = new int[]{81, 69, 43, 85, 42, 64};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot00_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.00_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(1200, 1210, 0), new ScheduledTask(3200, 3210, 0), new ScheduledTask(5100, 5110, 0), new ScheduledTask(4200, 4209, 0), new ScheduledTask(2700, 2709, 1), new ScheduledTask(7500, 7508, 0), new ScheduledTask(6100, 6108, 0), new ScheduledTask(8300, 8307, 0), new ScheduledTask(500, 507, 0), new ScheduledTask(9000, 9007, 0), new ScheduledTask(2500, 2507, 0), new ScheduledTask(6900, 6906, 0), new ScheduledTask(2700, 2706, 2), new ScheduledTask(3800, 3805, 3), new ScheduledTask(6300, 6304, 2), new ScheduledTask(6800, 6804, 3), new ScheduledTask(8100, 8103, 1), new ScheduledTask(2200, 2203, 0), new ScheduledTask(9700, 9702, 0), new ScheduledTask(8700, 8702, 2)};
        int[] expectedProcessorEndTimes = new int[]{9702, 8103, 8702, 6804};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot00_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.00_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 7900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(3900, 3910, 1), new ScheduledTask(1200, 1210, 0), new ScheduledTask(3100, 3110, 0), new ScheduledTask(2200, 2209, 0), new ScheduledTask(2700, 2709, 2), new ScheduledTask(5500, 5508, 0), new ScheduledTask(4100, 4108, 0), new ScheduledTask(6300, 6307, 0), new ScheduledTask(2700, 2707, 3), new ScheduledTask(7000, 7007, 0), new ScheduledTask(500, 507, 0), new ScheduledTask(4900, 4906, 0), new ScheduledTask(2700, 2706, 1), new ScheduledTask(4100, 4105, 3), new ScheduledTask(5700, 5704, 3), new ScheduledTask(6500, 6504, 3), new ScheduledTask(7300, 7303, 3), new ScheduledTask(5100, 5103, 3), new ScheduledTask(7700, 7702, 0), new ScheduledTask(6000, 6002, 2)};
        int[] expectedProcessorEndTimes = new int[]{7702, 3910, 6002, 7303};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot00_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.00_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 7900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(4620, 4630, 1), new ScheduledTask(1200, 1210, 0), new ScheduledTask(3100, 3110, 0), new ScheduledTask(2200, 2209, 0), new ScheduledTask(2700, 2709, 1), new ScheduledTask(5500, 5508, 0), new ScheduledTask(4100, 4108, 0), new ScheduledTask(6300, 6307, 0), new ScheduledTask(3780, 3787, 1), new ScheduledTask(7000, 7007, 0), new ScheduledTask(500, 507, 0), new ScheduledTask(4900, 4906, 0), new ScheduledTask(2700, 2706, 3), new ScheduledTask(3900, 3905, 3), new ScheduledTask(5500, 5504, 3), new ScheduledTask(6300, 6304, 3), new ScheduledTask(7100, 7103, 3), new ScheduledTask(4900, 4903, 3), new ScheduledTask(7700, 7702, 0), new ScheduledTask(6000, 6002, 2)};
        int[] expectedProcessorEndTimes = new int[]{7702, 4630, 6002, 7103};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(49, 59, 1), new ScheduledTask(12, 22, 0), new ScheduledTask(31, 41, 0), new ScheduledTask(22, 31, 0), new ScheduledTask(27, 36, 1), new ScheduledTask(55, 63, 0), new ScheduledTask(41, 49, 0), new ScheduledTask(63, 70, 0), new ScheduledTask(36, 43, 1), new ScheduledTask(70, 77, 0), new ScheduledTask(5, 12, 0), new ScheduledTask(49, 55, 0), new ScheduledTask(43, 49, 1), new ScheduledTask(59, 64, 1), new ScheduledTask(67, 71, 1), new ScheduledTask(71, 75, 1), new ScheduledTask(75, 78, 1), new ScheduledTask(64, 67, 1), new ScheduledTask(77, 79, 0), new ScheduledTask(78, 80, 1)};
        int[] expectedProcessorEndTimes = new int[]{79, 80};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(38, 48, 1), new ScheduledTask(5, 15, 0), new ScheduledTask(24, 34, 0), new ScheduledTask(15, 24, 0), new ScheduledTask(27, 36, 1), new ScheduledTask(48, 56, 0), new ScheduledTask(34, 42, 0), new ScheduledTask(56, 63, 0), new ScheduledTask(27, 34, 2), new ScheduledTask(63, 70, 0), new ScheduledTask(71, 78, 2), new ScheduledTask(42, 48, 0), new ScheduledTask(27, 33, 3), new ScheduledTask(38, 43, 3), new ScheduledTask(49, 53, 3), new ScheduledTask(53, 57, 3), new ScheduledTask(60, 63, 3), new ScheduledTask(43, 46, 3), new ScheduledTask(70, 72, 0), new ScheduledTask(63, 65, 3)};
        int[] expectedProcessorEndTimes = new int[]{72, 48, 78, 65};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(38, 48, 1), new ScheduledTask(5, 15, 0), new ScheduledTask(24, 34, 0), new ScheduledTask(15, 24, 0), new ScheduledTask(27, 36, 2), new ScheduledTask(48, 56, 0), new ScheduledTask(34, 42, 0), new ScheduledTask(56, 63, 0), new ScheduledTask(27, 34, 1), new ScheduledTask(63, 70, 0), new ScheduledTask(71, 78, 3), new ScheduledTask(42, 48, 0), new ScheduledTask(27, 33, 4), new ScheduledTask(38, 43, 5), new ScheduledTask(49, 53, 5), new ScheduledTask(53, 57, 5), new ScheduledTask(60, 63, 5), new ScheduledTask(43, 46, 5), new ScheduledTask(70, 72, 0), new ScheduledTask(63, 65, 5)};
        int[] expectedProcessorEndTimes = new int[]{72, 48, 36, 78, 33, 65};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot01_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.01_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(900, 910, 0), new ScheduledTask(1900, 1908, 0), new ScheduledTask(6400, 6407, 0), new ScheduledTask(2700, 2707, 0), new ScheduledTask(4500, 4507, 0), new ScheduledTask(3400, 3407, 0), new ScheduledTask(3100, 3106, 1), new ScheduledTask(3100, 3106, 2), new ScheduledTask(5200, 5206, 0), new ScheduledTask(5800, 5806, 0), new ScheduledTask(4100, 4105, 3), new ScheduledTask(7100, 7104, 0), new ScheduledTask(4100, 4104, 0), new ScheduledTask(7700, 7704, 0), new ScheduledTask(8100, 8103, 0), new ScheduledTask(6700, 6703, 2), new ScheduledTask(8400, 8403, 0), new ScheduledTask(6700, 6703, 1), new ScheduledTask(7500, 7502, 0), new ScheduledTask(7100, 7102, 3)};
        int[] expectedProcessorEndTimes = new int[]{8403, 6703, 6703, 7102};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot01_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.01_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 6500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(3100, 3110, 1), new ScheduledTask(4900, 4908, 2), new ScheduledTask(4000, 4007, 0), new ScheduledTask(4300, 4307, 3), new ScheduledTask(1600, 1607, 0), new ScheduledTask(900, 907, 0), new ScheduledTask(3100, 3106, 2), new ScheduledTask(3100, 3106, 3), new ScheduledTask(2800, 2806, 0), new ScheduledTask(3400, 3406, 0), new ScheduledTask(5100, 5105, 1), new ScheduledTask(4700, 4704, 0), new ScheduledTask(5700, 5704, 3), new ScheduledTask(5300, 5304, 0), new ScheduledTask(5700, 5703, 0), new ScheduledTask(4300, 4303, 2), new ScheduledTask(6000, 6003, 0), new ScheduledTask(2300, 2303, 0), new ScheduledTask(5100, 5102, 0), new ScheduledTask(2600, 2602, 0)};
        int[] expectedProcessorEndTimes = new int[]{6003, 5105, 4908, 5704};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot01_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.01_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 6040;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(3100, 3110, 1), new ScheduledTask(4300, 4308, 3), new ScheduledTask(3700, 3707, 0), new ScheduledTask(4100, 4107, 2), new ScheduledTask(1300, 1307, 0), new ScheduledTask(5200, 5207, 1), new ScheduledTask(3100, 3106, 2), new ScheduledTask(3100, 3106, 3), new ScheduledTask(2500, 2506, 0), new ScheduledTask(3100, 3106, 0), new ScheduledTask(5150, 5155, 2), new ScheduledTask(4400, 4404, 0), new ScheduledTask(900, 904, 0), new ScheduledTask(5000, 5004, 0), new ScheduledTask(5400, 5403, 0), new ScheduledTask(4300, 4303, 1), new ScheduledTask(5700, 5703, 0), new ScheduledTask(2000, 2003, 0), new ScheduledTask(4800, 4802, 0), new ScheduledTask(2300, 2302, 0)};
        int[] expectedProcessorEndTimes = new int[]{5703, 5207, 5155, 4308};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(31, 41, 1), new ScheduledTask(15, 23, 0), new ScheduledTask(49, 56, 0), new ScheduledTask(50, 57, 1), new ScheduledTask(30, 37, 0), new ScheduledTask(23, 30, 0), new ScheduledTask(9, 15, 0), new ScheduledTask(41, 47, 1), new ScheduledTask(37, 43, 0), new ScheduledTask(43, 49, 0), new ScheduledTask(57, 62, 1), new ScheduledTask(56, 60, 0), new ScheduledTask(62, 66, 1), new ScheduledTask(62, 66, 0), new ScheduledTask(66, 69, 0), new ScheduledTask(47, 50, 1), new ScheduledTask(69, 72, 0), new ScheduledTask(66, 69, 1), new ScheduledTask(60, 62, 0), new ScheduledTask(69, 71, 1)};
        int[] expectedProcessorEndTimes = new int[]{72, 71};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(31, 41, 1), new ScheduledTask(41, 49, 2), new ScheduledTask(33, 40, 0), new ScheduledTask(49, 56, 2), new ScheduledTask(9, 16, 0), new ScheduledTask(52, 59, 3), new ScheduledTask(31, 37, 3), new ScheduledTask(37, 43, 3), new ScheduledTask(21, 27, 0), new ScheduledTask(27, 33, 0), new ScheduledTask(46, 51, 3), new ScheduledTask(40, 44, 0), new ScheduledTask(52, 56, 1), new ScheduledTask(46, 50, 0), new ScheduledTask(50, 53, 0), new ScheduledTask(43, 46, 3), new ScheduledTask(53, 56, 0), new ScheduledTask(16, 19, 0), new ScheduledTask(44, 46, 0), new ScheduledTask(19, 21, 0)};
        int[] expectedProcessorEndTimes = new int[]{56, 56, 56, 59};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(31, 41, 1), new ScheduledTask(41, 49, 2), new ScheduledTask(33, 40, 0), new ScheduledTask(41, 48, 3), new ScheduledTask(9, 16, 0), new ScheduledTask(52, 59, 4), new ScheduledTask(31, 37, 5), new ScheduledTask(37, 43, 5), new ScheduledTask(21, 27, 0), new ScheduledTask(27, 33, 0), new ScheduledTask(46, 51, 5), new ScheduledTask(40, 44, 0), new ScheduledTask(52, 56, 5), new ScheduledTask(46, 50, 0), new ScheduledTask(50, 53, 0), new ScheduledTask(43, 46, 5), new ScheduledTask(53, 56, 0), new ScheduledTask(16, 19, 0), new ScheduledTask(44, 46, 0), new ScheduledTask(19, 21, 0)};
        int[] expectedProcessorEndTimes = new int[]{56, 41, 49, 48, 59, 56};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot01_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.01_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 11100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(5400, 5410, 0), new ScheduledTask(3700, 3710, 1), new ScheduledTask(8900, 8910, 0), new ScheduledTask(3000, 3010, 0), new ScheduledTask(3700, 3710, 2), new ScheduledTask(6400, 6409, 0), new ScheduledTask(300, 309, 0), new ScheduledTask(7300, 7308, 0), new ScheduledTask(3700, 3708, 3), new ScheduledTask(9900, 9908, 0), new ScheduledTask(1900, 1907, 0), new ScheduledTask(1200, 1207, 0), new ScheduledTask(8100, 8105, 0), new ScheduledTask(4000, 4005, 0), new ScheduledTask(4500, 4505, 0), new ScheduledTask(2600, 2604, 0), new ScheduledTask(10700, 10704, 0), new ScheduledTask(8500, 8504, 3), new ScheduledTask(5000, 5004, 0), new ScheduledTask(8600, 8603, 0)};
        int[] expectedProcessorEndTimes = new int[]{10704, 3710, 3710, 8504};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot01_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.01_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(2100, 2110, 0), new ScheduledTask(3700, 3710, 1), new ScheduledTask(5600, 5610, 0), new ScheduledTask(700, 710, 0), new ScheduledTask(3700, 3710, 2), new ScheduledTask(3100, 3109, 0), new ScheduledTask(5300, 5309, 3), new ScheduledTask(4000, 4008, 0), new ScheduledTask(3700, 3708, 3), new ScheduledTask(6600, 6608, 0), new ScheduledTask(5900, 5907, 2), new ScheduledTask(5700, 5707, 1), new ScheduledTask(4800, 4805, 0), new ScheduledTask(7100, 7105, 1), new ScheduledTask(7100, 7105, 3), new ScheduledTask(300, 304, 0), new ScheduledTask(7400, 7404, 0), new ScheduledTask(7300, 7304, 2), new ScheduledTask(1700, 1704, 0), new ScheduledTask(5300, 5303, 0)};
        int[] expectedProcessorEndTimes = new int[]{7404, 7105, 7304, 7105};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot01_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.01_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 7850;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(1700, 1710, 0), new ScheduledTask(3700, 3710, 1), new ScheduledTask(5200, 5210, 0), new ScheduledTask(300, 310, 0), new ScheduledTask(3700, 3710, 3), new ScheduledTask(2700, 2709, 0), new ScheduledTask(5700, 5709, 3), new ScheduledTask(3600, 3608, 0), new ScheduledTask(3700, 3708, 2), new ScheduledTask(6200, 6208, 0), new ScheduledTask(5950, 5957, 2), new ScheduledTask(4900, 4907, 2), new ScheduledTask(4400, 4405, 0), new ScheduledTask(7100, 7105, 1), new ScheduledTask(7100, 7105, 2), new ScheduledTask(5900, 5904, 1), new ScheduledTask(7000, 7004, 0), new ScheduledTask(6380, 6384, 1), new ScheduledTask(1300, 1304, 0), new ScheduledTask(4900, 4903, 0)};
        int[] expectedProcessorEndTimes = new int[]{7004, 7105, 7105, 5709};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(33, 43, 0), new ScheduledTask(37, 47, 1), new ScheduledTask(68, 78, 0), new ScheduledTask(18, 28, 0), new ScheduledTask(47, 57, 1), new ScheduledTask(43, 52, 0), new ScheduledTask(65, 74, 1), new ScheduledTask(52, 60, 0), new ScheduledTask(57, 65, 1), new ScheduledTask(78, 86, 0), new ScheduledTask(3, 10, 0), new ScheduledTask(74, 81, 1), new ScheduledTask(60, 65, 0), new ScheduledTask(28, 33, 0), new ScheduledTask(81, 86, 1), new ScheduledTask(10, 14, 0), new ScheduledTask(86, 90, 0), new ScheduledTask(14, 18, 0), new ScheduledTask(86, 90, 1), new ScheduledTask(65, 68, 0)};
        int[] expectedProcessorEndTimes = new int[]{90, 90};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(17, 27, 0), new ScheduledTask(37, 47, 1), new ScheduledTask(52, 62, 0), new ScheduledTask(3, 13, 0), new ScheduledTask(47, 57, 1), new ScheduledTask(27, 36, 0), new ScheduledTask(48, 57, 2), new ScheduledTask(36, 44, 0), new ScheduledTask(37, 45, 2), new ScheduledTask(62, 70, 0), new ScheduledTask(59, 66, 3), new ScheduledTask(48, 55, 3), new ScheduledTask(44, 49, 0), new ScheduledTask(71, 76, 2), new ScheduledTask(71, 76, 3), new ScheduledTask(59, 63, 2), new ScheduledTask(70, 74, 0), new ScheduledTask(66, 70, 3), new ScheduledTask(13, 17, 0), new ScheduledTask(49, 52, 0)};
        int[] expectedProcessorEndTimes = new int[]{74, 57, 76, 76};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(17, 27, 0), new ScheduledTask(37, 47, 1), new ScheduledTask(52, 62, 0), new ScheduledTask(3, 13, 0), new ScheduledTask(37, 47, 2), new ScheduledTask(27, 36, 0), new ScheduledTask(48, 57, 3), new ScheduledTask(36, 44, 0), new ScheduledTask(47, 55, 1), new ScheduledTask(62, 70, 0), new ScheduledTask(59, 66, 4), new ScheduledTask(48, 55, 5), new ScheduledTask(44, 49, 0), new ScheduledTask(71, 76, 4), new ScheduledTask(71, 76, 5), new ScheduledTask(59, 63, 5), new ScheduledTask(70, 74, 0), new ScheduledTask(63, 67, 5), new ScheduledTask(13, 17, 0), new ScheduledTask(49, 52, 0)};
        int[] expectedProcessorEndTimes = new int[]{74, 55, 47, 57, 76, 76};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot03_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.03_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(3400, 3410, 0), new ScheduledTask(400, 409, 0), new ScheduledTask(6000, 6009, 0), new ScheduledTask(4300, 4308, 1), new ScheduledTask(2100, 2108, 0), new ScheduledTask(7400, 7408, 0), new ScheduledTask(5200, 5208, 0), new ScheduledTask(2500, 2507, 2), new ScheduledTask(8200, 8207, 0), new ScheduledTask(1300, 1306, 0), new ScheduledTask(2900, 2905, 0), new ScheduledTask(6900, 6905, 0), new ScheduledTask(3600, 3605, 3), new ScheduledTask(4400, 4405, 0), new ScheduledTask(6700, 6704, 3), new ScheduledTask(8900, 8904, 0), new ScheduledTask(6700, 6704, 2), new ScheduledTask(2500, 2503, 1), new ScheduledTask(4900, 4903, 0), new ScheduledTask(1900, 1902, 0)};
        int[] expectedProcessorEndTimes = new int[]{8904, 4308, 6704, 6704};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot03_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.03_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 7300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(1300, 1310, 0), new ScheduledTask(4600, 4609, 1), new ScheduledTask(3900, 3909, 0), new ScheduledTask(3600, 3608, 2), new ScheduledTask(5700, 5708, 3), new ScheduledTask(5300, 5308, 0), new ScheduledTask(3100, 3108, 0), new ScheduledTask(2500, 2507, 3), new ScheduledTask(6100, 6107, 0), new ScheduledTask(5200, 5206, 2), new ScheduledTask(400, 405, 0), new ScheduledTask(4800, 4805, 0), new ScheduledTask(3900, 3905, 3), new ScheduledTask(2300, 2305, 0), new ScheduledTask(900, 904, 0), new ScheduledTask(6800, 6804, 0), new ScheduledTask(4900, 4904, 3), new ScheduledTask(2500, 2503, 2), new ScheduledTask(2800, 2803, 0), new ScheduledTask(6400, 6402, 2)};
        int[] expectedProcessorEndTimes = new int[]{6804, 4609, 6402, 5708};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot03_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.03_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 6700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(800, 810, 0), new ScheduledTask(4600, 4609, 1), new ScheduledTask(3400, 3409, 0), new ScheduledTask(3900, 3908, 3), new ScheduledTask(5700, 5708, 1), new ScheduledTask(4800, 4808, 0), new ScheduledTask(2600, 2608, 0), new ScheduledTask(2500, 2507, 3), new ScheduledTask(5600, 5607, 0), new ScheduledTask(5500, 5506, 3), new ScheduledTask(5700, 5705, 2), new ScheduledTask(4300, 4305, 0), new ScheduledTask(3600, 3605, 2), new ScheduledTask(1800, 1805, 0), new ScheduledTask(400, 404, 0), new ScheduledTask(6300, 6304, 0), new ScheduledTask(4350, 4354, 2), new ScheduledTask(2500, 2503, 2), new ScheduledTask(2300, 2303, 0), new ScheduledTask(4950, 4952, 2)};
        int[] expectedProcessorEndTimes = new int[]{6304, 5708, 5705, 5506};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot03_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.03_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 75;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(16, 26, 0), new ScheduledTask(53, 62, 1), new ScheduledTask(42, 51, 0), new ScheduledTask(36, 44, 1), new ScheduledTask(62, 70, 1), new ScheduledTask(56, 64, 0), new ScheduledTask(34, 42, 0), new ScheduledTask(25, 32, 1), new ScheduledTask(64, 71, 0), new ScheduledTask(4, 10, 0), new ScheduledTask(70, 75, 1), new ScheduledTask(51, 56, 0), new ScheduledTask(44, 49, 1), new ScheduledTask(26, 31, 0), new ScheduledTask(12, 16, 0), new ScheduledTask(71, 75, 0), new ScheduledTask(49, 53, 1), new ScheduledTask(32, 35, 1), new ScheduledTask(31, 34, 0), new ScheduledTask(10, 12, 0)};
        int[] expectedProcessorEndTimes = new int[]{75, 75};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot03_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.03_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(8, 18, 0), new ScheduledTask(46, 55, 1), new ScheduledTask(34, 43, 0), new ScheduledTask(36, 44, 1), new ScheduledTask(57, 65, 2), new ScheduledTask(48, 56, 0), new ScheduledTask(26, 34, 0), new ScheduledTask(25, 32, 3), new ScheduledTask(56, 63, 0), new ScheduledTask(46, 52, 3), new ScheduledTask(57, 62, 3), new ScheduledTask(43, 48, 0), new ScheduledTask(36, 41, 3), new ScheduledTask(18, 23, 0), new ScheduledTask(4, 8, 0), new ScheduledTask(63, 67, 0), new ScheduledTask(41, 45, 3), new ScheduledTask(32, 35, 3), new ScheduledTask(23, 26, 0), new ScheduledTask(52, 54, 3)};
        int[] expectedProcessorEndTimes = new int[]{67, 55, 65, 62};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot03_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.03_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(8, 18, 0), new ScheduledTask(46, 55, 1), new ScheduledTask(34, 43, 0), new ScheduledTask(36, 44, 2), new ScheduledTask(57, 65, 3), new ScheduledTask(48, 56, 0), new ScheduledTask(26, 34, 0), new ScheduledTask(25, 32, 4), new ScheduledTask(56, 63, 0), new ScheduledTask(46, 52, 5), new ScheduledTask(57, 62, 5), new ScheduledTask(43, 48, 0), new ScheduledTask(36, 41, 5), new ScheduledTask(18, 23, 0), new ScheduledTask(4, 8, 0), new ScheduledTask(63, 67, 0), new ScheduledTask(41, 45, 5), new ScheduledTask(25, 28, 5), new ScheduledTask(23, 26, 0), new ScheduledTask(52, 54, 5)};
        int[] expectedProcessorEndTimes = new int[]{67, 55, 44, 65, 32, 62};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot04_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.04_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 11;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(47, 57, 1), new ScheduledTask(25, 34, 0), new ScheduledTask(41, 50, 0), new ScheduledTask(20, 28, 2), new ScheduledTask(15, 23, 0), new ScheduledTask(34, 41, 0), new ScheduledTask(2, 9, 0), new ScheduledTask(20, 26, 3), new ScheduledTask(50, 56, 0), new ScheduledTask(9, 15, 0), new ScheduledTask(56, 62, 2), new ScheduledTask(56, 62, 0), new ScheduledTask(47, 51, 4), new ScheduledTask(47, 51, 5), new ScheduledTask(38, 41, 6), new ScheduledTask(38, 41, 7), new ScheduledTask(29, 31, 8), new ScheduledTask(56, 58, 9), new ScheduledTask(56, 58, 10), new ScheduledTask(23, 25, 0)};
        int[] expectedProcessorEndTimes = new int[]{62, 57, 62, 26, 51, 51, 41, 41, 31, 58, 58};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot04_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.04_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(47, 57, 1), new ScheduledTask(31, 40, 0), new ScheduledTask(47, 56, 0), new ScheduledTask(20, 28, 1), new ScheduledTask(21, 29, 0), new ScheduledTask(40, 47, 0), new ScheduledTask(2, 9, 0), new ScheduledTask(28, 34, 1), new ScheduledTask(56, 62, 0), new ScheduledTask(15, 21, 0), new ScheduledTask(9, 15, 0), new ScheduledTask(62, 68, 0), new ScheduledTask(57, 61, 1), new ScheduledTask(61, 65, 1), new ScheduledTask(38, 41, 1), new ScheduledTask(41, 44, 1), new ScheduledTask(34, 36, 1), new ScheduledTask(65, 67, 1), new ScheduledTask(67, 69, 1), new ScheduledTask(29, 31, 0)};
        int[] expectedProcessorEndTimes = new int[]{68, 69};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot04_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.04_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(47, 57, 1), new ScheduledTask(25, 34, 0), new ScheduledTask(41, 50, 0), new ScheduledTask(20, 28, 2), new ScheduledTask(15, 23, 0), new ScheduledTask(34, 41, 0), new ScheduledTask(2, 9, 0), new ScheduledTask(20, 26, 3), new ScheduledTask(50, 56, 0), new ScheduledTask(9, 15, 0), new ScheduledTask(56, 62, 2), new ScheduledTask(56, 62, 0), new ScheduledTask(47, 51, 3), new ScheduledTask(51, 55, 3), new ScheduledTask(38, 41, 3), new ScheduledTask(41, 44, 3), new ScheduledTask(29, 31, 3), new ScheduledTask(56, 58, 3), new ScheduledTask(58, 60, 3), new ScheduledTask(23, 25, 0)};
        int[] expectedProcessorEndTimes = new int[]{62, 57, 62, 60};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot04_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.04_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(47, 57, 1), new ScheduledTask(25, 34, 0), new ScheduledTask(41, 50, 0), new ScheduledTask(20, 28, 2), new ScheduledTask(15, 23, 0), new ScheduledTask(34, 41, 0), new ScheduledTask(2, 9, 0), new ScheduledTask(20, 26, 3), new ScheduledTask(50, 56, 0), new ScheduledTask(9, 15, 0), new ScheduledTask(56, 62, 4), new ScheduledTask(56, 62, 0), new ScheduledTask(47, 51, 5), new ScheduledTask(47, 51, 6), new ScheduledTask(38, 41, 7), new ScheduledTask(41, 44, 7), new ScheduledTask(29, 31, 7), new ScheduledTask(56, 58, 7), new ScheduledTask(58, 60, 7), new ScheduledTask(23, 25, 0)};
        int[] expectedProcessorEndTimes = new int[]{62, 57, 28, 26, 62, 51, 51, 60};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot04_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.04_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 7300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(600, 609, 0), new ScheduledTask(3300, 3307, 0), new ScheduledTask(2100, 2107, 1), new ScheduledTask(2000, 2006, 0), new ScheduledTask(4000, 4006, 0), new ScheduledTask(4600, 4606, 0), new ScheduledTask(6100, 6105, 0), new ScheduledTask(5600, 5605, 0), new ScheduledTask(1500, 1505, 0), new ScheduledTask(4500, 4504, 2), new ScheduledTask(2100, 2104, 2), new ScheduledTask(6600, 6604, 0), new ScheduledTask(2600, 2604, 0), new ScheduledTask(2100, 2103, 3), new ScheduledTask(7000, 7003, 0), new ScheduledTask(3000, 3003, 0), new ScheduledTask(5700, 5702, 3), new ScheduledTask(3900, 3902, 3), new ScheduledTask(5200, 5202, 0), new ScheduledTask(5400, 5402, 0)};
        int[] expectedProcessorEndTimes = new int[]{7003, 2107, 4504, 5702};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot04_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.04_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 6100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(4200, 4209, 1), new ScheduledTask(1900, 1907, 0), new ScheduledTask(2100, 2107, 2), new ScheduledTask(600, 606, 0), new ScheduledTask(2600, 2606, 0), new ScheduledTask(3200, 3206, 0), new ScheduledTask(4700, 4705, 0), new ScheduledTask(4200, 4205, 0), new ScheduledTask(5000, 5005, 3), new ScheduledTask(3900, 3904, 3), new ScheduledTask(2100, 2104, 3), new ScheduledTask(5200, 5204, 0), new ScheduledTask(1200, 1204, 0), new ScheduledTask(2900, 2903, 3), new ScheduledTask(5600, 5603, 0), new ScheduledTask(1600, 1603, 0), new ScheduledTask(5700, 5702, 2), new ScheduledTask(3500, 3502, 3), new ScheduledTask(3800, 3802, 0), new ScheduledTask(4000, 4002, 0)};
        int[] expectedProcessorEndTimes = new int[]{5603, 4209, 5702, 5005};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot04_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.04_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5940;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(4200, 4209, 1), new ScheduledTask(1900, 1907, 0), new ScheduledTask(2100, 2107, 3), new ScheduledTask(600, 606, 0), new ScheduledTask(2600, 2606, 0), new ScheduledTask(3200, 3206, 0), new ScheduledTask(4700, 4705, 0), new ScheduledTask(4200, 4205, 0), new ScheduledTask(5000, 5005, 2), new ScheduledTask(4900, 4904, 3), new ScheduledTask(3500, 3504, 3), new ScheduledTask(5200, 5204, 0), new ScheduledTask(1200, 1204, 0), new ScheduledTask(4300, 4303, 3), new ScheduledTask(5600, 5603, 0), new ScheduledTask(1600, 1603, 0), new ScheduledTask(5700, 5702, 1), new ScheduledTask(2800, 2802, 2), new ScheduledTask(3800, 3802, 0), new ScheduledTask(4000, 4002, 0)};
        int[] expectedProcessorEndTimes = new int[]{5603, 5702, 5005, 4904};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot04_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.04_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(42, 51, 1), new ScheduledTask(19, 26, 0), new ScheduledTask(21, 28, 1), new ScheduledTask(6, 12, 0), new ScheduledTask(26, 32, 0), new ScheduledTask(32, 38, 0), new ScheduledTask(47, 52, 0), new ScheduledTask(42, 47, 0), new ScheduledTask(51, 56, 1), new ScheduledTask(37, 41, 1), new ScheduledTask(28, 32, 1), new ScheduledTask(52, 56, 0), new ScheduledTask(12, 16, 0), new ScheduledTask(32, 35, 1), new ScheduledTask(56, 59, 0), new ScheduledTask(16, 19, 0), new ScheduledTask(57, 59, 1), new ScheduledTask(35, 37, 1), new ScheduledTask(38, 40, 0), new ScheduledTask(40, 42, 0)};
        int[] expectedProcessorEndTimes = new int[]{59, 59};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot04_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.04_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(42, 51, 1), new ScheduledTask(19, 26, 0), new ScheduledTask(21, 28, 1), new ScheduledTask(6, 12, 0), new ScheduledTask(26, 32, 0), new ScheduledTask(32, 38, 0), new ScheduledTask(47, 52, 0), new ScheduledTask(42, 47, 0), new ScheduledTask(50, 55, 2), new ScheduledTask(35, 39, 3), new ScheduledTask(21, 25, 3), new ScheduledTask(52, 56, 0), new ScheduledTask(12, 16, 0), new ScheduledTask(25, 28, 3), new ScheduledTask(56, 59, 0), new ScheduledTask(16, 19, 0), new ScheduledTask(57, 59, 3), new ScheduledTask(28, 30, 3), new ScheduledTask(38, 40, 0), new ScheduledTask(40, 42, 0)};
        int[] expectedProcessorEndTimes = new int[]{59, 51, 55, 59};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot04_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.04_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(42, 51, 1), new ScheduledTask(19, 26, 0), new ScheduledTask(21, 28, 2), new ScheduledTask(6, 12, 0), new ScheduledTask(26, 32, 0), new ScheduledTask(32, 38, 0), new ScheduledTask(47, 52, 0), new ScheduledTask(42, 47, 0), new ScheduledTask(51, 56, 1), new ScheduledTask(35, 39, 3), new ScheduledTask(21, 25, 4), new ScheduledTask(52, 56, 0), new ScheduledTask(12, 16, 0), new ScheduledTask(21, 24, 5), new ScheduledTask(56, 59, 0), new ScheduledTask(16, 19, 0), new ScheduledTask(57, 59, 5), new ScheduledTask(28, 30, 5), new ScheduledTask(38, 40, 0), new ScheduledTask(40, 42, 0)};
        int[] expectedProcessorEndTimes = new int[]{59, 56, 28, 39, 25, 59};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot05_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.05_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(7900, 7910, 0), new ScheduledTask(800, 809, 0), new ScheduledTask(3700, 3709, 0), new ScheduledTask(4600, 4609, 0), new ScheduledTask(2000, 2009, 1), new ScheduledTask(5800, 5809, 0), new ScheduledTask(2900, 2908, 2), new ScheduledTask(1700, 1708, 0), new ScheduledTask(2900, 2907, 3), new ScheduledTask(2500, 2507, 0), new ScheduledTask(200, 206, 0), new ScheduledTask(6700, 6705, 0), new ScheduledTask(3200, 3205, 0), new ScheduledTask(5500, 5503, 0), new ScheduledTask(7200, 7203, 0), new ScheduledTask(7500, 7502, 0), new ScheduledTask(7400, 7402, 1), new ScheduledTask(7700, 7702, 0), new ScheduledTask(7700, 7702, 2), new ScheduledTask(7100, 7102, 3)};
        int[] expectedProcessorEndTimes = new int[]{7910, 7402, 7702, 7102};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot05_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.05_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 6500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(5500, 5510, 0), new ScheduledTask(4700, 4709, 1), new ScheduledTask(1300, 1309, 0), new ScheduledTask(2200, 2209, 0), new ScheduledTask(2000, 2009, 2), new ScheduledTask(3400, 3409, 0), new ScheduledTask(2900, 2908, 3), new ScheduledTask(4700, 4708, 3), new ScheduledTask(2900, 2907, 1), new ScheduledTask(5000, 5007, 2), new ScheduledTask(3800, 3806, 2), new ScheduledTask(4300, 4305, 0), new ScheduledTask(200, 205, 0), new ScheduledTask(3100, 3103, 0), new ScheduledTask(4800, 4803, 0), new ScheduledTask(5100, 5102, 0), new ScheduledTask(700, 702, 0), new ScheduledTask(5300, 5302, 0), new ScheduledTask(900, 902, 0), new ScheduledTask(1100, 1102, 0)};
        int[] expectedProcessorEndTimes = new int[]{5510, 4709, 5007, 4708};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot05_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.05_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 6500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(5500, 5510, 0), new ScheduledTask(4700, 4709, 3), new ScheduledTask(1300, 1309, 0), new ScheduledTask(2200, 2209, 0), new ScheduledTask(2000, 2009, 3), new ScheduledTask(3400, 3409, 0), new ScheduledTask(2900, 2908, 2), new ScheduledTask(5150, 5158, 2), new ScheduledTask(4100, 4107, 2), new ScheduledTask(4700, 4707, 1), new ScheduledTask(2900, 2906, 1), new ScheduledTask(4300, 4305, 0), new ScheduledTask(200, 205, 0), new ScheduledTask(3100, 3103, 0), new ScheduledTask(4800, 4803, 0), new ScheduledTask(5100, 5102, 0), new ScheduledTask(700, 702, 0), new ScheduledTask(5300, 5302, 0), new ScheduledTask(900, 902, 0), new ScheduledTask(1100, 1102, 0)};
        int[] expectedProcessorEndTimes = new int[]{5510, 4707, 5158, 4709};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot05_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.05_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(60, 70, 0), new ScheduledTask(2, 11, 0), new ScheduledTask(18, 27, 0), new ScheduledTask(27, 36, 0), new ScheduledTask(20, 29, 1), new ScheduledTask(39, 48, 0), new ScheduledTask(29, 37, 1), new ScheduledTask(50, 58, 1), new ScheduledTask(37, 44, 1), new ScheduledTask(58, 65, 1), new ScheduledTask(44, 50, 1), new ScheduledTask(48, 53, 0), new ScheduledTask(11, 16, 0), new ScheduledTask(36, 39, 0), new ScheduledTask(53, 56, 0), new ScheduledTask(56, 58, 0), new ScheduledTask(16, 18, 0), new ScheduledTask(58, 60, 0), new ScheduledTask(65, 67, 1), new ScheduledTask(67, 69, 1)};
        int[] expectedProcessorEndTimes = new int[]{70, 69};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot05_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.05_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(55, 65, 0), new ScheduledTask(47, 56, 1), new ScheduledTask(13, 22, 0), new ScheduledTask(22, 31, 0), new ScheduledTask(20, 29, 2), new ScheduledTask(34, 43, 0), new ScheduledTask(29, 37, 3), new ScheduledTask(50, 58, 3), new ScheduledTask(37, 44, 3), new ScheduledTask(58, 65, 3), new ScheduledTask(44, 50, 3), new ScheduledTask(43, 48, 0), new ScheduledTask(2, 7, 0), new ScheduledTask(31, 34, 0), new ScheduledTask(48, 51, 0), new ScheduledTask(51, 53, 0), new ScheduledTask(7, 9, 0), new ScheduledTask(53, 55, 0), new ScheduledTask(9, 11, 0), new ScheduledTask(11, 13, 0)};
        int[] expectedProcessorEndTimes = new int[]{65, 56, 29, 65};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_10dot05_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_10.05_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(55, 65, 0), new ScheduledTask(47, 56, 1), new ScheduledTask(13, 22, 0), new ScheduledTask(22, 31, 0), new ScheduledTask(20, 29, 2), new ScheduledTask(34, 43, 0), new ScheduledTask(29, 37, 3), new ScheduledTask(47, 55, 4), new ScheduledTask(29, 36, 5), new ScheduledTask(47, 54, 5), new ScheduledTask(36, 42, 5), new ScheduledTask(43, 48, 0), new ScheduledTask(2, 7, 0), new ScheduledTask(31, 34, 0), new ScheduledTask(48, 51, 0), new ScheduledTask(51, 53, 0), new ScheduledTask(7, 9, 0), new ScheduledTask(53, 55, 0), new ScheduledTask(9, 11, 0), new ScheduledTask(11, 13, 0)};
        int[] expectedProcessorEndTimes = new int[]{65, 56, 29, 37, 55, 54};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_9dot98_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_9.98_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(3600, 3610, 0), new ScheduledTask(1300, 1310, 0), new ScheduledTask(200, 209, 0), new ScheduledTask(2000, 2009, 1), new ScheduledTask(6600, 6608, 0), new ScheduledTask(2900, 2907, 0), new ScheduledTask(4100, 4107, 2), new ScheduledTask(2300, 2306, 0), new ScheduledTask(5200, 5206, 0), new ScheduledTask(7400, 7406, 0), new ScheduledTask(4600, 4606, 0), new ScheduledTask(3200, 3205, 3), new ScheduledTask(5800, 5804, 0), new ScheduledTask(6200, 6204, 0), new ScheduledTask(6200, 6204, 3), new ScheduledTask(8000, 8003, 0), new ScheduledTask(2000, 2002, 3), new ScheduledTask(2900, 2902, 2), new ScheduledTask(7400, 7402, 1), new ScheduledTask(1100, 1102, 0)};
        int[] expectedProcessorEndTimes = new int[]{8003, 7402, 4107, 6204};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_9dot98_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_9.98_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 6900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(1900, 1910, 0), new ScheduledTask(200, 210, 0), new ScheduledTask(3800, 3809, 1), new ScheduledTask(2000, 2009, 1), new ScheduledTask(4900, 4908, 0), new ScheduledTask(1200, 1207, 0), new ScheduledTask(3800, 3807, 2), new ScheduledTask(5700, 5706, 3), new ScheduledTask(3500, 3506, 0), new ScheduledTask(5700, 5706, 0), new ScheduledTask(2900, 2906, 0), new ScheduledTask(2900, 2905, 3), new ScheduledTask(4100, 4104, 0), new ScheduledTask(4500, 4504, 0), new ScheduledTask(4800, 4804, 3), new ScheduledTask(6300, 6303, 0), new ScheduledTask(2000, 2002, 3), new ScheduledTask(3900, 3902, 3), new ScheduledTask(5700, 5702, 2), new ScheduledTask(4300, 4302, 3)};
        int[] expectedProcessorEndTimes = new int[]{6303, 3809, 5702, 5706};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_9dot98_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_9.98_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 6600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(1900, 1910, 0), new ScheduledTask(200, 210, 0), new ScheduledTask(3800, 3809, 1), new ScheduledTask(2000, 2009, 3), new ScheduledTask(4900, 4908, 0), new ScheduledTask(1200, 1207, 0), new ScheduledTask(5200, 5207, 3), new ScheduledTask(5700, 5706, 2), new ScheduledTask(3500, 3506, 0), new ScheduledTask(5700, 5706, 0), new ScheduledTask(2900, 2906, 0), new ScheduledTask(4200, 4205, 3), new ScheduledTask(4100, 4104, 0), new ScheduledTask(4500, 4504, 0), new ScheduledTask(4800, 4804, 2), new ScheduledTask(6300, 6303, 0), new ScheduledTask(3800, 3802, 3), new ScheduledTask(2900, 2902, 2), new ScheduledTask(5700, 5702, 1), new ScheduledTask(3800, 3802, 2)};
        int[] expectedProcessorEndTimes = new int[]{6303, 5702, 5706, 5207};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(19, 29, 0), new ScheduledTask(2, 12, 0), new ScheduledTask(38, 47, 1), new ScheduledTask(20, 29, 1), new ScheduledTask(49, 57, 0), new ScheduledTask(12, 19, 0), new ScheduledTask(47, 54, 1), new ScheduledTask(60, 66, 1), new ScheduledTask(35, 41, 0), new ScheduledTask(57, 63, 0), new ScheduledTask(29, 35, 0), new ScheduledTask(31, 36, 1), new ScheduledTask(41, 45, 0), new ScheduledTask(45, 49, 0), new ScheduledTask(56, 60, 1), new ScheduledTask(63, 66, 0), new ScheduledTask(29, 31, 1), new ScheduledTask(36, 38, 1), new ScheduledTask(66, 68, 1), new ScheduledTask(54, 56, 1)};
        int[] expectedProcessorEndTimes = new int[]{66, 68};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(19, 29, 0), new ScheduledTask(2, 12, 0), new ScheduledTask(38, 47, 1), new ScheduledTask(20, 29, 2), new ScheduledTask(49, 57, 0), new ScheduledTask(12, 19, 0), new ScheduledTask(38, 45, 3), new ScheduledTask(57, 63, 1), new ScheduledTask(35, 41, 0), new ScheduledTask(57, 63, 0), new ScheduledTask(29, 35, 0), new ScheduledTask(29, 34, 3), new ScheduledTask(41, 45, 0), new ScheduledTask(45, 49, 0), new ScheduledTask(48, 52, 3), new ScheduledTask(63, 66, 0), new ScheduledTask(20, 22, 3), new ScheduledTask(34, 36, 3), new ScheduledTask(57, 59, 3), new ScheduledTask(45, 47, 3)};
        int[] expectedProcessorEndTimes = new int[]{66, 63, 29, 59};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(19, 29, 0), new ScheduledTask(2, 12, 0), new ScheduledTask(38, 47, 1), new ScheduledTask(20, 29, 2), new ScheduledTask(49, 57, 0), new ScheduledTask(12, 19, 0), new ScheduledTask(38, 45, 3), new ScheduledTask(57, 63, 2), new ScheduledTask(35, 41, 0), new ScheduledTask(57, 63, 0), new ScheduledTask(29, 35, 0), new ScheduledTask(29, 34, 4), new ScheduledTask(41, 45, 0), new ScheduledTask(45, 49, 0), new ScheduledTask(48, 52, 5), new ScheduledTask(63, 66, 0), new ScheduledTask(20, 22, 5), new ScheduledTask(29, 31, 5), new ScheduledTask(57, 59, 5), new ScheduledTask(38, 40, 5)};
        int[] expectedProcessorEndTimes = new int[]{66, 47, 63, 45, 34, 59};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_9dot99_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_9.99_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(1300, 1310, 0), new ScheduledTask(300, 310, 0), new ScheduledTask(4100, 4109, 0), new ScheduledTask(3300, 3308, 0), new ScheduledTask(6200, 6208, 0), new ScheduledTask(8100, 8108, 0), new ScheduledTask(2300, 2307, 0), new ScheduledTask(4500, 4507, 1), new ScheduledTask(7000, 7006, 0), new ScheduledTask(6300, 6305, 2), new ScheduledTask(7600, 7605, 0), new ScheduledTask(5800, 5805, 3), new ScheduledTask(5000, 5005, 0), new ScheduledTask(5500, 5504, 0), new ScheduledTask(4500, 4503, 2), new ScheduledTask(3000, 3003, 0), new ScheduledTask(8900, 8903, 0), new ScheduledTask(2800, 2803, 3), new ScheduledTask(5900, 5903, 0), new ScheduledTask(4600, 4602, 3)};
        int[] expectedProcessorEndTimes = new int[]{8903, 4507, 6305, 5805};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_9dot99_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_9.99_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 7200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(300, 310, 0), new ScheduledTask(3700, 3710, 1), new ScheduledTask(2100, 2109, 0), new ScheduledTask(1300, 1308, 0), new ScheduledTask(4200, 4208, 0), new ScheduledTask(6100, 6108, 0), new ScheduledTask(5700, 5707, 1), new ScheduledTask(4500, 4507, 2), new ScheduledTask(5000, 5006, 0), new ScheduledTask(5900, 5905, 2), new ScheduledTask(5600, 5605, 0), new ScheduledTask(5500, 5505, 3), new ScheduledTask(3000, 3005, 0), new ScheduledTask(3500, 3504, 0), new ScheduledTask(4500, 4503, 3), new ScheduledTask(6500, 6503, 3), new ScheduledTask(6900, 6903, 0), new ScheduledTask(2800, 2803, 3), new ScheduledTask(3900, 3903, 0), new ScheduledTask(5100, 5102, 3)};
        int[] expectedProcessorEndTimes = new int[]{6903, 5707, 5905, 6503};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_9dot99_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_9.99_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 6800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(5400, 5410, 1), new ScheduledTask(3700, 3710, 2), new ScheduledTask(1600, 1609, 0), new ScheduledTask(800, 808, 0), new ScheduledTask(3700, 3708, 0), new ScheduledTask(5600, 5608, 0), new ScheduledTask(5400, 5407, 3), new ScheduledTask(4500, 4507, 1), new ScheduledTask(4500, 4506, 0), new ScheduledTask(300, 305, 0), new ScheduledTask(5100, 5105, 0), new ScheduledTask(5500, 5505, 2), new ScheduledTask(2500, 2505, 0), new ScheduledTask(3000, 3004, 0), new ScheduledTask(4500, 4503, 3), new ScheduledTask(6250, 6253, 2), new ScheduledTask(6400, 6403, 0), new ScheduledTask(2800, 2803, 3), new ScheduledTask(3400, 3403, 0), new ScheduledTask(5200, 5202, 2)};
        int[] expectedProcessorEndTimes = new int[]{6403, 5410, 6253, 5407};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(6, 16, 0), new ScheduledTask(37, 47, 1), new ScheduledTask(24, 33, 0), new ScheduledTask(16, 24, 0), new ScheduledTask(45, 53, 0), new ScheduledTask(64, 72, 0), new ScheduledTask(56, 63, 1), new ScheduledTask(47, 54, 1), new ScheduledTask(53, 59, 0), new ScheduledTask(63, 68, 1), new ScheduledTask(59, 64, 0), new ScheduledTask(68, 73, 1), new ScheduledTask(33, 38, 0), new ScheduledTask(38, 42, 0), new ScheduledTask(3, 6, 0), new ScheduledTask(73, 76, 1), new ScheduledTask(72, 75, 0), new ScheduledTask(28, 31, 1), new ScheduledTask(42, 45, 0), new ScheduledTask(54, 56, 1)};
        int[] expectedProcessorEndTimes = new int[]{75, 76};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(54, 64, 1), new ScheduledTask(37, 47, 1), new ScheduledTask(11, 20, 0), new ScheduledTask(3, 11, 0), new ScheduledTask(32, 40, 0), new ScheduledTask(51, 59, 0), new ScheduledTask(54, 61, 2), new ScheduledTask(45, 52, 3), new ScheduledTask(40, 46, 0), new ScheduledTask(54, 59, 3), new ScheduledTask(46, 51, 0), new ScheduledTask(59, 64, 3), new ScheduledTask(20, 25, 0), new ScheduledTask(25, 29, 0), new ScheduledTask(45, 48, 2), new ScheduledTask(61, 64, 2), new ScheduledTask(59, 62, 0), new ScheduledTask(28, 31, 3), new ScheduledTask(29, 32, 0), new ScheduledTask(52, 54, 3)};
        int[] expectedProcessorEndTimes = new int[]{62, 64, 64, 64};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_21_CCR_9dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Fork_Nodes_21_CCR_9.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(54, 64, 1), new ScheduledTask(37, 47, 2), new ScheduledTask(11, 20, 0), new ScheduledTask(3, 11, 0), new ScheduledTask(32, 40, 0), new ScheduledTask(51, 59, 0), new ScheduledTask(54, 61, 3), new ScheduledTask(45, 52, 4), new ScheduledTask(40, 46, 0), new ScheduledTask(54, 59, 5), new ScheduledTask(46, 51, 0), new ScheduledTask(59, 64, 5), new ScheduledTask(20, 25, 0), new ScheduledTask(25, 29, 0), new ScheduledTask(45, 48, 5), new ScheduledTask(54, 57, 4), new ScheduledTask(59, 62, 0), new ScheduledTask(28, 31, 5), new ScheduledTask(29, 32, 0), new ScheduledTask(48, 50, 5)};
        int[] expectedProcessorEndTimes = new int[]{62, 64, 47, 61, 57, 64};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(1000, 1010, 0), new ScheduledTask(2000, 2010, 0), new ScheduledTask(3000, 3009, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(3900, 3908, 0), new ScheduledTask(4700, 4708, 0), new ScheduledTask(5500, 5507, 0), new ScheduledTask(6200, 6206, 0), new ScheduledTask(0, 6, 2), new ScheduledTask(0, 6, 3), new ScheduledTask(3600, 3605, 3), new ScheduledTask(6800, 6804, 0), new ScheduledTask(5400, 5404, 1), new ScheduledTask(3600, 3604, 2), new ScheduledTask(7200, 7203, 0), new ScheduledTask(6000, 6003, 2), new ScheduledTask(7500, 7502, 0), new ScheduledTask(7700, 7702, 0), new ScheduledTask(7900, 7902, 0), new ScheduledTask(6600, 6602, 3)};
        int[] expectedProcessorEndTimes = new int[]{7902, 5404, 6003, 6602};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(1000, 1009, 0), new ScheduledTask(0, 9, 3), new ScheduledTask(2000, 2008, 2), new ScheduledTask(1800, 1808, 3), new ScheduledTask(3400, 3407, 3), new ScheduledTask(2000, 2006, 1), new ScheduledTask(3200, 3206, 1), new ScheduledTask(3600, 3606, 2), new ScheduledTask(1900, 1905, 0), new ScheduledTask(2400, 2404, 0), new ScheduledTask(2800, 2804, 0), new ScheduledTask(3200, 3204, 0), new ScheduledTask(3600, 3603, 0), new ScheduledTask(3900, 3903, 0), new ScheduledTask(4200, 4202, 0), new ScheduledTask(4400, 4402, 0), new ScheduledTask(4600, 4602, 0), new ScheduledTask(4400, 4402, 1)};
        int[] expectedProcessorEndTimes = new int[]{4602, 4402, 3606, 3407};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4050;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(1000, 1009, 0), new ScheduledTask(0, 9, 3), new ScheduledTask(1500, 1508, 2), new ScheduledTask(1800, 1808, 3), new ScheduledTask(2700, 2707, 2), new ScheduledTask(1200, 1206, 1), new ScheduledTask(1920, 1926, 1), new ScheduledTask(2640, 2646, 1), new ScheduledTask(3360, 3365, 1), new ScheduledTask(1900, 1904, 0), new ScheduledTask(2300, 2304, 0), new ScheduledTask(2700, 2704, 0), new ScheduledTask(3100, 3103, 0), new ScheduledTask(3400, 3403, 3), new ScheduledTask(3400, 3402, 0), new ScheduledTask(3600, 3602, 0), new ScheduledTask(3800, 3802, 0), new ScheduledTask(3750, 3752, 2)};
        int[] expectedProcessorEndTimes = new int[]{3802, 3365, 3752, 3403};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 60;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 20, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(10, 19, 1), new ScheduledTask(19, 28, 1), new ScheduledTask(20, 28, 0), new ScheduledTask(28, 36, 1), new ScheduledTask(36, 43, 1), new ScheduledTask(28, 34, 0), new ScheduledTask(43, 49, 1), new ScheduledTask(49, 55, 1), new ScheduledTask(55, 60, 1), new ScheduledTask(34, 38, 0), new ScheduledTask(38, 42, 0), new ScheduledTask(42, 46, 0), new ScheduledTask(46, 49, 0), new ScheduledTask(49, 52, 0), new ScheduledTask(52, 54, 0), new ScheduledTask(54, 56, 0), new ScheduledTask(56, 58, 0), new ScheduledTask(58, 60, 0)};
        int[] expectedProcessorEndTimes = new int[]{60, 60};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 30;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 9, 3), new ScheduledTask(9, 18, 3), new ScheduledTask(10, 18, 0), new ScheduledTask(10, 18, 1), new ScheduledTask(18, 25, 1), new ScheduledTask(10, 16, 2), new ScheduledTask(18, 24, 3), new ScheduledTask(24, 30, 3), new ScheduledTask(16, 21, 2), new ScheduledTask(18, 22, 0), new ScheduledTask(22, 26, 0), new ScheduledTask(21, 25, 2), new ScheduledTask(25, 28, 1), new ScheduledTask(25, 28, 2), new ScheduledTask(26, 28, 0), new ScheduledTask(28, 30, 0), new ScheduledTask(28, 30, 1), new ScheduledTask(28, 30, 2)};
        int[] expectedProcessorEndTimes = new int[]{30, 30, 30, 30};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 20;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 9, 3), new ScheduledTask(0, 9, 4), new ScheduledTask(0, 8, 5), new ScheduledTask(8, 16, 5), new ScheduledTask(9, 16, 3), new ScheduledTask(10, 16, 0), new ScheduledTask(10, 16, 1), new ScheduledTask(10, 16, 2), new ScheduledTask(9, 14, 4), new ScheduledTask(16, 20, 0), new ScheduledTask(16, 20, 1), new ScheduledTask(16, 20, 5), new ScheduledTask(14, 17, 4), new ScheduledTask(17, 20, 4), new ScheduledTask(16, 18, 2), new ScheduledTask(18, 20, 2), new ScheduledTask(16, 18, 3), new ScheduledTask(18, 20, 3)};
        int[] expectedProcessorEndTimes = new int[]{20, 20, 20, 20, 20, 20};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random2_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#2_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(1000, 1010, 0), new ScheduledTask(2000, 2010, 0), new ScheduledTask(3000, 3010, 0), new ScheduledTask(4000, 4010, 0), new ScheduledTask(5000, 5010, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(0, 9, 2), new ScheduledTask(0, 9, 3), new ScheduledTask(6000, 6008, 0), new ScheduledTask(6800, 6807, 0), new ScheduledTask(5400, 5407, 2), new ScheduledTask(5400, 5407, 3), new ScheduledTask(7500, 7506, 0), new ScheduledTask(8100, 8105, 0), new ScheduledTask(8600, 8605, 0), new ScheduledTask(9100, 9104, 0), new ScheduledTask(5400, 5404, 1), new ScheduledTask(9500, 9503, 0), new ScheduledTask(9800, 9803, 0), new ScheduledTask(7800, 7803, 1)};
        int[] expectedProcessorEndTimes = new int[]{9803, 7803, 5407, 5407};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random2_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#2_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 6000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(1000, 1010, 0), new ScheduledTask(2000, 2010, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 10, 3), new ScheduledTask(2000, 2009, 1), new ScheduledTask(2000, 2009, 2), new ScheduledTask(2000, 2009, 3), new ScheduledTask(3800, 3808, 2), new ScheduledTask(3000, 3007, 0), new ScheduledTask(3700, 3707, 0), new ScheduledTask(3800, 3807, 3), new ScheduledTask(3800, 3806, 1), new ScheduledTask(4400, 4405, 0), new ScheduledTask(5000, 5005, 1), new ScheduledTask(4900, 4904, 0), new ScheduledTask(5200, 5204, 3), new ScheduledTask(5300, 5303, 0), new ScheduledTask(5600, 5603, 0), new ScheduledTask(5400, 5403, 2)};
        int[] expectedProcessorEndTimes = new int[]{5603, 5005, 5403, 5204};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random2_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#2_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(1000, 1010, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 10, 3), new ScheduledTask(2000, 2010, 3), new ScheduledTask(1200, 1209, 1), new ScheduledTask(1500, 1509, 2), new ScheduledTask(2850, 2859, 2), new ScheduledTask(2280, 2288, 1), new ScheduledTask(2000, 2007, 0), new ScheduledTask(3240, 3247, 1), new ScheduledTask(4080, 4087, 1), new ScheduledTask(2700, 2706, 0), new ScheduledTask(4200, 4205, 2), new ScheduledTask(4000, 4005, 3), new ScheduledTask(3300, 3304, 0), new ScheduledTask(3700, 3704, 0), new ScheduledTask(4100, 4103, 0), new ScheduledTask(4400, 4403, 0), new ScheduledTask(4700, 4703, 0)};
        int[] expectedProcessorEndTimes = new int[]{4703, 4087, 4205, 4005};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 75;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 20, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(10, 20, 1), new ScheduledTask(20, 30, 1), new ScheduledTask(30, 40, 1), new ScheduledTask(20, 29, 0), new ScheduledTask(29, 38, 0), new ScheduledTask(38, 47, 0), new ScheduledTask(40, 48, 1), new ScheduledTask(47, 54, 0), new ScheduledTask(48, 55, 1), new ScheduledTask(55, 62, 1), new ScheduledTask(62, 68, 1), new ScheduledTask(54, 59, 0), new ScheduledTask(59, 64, 0), new ScheduledTask(64, 68, 0), new ScheduledTask(68, 72, 1), new ScheduledTask(68, 71, 0), new ScheduledTask(71, 74, 0), new ScheduledTask(72, 75, 1)};
        int[] expectedProcessorEndTimes = new int[]{74, 75};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 38;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(10, 20, 1), new ScheduledTask(20, 30, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 10, 3), new ScheduledTask(10, 19, 3), new ScheduledTask(19, 28, 3), new ScheduledTask(28, 37, 3), new ScheduledTask(10, 18, 2), new ScheduledTask(30, 37, 1), new ScheduledTask(18, 25, 2), new ScheduledTask(25, 32, 2), new ScheduledTask(32, 38, 2), new ScheduledTask(10, 15, 0), new ScheduledTask(15, 20, 0), new ScheduledTask(20, 24, 0), new ScheduledTask(24, 28, 0), new ScheduledTask(28, 31, 0), new ScheduledTask(31, 34, 0), new ScheduledTask(34, 37, 0)};
        int[] expectedProcessorEndTimes = new int[]{37, 37, 38, 37};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 25;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 10, 3), new ScheduledTask(10, 20, 3), new ScheduledTask(0, 10, 4), new ScheduledTask(10, 19, 4), new ScheduledTask(0, 9, 5), new ScheduledTask(9, 18, 5), new ScheduledTask(10, 18, 2), new ScheduledTask(10, 17, 1), new ScheduledTask(18, 25, 2), new ScheduledTask(18, 25, 5), new ScheduledTask(19, 25, 4), new ScheduledTask(17, 22, 1), new ScheduledTask(20, 25, 3), new ScheduledTask(10, 14, 0), new ScheduledTask(14, 18, 0), new ScheduledTask(18, 21, 0), new ScheduledTask(21, 24, 0), new ScheduledTask(22, 25, 1)};
        int[] expectedProcessorEndTimes = new int[]{24, 25, 25, 25, 25, 25};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random3_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#3_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(1000, 1010, 0), new ScheduledTask(2000, 2010, 0), new ScheduledTask(3000, 3010, 0), new ScheduledTask(4000, 4010, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(0, 8, 2), new ScheduledTask(0, 8, 3), new ScheduledTask(5000, 5007, 0), new ScheduledTask(5700, 5707, 0), new ScheduledTask(6400, 6405, 0), new ScheduledTask(6900, 6905, 0), new ScheduledTask(4800, 4804, 2), new ScheduledTask(4800, 4804, 3), new ScheduledTask(5400, 5403, 1), new ScheduledTask(7400, 7403, 0), new ScheduledTask(7700, 7703, 0), new ScheduledTask(8000, 8003, 0), new ScheduledTask(7200, 7202, 1), new ScheduledTask(7200, 7202, 2), new ScheduledTask(7200, 7202, 3)};
        int[] expectedProcessorEndTimes = new int[]{8003, 7202, 7202, 7202};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random3_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#3_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(1000, 1010, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 10, 3), new ScheduledTask(2000, 2009, 0), new ScheduledTask(2000, 2008, 1), new ScheduledTask(2000, 2008, 3), new ScheduledTask(2000, 2007, 2), new ScheduledTask(3600, 3607, 3), new ScheduledTask(3600, 3605, 1), new ScheduledTask(3400, 3405, 2), new ScheduledTask(2900, 2904, 0), new ScheduledTask(3300, 3304, 0), new ScheduledTask(3700, 3703, 0), new ScheduledTask(4000, 4003, 0), new ScheduledTask(4300, 4303, 0), new ScheduledTask(4400, 4403, 2), new ScheduledTask(4600, 4602, 0), new ScheduledTask(4800, 4802, 0), new ScheduledTask(4600, 4602, 1)};
        int[] expectedProcessorEndTimes = new int[]{4802, 4602, 4403, 3607};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random3_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#3_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(1000, 1010, 0), new ScheduledTask(0, 10, 3), new ScheduledTask(1200, 1209, 1), new ScheduledTask(1500, 1508, 2), new ScheduledTask(2000, 2008, 0), new ScheduledTask(2280, 2287, 1), new ScheduledTask(2000, 2007, 3), new ScheduledTask(2800, 2805, 0), new ScheduledTask(2700, 2705, 2), new ScheduledTask(3120, 3124, 1), new ScheduledTask(3300, 3304, 0), new ScheduledTask(3450, 3453, 2), new ScheduledTask(3600, 3603, 1), new ScheduledTask(3700, 3703, 0), new ScheduledTask(3400, 3403, 3), new ScheduledTask(4000, 4002, 0), new ScheduledTask(3960, 3962, 1), new ScheduledTask(3900, 3902, 2)};
        int[] expectedProcessorEndTimes = new int[]{4002, 3962, 3902, 3403};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(10, 20, 0), new ScheduledTask(10, 20, 1), new ScheduledTask(20, 30, 0), new ScheduledTask(20, 29, 1), new ScheduledTask(29, 37, 1), new ScheduledTask(30, 38, 0), new ScheduledTask(37, 44, 1), new ScheduledTask(38, 45, 0), new ScheduledTask(44, 49, 1), new ScheduledTask(45, 50, 0), new ScheduledTask(49, 53, 1), new ScheduledTask(50, 54, 0), new ScheduledTask(53, 56, 1), new ScheduledTask(54, 57, 0), new ScheduledTask(56, 59, 1), new ScheduledTask(57, 60, 0), new ScheduledTask(59, 61, 1), new ScheduledTask(60, 62, 0), new ScheduledTask(61, 63, 1)};
        int[] expectedProcessorEndTimes = new int[]{62, 63};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 10, 3), new ScheduledTask(10, 20, 0), new ScheduledTask(10, 19, 1), new ScheduledTask(10, 18, 2), new ScheduledTask(10, 18, 3), new ScheduledTask(18, 25, 2), new ScheduledTask(18, 25, 3), new ScheduledTask(19, 24, 1), new ScheduledTask(20, 25, 0), new ScheduledTask(24, 28, 1), new ScheduledTask(25, 29, 0), new ScheduledTask(25, 28, 2), new ScheduledTask(25, 28, 3), new ScheduledTask(28, 31, 1), new ScheduledTask(28, 31, 2), new ScheduledTask(28, 30, 3), new ScheduledTask(29, 31, 0), new ScheduledTask(30, 32, 3)};
        int[] expectedProcessorEndTimes = new int[]{31, 31, 31, 32};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 21;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(10, 20, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 10, 3), new ScheduledTask(0, 9, 4), new ScheduledTask(0, 8, 5), new ScheduledTask(8, 16, 5), new ScheduledTask(10, 17, 3), new ScheduledTask(9, 16, 4), new ScheduledTask(16, 21, 4), new ScheduledTask(16, 21, 5), new ScheduledTask(10, 14, 2), new ScheduledTask(17, 21, 3), new ScheduledTask(10, 13, 0), new ScheduledTask(13, 16, 0), new ScheduledTask(16, 19, 0), new ScheduledTask(14, 17, 2), new ScheduledTask(19, 21, 0), new ScheduledTask(17, 19, 2), new ScheduledTask(19, 21, 2)};
        int[] expectedProcessorEndTimes = new int[]{21, 20, 21, 21, 21, 21};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random4_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#4_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(1000, 1010, 0), new ScheduledTask(2000, 2009, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(2900, 2908, 0), new ScheduledTask(0, 8, 2), new ScheduledTask(0, 8, 3), new ScheduledTask(3700, 3707, 0), new ScheduledTask(4400, 4406, 0), new ScheduledTask(5000, 5006, 0), new ScheduledTask(5600, 5605, 0), new ScheduledTask(6100, 6105, 0), new ScheduledTask(6600, 6605, 0), new ScheduledTask(4800, 4805, 2), new ScheduledTask(4800, 4805, 3), new ScheduledTask(5400, 5404, 1), new ScheduledTask(7100, 7103, 0), new ScheduledTask(7400, 7403, 0), new ScheduledTask(7700, 7702, 0), new ScheduledTask(7900, 7902, 0), new ScheduledTask(8100, 8102, 0)};
        int[] expectedProcessorEndTimes = new int[]{8102, 5404, 4805, 4805};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random4_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#4_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(1000, 1010, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(0, 9, 2), new ScheduledTask(0, 8, 3), new ScheduledTask(2000, 2008, 0), new ScheduledTask(1600, 1608, 3), new ScheduledTask(1800, 1807, 1), new ScheduledTask(1800, 1806, 2), new ScheduledTask(2800, 2806, 0), new ScheduledTask(3400, 3405, 0), new ScheduledTask(3000, 3005, 2), new ScheduledTask(3200, 3205, 1), new ScheduledTask(3200, 3205, 3), new ScheduledTask(3900, 3905, 0), new ScheduledTask(4400, 4404, 0), new ScheduledTask(4000, 4003, 2), new ScheduledTask(4200, 4203, 1), new ScheduledTask(4200, 4202, 3), new ScheduledTask(4800, 4802, 0), new ScheduledTask(4600, 4602, 2)};
        int[] expectedProcessorEndTimes = new int[]{4802, 4203, 4602, 4202};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random4_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#4_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 9, 1), new ScheduledTask(1080, 1089, 1), new ScheduledTask(1500, 1508, 2), new ScheduledTask(0, 8, 3), new ScheduledTask(1600, 1608, 3), new ScheduledTask(2700, 2707, 2), new ScheduledTask(2160, 2166, 1), new ScheduledTask(2880, 2886, 1), new ScheduledTask(1000, 1005, 0), new ScheduledTask(1500, 1505, 0), new ScheduledTask(2000, 2005, 0), new ScheduledTask(2500, 2505, 0), new ScheduledTask(3000, 3005, 0), new ScheduledTask(3200, 3204, 3), new ScheduledTask(3500, 3503, 0), new ScheduledTask(3800, 3803, 0), new ScheduledTask(3600, 3602, 1), new ScheduledTask(3840, 3842, 1), new ScheduledTask(3750, 3752, 2)};
        int[] expectedProcessorEndTimes = new int[]{3803, 3842, 3752, 3204};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(10, 19, 1), new ScheduledTask(19, 28, 1), new ScheduledTask(10, 18, 0), new ScheduledTask(18, 26, 0), new ScheduledTask(26, 34, 0), new ScheduledTask(34, 41, 0), new ScheduledTask(28, 34, 1), new ScheduledTask(34, 40, 1), new ScheduledTask(41, 46, 0), new ScheduledTask(46, 51, 0), new ScheduledTask(40, 45, 1), new ScheduledTask(45, 50, 1), new ScheduledTask(50, 55, 1), new ScheduledTask(55, 59, 1), new ScheduledTask(51, 54, 0), new ScheduledTask(54, 57, 0), new ScheduledTask(57, 59, 0), new ScheduledTask(59, 61, 0), new ScheduledTask(59, 61, 1)};
        int[] expectedProcessorEndTimes = new int[]{61, 61};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 9, 2), new ScheduledTask(0, 9, 3), new ScheduledTask(10, 18, 0), new ScheduledTask(10, 18, 1), new ScheduledTask(9, 17, 2), new ScheduledTask(18, 25, 0), new ScheduledTask(9, 15, 3), new ScheduledTask(15, 21, 3), new ScheduledTask(18, 23, 1), new ScheduledTask(17, 22, 2), new ScheduledTask(22, 27, 2), new ScheduledTask(21, 26, 3), new ScheduledTask(26, 31, 3), new ScheduledTask(27, 31, 2), new ScheduledTask(23, 26, 1), new ScheduledTask(26, 29, 1), new ScheduledTask(25, 27, 0), new ScheduledTask(27, 29, 0), new ScheduledTask(29, 31, 1)};
        int[] expectedProcessorEndTimes = new int[]{29, 31, 31, 31};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 21;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 9, 2), new ScheduledTask(0, 9, 3), new ScheduledTask(0, 8, 4), new ScheduledTask(0, 8, 5), new ScheduledTask(8, 16, 4), new ScheduledTask(8, 15, 5), new ScheduledTask(9, 15, 2), new ScheduledTask(9, 15, 3), new ScheduledTask(10, 15, 0), new ScheduledTask(10, 15, 1), new ScheduledTask(15, 20, 0), new ScheduledTask(15, 20, 1), new ScheduledTask(15, 20, 2), new ScheduledTask(15, 19, 3), new ScheduledTask(15, 18, 5), new ScheduledTask(16, 19, 4), new ScheduledTask(18, 20, 5), new ScheduledTask(19, 21, 3), new ScheduledTask(19, 21, 4)};
        int[] expectedProcessorEndTimes = new int[]{20, 20, 20, 21, 21, 20};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random5_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#5_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(1000, 1010, 0), new ScheduledTask(2000, 2010, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(3000, 3009, 0), new ScheduledTask(0, 9, 2), new ScheduledTask(3900, 3908, 0), new ScheduledTask(4700, 4708, 0), new ScheduledTask(0, 7, 3), new ScheduledTask(5500, 5506, 0), new ScheduledTask(6100, 6105, 0), new ScheduledTask(6600, 6605, 0), new ScheduledTask(7100, 7105, 0), new ScheduledTask(4200, 4204, 3), new ScheduledTask(7600, 7603, 0), new ScheduledTask(6000, 6003, 1), new ScheduledTask(7900, 7902, 0), new ScheduledTask(8100, 8102, 0), new ScheduledTask(5400, 5402, 2), new ScheduledTask(6600, 6602, 2), new ScheduledTask(6600, 6602, 3)};
        int[] expectedProcessorEndTimes = new int[]{8102, 6003, 6602, 6602};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random5_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#5_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(1000, 1010, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 9, 3), new ScheduledTask(2000, 2009, 0), new ScheduledTask(1800, 1808, 3), new ScheduledTask(2000, 2008, 1), new ScheduledTask(2000, 2007, 2), new ScheduledTask(2900, 2906, 0), new ScheduledTask(3500, 3505, 0), new ScheduledTask(3400, 3405, 2), new ScheduledTask(3400, 3405, 3), new ScheduledTask(4000, 4004, 0), new ScheduledTask(3600, 3603, 1), new ScheduledTask(4400, 4403, 0), new ScheduledTask(4200, 4202, 1), new ScheduledTask(4400, 4402, 2), new ScheduledTask(4400, 4402, 3), new ScheduledTask(4700, 4702, 0), new ScheduledTask(4600, 4602, 1)};
        int[] expectedProcessorEndTimes = new int[]{4702, 4602, 4402, 4402};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random5_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#5_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 10, 3), new ScheduledTask(1000, 1009, 0), new ScheduledTask(1200, 1209, 1), new ScheduledTask(1500, 1508, 2), new ScheduledTask(2000, 2008, 3), new ScheduledTask(2700, 2707, 2), new ScheduledTask(2280, 2286, 1), new ScheduledTask(1900, 1905, 0), new ScheduledTask(2400, 2405, 0), new ScheduledTask(3000, 3005, 1), new ScheduledTask(3600, 3604, 1), new ScheduledTask(2900, 2903, 0), new ScheduledTask(3200, 3203, 0), new ScheduledTask(3500, 3502, 0), new ScheduledTask(3700, 3702, 0), new ScheduledTask(3900, 3902, 0), new ScheduledTask(3750, 3752, 2), new ScheduledTask(3600, 3602, 3)};
        int[] expectedProcessorEndTimes = new int[]{3902, 3604, 3752, 3602};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(10, 20, 1), new ScheduledTask(20, 30, 1), new ScheduledTask(10, 19, 0), new ScheduledTask(19, 28, 0), new ScheduledTask(28, 36, 0), new ScheduledTask(36, 44, 0), new ScheduledTask(30, 37, 1), new ScheduledTask(37, 43, 1), new ScheduledTask(43, 48, 1), new ScheduledTask(48, 53, 1), new ScheduledTask(53, 58, 1), new ScheduledTask(44, 48, 0), new ScheduledTask(48, 51, 0), new ScheduledTask(58, 61, 1), new ScheduledTask(51, 53, 0), new ScheduledTask(53, 55, 0), new ScheduledTask(55, 57, 0), new ScheduledTask(57, 59, 0), new ScheduledTask(59, 61, 0)};
        int[] expectedProcessorEndTimes = new int[]{61, 61};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 10, 3), new ScheduledTask(10, 19, 0), new ScheduledTask(10, 19, 1), new ScheduledTask(10, 18, 2), new ScheduledTask(10, 18, 3), new ScheduledTask(18, 25, 2), new ScheduledTask(18, 24, 3), new ScheduledTask(19, 24, 0), new ScheduledTask(19, 24, 1), new ScheduledTask(24, 29, 0), new ScheduledTask(24, 28, 1), new ScheduledTask(24, 27, 3), new ScheduledTask(25, 28, 2), new ScheduledTask(27, 29, 3), new ScheduledTask(28, 30, 1), new ScheduledTask(28, 30, 2), new ScheduledTask(29, 31, 0), new ScheduledTask(29, 31, 3)};
        int[] expectedProcessorEndTimes = new int[]{31, 30, 30, 31};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 21;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 10, 3), new ScheduledTask(0, 9, 4), new ScheduledTask(0, 9, 5), new ScheduledTask(9, 17, 4), new ScheduledTask(9, 17, 5), new ScheduledTask(10, 17, 0), new ScheduledTask(10, 16, 1), new ScheduledTask(10, 15, 2), new ScheduledTask(10, 15, 3), new ScheduledTask(15, 20, 2), new ScheduledTask(15, 19, 3), new ScheduledTask(16, 19, 1), new ScheduledTask(17, 20, 0), new ScheduledTask(17, 19, 4), new ScheduledTask(17, 19, 5), new ScheduledTask(19, 21, 1), new ScheduledTask(19, 21, 3), new ScheduledTask(19, 21, 4)};
        int[] expectedProcessorEndTimes = new int[]{20, 21, 20, 21, 21, 19};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random6_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#6_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 7700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(1000, 1009, 0), new ScheduledTask(1900, 1909, 0), new ScheduledTask(2800, 2808, 0), new ScheduledTask(0, 8, 3), new ScheduledTask(3600, 3606, 0), new ScheduledTask(4200, 4206, 0), new ScheduledTask(4800, 4805, 0), new ScheduledTask(5300, 5305, 0), new ScheduledTask(5800, 5805, 0), new ScheduledTask(4800, 4804, 3), new ScheduledTask(6300, 6303, 0), new ScheduledTask(6600, 6603, 0), new ScheduledTask(6900, 6902, 0), new ScheduledTask(7100, 7102, 0), new ScheduledTask(7300, 7302, 0), new ScheduledTask(7500, 7502, 0), new ScheduledTask(6000, 6002, 1), new ScheduledTask(6000, 6002, 2)};
        int[] expectedProcessorEndTimes = new int[]{7502, 6002, 6002, 4804};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random6_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#6_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(1000, 1009, 0), new ScheduledTask(2000, 2009, 1), new ScheduledTask(0, 8, 3), new ScheduledTask(1600, 1608, 3), new ScheduledTask(2000, 2006, 2), new ScheduledTask(3200, 3206, 3), new ScheduledTask(1900, 1905, 0), new ScheduledTask(2400, 2405, 0), new ScheduledTask(3200, 3205, 2), new ScheduledTask(3800, 3804, 1), new ScheduledTask(2900, 2903, 0), new ScheduledTask(3200, 3203, 0), new ScheduledTask(3500, 3502, 0), new ScheduledTask(3700, 3702, 0), new ScheduledTask(3900, 3902, 0), new ScheduledTask(4100, 4102, 0), new ScheduledTask(4300, 4302, 0), new ScheduledTask(4200, 4202, 2)};
        int[] expectedProcessorEndTimes = new int[]{4302, 3804, 4202, 3206};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random6_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#6_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 3800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 10, 3), new ScheduledTask(1500, 1509, 2), new ScheduledTask(2000, 2009, 3), new ScheduledTask(0, 8, 1), new ScheduledTask(960, 968, 1), new ScheduledTask(1920, 1926, 1), new ScheduledTask(2850, 2856, 2), new ScheduledTask(1000, 1005, 0), new ScheduledTask(1500, 1505, 0), new ScheduledTask(2640, 2645, 1), new ScheduledTask(3240, 3244, 1), new ScheduledTask(2000, 2003, 0), new ScheduledTask(2300, 2303, 0), new ScheduledTask(2600, 2602, 0), new ScheduledTask(2800, 2802, 0), new ScheduledTask(3000, 3002, 0), new ScheduledTask(3200, 3202, 0), new ScheduledTask(3400, 3402, 0), new ScheduledTask(3600, 3602, 0)};
        int[] expectedProcessorEndTimes = new int[]{3602, 3244, 2856, 2009};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(10, 20, 0), new ScheduledTask(10, 19, 1), new ScheduledTask(19, 28, 1), new ScheduledTask(20, 28, 0), new ScheduledTask(28, 36, 0), new ScheduledTask(28, 34, 1), new ScheduledTask(34, 40, 1), new ScheduledTask(36, 41, 0), new ScheduledTask(40, 45, 1), new ScheduledTask(41, 46, 0), new ScheduledTask(45, 49, 1), new ScheduledTask(46, 49, 0), new ScheduledTask(49, 52, 0), new ScheduledTask(49, 51, 1), new ScheduledTask(51, 53, 1), new ScheduledTask(52, 54, 0), new ScheduledTask(53, 55, 1), new ScheduledTask(54, 56, 0), new ScheduledTask(55, 57, 1)};
        int[] expectedProcessorEndTimes = new int[]{56, 57};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 9, 3), new ScheduledTask(9, 18, 3), new ScheduledTask(10, 18, 0), new ScheduledTask(10, 18, 1), new ScheduledTask(10, 16, 2), new ScheduledTask(16, 22, 2), new ScheduledTask(18, 23, 0), new ScheduledTask(18, 23, 1), new ScheduledTask(18, 23, 3), new ScheduledTask(22, 26, 2), new ScheduledTask(23, 26, 0), new ScheduledTask(23, 26, 1), new ScheduledTask(23, 25, 3), new ScheduledTask(25, 27, 3), new ScheduledTask(26, 28, 0), new ScheduledTask(26, 28, 1), new ScheduledTask(26, 28, 2), new ScheduledTask(27, 29, 3)};
        int[] expectedProcessorEndTimes = new int[]{28, 28, 28, 29};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 19;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(10, 19, 1), new ScheduledTask(0, 9, 3), new ScheduledTask(0, 8, 4), new ScheduledTask(0, 8, 5), new ScheduledTask(8, 14, 4), new ScheduledTask(8, 14, 5), new ScheduledTask(9, 14, 3), new ScheduledTask(14, 19, 4), new ScheduledTask(14, 19, 5), new ScheduledTask(14, 18, 3), new ScheduledTask(10, 13, 0), new ScheduledTask(10, 13, 2), new ScheduledTask(13, 15, 0), new ScheduledTask(15, 17, 0), new ScheduledTask(17, 19, 0), new ScheduledTask(13, 15, 2), new ScheduledTask(15, 17, 2), new ScheduledTask(17, 19, 2)};
        int[] expectedProcessorEndTimes = new int[]{19, 19, 19, 18, 19, 19};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random7_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#7_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(1000, 1010, 0), new ScheduledTask(2000, 2010, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 9, 2), new ScheduledTask(3000, 3008, 0), new ScheduledTask(3800, 3808, 0), new ScheduledTask(4600, 4608, 0), new ScheduledTask(0, 8, 3), new ScheduledTask(5400, 5407, 0), new ScheduledTask(4800, 4807, 3), new ScheduledTask(6100, 6106, 0), new ScheduledTask(5400, 5406, 2), new ScheduledTask(6000, 6005, 1), new ScheduledTask(6700, 6704, 0), new ScheduledTask(7100, 7104, 0), new ScheduledTask(7500, 7504, 0), new ScheduledTask(7900, 7904, 0), new ScheduledTask(8300, 8304, 0), new ScheduledTask(8700, 8703, 0), new ScheduledTask(9000, 9002, 0)};
        int[] expectedProcessorEndTimes = new int[]{9002, 6005, 5406, 4807};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random7_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#7_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(1000, 1010, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 9, 3), new ScheduledTask(2000, 2008, 0), new ScheduledTask(1800, 1808, 3), new ScheduledTask(2800, 2808, 0), new ScheduledTask(2000, 2008, 1), new ScheduledTask(2000, 2007, 2), new ScheduledTask(3600, 3607, 0), new ScheduledTask(3400, 3406, 2), new ScheduledTask(3400, 3406, 3), new ScheduledTask(3600, 3605, 1), new ScheduledTask(4300, 4304, 0), new ScheduledTask(4700, 4704, 0), new ScheduledTask(4600, 4604, 1), new ScheduledTask(4600, 4604, 2), new ScheduledTask(4600, 4604, 3), new ScheduledTask(5100, 5103, 0), new ScheduledTask(5400, 5402, 0)};
        int[] expectedProcessorEndTimes = new int[]{5402, 4604, 4604, 4604};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random7_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#7_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 10, 3), new ScheduledTask(1200, 1209, 1), new ScheduledTask(2280, 2288, 1), new ScheduledTask(1500, 1508, 2), new ScheduledTask(2700, 2708, 2), new ScheduledTask(2000, 2008, 3), new ScheduledTask(1000, 1007, 0), new ScheduledTask(3240, 3247, 1), new ScheduledTask(1700, 1706, 0), new ScheduledTask(2300, 2306, 0), new ScheduledTask(3600, 3605, 3), new ScheduledTask(2900, 2904, 0), new ScheduledTask(3300, 3304, 0), new ScheduledTask(3700, 3704, 0), new ScheduledTask(4080, 4084, 1), new ScheduledTask(3900, 3904, 2), new ScheduledTask(4100, 4103, 0), new ScheduledTask(4400, 4402, 0)};
        int[] expectedProcessorEndTimes = new int[]{4402, 4084, 3904, 3605};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(10, 20, 0), new ScheduledTask(10, 20, 1), new ScheduledTask(20, 29, 0), new ScheduledTask(20, 28, 1), new ScheduledTask(28, 36, 1), new ScheduledTask(29, 37, 0), new ScheduledTask(36, 44, 1), new ScheduledTask(37, 44, 0), new ScheduledTask(44, 51, 0), new ScheduledTask(44, 50, 1), new ScheduledTask(50, 56, 1), new ScheduledTask(51, 56, 0), new ScheduledTask(56, 60, 0), new ScheduledTask(56, 60, 1), new ScheduledTask(60, 64, 0), new ScheduledTask(60, 64, 1), new ScheduledTask(64, 68, 0), new ScheduledTask(64, 67, 1), new ScheduledTask(67, 69, 1)};
        int[] expectedProcessorEndTimes = new int[]{68, 69};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 10, 3), new ScheduledTask(10, 19, 0), new ScheduledTask(10, 18, 1), new ScheduledTask(10, 18, 2), new ScheduledTask(10, 18, 3), new ScheduledTask(18, 26, 1), new ScheduledTask(18, 25, 2), new ScheduledTask(18, 25, 3), new ScheduledTask(19, 25, 0), new ScheduledTask(25, 31, 0), new ScheduledTask(25, 30, 2), new ScheduledTask(25, 29, 3), new ScheduledTask(26, 30, 1), new ScheduledTask(29, 33, 3), new ScheduledTask(30, 34, 1), new ScheduledTask(30, 34, 2), new ScheduledTask(31, 34, 0), new ScheduledTask(33, 35, 3)};
        int[] expectedProcessorEndTimes = new int[]{34, 34, 34, 35};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 23;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 10, 3), new ScheduledTask(0, 9, 4), new ScheduledTask(10, 18, 3), new ScheduledTask(9, 17, 4), new ScheduledTask(0, 8, 5), new ScheduledTask(8, 16, 5), new ScheduledTask(10, 17, 2), new ScheduledTask(16, 23, 5), new ScheduledTask(17, 23, 2), new ScheduledTask(17, 23, 4), new ScheduledTask(18, 23, 3), new ScheduledTask(10, 14, 0), new ScheduledTask(14, 18, 0), new ScheduledTask(10, 14, 1), new ScheduledTask(14, 18, 1), new ScheduledTask(18, 22, 1), new ScheduledTask(18, 21, 0), new ScheduledTask(21, 23, 0)};
        int[] expectedProcessorEndTimes = new int[]{23, 22, 23, 23, 23, 23};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random8_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#8_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(1000, 1010, 0), new ScheduledTask(2000, 2010, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 9, 2), new ScheduledTask(0, 9, 3), new ScheduledTask(3000, 3008, 0), new ScheduledTask(3800, 3807, 0), new ScheduledTask(4500, 4507, 0), new ScheduledTask(5200, 5207, 0), new ScheduledTask(5900, 5907, 0), new ScheduledTask(6600, 6607, 0), new ScheduledTask(5400, 5406, 2), new ScheduledTask(5400, 5406, 3), new ScheduledTask(6000, 6005, 1), new ScheduledTask(7300, 7304, 0), new ScheduledTask(7700, 7704, 0), new ScheduledTask(8100, 8103, 0), new ScheduledTask(8400, 8403, 0), new ScheduledTask(8700, 8703, 0), new ScheduledTask(9000, 9002, 0)};
        int[] expectedProcessorEndTimes = new int[]{9002, 6005, 5406, 5406};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random8_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#8_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(1000, 1010, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 9, 3), new ScheduledTask(2000, 2009, 0), new ScheduledTask(1800, 1808, 3), new ScheduledTask(2000, 2007, 1), new ScheduledTask(2000, 2007, 2), new ScheduledTask(2900, 2907, 0), new ScheduledTask(3600, 3607, 0), new ScheduledTask(3400, 3407, 1), new ScheduledTask(3400, 3406, 2), new ScheduledTask(3400, 3406, 3), new ScheduledTask(4300, 4305, 0), new ScheduledTask(4800, 4804, 0), new ScheduledTask(4600, 4604, 2), new ScheduledTask(4600, 4603, 3), new ScheduledTask(4800, 4803, 1), new ScheduledTask(5200, 5203, 0), new ScheduledTask(5200, 5202, 3)};
        int[] expectedProcessorEndTimes = new int[]{5203, 4803, 4604, 5202};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random8_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#8_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 10, 3), new ScheduledTask(1000, 1009, 0), new ScheduledTask(1500, 1509, 2), new ScheduledTask(2000, 2008, 3), new ScheduledTask(1200, 1207, 1), new ScheduledTask(2040, 2047, 1), new ScheduledTask(2880, 2887, 1), new ScheduledTask(3720, 3727, 1), new ScheduledTask(2850, 2857, 2), new ScheduledTask(1900, 1906, 0), new ScheduledTask(2500, 2506, 0), new ScheduledTask(3600, 3605, 3), new ScheduledTask(3100, 3104, 0), new ScheduledTask(3900, 3904, 2), new ScheduledTask(3500, 3503, 0), new ScheduledTask(3800, 3803, 0), new ScheduledTask(4100, 4103, 0), new ScheduledTask(4400, 4402, 0)};
        int[] expectedProcessorEndTimes = new int[]{4402, 3727, 3904, 3605};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(10, 20, 0), new ScheduledTask(10, 20, 1), new ScheduledTask(20, 29, 0), new ScheduledTask(20, 29, 1), new ScheduledTask(29, 37, 0), new ScheduledTask(29, 36, 1), new ScheduledTask(36, 43, 1), new ScheduledTask(37, 44, 0), new ScheduledTask(43, 50, 1), new ScheduledTask(44, 51, 0), new ScheduledTask(50, 56, 1), new ScheduledTask(51, 57, 0), new ScheduledTask(56, 61, 1), new ScheduledTask(57, 61, 0), new ScheduledTask(61, 65, 0), new ScheduledTask(61, 64, 1), new ScheduledTask(64, 67, 1), new ScheduledTask(65, 68, 0), new ScheduledTask(67, 69, 1)};
        int[] expectedProcessorEndTimes = new int[]{68, 69};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 10, 3), new ScheduledTask(10, 19, 0), new ScheduledTask(10, 19, 1), new ScheduledTask(10, 18, 2), new ScheduledTask(10, 17, 3), new ScheduledTask(17, 24, 3), new ScheduledTask(18, 25, 2), new ScheduledTask(19, 26, 0), new ScheduledTask(19, 26, 1), new ScheduledTask(24, 30, 3), new ScheduledTask(25, 31, 2), new ScheduledTask(26, 31, 0), new ScheduledTask(26, 30, 1), new ScheduledTask(30, 34, 1), new ScheduledTask(30, 33, 3), new ScheduledTask(31, 34, 0), new ScheduledTask(31, 34, 2), new ScheduledTask(33, 35, 3)};
        int[] expectedProcessorEndTimes = new int[]{34, 34, 34, 35};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 23;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 10, 3), new ScheduledTask(10, 19, 3), new ScheduledTask(0, 9, 4), new ScheduledTask(0, 8, 5), new ScheduledTask(10, 17, 2), new ScheduledTask(9, 16, 4), new ScheduledTask(16, 23, 4), new ScheduledTask(8, 15, 5), new ScheduledTask(15, 22, 5), new ScheduledTask(10, 16, 1), new ScheduledTask(17, 23, 2), new ScheduledTask(16, 21, 1), new ScheduledTask(10, 14, 0), new ScheduledTask(19, 23, 3), new ScheduledTask(14, 17, 0), new ScheduledTask(17, 20, 0), new ScheduledTask(20, 23, 0), new ScheduledTask(21, 23, 1)};
        int[] expectedProcessorEndTimes = new int[]{23, 23, 23, 23, 23, 22};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random9_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#9_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(1000, 1010, 0), new ScheduledTask(2000, 2010, 0), new ScheduledTask(3000, 3010, 0), new ScheduledTask(4000, 4010, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(0, 8, 2), new ScheduledTask(0, 7, 3), new ScheduledTask(5000, 5007, 0), new ScheduledTask(5700, 5706, 0), new ScheduledTask(6300, 6306, 0), new ScheduledTask(4200, 4205, 3), new ScheduledTask(6900, 6905, 0), new ScheduledTask(4800, 4804, 1), new ScheduledTask(4800, 4804, 2), new ScheduledTask(7400, 7404, 0), new ScheduledTask(7800, 7803, 0), new ScheduledTask(8100, 8103, 0), new ScheduledTask(7200, 7202, 1), new ScheduledTask(7200, 7202, 2), new ScheduledTask(7200, 7202, 3)};
        int[] expectedProcessorEndTimes = new int[]{8103, 7202, 7202, 7202};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random9_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#9_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(2000, 2010, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 10, 3), new ScheduledTask(2000, 2008, 2), new ScheduledTask(2000, 2008, 3), new ScheduledTask(3600, 3607, 2), new ScheduledTask(3600, 3607, 3), new ScheduledTask(1000, 1006, 0), new ScheduledTask(1600, 1606, 0), new ScheduledTask(2200, 2205, 0), new ScheduledTask(4000, 4005, 1), new ScheduledTask(2700, 2704, 0), new ScheduledTask(3100, 3104, 0), new ScheduledTask(3500, 3504, 0), new ScheduledTask(3900, 3903, 0), new ScheduledTask(4200, 4203, 0), new ScheduledTask(4500, 4502, 0), new ScheduledTask(4700, 4702, 0), new ScheduledTask(4900, 4902, 0)};
        int[] expectedProcessorEndTimes = new int[]{4902, 4005, 3607, 3607};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random9_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#9_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(1000, 1010, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 10, 3), new ScheduledTask(1200, 1208, 1), new ScheduledTask(2000, 2008, 3), new ScheduledTask(1500, 1507, 2), new ScheduledTask(2550, 2557, 2), new ScheduledTask(2160, 2166, 1), new ScheduledTask(2880, 2886, 1), new ScheduledTask(2000, 2005, 0), new ScheduledTask(3600, 3605, 1), new ScheduledTask(2500, 2504, 0), new ScheduledTask(2900, 2904, 0), new ScheduledTask(3600, 3604, 2), new ScheduledTask(3300, 3303, 0), new ScheduledTask(3600, 3603, 3), new ScheduledTask(3600, 3602, 0), new ScheduledTask(3800, 3802, 0), new ScheduledTask(4000, 4002, 0)};
        int[] expectedProcessorEndTimes = new int[]{4002, 3605, 3604, 3603};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 20, 0), new ScheduledTask(20, 30, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(10, 20, 1), new ScheduledTask(20, 28, 1), new ScheduledTask(28, 36, 1), new ScheduledTask(36, 43, 1), new ScheduledTask(43, 50, 1), new ScheduledTask(30, 36, 0), new ScheduledTask(50, 56, 1), new ScheduledTask(36, 41, 0), new ScheduledTask(56, 61, 1), new ScheduledTask(41, 45, 0), new ScheduledTask(45, 49, 0), new ScheduledTask(49, 53, 0), new ScheduledTask(53, 56, 0), new ScheduledTask(56, 59, 0), new ScheduledTask(59, 61, 0), new ScheduledTask(61, 63, 0), new ScheduledTask(61, 63, 1)};
        int[] expectedProcessorEndTimes = new int[]{63, 63};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 10, 3), new ScheduledTask(10, 20, 3), new ScheduledTask(10, 18, 0), new ScheduledTask(10, 18, 1), new ScheduledTask(18, 25, 0), new ScheduledTask(25, 32, 0), new ScheduledTask(18, 24, 1), new ScheduledTask(20, 26, 3), new ScheduledTask(10, 15, 2), new ScheduledTask(26, 31, 3), new ScheduledTask(15, 19, 2), new ScheduledTask(19, 23, 2), new ScheduledTask(23, 27, 2), new ScheduledTask(24, 27, 1), new ScheduledTask(27, 30, 2), new ScheduledTask(27, 29, 1), new ScheduledTask(29, 31, 1), new ScheduledTask(30, 32, 2)};
        int[] expectedProcessorEndTimes = new int[]{32, 31, 32, 31};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 21;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 10, 3), new ScheduledTask(0, 10, 4), new ScheduledTask(0, 8, 5), new ScheduledTask(8, 16, 5), new ScheduledTask(10, 17, 0), new ScheduledTask(10, 17, 2), new ScheduledTask(10, 16, 3), new ScheduledTask(10, 16, 4), new ScheduledTask(16, 21, 4), new ScheduledTask(16, 21, 5), new ScheduledTask(10, 14, 1), new ScheduledTask(14, 18, 1), new ScheduledTask(17, 21, 2), new ScheduledTask(18, 21, 1), new ScheduledTask(16, 19, 3), new ScheduledTask(17, 19, 0), new ScheduledTask(19, 21, 0), new ScheduledTask(19, 21, 3)};
        int[] expectedProcessorEndTimes = new int[]{21, 21, 21, 21, 21, 21};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 16;
        int expectedScheduleEndTime = 10;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 9, 2), new ScheduledTask(0, 9, 3), new ScheduledTask(0, 9, 4), new ScheduledTask(0, 9, 5), new ScheduledTask(0, 8, 6), new ScheduledTask(0, 8, 7), new ScheduledTask(0, 8, 8), new ScheduledTask(0, 7, 9), new ScheduledTask(0, 7, 10), new ScheduledTask(0, 6, 11), new ScheduledTask(0, 6, 12), new ScheduledTask(0, 4, 13), new ScheduledTask(0, 4, 14), new ScheduledTask(0, 4, 15), new ScheduledTask(4, 7, 13), new ScheduledTask(4, 7, 14), new ScheduledTask(4, 7, 15), new ScheduledTask(6, 9, 11), new ScheduledTask(6, 8, 12)};
        int[] expectedProcessorEndTimes = new int[]{10, 10, 9, 9, 9, 9, 8, 8, 8, 7, 7, 9, 8, 7, 7, 7};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(10, 19, 0), new ScheduledTask(10, 19, 1), new ScheduledTask(19, 28, 0), new ScheduledTask(19, 28, 1), new ScheduledTask(28, 36, 0), new ScheduledTask(28, 36, 1), new ScheduledTask(36, 44, 0), new ScheduledTask(36, 43, 1), new ScheduledTask(43, 50, 1), new ScheduledTask(44, 50, 0), new ScheduledTask(50, 56, 0), new ScheduledTask(50, 54, 1), new ScheduledTask(54, 58, 1), new ScheduledTask(56, 60, 0), new ScheduledTask(58, 61, 1), new ScheduledTask(60, 63, 0), new ScheduledTask(61, 64, 1), new ScheduledTask(63, 66, 0), new ScheduledTask(64, 66, 1)};
        int[] expectedProcessorEndTimes = new int[]{66, 66};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 33;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 9, 2), new ScheduledTask(9, 18, 2), new ScheduledTask(0, 9, 3), new ScheduledTask(9, 18, 3), new ScheduledTask(10, 18, 0), new ScheduledTask(10, 18, 1), new ScheduledTask(18, 26, 3), new ScheduledTask(18, 25, 2), new ScheduledTask(26, 33, 3), new ScheduledTask(18, 24, 1), new ScheduledTask(25, 31, 2), new ScheduledTask(18, 22, 0), new ScheduledTask(22, 26, 0), new ScheduledTask(26, 30, 0), new ScheduledTask(30, 33, 0), new ScheduledTask(24, 27, 1), new ScheduledTask(27, 30, 1), new ScheduledTask(30, 33, 1), new ScheduledTask(31, 33, 2)};
        int[] expectedProcessorEndTimes = new int[]{33, 33, 33, 33};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 17;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 9, 2), new ScheduledTask(0, 9, 3), new ScheduledTask(0, 9, 4), new ScheduledTask(0, 9, 5), new ScheduledTask(0, 8, 6), new ScheduledTask(0, 8, 7), new ScheduledTask(8, 16, 7), new ScheduledTask(9, 16, 2), new ScheduledTask(9, 16, 3), new ScheduledTask(9, 15, 5), new ScheduledTask(8, 14, 6), new ScheduledTask(10, 14, 1), new ScheduledTask(9, 13, 4), new ScheduledTask(13, 17, 4), new ScheduledTask(10, 13, 0), new ScheduledTask(13, 16, 0), new ScheduledTask(14, 17, 1), new ScheduledTask(14, 17, 6), new ScheduledTask(15, 17, 5)};
        int[] expectedProcessorEndTimes = new int[]{16, 17, 16, 16, 17, 17, 17, 16};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(1000, 1010, 0), new ScheduledTask(2000, 2009, 0), new ScheduledTask(2900, 2909, 0), new ScheduledTask(3800, 3809, 0), new ScheduledTask(4700, 4707, 0), new ScheduledTask(5400, 5407, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(6100, 6106, 0), new ScheduledTask(0, 6, 2), new ScheduledTask(0, 6, 3), new ScheduledTask(6700, 6705, 0), new ScheduledTask(7200, 7205, 0), new ScheduledTask(7700, 7705, 0), new ScheduledTask(8200, 8205, 0), new ScheduledTask(4200, 4205, 1), new ScheduledTask(3600, 3605, 2), new ScheduledTask(3600, 3605, 3), new ScheduledTask(6600, 6603, 2), new ScheduledTask(6600, 6603, 3), new ScheduledTask(7200, 7202, 1)};
        int[] expectedProcessorEndTimes = new int[]{8205, 7202, 6603, 6603};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(1000, 1010, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(0, 9, 2), new ScheduledTask(0, 9, 3), new ScheduledTask(2000, 2007, 0), new ScheduledTask(1800, 1807, 1), new ScheduledTask(1800, 1807, 2), new ScheduledTask(1800, 1806, 3), new ScheduledTask(2700, 2706, 0), new ScheduledTask(3300, 3306, 0), new ScheduledTask(3000, 3005, 3), new ScheduledTask(3200, 3205, 1), new ScheduledTask(3200, 3205, 2), new ScheduledTask(3900, 3905, 0), new ScheduledTask(4400, 4405, 0), new ScheduledTask(4000, 4005, 3), new ScheduledTask(4200, 4205, 1), new ScheduledTask(4200, 4203, 2), new ScheduledTask(4900, 4903, 0), new ScheduledTask(4800, 4802, 2)};
        int[] expectedProcessorEndTimes = new int[]{4903, 4205, 4802, 4005};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4350;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(1000, 1009, 0), new ScheduledTask(0, 9, 3), new ScheduledTask(1800, 1809, 3), new ScheduledTask(0, 7, 2), new ScheduledTask(1050, 1057, 2), new ScheduledTask(2100, 2107, 2), new ScheduledTask(1900, 1906, 0), new ScheduledTask(1200, 1206, 1), new ScheduledTask(3150, 3156, 2), new ScheduledTask(2500, 2505, 0), new ScheduledTask(3000, 3005, 0), new ScheduledTask(3500, 3505, 0), new ScheduledTask(1920, 1925, 1), new ScheduledTask(2520, 2525, 1), new ScheduledTask(3120, 3125, 1), new ScheduledTask(3720, 3725, 1), new ScheduledTask(4000, 4003, 0), new ScheduledTask(3600, 3603, 3), new ScheduledTask(4050, 4052, 2)};
        int[] expectedProcessorEndTimes = new int[]{4003, 3725, 4052, 3603};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(10, 19, 0), new ScheduledTask(10, 19, 1), new ScheduledTask(19, 28, 0), new ScheduledTask(19, 26, 1), new ScheduledTask(26, 33, 1), new ScheduledTask(28, 35, 0), new ScheduledTask(33, 39, 1), new ScheduledTask(35, 41, 0), new ScheduledTask(39, 45, 1), new ScheduledTask(41, 46, 0), new ScheduledTask(45, 50, 1), new ScheduledTask(46, 51, 0), new ScheduledTask(50, 55, 1), new ScheduledTask(51, 56, 0), new ScheduledTask(55, 60, 1), new ScheduledTask(56, 61, 0), new ScheduledTask(60, 63, 1), new ScheduledTask(61, 64, 0), new ScheduledTask(63, 65, 1)};
        int[] expectedProcessorEndTimes = new int[]{64, 65};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 33;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 9, 2), new ScheduledTask(0, 9, 3), new ScheduledTask(9, 18, 2), new ScheduledTask(9, 16, 3), new ScheduledTask(10, 17, 0), new ScheduledTask(10, 17, 1), new ScheduledTask(16, 22, 3), new ScheduledTask(17, 23, 0), new ScheduledTask(17, 23, 1), new ScheduledTask(18, 23, 2), new ScheduledTask(22, 27, 3), new ScheduledTask(23, 28, 0), new ScheduledTask(23, 28, 1), new ScheduledTask(23, 28, 2), new ScheduledTask(27, 32, 3), new ScheduledTask(28, 33, 0), new ScheduledTask(28, 31, 1), new ScheduledTask(28, 31, 2), new ScheduledTask(31, 33, 1)};
        int[] expectedProcessorEndTimes = new int[]{33, 33, 31, 32};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_21_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Independent_Nodes_21_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 22;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 9, 2), new ScheduledTask(0, 9, 3), new ScheduledTask(0, 9, 4), new ScheduledTask(9, 16, 2), new ScheduledTask(9, 16, 4), new ScheduledTask(0, 7, 5), new ScheduledTask(16, 22, 4), new ScheduledTask(7, 13, 5), new ScheduledTask(13, 19, 5), new ScheduledTask(10, 15, 0), new ScheduledTask(15, 20, 0), new ScheduledTask(10, 15, 1), new ScheduledTask(15, 20, 1), new ScheduledTask(16, 21, 2), new ScheduledTask(9, 14, 3), new ScheduledTask(14, 19, 3), new ScheduledTask(19, 22, 3), new ScheduledTask(19, 22, 5), new ScheduledTask(20, 22, 1)};
        int[] expectedProcessorEndTimes = new int[]{20, 22, 21, 22, 22, 22};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 61400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(56300, 56351, 0), new ScheduledTask(53100, 53132, 0), new ScheduledTask(43800, 43819, 2), new ScheduledTask(22800, 22851, 1), new ScheduledTask(49900, 49932, 0), new ScheduledTask(32400, 32419, 2), new ScheduledTask(41400, 41419, 3), new ScheduledTask(0, 38, 1), new ScheduledTask(15000, 15044, 3), new ScheduledTask(0, 63, 0), new ScheduledTask(6300, 6363, 0), new ScheduledTask(12600, 12657, 0), new ScheduledTask(18300, 18338, 0), new ScheduledTask(46700, 46732, 0), new ScheduledTask(36600, 36657, 0), new ScheduledTask(42300, 42344, 0), new ScheduledTask(0, 51, 2), new ScheduledTask(27800, 27844, 0), new ScheduledTask(0, 25, 3), new ScheduledTask(32200, 32244, 0), new ScheduledTask(22100, 22157, 0)};
        int[] expectedProcessorEndTimes = new int[]{56351, 22851, 43819, 41419};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 39100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(34000, 34051, 0), new ScheduledTask(26600, 26632, 1), new ScheduledTask(32100, 32119, 0), new ScheduledTask(22800, 22851, 2), new ScheduledTask(20200, 20232, 1), new ScheduledTask(20400, 20419, 3), new ScheduledTask(16600, 16619, 3), new ScheduledTask(24200, 24238, 3), new ScheduledTask(27700, 27744, 0), new ScheduledTask(21400, 21463, 0), new ScheduledTask(0, 63, 0), new ScheduledTask(11400, 11457, 2), new ScheduledTask(17600, 17638, 0), new ScheduledTask(10200, 10232, 3), new ScheduledTask(0, 57, 2), new ScheduledTask(11400, 11444, 1), new ScheduledTask(0, 51, 3), new ScheduledTask(6300, 6344, 0), new ScheduledTask(15100, 15125, 0), new ScheduledTask(10700, 10744, 0), new ScheduledTask(0, 57, 1)};
        int[] expectedProcessorEndTimes = new int[]{34051, 26632, 22851, 24238};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 33580;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(28480, 28531, 0), new ScheduledTask(24240, 24272, 1), new ScheduledTask(26500, 26519, 0), new ScheduledTask(19950, 20001, 2), new ScheduledTask(12200, 12232, 3), new ScheduledTask(21960, 21979, 1), new ScheduledTask(7600, 7619, 3), new ScheduledTask(18600, 18638, 3), new ScheduledTask(22100, 22144, 0), new ScheduledTask(15800, 15863, 0), new ScheduledTask(5280, 5343, 1), new ScheduledTask(11400, 11457, 2), new ScheduledTask(0, 38, 3), new ScheduledTask(6600, 6632, 2), new ScheduledTask(5700, 5757, 0), new ScheduledTask(0, 44, 2), new ScheduledTask(12840, 12891, 1), new ScheduledTask(11400, 11444, 0), new ScheduledTask(18960, 18985, 1), new ScheduledTask(0, 44, 1), new ScheduledTask(0, 57, 0)};
        int[] expectedProcessorEndTimes = new int[]{28531, 24272, 20001, 18638};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 468;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(417, 468, 0), new ScheduledTask(380, 412, 1), new ScheduledTask(222, 241, 1), new ScheduledTask(366, 417, 0), new ScheduledTask(89, 121, 1), new ScheduledTask(361, 380, 1), new ScheduledTask(145, 164, 0), new ScheduledTask(184, 222, 1), new ScheduledTask(164, 208, 0), new ScheduledTask(121, 184, 1), new ScheduledTask(241, 304, 1), new ScheduledTask(304, 361, 1), new ScheduledTask(328, 366, 0), new ScheduledTask(57, 89, 1), new ScheduledTask(0, 57, 1), new ScheduledTask(0, 44, 0), new ScheduledTask(208, 259, 0), new ScheduledTask(259, 303, 0), new ScheduledTask(303, 328, 0), new ScheduledTask(101, 145, 0), new ScheduledTask(44, 101, 0)};
        int[] expectedProcessorEndTimes = new int[]{468, 412};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 267;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(216, 267, 0), new ScheduledTask(177, 209, 1), new ScheduledTask(197, 216, 0), new ScheduledTask(158, 209, 2), new ScheduledTask(108, 140, 0), new ScheduledTask(113, 132, 3), new ScheduledTask(140, 159, 0), new ScheduledTask(159, 197, 0), new ScheduledTask(133, 177, 1), new ScheduledTask(132, 195, 3), new ScheduledTask(95, 158, 2), new ScheduledTask(0, 57, 2), new ScheduledTask(57, 95, 2), new ScheduledTask(44, 76, 1), new ScheduledTask(0, 57, 0), new ScheduledTask(0, 44, 3), new ScheduledTask(57, 108, 0), new ScheduledTask(44, 88, 3), new ScheduledTask(88, 113, 3), new ScheduledTask(0, 44, 1), new ScheduledTask(76, 133, 1)};
        int[] expectedProcessorEndTimes = new int[]{267, 209, 209, 195};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 207;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(156, 207, 0), new ScheduledTask(120, 152, 1), new ScheduledTask(135, 154, 0), new ScheduledTask(98, 149, 2), new ScheduledTask(57, 89, 0), new ScheduledTask(101, 120, 1), new ScheduledTask(95, 114, 3), new ScheduledTask(95, 133, 5), new ScheduledTask(89, 133, 0), new ScheduledTask(69, 132, 4), new ScheduledTask(32, 95, 5), new ScheduledTask(0, 57, 3), new ScheduledTask(57, 95, 3), new ScheduledTask(0, 32, 5), new ScheduledTask(0, 57, 0), new ScheduledTask(0, 44, 4), new ScheduledTask(44, 95, 2), new ScheduledTask(57, 101, 1), new ScheduledTask(44, 69, 4), new ScheduledTask(0, 44, 2), new ScheduledTask(0, 57, 1)};
        int[] expectedProcessorEndTimes = new int[]{207, 152, 149, 114, 132, 133};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random2_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#2_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 88300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(79100, 79192, 0), new ScheduledTask(76800, 76823, 0), new ScheduledTask(59900, 59992, 0), new ScheduledTask(37100, 37169, 2), new ScheduledTask(73700, 73723, 0), new ScheduledTask(13800, 13904, 1), new ScheduledTask(55200, 55235, 3), new ScheduledTask(9200, 9292, 0), new ScheduledTask(21000, 21023, 2), new ScheduledTask(0, 92, 3), new ScheduledTask(18400, 18469, 0), new ScheduledTask(29900, 29969, 0), new ScheduledTask(25300, 25346, 0), new ScheduledTask(36800, 36881, 0), new ScheduledTask(69100, 69146, 0), new ScheduledTask(51800, 51881, 0), new ScheduledTask(0, 23, 1), new ScheduledTask(0, 69, 0), new ScheduledTask(6900, 6923, 0), new ScheduledTask(0, 35, 2), new ScheduledTask(44900, 44969, 0)};
        int[] expectedProcessorEndTimes = new int[]{79192, 13904, 37169, 55235};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random2_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#2_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 57600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(48400, 48492, 0), new ScheduledTask(46100, 46123, 0), new ScheduledTask(27800, 27892, 1), new ScheduledTask(33100, 33169, 2), new ScheduledTask(32200, 32223, 3), new ScheduledTask(35700, 35804, 0), new ScheduledTask(36800, 36835, 3), new ScheduledTask(0, 92, 2), new ScheduledTask(23200, 23223, 1), new ScheduledTask(0, 92, 3), new ScheduledTask(18400, 18469, 3), new ScheduledTask(18400, 18469, 2), new ScheduledTask(21900, 21946, 0), new ScheduledTask(0, 81, 1), new ScheduledTask(26500, 26546, 0), new ScheduledTask(0, 81, 0), new ScheduledTask(31100, 31123, 0), new ScheduledTask(8100, 8169, 0), new ScheduledTask(33400, 33423, 0), new ScheduledTask(16200, 16235, 1), new ScheduledTask(15000, 15069, 0)};
        int[] expectedProcessorEndTimes = new int[]{48492, 27892, 33169, 36835};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random2_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#2_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 49250;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(40050, 40142, 0), new ScheduledTask(37200, 37223, 0), new ScheduledTask(27600, 27692, 1), new ScheduledTask(29400, 29469, 2), new ScheduledTask(34600, 34623, 0), new ScheduledTask(13800, 13904, 2), new ScheduledTask(30000, 30035, 3), new ScheduledTask(0, 92, 2), new ScheduledTask(18400, 18423, 3), new ScheduledTask(0, 92, 3), new ScheduledTask(11040, 11109, 1), new ScheduledTask(19320, 19389, 1), new ScheduledTask(17300, 17346, 0), new ScheduledTask(0, 81, 0), new ScheduledTask(30000, 30046, 0), new ScheduledTask(21900, 21981, 0), new ScheduledTask(8280, 8303, 1), new ScheduledTask(0, 69, 1), new ScheduledTask(8100, 8123, 0), new ScheduledTask(23000, 23035, 3), new ScheduledTask(10400, 10469, 0)};
        int[] expectedProcessorEndTimes = new int[]{40142, 27692, 29469, 30035};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 679;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(587, 679, 0), new ScheduledTask(334, 357, 0), new ScheduledTask(495, 587, 0), new ScheduledTask(508, 577, 1), new ScheduledTask(162, 185, 1), new ScheduledTask(230, 334, 0), new ScheduledTask(220, 255, 1), new ScheduledTask(255, 347, 1), new ScheduledTask(472, 495, 0), new ScheduledTask(347, 439, 1), new ScheduledTask(439, 508, 1), new ScheduledTask(357, 426, 0), new ScheduledTask(426, 472, 0), new ScheduledTask(0, 81, 1), new ScheduledTask(69, 115, 0), new ScheduledTask(81, 162, 1), new ScheduledTask(184, 207, 0), new ScheduledTask(0, 69, 0), new ScheduledTask(207, 230, 0), new ScheduledTask(185, 220, 1), new ScheduledTask(115, 184, 0)};
        int[] expectedProcessorEndTimes = new int[]{679, 577};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 394;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(302, 394, 0), new ScheduledTask(279, 302, 0), new ScheduledTask(196, 288, 1), new ScheduledTask(230, 299, 2), new ScheduledTask(219, 242, 3), new ScheduledTask(173, 277, 0), new ScheduledTask(242, 277, 3), new ScheduledTask(0, 92, 2), new ScheduledTask(104, 127, 0), new ScheduledTask(0, 92, 3), new ScheduledTask(92, 161, 2), new ScheduledTask(161, 230, 2), new ScheduledTask(173, 219, 3), new ScheduledTask(92, 173, 3), new ScheduledTask(150, 196, 1), new ScheduledTask(0, 81, 1), new ScheduledTask(127, 150, 0), new ScheduledTask(81, 150, 1), new ScheduledTask(150, 173, 0), new ScheduledTask(69, 104, 0), new ScheduledTask(0, 69, 0)};
        int[] expectedProcessorEndTimes = new int[]{394, 288, 299, 277};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 311;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(219, 311, 0), new ScheduledTask(196, 219, 0), new ScheduledTask(115, 207, 1), new ScheduledTask(138, 207, 3), new ScheduledTask(173, 196, 0), new ScheduledTask(81, 185, 2), new ScheduledTask(150, 185, 4), new ScheduledTask(0, 92, 0), new ScheduledTask(35, 58, 2), new ScheduledTask(23, 115, 1), new ScheduledTask(0, 69, 5), new ScheduledTask(0, 69, 4), new ScheduledTask(69, 115, 5), new ScheduledTask(69, 150, 4), new ScheduledTask(115, 161, 5), new ScheduledTask(92, 173, 0), new ScheduledTask(58, 81, 2), new ScheduledTask(0, 69, 3), new ScheduledTask(0, 23, 1), new ScheduledTask(0, 35, 2), new ScheduledTask(69, 138, 3)};
        int[] expectedProcessorEndTimes = new int[]{311, 207, 185, 207, 185, 161};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random3_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#3_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 85500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(80400, 80451, 0), new ScheduledTask(62000, 62026, 1), new ScheduledTask(78700, 78717, 0), new ScheduledTask(66700, 66786, 0), new ScheduledTask(26000, 26060, 1), new ScheduledTask(42700, 42786, 0), new ScheduledTask(33300, 33377, 0), new ScheduledTask(40800, 40860, 3), new ScheduledTask(36000, 36068, 2), new ScheduledTask(75300, 75334, 0), new ScheduledTask(0, 68, 3), new ScheduledTask(59900, 59968, 0), new ScheduledTask(51300, 51386, 0), new ScheduledTask(15400, 15451, 0), new ScheduledTask(8600, 8668, 0), new ScheduledTask(20500, 20551, 0), new ScheduledTask(0, 60, 2), new ScheduledTask(0, 86, 0), new ScheduledTask(41000, 41017, 0), new ScheduledTask(0, 43, 1), new ScheduledTask(25600, 25677, 0)};
        int[] expectedProcessorEndTimes = new int[]{80451, 62026, 36068, 40860};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random3_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#3_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 53700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(48600, 48651, 0), new ScheduledTask(42600, 42626, 1), new ScheduledTask(46900, 46917, 0), new ScheduledTask(29200, 29286, 3), new ScheduledTask(30700, 30760, 0), new ScheduledTask(17200, 17286, 2), new ScheduledTask(27200, 27277, 1), new ScheduledTask(34400, 34460, 2), new ScheduledTask(36700, 36768, 0), new ScheduledTask(43500, 43534, 0), new ScheduledTask(0, 68, 1), new ScheduledTask(13600, 13668, 1), new ScheduledTask(12000, 12086, 3), new ScheduledTask(16200, 16251, 0), new ScheduledTask(7700, 7768, 0), new ScheduledTask(25600, 25651, 0), new ScheduledTask(0, 60, 3), new ScheduledTask(0, 86, 2), new ScheduledTask(14500, 14517, 0), new ScheduledTask(21300, 21343, 0), new ScheduledTask(0, 77, 0)};
        int[] expectedProcessorEndTimes = new int[]{48651, 42626, 34460, 29286};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random3_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#3_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 45740;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(40640, 40691, 0), new ScheduledTask(36000, 36026, 2), new ScheduledTask(37800, 37817, 1), new ScheduledTask(31800, 31886, 0), new ScheduledTask(27000, 27060, 2), new ScheduledTask(14600, 14686, 0), new ScheduledTask(15450, 15527, 2), new ScheduledTask(0, 60, 2), new ScheduledTask(29640, 29708, 1), new ScheduledTask(30600, 30634, 3), new ScheduledTask(17000, 17068, 3), new ScheduledTask(21480, 21548, 1), new ScheduledTask(23200, 23286, 0), new ScheduledTask(9240, 9291, 1), new ScheduledTask(3400, 3468, 3), new ScheduledTask(15360, 15411, 1), new ScheduledTask(0, 60, 0), new ScheduledTask(6000, 6086, 0), new ScheduledTask(0, 17, 3), new ScheduledTask(9000, 9043, 2), new ScheduledTask(0, 77, 1)};
        int[] expectedProcessorEndTimes = new int[]{40691, 37817, 36026, 30634};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 649;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(598, 649, 0), new ScheduledTask(565, 591, 1), new ScheduledTask(548, 565, 1), new ScheduledTask(512, 598, 0), new ScheduledTask(350, 410, 0), new ScheduledTask(180, 266, 1), new ScheduledTask(103, 180, 0), new ScheduledTask(488, 548, 1), new ScheduledTask(352, 420, 1), new ScheduledTask(478, 512, 0), new ScheduledTask(420, 488, 1), new ScheduledTask(410, 478, 0), new ScheduledTask(266, 352, 1), new ScheduledTask(248, 299, 0), new ScheduledTask(180, 248, 0), new ScheduledTask(299, 350, 0), new ScheduledTask(0, 60, 0), new ScheduledTask(77, 163, 1), new ScheduledTask(163, 180, 1), new ScheduledTask(60, 103, 0), new ScheduledTask(0, 77, 1)};
        int[] expectedProcessorEndTimes = new int[]{649, 591};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 360;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(309, 360, 0), new ScheduledTask(283, 309, 0), new ScheduledTask(283, 300, 3), new ScheduledTask(213, 299, 1), new ScheduledTask(189, 249, 3), new ScheduledTask(197, 283, 0), new ScheduledTask(204, 281, 2), new ScheduledTask(77, 137, 0), new ScheduledTask(0, 68, 2), new ScheduledTask(249, 283, 3), new ScheduledTask(136, 204, 2), new ScheduledTask(145, 213, 1), new ScheduledTask(0, 86, 3), new ScheduledTask(0, 51, 1), new ScheduledTask(68, 136, 2), new ScheduledTask(51, 102, 1), new ScheduledTask(137, 197, 0), new ScheduledTask(86, 172, 3), new ScheduledTask(172, 189, 3), new ScheduledTask(102, 145, 1), new ScheduledTask(0, 77, 0)};
        int[] expectedProcessorEndTimes = new int[]{360, 299, 281, 300};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 272;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(221, 272, 0), new ScheduledTask(188, 214, 1), new ScheduledTask(196, 213, 3), new ScheduledTask(134, 220, 0), new ScheduledTask(128, 188, 1), new ScheduledTask(87, 173, 2), new ScheduledTask(85, 162, 3), new ScheduledTask(128, 188, 5), new ScheduledTask(119, 187, 4), new ScheduledTask(162, 196, 3), new ScheduledTask(0, 68, 4), new ScheduledTask(60, 128, 5), new ScheduledTask(43, 129, 0), new ScheduledTask(68, 119, 4), new ScheduledTask(0, 68, 3), new ScheduledTask(77, 128, 1), new ScheduledTask(0, 60, 5), new ScheduledTask(0, 86, 2), new ScheduledTask(68, 85, 3), new ScheduledTask(0, 43, 0), new ScheduledTask(0, 77, 1)};
        int[] expectedProcessorEndTimes = new int[]{272, 214, 173, 213, 187, 188};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random4_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#4_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 74700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(70300, 70344, 0), new ScheduledTask(65900, 65944, 0), new ScheduledTask(47400, 47435, 3), new ScheduledTask(37200, 37253, 1), new ScheduledTask(54100, 54118, 2), new ScheduledTask(32700, 32735, 2), new ScheduledTask(57100, 57188, 0), new ScheduledTask(0, 53, 2), new ScheduledTask(26400, 26418, 1), new ScheduledTask(0, 79, 3), new ScheduledTask(0, 88, 0), new ScheduledTask(25500, 25535, 0), new ScheduledTask(8800, 8888, 0), new ScheduledTask(50100, 50135, 0), new ScheduledTask(40400, 40453, 0), new ScheduledTask(32500, 32579, 0), new ScheduledTask(29000, 29035, 0), new ScheduledTask(17600, 17679, 0), new ScheduledTask(0, 44, 1), new ScheduledTask(53600, 53635, 0), new ScheduledTask(45700, 45744, 0)};
        int[] expectedProcessorEndTimes = new int[]{70344, 37253, 54118, 47435};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random4_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#4_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 47400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(43000, 43044, 0), new ScheduledTask(32200, 32244, 1), new ScheduledTask(39500, 39535, 0), new ScheduledTask(31600, 31653, 2), new ScheduledTask(25100, 25118, 3), new ScheduledTask(28100, 28135, 0), new ScheduledTask(7000, 7088, 3), new ScheduledTask(28700, 28753, 3), new ScheduledTask(28200, 28218, 1), new ScheduledTask(31600, 31679, 0), new ScheduledTask(0, 88, 2), new ScheduledTask(24600, 24635, 2), new ScheduledTask(10600, 10688, 1), new ScheduledTask(17600, 17635, 2), new ScheduledTask(0, 53, 1), new ScheduledTask(4400, 4479, 0), new ScheduledTask(24600, 24635, 0), new ScheduledTask(12300, 12379, 0), new ScheduledTask(20200, 20244, 0), new ScheduledTask(0, 35, 3), new ScheduledTask(0, 44, 0)};
        int[] expectedProcessorEndTimes = new int[]{43044, 32244, 31653, 28753};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random4_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#4_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 40400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(36000, 36044, 0), new ScheduledTask(29640, 29684, 1), new ScheduledTask(32500, 32535, 0), new ScheduledTask(24600, 24653, 3), new ScheduledTask(25320, 25338, 1), new ScheduledTask(18450, 18485, 2), new ScheduledTask(7000, 7088, 3), new ScheduledTask(23700, 23753, 2), new ScheduledTask(27480, 27498, 1), new ScheduledTask(24600, 24679, 0), new ScheduledTask(5250, 5338, 2), new ScheduledTask(0, 35, 3), new ScheduledTask(0, 88, 1), new ScheduledTask(21100, 21135, 0), new ScheduledTask(15800, 15853, 0), new ScheduledTask(15840, 15919, 1), new ScheduledTask(12300, 12335, 0), new ScheduledTask(4400, 4479, 0), new ScheduledTask(10560, 10604, 1), new ScheduledTask(0, 35, 2), new ScheduledTask(0, 44, 0)};
        int[] expectedProcessorEndTimes = new int[]{36044, 29684, 23753, 24653};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 569;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(525, 569, 0), new ScheduledTask(386, 430, 1), new ScheduledTask(489, 524, 0), new ScheduledTask(465, 518, 1), new ScheduledTask(312, 330, 0), new ScheduledTask(158, 193, 1), new ScheduledTask(167, 255, 0), new ScheduledTask(418, 471, 0), new ScheduledTask(471, 489, 0), new ScheduledTask(307, 386, 1), new ScheduledTask(0, 88, 1), new ScheduledTask(430, 465, 1), new ScheduledTask(330, 418, 0), new ScheduledTask(272, 307, 1), new ScheduledTask(255, 308, 0), new ScheduledTask(193, 272, 1), new ScheduledTask(88, 123, 1), new ScheduledTask(0, 79, 0), new ScheduledTask(79, 123, 0), new ScheduledTask(123, 158, 1), new ScheduledTask(123, 167, 0)};
        int[] expectedProcessorEndTimes = new int[]{569, 518};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 318;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(274, 318, 0), new ScheduledTask(220, 264, 1), new ScheduledTask(239, 274, 0), new ScheduledTask(211, 264, 2), new ScheduledTask(105, 123, 3), new ScheduledTask(167, 202, 1), new ScheduledTask(97, 185, 0), new ScheduledTask(185, 238, 0), new ScheduledTask(202, 220, 1), new ScheduledTask(158, 237, 3), new ScheduledTask(123, 211, 2), new ScheduledTask(0, 35, 3), new ScheduledTask(0, 88, 1), new ScheduledTask(70, 105, 3), new ScheduledTask(0, 53, 0), new ScheduledTask(0, 79, 2), new ScheduledTask(123, 158, 3), new ScheduledTask(88, 167, 1), new ScheduledTask(79, 123, 2), new ScheduledTask(35, 70, 3), new ScheduledTask(53, 97, 0)};
        int[] expectedProcessorEndTimes = new int[]{318, 264, 264, 237};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 246;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(202, 246, 0), new ScheduledTask(158, 202, 0), new ScheduledTask(159, 194, 3), new ScheduledTask(141, 194, 1), new ScheduledTask(132, 150, 4), new ScheduledTask(114, 149, 2), new ScheduledTask(70, 158, 0), new ScheduledTask(88, 141, 1), new ScheduledTask(132, 150, 5), new ScheduledTask(79, 158, 3), new ScheduledTask(44, 132, 5), new ScheduledTask(79, 114, 2), new ScheduledTask(44, 132, 4), new ScheduledTask(53, 88, 1), new ScheduledTask(0, 53, 1), new ScheduledTask(0, 79, 3), new ScheduledTask(0, 35, 0), new ScheduledTask(0, 79, 2), new ScheduledTask(0, 44, 5), new ScheduledTask(35, 70, 0), new ScheduledTask(0, 44, 4)};
        int[] expectedProcessorEndTimes = new int[]{246, 194, 149, 194, 150, 150};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random5_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#5_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 78400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(71300, 71371, 0), new ScheduledTask(66000, 66053, 0), new ScheduledTask(37200, 37253, 2), new ScheduledTask(31800, 31862, 1), new ScheduledTask(53400, 53418, 3), new ScheduledTask(46600, 46688, 0), new ScheduledTask(60700, 60753, 0), new ScheduledTask(33500, 33526, 0), new ScheduledTask(0, 62, 2), new ScheduledTask(0, 79, 0), new ScheduledTask(22900, 22962, 0), new ScheduledTask(15800, 15871, 0), new ScheduledTask(0, 53, 1), new ScheduledTask(40500, 40535, 0), new ScheduledTask(44000, 44026, 0), new ScheduledTask(29100, 29144, 0), new ScheduledTask(36100, 36144, 0), new ScheduledTask(0, 71, 3), new ScheduledTask(7900, 7979, 0), new ScheduledTask(42600, 42618, 3), new ScheduledTask(55400, 55453, 0)};
        int[] expectedProcessorEndTimes = new int[]{71371, 31862, 37253, 53418};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random5_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#5_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 51000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(43900, 43971, 0), new ScheduledTask(38600, 38653, 0), new ScheduledTask(32000, 32053, 2), new ScheduledTask(30000, 30062, 1), new ScheduledTask(28400, 28418, 2), new ScheduledTask(29800, 29888, 0), new ScheduledTask(26600, 26653, 3), new ScheduledTask(27200, 27226, 0), new ScheduledTask(14200, 14262, 3), new ScheduledTask(0, 79, 0), new ScheduledTask(17600, 17662, 1), new ScheduledTask(0, 71, 3), new ScheduledTask(17800, 17853, 2), new ScheduledTask(10600, 10635, 1), new ScheduledTask(24600, 24626, 0), new ScheduledTask(15800, 15844, 0), new ScheduledTask(20200, 20244, 0), new ScheduledTask(0, 71, 2), new ScheduledTask(7900, 7979, 0), new ScheduledTask(14200, 14218, 2), new ScheduledTask(0, 53, 1)};
        int[] expectedProcessorEndTimes = new int[]{43971, 30062, 32053, 26653};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random5_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#5_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 43400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(36300, 36371, 0), new ScheduledTask(31000, 31053, 0), new ScheduledTask(27600, 27653, 2), new ScheduledTask(28440, 28502, 1), new ScheduledTask(26600, 26618, 3), new ScheduledTask(17880, 17968, 1), new ScheduledTask(25700, 25753, 0), new ScheduledTask(23700, 23726, 2), new ScheduledTask(14200, 14262, 3), new ScheduledTask(11850, 11929, 2), new ScheduledTask(7100, 7162, 0), new ScheduledTask(0, 71, 3), new ScheduledTask(13300, 13353, 0), new ScheduledTask(10560, 10595, 1), new ScheduledTask(14760, 14786, 1), new ScheduledTask(0, 44, 1), new ScheduledTask(5280, 5324, 1), new ScheduledTask(0, 71, 0), new ScheduledTask(0, 79, 2), new ScheduledTask(23900, 23918, 0), new ScheduledTask(18600, 18653, 0)};
        int[] expectedProcessorEndTimes = new int[]{36371, 28502, 27653, 26618};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 598;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(527, 598, 0), new ScheduledTask(316, 369, 0), new ScheduledTask(474, 527, 0), new ScheduledTask(461, 523, 1), new ScheduledTask(266, 284, 1), new ScheduledTask(228, 316, 0), new ScheduledTask(71, 124, 1), new ScheduledTask(448, 474, 0), new ScheduledTask(284, 346, 1), new ScheduledTask(369, 448, 0), new ScheduledTask(346, 408, 1), new ScheduledTask(195, 266, 1), new ScheduledTask(408, 461, 1), new ScheduledTask(167, 202, 0), new ScheduledTask(202, 228, 0), new ScheduledTask(79, 123, 0), new ScheduledTask(123, 167, 0), new ScheduledTask(124, 195, 1), new ScheduledTask(0, 79, 0), new ScheduledTask(53, 71, 1), new ScheduledTask(0, 53, 1)};
        int[] expectedProcessorEndTimes = new int[]{598, 523};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 352;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(281, 352, 0), new ScheduledTask(228, 281, 0), new ScheduledTask(221, 274, 2), new ScheduledTask(212, 274, 1), new ScheduledTask(177, 195, 2), new ScheduledTask(140, 228, 0), new ScheduledTask(168, 221, 3), new ScheduledTask(195, 221, 2), new ScheduledTask(150, 212, 1), new ScheduledTask(0, 79, 1), new ScheduledTask(0, 62, 3), new ScheduledTask(79, 150, 1), new ScheduledTask(62, 115, 3), new ScheduledTask(79, 114, 0), new ScheduledTask(114, 140, 0), new ScheduledTask(133, 177, 2), new ScheduledTask(71, 115, 2), new ScheduledTask(0, 71, 2), new ScheduledTask(0, 79, 0), new ScheduledTask(115, 133, 2), new ScheduledTask(115, 168, 3)};
        int[] expectedProcessorEndTimes = new int[]{352, 274, 274, 221};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 291;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(220, 291, 0), new ScheduledTask(167, 220, 0), new ScheduledTask(143, 196, 2), new ScheduledTask(142, 204, 1), new ScheduledTask(132, 150, 4), new ScheduledTask(79, 167, 0), new ScheduledTask(88, 141, 3), new ScheduledTask(0, 26, 5), new ScheduledTask(79, 141, 5), new ScheduledTask(62, 141, 2), new ScheduledTask(70, 132, 4), new ScheduledTask(71, 142, 1), new ScheduledTask(35, 88, 3), new ScheduledTask(0, 35, 3), new ScheduledTask(0, 26, 4), new ScheduledTask(26, 70, 4), new ScheduledTask(18, 62, 2), new ScheduledTask(0, 71, 1), new ScheduledTask(0, 79, 0), new ScheduledTask(0, 18, 2), new ScheduledTask(26, 79, 5)};
        int[] expectedProcessorEndTimes = new int[]{291, 204, 196, 141, 150, 141};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random6_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#6_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 75900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(70900, 70950, 0), new ScheduledTask(69200, 69217, 0), new ScheduledTask(39600, 39650, 2), new ScheduledTask(20400, 20483, 1), new ScheduledTask(53000, 53074, 0), new ScheduledTask(24600, 24674, 3), new ScheduledTask(66200, 66225, 0), new ScheduledTask(23100, 23183, 0), new ScheduledTask(0, 41, 3), new ScheduledTask(0, 17, 1), new ScheduledTask(0, 74, 0), new ScheduledTask(13200, 13241, 0), new ScheduledTask(0, 25, 2), new ScheduledTask(48000, 48050, 0), new ScheduledTask(31400, 31483, 0), new ScheduledTask(39700, 39783, 0), new ScheduledTask(7400, 7458, 0), new ScheduledTask(10200, 10217, 1), new ScheduledTask(17300, 17358, 0), new ScheduledTask(15000, 15041, 2), new ScheduledTask(60400, 60458, 0)};
        int[] expectedProcessorEndTimes = new int[]{70950, 20483, 39650, 24674};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random6_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#6_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 48100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(43100, 43150, 0), new ScheduledTask(41400, 41417, 0), new ScheduledTask(31600, 31650, 2), new ScheduledTask(24800, 24883, 1), new ScheduledTask(34000, 34074, 0), new ScheduledTask(26400, 26474, 3), new ScheduledTask(13200, 13225, 3), new ScheduledTask(11600, 11683, 2), new ScheduledTask(18200, 18241, 3), new ScheduledTask(28200, 28217, 2), new ScheduledTask(5800, 5874, 0), new ScheduledTask(0, 41, 3), new ScheduledTask(8200, 8225, 3), new ScheduledTask(29000, 29050, 0), new ScheduledTask(8200, 8283, 1), new ScheduledTask(20700, 20783, 0), new ScheduledTask(0, 58, 2), new ScheduledTask(19000, 19017, 0), new ScheduledTask(13200, 13258, 0), new ScheduledTask(0, 41, 1), new ScheduledTask(0, 58, 0)};
        int[] expectedProcessorEndTimes = new int[]{43150, 24883, 31650, 26474};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random6_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#6_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 41040;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(36040, 36090, 0), new ScheduledTask(33600, 33617, 1), new ScheduledTask(27300, 27350, 2), new ScheduledTask(27400, 27483, 0), new ScheduledTask(16200, 16274, 2), new ScheduledTask(18400, 18474, 3), new ScheduledTask(30600, 30625, 1), new ScheduledTask(13300, 13383, 0), new ScheduledTask(15840, 15881, 1), new ScheduledTask(11600, 11617, 3), new ScheduledTask(0, 74, 1), new ScheduledTask(20760, 20801, 1), new ScheduledTask(12450, 12475, 2), new ScheduledTask(8300, 8350, 0), new ScheduledTask(0, 83, 2), new ScheduledTask(0, 83, 0), new ScheduledTask(0, 58, 3), new ScheduledTask(15000, 15017, 3), new ScheduledTask(8880, 8938, 1), new ScheduledTask(25680, 25721, 1), new ScheduledTask(21600, 21658, 0)};
        int[] expectedProcessorEndTimes = new int[]{36090, 33617, 27350, 18474};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 578;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(528, 578, 0), new ScheduledTask(507, 524, 1), new ScheduledTask(432, 482, 1), new ScheduledTask(445, 528, 0), new ScheduledTask(233, 307, 1), new ScheduledTask(116, 190, 0), new ScheduledTask(482, 507, 1), new ScheduledTask(307, 390, 1), new ScheduledTask(322, 363, 0), new ScheduledTask(415, 432, 1), new ScheduledTask(190, 264, 0), new ScheduledTask(363, 404, 0), new ScheduledTask(390, 415, 1), new ScheduledTask(183, 233, 1), new ScheduledTask(0, 83, 1), new ScheduledTask(100, 183, 1), new ScheduledTask(58, 116, 0), new ScheduledTask(83, 100, 1), new ScheduledTask(0, 58, 0), new ScheduledTask(404, 445, 0), new ScheduledTask(264, 322, 0)};
        int[] expectedProcessorEndTimes = new int[]{578, 524};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 322;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(272, 322, 0), new ScheduledTask(255, 272, 0), new ScheduledTask(216, 266, 2), new ScheduledTask(182, 265, 1), new ScheduledTask(156, 230, 0), new ScheduledTask(175, 249, 3), new ScheduledTask(230, 255, 0), new ScheduledTask(0, 83, 1), new ScheduledTask(141, 182, 1), new ScheduledTask(141, 158, 3), new ScheduledTask(0, 74, 0), new ScheduledTask(74, 115, 0), new ScheduledTask(133, 158, 2), new ScheduledTask(83, 133, 2), new ScheduledTask(0, 83, 2), new ScheduledTask(0, 83, 3), new ScheduledTask(83, 141, 3), new ScheduledTask(158, 175, 3), new ScheduledTask(83, 141, 1), new ScheduledTask(115, 156, 0), new ScheduledTask(158, 216, 2)};
        int[] expectedProcessorEndTimes = new int[]{322, 265, 266, 249};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 246;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(196, 246, 0), new ScheduledTask(175, 192, 1), new ScheduledTask(141, 191, 3), new ScheduledTask(112, 195, 0), new ScheduledTask(91, 165, 2), new ScheduledTask(99, 173, 4), new ScheduledTask(149, 174, 1), new ScheduledTask(58, 141, 3), new ScheduledTask(58, 99, 4), new ScheduledTask(74, 91, 2), new ScheduledTask(0, 74, 2), new ScheduledTask(67, 108, 0), new ScheduledTask(83, 108, 1), new ScheduledTask(0, 50, 0), new ScheduledTask(0, 83, 5), new ScheduledTask(0, 83, 1), new ScheduledTask(0, 58, 4), new ScheduledTask(50, 67, 0), new ScheduledTask(0, 58, 3), new ScheduledTask(108, 149, 1), new ScheduledTask(83, 141, 5)};
        int[] expectedProcessorEndTimes = new int[]{246, 192, 165, 191, 173, 141};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random7_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#7_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 86400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(79300, 79371, 0), new ScheduledTask(74800, 74845, 0), new ScheduledTask(22900, 22989, 1), new ScheduledTask(38500, 38562, 2), new ScheduledTask(65900, 65989, 0), new ScheduledTask(53400, 53489, 0), new ScheduledTask(52300, 52336, 3), new ScheduledTask(0, 89, 0), new ScheduledTask(0, 36, 3), new ScheduledTask(17800, 17845, 0), new ScheduledTask(31200, 31271, 0), new ScheduledTask(8900, 8989, 0), new ScheduledTask(27000, 27018, 2), new ScheduledTask(21600, 21645, 3), new ScheduledTask(0, 36, 1), new ScheduledTask(62300, 62336, 0), new ScheduledTask(22300, 22389, 0), new ScheduledTask(51600, 51618, 0), new ScheduledTask(38300, 38380, 0), new ScheduledTask(46300, 46353, 0), new ScheduledTask(0, 45, 2)};
        int[] expectedProcessorEndTimes = new int[]{79371, 22989, 38562, 52336};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random7_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#7_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 55200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(48100, 48171, 0), new ScheduledTask(43600, 43645, 0), new ScheduledTask(28600, 28689, 1), new ScheduledTask(34000, 34062, 2), new ScheduledTask(16200, 16289, 2), new ScheduledTask(34700, 34789, 0), new ScheduledTask(35800, 35836, 3), new ScheduledTask(0, 89, 3), new ScheduledTask(9000, 9036, 2), new ScheduledTask(17800, 17845, 3), new ScheduledTask(20500, 20571, 0), new ScheduledTask(7200, 7289, 1), new ScheduledTask(25000, 25018, 1), new ScheduledTask(0, 45, 2), new ScheduledTask(0, 36, 1), new ScheduledTask(8900, 8936, 0), new ScheduledTask(0, 89, 0), new ScheduledTask(32900, 32918, 0), new ScheduledTask(12500, 12580, 0), new ScheduledTask(27600, 27653, 0), new ScheduledTask(26800, 26845, 3)};
        int[] expectedProcessorEndTimes = new int[]{48171, 28689, 34062, 35836};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random7_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#7_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 47200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(40100, 40171, 0), new ScheduledTask(35600, 35645, 0), new ScheduledTask(25500, 25589, 2), new ScheduledTask(32160, 32222, 1), new ScheduledTask(12150, 12239, 2), new ScheduledTask(16200, 16289, 3), new ScheduledTask(32000, 32036, 0), new ScheduledTask(13920, 14009, 1), new ScheduledTask(9000, 9036, 3), new ScheduledTask(0, 45, 3), new ScheduledTask(19600, 19671, 0), new ScheduledTask(10700, 10789, 0), new ScheduledTask(30000, 30018, 1), new ScheduledTask(0, 45, 2), new ScheduledTask(6750, 6786, 2), new ScheduledTask(0, 36, 1), new ScheduledTask(0, 89, 0), new ScheduledTask(8900, 8918, 0), new ScheduledTask(4320, 4400, 1), new ScheduledTask(26700, 26753, 0), new ScheduledTask(24600, 24645, 1)};
        int[] expectedProcessorEndTimes = new int[]{40171, 32222, 25589, 16289};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 654;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(583, 654, 0), new ScheduledTask(311, 356, 1), new ScheduledTask(493, 582, 0), new ScheduledTask(516, 578, 1), new ScheduledTask(222, 311, 1), new ScheduledTask(180, 269, 0), new ScheduledTask(269, 305, 0), new ScheduledTask(305, 394, 0), new ScheduledTask(439, 475, 0), new ScheduledTask(394, 439, 0), new ScheduledTask(445, 516, 1), new ScheduledTask(356, 445, 1), new ScheduledTask(475, 493, 0), new ScheduledTask(0, 45, 0), new ScheduledTask(90, 126, 0), new ScheduledTask(126, 162, 0), new ScheduledTask(0, 89, 1), new ScheduledTask(162, 180, 0), new ScheduledTask(89, 169, 1), new ScheduledTask(169, 222, 1), new ScheduledTask(45, 90, 0)};
        int[] expectedProcessorEndTimes = new int[]{654, 578};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 378;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(307, 378, 0), new ScheduledTask(262, 307, 0), new ScheduledTask(205, 294, 1), new ScheduledTask(240, 302, 3), new ScheduledTask(90, 179, 0), new ScheduledTask(170, 259, 2), new ScheduledTask(224, 260, 0), new ScheduledTask(80, 169, 3), new ScheduledTask(134, 170, 2), new ScheduledTask(89, 134, 2), new ScheduledTask(169, 240, 3), new ScheduledTask(0, 89, 2), new ScheduledTask(187, 205, 1), new ScheduledTask(0, 45, 1), new ScheduledTask(0, 36, 0), new ScheduledTask(36, 72, 0), new ScheduledTask(45, 134, 1), new ScheduledTask(72, 90, 0), new ScheduledTask(0, 80, 3), new ScheduledTask(134, 187, 1), new ScheduledTask(179, 224, 0)};
        int[] expectedProcessorEndTimes = new int[]{378, 294, 259, 302};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 298;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(227, 298, 0), new ScheduledTask(181, 226, 0), new ScheduledTask(126, 215, 1), new ScheduledTask(160, 222, 3), new ScheduledTask(83, 172, 4), new ScheduledTask(89, 178, 2), new ScheduledTask(143, 179, 0), new ScheduledTask(0, 89, 5), new ScheduledTask(54, 90, 0), new ScheduledTask(81, 126, 1), new ScheduledTask(89, 160, 3), new ScheduledTask(0, 89, 3), new ScheduledTask(134, 152, 5), new ScheduledTask(0, 45, 1), new ScheduledTask(45, 81, 1), new ScheduledTask(0, 36, 0), new ScheduledTask(0, 89, 2), new ScheduledTask(36, 54, 0), new ScheduledTask(0, 80, 4), new ScheduledTask(90, 143, 0), new ScheduledTask(89, 134, 5)};
        int[] expectedProcessorEndTimes = new int[]{298, 215, 178, 222, 172, 152};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random8_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#8_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 82500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(77000, 77055, 0), new ScheduledTask(60600, 60627, 1), new ScheduledTask(74300, 74327, 0), new ScheduledTask(45200, 45246, 3), new ScheduledTask(51400, 51482, 0), new ScheduledTask(33000, 33046, 1), new ScheduledTask(12400, 12446, 2), new ScheduledTask(59600, 59692, 0), new ScheduledTask(40000, 40055, 2), new ScheduledTask(68800, 68855, 0), new ScheduledTask(0, 73, 3), new ScheduledTask(41300, 41337, 0), new ScheduledTask(11900, 11992, 0), new ScheduledTask(45000, 45064, 0), new ScheduledTask(32100, 32192, 0), new ScheduledTask(0, 18, 2), new ScheduledTask(0, 55, 1), new ScheduledTask(21100, 21192, 0), new ScheduledTask(30300, 30318, 0), new ScheduledTask(0, 92, 0), new ScheduledTask(9200, 9227, 0)};
        int[] expectedProcessorEndTimes = new int[]{77055, 60627, 40055, 45246};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random8_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#8_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 52100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(46600, 46655, 0), new ScheduledTask(40400, 40427, 1), new ScheduledTask(43900, 43927, 0), new ScheduledTask(36800, 36846, 2), new ScheduledTask(30200, 30282, 0), new ScheduledTask(22000, 22046, 1), new ScheduledTask(31200, 31246, 1), new ScheduledTask(23800, 23892, 3), new ScheduledTask(18400, 18455, 2), new ScheduledTask(38400, 38455, 0), new ScheduledTask(16500, 16573, 0), new ScheduledTask(29400, 29437, 2), new ScheduledTask(0, 92, 3), new ScheduledTask(23800, 23864, 0), new ScheduledTask(0, 92, 2), new ScheduledTask(18400, 18418, 1), new ScheduledTask(9200, 9255, 0), new ScheduledTask(0, 92, 1), new ScheduledTask(14700, 14718, 0), new ScheduledTask(0, 92, 0), new ScheduledTask(18400, 18427, 3)};
        int[] expectedProcessorEndTimes = new int[]{46655, 40427, 36846, 23892};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random8_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#8_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 44250;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(38750, 38805, 0), new ScheduledTask(35280, 35307, 1), new ScheduledTask(35900, 35927, 0), new ScheduledTask(31350, 31396, 2), new ScheduledTask(19050, 19132, 2), new ScheduledTask(14600, 14646, 3), new ScheduledTask(18400, 18446, 0), new ScheduledTask(26700, 26792, 0), new ScheduledTask(23800, 23855, 3), new ScheduledTask(28680, 28735, 1), new ScheduledTask(0, 73, 3), new ScheduledTask(23000, 23037, 0), new ScheduledTask(17640, 17732, 1), new ScheduledTask(0, 64, 2), new ScheduledTask(6600, 6692, 1), new ScheduledTask(16350, 16368, 2), new ScheduledTask(0, 55, 1), new ScheduledTask(0, 92, 0), new ScheduledTask(9600, 9618, 2), new ScheduledTask(9200, 9292, 0), new ScheduledTask(12300, 12327, 2)};
        int[] expectedProcessorEndTimes = new int[]{38805, 35307, 31396, 23855};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 624;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(569, 624, 0), new ScheduledTask(540, 567, 1), new ScheduledTask(513, 540, 1), new ScheduledTask(523, 569, 0), new ScheduledTask(156, 238, 1), new ScheduledTask(275, 321, 0), new ScheduledTask(348, 394, 0), new ScheduledTask(394, 486, 0), new ScheduledTask(403, 458, 1), new ScheduledTask(458, 513, 1), new ScheduledTask(330, 403, 1), new ScheduledTask(486, 523, 0), new ScheduledTask(0, 92, 1), new ScheduledTask(92, 156, 1), new ScheduledTask(0, 92, 0), new ScheduledTask(92, 110, 0), new ScheduledTask(202, 257, 0), new ScheduledTask(110, 202, 0), new ScheduledTask(257, 275, 0), new ScheduledTask(238, 330, 1), new ScheduledTask(321, 348, 0)};
        int[] expectedProcessorEndTimes = new int[]{624, 567};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 350;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(295, 350, 0), new ScheduledTask(266, 293, 1), new ScheduledTask(268, 295, 0), new ScheduledTask(239, 285, 3), new ScheduledTask(109, 191, 2), new ScheduledTask(220, 266, 1), new ScheduledTask(92, 138, 0), new ScheduledTask(175, 267, 0), new ScheduledTask(184, 239, 3), new ScheduledTask(209, 264, 2), new ScheduledTask(92, 165, 1), new ScheduledTask(138, 175, 0), new ScheduledTask(92, 184, 3), new ScheduledTask(27, 91, 2), new ScheduledTask(0, 92, 3), new ScheduledTask(91, 109, 2), new ScheduledTask(165, 220, 1), new ScheduledTask(0, 92, 1), new ScheduledTask(191, 209, 2), new ScheduledTask(0, 92, 0), new ScheduledTask(0, 27, 2)};
        int[] expectedProcessorEndTimes = new int[]{350, 293, 264, 285};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 265;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(210, 265, 0), new ScheduledTask(181, 208, 1), new ScheduledTask(183, 210, 0), new ScheduledTask(156, 202, 4), new ScheduledTask(94, 176, 2), new ScheduledTask(133, 179, 1), new ScheduledTask(129, 175, 3), new ScheduledTask(0, 92, 5), new ScheduledTask(119, 174, 5), new ScheduledTask(128, 183, 0), new ScheduledTask(0, 73, 0), new ScheduledTask(92, 129, 3), new ScheduledTask(64, 156, 4), new ScheduledTask(0, 64, 4), new ScheduledTask(0, 92, 3), new ScheduledTask(0, 18, 1), new ScheduledTask(73, 128, 0), new ScheduledTask(0, 92, 2), new ScheduledTask(110, 128, 1), new ScheduledTask(18, 110, 1), new ScheduledTask(92, 119, 5)};
        int[] expectedProcessorEndTimes = new int[]{265, 208, 176, 175, 202, 174};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random9_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#9_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 84100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(78800, 78853, 0), new ScheduledTask(76700, 76721, 0), new ScheduledTask(19200, 19295, 1), new ScheduledTask(58000, 58032, 3), new ScheduledTask(57000, 57032, 2), new ScheduledTask(67200, 67295, 0), new ScheduledTask(44400, 44421, 3), new ScheduledTask(0, 42, 0), new ScheduledTask(8400, 8421, 0), new ScheduledTask(4200, 4242, 0), new ScheduledTask(48300, 48384, 0), new ScheduledTask(0, 74, 3), new ScheduledTask(0, 95, 2), new ScheduledTask(31500, 31584, 0), new ScheduledTask(42000, 42063, 0), new ScheduledTask(10500, 10605, 0), new ScheduledTask(65100, 65121, 0), new ScheduledTask(56700, 56784, 0), new ScheduledTask(0, 32, 1), new ScheduledTask(21000, 21105, 0), new ScheduledTask(39900, 39921, 0)};
        int[] expectedProcessorEndTimes = new int[]{78853, 19295, 57032, 58032};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random9_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#9_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 53600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(48300, 48353, 0), new ScheduledTask(46200, 46221, 0), new ScheduledTask(27400, 27495, 2), new ScheduledTask(40000, 40032, 3), new ScheduledTask(33600, 33632, 3), new ScheduledTask(25400, 25495, 1), new ScheduledTask(44100, 44121, 0), new ScheduledTask(19000, 19042, 2), new ScheduledTask(21200, 21221, 1), new ScheduledTask(16800, 16842, 0), new ScheduledTask(0, 84, 0), new ScheduledTask(0, 74, 1), new ScheduledTask(0, 95, 2), new ScheduledTask(23100, 23184, 0), new ScheduledTask(0, 63, 3), new ScheduledTask(12600, 12705, 3), new ScheduledTask(21000, 21021, 0), new ScheduledTask(8400, 8484, 0), new ScheduledTask(14800, 14832, 1), new ScheduledTask(31500, 31605, 0), new ScheduledTask(42000, 42021, 0)};
        int[] expectedProcessorEndTimes = new int[]{48353, 25495, 27495, 40032};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random9_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#9_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 45300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(40000, 40053, 0), new ScheduledTask(37900, 37921, 0), new ScheduledTask(27720, 27815, 1), new ScheduledTask(34800, 34832, 2), new ScheduledTask(30000, 30032, 2), new ScheduledTask(28400, 28495, 0), new ScheduledTask(31600, 31621, 3), new ScheduledTask(15800, 15842, 0), new ScheduledTask(24200, 24221, 0), new ScheduledTask(20000, 20042, 0), new ScheduledTask(0, 84, 1), new ScheduledTask(8400, 8474, 0), new ScheduledTask(15750, 15845, 2), new ScheduledTask(10080, 10164, 1), new ScheduledTask(20160, 20223, 1), new ScheduledTask(0, 105, 3), new ScheduledTask(26300, 26321, 0), new ScheduledTask(0, 84, 0), new ScheduledTask(21000, 21032, 3), new ScheduledTask(0, 105, 2), new ScheduledTask(27400, 27421, 3)};
        int[] expectedProcessorEndTimes = new int[]{40053, 27815, 34832, 31621};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 641;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(588, 641, 0), new ScheduledTask(567, 588, 0), new ScheduledTask(253, 348, 1), new ScheduledTask(549, 581, 1), new ScheduledTask(348, 380, 1), new ScheduledTask(137, 232, 1), new ScheduledTask(546, 567, 0), new ScheduledTask(105, 147, 0), new ScheduledTask(232, 253, 1), new ScheduledTask(147, 189, 0), new ScheduledTask(441, 525, 0), new ScheduledTask(475, 549, 1), new ScheduledTask(380, 475, 1), new ScheduledTask(189, 273, 0), new ScheduledTask(273, 336, 0), new ScheduledTask(0, 105, 1), new ScheduledTask(84, 105, 0), new ScheduledTask(0, 84, 0), new ScheduledTask(105, 137, 1), new ScheduledTask(336, 441, 0), new ScheduledTask(525, 546, 0)};
        int[] expectedProcessorEndTimes = new int[]{641, 581};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 358;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(305, 358, 0), new ScheduledTask(284, 305, 0), new ScheduledTask(200, 295, 1), new ScheduledTask(263, 295, 3), new ScheduledTask(242, 274, 2), new ScheduledTask(189, 284, 0), new ScheduledTask(242, 263, 3), new ScheduledTask(158, 200, 1), new ScheduledTask(126, 147, 0), new ScheduledTask(84, 126, 0), new ScheduledTask(95, 179, 2), new ScheduledTask(84, 158, 1), new ScheduledTask(0, 95, 2), new ScheduledTask(0, 84, 1), new ScheduledTask(179, 242, 2), new ScheduledTask(0, 105, 3), new ScheduledTask(147, 168, 0), new ScheduledTask(0, 84, 0), new ScheduledTask(105, 137, 3), new ScheduledTask(137, 242, 3), new ScheduledTask(168, 189, 0)};
        int[] expectedProcessorEndTimes = new int[]{358, 295, 274, 295};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 268;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(215, 268, 0), new ScheduledTask(193, 214, 0), new ScheduledTask(105, 200, 2), new ScheduledTask(179, 211, 4), new ScheduledTask(158, 190, 3), new ScheduledTask(95, 190, 1), new ScheduledTask(171, 192, 0), new ScheduledTask(0, 42, 1), new ScheduledTask(84, 105, 2), new ScheduledTask(0, 42, 0), new ScheduledTask(95, 179, 4), new ScheduledTask(84, 158, 3), new ScheduledTask(0, 95, 4), new ScheduledTask(0, 84, 3), new ScheduledTask(0, 63, 5), new ScheduledTask(42, 147, 0), new ScheduledTask(74, 95, 1), new ScheduledTask(0, 84, 2), new ScheduledTask(42, 74, 1), new ScheduledTask(63, 168, 5), new ScheduledTask(147, 168, 0)};
        int[] expectedProcessorEndTimes = new int[]{268, 190, 200, 190, 211, 168};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 11;
        int expectedScheduleEndTime = 323;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(255, 323, 0), new ScheduledTask(157, 255, 0), new ScheduledTask(84, 182, 2), new ScheduledTask(147, 245, 1), new ScheduledTask(98, 147, 1), new ScheduledTask(78, 98, 4), new ScheduledTask(98, 157, 0), new ScheduledTask(29, 68, 9), new ScheduledTask(29, 78, 7), new ScheduledTask(0, 78, 2), new ScheduledTask(0, 98, 3), new ScheduledTask(20, 49, 10), new ScheduledTask(0, 78, 5), new ScheduledTask(0, 29, 7), new ScheduledTask(0, 98, 1), new ScheduledTask(0, 78, 4), new ScheduledTask(0, 49, 8), new ScheduledTask(0, 59, 6), new ScheduledTask(0, 20, 10), new ScheduledTask(0, 98, 0), new ScheduledTask(0, 29, 9)};
        int[] expectedProcessorEndTimes = new int[]{323, 245, 182, 98, 98, 78, 59, 78, 49, 68, 49};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 696;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(628, 696, 0), new ScheduledTask(382, 480, 0), new ScheduledTask(529, 627, 0), new ScheduledTask(528, 626, 1), new ScheduledTask(313, 362, 1), new ScheduledTask(128, 148, 0), new ScheduledTask(127, 186, 1), new ScheduledTask(460, 499, 1), new ScheduledTask(480, 529, 0), new ScheduledTask(148, 226, 0), new ScheduledTask(362, 460, 1), new ScheduledTask(499, 528, 1), new ScheduledTask(304, 382, 0), new ScheduledTask(284, 313, 1), new ScheduledTask(186, 284, 1), new ScheduledTask(226, 304, 0), new ScheduledTask(79, 128, 0), new ScheduledTask(20, 79, 0), new ScheduledTask(0, 20, 0), new ScheduledTask(29, 127, 1), new ScheduledTask(0, 29, 1)};
        int[] expectedProcessorEndTimes = new int[]{696, 626};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 411;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(343, 411, 0), new ScheduledTask(245, 343, 0), new ScheduledTask(235, 333, 2), new ScheduledTask(243, 341, 1), new ScheduledTask(196, 245, 0), new ScheduledTask(216, 236, 3), new ScheduledTask(137, 196, 0), new ScheduledTask(98, 137, 0), new ScheduledTask(0, 49, 0), new ScheduledTask(157, 235, 2), new ScheduledTask(98, 196, 3), new ScheduledTask(214, 243, 1), new ScheduledTask(136, 214, 1), new ScheduledTask(107, 136, 1), new ScheduledTask(0, 98, 3), new ScheduledTask(0, 78, 1), new ScheduledTask(49, 98, 0), new ScheduledTask(98, 157, 2), new ScheduledTask(196, 216, 3), new ScheduledTask(0, 98, 2), new ScheduledTask(78, 107, 1)};
        int[] expectedProcessorEndTimes = new int[]{411, 341, 333, 236};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 323;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(255, 323, 0), new ScheduledTask(157, 255, 0), new ScheduledTask(124, 222, 2), new ScheduledTask(147, 245, 1), new ScheduledTask(98, 147, 1), new ScheduledTask(97, 117, 4), new ScheduledTask(98, 157, 0), new ScheduledTask(0, 39, 2), new ScheduledTask(69, 118, 7), new ScheduledTask(39, 117, 2), new ScheduledTask(29, 127, 3), new ScheduledTask(0, 29, 5), new ScheduledTask(29, 107, 5), new ScheduledTask(0, 29, 6), new ScheduledTask(0, 98, 1), new ScheduledTask(0, 78, 4), new ScheduledTask(20, 69, 7), new ScheduledTask(29, 88, 6), new ScheduledTask(0, 20, 7), new ScheduledTask(0, 98, 0), new ScheduledTask(0, 29, 3)};
        int[] expectedProcessorEndTimes = new int[]{323, 245, 222, 127, 117, 107, 88, 118};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 83200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(76400, 76468, 0), new ScheduledTask(69600, 69668, 0), new ScheduledTask(17400, 17497, 1), new ScheduledTask(52200, 52239, 2), new ScheduledTask(61900, 61977, 0), new ScheduledTask(54200, 54258, 0), new ScheduledTask(48700, 48729, 3), new ScheduledTask(0, 97, 0), new ScheduledTask(9700, 9768, 0), new ScheduledTask(0, 19, 3), new ScheduledTask(0, 29, 1), new ScheduledTask(34900, 34977, 0), new ScheduledTask(48400, 48419, 0), new ScheduledTask(60000, 60019, 0), new ScheduledTask(0, 48, 2), new ScheduledTask(28800, 28839, 2), new ScheduledTask(50300, 50339, 0), new ScheduledTask(11400, 11458, 3), new ScheduledTask(16500, 16597, 0), new ScheduledTask(42600, 42658, 0), new ScheduledTask(26200, 26287, 0)};
        int[] expectedProcessorEndTimes = new int[]{76468, 17497, 52239, 48729};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 53900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(47100, 47168, 0), new ScheduledTask(39600, 39668, 0), new ScheduledTask(27000, 27097, 1), new ScheduledTask(38600, 38639, 3), new ScheduledTask(23200, 23277, 3), new ScheduledTask(27200, 27258, 2), new ScheduledTask(36700, 36729, 0), new ScheduledTask(0, 97, 3), new ScheduledTask(7700, 7768, 0), new ScheduledTask(19400, 19419, 3), new ScheduledTask(31900, 31929, 0), new ScheduledTask(0, 77, 0), new ScheduledTask(34800, 34819, 0), new ScheduledTask(20300, 20319, 0), new ScheduledTask(0, 48, 1), new ScheduledTask(0, 39, 2), new ScheduledTask(22200, 22239, 0), new ScheduledTask(14500, 14558, 0), new ScheduledTask(7800, 7897, 2), new ScheduledTask(26100, 26158, 0), new ScheduledTask(9600, 9687, 1)};
        int[] expectedProcessorEndTimes = new int[]{47168, 27097, 27258, 38639};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 45400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(38600, 38668, 0), new ScheduledTask(30120, 30188, 1), new ScheduledTask(23250, 23347, 2), new ScheduledTask(34700, 34739, 0), new ScheduledTask(17400, 17477, 1), new ScheduledTask(15600, 15658, 3), new ScheduledTask(26640, 26669, 1), new ScheduledTask(8700, 8797, 2), new ScheduledTask(10600, 10668, 0), new ScheduledTask(17400, 17419, 0), new ScheduledTask(27200, 27229, 3), new ScheduledTask(25100, 25177, 0), new ScheduledTask(32800, 32819, 0), new ScheduledTask(8700, 8719, 0), new ScheduledTask(11640, 11688, 1), new ScheduledTask(0, 39, 3), new ScheduledTask(7800, 7839, 3), new ScheduledTask(0, 58, 2), new ScheduledTask(0, 97, 1), new ScheduledTask(19300, 19358, 0), new ScheduledTask(0, 87, 0)};
        int[] expectedProcessorEndTimes = new int[]{38668, 30188, 23347, 27229};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 631;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(563, 631, 0), new ScheduledTask(492, 560, 1), new ScheduledTask(397, 494, 0), new ScheduledTask(523, 562, 0), new ScheduledTask(319, 396, 1), new ScheduledTask(242, 300, 1), new ScheduledTask(106, 135, 0), new ScheduledTask(232, 329, 0), new ScheduledTask(329, 397, 0), new ScheduledTask(300, 319, 1), new ScheduledTask(494, 523, 0), new ScheduledTask(396, 473, 1), new ScheduledTask(473, 492, 1), new ScheduledTask(213, 232, 0), new ScheduledTask(58, 106, 0), new ScheduledTask(135, 174, 0), new ScheduledTask(174, 213, 0), new ScheduledTask(184, 242, 1), new ScheduledTask(87, 184, 1), new ScheduledTask(0, 58, 0), new ScheduledTask(0, 87, 1)};
        int[] expectedProcessorEndTimes = new int[]{631, 560};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 365;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(297, 365, 0), new ScheduledTask(222, 290, 1), new ScheduledTask(193, 290, 2), new ScheduledTask(256, 295, 0), new ScheduledTask(97, 174, 0), new ScheduledTask(164, 222, 1), new ScheduledTask(175, 204, 3), new ScheduledTask(78, 175, 3), new ScheduledTask(106, 174, 2), new ScheduledTask(174, 193, 2), new ScheduledTask(223, 252, 3), new ScheduledTask(174, 251, 0), new ScheduledTask(204, 223, 3), new ScheduledTask(0, 19, 2), new ScheduledTask(0, 48, 1), new ScheduledTask(0, 39, 3), new ScheduledTask(39, 78, 3), new ScheduledTask(48, 106, 1), new ScheduledTask(0, 97, 0), new ScheduledTask(106, 164, 1), new ScheduledTask(19, 106, 2)};
        int[] expectedProcessorEndTimes = new int[]{365, 290, 290, 252};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 297;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(229, 297, 0), new ScheduledTask(161, 229, 0), new ScheduledTask(118, 215, 1), new ScheduledTask(183, 222, 3), new ScheduledTask(77, 154, 2), new ScheduledTask(97, 155, 0), new ScheduledTask(126, 155, 4), new ScheduledTask(0, 97, 5), new ScheduledTask(48, 116, 3), new ScheduledTask(58, 77, 2), new ScheduledTask(116, 145, 3), new ScheduledTask(97, 174, 5), new ScheduledTask(155, 174, 4), new ScheduledTask(39, 58, 1), new ScheduledTask(0, 48, 3), new ScheduledTask(0, 39, 4), new ScheduledTask(0, 39, 1), new ScheduledTask(0, 58, 2), new ScheduledTask(0, 97, 0), new ScheduledTask(58, 116, 1), new ScheduledTask(39, 126, 4)};
        int[] expectedProcessorEndTimes = new int[]{297, 215, 154, 222, 174, 174};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot92_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.92_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(7700, 7707, 0), new ScheduledTask(7000, 7007, 0), new ScheduledTask(3600, 3606, 1), new ScheduledTask(3600, 3605, 2), new ScheduledTask(6400, 6406, 0), new ScheduledTask(5000, 5006, 0), new ScheduledTask(1800, 1803, 1), new ScheduledTask(1400, 1404, 0), new ScheduledTask(1800, 1804, 0), new ScheduledTask(700, 705, 0), new ScheduledTask(0, 6, 2), new ScheduledTask(0, 3, 1), new ScheduledTask(2200, 2204, 0), new ScheduledTask(5600, 5606, 0), new ScheduledTask(0, 10, 3), new ScheduledTask(6200, 6202, 0), new ScheduledTask(4400, 4406, 0), new ScheduledTask(3600, 3608, 0), new ScheduledTask(2600, 2610, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(1200, 1202, 0)};
        int[] expectedProcessorEndTimes = new int[]{7707, 3606, 3605, 10};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot92_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.92_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(4900, 4907, 0), new ScheduledTask(3700, 3707, 0), new ScheduledTask(3000, 3006, 2), new ScheduledTask(4400, 4405, 0), new ScheduledTask(3100, 3106, 0), new ScheduledTask(1600, 1606, 1), new ScheduledTask(2100, 2103, 3), new ScheduledTask(1700, 1704, 0), new ScheduledTask(2100, 2104, 0), new ScheduledTask(2000, 2005, 2), new ScheduledTask(2700, 2706, 3), new ScheduledTask(3600, 3603, 1), new ScheduledTask(2800, 2804, 1), new ScheduledTask(2500, 2506, 0), new ScheduledTask(0, 10, 3), new ScheduledTask(1600, 1602, 2), new ScheduledTask(0, 6, 2), new ScheduledTask(0, 8, 1), new ScheduledTask(0, 10, 0), new ScheduledTask(1000, 1007, 0), new ScheduledTask(1200, 1202, 2)};
        int[] expectedProcessorEndTimes = new int[]{4907, 3603, 3006, 2706};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot92_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.92_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(4100, 4107, 0), new ScheduledTask(2900, 2907, 0), new ScheduledTask(2880, 2886, 1), new ScheduledTask(3600, 3605, 0), new ScheduledTask(1700, 1706, 0), new ScheduledTask(2300, 2306, 0), new ScheduledTask(1200, 1203, 2), new ScheduledTask(1920, 1924, 1), new ScheduledTask(2400, 2404, 1), new ScheduledTask(1650, 1655, 2), new ScheduledTask(2400, 2406, 2), new ScheduledTask(2800, 2803, 3), new ScheduledTask(2000, 2004, 3), new ScheduledTask(0, 6, 2), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 2, 3), new ScheduledTask(1200, 1206, 1), new ScheduledTask(400, 408, 3), new ScheduledTask(700, 710, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(900, 902, 2)};
        int[] expectedProcessorEndTimes = new int[]{4107, 2886, 2406, 2803};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot92_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.92_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(58, 65, 0), new ScheduledTask(51, 58, 0), new ScheduledTask(46, 52, 1), new ScheduledTask(41, 46, 1), new ScheduledTask(39, 45, 0), new ScheduledTask(45, 51, 0), new ScheduledTask(38, 41, 1), new ScheduledTask(6, 10, 0), new ScheduledTask(5, 9, 1), new ScheduledTask(10, 15, 0), new ScheduledTask(15, 21, 1), new ScheduledTask(2, 5, 1), new ScheduledTask(2, 6, 0), new ScheduledTask(15, 21, 0), new ScheduledTask(29, 39, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(9, 15, 1), new ScheduledTask(21, 29, 0), new ScheduledTask(28, 38, 1), new ScheduledTask(21, 28, 1), new ScheduledTask(0, 2, 0)};
        int[] expectedProcessorEndTimes = new int[]{65, 52};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot92_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.92_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 42;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(35, 42, 0), new ScheduledTask(28, 35, 0), new ScheduledTask(24, 30, 2), new ScheduledTask(20, 25, 3), new ScheduledTask(16, 22, 1), new ScheduledTask(17, 23, 0), new ScheduledTask(23, 26, 0), new ScheduledTask(16, 20, 2), new ScheduledTask(20, 24, 2), new ScheduledTask(8, 13, 2), new ScheduledTask(14, 20, 3), new ScheduledTask(13, 16, 2), new ScheduledTask(10, 14, 1), new ScheduledTask(0, 6, 3), new ScheduledTask(0, 10, 1), new ScheduledTask(6, 8, 3), new ScheduledTask(8, 14, 3), new ScheduledTask(0, 8, 2), new ScheduledTask(0, 10, 0), new ScheduledTask(10, 17, 0), new ScheduledTask(14, 16, 1)};
        int[] expectedProcessorEndTimes = new int[]{42, 22, 30, 25};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot92_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.92_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(30, 37, 0), new ScheduledTask(23, 30, 0), new ScheduledTask(19, 25, 1), new ScheduledTask(14, 19, 1), new ScheduledTask(17, 23, 0), new ScheduledTask(11, 17, 0), new ScheduledTask(11, 14, 2), new ScheduledTask(0, 4, 3), new ScheduledTask(8, 12, 4), new ScheduledTask(11, 16, 5), new ScheduledTask(8, 14, 1), new ScheduledTask(8, 11, 2), new ScheduledTask(7, 11, 5), new ScheduledTask(0, 6, 2), new ScheduledTask(4, 14, 3), new ScheduledTask(6, 8, 2), new ScheduledTask(2, 8, 1), new ScheduledTask(0, 8, 4), new ScheduledTask(0, 10, 0), new ScheduledTask(0, 7, 5), new ScheduledTask(0, 2, 1)};
        int[] expectedProcessorEndTimes = new int[]{37, 25, 14, 14, 12, 16};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(8800, 8808, 0), new ScheduledTask(8300, 8305, 0), new ScheduledTask(5300, 5305, 3), new ScheduledTask(3600, 3607, 1), new ScheduledTask(4200, 4203, 2), new ScheduledTask(7300, 7310, 0), new ScheduledTask(6300, 6302, 2), new ScheduledTask(3500, 3503, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(3800, 3809, 0), new ScheduledTask(1000, 1009, 0), new ScheduledTask(1900, 1906, 0), new ScheduledTask(2500, 2505, 0), new ScheduledTask(0, 10, 0), new ScheduledTask(3000, 3005, 0), new ScheduledTask(0, 7, 2), new ScheduledTask(5400, 5407, 0), new ScheduledTask(6800, 6805, 0), new ScheduledTask(6100, 6107, 0), new ScheduledTask(4700, 4707, 0), new ScheduledTask(0, 8, 3)};
        int[] expectedProcessorEndTimes = new int[]{8808, 3607, 6302, 5305};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 6300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(5500, 5508, 0), new ScheduledTask(5000, 5005, 0), new ScheduledTask(4000, 4005, 2), new ScheduledTask(3400, 3407, 1), new ScheduledTask(3000, 3003, 0), new ScheduledTask(4000, 4010, 0), new ScheduledTask(4000, 4002, 3), new ScheduledTask(1800, 1803, 3), new ScheduledTask(2800, 2806, 2), new ScheduledTask(0, 9, 3), new ScheduledTask(0, 9, 2), new ScheduledTask(1700, 1706, 0), new ScheduledTask(1800, 1805, 2), new ScheduledTask(0, 10, 0), new ScheduledTask(1400, 1405, 1), new ScheduledTask(0, 7, 1), new ScheduledTask(1000, 1007, 0), new ScheduledTask(2400, 2405, 1), new ScheduledTask(3300, 3307, 0), new ScheduledTask(2300, 2307, 0), new ScheduledTask(2400, 2408, 3)};
        int[] expectedProcessorEndTimes = new int[]{5508, 3407, 4005, 4002};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(4600, 4608, 0), new ScheduledTask(3720, 3725, 1), new ScheduledTask(4100, 4105, 0), new ScheduledTask(2600, 2607, 3), new ScheduledTask(2250, 2253, 2), new ScheduledTask(2520, 2530, 1), new ScheduledTask(2700, 2702, 0), new ScheduledTask(3800, 3803, 0), new ScheduledTask(2700, 2706, 2), new ScheduledTask(2900, 2909, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(700, 706, 0), new ScheduledTask(1600, 1605, 3), new ScheduledTask(0, 10, 2), new ScheduledTask(1500, 1505, 2), new ScheduledTask(0, 7, 0), new ScheduledTask(1080, 1087, 1), new ScheduledTask(1920, 1925, 1), new ScheduledTask(1300, 1307, 0), new ScheduledTask(2000, 2007, 0), new ScheduledTask(0, 8, 3)};
        int[] expectedProcessorEndTimes = new int[]{4608, 3725, 2706, 2607};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(64, 72, 0), new ScheduledTask(57, 62, 1), new ScheduledTask(59, 64, 0), new ScheduledTask(46, 53, 0), new ScheduledTask(54, 57, 1), new ScheduledTask(31, 41, 1), new ScheduledTask(26, 28, 0), new ScheduledTask(41, 44, 1), new ScheduledTask(53, 59, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(17, 26, 1), new ScheduledTask(35, 41, 0), new ScheduledTask(26, 31, 1), new ScheduledTask(44, 54, 1), new ScheduledTask(41, 46, 0), new ScheduledTask(28, 35, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(21, 26, 0), new ScheduledTask(7, 14, 0), new ScheduledTask(14, 21, 0), new ScheduledTask(9, 17, 1)};
        int[] expectedProcessorEndTimes = new int[]{72, 62};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 44;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(36, 44, 0), new ScheduledTask(29, 34, 1), new ScheduledTask(31, 36, 0), new ScheduledTask(23, 30, 2), new ScheduledTask(16, 19, 0), new ScheduledTask(19, 29, 1), new ScheduledTask(18, 20, 3), new ScheduledTask(28, 31, 0), new ScheduledTask(20, 26, 3), new ScheduledTask(19, 28, 0), new ScheduledTask(14, 23, 2), new ScheduledTask(0, 6, 0), new ScheduledTask(0, 5, 3), new ScheduledTask(6, 16, 0), new ScheduledTask(5, 10, 3), new ScheduledTask(0, 7, 2), new ScheduledTask(7, 14, 1), new ScheduledTask(14, 19, 1), new ScheduledTask(7, 14, 2), new ScheduledTask(0, 7, 1), new ScheduledTask(10, 18, 3)};
        int[] expectedProcessorEndTimes = new int[]{44, 34, 30, 26};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 38;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(30, 38, 0), new ScheduledTask(25, 30, 0), new ScheduledTask(20, 25, 2), new ScheduledTask(15, 22, 1), new ScheduledTask(22, 25, 0), new ScheduledTask(12, 22, 0), new ScheduledTask(16, 18, 3), new ScheduledTask(10, 13, 4), new ScheduledTask(14, 20, 2), new ScheduledTask(5, 14, 5), new ScheduledTask(0, 9, 1), new ScheduledTask(9, 15, 1), new ScheduledTask(0, 5, 5), new ScheduledTask(0, 10, 4), new ScheduledTask(14, 19, 5), new ScheduledTask(7, 14, 2), new ScheduledTask(0, 7, 0), new ScheduledTask(7, 12, 0), new ScheduledTask(0, 7, 3), new ScheduledTask(0, 7, 2), new ScheduledTask(7, 15, 3)};
        int[] expectedProcessorEndTimes = new int[]{38, 22, 25, 18, 13, 19};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random2_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random#2_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(8800, 8803, 0), new ScheduledTask(7800, 7809, 0), new ScheduledTask(2400, 2410, 1), new ScheduledTask(5400, 5405, 2), new ScheduledTask(6000, 6002, 3), new ScheduledTask(4900, 4910, 0), new ScheduledTask(7100, 7107, 0), new ScheduledTask(0, 6, 0), new ScheduledTask(600, 606, 0), new ScheduledTask(1200, 1203, 0), new ScheduledTask(4700, 4702, 0), new ScheduledTask(3700, 3706, 0), new ScheduledTask(0, 9, 2), new ScheduledTask(1500, 1508, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(0, 10, 3), new ScheduledTask(4300, 4304, 0), new ScheduledTask(2300, 2307, 0), new ScheduledTask(3000, 3007, 0), new ScheduledTask(5900, 5909, 0), new ScheduledTask(6800, 6803, 0)};
        int[] expectedProcessorEndTimes = new int[]{8803, 2410, 5405, 6002};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random2_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random#2_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(5500, 5503, 0), new ScheduledTask(4600, 4609, 0), new ScheduledTask(3100, 3110, 1), new ScheduledTask(4200, 4205, 3), new ScheduledTask(4400, 4402, 0), new ScheduledTask(2200, 2210, 2), new ScheduledTask(1700, 1707, 1), new ScheduledTask(600, 606, 3), new ScheduledTask(1600, 1606, 0), new ScheduledTask(1800, 1803, 3), new ScheduledTask(2800, 2802, 0), new ScheduledTask(2200, 2206, 0), new ScheduledTask(2400, 2409, 3), new ScheduledTask(0, 8, 1), new ScheduledTask(4000, 4004, 0), new ScheduledTask(3000, 3010, 0), new ScheduledTask(1400, 1404, 2), new ScheduledTask(0, 7, 2), new ScheduledTask(900, 907, 0), new ScheduledTask(0, 9, 0), new ScheduledTask(0, 3, 3)};
        int[] expectedProcessorEndTimes = new int[]{5503, 3110, 2210, 4205};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random2_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random#2_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(4700, 4703, 0), new ScheduledTask(3800, 3809, 0), new ScheduledTask(3000, 3010, 1), new ScheduledTask(3600, 3605, 2), new ScheduledTask(2800, 2802, 3), new ScheduledTask(2800, 2810, 0), new ScheduledTask(2100, 2107, 0), new ScheduledTask(1350, 1356, 2), new ScheduledTask(2280, 2286, 1), new ScheduledTask(1300, 1303, 0), new ScheduledTask(1900, 1902, 0), new ScheduledTask(700, 706, 0), new ScheduledTask(2250, 2259, 2), new ScheduledTask(0, 8, 1), new ScheduledTask(2000, 2004, 3), new ScheduledTask(0, 10, 3), new ScheduledTask(1800, 1804, 1), new ScheduledTask(960, 967, 1), new ScheduledTask(0, 7, 0), new ScheduledTask(0, 9, 2), new ScheduledTask(1600, 1603, 0)};
        int[] expectedProcessorEndTimes = new int[]{4703, 3010, 3605, 2802};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(65, 68, 0), new ScheduledTask(39, 48, 1), new ScheduledTask(55, 65, 0), new ScheduledTask(57, 62, 1), new ScheduledTask(34, 36, 1), new ScheduledTask(25, 35, 0), new ScheduledTask(19, 26, 1), new ScheduledTask(35, 41, 0), new ScheduledTask(49, 55, 0), new ScheduledTask(36, 39, 1), new ScheduledTask(47, 49, 0), new ScheduledTask(41, 47, 0), new ScheduledTask(48, 57, 1), new ScheduledTask(26, 34, 1), new ScheduledTask(17, 21, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(21, 25, 0), new ScheduledTask(3, 10, 0), new ScheduledTask(10, 17, 0), new ScheduledTask(10, 19, 1), new ScheduledTask(0, 3, 0)};
        int[] expectedProcessorEndTimes = new int[]{68, 62};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 40;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(37, 40, 0), new ScheduledTask(28, 37, 0), new ScheduledTask(23, 33, 1), new ScheduledTask(29, 34, 3), new ScheduledTask(18, 20, 3), new ScheduledTask(14, 24, 2), new ScheduledTask(21, 28, 0), new ScheduledTask(11, 17, 1), new ScheduledTask(17, 23, 1), new ScheduledTask(13, 16, 0), new ScheduledTask(19, 21, 0), new ScheduledTask(7, 13, 0), new ScheduledTask(20, 29, 3), new ScheduledTask(10, 18, 3), new ScheduledTask(7, 11, 1), new ScheduledTask(0, 10, 3), new ScheduledTask(9, 13, 2), new ScheduledTask(0, 7, 1), new ScheduledTask(0, 7, 0), new ScheduledTask(0, 9, 2), new ScheduledTask(16, 19, 0)};
        int[] expectedProcessorEndTimes = new int[]{40, 33, 24, 34};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(34, 37, 0), new ScheduledTask(25, 34, 0), new ScheduledTask(20, 30, 1), new ScheduledTask(26, 31, 3), new ScheduledTask(18, 20, 3), new ScheduledTask(11, 21, 2), new ScheduledTask(18, 25, 0), new ScheduledTask(9, 15, 5), new ScheduledTask(7, 13, 1), new ScheduledTask(13, 16, 1), new ScheduledTask(15, 17, 5), new ScheduledTask(20, 26, 3), new ScheduledTask(8, 17, 4), new ScheduledTask(0, 8, 4), new ScheduledTask(7, 11, 2), new ScheduledTask(7, 17, 3), new ScheduledTask(0, 4, 1), new ScheduledTask(0, 7, 2), new ScheduledTask(0, 7, 3), new ScheduledTask(0, 9, 5), new ScheduledTask(4, 7, 1)};
        int[] expectedProcessorEndTimes = new int[]{37, 30, 21, 31, 17, 17};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random3_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random#3_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(8200, 8205, 0), new ScheduledTask(7600, 7606, 0), new ScheduledTask(4800, 4808, 0), new ScheduledTask(1800, 1810, 1), new ScheduledTask(3700, 3706, 2), new ScheduledTask(7000, 7005, 0), new ScheduledTask(5400, 5402, 3), new ScheduledTask(4400, 4404, 0), new ScheduledTask(2400, 2402, 2), new ScheduledTask(2900, 2908, 0), new ScheduledTask(1000, 1002, 0), new ScheduledTask(0, 10, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(0, 4, 2), new ScheduledTask(1200, 1209, 0), new ScheduledTask(2100, 2108, 0), new ScheduledTask(5600, 5608, 0), new ScheduledTask(6800, 6802, 0), new ScheduledTask(6400, 6404, 0), new ScheduledTask(3700, 3707, 0), new ScheduledTask(0, 9, 3)};
        int[] expectedProcessorEndTimes = new int[]{8205, 1810, 3706, 5402};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random3_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random#3_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(5100, 5105, 0), new ScheduledTask(4500, 4506, 0), new ScheduledTask(2800, 2808, 3), new ScheduledTask(2600, 2610, 1), new ScheduledTask(3000, 3006, 2), new ScheduledTask(2200, 2205, 0), new ScheduledTask(4300, 4302, 0), new ScheduledTask(400, 404, 3), new ScheduledTask(0, 2, 3), new ScheduledTask(1200, 1208, 3), new ScheduledTask(1800, 1802, 2), new ScheduledTask(0, 10, 1), new ScheduledTask(2000, 2003, 1), new ScheduledTask(2200, 2204, 2), new ScheduledTask(0, 9, 2), new ScheduledTask(0, 8, 0), new ScheduledTask(800, 808, 0), new ScheduledTask(2000, 2002, 0), new ScheduledTask(1600, 1604, 0), new ScheduledTask(3600, 3607, 0), new ScheduledTask(2700, 2709, 0)};
        int[] expectedProcessorEndTimes = new int[]{5105, 2610, 3006, 2808};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random3_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random#3_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4860;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(4360, 4365, 0), new ScheduledTask(3700, 3706, 0), new ScheduledTask(2400, 2408, 2), new ScheduledTask(2760, 2770, 1), new ScheduledTask(2200, 2206, 3), new ScheduledTask(2160, 2165, 1), new ScheduledTask(3500, 3502, 0), new ScheduledTask(1500, 1504, 2), new ScheduledTask(0, 2, 3), new ScheduledTask(0, 8, 1), new ScheduledTask(2100, 2102, 2), new ScheduledTask(0, 10, 2), new ScheduledTask(1600, 1603, 0), new ScheduledTask(800, 804, 0), new ScheduledTask(400, 409, 3), new ScheduledTask(0, 8, 0), new ScheduledTask(960, 968, 1), new ScheduledTask(1920, 1922, 1), new ScheduledTask(1200, 1204, 0), new ScheduledTask(2800, 2807, 0), new ScheduledTask(1900, 1909, 0)};
        int[] expectedProcessorEndTimes = new int[]{4365, 2770, 2408, 2206};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(61, 66, 0), new ScheduledTask(45, 51, 0), new ScheduledTask(53, 61, 0), new ScheduledTask(47, 57, 1), new ScheduledTask(19, 25, 1), new ScheduledTask(26, 31, 0), new ScheduledTask(41, 43, 0), new ScheduledTask(34, 38, 1), new ScheduledTask(51, 53, 0), new ScheduledTask(38, 46, 1), new ScheduledTask(43, 45, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(38, 41, 0), new ScheduledTask(8, 12, 0), new ScheduledTask(10, 19, 1), new ScheduledTask(0, 8, 0), new ScheduledTask(12, 20, 0), new ScheduledTask(24, 26, 0), new ScheduledTask(20, 24, 0), new ScheduledTask(31, 38, 0), new ScheduledTask(25, 34, 1)};
        int[] expectedProcessorEndTimes = new int[]{66, 57};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 40;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(35, 40, 0), new ScheduledTask(29, 35, 0), new ScheduledTask(20, 28, 3), new ScheduledTask(21, 31, 1), new ScheduledTask(20, 26, 2), new ScheduledTask(21, 26, 0), new ScheduledTask(26, 28, 0), new ScheduledTask(16, 20, 3), new ScheduledTask(0, 2, 1), new ScheduledTask(0, 8, 0), new ScheduledTask(19, 21, 1), new ScheduledTask(2, 12, 1), new ScheduledTask(16, 19, 1), new ScheduledTask(16, 20, 2), new ScheduledTask(0, 9, 2), new ScheduledTask(0, 8, 3), new ScheduledTask(8, 16, 3), new ScheduledTask(17, 19, 0), new ScheduledTask(12, 16, 1), new ScheduledTask(9, 16, 2), new ScheduledTask(8, 17, 0)};
        int[] expectedProcessorEndTimes = new int[]{40, 31, 26, 28};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(30, 35, 0), new ScheduledTask(24, 30, 0), new ScheduledTask(15, 23, 2), new ScheduledTask(16, 26, 1), new ScheduledTask(18, 24, 0), new ScheduledTask(10, 15, 3), new ScheduledTask(13, 15, 4), new ScheduledTask(0, 4, 4), new ScheduledTask(0, 2, 3), new ScheduledTask(7, 15, 2), new ScheduledTask(12, 14, 5), new ScheduledTask(6, 16, 1), new ScheduledTask(9, 12, 5), new ScheduledTask(0, 4, 1), new ScheduledTask(0, 9, 5), new ScheduledTask(4, 12, 0), new ScheduledTask(2, 10, 3), new ScheduledTask(4, 6, 1), new ScheduledTask(0, 4, 0), new ScheduledTask(0, 7, 2), new ScheduledTask(4, 13, 4)};
        int[] expectedProcessorEndTimes = new int[]{35, 26, 23, 15, 15, 14};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 14;
        int expectedScheduleEndTime = 39;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(34, 39, 0), new ScheduledTask(24, 34, 0), new ScheduledTask(16, 24, 1), new ScheduledTask(19, 29, 3), new ScheduledTask(11, 19, 3), new ScheduledTask(14, 19, 2), new ScheduledTask(14, 20, 0), new ScheduledTask(0, 4, 10), new ScheduledTask(0, 6, 8), new ScheduledTask(0, 7, 6), new ScheduledTask(0, 10, 4), new ScheduledTask(0, 2, 12), new ScheduledTask(0, 2, 13), new ScheduledTask(0, 3, 11), new ScheduledTask(0, 5, 3), new ScheduledTask(5, 10, 3), new ScheduledTask(7, 14, 2), new ScheduledTask(0, 5, 9), new ScheduledTask(0, 7, 2), new ScheduledTask(0, 8, 5), new ScheduledTask(0, 7, 7)};
        int[] expectedProcessorEndTimes = new int[]{39, 24, 19, 29, 10, 8, 7, 7, 6, 5, 4, 3, 2, 2};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(64, 69, 0), new ScheduledTask(42, 52, 0), new ScheduledTask(56, 64, 0), new ScheduledTask(52, 62, 1), new ScheduledTask(25, 33, 0), new ScheduledTask(14, 19, 1), new ScheduledTask(27, 33, 1), new ScheduledTask(52, 56, 0), new ScheduledTask(33, 39, 0), new ScheduledTask(43, 50, 1), new ScheduledTask(33, 43, 1), new ScheduledTask(39, 41, 0), new ScheduledTask(50, 52, 1), new ScheduledTask(22, 25, 0), new ScheduledTask(12, 17, 0), new ScheduledTask(17, 22, 0), new ScheduledTask(7, 14, 1), new ScheduledTask(0, 5, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(19, 27, 1), new ScheduledTask(5, 12, 0)};
        int[] expectedProcessorEndTimes = new int[]{69, 62};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 42;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(37, 42, 0), new ScheduledTask(27, 37, 0), new ScheduledTask(23, 31, 1), new ScheduledTask(25, 35, 3), new ScheduledTask(19, 27, 0), new ScheduledTask(17, 22, 2), new ScheduledTask(11, 17, 1), new ScheduledTask(7, 11, 1), new ScheduledTask(17, 23, 1), new ScheduledTask(8, 15, 3), new ScheduledTask(15, 25, 3), new ScheduledTask(15, 17, 0), new ScheduledTask(17, 19, 0), new ScheduledTask(7, 10, 2), new ScheduledTask(0, 5, 0), new ScheduledTask(10, 15, 0), new ScheduledTask(0, 7, 2), new ScheduledTask(5, 10, 0), new ScheduledTask(10, 17, 2), new ScheduledTask(0, 8, 3), new ScheduledTask(0, 7, 1)};
        int[] expectedProcessorEndTimes = new int[]{42, 31, 22, 35};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 39;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(34, 39, 0), new ScheduledTask(24, 34, 0), new ScheduledTask(20, 28, 1), new ScheduledTask(19, 29, 2), new ScheduledTask(11, 19, 3), new ScheduledTask(14, 19, 2), new ScheduledTask(18, 24, 0), new ScheduledTask(0, 4, 7), new ScheduledTask(5, 11, 6), new ScheduledTask(11, 18, 6), new ScheduledTask(0, 10, 4), new ScheduledTask(11, 13, 7), new ScheduledTask(13, 15, 7), new ScheduledTask(0, 3, 5), new ScheduledTask(0, 5, 3), new ScheduledTask(5, 10, 3), new ScheduledTask(7, 14, 2), new ScheduledTask(0, 5, 6), new ScheduledTask(0, 7, 2), new ScheduledTask(3, 11, 5), new ScheduledTask(4, 11, 7)};
        int[] expectedProcessorEndTimes = new int[]{39, 28, 29, 19, 10, 11, 18, 15};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(9400, 9402, 0), new ScheduledTask(8500, 8509, 0), new ScheduledTask(4400, 4408, 3), new ScheduledTask(4200, 4208, 1), new ScheduledTask(7800, 7807, 0), new ScheduledTask(5900, 5909, 0), new ScheduledTask(4800, 4805, 2), new ScheduledTask(0, 4, 3), new ScheduledTask(2400, 2403, 3), new ScheduledTask(0, 7, 1), new ScheduledTask(2000, 2008, 0), new ScheduledTask(2800, 2806, 0), new ScheduledTask(0, 10, 0), new ScheduledTask(6800, 6807, 0), new ScheduledTask(7500, 7503, 0), new ScheduledTask(0, 8, 2), new ScheduledTask(5500, 5504, 0), new ScheduledTask(3800, 3810, 0), new ScheduledTask(4800, 4807, 0), new ScheduledTask(1000, 1010, 0), new ScheduledTask(3400, 3404, 0)};
        int[] expectedProcessorEndTimes = new int[]{9402, 4208, 4805, 4408};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 6200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(6000, 6002, 0), new ScheduledTask(5000, 5009, 0), new ScheduledTask(4200, 4208, 2), new ScheduledTask(4200, 4208, 1), new ScheduledTask(2600, 2607, 3), new ScheduledTask(4100, 4109, 0), new ScheduledTask(3200, 3205, 2), new ScheduledTask(2600, 2604, 0), new ScheduledTask(2000, 2003, 1), new ScheduledTask(1900, 1907, 0), new ScheduledTask(2600, 2608, 1), new ScheduledTask(2000, 2006, 2), new ScheduledTask(0, 10, 3), new ScheduledTask(800, 807, 0), new ScheduledTask(2000, 2003, 3), new ScheduledTask(0, 8, 0), new ScheduledTask(3700, 3704, 0), new ScheduledTask(0, 10, 2), new ScheduledTask(3000, 3007, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(1500, 1504, 0)};
        int[] expectedProcessorEndTimes = new int[]{6002, 4208, 4208, 2607};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5160;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(4960, 4962, 0), new ScheduledTask(4060, 4069, 0), new ScheduledTask(3800, 3808, 1), new ScheduledTask(3450, 3458, 2), new ScheduledTask(3300, 3307, 0), new ScheduledTask(1680, 1689, 1), new ScheduledTask(2760, 2765, 1), new ScheduledTask(1400, 1404, 3), new ScheduledTask(3360, 3363, 1), new ScheduledTask(2200, 2207, 3), new ScheduledTask(1100, 1108, 0), new ScheduledTask(1900, 1906, 0), new ScheduledTask(1950, 1960, 2), new ScheduledTask(0, 7, 3), new ScheduledTask(1500, 1503, 2), new ScheduledTask(2500, 2508, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(480, 490, 1), new ScheduledTask(0, 7, 0), new ScheduledTask(0, 10, 2), new ScheduledTask(700, 704, 0)};
        int[] expectedProcessorEndTimes = new int[]{4962, 3808, 3458, 2207};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(70, 72, 0), new ScheduledTask(61, 70, 0), new ScheduledTask(60, 68, 1), new ScheduledTask(18, 26, 1), new ScheduledTask(54, 61, 0), new ScheduledTask(31, 40, 0), new ScheduledTask(36, 41, 1), new ScheduledTask(56, 60, 1), new ScheduledTask(47, 50, 0), new ScheduledTask(49, 56, 1), new ScheduledTask(0, 8, 1), new ScheduledTask(0, 6, 0), new ScheduledTask(8, 18, 1), new ScheduledTask(40, 47, 0), new ScheduledTask(50, 53, 0), new ScheduledTask(41, 49, 1), new ScheduledTask(27, 31, 0), new ScheduledTask(6, 16, 0), new ScheduledTask(20, 27, 0), new ScheduledTask(26, 36, 1), new ScheduledTask(16, 20, 0)};
        int[] expectedProcessorEndTimes = new int[]{72, 68};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 41;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(39, 41, 0), new ScheduledTask(30, 39, 0), new ScheduledTask(29, 37, 2), new ScheduledTask(28, 36, 1), new ScheduledTask(13, 20, 1), new ScheduledTask(21, 30, 0), new ScheduledTask(18, 23, 2), new ScheduledTask(23, 27, 2), new ScheduledTask(18, 21, 0), new ScheduledTask(20, 27, 3), new ScheduledTask(20, 28, 1), new ScheduledTask(7, 13, 1), new ScheduledTask(10, 20, 3), new ScheduledTask(0, 7, 1), new ScheduledTask(4, 7, 0), new ScheduledTask(0, 8, 2), new ScheduledTask(14, 18, 0), new ScheduledTask(0, 10, 3), new ScheduledTask(7, 14, 0), new ScheduledTask(8, 18, 2), new ScheduledTask(0, 4, 0)};
        int[] expectedProcessorEndTimes = new int[]{41, 36, 37, 27};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot00_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_1.00_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(8600, 8604, 0), new ScheduledTask(8400, 8402, 0), new ScheduledTask(4500, 4508, 0), new ScheduledTask(2400, 2409, 1), new ScheduledTask(3400, 3407, 2), new ScheduledTask(8100, 8103, 0), new ScheduledTask(4800, 4805, 3), new ScheduledTask(0, 5, 2), new ScheduledTask(4000, 4005, 0), new ScheduledTask(2700, 2707, 0), new ScheduledTask(900, 906, 0), new ScheduledTask(0, 2, 3), new ScheduledTask(0, 9, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(1500, 1509, 0), new ScheduledTask(2400, 2403, 0), new ScheduledTask(6300, 6309, 0), new ScheduledTask(5300, 5310, 0), new ScheduledTask(7200, 7209, 0), new ScheduledTask(1200, 1206, 3), new ScheduledTask(3400, 3406, 0)};
        int[] expectedProcessorEndTimes = new int[]{8604, 2409, 3407, 4805};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot00_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_1.00_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(5400, 5404, 0), new ScheduledTask(5200, 5202, 0), new ScheduledTask(3400, 3408, 1), new ScheduledTask(2900, 2909, 0), new ScheduledTask(4200, 4207, 0), new ScheduledTask(4900, 4903, 0), new ScheduledTask(3600, 3605, 2), new ScheduledTask(1900, 1905, 0), new ScheduledTask(2400, 2405, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(1200, 1202, 1), new ScheduledTask(0, 9, 3), new ScheduledTask(3800, 3804, 0), new ScheduledTask(0, 9, 2), new ScheduledTask(1800, 1803, 3), new ScheduledTask(1800, 1809, 2), new ScheduledTask(2400, 2410, 3), new ScheduledTask(1600, 1609, 1), new ScheduledTask(700, 706, 0), new ScheduledTask(1300, 1306, 0)};
        int[] expectedProcessorEndTimes = new int[]{5404, 3408, 3605, 2410};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot00_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_1.00_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4950;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(4550, 4554, 0), new ScheduledTask(4350, 4352, 0), new ScheduledTask(3240, 3248, 1), new ScheduledTask(2000, 2009, 3), new ScheduledTask(1950, 1957, 2), new ScheduledTask(4000, 4003, 0), new ScheduledTask(3000, 3005, 2), new ScheduledTask(2640, 2645, 1), new ScheduledTask(1700, 1705, 0), new ScheduledTask(1800, 1807, 1), new ScheduledTask(0, 6, 0), new ScheduledTask(600, 602, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(1350, 1354, 2), new ScheduledTask(0, 9, 2), new ScheduledTask(800, 803, 0), new ScheduledTask(2200, 2209, 0), new ScheduledTask(0, 10, 3), new ScheduledTask(3100, 3109, 0), new ScheduledTask(1080, 1086, 1), new ScheduledTask(1100, 1106, 0)};
        int[] expectedProcessorEndTimes = new int[]{4554, 3248, 3005, 2009};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(64, 68, 0), new ScheduledTask(61, 63, 0), new ScheduledTask(53, 61, 1), new ScheduledTask(15, 24, 1), new ScheduledTask(33, 40, 1), new ScheduledTask(50, 53, 1), new ScheduledTask(56, 61, 0), new ScheduledTask(40, 45, 0), new ScheduledTask(45, 50, 0), new ScheduledTask(27, 34, 0), new ScheduledTask(9, 15, 1), new ScheduledTask(0, 2, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(20, 24, 0), new ScheduledTask(24, 33, 1), new ScheduledTask(24, 27, 0), new ScheduledTask(2, 11, 0), new ScheduledTask(40, 50, 1), new ScheduledTask(11, 20, 0), new ScheduledTask(34, 40, 0), new ScheduledTask(50, 56, 0)};
        int[] expectedProcessorEndTimes = new int[]{68, 61};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 40;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(36, 40, 0), new ScheduledTask(34, 36, 0), new ScheduledTask(25, 33, 2), new ScheduledTask(22, 31, 0), new ScheduledTask(20, 27, 1), new ScheduledTask(31, 34, 0), new ScheduledTask(23, 28, 3), new ScheduledTask(15, 20, 1), new ScheduledTask(15, 20, 0), new ScheduledTask(18, 25, 2), new ScheduledTask(0, 6, 1), new ScheduledTask(20, 22, 0), new ScheduledTask(0, 9, 3), new ScheduledTask(9, 13, 3), new ScheduledTask(0, 9, 2), new ScheduledTask(6, 9, 0), new ScheduledTask(9, 18, 2), new ScheduledTask(13, 23, 3), new ScheduledTask(6, 15, 1), new ScheduledTask(0, 6, 0), new ScheduledTask(9, 15, 0)};
        int[] expectedProcessorEndTimes = new int[]{40, 27, 33, 28};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(28, 32, 0), new ScheduledTask(26, 28, 0), new ScheduledTask(17, 25, 2), new ScheduledTask(17, 26, 0), new ScheduledTask(12, 19, 1), new ScheduledTask(15, 18, 3), new ScheduledTask(15, 20, 4), new ScheduledTask(4, 9, 4), new ScheduledTask(9, 14, 5), new ScheduledTask(10, 17, 2), new ScheduledTask(0, 6, 3), new ScheduledTask(15, 17, 0), new ScheduledTask(6, 15, 0), new ScheduledTask(0, 4, 4), new ScheduledTask(0, 9, 1), new ScheduledTask(9, 12, 1), new ScheduledTask(6, 15, 3), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 9, 5), new ScheduledTask(9, 15, 4), new ScheduledTask(0, 6, 0)};
        int[] expectedProcessorEndTimes = new int[]{32, 19, 25, 18, 20, 14};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot01_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_1.01_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 11200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(10000, 10012, 0), new ScheduledTask(9200, 9208, 0), new ScheduledTask(4800, 4808, 1), new ScheduledTask(2500, 2511, 2), new ScheduledTask(7800, 7807, 0), new ScheduledTask(5400, 5404, 3), new ScheduledTask(8900, 8903, 0), new ScheduledTask(2900, 2905, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(2100, 2108, 0), new ScheduledTask(0, 4, 2), new ScheduledTask(1100, 1105, 0), new ScheduledTask(1600, 1605, 0), new ScheduledTask(4900, 4913, 0), new ScheduledTask(7300, 7305, 0), new ScheduledTask(6200, 6211, 0), new ScheduledTask(4100, 4108, 0), new ScheduledTask(0, 11, 0), new ScheduledTask(3400, 3407, 0), new ScheduledTask(8500, 8504, 0), new ScheduledTask(0, 9, 3)};
        int[] expectedProcessorEndTimes = new int[]{10012, 4808, 2511, 5404};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot01_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_1.01_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 7500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(6300, 6312, 0), new ScheduledTask(5500, 5508, 0), new ScheduledTask(4400, 4408, 1), new ScheduledTask(3600, 3611, 2), new ScheduledTask(3600, 3607, 0), new ScheduledTask(5100, 5104, 0), new ScheduledTask(3800, 3803, 1), new ScheduledTask(1800, 1805, 2), new ScheduledTask(0, 8, 1), new ScheduledTask(1300, 1308, 0), new ScheduledTask(2800, 2804, 2), new ScheduledTask(2100, 2105, 0), new ScheduledTask(2600, 2605, 0), new ScheduledTask(0, 13, 0), new ScheduledTask(3100, 3105, 0), new ScheduledTask(0, 11, 3), new ScheduledTask(4300, 4308, 0), new ScheduledTask(2200, 2211, 3), new ScheduledTask(1600, 1607, 1), new ScheduledTask(3000, 3004, 1), new ScheduledTask(0, 9, 2)};
        int[] expectedProcessorEndTimes = new int[]{6312, 4408, 3611, 2211};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot01_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_1.01_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 6500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(5300, 5312, 0), new ScheduledTask(4500, 4508, 0), new ScheduledTask(4080, 4088, 1), new ScheduledTask(3150, 3161, 2), new ScheduledTask(3800, 3807, 0), new ScheduledTask(2640, 2644, 1), new ScheduledTask(2800, 2803, 3), new ScheduledTask(1800, 1805, 3), new ScheduledTask(3120, 3128, 1), new ScheduledTask(2500, 2508, 0), new ScheduledTask(2550, 2554, 2), new ScheduledTask(1500, 1505, 0), new ScheduledTask(2000, 2005, 0), new ScheduledTask(600, 613, 2), new ScheduledTask(3300, 3305, 0), new ScheduledTask(0, 11, 1), new ScheduledTask(0, 8, 0), new ScheduledTask(1320, 1331, 1), new ScheduledTask(800, 807, 0), new ScheduledTask(0, 4, 2), new ScheduledTask(0, 9, 3)};
        int[] expectedProcessorEndTimes = new int[]{5312, 4088, 3161, 2803};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 85;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(73, 85, 0), new ScheduledTask(65, 73, 0), new ScheduledTask(63, 71, 1), new ScheduledTask(22, 33, 1), new ScheduledTask(32, 39, 0), new ScheduledTask(54, 58, 0), new ScheduledTask(62, 65, 0), new ScheduledTask(58, 63, 1), new ScheduledTask(42, 50, 1), new ScheduledTask(50, 58, 1), new ScheduledTask(5, 9, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(9, 14, 0), new ScheduledTask(14, 27, 0), new ScheduledTask(27, 32, 0), new ScheduledTask(0, 11, 1), new ScheduledTask(39, 47, 0), new ScheduledTask(11, 22, 1), new ScheduledTask(47, 54, 0), new ScheduledTask(58, 62, 0), new ScheduledTask(33, 42, 1)};
        int[] expectedProcessorEndTimes = new int[]{85, 71};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(42, 54, 0), new ScheduledTask(34, 42, 0), new ScheduledTask(32, 40, 1), new ScheduledTask(26, 37, 2), new ScheduledTask(23, 30, 0), new ScheduledTask(30, 34, 0), new ScheduledTask(21, 24, 1), new ScheduledTask(7, 12, 3), new ScheduledTask(24, 32, 1), new ScheduledTask(17, 25, 3), new ScheduledTask(22, 26, 2), new ScheduledTask(12, 17, 3), new ScheduledTask(13, 18, 0), new ScheduledTask(0, 13, 1), new ScheduledTask(18, 23, 0), new ScheduledTask(0, 11, 2), new ScheduledTask(13, 21, 1), new ScheduledTask(11, 22, 2), new ScheduledTask(0, 7, 3), new ScheduledTask(9, 13, 0), new ScheduledTask(0, 9, 0)};
        int[] expectedProcessorEndTimes = new int[]{54, 40, 37, 25};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 48;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(36, 48, 0), new ScheduledTask(28, 36, 0), new ScheduledTask(26, 34, 1), new ScheduledTask(20, 31, 2), new ScheduledTask(21, 28, 0), new ScheduledTask(17, 21, 0), new ScheduledTask(14, 17, 3), new ScheduledTask(16, 21, 1), new ScheduledTask(8, 16, 5), new ScheduledTask(11, 19, 4), new ScheduledTask(12, 16, 2), new ScheduledTask(9, 14, 3), new ScheduledTask(11, 16, 1), new ScheduledTask(4, 17, 0), new ScheduledTask(7, 12, 2), new ScheduledTask(0, 11, 1), new ScheduledTask(0, 8, 5), new ScheduledTask(0, 11, 4), new ScheduledTask(0, 7, 2), new ScheduledTask(0, 4, 0), new ScheduledTask(0, 9, 3)};
        int[] expectedProcessorEndTimes = new int[]{48, 34, 31, 17, 19, 16};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot06_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_1.06_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(8300, 8306, 0), new ScheduledTask(7800, 7804, 0), new ScheduledTask(1800, 1810, 1), new ScheduledTask(3000, 3007, 3), new ScheduledTask(5400, 5402, 2), new ScheduledTask(7100, 7107, 0), new ScheduledTask(4600, 4609, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(0, 8, 0), new ScheduledTask(800, 804, 0), new ScheduledTask(2200, 2203, 0), new ScheduledTask(1800, 1804, 0), new ScheduledTask(1200, 1206, 0), new ScheduledTask(0, 9, 2), new ScheduledTask(2500, 2508, 0), new ScheduledTask(0, 5, 3), new ScheduledTask(6200, 6206, 0), new ScheduledTask(6800, 6803, 0), new ScheduledTask(5500, 5507, 0), new ScheduledTask(4100, 4105, 0), new ScheduledTask(3300, 3308, 0)};
        int[] expectedProcessorEndTimes = new int[]{8306, 1810, 5402, 3007};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot06_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_1.06_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(5300, 5306, 0), new ScheduledTask(4800, 4804, 0), new ScheduledTask(2800, 2810, 2), new ScheduledTask(2900, 2907, 3), new ScheduledTask(2500, 2502, 3), new ScheduledTask(2800, 2807, 1), new ScheduledTask(3900, 3909, 0), new ScheduledTask(0, 3, 3), new ScheduledTask(1200, 1208, 2), new ScheduledTask(1200, 1204, 0), new ScheduledTask(2300, 2303, 0), new ScheduledTask(1900, 1904, 0), new ScheduledTask(0, 6, 2), new ScheduledTask(600, 609, 3), new ScheduledTask(0, 8, 1), new ScheduledTask(700, 705, 0), new ScheduledTask(1600, 1606, 1), new ScheduledTask(1600, 1603, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(3400, 3405, 0), new ScheduledTask(2600, 2608, 0)};
        int[] expectedProcessorEndTimes = new int[]{5306, 2807, 2810, 2907};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot06_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_1.06_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5040;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(4440, 4446, 0), new ScheduledTask(3360, 3364, 1), new ScheduledTask(2400, 2410, 2), new ScheduledTask(3600, 3607, 0), new ScheduledTask(3120, 3122, 1), new ScheduledTask(2000, 2007, 0), new ScheduledTask(2040, 2049, 1), new ScheduledTask(1950, 1953, 2), new ScheduledTask(0, 8, 3), new ScheduledTask(1350, 1354, 2), new ScheduledTask(3300, 3303, 0), new ScheduledTask(2600, 2604, 3), new ScheduledTask(2700, 2706, 0), new ScheduledTask(0, 9, 2), new ScheduledTask(1080, 1088, 1), new ScheduledTask(1600, 1605, 3), new ScheduledTask(0, 6, 1), new ScheduledTask(720, 723, 1), new ScheduledTask(1300, 1307, 0), new ScheduledTask(800, 805, 0), new ScheduledTask(0, 8, 0)};
        int[] expectedProcessorEndTimes = new int[]{4446, 3364, 2410, 2604};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot06_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_1.06_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(62, 68, 0), new ScheduledTask(58, 62, 0), new ScheduledTask(46, 56, 1), new ScheduledTask(24, 31, 1), new ScheduledTask(22, 24, 1), new ScheduledTask(51, 58, 0), new ScheduledTask(26, 35, 0), new ScheduledTask(35, 38, 0), new ScheduledTask(38, 46, 1), new ScheduledTask(38, 42, 0), new ScheduledTask(18, 21, 0), new ScheduledTask(14, 18, 0), new ScheduledTask(16, 22, 1), new ScheduledTask(0, 9, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(9, 14, 0), new ScheduledTask(42, 48, 0), new ScheduledTask(48, 51, 0), new ScheduledTask(31, 38, 1), new ScheduledTask(21, 26, 0), new ScheduledTask(8, 16, 1)};
        int[] expectedProcessorEndTimes = new int[]{68, 56};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot06_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_1.06_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 42;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(36, 42, 0), new ScheduledTask(32, 36, 0), new ScheduledTask(21, 31, 2), new ScheduledTask(19, 26, 3), new ScheduledTask(29, 31, 0), new ScheduledTask(19, 26, 1), new ScheduledTask(20, 29, 0), new ScheduledTask(8, 11, 3), new ScheduledTask(0, 8, 3), new ScheduledTask(17, 21, 2), new ScheduledTask(12, 15, 0), new ScheduledTask(8, 12, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(8, 17, 2), new ScheduledTask(11, 19, 3), new ScheduledTask(0, 5, 0), new ScheduledTask(13, 19, 1), new ScheduledTask(5, 8, 0), new ScheduledTask(6, 13, 1), new ScheduledTask(15, 20, 0), new ScheduledTask(0, 8, 2)};
        int[] expectedProcessorEndTimes = new int[]{42, 26, 31, 26};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot06_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_1.06_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 36;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(30, 36, 0), new ScheduledTask(26, 30, 0), new ScheduledTask(15, 25, 3), new ScheduledTask(13, 20, 4), new ScheduledTask(24, 26, 0), new ScheduledTask(13, 20, 2), new ScheduledTask(8, 17, 1), new ScheduledTask(10, 13, 3), new ScheduledTask(0, 8, 4), new ScheduledTask(8, 12, 4), new ScheduledTask(3, 6, 0), new ScheduledTask(6, 10, 3), new ScheduledTask(0, 6, 3), new ScheduledTask(5, 14, 5), new ScheduledTask(6, 14, 0), new ScheduledTask(14, 19, 5), new ScheduledTask(7, 13, 2), new ScheduledTask(0, 3, 0), new ScheduledTask(0, 7, 2), new ScheduledTask(0, 5, 5), new ScheduledTask(0, 8, 1)};
        int[] expectedProcessorEndTimes = new int[]{36, 17, 20, 25, 20, 19};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot06_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_1.06_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(8500, 8505, 0), new ScheduledTask(5900, 5908, 0), new ScheduledTask(8200, 8203, 0), new ScheduledTask(7400, 7408, 0), new ScheduledTask(5200, 5207, 0), new ScheduledTask(2400, 2402, 1), new ScheduledTask(2600, 2607, 0), new ScheduledTask(3600, 3606, 1), new ScheduledTask(5400, 5403, 3), new ScheduledTask(6000, 6003, 2), new ScheduledTask(0, 9, 3), new ScheduledTask(6700, 6707, 0), new ScheduledTask(0, 10, 2), new ScheduledTask(3300, 3307, 0), new ScheduledTask(4000, 4007, 0), new ScheduledTask(4700, 4705, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(0, 8, 0), new ScheduledTask(800, 805, 0), new ScheduledTask(2100, 2105, 0), new ScheduledTask(1300, 1308, 0)};
        int[] expectedProcessorEndTimes = new int[]{8505, 3606, 6003, 5403};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot06_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_1.06_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(5400, 5405, 0), new ScheduledTask(4300, 4308, 0), new ScheduledTask(5100, 5103, 0), new ScheduledTask(3200, 3208, 1), new ScheduledTask(3600, 3607, 0), new ScheduledTask(3000, 3002, 2), new ScheduledTask(1800, 1807, 1), new ScheduledTask(3000, 3006, 3), new ScheduledTask(3400, 3403, 2), new ScheduledTask(4000, 4003, 2), new ScheduledTask(800, 809, 0), new ScheduledTask(0, 7, 2), new ScheduledTask(0, 10, 3), new ScheduledTask(2200, 2207, 0), new ScheduledTask(2900, 2907, 0), new ScheduledTask(2000, 2005, 3), new ScheduledTask(1000, 1004, 1), new ScheduledTask(1400, 1408, 2), new ScheduledTask(1700, 1705, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(0, 8, 0)};
        int[] expectedProcessorEndTimes = new int[]{5405, 3208, 4003, 3006};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot06_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_1.06_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(4600, 4605, 0), new ScheduledTask(3500, 3508, 0), new ScheduledTask(4300, 4303, 0), new ScheduledTask(3000, 3008, 1), new ScheduledTask(2800, 2807, 0), new ScheduledTask(2000, 2002, 3), new ScheduledTask(1800, 1807, 2), new ScheduledTask(2400, 2406, 3), new ScheduledTask(2850, 2853, 2), new ScheduledTask(3300, 3303, 2), new ScheduledTask(1920, 1929, 1), new ScheduledTask(750, 757, 2), new ScheduledTask(0, 10, 3), new ScheduledTask(1600, 1607, 0), new ScheduledTask(1080, 1087, 1), new ScheduledTask(2300, 2305, 0), new ScheduledTask(600, 604, 1), new ScheduledTask(800, 808, 0), new ScheduledTask(0, 5, 2), new ScheduledTask(0, 5, 1), new ScheduledTask(0, 8, 0)};
        int[] expectedProcessorEndTimes = new int[]{4605, 3008, 3303, 2406};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot06_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_1.06_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(64, 69, 0), new ScheduledTask(56, 64, 0), new ScheduledTask(47, 50, 1), new ScheduledTask(50, 58, 1), new ScheduledTask(42, 49, 0), new ScheduledTask(45, 47, 1), new ScheduledTask(49, 56, 0), new ScheduledTask(12, 18, 0), new ScheduledTask(0, 3, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(33, 42, 0), new ScheduledTask(20, 27, 1), new ScheduledTask(35, 45, 1), new ScheduledTask(18, 25, 0), new ScheduledTask(13, 20, 1), new ScheduledTask(8, 13, 1), new ScheduledTask(3, 7, 0), new ScheduledTask(27, 35, 1), new ScheduledTask(7, 12, 0), new ScheduledTask(3, 8, 1), new ScheduledTask(25, 33, 0)};
        int[] expectedProcessorEndTimes = new int[]{69, 58};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot06_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_1.06_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 42;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(37, 42, 0), new ScheduledTask(26, 34, 0), new ScheduledTask(34, 37, 0), new ScheduledTask(22, 30, 1), new ScheduledTask(19, 26, 0), new ScheduledTask(19, 21, 3), new ScheduledTask(15, 22, 2), new ScheduledTask(21, 27, 3), new ScheduledTask(22, 25, 2), new ScheduledTask(27, 30, 3), new ScheduledTask(5, 14, 3), new ScheduledTask(15, 22, 1), new ScheduledTask(0, 10, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(0, 7, 2), new ScheduledTask(14, 19, 0), new ScheduledTask(10, 14, 0), new ScheduledTask(7, 15, 1), new ScheduledTask(14, 19, 3), new ScheduledTask(0, 5, 3), new ScheduledTask(7, 15, 2)};
        int[] expectedProcessorEndTimes = new int[]{42, 30, 25, 30};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot06_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_1.06_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 36;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(31, 36, 0), new ScheduledTask(23, 31, 0), new ScheduledTask(17, 20, 3), new ScheduledTask(17, 25, 1), new ScheduledTask(14, 21, 0), new ScheduledTask(16, 18, 4), new ScheduledTask(13, 20, 2), new ScheduledTask(11, 17, 3), new ScheduledTask(5, 8, 0), new ScheduledTask(9, 12, 5), new ScheduledTask(0, 9, 5), new ScheduledTask(0, 7, 4), new ScheduledTask(7, 17, 1), new ScheduledTask(0, 7, 1), new ScheduledTask(0, 7, 3), new ScheduledTask(8, 13, 0), new ScheduledTask(7, 11, 3), new ScheduledTask(7, 15, 4), new ScheduledTask(0, 5, 2), new ScheduledTask(0, 5, 0), new ScheduledTask(5, 13, 2)};
        int[] expectedProcessorEndTimes = new int[]{36, 25, 20, 20, 18, 12};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot10_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_1.10_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(7400, 7408, 0), new ScheduledTask(6700, 6704, 0), new ScheduledTask(7100, 7103, 0), new ScheduledTask(4800, 4803, 2), new ScheduledTask(2500, 2505, 1), new ScheduledTask(3100, 3107, 0), new ScheduledTask(5400, 5408, 0), new ScheduledTask(1200, 1209, 3), new ScheduledTask(6200, 6205, 0), new ScheduledTask(5500, 5502, 1), new ScheduledTask(3800, 3803, 0), new ScheduledTask(0, 2, 3), new ScheduledTask(0, 8, 2), new ScheduledTask(1300, 1307, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(900, 904, 0), new ScheduledTask(2600, 2605, 0), new ScheduledTask(2000, 2006, 0), new ScheduledTask(0, 9, 0), new ScheduledTask(4100, 4109, 0), new ScheduledTask(5000, 5004, 0)};
        int[] expectedProcessorEndTimes = new int[]{7408, 5502, 4803, 1209};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot10_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_1.10_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(4600, 4608, 0), new ScheduledTask(3900, 3904, 0), new ScheduledTask(3700, 3703, 1), new ScheduledTask(4300, 4303, 0), new ScheduledTask(1900, 1905, 1), new ScheduledTask(2400, 2407, 0), new ScheduledTask(3100, 3108, 0), new ScheduledTask(1600, 1609, 2), new ScheduledTask(1400, 1405, 3), new ScheduledTask(3300, 3302, 1), new ScheduledTask(3400, 3403, 2), new ScheduledTask(2900, 2902, 1), new ScheduledTask(2400, 2408, 3), new ScheduledTask(0, 7, 3), new ScheduledTask(0, 4, 2), new ScheduledTask(0, 4, 0), new ScheduledTask(1900, 1905, 0), new ScheduledTask(1300, 1306, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(400, 409, 0), new ScheduledTask(800, 804, 2)};
        int[] expectedProcessorEndTimes = new int[]{4608, 3703, 3403, 2408};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot10_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_1.10_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(3900, 3908, 0), new ScheduledTask(3200, 3204, 0), new ScheduledTask(3140, 3143, 1), new ScheduledTask(3600, 3603, 0), new ScheduledTask(2000, 2005, 0), new ScheduledTask(2500, 2507, 0), new ScheduledTask(1100, 1108, 1), new ScheduledTask(1500, 1509, 2), new ScheduledTask(2300, 2305, 1), new ScheduledTask(2900, 2902, 1), new ScheduledTask(2850, 2853, 2), new ScheduledTask(2060, 2062, 1), new ScheduledTask(1800, 1808, 3), new ScheduledTask(400, 407, 0), new ScheduledTask(0, 4, 2), new ScheduledTask(1600, 1604, 0), new ScheduledTask(1100, 1105, 0), new ScheduledTask(600, 606, 2), new ScheduledTask(0, 9, 3), new ScheduledTask(0, 9, 1), new ScheduledTask(0, 4, 0)};
        int[] expectedProcessorEndTimes = new int[]{3908, 3143, 2853, 1808};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_1.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(55, 63, 0), new ScheduledTask(51, 55, 0), new ScheduledTask(49, 52, 1), new ScheduledTask(26, 29, 1), new ScheduledTask(21, 26, 1), new ScheduledTask(27, 34, 0), new ScheduledTask(43, 51, 0), new ScheduledTask(38, 47, 1), new ScheduledTask(34, 39, 0), new ScheduledTask(47, 49, 1), new ScheduledTask(19, 22, 0), new ScheduledTask(8, 10, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(14, 21, 1), new ScheduledTask(0, 4, 0), new ScheduledTask(4, 8, 0), new ScheduledTask(22, 27, 0), new ScheduledTask(8, 14, 1), new ScheduledTask(10, 19, 0), new ScheduledTask(29, 38, 1), new ScheduledTask(39, 43, 0)};
        int[] expectedProcessorEndTimes = new int[]{63, 52};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_1.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 40;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(32, 40, 0), new ScheduledTask(28, 32, 0), new ScheduledTask(26, 29, 1), new ScheduledTask(24, 27, 3), new ScheduledTask(13, 18, 2), new ScheduledTask(14, 21, 1), new ScheduledTask(20, 28, 0), new ScheduledTask(15, 24, 3), new ScheduledTask(18, 23, 2), new ScheduledTask(21, 23, 1), new ScheduledTask(16, 19, 0), new ScheduledTask(11, 13, 2), new ScheduledTask(4, 12, 0), new ScheduledTask(0, 7, 2), new ScheduledTask(7, 11, 2), new ScheduledTask(0, 4, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(0, 6, 3), new ScheduledTask(5, 14, 1), new ScheduledTask(6, 15, 3), new ScheduledTask(12, 16, 0)};
        int[] expectedProcessorEndTimes = new int[]{40, 29, 23, 27};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(9900, 9907, 0), new ScheduledTask(5700, 5702, 0), new ScheduledTask(7500, 7510, 0), new ScheduledTask(9600, 9603, 0), new ScheduledTask(5500, 5502, 0), new ScheduledTask(1900, 1907, 0), new ScheduledTask(3800, 3806, 0), new ScheduledTask(1800, 1802, 3), new ScheduledTask(5900, 5909, 0), new ScheduledTask(6800, 6807, 0), new ScheduledTask(8500, 8510, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 6, 2), new ScheduledTask(5200, 5203, 0), new ScheduledTask(4400, 4408, 0), new ScheduledTask(0, 3, 3), new ScheduledTask(500, 509, 0), new ScheduledTask(1400, 1405, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(2600, 2608, 0), new ScheduledTask(3400, 3404, 0)};
        int[] expectedProcessorEndTimes = new int[]{9907, 10, 6, 1802};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(7500, 7507, 0), new ScheduledTask(7000, 7002, 0), new ScheduledTask(5400, 5410, 0), new ScheduledTask(7200, 7203, 0), new ScheduledTask(4000, 4002, 0), new ScheduledTask(1900, 1907, 0), new ScheduledTask(6400, 6406, 0), new ScheduledTask(1200, 1202, 2), new ScheduledTask(0, 9, 3), new ScheduledTask(4200, 4207, 0), new ScheduledTask(1600, 1610, 1), new ScheduledTask(1600, 1610, 2), new ScheduledTask(0, 6, 2), new ScheduledTask(3400, 3403, 0), new ScheduledTask(2600, 2608, 0), new ScheduledTask(3700, 3703, 0), new ScheduledTask(500, 509, 0), new ScheduledTask(1400, 1405, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(4900, 4904, 0)};
        int[] expectedProcessorEndTimes = new int[]{7507, 1610, 1610, 9};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 7860;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(7160, 7167, 0), new ScheduledTask(6960, 6962, 0), new ScheduledTask(4950, 4960, 0), new ScheduledTask(6450, 6453, 0), new ScheduledTask(6750, 6752, 0), new ScheduledTask(1900, 1907, 0), new ScheduledTask(1440, 1446, 1), new ScheduledTask(4700, 4702, 0), new ScheduledTask(0, 9, 2), new ScheduledTask(3400, 3407, 0), new ScheduledTask(1350, 1360, 2), new ScheduledTask(600, 610, 3), new ScheduledTask(4100, 4106, 0), new ScheduledTask(0, 3, 3), new ScheduledTask(2600, 2608, 0), new ScheduledTask(2600, 2603, 3), new ScheduledTask(500, 509, 0), new ScheduledTask(1400, 1405, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(480, 488, 1), new ScheduledTask(0, 4, 1)};
        int[] expectedProcessorEndTimes = new int[]{7167, 1446, 1360, 2603};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 85;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(78, 85, 0), new ScheduledTask(73, 75, 0), new ScheduledTask(55, 65, 0), new ScheduledTask(75, 78, 0), new ScheduledTask(71, 73, 0), new ScheduledTask(19, 26, 0), new ScheduledTask(65, 71, 0), new ScheduledTask(17, 19, 1), new ScheduledTask(26, 35, 0), new ScheduledTask(43, 50, 0), new ScheduledTask(19, 29, 1), new ScheduledTask(29, 39, 1), new ScheduledTask(0, 6, 1), new ScheduledTask(6, 9, 1), new ScheduledTask(35, 43, 0), new ScheduledTask(39, 42, 1), new ScheduledTask(5, 14, 0), new ScheduledTask(14, 19, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(9, 17, 1), new ScheduledTask(50, 54, 0)};
        int[] expectedProcessorEndTimes = new int[]{85, 42};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(66, 73, 0), new ScheduledTask(64, 66, 0), new ScheduledTask(45, 55, 0), new ScheduledTask(55, 58, 0), new ScheduledTask(14, 16, 1), new ScheduledTask(19, 26, 0), new ScheduledTask(58, 64, 0), new ScheduledTask(43, 45, 0), new ScheduledTask(0, 9, 2), new ScheduledTask(26, 33, 0), new ScheduledTask(9, 19, 2), new ScheduledTask(8, 18, 3), new ScheduledTask(33, 39, 0), new ScheduledTask(8, 11, 1), new ScheduledTask(0, 8, 1), new ScheduledTask(11, 14, 1), new ScheduledTask(5, 14, 0), new ScheduledTask(14, 19, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(0, 8, 3), new ScheduledTask(39, 43, 0)};
        int[] expectedProcessorEndTimes = new int[]{73, 16, 19, 18};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(66, 73, 0), new ScheduledTask(64, 66, 0), new ScheduledTask(45, 55, 0), new ScheduledTask(55, 58, 0), new ScheduledTask(14, 16, 1), new ScheduledTask(19, 26, 0), new ScheduledTask(58, 64, 0), new ScheduledTask(0, 2, 5), new ScheduledTask(0, 9, 2), new ScheduledTask(26, 33, 0), new ScheduledTask(9, 19, 2), new ScheduledTask(0, 10, 3), new ScheduledTask(33, 39, 0), new ScheduledTask(8, 11, 1), new ScheduledTask(0, 8, 1), new ScheduledTask(11, 14, 1), new ScheduledTask(5, 14, 0), new ScheduledTask(14, 19, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(0, 8, 4), new ScheduledTask(39, 43, 0)};
        int[] expectedProcessorEndTimes = new int[]{73, 16, 19, 10, 8, 2};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 7;
        int expectedScheduleEndTime = 74;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(67, 74, 0), new ScheduledTask(63, 67, 0), new ScheduledTask(47, 53, 0), new ScheduledTask(20, 22, 0), new ScheduledTask(24, 34, 1), new ScheduledTask(53, 63, 0), new ScheduledTask(35, 43, 0), new ScheduledTask(0, 2, 6), new ScheduledTask(22, 31, 0), new ScheduledTask(0, 8, 2), new ScheduledTask(0, 6, 0), new ScheduledTask(6, 10, 0), new ScheduledTask(10, 20, 0), new ScheduledTask(8, 16, 1), new ScheduledTask(0, 8, 1), new ScheduledTask(16, 24, 1), new ScheduledTask(0, 4, 4), new ScheduledTask(0, 3, 5), new ScheduledTask(43, 47, 0), new ScheduledTask(31, 35, 0), new ScheduledTask(0, 5, 3)};
        int[] expectedProcessorEndTimes = new int[]{74, 34, 8, 5, 4, 3, 2};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(74, 81, 0), new ScheduledTask(70, 74, 0), new ScheduledTask(50, 56, 0), new ScheduledTask(20, 22, 0), new ScheduledTask(39, 49, 1), new ScheduledTask(60, 70, 0), new ScheduledTask(31, 39, 0), new ScheduledTask(48, 50, 0), new ScheduledTask(39, 48, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(0, 6, 0), new ScheduledTask(6, 10, 0), new ScheduledTask(10, 20, 0), new ScheduledTask(15, 23, 1), new ScheduledTask(23, 31, 1), new ScheduledTask(31, 39, 1), new ScheduledTask(11, 15, 1), new ScheduledTask(8, 11, 1), new ScheduledTask(56, 60, 0), new ScheduledTask(27, 31, 0), new ScheduledTask(22, 27, 0)};
        int[] expectedProcessorEndTimes = new int[]{81, 49};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 74;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(67, 74, 0), new ScheduledTask(63, 67, 0), new ScheduledTask(47, 53, 0), new ScheduledTask(20, 22, 0), new ScheduledTask(24, 34, 1), new ScheduledTask(53, 63, 0), new ScheduledTask(39, 47, 0), new ScheduledTask(3, 5, 3), new ScheduledTask(22, 31, 0), new ScheduledTask(0, 8, 2), new ScheduledTask(0, 6, 0), new ScheduledTask(6, 10, 0), new ScheduledTask(10, 20, 0), new ScheduledTask(8, 16, 1), new ScheduledTask(0, 8, 1), new ScheduledTask(16, 24, 1), new ScheduledTask(8, 12, 2), new ScheduledTask(0, 3, 3), new ScheduledTask(31, 35, 0), new ScheduledTask(35, 39, 0), new ScheduledTask(5, 10, 3)};
        int[] expectedProcessorEndTimes = new int[]{74, 34, 12, 10};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 7;
        int expectedScheduleEndTime = 74;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(67, 74, 0), new ScheduledTask(63, 67, 0), new ScheduledTask(47, 53, 0), new ScheduledTask(20, 22, 0), new ScheduledTask(24, 34, 1), new ScheduledTask(53, 63, 0), new ScheduledTask(35, 43, 0), new ScheduledTask(0, 2, 6), new ScheduledTask(22, 31, 0), new ScheduledTask(0, 8, 2), new ScheduledTask(0, 6, 0), new ScheduledTask(6, 10, 0), new ScheduledTask(10, 20, 0), new ScheduledTask(8, 16, 1), new ScheduledTask(0, 8, 1), new ScheduledTask(16, 24, 1), new ScheduledTask(0, 4, 4), new ScheduledTask(0, 3, 5), new ScheduledTask(43, 47, 0), new ScheduledTask(31, 35, 0), new ScheduledTask(0, 5, 3)};
        int[] expectedProcessorEndTimes = new int[]{74, 34, 8, 5, 4, 3, 2};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 11400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(10900, 10905, 0), new ScheduledTask(10700, 10702, 0), new ScheduledTask(8300, 8309, 0), new ScheduledTask(2500, 2510, 0), new ScheduledTask(9200, 9208, 0), new ScheduledTask(10000, 10007, 0), new ScheduledTask(5700, 5710, 0), new ScheduledTask(3500, 3508, 0), new ScheduledTask(4300, 4307, 0), new ScheduledTask(3000, 3005, 3), new ScheduledTask(0, 9, 0), new ScheduledTask(1700, 1708, 0), new ScheduledTask(900, 908, 0), new ScheduledTask(6700, 6705, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(7200, 7205, 0), new ScheduledTask(0, 2, 2), new ScheduledTask(1200, 1207, 2), new ScheduledTask(7700, 7704, 0), new ScheduledTask(0, 5, 3), new ScheduledTask(5000, 5007, 0)};
        int[] expectedProcessorEndTimes = new int[]{10905, 9, 1207, 3005};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(8400, 8405, 0), new ScheduledTask(8200, 8202, 0), new ScheduledTask(4700, 4709, 0), new ScheduledTask(7200, 7210, 0), new ScheduledTask(5600, 5608, 0), new ScheduledTask(6400, 6407, 0), new ScheduledTask(3600, 3610, 1), new ScheduledTask(900, 908, 0), new ScheduledTask(2500, 2507, 0), new ScheduledTask(1400, 1405, 3), new ScheduledTask(0, 9, 0), new ScheduledTask(1000, 1008, 2), new ScheduledTask(1700, 1708, 0), new ScheduledTask(3200, 3205, 0), new ScheduledTask(400, 409, 1), new ScheduledTask(3700, 3705, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(0, 7, 3), new ScheduledTask(4200, 4204, 0), new ScheduledTask(0, 5, 2), new ScheduledTask(2200, 2207, 1)};
        int[] expectedProcessorEndTimes = new int[]{8405, 3610, 1008, 1405};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(8200, 8205, 0), new ScheduledTask(8000, 8002, 0), new ScheduledTask(5400, 5409, 0), new ScheduledTask(6300, 6310, 0), new ScheduledTask(4600, 4608, 0), new ScheduledTask(7300, 7307, 0), new ScheduledTask(3050, 3060, 3), new ScheduledTask(900, 908, 0), new ScheduledTask(2500, 2507, 0), new ScheduledTask(2100, 2105, 2), new ScheduledTask(0, 9, 0), new ScheduledTask(0, 8, 3), new ScheduledTask(1700, 1708, 0), new ScheduledTask(3200, 3205, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(3700, 3705, 0), new ScheduledTask(750, 752, 2), new ScheduledTask(1050, 1057, 2), new ScheduledTask(4200, 4204, 0), new ScheduledTask(0, 5, 2), new ScheduledTask(1600, 1607, 3)};
        int[] expectedProcessorEndTimes = new int[]{8205, 9, 2105, 3060};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 86;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(81, 86, 0), new ScheduledTask(79, 81, 0), new ScheduledTask(57, 66, 0), new ScheduledTask(25, 35, 0), new ScheduledTask(71, 79, 0), new ScheduledTask(13, 20, 1), new ScheduledTask(46, 56, 1), new ScheduledTask(35, 43, 0), new ScheduledTask(43, 50, 0), new ScheduledTask(29, 34, 1), new ScheduledTask(0, 9, 0), new ScheduledTask(17, 25, 0), new ScheduledTask(9, 17, 0), new ScheduledTask(50, 55, 0), new ScheduledTask(20, 29, 1), new ScheduledTask(66, 71, 0), new ScheduledTask(4, 6, 1), new ScheduledTask(6, 13, 1), new ScheduledTask(0, 4, 1), new ScheduledTask(34, 39, 1), new ScheduledTask(39, 46, 1)};
        int[] expectedProcessorEndTimes = new int[]{86, 56};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(79, 84, 0), new ScheduledTask(77, 79, 0), new ScheduledTask(28, 37, 0), new ScheduledTask(54, 64, 0), new ScheduledTask(69, 77, 0), new ScheduledTask(13, 20, 1), new ScheduledTask(36, 46, 1), new ScheduledTask(9, 17, 0), new ScheduledTask(17, 24, 0), new ScheduledTask(0, 5, 3), new ScheduledTask(0, 9, 0), new ScheduledTask(0, 8, 2), new ScheduledTask(37, 45, 0), new ScheduledTask(45, 50, 0), new ScheduledTask(20, 29, 1), new ScheduledTask(64, 69, 0), new ScheduledTask(4, 6, 1), new ScheduledTask(6, 13, 1), new ScheduledTask(0, 4, 1), new ScheduledTask(5, 10, 3), new ScheduledTask(29, 36, 1)};
        int[] expectedProcessorEndTimes = new int[]{84, 46, 8, 10};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(79, 84, 0), new ScheduledTask(77, 79, 0), new ScheduledTask(28, 37, 0), new ScheduledTask(54, 64, 0), new ScheduledTask(69, 77, 0), new ScheduledTask(13, 20, 1), new ScheduledTask(36, 46, 1), new ScheduledTask(9, 17, 0), new ScheduledTask(17, 24, 0), new ScheduledTask(0, 5, 3), new ScheduledTask(0, 9, 0), new ScheduledTask(0, 8, 2), new ScheduledTask(37, 45, 0), new ScheduledTask(45, 50, 0), new ScheduledTask(20, 29, 1), new ScheduledTask(64, 69, 0), new ScheduledTask(4, 6, 1), new ScheduledTask(6, 13, 1), new ScheduledTask(0, 4, 1), new ScheduledTask(0, 5, 4), new ScheduledTask(29, 36, 1)};
        int[] expectedProcessorEndTimes = new int[]{84, 46, 8, 5, 5};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot01_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_10.01_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(7600, 7605, 0), new ScheduledTask(6600, 6607, 0), new ScheduledTask(5700, 5704, 0), new ScheduledTask(7300, 7303, 0), new ScheduledTask(1800, 1804, 0), new ScheduledTask(4100, 4106, 0), new ScheduledTask(6100, 6105, 0), new ScheduledTask(4700, 4705, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(2400, 2402, 3), new ScheduledTask(0, 4, 2), new ScheduledTask(2200, 2208, 0), new ScheduledTask(5200, 5203, 0), new ScheduledTask(600, 608, 0), new ScheduledTask(0, 6, 0), new ScheduledTask(1400, 1404, 0), new ScheduledTask(0, 4, 3), new ScheduledTask(3000, 3008, 0), new ScheduledTask(3800, 3803, 0), new ScheduledTask(2400, 2403, 1), new ScheduledTask(5500, 5502, 0)};
        int[] expectedProcessorEndTimes = new int[]{7605, 2403, 4, 2402};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot01_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_10.01_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 6400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(5900, 5905, 0), new ScheduledTask(4600, 4607, 0), new ScheduledTask(3400, 3404, 1), new ScheduledTask(5600, 5603, 0), new ScheduledTask(1800, 1804, 0), new ScheduledTask(3300, 3306, 0), new ScheduledTask(4100, 4105, 0), new ScheduledTask(1600, 1605, 1), new ScheduledTask(2600, 2604, 1), new ScheduledTask(600, 602, 3), new ScheduledTask(0, 4, 1), new ScheduledTask(0, 8, 2), new ScheduledTask(5300, 5303, 0), new ScheduledTask(600, 608, 0), new ScheduledTask(0, 6, 0), new ScheduledTask(1400, 1404, 0), new ScheduledTask(800, 804, 1), new ScheduledTask(2200, 2208, 0), new ScheduledTask(3000, 3003, 0), new ScheduledTask(0, 3, 3), new ScheduledTask(3900, 3902, 0)};
        int[] expectedProcessorEndTimes = new int[]{5905, 3404, 8, 602};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot01_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_10.01_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 6400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(5900, 5905, 0), new ScheduledTask(5200, 5207, 0), new ScheduledTask(3500, 3504, 1), new ScheduledTask(4500, 4503, 0), new ScheduledTask(4800, 4804, 0), new ScheduledTask(2500, 2506, 0), new ScheduledTask(3300, 3305, 0), new ScheduledTask(960, 965, 1), new ScheduledTask(1560, 1564, 1), new ScheduledTask(1400, 1402, 3), new ScheduledTask(3800, 3804, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(4200, 4203, 0), new ScheduledTask(0, 8, 0), new ScheduledTask(1600, 1606, 0), new ScheduledTask(0, 4, 2), new ScheduledTask(0, 4, 3), new ScheduledTask(800, 808, 0), new ScheduledTask(2200, 2203, 0), new ScheduledTask(800, 803, 3), new ScheduledTask(3100, 3102, 0)};
        int[] expectedProcessorEndTimes = new int[]{5905, 3504, 4, 1402};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(59, 64, 0), new ScheduledTask(46, 53, 0), new ScheduledTask(30, 34, 1), new ScheduledTask(56, 59, 0), new ScheduledTask(18, 22, 0), new ScheduledTask(33, 39, 0), new ScheduledTask(41, 46, 0), new ScheduledTask(16, 21, 1), new ScheduledTask(24, 28, 1), new ScheduledTask(28, 30, 1), new ScheduledTask(8, 12, 1), new ScheduledTask(0, 8, 1), new ScheduledTask(53, 56, 0), new ScheduledTask(6, 14, 0), new ScheduledTask(0, 6, 0), new ScheduledTask(14, 18, 0), new ScheduledTask(12, 16, 1), new ScheduledTask(22, 30, 0), new ScheduledTask(30, 33, 0), new ScheduledTask(21, 24, 1), new ScheduledTask(39, 41, 0)};
        int[] expectedProcessorEndTimes = new int[]{64, 34};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(59, 64, 0), new ScheduledTask(52, 59, 0), new ScheduledTask(37, 41, 1), new ScheduledTask(45, 48, 0), new ScheduledTask(48, 52, 0), new ScheduledTask(25, 31, 0), new ScheduledTask(33, 38, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(0, 4, 3), new ScheduledTask(11, 13, 3), new ScheduledTask(38, 42, 0), new ScheduledTask(4, 12, 2), new ScheduledTask(42, 45, 0), new ScheduledTask(0, 8, 0), new ScheduledTask(16, 22, 0), new ScheduledTask(0, 4, 2), new ScheduledTask(4, 8, 3), new ScheduledTask(8, 16, 0), new ScheduledTask(22, 25, 0), new ScheduledTask(8, 11, 3), new ScheduledTask(31, 33, 0)};
        int[] expectedProcessorEndTimes = new int[]{64, 41, 12, 13};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot02_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_10.02_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 13300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(12400, 12409, 0), new ScheduledTask(11000, 11004, 0), new ScheduledTask(11400, 11410, 0), new ScheduledTask(8300, 8309, 0), new ScheduledTask(9400, 9409, 0), new ScheduledTask(10300, 10307, 0), new ScheduledTask(1400, 1407, 0), new ScheduledTask(4000, 4008, 0), new ScheduledTask(6400, 6407, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(4800, 4808, 0), new ScheduledTask(0, 6, 3), new ScheduledTask(7100, 7106, 0), new ScheduledTask(0, 8, 2), new ScheduledTask(7700, 7706, 0), new ScheduledTask(2100, 2110, 0), new ScheduledTask(3100, 3109, 0), new ScheduledTask(3600, 3607, 3), new ScheduledTask(5600, 5608, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(500, 509, 0)};
        int[] expectedProcessorEndTimes = new int[]{12409, 9, 8, 3607};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot02_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_10.02_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 11500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(10600, 10609, 0), new ScheduledTask(10200, 10204, 0), new ScheduledTask(8300, 8310, 0), new ScheduledTask(7400, 7409, 0), new ScheduledTask(9300, 9309, 0), new ScheduledTask(6100, 6107, 0), new ScheduledTask(1400, 1407, 0), new ScheduledTask(3000, 3008, 0), new ScheduledTask(5400, 5407, 0), new ScheduledTask(0, 9, 2), new ScheduledTask(3800, 3808, 0), new ScheduledTask(1200, 1206, 3), new ScheduledTask(0, 6, 3), new ScheduledTask(1800, 1808, 2), new ScheduledTask(6800, 6806, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(2100, 2109, 0), new ScheduledTask(2000, 2007, 1), new ScheduledTask(4600, 4608, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(500, 509, 0)};
        int[] expectedProcessorEndTimes = new int[]{10609, 2007, 1808, 1206};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot02_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_10.02_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 112;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(103, 112, 0), new ScheduledTask(99, 103, 0), new ScheduledTask(24, 34, 1), new ScheduledTask(41, 50, 0), new ScheduledTask(90, 99, 0), new ScheduledTask(77, 84, 0), new ScheduledTask(14, 21, 0), new ScheduledTask(7, 15, 1), new ScheduledTask(0, 7, 1), new ScheduledTask(15, 24, 1), new ScheduledTask(21, 29, 0), new ScheduledTask(29, 35, 0), new ScheduledTask(35, 41, 0), new ScheduledTask(34, 42, 1), new ScheduledTask(84, 90, 0), new ScheduledTask(50, 60, 0), new ScheduledTask(60, 69, 0), new ScheduledTask(42, 49, 1), new ScheduledTask(69, 77, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(5, 14, 0)};
        int[] expectedProcessorEndTimes = new int[]{112, 49};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot02_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_10.02_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(9900, 9903, 0), new ScheduledTask(8800, 8806, 0), new ScheduledTask(9400, 9405, 0), new ScheduledTask(7100, 7109, 0), new ScheduledTask(8000, 8003, 0), new ScheduledTask(4900, 4909, 0), new ScheduledTask(8300, 8305, 0), new ScheduledTask(3900, 3906, 0), new ScheduledTask(1800, 1807, 0), new ScheduledTask(1200, 1207, 2), new ScheduledTask(0, 7, 3), new ScheduledTask(5800, 5805, 0), new ScheduledTask(6300, 6304, 0), new ScheduledTask(0, 10, 0), new ScheduledTask(2500, 2507, 0), new ScheduledTask(3200, 3207, 0), new ScheduledTask(0, 2, 2), new ScheduledTask(4500, 4504, 0), new ScheduledTask(1000, 1008, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(6700, 6704, 0)};
        int[] expectedProcessorEndTimes = new int[]{9903, 10, 1207, 7};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot02_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_10.02_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 7600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(7300, 7303, 0), new ScheduledTask(6200, 6206, 0), new ScheduledTask(6800, 6805, 0), new ScheduledTask(3200, 3209, 1), new ScheduledTask(2400, 2403, 0), new ScheduledTask(5300, 5309, 0), new ScheduledTask(4800, 4805, 0), new ScheduledTask(3400, 3406, 0), new ScheduledTask(2700, 2707, 0), new ScheduledTask(1600, 1607, 3), new ScheduledTask(1800, 1807, 1), new ScheduledTask(0, 5, 1), new ScheduledTask(1000, 1004, 1), new ScheduledTask(700, 710, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(1700, 1707, 0), new ScheduledTask(0, 2, 2), new ScheduledTask(4000, 4004, 0), new ScheduledTask(0, 8, 3), new ScheduledTask(400, 410, 2), new ScheduledTask(4400, 4404, 0)};
        int[] expectedProcessorEndTimes = new int[]{7303, 3209, 410, 1607};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot02_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_10.02_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 7160;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(6860, 6863, 0), new ScheduledTask(6260, 6266, 0), new ScheduledTask(4900, 4905, 0), new ScheduledTask(2400, 2409, 2), new ScheduledTask(2400, 2403, 0), new ScheduledTask(1680, 1689, 1), new ScheduledTask(5700, 5705, 0), new ScheduledTask(3400, 3406, 0), new ScheduledTask(2700, 2707, 0), new ScheduledTask(0, 7, 3), new ScheduledTask(1350, 1357, 2), new ScheduledTask(0, 5, 2), new ScheduledTask(750, 754, 2), new ScheduledTask(700, 710, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(1700, 1707, 0), new ScheduledTask(480, 482, 1), new ScheduledTask(0, 4, 1), new ScheduledTask(720, 728, 1), new ScheduledTask(1400, 1410, 3), new ScheduledTask(4000, 4004, 0)};
        int[] expectedProcessorEndTimes = new int[]{6863, 1689, 2409, 1410};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(74, 77, 0), new ScheduledTask(68, 74, 0), new ScheduledTask(46, 51, 0), new ScheduledTask(42, 51, 1), new ScheduledTask(30, 33, 1), new ScheduledTask(59, 68, 0), new ScheduledTask(21, 26, 0), new ScheduledTask(40, 46, 0), new ScheduledTask(26, 33, 0), new ScheduledTask(33, 40, 0), new ScheduledTask(10, 17, 0), new ScheduledTask(33, 38, 1), new ScheduledTask(38, 42, 1), new ScheduledTask(4, 14, 1), new ScheduledTask(14, 21, 1), new ScheduledTask(23, 30, 1), new ScheduledTask(21, 23, 1), new ScheduledTask(0, 4, 1), new ScheduledTask(51, 59, 0), new ScheduledTask(0, 10, 0), new ScheduledTask(17, 21, 0)};
        int[] expectedProcessorEndTimes = new int[]{77, 51};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(64, 67, 0), new ScheduledTask(58, 64, 0), new ScheduledTask(51, 56, 0), new ScheduledTask(30, 39, 1), new ScheduledTask(24, 27, 0), new ScheduledTask(14, 23, 2), new ScheduledTask(33, 38, 0), new ScheduledTask(45, 51, 0), new ScheduledTask(38, 45, 0), new ScheduledTask(7, 14, 3), new ScheduledTask(0, 7, 3), new ScheduledTask(10, 15, 1), new ScheduledTask(15, 19, 1), new ScheduledTask(7, 17, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(17, 24, 0), new ScheduledTask(4, 6, 2), new ScheduledTask(0, 4, 2), new ScheduledTask(6, 14, 2), new ScheduledTask(0, 10, 1), new ScheduledTask(27, 31, 0)};
        int[] expectedProcessorEndTimes = new int[]{67, 39, 23, 14};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(64, 67, 0), new ScheduledTask(58, 64, 0), new ScheduledTask(51, 56, 0), new ScheduledTask(32, 41, 1), new ScheduledTask(24, 27, 0), new ScheduledTask(14, 23, 1), new ScheduledTask(33, 38, 0), new ScheduledTask(45, 51, 0), new ScheduledTask(38, 45, 0), new ScheduledTask(0, 7, 3), new ScheduledTask(0, 7, 4), new ScheduledTask(23, 28, 1), new ScheduledTask(28, 32, 1), new ScheduledTask(7, 17, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(17, 24, 0), new ScheduledTask(4, 6, 1), new ScheduledTask(0, 4, 1), new ScheduledTask(6, 14, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(27, 31, 0)};
        int[] expectedProcessorEndTimes = new int[]{67, 41, 10, 7, 7};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_2dot01_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_2.01_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(70, 78, 0), new ScheduledTask(57, 65, 1), new ScheduledTask(59, 69, 0), new ScheduledTask(26, 32, 1), new ScheduledTask(51, 57, 1), new ScheduledTask(42, 51, 1), new ScheduledTask(9, 18, 1), new ScheduledTask(53, 56, 0), new ScheduledTask(56, 59, 0), new ScheduledTask(45, 53, 0), new ScheduledTask(18, 26, 1), new ScheduledTask(4, 9, 0), new ScheduledTask(9, 15, 0), new ScheduledTask(25, 33, 0), new ScheduledTask(33, 37, 0), new ScheduledTask(37, 45, 0), new ScheduledTask(15, 18, 0), new ScheduledTask(18, 25, 0), new ScheduledTask(32, 42, 1), new ScheduledTask(0, 9, 1), new ScheduledTask(0, 4, 0)};
        int[] expectedProcessorEndTimes = new int[]{78, 65};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_2dot01_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_2.01_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(46, 54, 0), new ScheduledTask(33, 41, 1), new ScheduledTask(36, 46, 0), new ScheduledTask(30, 36, 0), new ScheduledTask(26, 32, 1), new ScheduledTask(17, 26, 1), new ScheduledTask(9, 18, 0), new ScheduledTask(23, 26, 0), new ScheduledTask(26, 29, 0), new ScheduledTask(19, 27, 2), new ScheduledTask(0, 8, 3), new ScheduledTask(18, 23, 0), new ScheduledTask(16, 22, 3), new ScheduledTask(8, 16, 3), new ScheduledTask(7, 11, 2), new ScheduledTask(11, 19, 2), new ScheduledTask(14, 17, 1), new ScheduledTask(0, 7, 2), new ScheduledTask(4, 14, 1), new ScheduledTask(0, 9, 0), new ScheduledTask(0, 4, 1)};
        int[] expectedProcessorEndTimes = new int[]{54, 41, 27, 22};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot98_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_9.98_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(7800, 7810, 0), new ScheduledTask(7300, 7305, 0), new ScheduledTask(4400, 4404, 0), new ScheduledTask(3800, 3803, 1), new ScheduledTask(7000, 7003, 0), new ScheduledTask(6300, 6305, 0), new ScheduledTask(900, 904, 0), new ScheduledTask(1600, 1610, 0), new ScheduledTask(3600, 3608, 0), new ScheduledTask(2600, 2610, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(1300, 1303, 0), new ScheduledTask(1200, 1204, 1), new ScheduledTask(6800, 6802, 0), new ScheduledTask(1800, 1805, 3), new ScheduledTask(0, 8, 2), new ScheduledTask(4800, 4808, 0), new ScheduledTask(0, 3, 3), new ScheduledTask(5600, 5606, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(700, 702, 0)};
        int[] expectedProcessorEndTimes = new int[]{7810, 3803, 8, 1805};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot98_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_9.98_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 6900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(5900, 5910, 0), new ScheduledTask(5000, 5005, 0), new ScheduledTask(5500, 5504, 0), new ScheduledTask(2800, 2803, 1), new ScheduledTask(4700, 4703, 0), new ScheduledTask(3000, 3005, 0), new ScheduledTask(900, 904, 0), new ScheduledTask(1000, 1010, 2), new ScheduledTask(0, 8, 1), new ScheduledTask(3500, 3510, 0), new ScheduledTask(2400, 2402, 1), new ScheduledTask(0, 3, 3), new ScheduledTask(1600, 1604, 1), new ScheduledTask(4500, 4502, 0), new ScheduledTask(0, 5, 2), new ScheduledTask(600, 608, 3), new ScheduledTask(1300, 1308, 0), new ScheduledTask(2700, 2703, 0), new ScheduledTask(2100, 2106, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(700, 702, 0)};
        int[] expectedProcessorEndTimes = new int[]{5910, 2803, 1010, 608};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot98_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_9.98_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 6300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(5300, 5310, 0), new ScheduledTask(4300, 4305, 0), new ScheduledTask(4900, 4904, 0), new ScheduledTask(2520, 2523, 1), new ScheduledTask(4000, 4003, 0), new ScheduledTask(3300, 3305, 0), new ScheduledTask(1200, 1204, 0), new ScheduledTask(1200, 1210, 2), new ScheduledTask(0, 8, 2), new ScheduledTask(0, 10, 1), new ScheduledTask(2280, 2282, 1), new ScheduledTask(0, 3, 0), new ScheduledTask(1800, 1804, 1), new ScheduledTask(3800, 3802, 0), new ScheduledTask(1200, 1205, 1), new ScheduledTask(0, 8, 3), new ScheduledTask(1600, 1608, 0), new ScheduledTask(3000, 3003, 0), new ScheduledTask(2400, 2406, 0), new ScheduledTask(300, 307, 0), new ScheduledTask(1000, 1002, 0)};
        int[] expectedProcessorEndTimes = new int[]{5310, 2523, 1210, 8};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(62, 72, 0), new ScheduledTask(53, 58, 0), new ScheduledTask(58, 62, 0), new ScheduledTask(37, 40, 1), new ScheduledTask(50, 53, 0), new ScheduledTask(30, 35, 0), new ScheduledTask(9, 13, 0), new ScheduledTask(18, 28, 1), new ScheduledTask(10, 18, 1), new ScheduledTask(0, 10, 1), new ScheduledTask(35, 37, 1), new ScheduledTask(32, 35, 1), new ScheduledTask(28, 32, 1), new ScheduledTask(48, 50, 0), new ScheduledTask(43, 48, 0), new ScheduledTask(35, 43, 0), new ScheduledTask(13, 21, 0), new ScheduledTask(27, 30, 0), new ScheduledTask(21, 27, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(7, 9, 0)};
        int[] expectedProcessorEndTimes = new int[]{72, 40};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(49, 59, 0), new ScheduledTask(40, 45, 0), new ScheduledTask(45, 49, 0), new ScheduledTask(17, 20, 1), new ScheduledTask(37, 40, 0), new ScheduledTask(30, 35, 0), new ScheduledTask(9, 13, 0), new ScheduledTask(10, 20, 2), new ScheduledTask(0, 8, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(15, 17, 1), new ScheduledTask(12, 15, 1), new ScheduledTask(8, 12, 1), new ScheduledTask(35, 37, 0), new ScheduledTask(0, 5, 3), new ScheduledTask(5, 13, 3), new ScheduledTask(13, 21, 0), new ScheduledTask(27, 30, 0), new ScheduledTask(21, 27, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(7, 9, 0)};
        int[] expectedProcessorEndTimes = new int[]{59, 20, 20, 13};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(49, 59, 0), new ScheduledTask(40, 45, 0), new ScheduledTask(45, 49, 0), new ScheduledTask(9, 12, 1), new ScheduledTask(37, 40, 0), new ScheduledTask(30, 35, 0), new ScheduledTask(9, 13, 0), new ScheduledTask(10, 20, 2), new ScheduledTask(0, 8, 3), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 2, 1), new ScheduledTask(6, 9, 1), new ScheduledTask(2, 6, 1), new ScheduledTask(35, 37, 0), new ScheduledTask(0, 5, 5), new ScheduledTask(0, 8, 4), new ScheduledTask(13, 21, 0), new ScheduledTask(27, 30, 0), new ScheduledTask(21, 27, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(7, 9, 0)};
        int[] expectedProcessorEndTimes = new int[]{59, 12, 20, 8, 8, 5};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(9500, 9504, 0), new ScheduledTask(8100, 8106, 0), new ScheduledTask(2100, 2109, 0), new ScheduledTask(8900, 8906, 0), new ScheduledTask(5100, 5105, 0), new ScheduledTask(7600, 7605, 0), new ScheduledTask(6900, 6904, 0), new ScheduledTask(700, 707, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(1400, 1407, 0), new ScheduledTask(5600, 5610, 0), new ScheduledTask(8700, 8702, 0), new ScheduledTask(0, 6, 2), new ScheduledTask(3000, 3009, 0), new ScheduledTask(3900, 3907, 0), new ScheduledTask(4600, 4605, 0), new ScheduledTask(7300, 7303, 0), new ScheduledTask(3600, 3603, 2), new ScheduledTask(0, 8, 1), new ScheduledTask(6600, 6603, 0), new ScheduledTask(0, 2, 3)};
        int[] expectedProcessorEndTimes = new int[]{9504, 8, 3603, 2};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 7800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(7400, 7404, 0), new ScheduledTask(6800, 6806, 0), new ScheduledTask(2100, 2109, 0), new ScheduledTask(3600, 3606, 1), new ScheduledTask(6300, 6305, 0), new ScheduledTask(4200, 4205, 0), new ScheduledTask(5700, 5704, 0), new ScheduledTask(700, 707, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(1400, 1407, 0), new ScheduledTask(400, 410, 1), new ScheduledTask(0, 2, 1), new ScheduledTask(2400, 2406, 1), new ScheduledTask(3000, 3009, 0), new ScheduledTask(4700, 4707, 0), new ScheduledTask(0, 5, 3), new ScheduledTask(3900, 3903, 0), new ScheduledTask(1000, 1003, 3), new ScheduledTask(400, 408, 2), new ScheduledTask(5400, 5403, 0), new ScheduledTask(0, 2, 2)};
        int[] expectedProcessorEndTimes = new int[]{7404, 3606, 408, 1003};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 7600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(7200, 7204, 0), new ScheduledTask(6600, 6606, 0), new ScheduledTask(2100, 2109, 0), new ScheduledTask(2160, 2166, 1), new ScheduledTask(6100, 6105, 0), new ScheduledTask(4900, 4905, 0), new ScheduledTask(5700, 5704, 0), new ScheduledTask(700, 707, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(1400, 1407, 0), new ScheduledTask(240, 250, 1), new ScheduledTask(0, 2, 1), new ScheduledTask(1440, 1446, 1), new ScheduledTask(3000, 3009, 0), new ScheduledTask(3900, 3907, 0), new ScheduledTask(0, 5, 2), new ScheduledTask(4600, 4603, 0), new ScheduledTask(2000, 2003, 3), new ScheduledTask(400, 408, 3), new ScheduledTask(5400, 5403, 0), new ScheduledTask(0, 2, 3)};
        int[] expectedProcessorEndTimes = new int[]{7204, 2166, 5, 2003};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(72, 76, 0), new ScheduledTask(50, 56, 0), new ScheduledTask(63, 72, 0), new ScheduledTask(36, 42, 1), new ScheduledTask(30, 35, 0), new ScheduledTask(45, 50, 0), new ScheduledTask(5, 9, 0), new ScheduledTask(35, 42, 0), new ScheduledTask(56, 63, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(26, 36, 1), new ScheduledTask(24, 26, 1), new ScheduledTask(15, 21, 1), new ScheduledTask(9, 18, 0), new ScheduledTask(18, 25, 0), new ScheduledTask(25, 30, 0), new ScheduledTask(42, 45, 0), new ScheduledTask(21, 24, 1), new ScheduledTask(7, 15, 1), new ScheduledTask(0, 3, 0), new ScheduledTask(3, 5, 0)};
        int[] expectedProcessorEndTimes = new int[]{76, 42};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 75;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(71, 75, 0), new ScheduledTask(65, 71, 0), new ScheduledTask(21, 30, 0), new ScheduledTask(18, 24, 1), new ScheduledTask(60, 65, 0), new ScheduledTask(36, 41, 0), new ScheduledTask(55, 59, 0), new ScheduledTask(7, 14, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(14, 21, 0), new ScheduledTask(2, 12, 1), new ScheduledTask(0, 2, 1), new ScheduledTask(12, 18, 1), new ScheduledTask(41, 50, 0), new ScheduledTask(0, 7, 3), new ScheduledTask(2, 7, 2), new ScheduledTask(30, 33, 0), new ScheduledTask(7, 10, 3), new ScheduledTask(7, 15, 2), new ScheduledTask(50, 53, 0), new ScheduledTask(0, 2, 2)};
        int[] expectedProcessorEndTimes = new int[]{75, 24, 15, 10};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 75;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(71, 75, 0), new ScheduledTask(65, 71, 0), new ScheduledTask(21, 30, 0), new ScheduledTask(18, 24, 1), new ScheduledTask(60, 65, 0), new ScheduledTask(33, 38, 0), new ScheduledTask(55, 59, 0), new ScheduledTask(7, 14, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(14, 21, 0), new ScheduledTask(2, 12, 1), new ScheduledTask(0, 2, 1), new ScheduledTask(12, 18, 1), new ScheduledTask(38, 47, 0), new ScheduledTask(0, 7, 3), new ScheduledTask(0, 5, 4), new ScheduledTask(30, 33, 0), new ScheduledTask(2, 5, 5), new ScheduledTask(0, 8, 2), new ScheduledTask(47, 50, 0), new ScheduledTask(0, 2, 5)};
        int[] expectedProcessorEndTimes = new int[]{75, 24, 8, 7, 5, 5};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random2_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random#2_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 12400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(11900, 11905, 0), new ScheduledTask(11200, 11207, 0), new ScheduledTask(10500, 10505, 0), new ScheduledTask(5800, 5807, 0), new ScheduledTask(2300, 2309, 0), new ScheduledTask(11000, 11002, 0), new ScheduledTask(9500, 9510, 0), new ScheduledTask(3000, 3006, 1), new ScheduledTask(6500, 6510, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(3200, 3210, 0), new ScheduledTask(4200, 4209, 0), new ScheduledTask(5100, 5107, 0), new ScheduledTask(800, 809, 0), new ScheduledTask(1700, 1706, 0), new ScheduledTask(0, 8, 0), new ScheduledTask(1800, 1804, 3), new ScheduledTask(7500, 7510, 0), new ScheduledTask(0, 3, 3), new ScheduledTask(8500, 8510, 0), new ScheduledTask(0, 6, 2)};
        int[] expectedProcessorEndTimes = new int[]{11905, 3006, 6, 1804};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random2_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random#2_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(9100, 9105, 0), new ScheduledTask(8400, 8407, 0), new ScheduledTask(4600, 4605, 2), new ScheduledTask(7700, 7707, 0), new ScheduledTask(2300, 2309, 0), new ScheduledTask(3400, 3402, 1), new ScheduledTask(4800, 4810, 0), new ScheduledTask(0, 6, 3), new ScheduledTask(1400, 1410, 2), new ScheduledTask(3400, 3405, 2), new ScheduledTask(5800, 5810, 0), new ScheduledTask(6800, 6809, 0), new ScheduledTask(0, 7, 2), new ScheduledTask(800, 809, 0), new ScheduledTask(1700, 1706, 0), new ScheduledTask(0, 8, 0), new ScheduledTask(2600, 2604, 1), new ScheduledTask(0, 10, 1), new ScheduledTask(2000, 2003, 1), new ScheduledTask(3200, 3210, 0), new ScheduledTask(4200, 4206, 0)};
        int[] expectedProcessorEndTimes = new int[]{9105, 3402, 4605, 6};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random2_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random#2_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(8000, 8005, 0), new ScheduledTask(6600, 6607, 0), new ScheduledTask(3750, 3755, 2), new ScheduledTask(7300, 7307, 0), new ScheduledTask(2300, 2309, 0), new ScheduledTask(6400, 6402, 0), new ScheduledTask(1920, 1930, 1), new ScheduledTask(2100, 2106, 2), new ScheduledTask(600, 610, 2), new ScheduledTask(3000, 3005, 2), new ScheduledTask(3200, 3210, 0), new ScheduledTask(5200, 5209, 0), new ScheduledTask(0, 7, 3), new ScheduledTask(800, 809, 0), new ScheduledTask(1700, 1706, 0), new ScheduledTask(0, 8, 0), new ScheduledTask(0, 4, 2), new ScheduledTask(4200, 4210, 0), new ScheduledTask(6100, 6103, 0), new ScheduledTask(720, 730, 1), new ScheduledTask(0, 6, 1)};
        int[] expectedProcessorEndTimes = new int[]{8005, 1930, 3755, 7};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 94;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(89, 94, 0), new ScheduledTask(75, 82, 0), new ScheduledTask(50, 55, 1), new ScheduledTask(82, 89, 0), new ScheduledTask(23, 32, 0), new ScheduledTask(27, 29, 1), new ScheduledTask(57, 67, 0), new ScheduledTask(39, 45, 1), new ScheduledTask(29, 39, 1), new ScheduledTask(45, 50, 1), new ScheduledTask(32, 42, 0), new ScheduledTask(42, 51, 0), new ScheduledTask(67, 74, 0), new ScheduledTask(8, 17, 0), new ScheduledTask(17, 23, 0), new ScheduledTask(0, 8, 0), new ScheduledTask(20, 24, 1), new ScheduledTask(10, 20, 1), new ScheduledTask(24, 27, 1), new ScheduledTask(0, 10, 1), new ScheduledTask(51, 57, 0)};
        int[] expectedProcessorEndTimes = new int[]{94, 55};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(72, 77, 0), new ScheduledTask(65, 72, 0), new ScheduledTask(21, 26, 2), new ScheduledTask(58, 65, 0), new ScheduledTask(23, 32, 0), new ScheduledTask(17, 19, 1), new ScheduledTask(16, 26, 3), new ScheduledTask(15, 21, 2), new ScheduledTask(5, 15, 2), new ScheduledTask(0, 5, 2), new ScheduledTask(32, 42, 0), new ScheduledTask(42, 51, 0), new ScheduledTask(51, 58, 0), new ScheduledTask(8, 17, 0), new ScheduledTask(17, 23, 0), new ScheduledTask(0, 8, 0), new ScheduledTask(13, 17, 1), new ScheduledTask(0, 10, 1), new ScheduledTask(10, 13, 1), new ScheduledTask(6, 16, 3), new ScheduledTask(0, 6, 3)};
        int[] expectedProcessorEndTimes = new int[]{77, 19, 26, 26};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(72, 77, 0), new ScheduledTask(65, 72, 0), new ScheduledTask(21, 26, 2), new ScheduledTask(58, 65, 0), new ScheduledTask(23, 32, 0), new ScheduledTask(17, 19, 1), new ScheduledTask(16, 26, 3), new ScheduledTask(15, 21, 2), new ScheduledTask(5, 15, 2), new ScheduledTask(0, 5, 2), new ScheduledTask(32, 42, 0), new ScheduledTask(42, 51, 0), new ScheduledTask(51, 58, 0), new ScheduledTask(8, 17, 0), new ScheduledTask(17, 23, 0), new ScheduledTask(0, 8, 0), new ScheduledTask(13, 17, 1), new ScheduledTask(0, 10, 1), new ScheduledTask(10, 13, 1), new ScheduledTask(6, 16, 3), new ScheduledTask(0, 6, 3)};
        int[] expectedProcessorEndTimes = new int[]{77, 19, 26, 26};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random3_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random#3_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(9600, 9603, 0), new ScheduledTask(8900, 8907, 0), new ScheduledTask(4200, 4210, 0), new ScheduledTask(1600, 1605, 0), new ScheduledTask(7900, 7908, 0), new ScheduledTask(8700, 8702, 0), new ScheduledTask(6900, 6910, 0), new ScheduledTask(3000, 3008, 0), new ScheduledTask(3800, 3804, 0), new ScheduledTask(2100, 2109, 0), new ScheduledTask(0, 9, 0), new ScheduledTask(900, 902, 0), new ScheduledTask(1100, 1105, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(0, 7, 2), new ScheduledTask(5200, 5210, 0), new ScheduledTask(0, 4, 3), new ScheduledTask(4200, 4204, 2), new ScheduledTask(6600, 6603, 0), new ScheduledTask(6200, 6204, 0), new ScheduledTask(2400, 2404, 3)};
        int[] expectedProcessorEndTimes = new int[]{9603, 7, 4204, 2404};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random3_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random#3_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(7800, 7803, 0), new ScheduledTask(7100, 7107, 0), new ScheduledTask(4800, 4810, 0), new ScheduledTask(1600, 1605, 0), new ScheduledTask(6300, 6308, 0), new ScheduledTask(6100, 6102, 0), new ScheduledTask(3800, 3810, 0), new ScheduledTask(0, 8, 2), new ScheduledTask(3000, 3004, 0), new ScheduledTask(2100, 2109, 0), new ScheduledTask(0, 9, 0), new ScheduledTask(900, 902, 0), new ScheduledTask(1100, 1105, 0), new ScheduledTask(2000, 2007, 1), new ScheduledTask(1600, 1607, 2), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 4, 3), new ScheduledTask(1600, 1604, 3), new ScheduledTask(5800, 5803, 0), new ScheduledTask(3400, 3404, 0), new ScheduledTask(800, 804, 3)};
        int[] expectedProcessorEndTimes = new int[]{7803, 2007, 1607, 1604};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(75, 78, 0), new ScheduledTask(47, 54, 1), new ScheduledTask(39, 49, 0), new ScheduledTask(65, 70, 0), new ScheduledTask(39, 47, 1), new ScheduledTask(35, 37, 1), new ScheduledTask(8, 18, 1), new ScheduledTask(27, 35, 0), new ScheduledTask(35, 39, 0), new ScheduledTask(18, 27, 0), new ScheduledTask(56, 65, 0), new ScheduledTask(54, 56, 0), new ScheduledTask(49, 54, 0), new ScheduledTask(11, 18, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(18, 28, 1), new ScheduledTask(28, 32, 1), new ScheduledTask(7, 11, 0), new ScheduledTask(32, 35, 1), new ScheduledTask(0, 4, 1), new ScheduledTask(4, 8, 1)};
        int[] expectedProcessorEndTimes = new int[]{78, 54};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(10200, 10203, 0), new ScheduledTask(9400, 9403, 0), new ScheduledTask(2100, 2106, 0), new ScheduledTask(9700, 9705, 0), new ScheduledTask(8600, 8608, 0), new ScheduledTask(7600, 7610, 0), new ScheduledTask(4000, 4006, 0), new ScheduledTask(900, 903, 0), new ScheduledTask(1200, 1209, 0), new ScheduledTask(0, 9, 0), new ScheduledTask(5500, 5508, 0), new ScheduledTask(7000, 7006, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(4600, 4609, 0), new ScheduledTask(4200, 4203, 3), new ScheduledTask(1200, 1205, 3), new ScheduledTask(0, 2, 3), new ScheduledTask(6300, 6307, 0), new ScheduledTask(0, 8, 2), new ScheduledTask(2700, 2708, 0), new ScheduledTask(3500, 3505, 0)};
        int[] expectedProcessorEndTimes = new int[]{10203, 9, 8, 4203};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(8500, 8503, 0), new ScheduledTask(8200, 8203, 0), new ScheduledTask(5800, 5806, 0), new ScheduledTask(4900, 4905, 0), new ScheduledTask(7400, 7408, 0), new ScheduledTask(6400, 6410, 0), new ScheduledTask(1300, 1306, 0), new ScheduledTask(5400, 5403, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(1900, 1909, 0), new ScheduledTask(2800, 2808, 0), new ScheduledTask(4300, 4306, 0), new ScheduledTask(400, 409, 2), new ScheduledTask(0, 9, 3), new ScheduledTask(2800, 2803, 3), new ScheduledTask(1800, 1805, 3), new ScheduledTask(0, 2, 2), new ScheduledTask(3600, 3607, 0), new ScheduledTask(1800, 1808, 1), new ScheduledTask(0, 8, 0), new ScheduledTask(800, 805, 0)};
        int[] expectedProcessorEndTimes = new int[]{8503, 1808, 409, 2803};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Balanced-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 87;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(84, 87, 0), new ScheduledTask(81, 84, 0), new ScheduledTask(52, 58, 0), new ScheduledTask(68, 73, 0), new ScheduledTask(73, 81, 0), new ScheduledTask(58, 68, 0), new ScheduledTask(13, 19, 0), new ScheduledTask(49, 52, 0), new ScheduledTask(2, 11, 1), new ScheduledTask(19, 28, 0), new ScheduledTask(28, 36, 0), new ScheduledTask(43, 49, 0), new ScheduledTask(33, 42, 1), new ScheduledTask(11, 20, 1), new ScheduledTask(42, 45, 1), new ScheduledTask(28, 33, 1), new ScheduledTask(0, 2, 1), new ScheduledTask(36, 43, 0), new ScheduledTask(20, 28, 1), new ScheduledTask(0, 8, 0), new ScheduledTask(8, 13, 0)};
        int[] expectedProcessorEndTimes = new int[]{87, 45};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Unbalanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 10;
        int expectedScheduleEndTime = 314;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(254, 314, 0), new ScheduledTask(187, 254, 0), new ScheduledTask(103, 133, 1), new ScheduledTask(120, 187, 0), new ScheduledTask(75, 97, 2), new ScheduledTask(37, 74, 3), new ScheduledTask(67, 89, 4), new ScheduledTask(75, 97, 3), new ScheduledTask(22, 97, 1), new ScheduledTask(60, 120, 0), new ScheduledTask(0, 75, 2), new ScheduledTask(0, 37, 3), new ScheduledTask(15, 60, 5), new ScheduledTask(0, 22, 7), new ScheduledTask(0, 22, 8), new ScheduledTask(0, 22, 9), new ScheduledTask(0, 30, 6), new ScheduledTask(0, 67, 4), new ScheduledTask(0, 15, 5), new ScheduledTask(0, 22, 1), new ScheduledTask(0, 60, 0)};
        int[] expectedProcessorEndTimes = new int[]{314, 133, 97, 97, 89, 60, 30, 22, 22, 22};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Unbalanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 471;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(411, 471, 0), new ScheduledTask(344, 411, 0), new ScheduledTask(378, 408, 1), new ScheduledTask(120, 187, 0), new ScheduledTask(75, 97, 1), new ScheduledTask(275, 312, 1), new ScheduledTask(356, 378, 1), new ScheduledTask(277, 299, 0), new ScheduledTask(202, 277, 0), new ScheduledTask(60, 120, 0), new ScheduledTask(0, 75, 1), new ScheduledTask(186, 223, 1), new ScheduledTask(299, 344, 0), new ScheduledTask(312, 334, 1), new ScheduledTask(334, 356, 1), new ScheduledTask(253, 275, 1), new ScheduledTask(223, 253, 1), new ScheduledTask(97, 164, 1), new ScheduledTask(187, 202, 0), new ScheduledTask(164, 186, 1), new ScheduledTask(0, 60, 0)};
        int[] expectedProcessorEndTimes = new int[]{471, 408};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Unbalanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 314;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(254, 314, 0), new ScheduledTask(187, 254, 0), new ScheduledTask(194, 224, 1), new ScheduledTask(120, 187, 0), new ScheduledTask(134, 156, 2), new ScheduledTask(126, 163, 3), new ScheduledTask(97, 119, 1), new ScheduledTask(163, 185, 3), new ScheduledTask(119, 194, 1), new ScheduledTask(60, 120, 0), new ScheduledTask(59, 134, 2), new ScheduledTask(22, 59, 2), new ScheduledTask(52, 97, 1), new ScheduledTask(37, 59, 3), new ScheduledTask(15, 37, 3), new ScheduledTask(0, 22, 1), new ScheduledTask(22, 52, 1), new ScheduledTask(59, 126, 3), new ScheduledTask(0, 15, 3), new ScheduledTask(0, 22, 2), new ScheduledTask(0, 60, 0)};
        int[] expectedProcessorEndTimes = new int[]{314, 224, 156, 185};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Unbalanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 314;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(254, 314, 0), new ScheduledTask(187, 254, 0), new ScheduledTask(103, 133, 1), new ScheduledTask(120, 187, 0), new ScheduledTask(75, 97, 2), new ScheduledTask(37, 74, 3), new ScheduledTask(67, 89, 4), new ScheduledTask(75, 97, 3), new ScheduledTask(22, 97, 1), new ScheduledTask(60, 120, 0), new ScheduledTask(0, 75, 2), new ScheduledTask(0, 37, 3), new ScheduledTask(15, 60, 5), new ScheduledTask(22, 44, 7), new ScheduledTask(0, 22, 7), new ScheduledTask(0, 22, 6), new ScheduledTask(22, 52, 6), new ScheduledTask(0, 67, 4), new ScheduledTask(0, 15, 5), new ScheduledTask(0, 22, 1), new ScheduledTask(0, 60, 0)};
        int[] expectedProcessorEndTimes = new int[]{314, 133, 97, 97, 89, 60, 52, 44};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_21_CCR_0dot96_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Unbalanced-MaxBf-3_Nodes_21_CCR_0.96_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 12;
        int expectedScheduleEndTime = 42;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(36, 42, 0), new ScheduledTask(30, 35, 0), new ScheduledTask(23, 29, 1), new ScheduledTask(25, 28, 2), new ScheduledTask(19, 29, 0), new ScheduledTask(19, 23, 1), new ScheduledTask(10, 18, 1), new ScheduledTask(10, 18, 3), new ScheduledTask(7, 13, 6), new ScheduledTask(6, 12, 5), new ScheduledTask(15, 18, 0), new ScheduledTask(9, 14, 4), new ScheduledTask(0, 5, 8), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 8, 3), new ScheduledTask(0, 2, 10), new ScheduledTask(0, 2, 11), new ScheduledTask(0, 6, 5), new ScheduledTask(0, 9, 7), new ScheduledTask(0, 5, 9), new ScheduledTask(0, 9, 4)};
        int[] expectedProcessorEndTimes = new int[]{42, 29, 28, 18, 14, 12, 13, 9, 5, 5, 2, 2};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_21_CCR_0dot96_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Unbalanced-MaxBf-3_Nodes_21_CCR_0.96_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(64, 70, 0), new ScheduledTask(59, 64, 0), new ScheduledTask(51, 57, 1), new ScheduledTask(37, 40, 0), new ScheduledTask(49, 59, 0), new ScheduledTask(47, 51, 1), new ScheduledTask(24, 32, 0), new ScheduledTask(19, 27, 1), new ScheduledTask(42, 48, 0), new ScheduledTask(36, 42, 1), new ScheduledTask(27, 30, 1), new ScheduledTask(42, 47, 1), new ScheduledTask(32, 37, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 8, 0), new ScheduledTask(8, 10, 0), new ScheduledTask(40, 42, 0), new ScheduledTask(30, 36, 1), new ScheduledTask(10, 19, 1), new ScheduledTask(10, 15, 0), new ScheduledTask(15, 24, 0)};
        int[] expectedProcessorEndTimes = new int[]{70, 57};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_21_CCR_0dot96_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Unbalanced-MaxBf-3_Nodes_21_CCR_0.96_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(39, 45, 0), new ScheduledTask(34, 39, 0), new ScheduledTask(28, 34, 0), new ScheduledTask(29, 32, 1), new ScheduledTask(21, 31, 2), new ScheduledTask(14, 18, 2), new ScheduledTask(20, 28, 0), new ScheduledTask(21, 29, 1), new ScheduledTask(12, 18, 3), new ScheduledTask(6, 12, 3), new ScheduledTask(18, 21, 2), new ScheduledTask(9, 14, 2), new ScheduledTask(5, 10, 0), new ScheduledTask(10, 20, 0), new ScheduledTask(11, 19, 1), new ScheduledTask(19, 21, 1), new ScheduledTask(0, 2, 1), new ScheduledTask(0, 6, 3), new ScheduledTask(2, 11, 1), new ScheduledTask(0, 5, 0), new ScheduledTask(0, 9, 2)};
        int[] expectedProcessorEndTimes = new int[]{45, 32, 31, 18};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_21_CCR_0dot96_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Unbalanced-MaxBf-3_Nodes_21_CCR_0.96_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 42;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(36, 42, 0), new ScheduledTask(31, 36, 0), new ScheduledTask(23, 29, 1), new ScheduledTask(25, 28, 2), new ScheduledTask(18, 28, 3), new ScheduledTask(19, 23, 1), new ScheduledTask(10, 18, 1), new ScheduledTask(10, 18, 4), new ScheduledTask(8, 14, 6), new ScheduledTask(9, 15, 3), new ScheduledTask(15, 18, 3), new ScheduledTask(9, 14, 5), new ScheduledTask(9, 14, 7), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 8, 4), new ScheduledTask(8, 10, 4), new ScheduledTask(6, 8, 6), new ScheduledTask(0, 6, 6), new ScheduledTask(0, 9, 7), new ScheduledTask(0, 5, 3), new ScheduledTask(0, 9, 5)};
        int[] expectedProcessorEndTimes = new int[]{42, 29, 28, 28, 18, 14, 14, 14};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_21_CCR_1dot99_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Unbalanced-MaxBf-3_Nodes_21_CCR_1.99_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(63, 66, 0), new ScheduledTask(50, 57, 0), new ScheduledTask(61, 63, 0), new ScheduledTask(24, 28, 1), new ScheduledTask(30, 37, 0), new ScheduledTask(40, 50, 0), new ScheduledTask(52, 55, 1), new ScheduledTask(35, 39, 1), new ScheduledTask(57, 61, 0), new ScheduledTask(10, 13, 0), new ScheduledTask(7, 15, 1), new ScheduledTask(15, 23, 1), new ScheduledTask(13, 21, 0), new ScheduledTask(26, 30, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(37, 40, 0), new ScheduledTask(0, 10, 0), new ScheduledTask(39, 46, 1), new ScheduledTask(46, 52, 1), new ScheduledTask(21, 26, 0), new ScheduledTask(28, 35, 1)};
        int[] expectedProcessorEndTimes = new int[]{66, 55};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_21_CCR_1dot99_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Unbalanced-MaxBf-3_Nodes_21_CCR_1.99_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(42, 45, 0), new ScheduledTask(33, 40, 0), new ScheduledTask(40, 42, 0), new ScheduledTask(23, 27, 1), new ScheduledTask(26, 33, 0), new ScheduledTask(14, 24, 0), new ScheduledTask(31, 34, 3), new ScheduledTask(27, 31, 2), new ScheduledTask(27, 31, 3), new ScheduledTask(20, 23, 1), new ScheduledTask(0, 8, 1), new ScheduledTask(12, 20, 1), new ScheduledTask(0, 8, 0), new ScheduledTask(8, 12, 1), new ScheduledTask(0, 7, 3), new ScheduledTask(8, 11, 0), new ScheduledTask(0, 10, 2), new ScheduledTask(14, 21, 3), new ScheduledTask(21, 27, 3), new ScheduledTask(10, 15, 2), new ScheduledTask(7, 14, 3)};
        int[] expectedProcessorEndTimes = new int[]{45, 27, 31, 34};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_21_CCR_10dot02_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Unbalanced-MaxBf-3_Nodes_21_CCR_10.02_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(76, 84, 0), new ScheduledTask(74, 76, 0), new ScheduledTask(28, 32, 1), new ScheduledTask(45, 52, 0), new ScheduledTask(66, 74, 0), new ScheduledTask(10, 15, 1), new ScheduledTask(24, 28, 1), new ScheduledTask(35, 45, 0), new ScheduledTask(17, 25, 0), new ScheduledTask(62, 66, 0), new ScheduledTask(7, 9, 2), new ScheduledTask(3, 10, 1), new ScheduledTask(0, 3, 1), new ScheduledTask(15, 24, 1), new ScheduledTask(25, 35, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(7, 17, 0), new ScheduledTask(52, 59, 0), new ScheduledTask(59, 62, 0), new ScheduledTask(0, 4, 2), new ScheduledTask(4, 7, 2)};
        int[] expectedProcessorEndTimes = new int[]{84, 32, 9};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_21_CCR_10dot02_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Unbalanced-MaxBf-3_Nodes_21_CCR_10.02_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(82, 90, 0), new ScheduledTask(80, 82, 0), new ScheduledTask(31, 35, 1), new ScheduledTask(73, 80, 0), new ScheduledTask(57, 65, 0), new ScheduledTask(13, 18, 1), new ScheduledTask(27, 31, 1), new ScheduledTask(24, 34, 0), new ScheduledTask(65, 73, 0), new ScheduledTask(10, 14, 0), new ScheduledTask(55, 57, 0), new ScheduledTask(3, 10, 1), new ScheduledTask(10, 13, 1), new ScheduledTask(18, 27, 1), new ScheduledTask(14, 24, 0), new ScheduledTask(44, 51, 0), new ScheduledTask(34, 44, 0), new ScheduledTask(3, 10, 0), new ScheduledTask(0, 3, 0), new ScheduledTask(51, 55, 0), new ScheduledTask(0, 3, 1)};
        int[] expectedProcessorEndTimes = new int[]{90, 35};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_21_CCR_10dot02_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Unbalanced-MaxBf-3_Nodes_21_CCR_10.02_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(76, 84, 0), new ScheduledTask(74, 76, 0), new ScheduledTask(28, 32, 1), new ScheduledTask(45, 52, 0), new ScheduledTask(66, 74, 0), new ScheduledTask(10, 15, 1), new ScheduledTask(24, 28, 1), new ScheduledTask(35, 45, 0), new ScheduledTask(17, 25, 0), new ScheduledTask(62, 66, 0), new ScheduledTask(7, 9, 2), new ScheduledTask(3, 10, 1), new ScheduledTask(0, 3, 1), new ScheduledTask(15, 24, 1), new ScheduledTask(25, 35, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(7, 17, 0), new ScheduledTask(52, 59, 0), new ScheduledTask(59, 62, 0), new ScheduledTask(0, 4, 2), new ScheduledTask(4, 7, 2)};
        int[] expectedProcessorEndTimes = new int[]{84, 32, 9};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_21_CCR_10dot02_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/InTree-Unbalanced-MaxBf-3_Nodes_21_CCR_10.02_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(76, 84, 0), new ScheduledTask(74, 76, 0), new ScheduledTask(28, 32, 1), new ScheduledTask(45, 52, 0), new ScheduledTask(66, 74, 0), new ScheduledTask(10, 15, 1), new ScheduledTask(24, 28, 1), new ScheduledTask(35, 45, 0), new ScheduledTask(17, 25, 0), new ScheduledTask(62, 66, 0), new ScheduledTask(7, 9, 2), new ScheduledTask(3, 10, 1), new ScheduledTask(0, 3, 1), new ScheduledTask(15, 24, 1), new ScheduledTask(25, 35, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(7, 17, 0), new ScheduledTask(52, 59, 0), new ScheduledTask(59, 62, 0), new ScheduledTask(0, 4, 2), new ScheduledTask(4, 7, 2)};
        int[] expectedProcessorEndTimes = new int[]{84, 32, 9};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 85500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(11700, 11727, 0), new ScheduledTask(0, 45, 2), new ScheduledTask(37800, 37881, 0), new ScheduledTask(14400, 14418, 0), new ScheduledTask(59400, 59445, 0), new ScheduledTask(0, 54, 3), new ScheduledTask(65700, 65736, 0), new ScheduledTask(63900, 63918, 0), new ScheduledTask(5400, 5463, 0), new ScheduledTask(0, 81, 1), new ScheduledTask(27000, 27081, 2), new ScheduledTask(28800, 28890, 0), new ScheduledTask(48600, 48645, 1), new ScheduledTask(16200, 16272, 0), new ScheduledTask(32400, 32472, 3), new ScheduledTask(69300, 69372, 0), new ScheduledTask(45900, 45990, 0), new ScheduledTask(23400, 23454, 0), new ScheduledTask(54900, 54945, 0), new ScheduledTask(0, 54, 0), new ScheduledTask(76500, 76590, 0)};
        int[] expectedProcessorEndTimes = new int[]{76590, 48645, 27081, 32472};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 55800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(12600, 12627, 2), new ScheduledTask(0, 45, 1), new ScheduledTask(28800, 28881, 2), new ScheduledTask(5400, 5418, 0), new ScheduledTask(40500, 40545, 0), new ScheduledTask(18000, 18054, 2), new ScheduledTask(37800, 37836, 1), new ScheduledTask(45000, 45018, 0), new ScheduledTask(0, 63, 2), new ScheduledTask(14400, 14481, 0), new ScheduledTask(14400, 14481, 3), new ScheduledTask(22500, 22590, 0), new ScheduledTask(31500, 31545, 0), new ScheduledTask(7200, 7272, 0), new ScheduledTask(0, 72, 3), new ScheduledTask(30600, 30672, 3), new ScheduledTask(19800, 19890, 1), new ScheduledTask(9000, 9054, 1), new ScheduledTask(36000, 36045, 0), new ScheduledTask(0, 54, 0), new ScheduledTask(46800, 46890, 0)};
        int[] expectedProcessorEndTimes = new int[]{46890, 37836, 28881, 30672};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 47700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(5400, 5427, 0), new ScheduledTask(8100, 8145, 0), new ScheduledTask(22950, 23031, 2), new ScheduledTask(0, 18, 3), new ScheduledTask(30600, 30645, 0), new ScheduledTask(7560, 7614, 1), new ScheduledTask(35100, 35136, 0), new ScheduledTask(35100, 35118, 2), new ScheduledTask(0, 63, 1), new ScheduledTask(3600, 3681, 3), new ScheduledTask(10800, 10881, 2), new ScheduledTask(12600, 12690, 0), new ScheduledTask(21600, 21645, 0), new ScheduledTask(14040, 14112, 1), new ScheduledTask(0, 72, 2), new ScheduledTask(29160, 29232, 1), new ScheduledTask(19800, 19890, 3), new ScheduledTask(22680, 22734, 1), new ScheduledTask(26100, 26145, 0), new ScheduledTask(0, 54, 0), new ScheduledTask(38700, 38790, 0)};
        int[] expectedProcessorEndTimes = new int[]{38790, 29232, 35118, 19890};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 666;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(18, 45, 1), new ScheduledTask(99, 144, 0), new ScheduledTask(405, 486, 0), new ScheduledTask(0, 18, 1), new ScheduledTask(90, 135, 1), new ScheduledTask(198, 252, 0), new ScheduledTask(18, 54, 0), new ScheduledTask(0, 18, 0), new ScheduledTask(189, 252, 1), new ScheduledTask(396, 477, 1), new ScheduledTask(324, 405, 0), new ScheduledTask(486, 576, 0), new ScheduledTask(54, 99, 0), new ScheduledTask(324, 396, 1), new ScheduledTask(252, 324, 1), new ScheduledTask(252, 324, 0), new ScheduledTask(477, 567, 1), new ScheduledTask(144, 198, 0), new ScheduledTask(45, 90, 1), new ScheduledTask(135, 189, 1), new ScheduledTask(576, 666, 0)};
        int[] expectedProcessorEndTimes = new int[]{666, 567};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 380;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(54, 81, 0), new ScheduledTask(72, 117, 3), new ScheduledTask(171, 252, 1), new ScheduledTask(63, 81, 1), new ScheduledTask(225, 270, 0), new ScheduledTask(0, 54, 2), new ScheduledTask(252, 288, 1), new ScheduledTask(270, 288, 0), new ScheduledTask(0, 63, 1), new ScheduledTask(117, 198, 3), new ScheduledTask(198, 279, 3), new ScheduledTask(81, 171, 1), new ScheduledTask(135, 180, 0), new ScheduledTask(54, 126, 2), new ScheduledTask(0, 72, 3), new ScheduledTask(216, 288, 2), new ScheduledTask(126, 216, 2), new ScheduledTask(81, 135, 0), new ScheduledTask(180, 225, 0), new ScheduledTask(0, 54, 0), new ScheduledTask(290, 380, 0)};
        int[] expectedProcessorEndTimes = new int[]{380, 288, 288, 279};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 288;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 27, 0), new ScheduledTask(144, 189, 5), new ScheduledTask(108, 189, 2), new ScheduledTask(27, 45, 0), new ScheduledTask(144, 189, 1), new ScheduledTask(0, 54, 2), new ScheduledTask(81, 117, 4), new ScheduledTask(180, 198, 0), new ScheduledTask(0, 63, 3), new ScheduledTask(63, 144, 3), new ScheduledTask(0, 81, 4), new ScheduledTask(54, 144, 1), new ScheduledTask(45, 90, 0), new ScheduledTask(72, 144, 5), new ScheduledTask(0, 72, 5), new ScheduledTask(117, 189, 4), new ScheduledTask(90, 180, 0), new ScheduledTask(54, 108, 2), new ScheduledTask(144, 189, 3), new ScheduledTask(0, 54, 1), new ScheduledTask(198, 288, 0)};
        int[] expectedProcessorEndTimes = new int[]{288, 189, 189, 189, 189, 189};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random2_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#2_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 80400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(39000, 39072, 0), new ScheduledTask(55000, 55048, 0), new ScheduledTask(33600, 33664, 1), new ScheduledTask(64600, 64679, 0), new ScheduledTask(0, 64, 2), new ScheduledTask(47800, 47824, 0), new ScheduledTask(28600, 28648, 0), new ScheduledTask(16700, 16779, 0), new ScheduledTask(38400, 38456, 2), new ScheduledTask(50200, 50248, 0), new ScheduledTask(46200, 46216, 0), new ScheduledTask(0, 56, 1), new ScheduledTask(3200, 3256, 0), new ScheduledTask(8800, 8879, 0), new ScheduledTask(59800, 59848, 0), new ScheduledTask(33600, 33664, 3), new ScheduledTask(33400, 33456, 0), new ScheduledTask(0, 32, 0), new ScheduledTask(24600, 24640, 0), new ScheduledTask(0, 56, 3), new ScheduledTask(72500, 72579, 0)};
        int[] expectedProcessorEndTimes = new int[]{72579, 33664, 38456, 33664};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random2_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#2_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 51600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(20800, 20872, 1), new ScheduledTask(26200, 26248, 0), new ScheduledTask(30400, 30464, 2), new ScheduledTask(35800, 35879, 0), new ScheduledTask(6400, 6464, 3), new ScheduledTask(38400, 38424, 1), new ScheduledTask(11200, 11248, 1), new ScheduledTask(7900, 7979, 0), new ScheduledTask(19200, 19256, 3), new ScheduledTask(21400, 21448, 0), new ScheduledTask(35200, 35216, 1), new ScheduledTask(19200, 19256, 2), new ScheduledTask(0, 56, 1), new ScheduledTask(0, 79, 0), new ScheduledTask(31000, 31048, 0), new ScheduledTask(30400, 30464, 3), new ScheduledTask(15800, 15856, 0), new ScheduledTask(0, 32, 3), new ScheduledTask(0, 40, 2), new ScheduledTask(8000, 8056, 2), new ScheduledTask(43700, 43779, 0)};
        int[] expectedProcessorEndTimes = new int[]{43779, 38424, 30464, 30464};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random2_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#2_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 44500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(8000, 8072, 3), new ScheduledTask(27000, 27048, 0), new ScheduledTask(22400, 22464, 3), new ScheduledTask(26880, 26959, 1), new ScheduledTask(8400, 8464, 2), new ScheduledTask(24000, 24024, 1), new ScheduledTask(15800, 15848, 0), new ScheduledTask(7900, 7979, 0), new ScheduledTask(18000, 18056, 2), new ScheduledTask(22200, 22248, 0), new ScheduledTask(20600, 20616, 0), new ScheduledTask(17280, 17336, 1), new ScheduledTask(0, 56, 2), new ScheduledTask(0, 79, 0), new ScheduledTask(31800, 31848, 0), new ScheduledTask(26400, 26464, 2), new ScheduledTask(3840, 3896, 1), new ScheduledTask(0, 32, 1), new ScheduledTask(0, 40, 3), new ScheduledTask(10560, 10616, 1), new ScheduledTask(36600, 36679, 0)};
        int[] expectedProcessorEndTimes = new int[]{36679, 26959, 26464, 22464};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 623;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(127, 199, 1), new ScheduledTask(447, 495, 0), new ScheduledTask(279, 343, 1), new ScheduledTask(463, 542, 1), new ScheduledTask(215, 279, 1), new ScheduledTask(375, 399, 0), new ScheduledTask(79, 127, 1), new ScheduledTask(88, 167, 0), new ScheduledTask(343, 399, 1), new ScheduledTask(399, 447, 0), new ScheduledTask(199, 215, 1), new ScheduledTask(319, 375, 0), new ScheduledTask(32, 88, 0), new ScheduledTask(0, 79, 1), new ScheduledTask(495, 543, 0), new ScheduledTask(399, 463, 1), new ScheduledTask(207, 263, 0), new ScheduledTask(0, 32, 0), new ScheduledTask(167, 207, 0), new ScheduledTask(263, 319, 0), new ScheduledTask(544, 623, 0)};
        int[] expectedProcessorEndTimes = new int[]{623, 542};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 353;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(40, 112, 0), new ScheduledTask(176, 224, 0), new ScheduledTask(143, 207, 3), new ScheduledTask(192, 271, 1), new ScheduledTask(79, 143, 3), new ScheduledTask(191, 215, 2), new ScheduledTask(88, 136, 1), new ScheduledTask(0, 79, 2), new ScheduledTask(215, 271, 2), new ScheduledTask(128, 176, 0), new ScheduledTask(112, 128, 0), new ScheduledTask(135, 191, 2), new ScheduledTask(32, 88, 1), new ScheduledTask(0, 79, 3), new ScheduledTask(224, 272, 0), new ScheduledTask(207, 271, 3), new ScheduledTask(136, 192, 1), new ScheduledTask(0, 32, 1), new ScheduledTask(0, 40, 0), new ScheduledTask(79, 135, 2), new ScheduledTask(274, 353, 0)};
        int[] expectedProcessorEndTimes = new int[]{353, 271, 271, 271};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 265;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 72, 3), new ScheduledTask(56, 104, 1), new ScheduledTask(112, 176, 4), new ScheduledTask(104, 183, 1), new ScheduledTask(72, 136, 3), new ScheduledTask(159, 183, 0), new ScheduledTask(111, 159, 0), new ScheduledTask(32, 111, 0), new ScheduledTask(56, 112, 5), new ScheduledTask(135, 183, 2), new ScheduledTask(40, 56, 1), new ScheduledTask(56, 112, 4), new ScheduledTask(0, 56, 5), new ScheduledTask(0, 79, 2), new ScheduledTask(136, 184, 3), new ScheduledTask(112, 176, 5), new ScheduledTask(79, 135, 2), new ScheduledTask(0, 32, 0), new ScheduledTask(0, 40, 1), new ScheduledTask(0, 56, 4), new ScheduledTask(186, 265, 0)};
        int[] expectedProcessorEndTimes = new int[]{265, 183, 183, 184, 176, 176};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random3_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#3_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 76300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(18600, 18646, 3), new ScheduledTask(19800, 19876, 0), new ScheduledTask(36600, 36653, 2), new ScheduledTask(0, 53, 1), new ScheduledTask(0, 31, 3), new ScheduledTask(32000, 32046, 0), new ScheduledTask(61800, 61869, 0), new ScheduledTask(54900, 54969, 0), new ScheduledTask(36600, 36669, 0), new ScheduledTask(1500, 1569, 0), new ScheduledTask(8400, 8438, 0), new ScheduledTask(12200, 12276, 0), new ScheduledTask(27400, 27446, 0), new ScheduledTask(31800, 31861, 1), new ScheduledTask(0, 61, 2), new ScheduledTask(49600, 49653, 0), new ScheduledTask(46200, 46231, 3), new ScheduledTask(45800, 45838, 0), new ScheduledTask(0, 15, 0), new ScheduledTask(43500, 43523, 0), new ScheduledTask(68700, 68776, 0)};
        int[] expectedProcessorEndTimes = new int[]{68776, 31861, 36653, 46231};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random3_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#3_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 48900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 46, 0), new ScheduledTask(0, 76, 1), new ScheduledTask(30400, 30453, 1), new ScheduledTask(3000, 3053, 2), new ScheduledTask(0, 31, 3), new ScheduledTask(26000, 26046, 0), new ScheduledTask(26200, 26269, 3), new ScheduledTask(12400, 12469, 3), new ScheduledTask(30600, 30669, 0), new ScheduledTask(4600, 4669, 0), new ScheduledTask(11500, 11538, 0), new ScheduledTask(13600, 13676, 2), new ScheduledTask(21400, 21446, 0), new ScheduledTask(28800, 28861, 2), new ScheduledTask(15300, 15361, 0), new ScheduledTask(19800, 19853, 1), new ScheduledTask(6200, 6231, 3), new ScheduledTask(37500, 37538, 0), new ScheduledTask(0, 15, 2), new ScheduledTask(15200, 15223, 1), new ScheduledTask(41300, 41376, 0)};
        int[] expectedProcessorEndTimes = new int[]{41376, 30453, 28861, 26269};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random3_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#3_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 42000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 46, 0), new ScheduledTask(8400, 8476, 0), new ScheduledTask(15900, 15953, 2), new ScheduledTask(0, 53, 2), new ScheduledTask(0, 31, 3), new ScheduledTask(20600, 20646, 0), new ScheduledTask(23850, 23919, 2), new ScheduledTask(18240, 18309, 1), new ScheduledTask(20000, 20069, 3), new ScheduledTask(6200, 6269, 3), new ScheduledTask(4600, 4638, 0), new ScheduledTask(9120, 9196, 1), new ScheduledTask(16000, 16046, 0), new ScheduledTask(26520, 26581, 1), new ScheduledTask(1800, 1861, 1), new ScheduledTask(7950, 8003, 2), new ScheduledTask(27500, 27531, 0), new ScheduledTask(30600, 30638, 0), new ScheduledTask(0, 15, 1), new ScheduledTask(25200, 25223, 0), new ScheduledTask(34400, 34476, 0)};
        int[] expectedProcessorEndTimes = new int[]{34476, 26581, 23919, 20069};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 589;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(31, 77, 0), new ScheduledTask(115, 191, 0), new ScheduledTask(327, 380, 1), new ScheduledTask(84, 137, 1), new ScheduledTask(0, 31, 0), new ScheduledTask(237, 283, 0), new ScheduledTask(441, 510, 1), new ScheduledTask(444, 513, 0), new ScheduledTask(283, 352, 0), new ScheduledTask(15, 84, 1), new ScheduledTask(77, 115, 0), new ScheduledTask(198, 274, 1), new ScheduledTask(191, 237, 0), new ScheduledTask(380, 441, 1), new ScheduledTask(137, 198, 1), new ScheduledTask(274, 327, 1), new ScheduledTask(375, 406, 0), new ScheduledTask(406, 444, 0), new ScheduledTask(0, 15, 1), new ScheduledTask(352, 375, 0), new ScheduledTask(513, 589, 0)};
        int[] expectedProcessorEndTimes = new int[]{589, 510};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 337;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 46, 3), new ScheduledTask(69, 145, 0), new ScheduledTask(76, 129, 2), new ScheduledTask(0, 53, 1), new ScheduledTask(0, 31, 0), new ScheduledTask(145, 191, 0), new ScheduledTask(190, 259, 2), new ScheduledTask(184, 253, 3), new ScheduledTask(115, 184, 3), new ScheduledTask(46, 115, 3), new ScheduledTask(31, 69, 0), new ScheduledTask(53, 129, 1), new ScheduledTask(129, 175, 1), new ScheduledTask(129, 190, 2), new ScheduledTask(15, 76, 2), new ScheduledTask(198, 251, 1), new ScheduledTask(191, 222, 0), new ScheduledTask(222, 260, 0), new ScheduledTask(0, 15, 2), new ScheduledTask(175, 198, 1), new ScheduledTask(261, 337, 0)};
        int[] expectedProcessorEndTimes = new int[]{337, 251, 259, 253};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 253;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 46, 3), new ScheduledTask(91, 167, 1), new ScheduledTask(115, 168, 3), new ScheduledTask(0, 53, 2), new ScheduledTask(0, 31, 0), new ScheduledTask(77, 123, 0), new ScheduledTask(106, 175, 2), new ScheduledTask(46, 115, 3), new ScheduledTask(61, 130, 4), new ScheduledTask(0, 69, 5), new ScheduledTask(69, 107, 5), new ScheduledTask(15, 91, 1), new ScheduledTask(31, 77, 0), new ScheduledTask(107, 168, 5), new ScheduledTask(0, 61, 4), new ScheduledTask(53, 106, 2), new ScheduledTask(146, 177, 0), new ScheduledTask(130, 168, 4), new ScheduledTask(0, 15, 1), new ScheduledTask(123, 146, 0), new ScheduledTask(177, 253, 0)};
        int[] expectedProcessorEndTimes = new int[]{253, 167, 175, 168, 168, 168};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random4_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#4_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 94800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(37200, 37225, 2), new ScheduledTask(52200, 52262, 2), new ScheduledTask(4900, 4974, 0), new ScheduledTask(87400, 87449, 0), new ScheduledTask(12300, 12374, 0), new ScheduledTask(19700, 19811, 0), new ScheduledTask(67700, 67786, 0), new ScheduledTask(0, 49, 0), new ScheduledTask(52200, 52262, 3), new ScheduledTask(37200, 37286, 1), new ScheduledTask(76300, 76411, 0), new ScheduledTask(15000, 15037, 1), new ScheduledTask(50500, 50598, 0), new ScheduledTask(0, 62, 2), new ScheduledTask(0, 62, 3), new ScheduledTask(38200, 38323, 0), new ScheduledTask(37200, 37225, 3), new ScheduledTask(60300, 60374, 0), new ScheduledTask(30800, 30874, 0), new ScheduledTask(0, 25, 1), new ScheduledTask(92300, 92325, 0)};
        int[] expectedProcessorEndTimes = new int[]{92325, 37286, 52262, 52262};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random4_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#4_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 57800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(19800, 19825, 3), new ScheduledTask(24800, 24862, 3), new ScheduledTask(0, 74, 3), new ScheduledTask(50400, 50449, 0), new ScheduledTask(0, 74, 2), new ScheduledTask(24800, 24911, 1), new ScheduledTask(41800, 41886, 0), new ScheduledTask(0, 49, 0), new ScheduledTask(42000, 42062, 2), new ScheduledTask(37200, 37286, 3), new ScheduledTask(19800, 19911, 2), new ScheduledTask(47000, 47037, 1), new ScheduledTask(24600, 24698, 0), new ScheduledTask(12400, 12462, 1), new ScheduledTask(0, 62, 1), new ScheduledTask(12300, 12423, 0), new ScheduledTask(14800, 14825, 3), new ScheduledTask(34400, 34474, 0), new ScheduledTask(4900, 4974, 0), new ScheduledTask(14800, 14825, 2), new ScheduledTask(55300, 55325, 0)};
        int[] expectedProcessorEndTimes = new int[]{55325, 47037, 42062, 37286};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random4_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#4_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 48750;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(19800, 19825, 0), new ScheduledTask(29700, 29762, 0), new ScheduledTask(0, 74, 1), new ScheduledTask(38700, 38749, 2), new ScheduledTask(8880, 8954, 1), new ScheduledTask(0, 111, 3), new ScheduledTask(28080, 28166, 1), new ScheduledTask(0, 49, 0), new ScheduledTask(38400, 38462, 1), new ScheduledTask(17760, 17846, 1), new ScheduledTask(22200, 22311, 3), new ScheduledTask(33150, 33187, 2), new ScheduledTask(18450, 18548, 2), new ScheduledTask(11100, 11162, 0), new ScheduledTask(4900, 4962, 0), new ScheduledTask(0, 123, 2), new ScheduledTask(17300, 17325, 0), new ScheduledTask(38400, 38474, 0), new ScheduledTask(22300, 22374, 0), new ScheduledTask(35900, 35925, 0), new ScheduledTask(46250, 46275, 0)};
        int[] expectedProcessorEndTimes = new int[]{46275, 38462, 38749, 22311};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 714;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(346, 371, 1), new ScheduledTask(371, 433, 1), new ScheduledTask(0, 74, 1), new ScheduledTask(640, 689, 0), new ScheduledTask(136, 210, 1), new ScheduledTask(210, 321, 1), new ScheduledTask(554, 640, 0), new ScheduledTask(0, 49, 0), new ScheduledTask(618, 680, 1), new ScheduledTask(468, 554, 0), new ScheduledTask(507, 618, 1), new ScheduledTask(431, 468, 0), new ScheduledTask(308, 406, 0), new ScheduledTask(49, 111, 0), new ScheduledTask(74, 136, 1), new ScheduledTask(185, 308, 0), new ScheduledTask(321, 346, 1), new ScheduledTask(433, 507, 1), new ScheduledTask(111, 185, 0), new ScheduledTask(406, 431, 0), new ScheduledTask(689, 714, 0)};
        int[] expectedProcessorEndTimes = new int[]{714, 680};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 373;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(198, 223, 0), new ScheduledTask(223, 285, 0), new ScheduledTask(0, 74, 2), new ScheduledTask(295, 344, 1), new ScheduledTask(74, 148, 2), new ScheduledTask(148, 259, 2), new ScheduledTask(86, 172, 3), new ScheduledTask(0, 49, 0), new ScheduledTask(283, 345, 3), new ScheduledTask(0, 86, 3), new ScheduledTask(172, 283, 3), new ScheduledTask(310, 347, 0), new ScheduledTask(197, 295, 1), new ScheduledTask(111, 173, 0), new ScheduledTask(49, 111, 0), new ScheduledTask(74, 197, 1), new ScheduledTask(173, 198, 0), new ScheduledTask(259, 333, 2), new ScheduledTask(0, 74, 1), new ScheduledTask(285, 310, 0), new ScheduledTask(348, 373, 0)};
        int[] expectedProcessorEndTimes = new int[]{373, 344, 333, 345};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 262;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(25, 50, 1), new ScheduledTask(74, 136, 4), new ScheduledTask(0, 74, 5), new ScheduledTask(186, 235, 1), new ScheduledTask(74, 148, 5), new ScheduledTask(0, 111, 0), new ScheduledTask(86, 172, 3), new ScheduledTask(0, 49, 3), new ScheduledTask(172, 234, 3), new ScheduledTask(136, 222, 4), new ScheduledTask(75, 186, 1), new ScheduledTask(49, 86, 3), new ScheduledTask(124, 222, 2), new ScheduledTask(62, 124, 2), new ScheduledTask(0, 62, 2), new ScheduledTask(111, 234, 0), new ScheduledTask(0, 25, 1), new ScheduledTask(148, 222, 5), new ScheduledTask(0, 74, 4), new ScheduledTask(50, 75, 1), new ScheduledTask(237, 262, 0)};
        int[] expectedProcessorEndTimes = new int[]{262, 235, 222, 234, 222, 222};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random5_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#5_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 84200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(10800, 10853, 3), new ScheduledTask(0, 53, 2), new ScheduledTask(35900, 35970, 0), new ScheduledTask(59600, 59688, 0), new ScheduledTask(0, 18, 3), new ScheduledTask(25400, 25470, 0), new ScheduledTask(18400, 18470, 0), new ScheduledTask(77200, 77235, 0), new ScheduledTask(2600, 2670, 0), new ScheduledTask(51700, 51779, 0), new ScheduledTask(42600, 42662, 2), new ScheduledTask(31800, 31818, 2), new ScheduledTask(32400, 32435, 0), new ScheduledTask(68400, 68488, 0), new ScheduledTask(9600, 9688, 0), new ScheduledTask(0, 26, 0), new ScheduledTask(0, 44, 1), new ScheduledTask(26400, 26488, 1), new ScheduledTask(42900, 42988, 0), new ScheduledTask(42600, 42662, 3), new ScheduledTask(80700, 80735, 0)};
        int[] expectedProcessorEndTimes = new int[]{80735, 26488, 42662, 42662};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random5_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#5_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 52600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(24800, 24853, 1), new ScheduledTask(18400, 18453, 0), new ScheduledTask(0, 70, 3), new ScheduledTask(7200, 7288, 1), new ScheduledTask(0, 18, 1), new ScheduledTask(30700, 30770, 0), new ScheduledTask(23700, 23770, 0), new ScheduledTask(45600, 45635, 0), new ScheduledTask(2600, 2670, 0), new ScheduledTask(14000, 14079, 3), new ScheduledTask(0, 62, 2), new ScheduledTask(3600, 3618, 1), new ScheduledTask(37700, 37735, 0), new ScheduledTask(30000, 30088, 2), new ScheduledTask(9600, 9688, 0), new ScheduledTask(0, 26, 0), new ScheduledTask(41200, 41244, 0), new ScheduledTask(29800, 29888, 3), new ScheduledTask(12400, 12488, 2), new ScheduledTask(35400, 35462, 1), new ScheduledTask(49100, 49135, 0)};
        int[] expectedProcessorEndTimes = new int[]{49135, 35462, 30088, 29888};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random5_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#5_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 43980;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(22650, 22703, 2), new ScheduledTask(2700, 2753, 2), new ScheduledTask(19200, 19270, 3), new ScheduledTask(31600, 31688, 0), new ScheduledTask(0, 18, 2), new ScheduledTask(10560, 10630, 1), new ScheduledTask(5200, 5270, 3), new ScheduledTask(33200, 33235, 3), new ScheduledTask(0, 70, 0), new ScheduledTask(23700, 23779, 0), new ScheduledTask(13350, 13412, 2), new ScheduledTask(10650, 10668, 2), new ScheduledTask(7000, 7035, 0), new ScheduledTask(29520, 29608, 1), new ScheduledTask(0, 88, 1), new ScheduledTask(0, 26, 3), new ScheduledTask(19300, 19344, 0), new ScheduledTask(18960, 19048, 1), new ScheduledTask(10500, 10588, 0), new ScheduledTask(30600, 30662, 2), new ScheduledTask(40480, 40515, 0)};
        int[] expectedProcessorEndTimes = new int[]{40515, 29608, 30662, 33235};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 640;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(517, 570, 0), new ScheduledTask(96, 149, 0), new ScheduledTask(324, 394, 0), new ScheduledTask(362, 450, 1), new ScheduledTask(0, 18, 1), new ScheduledTask(219, 289, 0), new ScheduledTask(149, 219, 0), new ScheduledTask(570, 605, 0), new ScheduledTask(26, 96, 0), new ScheduledTask(438, 517, 0), new ScheduledTask(124, 186, 1), new ScheduledTask(106, 124, 1), new ScheduledTask(289, 324, 0), new ScheduledTask(450, 538, 1), new ScheduledTask(18, 106, 1), new ScheduledTask(0, 26, 0), new ScheduledTask(394, 438, 0), new ScheduledTask(274, 362, 1), new ScheduledTask(186, 274, 1), new ScheduledTask(538, 600, 1), new ScheduledTask(605, 640, 0)};
        int[] expectedProcessorEndTimes = new int[]{640, 600};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 341;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(158, 211, 2), new ScheduledTask(18, 71, 1), new ScheduledTask(0, 70, 2), new ScheduledTask(151, 239, 1), new ScheduledTask(0, 18, 1), new ScheduledTask(166, 236, 0), new ScheduledTask(96, 166, 0), new ScheduledTask(271, 306, 0), new ScheduledTask(26, 96, 0), new ScheduledTask(220, 299, 3), new ScheduledTask(89, 151, 1), new ScheduledTask(71, 89, 1), new ScheduledTask(236, 271, 0), new ScheduledTask(211, 299, 2), new ScheduledTask(0, 88, 3), new ScheduledTask(0, 26, 0), new ScheduledTask(176, 220, 3), new ScheduledTask(70, 158, 2), new ScheduledTask(88, 176, 3), new ScheduledTask(239, 301, 1), new ScheduledTask(306, 341, 0)};
        int[] expectedProcessorEndTimes = new int[]{341, 301, 299, 299};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 241;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(149, 202, 4), new ScheduledTask(114, 167, 0), new ScheduledTask(70, 140, 5), new ScheduledTask(80, 168, 1), new ScheduledTask(0, 18, 3), new ScheduledTask(0, 70, 4), new ScheduledTask(0, 70, 5), new ScheduledTask(168, 203, 1), new ScheduledTask(0, 70, 2), new ScheduledTask(70, 149, 4), new ScheduledTask(18, 80, 1), new ScheduledTask(0, 18, 1), new ScheduledTask(167, 202, 0), new ScheduledTask(114, 202, 2), new ScheduledTask(26, 114, 0), new ScheduledTask(0, 26, 0), new ScheduledTask(70, 114, 2), new ScheduledTask(106, 194, 3), new ScheduledTask(18, 106, 3), new ScheduledTask(140, 202, 5), new ScheduledTask(206, 241, 0)};
        int[] expectedProcessorEndTimes = new int[]{241, 203, 202, 194, 202, 202};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random6_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#6_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 86700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 29, 2), new ScheduledTask(17400, 17476, 2), new ScheduledTask(53400, 53486, 0), new ScheduledTask(37200, 37219, 0), new ScheduledTask(6700, 6738, 0), new ScheduledTask(0, 48, 1), new ScheduledTask(40200, 40267, 3), new ScheduledTask(0, 67, 3), new ScheduledTask(0, 67, 0), new ScheduledTask(69600, 69695, 0), new ScheduledTask(28800, 28886, 1), new ScheduledTask(63000, 63029, 2), new ScheduledTask(19100, 19195, 0), new ScheduledTask(42900, 42938, 0), new ScheduledTask(62000, 62076, 0), new ScheduledTask(46700, 46767, 0), new ScheduledTask(39100, 39138, 0), new ScheduledTask(28600, 28686, 0), new ScheduledTask(10500, 10586, 0), new ScheduledTask(79100, 79157, 0), new ScheduledTask(84800, 84819, 0)};
        int[] expectedProcessorEndTimes = new int[]{84819, 28886, 63029, 40267};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random6_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#6_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 52300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 29, 2), new ScheduledTask(0, 76, 3), new ScheduledTask(32600, 32686, 1), new ScheduledTask(18100, 18119, 0), new ScheduledTask(4800, 4838, 0), new ScheduledTask(0, 48, 0), new ScheduledTask(36400, 36467, 2), new ScheduledTask(5800, 5867, 2), new ScheduledTask(0, 67, 1), new ScheduledTask(35200, 35295, 0), new ScheduledTask(19200, 19286, 2), new ScheduledTask(13400, 13429, 1), new ScheduledTask(8600, 8695, 0), new ScheduledTask(23800, 23838, 0), new ScheduledTask(27600, 27676, 0), new ScheduledTask(19200, 19267, 1), new ScheduledTask(20000, 20038, 0), new ScheduledTask(32400, 32486, 3), new ScheduledTask(15200, 15286, 3), new ScheduledTask(44700, 44757, 0), new ScheduledTask(50400, 50419, 0)};
        int[] expectedProcessorEndTimes = new int[]{50419, 32686, 36467, 32486};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 647;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 29, 1), new ScheduledTask(0, 76, 0), new ScheduledTask(316, 402, 1), new ScheduledTask(209, 228, 0), new ScheduledTask(76, 114, 0), new ScheduledTask(29, 77, 1), new ScheduledTask(555, 622, 1), new ScheduledTask(402, 469, 1), new ScheduledTask(77, 144, 1), new ScheduledTask(476, 571, 0), new ScheduledTask(469, 555, 1), new ScheduledTask(228, 257, 0), new ScheduledTask(114, 209, 0), new ScheduledTask(295, 333, 0), new ScheduledTask(400, 476, 0), new ScheduledTask(333, 400, 0), new ScheduledTask(257, 295, 0), new ScheduledTask(230, 316, 1), new ScheduledTask(144, 230, 1), new ScheduledTask(571, 628, 0), new ScheduledTask(628, 647, 0)};
        int[] expectedProcessorEndTimes = new int[]{647, 622};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 336;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 29, 0), new ScheduledTask(0, 76, 3), new ScheduledTask(144, 230, 0), new ScheduledTask(38, 57, 1), new ScheduledTask(0, 38, 1), new ScheduledTask(29, 77, 0), new ScheduledTask(248, 315, 3), new ScheduledTask(162, 229, 2), new ScheduledTask(0, 67, 2), new ScheduledTask(162, 257, 1), new ScheduledTask(230, 316, 0), new ScheduledTask(77, 106, 0), new ScheduledTask(67, 162, 2), new ScheduledTask(106, 144, 0), new ScheduledTask(229, 305, 2), new ScheduledTask(95, 162, 1), new ScheduledTask(57, 95, 1), new ScheduledTask(162, 248, 3), new ScheduledTask(76, 162, 3), new ScheduledTask(257, 314, 1), new ScheduledTask(317, 336, 0)};
        int[] expectedProcessorEndTimes = new int[]{336, 314, 305, 315};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 232;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 29, 5), new ScheduledTask(0, 76, 1), new ScheduledTask(0, 86, 3), new ScheduledTask(38, 57, 4), new ScheduledTask(0, 38, 4), new ScheduledTask(0, 48, 0), new ScheduledTask(143, 210, 4), new ScheduledTask(86, 153, 3), new ScheduledTask(48, 115, 0), new ScheduledTask(114, 209, 1), new ScheduledTask(57, 143, 4), new ScheduledTask(115, 144, 0), new ScheduledTask(0, 95, 2), new ScheduledTask(76, 114, 1), new ScheduledTask(133, 209, 2), new ScheduledTask(144, 211, 0), new ScheduledTask(95, 133, 2), new ScheduledTask(115, 201, 5), new ScheduledTask(29, 115, 5), new ScheduledTask(153, 210, 3), new ScheduledTask(213, 232, 0)};
        int[] expectedProcessorEndTimes = new int[]{232, 209, 209, 210, 210, 201};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random7_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#7_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 86500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(39700, 39784, 0), new ScheduledTask(34900, 34948, 0), new ScheduledTask(61300, 61360, 0), new ScheduledTask(48100, 48136, 0), new ScheduledTask(67300, 67396, 0), new ScheduledTask(30100, 30148, 0), new ScheduledTask(57600, 57624, 2), new ScheduledTask(27700, 27724, 0), new ScheduledTask(12000, 12109, 0), new ScheduledTask(3600, 3636, 0), new ScheduledTask(22900, 22924, 0), new ScheduledTask(50400, 50436, 3), new ScheduledTask(7200, 7248, 0), new ScheduledTask(51700, 51760, 0), new ScheduledTask(57700, 57736, 0), new ScheduledTask(0, 84, 3), new ScheduledTask(0, 36, 0), new ScheduledTask(0, 96, 2), new ScheduledTask(25300, 25324, 0), new ScheduledTask(0, 121, 1), new ScheduledTask(76900, 76996, 0)};
        int[] expectedProcessorEndTimes = new int[]{76996, 121, 57624, 50436};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random7_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#7_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 55500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(16800, 16884, 3), new ScheduledTask(19200, 19248, 0), new ScheduledTask(33600, 33660, 3), new ScheduledTask(38500, 38536, 0), new ScheduledTask(26400, 26496, 2), new ScheduledTask(21800, 21848, 1), new ScheduledTask(36100, 36124, 0), new ScheduledTask(16800, 16824, 0), new ScheduledTask(0, 109, 1), new ScheduledTask(3600, 3636, 0), new ScheduledTask(12000, 12024, 0), new ScheduledTask(19200, 19236, 2), new ScheduledTask(7200, 7248, 0), new ScheduledTask(31400, 31460, 1), new ScheduledTask(42100, 42136, 0), new ScheduledTask(0, 84, 3), new ScheduledTask(0, 36, 0), new ScheduledTask(0, 96, 2), new ScheduledTask(14400, 14424, 0), new ScheduledTask(24000, 24121, 0), new ScheduledTask(45900, 45996, 0)};
        int[] expectedProcessorEndTimes = new int[]{45996, 31460, 26496, 33660};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random7_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#7_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 48000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(27360, 27444, 1), new ScheduledTask(11520, 11568, 1), new ScheduledTask(24200, 24260, 3), new ScheduledTask(25200, 25236, 0), new ScheduledTask(23550, 23646, 2), new ScheduledTask(16350, 16398, 2), new ScheduledTask(19200, 19224, 0), new ScheduledTask(16800, 16824, 0), new ScheduledTask(0, 109, 2), new ScheduledTask(3600, 3636, 0), new ScheduledTask(12000, 12024, 0), new ScheduledTask(21600, 21636, 0), new ScheduledTask(7200, 7248, 0), new ScheduledTask(28800, 28860, 0), new ScheduledTask(34800, 34836, 0), new ScheduledTask(17280, 17364, 1), new ScheduledTask(0, 36, 0), new ScheduledTask(0, 96, 1), new ScheduledTask(14400, 14424, 0), new ScheduledTask(0, 121, 3), new ScheduledTask(38400, 38496, 0)};
        int[] expectedProcessorEndTimes = new int[]{38496, 27444, 23646, 24260};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 663;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(324, 408, 1), new ScheduledTask(192, 240, 1), new ScheduledTask(504, 564, 1), new ScheduledTask(398, 434, 0), new ScheduledTask(470, 566, 0), new ScheduledTask(144, 192, 1), new ScheduledTask(374, 398, 0), new ScheduledTask(229, 253, 0), new ScheduledTask(72, 181, 0), new ScheduledTask(36, 72, 0), new ScheduledTask(181, 205, 0), new ScheduledTask(408, 444, 1), new ScheduledTask(0, 48, 1), new ScheduledTask(444, 504, 1), new ScheduledTask(434, 470, 0), new ScheduledTask(240, 324, 1), new ScheduledTask(0, 36, 0), new ScheduledTask(48, 144, 1), new ScheduledTask(205, 229, 0), new ScheduledTask(253, 374, 0), new ScheduledTask(567, 663, 0)};
        int[] expectedProcessorEndTimes = new int[]{663, 564};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 387;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(108, 192, 2), new ScheduledTask(60, 108, 1), new ScheduledTask(108, 168, 1), new ScheduledTask(60, 96, 3), new ScheduledTask(192, 288, 2), new ScheduledTask(60, 108, 0), new ScheduledTask(0, 24, 3), new ScheduledTask(0, 24, 1), new ScheduledTask(168, 277, 1), new ScheduledTask(24, 60, 3), new ScheduledTask(0, 24, 0), new ScheduledTask(24, 60, 1), new ScheduledTask(60, 108, 2), new ScheduledTask(108, 168, 0), new ScheduledTask(24, 60, 0), new ScheduledTask(96, 180, 3), new ScheduledTask(24, 60, 2), new ScheduledTask(180, 276, 3), new ScheduledTask(0, 24, 2), new ScheduledTask(168, 289, 0), new ScheduledTask(291, 387, 0)};
        int[] expectedProcessorEndTimes = new int[]{387, 277, 288, 276};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 292;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 84, 3), new ScheduledTask(48, 96, 4), new ScheduledTask(132, 192, 5), new ScheduledTask(120, 156, 3), new ScheduledTask(96, 192, 2), new ScheduledTask(0, 48, 5), new ScheduledTask(48, 72, 5), new ScheduledTask(48, 72, 0), new ScheduledTask(72, 181, 1), new ScheduledTask(36, 72, 1), new ScheduledTask(0, 24, 0), new ScheduledTask(84, 120, 3), new ScheduledTask(0, 48, 4), new ScheduledTask(72, 132, 5), new ScheduledTask(156, 192, 3), new ScheduledTask(96, 180, 4), new ScheduledTask(0, 36, 1), new ScheduledTask(0, 96, 2), new ScheduledTask(24, 48, 0), new ScheduledTask(72, 193, 0), new ScheduledTask(196, 292, 0)};
        int[] expectedProcessorEndTimes = new int[]{292, 181, 192, 192, 180, 192};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random8_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#8_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 82500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(15800, 15839, 0), new ScheduledTask(29400, 29449, 3), new ScheduledTask(3900, 3989, 0), new ScheduledTask(47400, 47449, 2), new ScheduledTask(45200, 45249, 0), new ScheduledTask(33400, 33439, 0), new ScheduledTask(37300, 37379, 0), new ScheduledTask(12000, 12030, 1), new ScheduledTask(30000, 30079, 1), new ScheduledTask(12800, 12830, 0), new ScheduledTask(0, 39, 0), new ScheduledTask(19700, 19798, 0), new ScheduledTask(0, 79, 2), new ScheduledTask(58800, 58830, 3), new ScheduledTask(29500, 29539, 0), new ScheduledTask(0, 20, 1), new ScheduledTask(50100, 50198, 0), new ScheduledTask(59900, 59998, 0), new ScheduledTask(69700, 69789, 0), new ScheduledTask(0, 49, 3), new ScheduledTask(78600, 78639, 0)};
        int[] expectedProcessorEndTimes = new int[]{78639, 30079, 47449, 58830};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random8_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#8_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 51300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(17800, 17839, 3), new ScheduledTask(27400, 27449, 1), new ScheduledTask(0, 89, 3), new ScheduledTask(37200, 37249, 1), new ScheduledTask(28600, 28649, 0), new ScheduledTask(8900, 8939, 0), new ScheduledTask(20700, 20779, 0), new ScheduledTask(36500, 36530, 0), new ScheduledTask(39500, 39579, 0), new ScheduledTask(0, 30, 0), new ScheduledTask(0, 39, 1), new ScheduledTask(7800, 7898, 1), new ScheduledTask(12800, 12879, 0), new ScheduledTask(33500, 33530, 0), new ScheduledTask(5000, 5039, 0), new ScheduledTask(3000, 3020, 0), new ScheduledTask(9800, 9898, 2), new ScheduledTask(25600, 25698, 3), new ScheduledTask(29400, 29489, 2), new ScheduledTask(0, 49, 2), new ScheduledTask(47400, 47439, 0)};
        int[] expectedProcessorEndTimes = new int[]{47439, 37249, 29489, 25698};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 627;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(128, 167, 0), new ScheduledTask(392, 441, 0), new ScheduledTask(39, 128, 0), new ScheduledTask(306, 355, 1), new ScheduledTask(441, 490, 0), new ScheduledTask(304, 343, 0), new ScheduledTask(129, 208, 1), new ScheduledTask(385, 415, 1), new ScheduledTask(415, 494, 1), new ScheduledTask(0, 30, 1), new ScheduledTask(0, 39, 0), new ScheduledTask(167, 265, 0), new ScheduledTask(50, 129, 1), new ScheduledTask(355, 385, 1), new ScheduledTask(265, 304, 0), new ScheduledTask(30, 50, 1), new ScheduledTask(208, 306, 1), new ScheduledTask(490, 588, 0), new ScheduledTask(494, 583, 1), new ScheduledTask(343, 392, 0), new ScheduledTask(588, 627, 0)};
        int[] expectedProcessorEndTimes = new int[]{627, 583};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 336;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 39, 2), new ScheduledTask(138, 187, 0), new ScheduledTask(0, 89, 0), new ScheduledTask(157, 206, 2), new ScheduledTask(187, 236, 0), new ScheduledTask(176, 215, 1), new ScheduledTask(109, 188, 3), new ScheduledTask(266, 296, 0), new ScheduledTask(215, 294, 1), new ScheduledTask(0, 30, 3), new ScheduledTask(0, 39, 1), new ScheduledTask(39, 137, 1), new ScheduledTask(30, 109, 3), new ScheduledTask(236, 266, 0), new ScheduledTask(137, 176, 1), new ScheduledTask(39, 59, 2), new ScheduledTask(59, 157, 2), new ScheduledTask(188, 286, 3), new ScheduledTask(206, 295, 2), new ScheduledTask(89, 138, 0), new ScheduledTask(297, 336, 0)};
        int[] expectedProcessorEndTimes = new int[]{336, 294, 295, 286};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 239;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 39, 5), new ScheduledTask(138, 187, 3), new ScheduledTask(0, 89, 3), new ScheduledTask(49, 98, 2), new ScheduledTask(0, 49, 2), new ScheduledTask(157, 196, 0), new ScheduledTask(30, 109, 4), new ScheduledTask(167, 197, 1), new ScheduledTask(118, 197, 5), new ScheduledTask(0, 30, 4), new ScheduledTask(0, 39, 1), new ScheduledTask(0, 98, 0), new ScheduledTask(39, 118, 5), new ScheduledTask(137, 167, 1), new ScheduledTask(118, 157, 0), new ScheduledTask(98, 118, 0), new ScheduledTask(39, 137, 1), new ScheduledTask(98, 196, 2), new ScheduledTask(109, 198, 4), new ScheduledTask(89, 138, 3), new ScheduledTask(200, 239, 0)};
        int[] expectedProcessorEndTimes = new int[]{239, 197, 196, 187, 198, 197};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random9_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#9_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 76100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 39, 2), new ScheduledTask(29900, 29977, 0), new ScheduledTask(44500, 44577, 0), new ScheduledTask(6100, 6177, 0), new ScheduledTask(23400, 23477, 1), new ScheduledTask(13800, 13823, 0), new ScheduledTask(3000, 3031, 0), new ScheduledTask(37600, 37669, 0), new ScheduledTask(23000, 23069, 0), new ScheduledTask(63800, 63831, 0), new ScheduledTask(66900, 66946, 0), new ScheduledTask(37200, 37254, 3), new ScheduledTask(16100, 16169, 0), new ScheduledTask(52200, 52254, 0), new ScheduledTask(0, 39, 1), new ScheduledTask(1500, 1515, 0), new ScheduledTask(0, 15, 0), new ScheduledTask(23400, 23477, 2), new ScheduledTask(0, 62, 3), new ScheduledTask(57600, 57662, 0), new ScheduledTask(71500, 71546, 0)};
        int[] expectedProcessorEndTimes = new int[]{71546, 23477, 23477, 37254};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random9_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#9_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 47700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(6200, 6239, 2), new ScheduledTask(16900, 16977, 0), new ScheduledTask(24600, 24677, 0), new ScheduledTask(0, 77, 0), new ScheduledTask(26400, 26477, 1), new ScheduledTask(7700, 7723, 0), new ScheduledTask(0, 31, 2), new ScheduledTask(19800, 19869, 3), new ScheduledTask(6000, 6069, 3), new ScheduledTask(20200, 20231, 1), new ScheduledTask(33600, 33646, 3), new ScheduledTask(37700, 37754, 0), new ScheduledTask(10000, 10069, 0), new ScheduledTask(32300, 32354, 0), new ScheduledTask(0, 39, 1), new ScheduledTask(3000, 3015, 3), new ScheduledTask(0, 15, 3), new ScheduledTask(14000, 14077, 2), new ScheduledTask(29400, 29462, 2), new ScheduledTask(7800, 7862, 1), new ScheduledTask(43100, 43146, 0)};
        int[] expectedProcessorEndTimes = new int[]{43146, 26477, 29462, 33646};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random9_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#9_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 40350;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 39, 0), new ScheduledTask(3900, 3977, 0), new ScheduledTask(25920, 25997, 1), new ScheduledTask(0, 77, 1), new ScheduledTask(20000, 20077, 3), new ScheduledTask(4500, 4523, 2), new ScheduledTask(0, 31, 3), new ScheduledTask(6200, 6269, 3), new ScheduledTask(18300, 18369, 2), new ScheduledTask(27100, 27131, 0), new ScheduledTask(28650, 28696, 2), new ScheduledTask(30200, 30254, 0), new ScheduledTask(7950, 8019, 2), new ScheduledTask(15500, 15554, 0), new ScheduledTask(11600, 11639, 0), new ScheduledTask(2250, 2265, 2), new ScheduledTask(0, 15, 2), new ScheduledTask(9240, 9317, 1), new ScheduledTask(18480, 18542, 1), new ScheduledTask(20900, 20962, 0), new ScheduledTask(35750, 35796, 0)};
        int[] expectedProcessorEndTimes = new int[]{35796, 25997, 28696, 20077};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 579;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(130, 169, 0), new ScheduledTask(246, 323, 1), new ScheduledTask(169, 246, 0), new ScheduledTask(30, 107, 0), new ScheduledTask(454, 531, 1), new ScheduledTask(107, 130, 0), new ScheduledTask(0, 31, 1), new ScheduledTask(385, 454, 1), new ScheduledTask(100, 169, 1), new ScheduledTask(401, 432, 0), new ScheduledTask(432, 478, 0), new ScheduledTask(478, 532, 0), new ScheduledTask(31, 100, 1), new ScheduledTask(285, 339, 0), new ScheduledTask(246, 285, 0), new ScheduledTask(15, 30, 0), new ScheduledTask(0, 15, 0), new ScheduledTask(169, 246, 1), new ScheduledTask(323, 385, 1), new ScheduledTask(339, 401, 0), new ScheduledTask(533, 579, 0)};
        int[] expectedProcessorEndTimes = new int[]{579, 531};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 316;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(69, 108, 2), new ScheduledTask(31, 108, 1), new ScheduledTask(185, 262, 2), new ScheduledTask(0, 77, 0), new ScheduledTask(191, 268, 3), new ScheduledTask(30, 53, 3), new ScheduledTask(0, 31, 1), new ScheduledTask(122, 191, 3), new ScheduledTask(53, 122, 3), new ScheduledTask(232, 263, 1), new ScheduledTask(170, 216, 0), new ScheduledTask(216, 270, 0), new ScheduledTask(0, 69, 2), new ScheduledTask(116, 170, 0), new ScheduledTask(77, 116, 0), new ScheduledTask(15, 30, 3), new ScheduledTask(0, 15, 3), new ScheduledTask(108, 185, 2), new ScheduledTask(108, 170, 1), new ScheduledTask(170, 232, 1), new ScheduledTask(270, 316, 0)};
        int[] expectedProcessorEndTimes = new int[]{316, 263, 262, 268};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 226;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 39, 3), new ScheduledTask(46, 123, 0), new ScheduledTask(0, 77, 1), new ScheduledTask(15, 92, 2), new ScheduledTask(101, 178, 3), new ScheduledTask(92, 115, 2), new ScheduledTask(15, 46, 0), new ScheduledTask(69, 138, 5), new ScheduledTask(0, 69, 5), new ScheduledTask(146, 177, 4), new ScheduledTask(77, 123, 1), new ScheduledTask(123, 177, 1), new ScheduledTask(0, 69, 4), new ScheduledTask(123, 177, 0), new ScheduledTask(138, 177, 5), new ScheduledTask(0, 15, 0), new ScheduledTask(0, 15, 2), new ScheduledTask(69, 146, 4), new ScheduledTask(39, 101, 3), new ScheduledTask(115, 177, 2), new ScheduledTask(180, 226, 0)};
        int[] expectedProcessorEndTimes = new int[]{226, 177, 177, 178, 177, 177};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 16;
        int expectedScheduleEndTime = 186;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 75, 3), new ScheduledTask(0, 93, 0), new ScheduledTask(0, 19, 14), new ScheduledTask(0, 37, 13), new ScheduledTask(0, 19, 15), new ScheduledTask(0, 65, 7), new ScheduledTask(0, 75, 4), new ScheduledTask(0, 19, 11), new ScheduledTask(37, 84, 13), new ScheduledTask(0, 75, 5), new ScheduledTask(0, 65, 8), new ScheduledTask(0, 65, 9), new ScheduledTask(0, 84, 1), new ScheduledTask(19, 75, 11), new ScheduledTask(19, 66, 14), new ScheduledTask(0, 56, 12), new ScheduledTask(0, 84, 2), new ScheduledTask(19, 66, 15), new ScheduledTask(0, 75, 6), new ScheduledTask(0, 65, 10), new ScheduledTask(93, 186, 0)};
        int[] expectedProcessorEndTimes = new int[]{186, 84, 84, 75, 75, 75, 75, 65, 65, 65, 65, 75, 56, 84, 66, 66};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 679;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(404, 479, 1), new ScheduledTask(493, 586, 0), new ScheduledTask(19, 38, 1), new ScheduledTask(84, 121, 0), new ScheduledTask(563, 582, 1), new ScheduledTask(251, 316, 0), new ScheduledTask(113, 188, 1), new ScheduledTask(0, 19, 1), new ScheduledTask(282, 329, 1), new ScheduledTask(38, 113, 1), new ScheduledTask(121, 186, 0), new ScheduledTask(316, 381, 0), new ScheduledTask(479, 563, 1), new ScheduledTask(437, 493, 0), new ScheduledTask(235, 282, 1), new ScheduledTask(381, 437, 0), new ScheduledTask(0, 84, 0), new ScheduledTask(188, 235, 1), new ScheduledTask(329, 404, 1), new ScheduledTask(186, 251, 0), new ScheduledTask(586, 679, 0)};
        int[] expectedProcessorEndTimes = new int[]{679, 582};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 390;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(75, 150, 2), new ScheduledTask(198, 291, 1), new ScheduledTask(19, 38, 1), new ScheduledTask(0, 37, 0), new ScheduledTask(179, 198, 1), new ScheduledTask(167, 232, 0), new ScheduledTask(159, 234, 3), new ScheduledTask(0, 19, 1), new ScheduledTask(132, 179, 1), new ScheduledTask(0, 75, 3), new ScheduledTask(37, 102, 0), new ScheduledTask(232, 297, 0), new ScheduledTask(150, 234, 2), new ScheduledTask(234, 290, 3), new ScheduledTask(85, 132, 1), new ScheduledTask(234, 290, 2), new ScheduledTask(75, 159, 3), new ScheduledTask(38, 85, 1), new ScheduledTask(0, 75, 2), new ScheduledTask(102, 167, 0), new ScheduledTask(297, 390, 0)};
        int[] expectedProcessorEndTimes = new int[]{390, 291, 290, 290};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 247;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(19, 94, 4), new ScheduledTask(56, 149, 1), new ScheduledTask(0, 19, 0), new ScheduledTask(19, 56, 0), new ScheduledTask(131, 150, 2), new ScheduledTask(75, 140, 6), new ScheduledTask(65, 140, 5), new ScheduledTask(0, 19, 4), new ScheduledTask(103, 150, 0), new ScheduledTask(0, 75, 6), new ScheduledTask(0, 65, 5), new ScheduledTask(84, 149, 3), new ScheduledTask(47, 131, 2), new ScheduledTask(94, 150, 4), new ScheduledTask(56, 103, 0), new ScheduledTask(0, 56, 1), new ScheduledTask(0, 84, 3), new ScheduledTask(0, 47, 2), new ScheduledTask(65, 140, 7), new ScheduledTask(0, 65, 7), new ScheduledTask(154, 247, 0)};
        int[] expectedProcessorEndTimes = new int[]{247, 149, 150, 149, 150, 140, 140, 140};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 76000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(65500, 65579, 0), new ScheduledTask(36600, 36652, 3), new ScheduledTask(42700, 42779, 0), new ScheduledTask(55000, 55061, 0), new ScheduledTask(0, 44, 2), new ScheduledTask(36600, 36661, 0), new ScheduledTask(11300, 11361, 0), new ScheduledTask(0, 61, 3), new ScheduledTask(0, 70, 1), new ScheduledTask(0, 26, 0), new ScheduledTask(42000, 42017, 1), new ScheduledTask(17400, 17417, 0), new ScheduledTask(30500, 30561, 0), new ScheduledTask(22600, 22679, 0), new ScheduledTask(50600, 50644, 0), new ScheduledTask(26400, 26470, 2), new ScheduledTask(19100, 19135, 0), new ScheduledTask(52200, 52235, 1), new ScheduledTask(61100, 61144, 0), new ScheduledTask(2600, 2687, 0), new ScheduledTask(73400, 73426, 0)};
        int[] expectedProcessorEndTimes = new int[]{73426, 52235, 26470, 36652};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 46400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(27800, 27879, 1), new ScheduledTask(29700, 29752, 0), new ScheduledTask(17400, 17479, 2), new ScheduledTask(15800, 15861, 3), new ScheduledTask(0, 44, 0), new ScheduledTask(15600, 15661, 1), new ScheduledTask(5200, 5261, 2), new ScheduledTask(23600, 23661, 0), new ScheduledTask(13100, 13170, 0), new ScheduledTask(0, 26, 2), new ScheduledTask(33200, 33217, 2), new ScheduledTask(0, 17, 1), new ScheduledTask(3400, 3461, 1), new ScheduledTask(0, 79, 3), new ScheduledTask(34900, 34944, 0), new ScheduledTask(28000, 28070, 3), new ScheduledTask(20100, 20135, 0), new ScheduledTask(36600, 36635, 2), new ScheduledTask(39300, 39344, 0), new ScheduledTask(4400, 4487, 0), new ScheduledTask(43800, 43826, 0)};
        int[] expectedProcessorEndTimes = new int[]{43826, 27879, 36635, 28070};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 39200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(26280, 26359, 1), new ScheduledTask(3400, 3452, 3), new ScheduledTask(23700, 23779, 2), new ScheduledTask(17200, 17261, 3), new ScheduledTask(0, 44, 2), new ScheduledTask(23500, 23561, 0), new ScheduledTask(0, 61, 1), new ScheduledTask(11300, 11361, 0), new ScheduledTask(7320, 7390, 1), new ScheduledTask(0, 26, 0), new ScheduledTask(13800, 13817, 3), new ScheduledTask(0, 17, 3), new ScheduledTask(17400, 17461, 0), new ScheduledTask(11850, 11929, 2), new ScheduledTask(15720, 15764, 1), new ScheduledTask(29600, 29670, 0), new ScheduledTask(6600, 6635, 2), new ScheduledTask(29400, 29435, 3), new ScheduledTask(21000, 21044, 1), new ScheduledTask(2600, 2687, 0), new ScheduledTask(36600, 36626, 0)};
        int[] expectedProcessorEndTimes = new int[]{36626, 26359, 23779, 29435};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 569;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(463, 542, 0), new ScheduledTask(323, 375, 0), new ScheduledTask(279, 358, 1), new ScheduledTask(375, 436, 1), new ScheduledTask(26, 70, 0), new ScheduledTask(218, 279, 1), new ScheduledTask(0, 61, 1), new ScheduledTask(262, 323, 0), new ScheduledTask(157, 227, 0), new ScheduledTask(0, 26, 0), new ScheduledTask(358, 375, 1), new ScheduledTask(61, 78, 1), new ScheduledTask(157, 218, 1), new ScheduledTask(78, 157, 1), new ScheduledTask(375, 419, 0), new ScheduledTask(436, 506, 1), new ScheduledTask(227, 262, 0), new ScheduledTask(506, 541, 1), new ScheduledTask(419, 463, 0), new ScheduledTask(70, 157, 0), new ScheduledTask(543, 569, 0)};
        int[] expectedProcessorEndTimes = new int[]{569, 541};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 299;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(192, 271, 2), new ScheduledTask(0, 52, 2), new ScheduledTask(52, 131, 2), new ScheduledTask(131, 192, 2), new ScheduledTask(26, 70, 0), new ScheduledTask(165, 226, 1), new ScheduledTask(70, 131, 0), new ScheduledTask(166, 227, 0), new ScheduledTask(0, 70, 3), new ScheduledTask(0, 26, 0), new ScheduledTask(149, 166, 3), new ScheduledTask(87, 104, 1), new ScheduledTask(104, 165, 1), new ScheduledTask(70, 149, 3), new ScheduledTask(226, 270, 1), new ScheduledTask(166, 236, 3), new ScheduledTask(131, 166, 0), new ScheduledTask(236, 271, 3), new ScheduledTask(227, 271, 0), new ScheduledTask(0, 87, 1), new ScheduledTask(273, 299, 0)};
        int[] expectedProcessorEndTimes = new int[]{299, 270, 271, 271};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 211;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(104, 183, 1), new ScheduledTask(96, 148, 3), new ScheduledTask(61, 140, 0), new ScheduledTask(78, 139, 5), new ScheduledTask(0, 44, 4), new ScheduledTask(44, 105, 4), new ScheduledTask(0, 61, 2), new ScheduledTask(0, 61, 0), new ScheduledTask(26, 96, 3), new ScheduledTask(0, 26, 3), new ScheduledTask(61, 78, 5), new ScheduledTask(87, 104, 1), new ScheduledTask(0, 61, 5), new ScheduledTask(96, 175, 2), new ScheduledTask(140, 184, 0), new ScheduledTask(105, 175, 4), new ScheduledTask(61, 96, 2), new ScheduledTask(148, 183, 3), new ScheduledTask(139, 183, 5), new ScheduledTask(0, 87, 1), new ScheduledTask(185, 211, 0)};
        int[] expectedProcessorEndTimes = new int[]{211, 183, 175, 183, 175, 183};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot91_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.91_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(3600, 3606, 2), new ScheduledTask(4300, 4310, 0), new ScheduledTask(2200, 2204, 0), new ScheduledTask(3600, 3606, 3), new ScheduledTask(400, 404, 0), new ScheduledTask(2900, 2904, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(5700, 5707, 0), new ScheduledTask(3000, 3007, 1), new ScheduledTask(2600, 2603, 0), new ScheduledTask(6400, 6403, 0), new ScheduledTask(7200, 7207, 0), new ScheduledTask(0, 4, 0), new ScheduledTask(0, 6, 3), new ScheduledTask(3300, 3310, 0), new ScheduledTask(5300, 5304, 0), new ScheduledTask(1400, 1408, 0), new ScheduledTask(0, 6, 2), new ScheduledTask(800, 806, 0), new ScheduledTask(6700, 6705, 0), new ScheduledTask(7900, 7906, 0)};
        int[] expectedProcessorEndTimes = new int[]{7906, 3007, 3606, 3606};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot91_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.91_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(3400, 3406, 3), new ScheduledTask(2200, 2210, 0), new ScheduledTask(0, 4, 3), new ScheduledTask(800, 806, 3), new ScheduledTask(400, 404, 0), new ScheduledTask(800, 804, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(3000, 3007, 2), new ScheduledTask(2000, 2007, 3), new ScheduledTask(2400, 2403, 2), new ScheduledTask(3800, 3803, 1), new ScheduledTask(4100, 4107, 0), new ScheduledTask(0, 4, 0), new ScheduledTask(0, 6, 2), new ScheduledTask(1200, 1210, 0), new ScheduledTask(3200, 3204, 0), new ScheduledTask(2200, 2208, 1), new ScheduledTask(1200, 1206, 2), new ScheduledTask(1000, 1006, 1), new ScheduledTask(3600, 3605, 0), new ScheduledTask(4800, 4806, 0)};
        int[] expectedProcessorEndTimes = new int[]{4806, 3803, 3007, 3406};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot91_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.91_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(3000, 3006, 1), new ScheduledTask(1500, 1510, 2), new ScheduledTask(1600, 1604, 3), new ScheduledTask(1440, 1446, 1), new ScheduledTask(1000, 1004, 0), new ScheduledTask(2900, 2904, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(600, 607, 1), new ScheduledTask(2160, 2167, 1), new ScheduledTask(2600, 2603, 0), new ScheduledTask(3700, 3703, 0), new ScheduledTask(2400, 2407, 3), new ScheduledTask(600, 604, 0), new ScheduledTask(0, 6, 0), new ScheduledTask(0, 10, 2), new ScheduledTask(3300, 3304, 0), new ScheduledTask(0, 8, 3), new ScheduledTask(1400, 1406, 0), new ScheduledTask(2000, 2006, 0), new ScheduledTask(3000, 3005, 2), new ScheduledTask(4000, 4006, 0)};
        int[] expectedProcessorEndTimes = new int[]{4006, 3006, 3005, 2407};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot91_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.91_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(44, 50, 1), new ScheduledTask(29, 39, 0), new ScheduledTask(8, 12, 0), new ScheduledTask(38, 44, 1), new ScheduledTask(4, 8, 0), new ScheduledTask(15, 19, 0), new ScheduledTask(6, 11, 1), new ScheduledTask(31, 38, 1), new ScheduledTask(46, 53, 0), new ScheduledTask(12, 15, 0), new ScheduledTask(43, 46, 0), new ScheduledTask(50, 57, 1), new ScheduledTask(0, 4, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(19, 29, 0), new ScheduledTask(39, 43, 0), new ScheduledTask(23, 31, 1), new ScheduledTask(11, 17, 1), new ScheduledTask(17, 23, 1), new ScheduledTask(53, 58, 0), new ScheduledTask(59, 65, 0)};
        int[] expectedProcessorEndTimes = new int[]{65, 57};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot91_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.91_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(15, 21, 3), new ScheduledTask(6, 16, 1), new ScheduledTask(13, 17, 0), new ScheduledTask(22, 28, 2), new ScheduledTask(4, 8, 0), new ScheduledTask(20, 24, 0), new ScheduledTask(8, 13, 0), new ScheduledTask(16, 23, 1), new ScheduledTask(8, 15, 3), new ScheduledTask(17, 20, 0), new ScheduledTask(28, 31, 0), new ScheduledTask(21, 28, 3), new ScheduledTask(0, 4, 0), new ScheduledTask(0, 6, 2), new ScheduledTask(12, 22, 2), new ScheduledTask(24, 28, 0), new ScheduledTask(0, 8, 3), new ScheduledTask(6, 12, 2), new ScheduledTask(0, 6, 1), new ScheduledTask(23, 28, 1), new ScheduledTask(31, 37, 0)};
        int[] expectedProcessorEndTimes = new int[]{37, 28, 28, 28};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot91_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.91_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 28;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(13, 19, 3), new ScheduledTask(8, 18, 0), new ScheduledTask(8, 12, 2), new ScheduledTask(7, 13, 3), new ScheduledTask(4, 8, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(0, 5, 4), new ScheduledTask(0, 7, 3), new ScheduledTask(11, 18, 4), new ScheduledTask(12, 15, 2), new ScheduledTask(18, 21, 0), new ScheduledTask(12, 19, 5), new ScheduledTask(0, 4, 0), new ScheduledTask(0, 6, 5), new ScheduledTask(4, 14, 1), new ScheduledTask(14, 18, 1), new ScheduledTask(0, 8, 2), new ScheduledTask(6, 12, 5), new ScheduledTask(5, 11, 4), new ScheduledTask(15, 20, 2), new ScheduledTask(22, 28, 0)};
        int[] expectedProcessorEndTimes = new int[]{28, 18, 20, 19, 18, 19};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot94_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.94_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 1), new ScheduledTask(7700, 7703, 0), new ScheduledTask(5400, 5405, 2), new ScheduledTask(5400, 5405, 1), new ScheduledTask(4800, 4806, 3), new ScheduledTask(200, 202, 0), new ScheduledTask(1400, 1410, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(6000, 6007, 0), new ScheduledTask(0, 8, 3), new ScheduledTask(5500, 5505, 0), new ScheduledTask(6700, 6710, 0), new ScheduledTask(2700, 2704, 0), new ScheduledTask(3700, 3708, 0), new ScheduledTask(2400, 2403, 0), new ScheduledTask(3100, 3106, 0), new ScheduledTask(4500, 4510, 0), new ScheduledTask(8000, 8010, 0), new ScheduledTask(0, 9, 2), new ScheduledTask(400, 410, 0), new ScheduledTask(9000, 9006, 0)};
        int[] expectedProcessorEndTimes = new int[]{9006, 5405, 5405, 4806};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot94_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.94_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 6000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(400, 409, 1), new ScheduledTask(4600, 4603, 2), new ScheduledTask(4200, 4205, 1), new ScheduledTask(4000, 4005, 0), new ScheduledTask(2000, 2006, 3), new ScheduledTask(0, 2, 0), new ScheduledTask(2200, 2210, 1), new ScheduledTask(0, 2, 1), new ScheduledTask(3300, 3307, 0), new ScheduledTask(200, 208, 0), new ScheduledTask(2800, 2805, 0), new ScheduledTask(2600, 2610, 2), new ScheduledTask(1000, 1004, 0), new ScheduledTask(2000, 2008, 0), new ScheduledTask(2000, 2003, 2), new ScheduledTask(1400, 1406, 0), new ScheduledTask(0, 10, 3), new ScheduledTask(3200, 3210, 3), new ScheduledTask(4500, 4509, 0), new ScheduledTask(0, 10, 2), new ScheduledTask(5400, 5406, 0)};
        int[] expectedProcessorEndTimes = new int[]{5406, 4205, 4603, 3210};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot94_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.94_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1200, 1209, 2), new ScheduledTask(3900, 3903, 2), new ScheduledTask(3720, 3725, 1), new ScheduledTask(4000, 4005, 0), new ScheduledTask(1800, 1806, 1), new ScheduledTask(0, 2, 0), new ScheduledTask(200, 210, 0), new ScheduledTask(0, 2, 3), new ScheduledTask(960, 967, 1), new ScheduledTask(0, 8, 2), new ScheduledTask(3500, 3505, 0), new ScheduledTask(2520, 2530, 1), new ScheduledTask(1500, 1504, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(1200, 1203, 0), new ScheduledTask(1900, 1906, 0), new ScheduledTask(2500, 2510, 0), new ScheduledTask(2400, 2410, 3), new ScheduledTask(2550, 2559, 2), new ScheduledTask(400, 410, 3), new ScheduledTask(4600, 4606, 0)};
        int[] expectedProcessorEndTimes = new int[]{4606, 3725, 3903, 2410};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot94_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.94_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(18, 27, 1), new ScheduledTask(62, 65, 1), new ScheduledTask(52, 57, 0), new ScheduledTask(37, 42, 0), new ScheduledTask(56, 62, 1), new ScheduledTask(2, 4, 0), new ScheduledTask(27, 37, 1), new ScheduledTask(0, 2, 0), new ScheduledTask(30, 37, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(25, 30, 0), new ScheduledTask(42, 52, 0), new ScheduledTask(7, 11, 0), new ScheduledTask(17, 25, 0), new ScheduledTask(4, 7, 0), new ScheduledTask(11, 17, 0), new ScheduledTask(37, 47, 1), new ScheduledTask(57, 67, 0), new ScheduledTask(47, 56, 1), new ScheduledTask(8, 18, 1), new ScheduledTask(67, 73, 0)};
        int[] expectedProcessorEndTimes = new int[]{73, 65};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot94_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.94_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 41;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(10, 19, 3), new ScheduledTask(31, 34, 0), new ScheduledTask(28, 33, 3), new ScheduledTask(26, 31, 0), new ScheduledTask(26, 32, 2), new ScheduledTask(2, 4, 0), new ScheduledTask(4, 14, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(6, 13, 1), new ScheduledTask(0, 8, 2), new ScheduledTask(21, 26, 0), new ScheduledTask(13, 23, 1), new ScheduledTask(17, 21, 0), new ScheduledTask(8, 16, 2), new ScheduledTask(14, 17, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(16, 26, 2), new ScheduledTask(23, 33, 1), new ScheduledTask(19, 28, 3), new ScheduledTask(0, 10, 3), new ScheduledTask(35, 41, 0)};
        int[] expectedProcessorEndTimes = new int[]{41, 33, 32, 33};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot94_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.94_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 30;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(2, 11, 2), new ScheduledTask(19, 22, 5), new ScheduledTask(17, 22, 3), new ScheduledTask(10, 15, 1), new ScheduledTask(15, 21, 1), new ScheduledTask(0, 2, 2), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 2, 5), new ScheduledTask(10, 17, 3), new ScheduledTask(2, 10, 5), new ScheduledTask(19, 24, 0), new ScheduledTask(11, 21, 2), new ScheduledTask(0, 4, 4), new ScheduledTask(4, 12, 4), new ScheduledTask(10, 13, 0), new ScheduledTask(13, 19, 0), new ScheduledTask(0, 10, 3), new ScheduledTask(12, 22, 4), new ScheduledTask(10, 19, 5), new ScheduledTask(0, 10, 0), new ScheduledTask(24, 30, 0)};
        int[] expectedProcessorEndTimes = new int[]{30, 21, 21, 22, 22, 22};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot97_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.97_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 16;
        int expectedScheduleEndTime = 24;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(8, 16, 0), new ScheduledTask(0, 5, 8), new ScheduledTask(0, 9, 4), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 8, 5), new ScheduledTask(0, 5, 6), new ScheduledTask(0, 7, 7), new ScheduledTask(0, 5, 9), new ScheduledTask(0, 2, 13), new ScheduledTask(0, 4, 12), new ScheduledTask(0, 2, 14), new ScheduledTask(0, 8, 0), new ScheduledTask(0, 5, 10), new ScheduledTask(5, 13, 6), new ScheduledTask(0, 2, 15), new ScheduledTask(4, 6, 15), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 5, 11), new ScheduledTask(2, 4, 15), new ScheduledTask(0, 10, 3), new ScheduledTask(17, 24, 0)};
        int[] expectedProcessorEndTimes = new int[]{24, 10, 10, 10, 9, 8, 13, 7, 5, 5, 5, 5, 4, 2, 2, 6};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot97_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.97_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 1), new ScheduledTask(0, 5, 0), new ScheduledTask(16, 25, 1), new ScheduledTask(45, 55, 1), new ScheduledTask(8, 16, 1), new ScheduledTask(35, 40, 0), new ScheduledTask(5, 12, 0), new ScheduledTask(30, 35, 0), new ScheduledTask(40, 42, 0), new ScheduledTask(22, 26, 0), new ScheduledTask(26, 28, 0), new ScheduledTask(12, 20, 0), new ScheduledTask(47, 52, 0), new ScheduledTask(52, 60, 0), new ScheduledTask(20, 22, 0), new ScheduledTask(55, 57, 1), new ScheduledTask(25, 35, 1), new ScheduledTask(42, 47, 0), new ScheduledTask(28, 30, 0), new ScheduledTask(35, 45, 1), new ScheduledTask(60, 67, 0)};
        int[] expectedProcessorEndTimes = new int[]{67, 57};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot97_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.97_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 39;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(8, 16, 3), new ScheduledTask(0, 5, 1), new ScheduledTask(0, 9, 2), new ScheduledTask(17, 27, 1), new ScheduledTask(16, 24, 3), new ScheduledTask(10, 15, 0), new ScheduledTask(5, 12, 1), new ScheduledTask(12, 17, 1), new ScheduledTask(9, 11, 2), new ScheduledTask(2, 6, 0), new ScheduledTask(6, 8, 0), new ScheduledTask(0, 8, 3), new ScheduledTask(24, 29, 3), new ScheduledTask(21, 29, 2), new ScheduledTask(0, 2, 0), new ScheduledTask(27, 29, 1), new ScheduledTask(15, 25, 0), new ScheduledTask(25, 30, 0), new ScheduledTask(8, 10, 0), new ScheduledTask(11, 21, 2), new ScheduledTask(32, 39, 0)};
        int[] expectedProcessorEndTimes = new int[]{39, 29, 29, 29};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot97_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.97_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 25;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(5, 13, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(0, 9, 4), new ScheduledTask(4, 14, 1), new ScheduledTask(0, 8, 5), new ScheduledTask(8, 13, 5), new ScheduledTask(0, 7, 7), new ScheduledTask(8, 13, 6), new ScheduledTask(12, 14, 2), new ScheduledTask(0, 4, 3), new ScheduledTask(0, 2, 2), new ScheduledTask(0, 8, 6), new ScheduledTask(9, 14, 4), new ScheduledTask(7, 15, 7), new ScheduledTask(0, 2, 1), new ScheduledTask(13, 15, 6), new ScheduledTask(2, 12, 2), new ScheduledTask(13, 18, 0), new ScheduledTask(2, 4, 1), new ScheduledTask(4, 14, 3), new ScheduledTask(18, 25, 0)};
        int[] expectedProcessorEndTimes = new int[]{25, 14, 14, 14, 14, 13, 15, 15};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot98_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.98_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(4800, 4807, 0), new ScheduledTask(1600, 1610, 0), new ScheduledTask(1200, 1206, 3), new ScheduledTask(0, 7, 0), new ScheduledTask(6900, 6910, 0), new ScheduledTask(6100, 6105, 0), new ScheduledTask(2600, 2603, 0), new ScheduledTask(2400, 2410, 1), new ScheduledTask(2400, 2410, 2), new ScheduledTask(700, 709, 0), new ScheduledTask(5800, 5803, 0), new ScheduledTask(5500, 5503, 0), new ScheduledTask(4800, 4806, 3), new ScheduledTask(2900, 2909, 0), new ScheduledTask(0, 2, 3), new ScheduledTask(7900, 7908, 0), new ScheduledTask(3800, 3810, 0), new ScheduledTask(0, 4, 2), new ScheduledTask(6600, 6603, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(8700, 8707, 0)};
        int[] expectedProcessorEndTimes = new int[]{8707, 2410, 2410, 4806};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot98_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.98_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 6100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(2400, 2407, 2), new ScheduledTask(700, 710, 0), new ScheduledTask(2700, 2706, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(4300, 4310, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(1700, 1703, 0), new ScheduledTask(3000, 3010, 1), new ScheduledTask(1000, 1010, 1), new ScheduledTask(0, 9, 3), new ScheduledTask(3300, 3303, 0), new ScheduledTask(2400, 2403, 0), new ScheduledTask(3800, 3806, 2), new ScheduledTask(1800, 1809, 3), new ScheduledTask(2000, 2002, 2), new ScheduledTask(3600, 3608, 3), new ScheduledTask(0, 10, 2), new ScheduledTask(2000, 2004, 0), new ScheduledTask(3600, 3603, 0), new ScheduledTask(3900, 3904, 0), new ScheduledTask(5400, 5407, 0)};
        int[] expectedProcessorEndTimes = new int[]{5407, 3010, 3806, 3608};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot98_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.98_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(2300, 2307, 0), new ScheduledTask(700, 710, 0), new ScheduledTask(2700, 2706, 2), new ScheduledTask(0, 7, 0), new ScheduledTask(3000, 3010, 1), new ScheduledTask(0, 5, 1), new ScheduledTask(0, 3, 3), new ScheduledTask(1800, 1810, 1), new ScheduledTask(600, 610, 1), new ScheduledTask(0, 9, 2), new ScheduledTask(3300, 3303, 0), new ScheduledTask(3000, 3003, 0), new ScheduledTask(3900, 3906, 0), new ScheduledTask(1350, 1359, 2), new ScheduledTask(2100, 2102, 0), new ScheduledTask(2600, 2608, 3), new ScheduledTask(600, 610, 3), new ScheduledTask(1700, 1704, 0), new ScheduledTask(3600, 3603, 0), new ScheduledTask(3600, 3604, 2), new ScheduledTask(4500, 4507, 0)};
        int[] expectedProcessorEndTimes = new int[]{4507, 3010, 3604, 2608};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(20, 27, 0), new ScheduledTask(56, 66, 0), new ScheduledTask(14, 20, 0), new ScheduledTask(19, 26, 1), new ScheduledTask(53, 63, 1), new ScheduledTask(9, 14, 0), new ScheduledTask(6, 9, 1), new ScheduledTask(46, 56, 0), new ScheduledTask(43, 53, 1), new ScheduledTask(34, 43, 1), new ScheduledTask(3, 6, 1), new ScheduledTask(2, 5, 0), new ScheduledTask(13, 19, 1), new ScheduledTask(27, 36, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(26, 34, 1), new ScheduledTask(36, 46, 0), new ScheduledTask(9, 13, 1), new ScheduledTask(0, 3, 1), new ScheduledTask(5, 9, 0), new ScheduledTask(66, 73, 0)};
        int[] expectedProcessorEndTimes = new int[]{73, 63};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 42;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(8, 15, 0), new ScheduledTask(25, 35, 0), new ScheduledTask(7, 13, 1), new ScheduledTask(6, 13, 3), new ScheduledTask(22, 32, 1), new ScheduledTask(3, 8, 0), new ScheduledTask(3, 6, 3), new ScheduledTask(21, 31, 2), new ScheduledTask(21, 31, 3), new ScheduledTask(13, 22, 1), new ScheduledTask(0, 3, 3), new ScheduledTask(0, 3, 0), new ScheduledTask(6, 12, 2), new ScheduledTask(12, 21, 2), new ScheduledTask(0, 2, 2), new ScheduledTask(13, 21, 3), new ScheduledTask(15, 25, 0), new ScheduledTask(3, 7, 1), new ScheduledTask(0, 3, 1), new ScheduledTask(2, 6, 2), new ScheduledTask(35, 42, 0)};
        int[] expectedProcessorEndTimes = new int[]{42, 32, 31, 31};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(4, 11, 3), new ScheduledTask(0, 10, 0), new ScheduledTask(9, 15, 4), new ScheduledTask(0, 7, 1), new ScheduledTask(11, 21, 1), new ScheduledTask(9, 14, 5), new ScheduledTask(10, 13, 0), new ScheduledTask(10, 20, 2), new ScheduledTask(11, 21, 3), new ScheduledTask(0, 9, 4), new ScheduledTask(18, 21, 0), new ScheduledTask(15, 18, 0), new ScheduledTask(15, 21, 4), new ScheduledTask(0, 9, 5), new ScheduledTask(13, 15, 0), new ScheduledTask(14, 22, 5), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 4, 3), new ScheduledTask(21, 24, 0), new ScheduledTask(7, 11, 1), new ScheduledTask(24, 31, 0)};
        int[] expectedProcessorEndTimes = new int[]{31, 21, 20, 21, 21, 22};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot99_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.99_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1000, 1006, 0), new ScheduledTask(7300, 7309, 0), new ScheduledTask(2400, 2408, 0), new ScheduledTask(6400, 6409, 0), new ScheduledTask(4800, 4806, 1), new ScheduledTask(4000, 4009, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(0, 7, 2), new ScheduledTask(0, 2, 0), new ScheduledTask(4200, 4207, 3), new ScheduledTask(3200, 3203, 0), new ScheduledTask(4200, 4207, 2), new ScheduledTask(3500, 3505, 0), new ScheduledTask(8200, 8210, 0), new ScheduledTask(400, 406, 0), new ScheduledTask(0, 7, 3), new ScheduledTask(1600, 1608, 0), new ScheduledTask(5500, 5509, 0), new ScheduledTask(200, 202, 0), new ScheduledTask(4900, 4906, 0), new ScheduledTask(9200, 9210, 0)};
        int[] expectedProcessorEndTimes = new int[]{9210, 4806, 4207, 4207};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot99_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.99_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 6700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(800, 806, 0), new ScheduledTask(3400, 3409, 1), new ScheduledTask(2000, 2008, 3), new ScheduledTask(3200, 3209, 2), new ScheduledTask(5100, 5106, 0), new ScheduledTask(1900, 1909, 0), new ScheduledTask(3600, 3608, 3), new ScheduledTask(0, 7, 2), new ScheduledTask(0, 2, 3), new ScheduledTask(1400, 1407, 1), new ScheduledTask(2800, 2803, 1), new ScheduledTask(3400, 3407, 0), new ScheduledTask(1400, 1405, 0), new ScheduledTask(4100, 4110, 0), new ScheduledTask(200, 206, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(400, 408, 3), new ScheduledTask(1400, 1409, 2), new ScheduledTask(0, 2, 0), new ScheduledTask(2800, 2806, 0), new ScheduledTask(5700, 5710, 0)};
        int[] expectedProcessorEndTimes = new int[]{5710, 3409, 3209, 3608};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot99_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.99_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5820;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(3240, 3249, 1), new ScheduledTask(1050, 1058, 2), new ScheduledTask(2160, 2169, 1), new ScheduledTask(3450, 3456, 2), new ScheduledTask(600, 609, 3), new ScheduledTask(2250, 2258, 2), new ScheduledTask(0, 7, 2), new ScheduledTask(0, 2, 1), new ScheduledTask(1300, 1307, 0), new ScheduledTask(0, 3, 3), new ScheduledTask(3100, 3107, 0), new ScheduledTask(2000, 2005, 0), new ScheduledTask(3800, 3810, 0), new ScheduledTask(480, 486, 1), new ScheduledTask(600, 607, 0), new ScheduledTask(1200, 1208, 1), new ScheduledTask(2400, 2409, 3), new ScheduledTask(240, 242, 1), new ScheduledTask(2500, 2506, 0), new ScheduledTask(4820, 4830, 0)};
        int[] expectedProcessorEndTimes = new int[]{4830, 3249, 3456, 2409};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot99_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.99_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 79;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(8, 14, 0), new ScheduledTask(60, 69, 0), new ScheduledTask(17, 25, 1), new ScheduledTask(51, 60, 0), new ScheduledTask(59, 65, 1), new ScheduledTask(25, 34, 1), new ScheduledTask(41, 49, 1), new ScheduledTask(2, 9, 1), new ScheduledTask(0, 2, 1), new ScheduledTask(21, 28, 0), new ScheduledTask(28, 31, 0), new ScheduledTask(34, 41, 1), new ScheduledTask(31, 36, 0), new ScheduledTask(49, 59, 1), new ScheduledTask(2, 8, 0), new ScheduledTask(14, 21, 0), new ScheduledTask(9, 17, 1), new ScheduledTask(42, 51, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(36, 42, 0), new ScheduledTask(69, 79, 0)};
        int[] expectedProcessorEndTimes = new int[]{79, 65};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot99_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.99_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(6, 12, 1), new ScheduledTask(28, 37, 0), new ScheduledTask(2, 10, 0), new ScheduledTask(23, 32, 2), new ScheduledTask(27, 33, 1), new ScheduledTask(13, 22, 0), new ScheduledTask(15, 23, 3), new ScheduledTask(0, 7, 3), new ScheduledTask(0, 2, 2), new ScheduledTask(9, 16, 2), new ScheduledTask(10, 13, 0), new ScheduledTask(16, 23, 2), new ScheduledTask(12, 17, 1), new ScheduledTask(17, 27, 1), new ScheduledTask(0, 6, 1), new ScheduledTask(2, 9, 2), new ScheduledTask(7, 15, 3), new ScheduledTask(23, 32, 3), new ScheduledTask(0, 2, 0), new ScheduledTask(22, 28, 0), new ScheduledTask(37, 47, 0)};
        int[] expectedProcessorEndTimes = new int[]{47, 33, 32, 32};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot99_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.99_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 3), new ScheduledTask(15, 24, 0), new ScheduledTask(7, 15, 4), new ScheduledTask(12, 21, 2), new ScheduledTask(17, 23, 1), new ScheduledTask(3, 12, 2), new ScheduledTask(14, 22, 5), new ScheduledTask(0, 7, 4), new ScheduledTask(0, 2, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(0, 3, 2), new ScheduledTask(15, 22, 4), new ScheduledTask(4, 9, 0), new ScheduledTask(7, 17, 1), new ScheduledTask(0, 6, 5), new ScheduledTask(6, 13, 3), new ScheduledTask(6, 14, 5), new ScheduledTask(13, 22, 3), new ScheduledTask(2, 4, 0), new ScheduledTask(9, 15, 0), new ScheduledTask(27, 37, 0)};
        int[] expectedProcessorEndTimes = new int[]{37, 23, 21, 22, 22, 22};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot99_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.99_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(2100, 2103, 0), new ScheduledTask(3700, 3702, 0), new ScheduledTask(6500, 6503, 0), new ScheduledTask(4800, 4806, 2), new ScheduledTask(3900, 3902, 0), new ScheduledTask(1200, 1209, 0), new ScheduledTask(0, 7, 3), new ScheduledTask(6800, 6809, 0), new ScheduledTask(4700, 4708, 0), new ScheduledTask(400, 408, 0), new ScheduledTask(4800, 4805, 1), new ScheduledTask(2400, 2405, 0), new ScheduledTask(7700, 7708, 0), new ScheduledTask(0, 4, 0), new ScheduledTask(5500, 5510, 0), new ScheduledTask(4100, 4106, 0), new ScheduledTask(2900, 2908, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(4200, 4207, 3), new ScheduledTask(0, 8, 2), new ScheduledTask(8600, 8605, 0)};
        int[] expectedProcessorEndTimes = new int[]{8605, 4805, 4806, 4207};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot99_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.99_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1300, 1303, 0), new ScheduledTask(1600, 1602, 2), new ScheduledTask(4900, 4903, 0), new ScheduledTask(3800, 3806, 1), new ScheduledTask(1600, 1602, 1), new ScheduledTask(400, 409, 0), new ScheduledTask(2700, 2707, 0), new ScheduledTask(2000, 2009, 1), new ScheduledTask(2000, 2008, 2), new ScheduledTask(0, 8, 2), new ScheduledTask(4400, 4405, 0), new ScheduledTask(1600, 1605, 0), new ScheduledTask(3200, 3208, 3), new ScheduledTask(0, 4, 0), new ScheduledTask(3400, 3410, 0), new ScheduledTask(2100, 2106, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(0, 8, 3), new ScheduledTask(3600, 3607, 2), new ScheduledTask(1600, 1608, 3), new ScheduledTask(5200, 5205, 0)};
        int[] expectedProcessorEndTimes = new int[]{5205, 3806, 3607, 3208};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot99_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.99_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(1800, 1802, 3), new ScheduledTask(3600, 3603, 2), new ScheduledTask(3100, 3106, 0), new ScheduledTask(800, 802, 0), new ScheduledTask(0, 9, 3), new ScheduledTask(2400, 2407, 1), new ScheduledTask(2200, 2209, 3), new ScheduledTask(2400, 2408, 2), new ScheduledTask(0, 8, 2), new ScheduledTask(2600, 2605, 0), new ScheduledTask(300, 305, 0), new ScheduledTask(3240, 3248, 1), new ScheduledTask(0, 4, 1), new ScheduledTask(1600, 1610, 0), new ScheduledTask(1000, 1006, 0), new ScheduledTask(1440, 1448, 1), new ScheduledTask(480, 488, 1), new ScheduledTask(3700, 3707, 0), new ScheduledTask(1200, 1208, 2), new ScheduledTask(4400, 4405, 0)};
        int[] expectedProcessorEndTimes = new int[]{4405, 3248, 3603, 2209};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(21, 24, 0), new ScheduledTask(29, 31, 0), new ScheduledTask(44, 47, 0), new ScheduledTask(49, 55, 1), new ScheduledTask(31, 33, 0), new ScheduledTask(12, 21, 0), new ScheduledTask(16, 23, 1), new ScheduledTask(47, 56, 0), new ScheduledTask(31, 39, 1), new ScheduledTask(4, 12, 0), new ScheduledTask(39, 44, 0), new ScheduledTask(24, 29, 0), new ScheduledTask(56, 64, 0), new ScheduledTask(0, 4, 0), new ScheduledTask(39, 49, 1), new ScheduledTask(33, 39, 0), new ScheduledTask(8, 16, 1), new ScheduledTask(0, 8, 1), new ScheduledTask(55, 62, 1), new ScheduledTask(23, 31, 1), new ScheduledTask(64, 69, 0)};
        int[] expectedProcessorEndTimes = new int[]{69, 62};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 38;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 1), new ScheduledTask(18, 20, 0), new ScheduledTask(30, 33, 0), new ScheduledTask(25, 31, 2), new ScheduledTask(20, 22, 0), new ScheduledTask(4, 13, 0), new ScheduledTask(16, 23, 3), new ScheduledTask(16, 25, 2), new ScheduledTask(22, 30, 0), new ScheduledTask(0, 8, 2), new ScheduledTask(19, 24, 1), new ScheduledTask(13, 18, 0), new ScheduledTask(23, 31, 3), new ScheduledTask(0, 4, 0), new ScheduledTask(9, 19, 1), new ScheduledTask(3, 9, 1), new ScheduledTask(8, 16, 3), new ScheduledTask(0, 8, 3), new ScheduledTask(24, 31, 1), new ScheduledTask(8, 16, 2), new ScheduledTask(33, 38, 0)};
        int[] expectedProcessorEndTimes = new int[]{38, 31, 31, 31};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 28;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 2), new ScheduledTask(5, 7, 1), new ScheduledTask(17, 20, 1), new ScheduledTask(15, 21, 5), new ScheduledTask(21, 23, 0), new ScheduledTask(12, 21, 0), new ScheduledTask(8, 15, 5), new ScheduledTask(11, 20, 2), new ScheduledTask(6, 14, 3), new ScheduledTask(4, 12, 0), new ScheduledTask(8, 13, 4), new ScheduledTask(0, 5, 1), new ScheduledTask(13, 21, 4), new ScheduledTask(0, 4, 0), new ScheduledTask(7, 17, 1), new ScheduledTask(0, 6, 3), new ScheduledTask(3, 11, 2), new ScheduledTask(0, 8, 5), new ScheduledTask(14, 21, 3), new ScheduledTask(0, 8, 4), new ScheduledTask(23, 28, 0)};
        int[] expectedProcessorEndTimes = new int[]{28, 20, 20, 21, 21, 21};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_1dot00_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_1.00_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(6000, 6010, 0), new ScheduledTask(2200, 2205, 0), new ScheduledTask(0, 8, 3), new ScheduledTask(400, 408, 0), new ScheduledTask(3600, 3609, 1), new ScheduledTask(7000, 7005, 0), new ScheduledTask(4800, 4807, 3), new ScheduledTask(0, 6, 2), new ScheduledTask(3400, 3410, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(7500, 7505, 0), new ScheduledTask(8000, 8007, 0), new ScheduledTask(3600, 3609, 2), new ScheduledTask(2700, 2707, 0), new ScheduledTask(1700, 1705, 0), new ScheduledTask(8700, 8710, 0), new ScheduledTask(4400, 4406, 0), new ScheduledTask(0, 4, 0), new ScheduledTask(5000, 5010, 0), new ScheduledTask(1200, 1205, 0), new ScheduledTask(9700, 9708, 0)};
        int[] expectedProcessorEndTimes = new int[]{9708, 3609, 3609, 4807};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_1dot00_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_1.00_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 6700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(3500, 3510, 0), new ScheduledTask(1000, 1005, 0), new ScheduledTask(2600, 2608, 3), new ScheduledTask(0, 8, 3), new ScheduledTask(5000, 5009, 0), new ScheduledTask(1600, 1605, 3), new ScheduledTask(4200, 4207, 3), new ScheduledTask(2400, 2406, 1), new ScheduledTask(1500, 1510, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(4500, 4505, 0), new ScheduledTask(2200, 2207, 2), new ScheduledTask(3600, 3609, 2), new ScheduledTask(800, 807, 2), new ScheduledTask(500, 505, 0), new ScheduledTask(3600, 3610, 1), new ScheduledTask(1200, 1206, 1), new ScheduledTask(0, 4, 2), new ScheduledTask(2500, 2510, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(5900, 5908, 0)};
        int[] expectedProcessorEndTimes = new int[]{5908, 3610, 3609, 4207};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_1dot00_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_1.00_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1500, 1510, 2), new ScheduledTask(1600, 1605, 0), new ScheduledTask(960, 968, 1), new ScheduledTask(0, 8, 1), new ScheduledTask(2760, 2769, 1), new ScheduledTask(3400, 3405, 0), new ScheduledTask(3840, 3847, 1), new ScheduledTask(3900, 3906, 0), new ScheduledTask(800, 810, 3), new ScheduledTask(0, 6, 0), new ScheduledTask(4500, 4505, 0), new ScheduledTask(1920, 1927, 1), new ScheduledTask(2800, 2809, 3), new ScheduledTask(2100, 2107, 0), new ScheduledTask(1100, 1105, 0), new ScheduledTask(3000, 3010, 2), new ScheduledTask(2800, 2806, 0), new ScheduledTask(0, 4, 3), new ScheduledTask(0, 10, 2), new ScheduledTask(600, 605, 0), new ScheduledTask(5000, 5008, 0)};
        int[] expectedProcessorEndTimes = new int[]{5008, 3847, 3010, 2809};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(45, 55, 0), new ScheduledTask(14, 19, 0), new ScheduledTask(60, 68, 0), new ScheduledTask(6, 14, 1), new ScheduledTask(43, 52, 1), new ScheduledTask(55, 60, 0), new ScheduledTask(52, 59, 1), new ScheduledTask(21, 27, 1), new ScheduledTask(19, 29, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(68, 73, 0), new ScheduledTask(27, 34, 1), new ScheduledTask(34, 43, 1), new ScheduledTask(14, 21, 1), new ScheduledTask(9, 14, 0), new ScheduledTask(59, 69, 1), new ScheduledTask(29, 35, 0), new ScheduledTask(0, 4, 0), new ScheduledTask(35, 45, 0), new ScheduledTask(4, 9, 0), new ScheduledTask(73, 81, 0)};
        int[] expectedProcessorEndTimes = new int[]{81, 69};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(19, 29, 1), new ScheduledTask(16, 21, 0), new ScheduledTask(10, 18, 2), new ScheduledTask(4, 12, 1), new ScheduledTask(19, 28, 3), new ScheduledTask(27, 32, 0), new ScheduledTask(28, 35, 3), new ScheduledTask(32, 38, 0), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 6, 0), new ScheduledTask(29, 34, 1), new ScheduledTask(18, 25, 2), new ScheduledTask(10, 19, 3), new ScheduledTask(12, 19, 1), new ScheduledTask(11, 16, 0), new ScheduledTask(25, 35, 2), new ScheduledTask(21, 27, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(0, 10, 3), new ScheduledTask(6, 11, 0), new ScheduledTask(38, 46, 0)};
        int[] expectedProcessorEndTimes = new int[]{46, 34, 35, 35};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 1), new ScheduledTask(5, 10, 0), new ScheduledTask(10, 18, 1), new ScheduledTask(0, 8, 5), new ScheduledTask(14, 23, 4), new ScheduledTask(9, 14, 2), new ScheduledTask(17, 24, 5), new ScheduledTask(16, 22, 3), new ScheduledTask(10, 20, 0), new ScheduledTask(0, 6, 3), new ScheduledTask(18, 23, 1), new ScheduledTask(7, 14, 4), new ScheduledTask(8, 17, 5), new ScheduledTask(0, 7, 4), new ScheduledTask(0, 5, 0), new ScheduledTask(14, 24, 2), new ScheduledTask(20, 26, 0), new ScheduledTask(0, 4, 2), new ScheduledTask(6, 16, 3), new ScheduledTask(4, 9, 2), new ScheduledTask(27, 35, 0)};
        int[] expectedProcessorEndTimes = new int[]{35, 23, 24, 22, 23, 24};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_1dot00_WeightType_Random2_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_1.00_WeightType_Random#2_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 2), new ScheduledTask(2600, 2605, 0), new ScheduledTask(3100, 3105, 0), new ScheduledTask(3600, 3606, 0), new ScheduledTask(5800, 5807, 0), new ScheduledTask(4600, 4605, 0), new ScheduledTask(1800, 1809, 1), new ScheduledTask(700, 709, 0), new ScheduledTask(1600, 1610, 0), new ScheduledTask(300, 304, 0), new ScheduledTask(4400, 4402, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(0, 8, 3), new ScheduledTask(0, 3, 0), new ScheduledTask(1800, 1809, 2), new ScheduledTask(5100, 5107, 0), new ScheduledTask(6900, 6910, 0), new ScheduledTask(4800, 4804, 3), new ScheduledTask(4200, 4202, 0), new ScheduledTask(6500, 6504, 0), new ScheduledTask(7900, 7903, 0)};
        int[] expectedProcessorEndTimes = new int[]{7903, 1809, 1809, 4804};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_1dot00_WeightType_Random2_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_1.00_WeightType_Random#2_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(3100, 3103, 0), new ScheduledTask(0, 5, 2), new ScheduledTask(1800, 1805, 1), new ScheduledTask(1000, 1006, 2), new ScheduledTask(3000, 3007, 3), new ScheduledTask(2800, 2805, 1), new ScheduledTask(2000, 2009, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(700, 710, 0), new ScheduledTask(300, 304, 0), new ScheduledTask(2900, 2902, 0), new ScheduledTask(1700, 1703, 0), new ScheduledTask(0, 8, 3), new ScheduledTask(0, 3, 0), new ScheduledTask(2600, 2609, 2), new ScheduledTask(1600, 1607, 3), new ScheduledTask(3800, 3810, 0), new ScheduledTask(3800, 3804, 1), new ScheduledTask(2200, 2202, 2), new ScheduledTask(3400, 3404, 0), new ScheduledTask(4800, 4803, 0)};
        int[] expectedProcessorEndTimes = new int[]{4803, 3804, 2609, 3007};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_1dot00_WeightType_Random2_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_1.00_WeightType_Random#2_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4350;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(3300, 3303, 0), new ScheduledTask(1600, 1605, 0), new ScheduledTask(2100, 2105, 0), new ScheduledTask(1350, 1356, 2), new ScheduledTask(2520, 2527, 1), new ScheduledTask(2800, 2805, 0), new ScheduledTask(0, 9, 3), new ScheduledTask(0, 9, 2), new ScheduledTask(300, 310, 0), new ScheduledTask(960, 964, 1), new ScheduledTask(2600, 2602, 0), new ScheduledTask(1300, 1303, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(0, 3, 0), new ScheduledTask(1800, 1809, 3), new ScheduledTask(1680, 1687, 1), new ScheduledTask(2250, 2260, 2), new ScheduledTask(3360, 3364, 1), new ScheduledTask(1440, 1442, 1), new ScheduledTask(3600, 3604, 0), new ScheduledTask(4050, 4053, 0)};
        int[] expectedProcessorEndTimes = new int[]{4053, 3364, 2260, 1809};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_1dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_1.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(5, 8, 1), new ScheduledTask(17, 22, 1), new ScheduledTask(13, 18, 0), new ScheduledTask(18, 24, 0), new ScheduledTask(24, 31, 0), new ScheduledTask(12, 17, 1), new ScheduledTask(40, 49, 0), new ScheduledTask(37, 46, 1), new ScheduledTask(49, 59, 0), new ScheduledTask(9, 13, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(2, 5, 0), new ScheduledTask(29, 37, 1), new ScheduledTask(2, 5, 1), new ScheduledTask(31, 40, 0), new ScheduledTask(22, 29, 1), new ScheduledTask(46, 56, 1), new ScheduledTask(8, 12, 1), new ScheduledTask(0, 2, 1), new ScheduledTask(5, 9, 0), new ScheduledTask(59, 62, 0)};
        int[] expectedProcessorEndTimes = new int[]{62, 56};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_1dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_1.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 34;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(19, 22, 0), new ScheduledTask(0, 5, 2), new ScheduledTask(14, 19, 1), new ScheduledTask(5, 11, 2), new ScheduledTask(17, 24, 3), new ScheduledTask(19, 24, 1), new ScheduledTask(8, 17, 3), new ScheduledTask(3, 12, 0), new ScheduledTask(4, 14, 1), new ScheduledTask(0, 4, 1), new ScheduledTask(17, 19, 0), new ScheduledTask(12, 15, 0), new ScheduledTask(0, 8, 3), new ScheduledTask(0, 3, 0), new ScheduledTask(22, 31, 0), new ScheduledTask(11, 18, 2), new ScheduledTask(18, 28, 2), new ScheduledTask(24, 28, 3), new ScheduledTask(15, 17, 0), new ScheduledTask(24, 28, 1), new ScheduledTask(31, 34, 0)};
        int[] expectedProcessorEndTimes = new int[]{34, 28, 28, 28};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_1dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_1.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 25;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(6, 9, 2), new ScheduledTask(10, 15, 1), new ScheduledTask(10, 15, 0), new ScheduledTask(0, 6, 2), new ScheduledTask(11, 18, 4), new ScheduledTask(17, 22, 0), new ScheduledTask(0, 9, 3), new ScheduledTask(0, 9, 4), new ScheduledTask(0, 10, 1), new ScheduledTask(3, 7, 0), new ScheduledTask(15, 17, 0), new ScheduledTask(7, 10, 0), new ScheduledTask(0, 8, 5), new ScheduledTask(0, 3, 0), new ScheduledTask(8, 17, 5), new ScheduledTask(9, 16, 3), new ScheduledTask(9, 19, 2), new ScheduledTask(16, 20, 3), new ScheduledTask(9, 11, 4), new ScheduledTask(15, 19, 1), new ScheduledTask(22, 25, 0)};
        int[] expectedProcessorEndTimes = new int[]{25, 19, 19, 20, 18, 17};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_1dot00_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_1.00_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(5400, 5404, 3), new ScheduledTask(5500, 5508, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(4200, 4206, 2), new ScheduledTask(4900, 4906, 0), new ScheduledTask(1700, 1708, 0), new ScheduledTask(0, 7, 2), new ScheduledTask(7300, 7310, 0), new ScheduledTask(600, 604, 0), new ScheduledTask(1000, 1007, 0), new ScheduledTask(3500, 3506, 0), new ScheduledTask(4200, 4202, 3), new ScheduledTask(3100, 3104, 0), new ScheduledTask(4100, 4108, 0), new ScheduledTask(3000, 3008, 1), new ScheduledTask(6300, 6310, 0), new ScheduledTask(0, 6, 0), new ScheduledTask(2900, 2902, 0), new ScheduledTask(2500, 2504, 0), new ScheduledTask(0, 7, 3), new ScheduledTask(8300, 8306, 0)};
        int[] expectedProcessorEndTimes = new int[]{8306, 3008, 4206, 5404};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_1dot00_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_1.00_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(4000, 4004, 2), new ScheduledTask(2600, 2608, 0), new ScheduledTask(3000, 3005, 2), new ScheduledTask(3400, 3406, 0), new ScheduledTask(2000, 2006, 0), new ScheduledTask(800, 808, 1), new ScheduledTask(1800, 1807, 3), new ScheduledTask(4000, 4010, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(0, 7, 3), new ScheduledTask(1400, 1406, 0), new ScheduledTask(4400, 4402, 1), new ScheduledTask(1000, 1004, 0), new ScheduledTask(1400, 1408, 2), new ScheduledTask(3200, 3208, 3), new ScheduledTask(2400, 2410, 1), new ScheduledTask(0, 6, 0), new ScheduledTask(1400, 1402, 3), new ScheduledTask(600, 604, 0), new ScheduledTask(0, 7, 2), new ScheduledTask(5000, 5006, 0)};
        int[] expectedProcessorEndTimes = new int[]{5006, 4402, 4004, 3208};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_1dot00_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_1.00_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4850;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(3200, 3204, 3), new ScheduledTask(1600, 1608, 3), new ScheduledTask(3100, 3105, 0), new ScheduledTask(3600, 3606, 0), new ScheduledTask(2500, 2506, 0), new ScheduledTask(0, 8, 3), new ScheduledTask(1800, 1807, 2), new ScheduledTask(2520, 2530, 1), new ScheduledTask(0, 4, 2), new ScheduledTask(0, 7, 1), new ScheduledTask(1900, 1906, 0), new ScheduledTask(3720, 3722, 1), new ScheduledTask(840, 844, 1), new ScheduledTask(600, 608, 2), new ScheduledTask(2850, 2858, 2), new ScheduledTask(1320, 1330, 1), new ScheduledTask(0, 6, 0), new ScheduledTask(1000, 1002, 0), new ScheduledTask(600, 604, 0), new ScheduledTask(1200, 1207, 0), new ScheduledTask(4250, 4256, 0)};
        int[] expectedProcessorEndTimes = new int[]{4256, 3722, 2858, 3204};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(58, 62, 0), new ScheduledTask(35, 43, 0), new ScheduledTask(43, 48, 0), new ScheduledTask(34, 40, 1), new ScheduledTask(28, 34, 1), new ScheduledTask(7, 15, 1), new ScheduledTask(28, 35, 0), new ScheduledTask(48, 58, 0), new ScheduledTask(6, 10, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(22, 28, 1), new ScheduledTask(50, 52, 1), new ScheduledTask(16, 20, 0), new ScheduledTask(20, 28, 0), new ScheduledTask(52, 60, 1), new ScheduledTask(40, 50, 1), new ScheduledTask(0, 6, 0), new ScheduledTask(14, 16, 0), new ScheduledTask(10, 14, 0), new ScheduledTask(15, 22, 1), new ScheduledTask(62, 68, 0)};
        int[] expectedProcessorEndTimes = new int[]{68, 60};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 38;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(26, 30, 1), new ScheduledTask(14, 22, 3), new ScheduledTask(7, 12, 2), new ScheduledTask(12, 18, 2), new ScheduledTask(10, 16, 1), new ScheduledTask(6, 14, 0), new ScheduledTask(7, 14, 3), new ScheduledTask(16, 26, 1), new ScheduledTask(0, 4, 1), new ScheduledTask(0, 7, 3), new ScheduledTask(4, 10, 1), new ScheduledTask(28, 30, 2), new ScheduledTask(20, 24, 0), new ScheduledTask(24, 32, 0), new ScheduledTask(22, 30, 3), new ScheduledTask(18, 28, 2), new ScheduledTask(0, 6, 0), new ScheduledTask(18, 20, 0), new ScheduledTask(14, 18, 0), new ScheduledTask(0, 7, 2), new ScheduledTask(32, 38, 0)};
        int[] expectedProcessorEndTimes = new int[]{38, 30, 30, 30};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(16, 20, 3), new ScheduledTask(8, 16, 3), new ScheduledTask(14, 19, 4), new ScheduledTask(7, 13, 5), new ScheduledTask(8, 14, 4), new ScheduledTask(0, 8, 3), new ScheduledTask(0, 7, 5), new ScheduledTask(8, 18, 1), new ScheduledTask(0, 4, 1), new ScheduledTask(0, 7, 2), new ScheduledTask(17, 23, 0), new ScheduledTask(19, 21, 4), new ScheduledTask(4, 8, 1), new ScheduledTask(0, 8, 4), new ScheduledTask(13, 21, 5), new ScheduledTask(9, 19, 2), new ScheduledTask(0, 6, 0), new ScheduledTask(7, 9, 2), new ScheduledTask(6, 10, 0), new ScheduledTask(10, 17, 0), new ScheduledTask(23, 29, 0)};
        int[] expectedProcessorEndTimes = new int[]{29, 18, 19, 20, 21, 21};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_1dot01_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_1.01_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(8400, 8409, 0), new ScheduledTask(1700, 1706, 0), new ScheduledTask(5300, 5306, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(5400, 5405, 3), new ScheduledTask(4500, 4508, 0), new ScheduledTask(6000, 6003, 1), new ScheduledTask(0, 9, 3), new ScheduledTask(5900, 5909, 0), new ScheduledTask(2400, 2410, 2), new ScheduledTask(7500, 7509, 0), new ScheduledTask(600, 603, 0), new ScheduledTask(900, 908, 0), new ScheduledTask(6800, 6807, 0), new ScheduledTask(7800, 7802, 1), new ScheduledTask(3700, 3708, 0), new ScheduledTask(0, 6, 0), new ScheduledTask(0, 4, 2), new ScheduledTask(3000, 3007, 0), new ScheduledTask(2300, 2307, 0), new ScheduledTask(9300, 9304, 0)};
        int[] expectedProcessorEndTimes = new int[]{9304, 7802, 2410, 5405};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_1dot01_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_1.01_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 6100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(3400, 3409, 2), new ScheduledTask(0, 6, 1), new ScheduledTask(5100, 5106, 0), new ScheduledTask(4100, 4110, 0), new ScheduledTask(2200, 2205, 0), new ScheduledTask(1600, 1608, 3), new ScheduledTask(1200, 1203, 1), new ScheduledTask(1000, 1009, 0), new ScheduledTask(1600, 1609, 2), new ScheduledTask(3200, 3210, 1), new ScheduledTask(3200, 3209, 3), new ScheduledTask(1900, 1903, 0), new ScheduledTask(0, 8, 2), new ScheduledTask(1800, 1807, 1), new ScheduledTask(5000, 5002, 3), new ScheduledTask(0, 8, 3), new ScheduledTask(400, 406, 0), new ScheduledTask(0, 4, 0), new ScheduledTask(3400, 3407, 0), new ScheduledTask(2700, 2707, 0), new ScheduledTask(5700, 5704, 0)};
        int[] expectedProcessorEndTimes = new int[]{5704, 3210, 3409, 5002};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_1dot01_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_1.01_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(2600, 2609, 3), new ScheduledTask(900, 906, 0), new ScheduledTask(3900, 3906, 0), new ScheduledTask(2900, 2910, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(2520, 2528, 1), new ScheduledTask(4500, 4503, 0), new ScheduledTask(0, 9, 2), new ScheduledTask(1350, 1359, 2), new ScheduledTask(2700, 2710, 2), new ScheduledTask(800, 809, 3), new ScheduledTask(600, 603, 0), new ScheduledTask(600, 608, 1), new ScheduledTask(3480, 3487, 1), new ScheduledTask(4200, 4202, 2), new ScheduledTask(1560, 1568, 1), new ScheduledTask(0, 6, 0), new ScheduledTask(0, 4, 3), new ScheduledTask(2200, 2207, 0), new ScheduledTask(1500, 1507, 0), new ScheduledTask(4800, 4804, 0)};
        int[] expectedProcessorEndTimes = new int[]{4804, 3487, 4202, 2609};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(60, 69, 0), new ScheduledTask(17, 23, 1), new ScheduledTask(42, 48, 0), new ScheduledTask(32, 42, 0), new ScheduledTask(13, 18, 0), new ScheduledTask(31, 39, 1), new ScheduledTask(57, 60, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(48, 57, 0), new ScheduledTask(55, 65, 1), new ScheduledTask(46, 55, 1), new ScheduledTask(10, 13, 0), new ScheduledTask(9, 17, 1), new ScheduledTask(39, 46, 1), new ScheduledTask(65, 67, 1), new ScheduledTask(23, 31, 1), new ScheduledTask(4, 10, 0), new ScheduledTask(0, 4, 0), new ScheduledTask(25, 32, 0), new ScheduledTask(18, 25, 0), new ScheduledTask(69, 73, 0)};
        int[] expectedProcessorEndTimes = new int[]{73, 67};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 41;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(24, 33, 3), new ScheduledTask(0, 6, 2), new ScheduledTask(25, 31, 1), new ScheduledTask(15, 25, 1), new ScheduledTask(22, 27, 0), new ScheduledTask(6, 14, 2), new ScheduledTask(34, 37, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(14, 23, 2), new ScheduledTask(23, 33, 2), new ScheduledTask(15, 24, 3), new ScheduledTask(19, 22, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(8, 15, 3), new ScheduledTask(33, 35, 3), new ScheduledTask(0, 8, 3), new ScheduledTask(4, 10, 0), new ScheduledTask(0, 4, 0), new ScheduledTask(27, 34, 0), new ScheduledTask(8, 15, 1), new ScheduledTask(37, 41, 0)};
        int[] expectedProcessorEndTimes = new int[]{41, 31, 33, 35};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 30;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(13, 22, 1), new ScheduledTask(9, 15, 3), new ScheduledTask(20, 26, 0), new ScheduledTask(3, 13, 1), new ScheduledTask(0, 5, 5), new ScheduledTask(0, 8, 4), new ScheduledTask(17, 20, 4), new ScheduledTask(0, 9, 3), new ScheduledTask(8, 17, 4), new ScheduledTask(12, 22, 2), new ScheduledTask(13, 22, 5), new ScheduledTask(0, 3, 1), new ScheduledTask(4, 12, 2), new ScheduledTask(15, 22, 3), new ScheduledTask(22, 24, 5), new ScheduledTask(5, 13, 5), new ScheduledTask(0, 6, 0), new ScheduledTask(0, 4, 2), new ScheduledTask(13, 20, 0), new ScheduledTask(6, 13, 0), new ScheduledTask(26, 30, 0)};
        int[] expectedProcessorEndTimes = new int[]{30, 22, 22, 22, 20, 24};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_1dot10_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_1.10_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 7600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(6100, 6108, 0), new ScheduledTask(5400, 5402, 2), new ScheduledTask(0, 2, 0), new ScheduledTask(800, 802, 0), new ScheduledTask(2600, 2606, 0), new ScheduledTask(0, 4, 2), new ScheduledTask(4100, 4109, 0), new ScheduledTask(5000, 5002, 0), new ScheduledTask(600, 602, 0), new ScheduledTask(2400, 2406, 1), new ScheduledTask(5200, 5203, 0), new ScheduledTask(2000, 2006, 0), new ScheduledTask(5500, 5506, 0), new ScheduledTask(2400, 2405, 2), new ScheduledTask(0, 5, 3), new ScheduledTask(3000, 3005, 3), new ScheduledTask(3200, 3209, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(1000, 1010, 0), new ScheduledTask(200, 204, 0), new ScheduledTask(6900, 6907, 0)};
        int[] expectedProcessorEndTimes = new int[]{6907, 2406, 5402, 3005};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_1dot10_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_1.10_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(2200, 2208, 1), new ScheduledTask(3600, 3602, 3), new ScheduledTask(0, 2, 1), new ScheduledTask(1400, 1402, 0), new ScheduledTask(2000, 2006, 2), new ScheduledTask(800, 804, 0), new ScheduledTask(2600, 2609, 0), new ScheduledTask(4000, 4002, 0), new ScheduledTask(1200, 1202, 0), new ScheduledTask(0, 6, 3), new ScheduledTask(3200, 3203, 2), new ScheduledTask(1200, 1206, 3), new ScheduledTask(2400, 2406, 3), new ScheduledTask(1000, 1005, 2), new ScheduledTask(0, 5, 2), new ScheduledTask(3500, 3505, 0), new ScheduledTask(400, 409, 1), new ScheduledTask(0, 4, 0), new ScheduledTask(1600, 1610, 0), new ScheduledTask(400, 404, 0), new ScheduledTask(4200, 4207, 0)};
        int[] expectedProcessorEndTimes = new int[]{4207, 2208, 3203, 3602};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_1dot10_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_1.10_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4240;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(2700, 2708, 0), new ScheduledTask(3000, 3002, 2), new ScheduledTask(0, 2, 3), new ScheduledTask(0, 2, 2), new ScheduledTask(1600, 1606, 3), new ScheduledTask(800, 804, 0), new ScheduledTask(1650, 1659, 2), new ScheduledTask(2800, 2802, 3), new ScheduledTask(1200, 1202, 0), new ScheduledTask(600, 606, 1), new ScheduledTask(2400, 2403, 0), new ScheduledTask(400, 406, 3), new ScheduledTask(2520, 2526, 1), new ScheduledTask(1320, 1325, 1), new ScheduledTask(0, 5, 1), new ScheduledTask(1920, 1925, 1), new ScheduledTask(300, 309, 2), new ScheduledTask(0, 4, 0), new ScheduledTask(1400, 1410, 0), new ScheduledTask(400, 404, 0), new ScheduledTask(3540, 3547, 0)};
        int[] expectedProcessorEndTimes = new int[]{3547, 2526, 3002, 2802};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_1dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_1.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(43, 51, 0), new ScheduledTask(47, 49, 1), new ScheduledTask(4, 6, 0), new ScheduledTask(12, 14, 0), new ScheduledTask(14, 20, 0), new ScheduledTask(11, 15, 1), new ScheduledTask(29, 38, 0), new ScheduledTask(38, 40, 0), new ScheduledTask(10, 12, 0), new ScheduledTask(5, 11, 1), new ScheduledTask(40, 43, 0), new ScheduledTask(30, 36, 1), new ScheduledTask(41, 47, 1), new ScheduledTask(15, 20, 1), new ScheduledTask(0, 5, 1), new ScheduledTask(36, 41, 1), new ScheduledTask(20, 29, 0), new ScheduledTask(0, 4, 0), new ScheduledTask(20, 30, 1), new ScheduledTask(6, 10, 0), new ScheduledTask(51, 58, 0)};
        int[] expectedProcessorEndTimes = new int[]{58, 49};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_1dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_1.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 34;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(16, 24, 3), new ScheduledTask(23, 25, 1), new ScheduledTask(0, 2, 1), new ScheduledTask(20, 22, 0), new ScheduledTask(10, 16, 3), new ScheduledTask(0, 4, 3), new ScheduledTask(12, 21, 1), new ScheduledTask(21, 23, 1), new ScheduledTask(13, 15, 0), new ScheduledTask(0, 6, 2), new ScheduledTask(15, 18, 2), new ScheduledTask(4, 10, 3), new ScheduledTask(18, 24, 2), new ScheduledTask(15, 20, 0), new ScheduledTask(8, 13, 0), new ScheduledTask(22, 27, 0), new ScheduledTask(6, 15, 2), new ScheduledTask(0, 4, 0), new ScheduledTask(2, 12, 1), new ScheduledTask(4, 8, 0), new ScheduledTask(27, 34, 0)};
        int[] expectedProcessorEndTimes = new int[]{34, 25, 24, 24};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_1dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_1.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 26;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(8, 16, 2), new ScheduledTask(15, 17, 3), new ScheduledTask(0, 2, 2), new ScheduledTask(11, 13, 4), new ScheduledTask(4, 10, 3), new ScheduledTask(0, 4, 5), new ScheduledTask(10, 19, 0), new ScheduledTask(14, 16, 1), new ScheduledTask(6, 8, 2), new ScheduledTask(0, 6, 4), new ScheduledTask(13, 16, 4), new ScheduledTask(4, 10, 5), new ScheduledTask(10, 16, 5), new ScheduledTask(6, 11, 4), new ScheduledTask(0, 5, 1), new ScheduledTask(10, 15, 3), new ScheduledTask(5, 14, 1), new ScheduledTask(0, 4, 3), new ScheduledTask(0, 10, 0), new ScheduledTask(2, 6, 2), new ScheduledTask(19, 26, 0)};
        int[] expectedProcessorEndTimes = new int[]{26, 16, 16, 17, 16, 16};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_1dot97_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_1.97_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 16;
        int expectedScheduleEndTime = 26;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 14), new ScheduledTask(0, 6, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 3, 10), new ScheduledTask(6, 13, 0), new ScheduledTask(4, 6, 15), new ScheduledTask(0, 7, 4), new ScheduledTask(0, 3, 11), new ScheduledTask(0, 6, 5), new ScheduledTask(0, 3, 12), new ScheduledTask(0, 8, 2), new ScheduledTask(0, 4, 7), new ScheduledTask(0, 2, 15), new ScheduledTask(0, 8, 3), new ScheduledTask(0, 4, 8), new ScheduledTask(0, 6, 6), new ScheduledTask(2, 4, 15), new ScheduledTask(0, 4, 9), new ScheduledTask(4, 9, 7), new ScheduledTask(0, 3, 13), new ScheduledTask(20, 26, 0)};
        int[] expectedProcessorEndTimes = new int[]{26, 10, 8, 8, 7, 6, 6, 9, 4, 4, 3, 3, 3, 3, 2, 6};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_1dot97_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_1.97_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(39, 41, 1), new ScheduledTask(7, 13, 0), new ScheduledTask(30, 40, 0), new ScheduledTask(40, 43, 0), new ScheduledTask(13, 20, 0), new ScheduledTask(20, 22, 0), new ScheduledTask(8, 15, 1), new ScheduledTask(4, 7, 0), new ScheduledTask(33, 39, 1), new ScheduledTask(46, 49, 0), new ScheduledTask(22, 30, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(0, 2, 0), new ScheduledTask(15, 23, 1), new ScheduledTask(4, 8, 1), new ScheduledTask(27, 33, 1), new ScheduledTask(2, 4, 0), new ScheduledTask(23, 27, 1), new ScheduledTask(41, 46, 1), new ScheduledTask(43, 46, 0), new ScheduledTask(49, 55, 0)};
        int[] expectedProcessorEndTimes = new int[]{55, 46};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_1dot97_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_1.97_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 33;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(22, 24, 3), new ScheduledTask(0, 6, 1), new ScheduledTask(6, 16, 1), new ScheduledTask(15, 18, 0), new ScheduledTask(0, 7, 3), new ScheduledTask(7, 9, 3), new ScheduledTask(9, 16, 3), new ScheduledTask(4, 7, 0), new ScheduledTask(16, 22, 2), new ScheduledTask(18, 21, 0), new ScheduledTask(8, 16, 2), new ScheduledTask(7, 11, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(0, 8, 2), new ScheduledTask(11, 15, 0), new ScheduledTask(16, 22, 3), new ScheduledTask(2, 4, 0), new ScheduledTask(21, 25, 0), new ScheduledTask(19, 24, 1), new ScheduledTask(16, 19, 1), new ScheduledTask(27, 33, 0)};
        int[] expectedProcessorEndTimes = new int[]{33, 24, 22, 24};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_1dot97_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_1.97_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 26;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(12, 14, 7), new ScheduledTask(0, 6, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(3, 6, 6), new ScheduledTask(6, 13, 0), new ScheduledTask(0, 2, 5), new ScheduledTask(2, 9, 4), new ScheduledTask(0, 3, 6), new ScheduledTask(8, 14, 5), new ScheduledTask(5, 8, 5), new ScheduledTask(0, 8, 2), new ScheduledTask(0, 4, 7), new ScheduledTask(0, 2, 4), new ScheduledTask(2, 10, 3), new ScheduledTask(4, 8, 7), new ScheduledTask(6, 12, 6), new ScheduledTask(0, 2, 3), new ScheduledTask(8, 12, 7), new ScheduledTask(12, 17, 6), new ScheduledTask(2, 5, 5), new ScheduledTask(20, 26, 0)};
        int[] expectedProcessorEndTimes = new int[]{26, 10, 8, 10, 9, 14, 17, 14};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_10dot00_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_10.00_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(2800, 2803, 0), new ScheduledTask(0, 3, 0), new ScheduledTask(3100, 3104, 0), new ScheduledTask(1800, 1803, 3), new ScheduledTask(0, 3, 3), new ScheduledTask(7800, 7809, 0), new ScheduledTask(0, 4, 2), new ScheduledTask(6000, 6007, 0), new ScheduledTask(2400, 2405, 2), new ScheduledTask(4100, 4108, 0), new ScheduledTask(7600, 7602, 0), new ScheduledTask(3600, 3604, 3), new ScheduledTask(0, 10, 1), new ScheduledTask(3500, 3506, 0), new ScheduledTask(5400, 5406, 0), new ScheduledTask(1800, 1810, 0), new ScheduledTask(4900, 4905, 0), new ScheduledTask(300, 309, 0), new ScheduledTask(6700, 6709, 0), new ScheduledTask(1200, 1206, 0), new ScheduledTask(8700, 8705, 0)};
        int[] expectedProcessorEndTimes = new int[]{8705, 10, 2405, 3604};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_10dot00_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_10.00_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 7200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(2800, 2803, 0), new ScheduledTask(0, 3, 0), new ScheduledTask(3100, 3104, 0), new ScheduledTask(1800, 1803, 3), new ScheduledTask(1200, 1203, 3), new ScheduledTask(0, 9, 2), new ScheduledTask(0, 4, 3), new ScheduledTask(6000, 6007, 0), new ScheduledTask(3200, 3205, 3), new ScheduledTask(4100, 4108, 0), new ScheduledTask(800, 802, 3), new ScheduledTask(2400, 2404, 3), new ScheduledTask(1800, 1810, 1), new ScheduledTask(3500, 3506, 0), new ScheduledTask(5400, 5406, 0), new ScheduledTask(1800, 1810, 0), new ScheduledTask(4900, 4905, 0), new ScheduledTask(300, 309, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(1200, 1206, 0), new ScheduledTask(6700, 6705, 0)};
        int[] expectedProcessorEndTimes = new int[]{6705, 1810, 9, 3205};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_10dot00_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_10.00_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 7200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(2800, 2803, 0), new ScheduledTask(0, 3, 0), new ScheduledTask(3100, 3104, 0), new ScheduledTask(2250, 2253, 2), new ScheduledTask(0, 3, 3), new ScheduledTask(600, 609, 3), new ScheduledTask(0, 4, 2), new ScheduledTask(6000, 6007, 0), new ScheduledTask(3300, 3305, 2), new ScheduledTask(4100, 4108, 0), new ScheduledTask(1950, 1952, 2), new ScheduledTask(2700, 2704, 2), new ScheduledTask(2400, 2410, 3), new ScheduledTask(3500, 3506, 0), new ScheduledTask(5400, 5406, 0), new ScheduledTask(1800, 1810, 0), new ScheduledTask(4900, 4905, 0), new ScheduledTask(300, 309, 0), new ScheduledTask(600, 609, 2), new ScheduledTask(1200, 1206, 0), new ScheduledTask(6700, 6705, 0)};
        int[] expectedProcessorEndTimes = new int[]{6705, 0, 3305, 2410};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_10dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 75;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(28, 31, 0), new ScheduledTask(0, 3, 0), new ScheduledTask(31, 35, 0), new ScheduledTask(16, 19, 1), new ScheduledTask(13, 16, 1), new ScheduledTask(19, 28, 1), new ScheduledTask(0, 4, 1), new ScheduledTask(60, 67, 0), new ScheduledTask(32, 37, 1), new ScheduledTask(41, 49, 0), new ScheduledTask(67, 69, 0), new ScheduledTask(28, 32, 1), new ScheduledTask(37, 47, 1), new ScheduledTask(35, 41, 0), new ScheduledTask(54, 60, 0), new ScheduledTask(18, 28, 0), new ScheduledTask(49, 54, 0), new ScheduledTask(3, 12, 0), new ScheduledTask(4, 13, 1), new ScheduledTask(12, 18, 0), new ScheduledTask(70, 75, 0)};
        int[] expectedProcessorEndTimes = new int[]{75, 47};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_10dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(28, 31, 0), new ScheduledTask(0, 3, 0), new ScheduledTask(31, 35, 0), new ScheduledTask(9, 12, 3), new ScheduledTask(6, 9, 3), new ScheduledTask(9, 18, 1), new ScheduledTask(0, 4, 3), new ScheduledTask(60, 67, 0), new ScheduledTask(0, 5, 2), new ScheduledTask(41, 49, 0), new ScheduledTask(4, 6, 3), new ScheduledTask(12, 16, 3), new ScheduledTask(18, 28, 1), new ScheduledTask(35, 41, 0), new ScheduledTask(54, 60, 0), new ScheduledTask(18, 28, 0), new ScheduledTask(49, 54, 0), new ScheduledTask(3, 12, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(12, 18, 0), new ScheduledTask(67, 72, 0)};
        int[] expectedProcessorEndTimes = new int[]{72, 28, 5, 16};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_10dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(28, 31, 0), new ScheduledTask(0, 3, 0), new ScheduledTask(31, 35, 0), new ScheduledTask(5, 8, 5), new ScheduledTask(2, 5, 5), new ScheduledTask(9, 18, 2), new ScheduledTask(0, 4, 4), new ScheduledTask(60, 67, 0), new ScheduledTask(0, 5, 3), new ScheduledTask(41, 49, 0), new ScheduledTask(0, 2, 5), new ScheduledTask(8, 12, 5), new ScheduledTask(0, 10, 1), new ScheduledTask(35, 41, 0), new ScheduledTask(54, 60, 0), new ScheduledTask(18, 28, 0), new ScheduledTask(49, 54, 0), new ScheduledTask(3, 12, 0), new ScheduledTask(0, 9, 2), new ScheduledTask(12, 18, 0), new ScheduledTask(67, 72, 0)};
        int[] expectedProcessorEndTimes = new int[]{72, 10, 18, 5, 4, 12};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_10dot00_WeightType_Random2_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_10.00_WeightType_Random#2_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1800, 1803, 3), new ScheduledTask(0, 8, 1), new ScheduledTask(6300, 6307, 0), new ScheduledTask(7000, 7010, 0), new ScheduledTask(1200, 1203, 2), new ScheduledTask(3400, 3407, 0), new ScheduledTask(600, 606, 0), new ScheduledTask(5600, 5607, 0), new ScheduledTask(3000, 3004, 0), new ScheduledTask(4100, 4109, 0), new ScheduledTask(8000, 8010, 0), new ScheduledTask(3000, 3005, 2), new ScheduledTask(1200, 1208, 0), new ScheduledTask(0, 6, 0), new ScheduledTask(2000, 2010, 0), new ScheduledTask(0, 2, 2), new ScheduledTask(3600, 3604, 3), new ScheduledTask(0, 3, 3), new ScheduledTask(5000, 5004, 0), new ScheduledTask(5400, 5402, 0), new ScheduledTask(9000, 9002, 0)};
        int[] expectedProcessorEndTimes = new int[]{9002, 8, 3005, 3604};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_10dot00_WeightType_Random2_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_10.00_WeightType_Random#2_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 7000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(600, 603, 2), new ScheduledTask(1200, 1208, 2), new ScheduledTask(400, 407, 1), new ScheduledTask(5400, 5410, 0), new ScheduledTask(1800, 1803, 3), new ScheduledTask(3400, 3407, 0), new ScheduledTask(600, 606, 0), new ScheduledTask(400, 407, 3), new ScheduledTask(3000, 3004, 0), new ScheduledTask(4100, 4109, 0), new ScheduledTask(1800, 1810, 1), new ScheduledTask(2400, 2405, 3), new ScheduledTask(1200, 1208, 0), new ScheduledTask(0, 6, 0), new ScheduledTask(2000, 2010, 0), new ScheduledTask(0, 2, 3), new ScheduledTask(2800, 2804, 2), new ScheduledTask(0, 3, 2), new ScheduledTask(5000, 5004, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(6800, 6802, 0)};
        int[] expectedProcessorEndTimes = new int[]{6802, 1810, 2804, 2405};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_10dot00_WeightType_Random2_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_10.00_WeightType_Random#2_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 6600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(6100, 6103, 0), new ScheduledTask(1050, 1058, 2), new ScheduledTask(0, 7, 2), new ScheduledTask(0, 10, 1), new ScheduledTask(1200, 1203, 1), new ScheduledTask(3400, 3407, 0), new ScheduledTask(600, 606, 0), new ScheduledTask(0, 7, 3), new ScheduledTask(3000, 3004, 0), new ScheduledTask(4100, 4109, 0), new ScheduledTask(1400, 1410, 3), new ScheduledTask(2250, 2255, 2), new ScheduledTask(1200, 1208, 0), new ScheduledTask(0, 6, 0), new ScheduledTask(2000, 2010, 0), new ScheduledTask(5000, 5002, 0), new ScheduledTask(1560, 1564, 1), new ScheduledTask(5200, 5203, 0), new ScheduledTask(5500, 5504, 0), new ScheduledTask(5900, 5902, 0), new ScheduledTask(6400, 6402, 0)};
        int[] expectedProcessorEndTimes = new int[]{6402, 1564, 2255, 1410};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_10dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_10.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(11, 14, 1), new ScheduledTask(17, 25, 1), new ScheduledTask(57, 64, 0), new ScheduledTask(64, 74, 0), new ScheduledTask(14, 17, 1), new ScheduledTask(34, 41, 0), new ScheduledTask(6, 12, 0), new ScheduledTask(50, 57, 0), new ScheduledTask(30, 34, 0), new ScheduledTask(41, 50, 0), new ScheduledTask(34, 44, 1), new ScheduledTask(29, 34, 1), new ScheduledTask(12, 20, 0), new ScheduledTask(0, 6, 0), new ScheduledTask(20, 30, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(25, 29, 1), new ScheduledTask(2, 5, 1), new ScheduledTask(5, 9, 1), new ScheduledTask(9, 11, 1), new ScheduledTask(74, 76, 0)};
        int[] expectedProcessorEndTimes = new int[]{76, 44};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_10dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_10.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 3), new ScheduledTask(10, 18, 1), new ScheduledTask(2, 9, 2), new ScheduledTask(0, 10, 1), new ScheduledTask(10, 13, 3), new ScheduledTask(34, 41, 0), new ScheduledTask(6, 12, 0), new ScheduledTask(3, 10, 3), new ScheduledTask(30, 34, 0), new ScheduledTask(41, 50, 0), new ScheduledTask(18, 28, 1), new ScheduledTask(17, 22, 3), new ScheduledTask(12, 20, 0), new ScheduledTask(0, 6, 0), new ScheduledTask(20, 30, 0), new ScheduledTask(50, 52, 0), new ScheduledTask(13, 17, 3), new ScheduledTask(52, 55, 0), new ScheduledTask(55, 59, 0), new ScheduledTask(0, 2, 2), new ScheduledTask(60, 62, 0)};
        int[] expectedProcessorEndTimes = new int[]{62, 28, 9, 22};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_10dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_10.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 5), new ScheduledTask(0, 8, 3), new ScheduledTask(2, 9, 4), new ScheduledTask(0, 10, 1), new ScheduledTask(10, 13, 5), new ScheduledTask(34, 41, 0), new ScheduledTask(6, 12, 0), new ScheduledTask(3, 10, 5), new ScheduledTask(30, 34, 0), new ScheduledTask(41, 50, 0), new ScheduledTask(0, 10, 2), new ScheduledTask(17, 22, 5), new ScheduledTask(12, 20, 0), new ScheduledTask(0, 6, 0), new ScheduledTask(20, 30, 0), new ScheduledTask(50, 52, 0), new ScheduledTask(13, 17, 5), new ScheduledTask(52, 55, 0), new ScheduledTask(55, 59, 0), new ScheduledTask(0, 2, 4), new ScheduledTask(60, 62, 0)};
        int[] expectedProcessorEndTimes = new int[]{62, 10, 10, 8, 9, 22};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_10dot00_WeightType_Random3_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_10.00_WeightType_Random#3_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(6600, 6610, 0), new ScheduledTask(5200, 5206, 0), new ScheduledTask(0, 8, 2), new ScheduledTask(0, 3, 0), new ScheduledTask(3100, 3103, 0), new ScheduledTask(0, 6, 3), new ScheduledTask(1800, 1810, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(1200, 1206, 0), new ScheduledTask(300, 304, 0), new ScheduledTask(4200, 4205, 0), new ScheduledTask(4700, 4705, 0), new ScheduledTask(2800, 2803, 0), new ScheduledTask(3800, 3804, 0), new ScheduledTask(6200, 6204, 0), new ScheduledTask(3400, 3404, 0), new ScheduledTask(700, 705, 0), new ScheduledTask(4800, 4802, 2), new ScheduledTask(5800, 5804, 0), new ScheduledTask(7600, 7610, 0), new ScheduledTask(8600, 8604, 0)};
        int[] expectedProcessorEndTimes = new int[]{8604, 10, 4802, 6};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_10dot00_WeightType_Random3_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_10.00_WeightType_Random#3_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 6800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 1), new ScheduledTask(5200, 5206, 0), new ScheduledTask(0, 8, 2), new ScheduledTask(0, 3, 0), new ScheduledTask(3100, 3103, 0), new ScheduledTask(3200, 3206, 3), new ScheduledTask(1800, 1810, 0), new ScheduledTask(1600, 1610, 2), new ScheduledTask(1200, 1206, 0), new ScheduledTask(300, 304, 0), new ScheduledTask(4200, 4205, 0), new ScheduledTask(4700, 4705, 0), new ScheduledTask(2800, 2803, 0), new ScheduledTask(3800, 3804, 0), new ScheduledTask(5800, 5804, 0), new ScheduledTask(3400, 3404, 0), new ScheduledTask(700, 705, 0), new ScheduledTask(2800, 2802, 3), new ScheduledTask(0, 4, 3), new ScheduledTask(800, 810, 3), new ScheduledTask(6400, 6404, 0)};
        int[] expectedProcessorEndTimes = new int[]{6404, 10, 1610, 3206};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_10dot00_WeightType_Random3_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_10.00_WeightType_Random#3_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 6200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 1), new ScheduledTask(5200, 5206, 0), new ScheduledTask(1200, 1208, 1), new ScheduledTask(0, 3, 0), new ScheduledTask(3100, 3103, 0), new ScheduledTask(2800, 2806, 3), new ScheduledTask(1800, 1810, 0), new ScheduledTask(800, 810, 3), new ScheduledTask(1200, 1206, 0), new ScheduledTask(300, 304, 0), new ScheduledTask(4200, 4205, 0), new ScheduledTask(4700, 4705, 0), new ScheduledTask(2800, 2803, 0), new ScheduledTask(3800, 3804, 0), new ScheduledTask(0, 4, 2), new ScheduledTask(3400, 3404, 0), new ScheduledTask(700, 705, 0), new ScheduledTask(2100, 2102, 2), new ScheduledTask(0, 4, 3), new ScheduledTask(600, 610, 2), new ScheduledTask(5800, 5804, 0)};
        int[] expectedProcessorEndTimes = new int[]{5804, 1208, 2102, 2806};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_10dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_10.00_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(9, 19, 1), new ScheduledTask(47, 53, 0), new ScheduledTask(57, 65, 0), new ScheduledTask(0, 3, 0), new ScheduledTask(31, 34, 0), new ScheduledTask(41, 47, 1), new ScheduledTask(18, 28, 0), new ScheduledTask(29, 39, 1), new ScheduledTask(12, 18, 0), new ScheduledTask(3, 7, 0), new ScheduledTask(42, 47, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(28, 31, 0), new ScheduledTask(38, 42, 0), new ScheduledTask(53, 57, 0), new ScheduledTask(34, 38, 0), new ScheduledTask(7, 12, 0), new ScheduledTask(39, 41, 1), new ScheduledTask(5, 9, 1), new ScheduledTask(19, 29, 1), new ScheduledTask(66, 70, 0)};
        int[] expectedProcessorEndTimes = new int[]{70, 47};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_10dot00_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_10.00_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 1), new ScheduledTask(52, 58, 0), new ScheduledTask(4, 12, 3), new ScheduledTask(0, 3, 0), new ScheduledTask(31, 34, 0), new ScheduledTask(24, 30, 3), new ScheduledTask(18, 28, 0), new ScheduledTask(4, 14, 2), new ScheduledTask(12, 18, 0), new ScheduledTask(3, 7, 0), new ScheduledTask(42, 47, 0), new ScheduledTask(47, 52, 0), new ScheduledTask(28, 31, 0), new ScheduledTask(38, 42, 0), new ScheduledTask(0, 4, 2), new ScheduledTask(34, 38, 0), new ScheduledTask(7, 12, 0), new ScheduledTask(22, 24, 3), new ScheduledTask(0, 4, 3), new ScheduledTask(12, 22, 3), new ScheduledTask(58, 62, 0)};
        int[] expectedProcessorEndTimes = new int[]{62, 10, 14, 30};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_10dot00_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_10.00_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 1), new ScheduledTask(52, 58, 0), new ScheduledTask(0, 8, 3), new ScheduledTask(0, 3, 0), new ScheduledTask(31, 34, 0), new ScheduledTask(0, 6, 4), new ScheduledTask(18, 28, 0), new ScheduledTask(10, 20, 1), new ScheduledTask(12, 18, 0), new ScheduledTask(3, 7, 0), new ScheduledTask(42, 47, 0), new ScheduledTask(47, 52, 0), new ScheduledTask(28, 31, 0), new ScheduledTask(38, 42, 0), new ScheduledTask(4, 8, 5), new ScheduledTask(34, 38, 0), new ScheduledTask(7, 12, 0), new ScheduledTask(8, 10, 5), new ScheduledTask(0, 4, 5), new ScheduledTask(0, 10, 2), new ScheduledTask(58, 62, 0)};
        int[] expectedProcessorEndTimes = new int[]{62, 20, 10, 8, 6, 10};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_10dot00_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_10.00_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1300, 1302, 0), new ScheduledTask(2100, 2105, 0), new ScheduledTask(2600, 2606, 0), new ScheduledTask(0, 3, 3), new ScheduledTask(800, 805, 0), new ScheduledTask(1800, 1807, 3), new ScheduledTask(0, 9, 2), new ScheduledTask(6100, 6107, 0), new ScheduledTask(0, 3, 0), new ScheduledTask(8700, 8705, 0), new ScheduledTask(5000, 5007, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(6800, 6807, 0), new ScheduledTask(5700, 5704, 0), new ScheduledTask(1500, 1506, 0), new ScheduledTask(8300, 8304, 0), new ScheduledTask(4000, 4010, 0), new ScheduledTask(7500, 7508, 0), new ScheduledTask(3200, 3208, 0), new ScheduledTask(300, 305, 0), new ScheduledTask(9200, 9202, 0)};
        int[] expectedProcessorEndTimes = new int[]{9202, 10, 9, 1807};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_10dot00_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_10.00_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 6600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1300, 1302, 0), new ScheduledTask(2100, 2105, 0), new ScheduledTask(2600, 2606, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(800, 805, 0), new ScheduledTask(1600, 1607, 3), new ScheduledTask(2200, 2209, 2), new ScheduledTask(5700, 5707, 0), new ScheduledTask(0, 3, 0), new ScheduledTask(3000, 3005, 3), new ScheduledTask(5000, 5007, 0), new ScheduledTask(1400, 1410, 1), new ScheduledTask(800, 807, 2), new ScheduledTask(0, 4, 2), new ScheduledTask(1500, 1506, 0), new ScheduledTask(600, 604, 1), new ScheduledTask(4000, 4010, 0), new ScheduledTask(0, 8, 3), new ScheduledTask(3200, 3208, 0), new ScheduledTask(300, 305, 0), new ScheduledTask(6400, 6402, 0)};
        int[] expectedProcessorEndTimes = new int[]{6402, 1410, 2209, 3005};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_10dot00_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_10.00_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 6240;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1300, 1302, 0), new ScheduledTask(2100, 2105, 0), new ScheduledTask(2600, 2606, 0), new ScheduledTask(5700, 5703, 0), new ScheduledTask(800, 805, 0), new ScheduledTask(1800, 1807, 2), new ScheduledTask(0, 9, 3), new ScheduledTask(0, 7, 1), new ScheduledTask(0, 3, 0), new ScheduledTask(2850, 2855, 2), new ScheduledTask(5000, 5007, 0), new ScheduledTask(1800, 1810, 3), new ScheduledTask(840, 847, 1), new ScheduledTask(0, 4, 2), new ScheduledTask(1500, 1506, 0), new ScheduledTask(1680, 1684, 1), new ScheduledTask(4000, 4010, 0), new ScheduledTask(600, 608, 2), new ScheduledTask(3200, 3208, 0), new ScheduledTask(300, 305, 0), new ScheduledTask(6040, 6042, 0)};
        int[] expectedProcessorEndTimes = new int[]{6042, 1684, 2855, 1810};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(13, 15, 0), new ScheduledTask(21, 26, 0), new ScheduledTask(26, 32, 0), new ScheduledTask(50, 53, 0), new ScheduledTask(8, 13, 0), new ScheduledTask(29, 36, 1), new ScheduledTask(41, 50, 1), new ScheduledTask(7, 14, 1), new ScheduledTask(0, 3, 0), new ScheduledTask(36, 41, 1), new ScheduledTask(0, 7, 1), new ScheduledTask(61, 71, 0), new ScheduledTask(14, 21, 1), new ScheduledTask(53, 57, 0), new ScheduledTask(15, 21, 0), new ScheduledTask(57, 61, 0), new ScheduledTask(40, 50, 0), new ScheduledTask(21, 29, 1), new ScheduledTask(32, 40, 0), new ScheduledTask(3, 8, 0), new ScheduledTask(71, 73, 0)};
        int[] expectedProcessorEndTimes = new int[]{73, 50};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(13, 15, 0), new ScheduledTask(21, 26, 0), new ScheduledTask(26, 32, 0), new ScheduledTask(0, 3, 2), new ScheduledTask(8, 13, 0), new ScheduledTask(18, 25, 3), new ScheduledTask(7, 16, 2), new ScheduledTask(0, 7, 3), new ScheduledTask(0, 3, 0), new ScheduledTask(25, 30, 3), new ScheduledTask(50, 57, 0), new ScheduledTask(8, 18, 1), new ScheduledTask(7, 14, 3), new ScheduledTask(3, 7, 2), new ScheduledTask(15, 21, 0), new ScheduledTask(14, 18, 3), new ScheduledTask(40, 50, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(32, 40, 0), new ScheduledTask(3, 8, 0), new ScheduledTask(59, 61, 0)};
        int[] expectedProcessorEndTimes = new int[]{61, 18, 16, 30};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(13, 15, 0), new ScheduledTask(21, 26, 0), new ScheduledTask(26, 32, 0), new ScheduledTask(0, 3, 5), new ScheduledTask(8, 13, 0), new ScheduledTask(0, 7, 3), new ScheduledTask(0, 9, 2), new ScheduledTask(0, 7, 4), new ScheduledTask(0, 3, 0), new ScheduledTask(18, 23, 5), new ScheduledTask(50, 57, 0), new ScheduledTask(8, 18, 1), new ScheduledTask(7, 14, 5), new ScheduledTask(3, 7, 5), new ScheduledTask(15, 21, 0), new ScheduledTask(14, 18, 5), new ScheduledTask(40, 50, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(32, 40, 0), new ScheduledTask(3, 8, 0), new ScheduledTask(59, 61, 0)};
        int[] expectedProcessorEndTimes = new int[]{61, 18, 9, 7, 7, 23};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_10dot02_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_10.02_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1800, 1809, 0), new ScheduledTask(200, 204, 0), new ScheduledTask(6000, 6007, 0), new ScheduledTask(0, 5, 2), new ScheduledTask(0, 9, 1), new ScheduledTask(3000, 3003, 2), new ScheduledTask(6700, 6709, 0), new ScheduledTask(8500, 8510, 0), new ScheduledTask(7600, 7609, 0), new ScheduledTask(0, 3, 3), new ScheduledTask(1800, 1802, 3), new ScheduledTask(0, 2, 0), new ScheduledTask(5300, 5307, 0), new ScheduledTask(3000, 3003, 3), new ScheduledTask(1200, 1206, 0), new ScheduledTask(4700, 4706, 0), new ScheduledTask(4200, 4205, 0), new ScheduledTask(3700, 3705, 0), new ScheduledTask(600, 606, 0), new ScheduledTask(2700, 2710, 0), new ScheduledTask(9900, 9907, 0)};
        int[] expectedProcessorEndTimes = new int[]{9907, 9, 3003, 3003};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_10dot02_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_10.02_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1800, 1809, 0), new ScheduledTask(200, 204, 0), new ScheduledTask(6000, 6007, 0), new ScheduledTask(0, 5, 2), new ScheduledTask(1000, 1009, 2), new ScheduledTask(1800, 1803, 3), new ScheduledTask(6700, 6709, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 9, 3), new ScheduledTask(2400, 2403, 3), new ScheduledTask(3000, 3002, 3), new ScheduledTask(0, 2, 0), new ScheduledTask(5300, 5307, 0), new ScheduledTask(3400, 3403, 3), new ScheduledTask(1200, 1206, 0), new ScheduledTask(4700, 4706, 0), new ScheduledTask(4200, 4205, 0), new ScheduledTask(3700, 3705, 0), new ScheduledTask(600, 606, 0), new ScheduledTask(2700, 2710, 0), new ScheduledTask(7600, 7607, 0)};
        int[] expectedProcessorEndTimes = new int[]{7607, 10, 1009, 3403};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_10dot02_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_10.02_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 7900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1800, 1809, 0), new ScheduledTask(200, 204, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(840, 845, 1), new ScheduledTask(1440, 1449, 1), new ScheduledTask(1800, 1803, 3), new ScheduledTask(6000, 6009, 0), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 9, 3), new ScheduledTask(2400, 2403, 3), new ScheduledTask(3000, 3002, 3), new ScheduledTask(0, 2, 0), new ScheduledTask(5300, 5307, 0), new ScheduledTask(3400, 3403, 3), new ScheduledTask(1200, 1206, 0), new ScheduledTask(4700, 4706, 0), new ScheduledTask(4200, 4205, 0), new ScheduledTask(3700, 3705, 0), new ScheduledTask(600, 606, 0), new ScheduledTask(2700, 2710, 0), new ScheduledTask(7200, 7207, 0)};
        int[] expectedProcessorEndTimes = new int[]{7207, 1449, 10, 3403};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 86;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(18, 27, 0), new ScheduledTask(2, 6, 0), new ScheduledTask(53, 60, 0), new ScheduledTask(60, 65, 0), new ScheduledTask(25, 34, 1), new ScheduledTask(75, 78, 0), new ScheduledTask(7, 16, 1), new ScheduledTask(65, 75, 0), new ScheduledTask(16, 25, 1), new ScheduledTask(34, 37, 1), new ScheduledTask(37, 39, 1), new ScheduledTask(0, 2, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(39, 42, 1), new ScheduledTask(12, 18, 0), new ScheduledTask(47, 53, 0), new ScheduledTask(42, 47, 0), new ScheduledTask(37, 42, 0), new ScheduledTask(6, 12, 0), new ScheduledTask(27, 37, 0), new ScheduledTask(79, 86, 0)};
        int[] expectedProcessorEndTimes = new int[]{86, 42};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(18, 27, 0), new ScheduledTask(2, 6, 0), new ScheduledTask(0, 7, 3), new ScheduledTask(0, 5, 2), new ScheduledTask(5, 14, 2), new ScheduledTask(16, 19, 3), new ScheduledTask(60, 69, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(7, 16, 3), new ScheduledTask(19, 22, 3), new ScheduledTask(22, 24, 3), new ScheduledTask(0, 2, 0), new ScheduledTask(53, 60, 0), new ScheduledTask(24, 27, 3), new ScheduledTask(12, 18, 0), new ScheduledTask(47, 53, 0), new ScheduledTask(42, 47, 0), new ScheduledTask(37, 42, 0), new ScheduledTask(6, 12, 0), new ScheduledTask(27, 37, 0), new ScheduledTask(70, 77, 0)};
        int[] expectedProcessorEndTimes = new int[]{77, 10, 14, 27};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_10dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(18, 27, 0), new ScheduledTask(2, 6, 0), new ScheduledTask(0, 7, 4), new ScheduledTask(0, 5, 5), new ScheduledTask(0, 9, 2), new ScheduledTask(5, 8, 5), new ScheduledTask(60, 69, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 9, 3), new ScheduledTask(8, 11, 5), new ScheduledTask(11, 13, 5), new ScheduledTask(0, 2, 0), new ScheduledTask(53, 60, 0), new ScheduledTask(13, 16, 5), new ScheduledTask(12, 18, 0), new ScheduledTask(47, 53, 0), new ScheduledTask(42, 47, 0), new ScheduledTask(37, 42, 0), new ScheduledTask(6, 12, 0), new ScheduledTask(27, 37, 0), new ScheduledTask(70, 77, 0)};
        int[] expectedProcessorEndTimes = new int[]{77, 10, 9, 9, 7, 16};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_10dot05_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_10.05_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(4300, 4309, 0), new ScheduledTask(1900, 1910, 0), new ScheduledTask(5700, 5706, 0), new ScheduledTask(1800, 1806, 2), new ScheduledTask(7600, 7607, 0), new ScheduledTask(6300, 6307, 0), new ScheduledTask(3300, 3304, 0), new ScheduledTask(0, 2, 3), new ScheduledTask(0, 7, 1), new ScheduledTask(7000, 7006, 0), new ScheduledTask(1200, 1206, 3), new ScheduledTask(200, 208, 0), new ScheduledTask(3700, 3706, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(1000, 1009, 0), new ScheduledTask(5200, 5205, 0), new ScheduledTask(4800, 4802, 3), new ScheduledTask(8300, 8309, 0), new ScheduledTask(0, 3, 2), new ScheduledTask(2900, 2904, 0), new ScheduledTask(9300, 9310, 0)};
        int[] expectedProcessorEndTimes = new int[]{9310, 7, 1806, 4802};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_10dot05_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_10.05_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(4300, 4309, 0), new ScheduledTask(1900, 1910, 0), new ScheduledTask(5700, 5706, 0), new ScheduledTask(2400, 2406, 3), new ScheduledTask(1400, 1407, 1), new ScheduledTask(0, 7, 1), new ScheduledTask(3300, 3304, 0), new ScheduledTask(5200, 5202, 0), new ScheduledTask(1000, 1007, 2), new ScheduledTask(1200, 1206, 3), new ScheduledTask(0, 6, 3), new ScheduledTask(200, 208, 0), new ScheduledTask(3700, 3706, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(1000, 1009, 0), new ScheduledTask(0, 5, 2), new ScheduledTask(3600, 3602, 3), new ScheduledTask(6300, 6309, 0), new ScheduledTask(5400, 5403, 0), new ScheduledTask(2900, 2904, 0), new ScheduledTask(7300, 7310, 0)};
        int[] expectedProcessorEndTimes = new int[]{7310, 1407, 1007, 3602};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_10dot05_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_10.05_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 7800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(4300, 4309, 0), new ScheduledTask(1900, 1910, 0), new ScheduledTask(6200, 6206, 0), new ScheduledTask(1800, 1806, 3), new ScheduledTask(1050, 1057, 2), new ScheduledTask(0, 7, 1), new ScheduledTask(3300, 3304, 0), new ScheduledTask(5200, 5202, 0), new ScheduledTask(0, 7, 2), new ScheduledTask(1560, 1566, 1), new ScheduledTask(840, 846, 1), new ScheduledTask(200, 208, 0), new ScheduledTask(3700, 3706, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(1000, 1009, 0), new ScheduledTask(5700, 5705, 0), new ScheduledTask(3000, 3002, 3), new ScheduledTask(0, 9, 3), new ScheduledTask(5400, 5403, 0), new ScheduledTask(2900, 2904, 0), new ScheduledTask(6800, 6810, 0)};
        int[] expectedProcessorEndTimes = new int[]{6810, 1566, 1057, 3002};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_10dot05_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_10.05_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(43, 52, 0), new ScheduledTask(19, 29, 0), new ScheduledTask(57, 63, 0), new ScheduledTask(33, 39, 1), new ScheduledTask(70, 77, 0), new ScheduledTask(63, 70, 0), new ScheduledTask(33, 37, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(17, 24, 1), new ScheduledTask(11, 17, 1), new ScheduledTask(5, 11, 1), new ScheduledTask(2, 10, 0), new ScheduledTask(37, 43, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(52, 57, 0), new ScheduledTask(39, 41, 1), new ScheduledTask(24, 33, 1), new ScheduledTask(2, 5, 1), new ScheduledTask(29, 33, 0), new ScheduledTask(78, 88, 0)};
        int[] expectedProcessorEndTimes = new int[]{88, 41};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_10dot05_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_10.05_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(43, 52, 0), new ScheduledTask(19, 29, 0), new ScheduledTask(57, 63, 0), new ScheduledTask(19, 25, 3), new ScheduledTask(12, 19, 2), new ScheduledTask(5, 12, 2), new ScheduledTask(33, 37, 0), new ScheduledTask(52, 54, 0), new ScheduledTask(12, 19, 3), new ScheduledTask(6, 12, 3), new ScheduledTask(0, 6, 3), new ScheduledTask(2, 10, 0), new ScheduledTask(37, 43, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(0, 5, 2), new ScheduledTask(25, 27, 3), new ScheduledTask(0, 9, 1), new ScheduledTask(54, 57, 0), new ScheduledTask(29, 33, 0), new ScheduledTask(68, 78, 0)};
        int[] expectedProcessorEndTimes = new int[]{78, 9, 19, 27};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_10dot05_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_10.05_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(43, 52, 0), new ScheduledTask(19, 29, 0), new ScheduledTask(57, 63, 0), new ScheduledTask(0, 6, 4), new ScheduledTask(0, 7, 2), new ScheduledTask(0, 7, 1), new ScheduledTask(33, 37, 0), new ScheduledTask(52, 54, 0), new ScheduledTask(0, 7, 3), new ScheduledTask(11, 17, 5), new ScheduledTask(5, 11, 5), new ScheduledTask(2, 10, 0), new ScheduledTask(37, 43, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(0, 5, 5), new ScheduledTask(17, 19, 5), new ScheduledTask(7, 16, 1), new ScheduledTask(54, 57, 0), new ScheduledTask(29, 33, 0), new ScheduledTask(68, 78, 0)};
        int[] expectedProcessorEndTimes = new int[]{78, 16, 7, 7, 6, 19};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_9dot97_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_9.97_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(3800, 3803, 0), new ScheduledTask(1200, 1206, 2), new ScheduledTask(0, 9, 1), new ScheduledTask(6400, 6409, 0), new ScheduledTask(3600, 3602, 0), new ScheduledTask(0, 2, 3), new ScheduledTask(0, 2, 2), new ScheduledTask(1900, 1908, 0), new ScheduledTask(0, 4, 0), new ScheduledTask(1200, 1206, 3), new ScheduledTask(4100, 4102, 0), new ScheduledTask(5500, 5509, 0), new ScheduledTask(4700, 4708, 0), new ScheduledTask(4300, 4302, 0), new ScheduledTask(400, 405, 0), new ScheduledTask(900, 904, 0), new ScheduledTask(7300, 7310, 0), new ScheduledTask(1300, 1306, 0), new ScheduledTask(2700, 2709, 0), new ScheduledTask(4500, 4502, 0), new ScheduledTask(8300, 8305, 0)};
        int[] expectedProcessorEndTimes = new int[]{8305, 9, 1206, 1206};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_9dot97_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_9.97_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 6600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(4000, 4003, 0), new ScheduledTask(5300, 5306, 0), new ScheduledTask(2200, 2209, 2), new ScheduledTask(400, 409, 2), new ScheduledTask(3800, 3802, 0), new ScheduledTask(3600, 3602, 0), new ScheduledTask(400, 402, 3), new ScheduledTask(1900, 1908, 0), new ScheduledTask(0, 4, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(4300, 4302, 0), new ScheduledTask(800, 809, 3), new ScheduledTask(4500, 4508, 0), new ScheduledTask(0, 2, 3), new ScheduledTask(400, 405, 0), new ScheduledTask(900, 904, 0), new ScheduledTask(1200, 1210, 1), new ScheduledTask(1300, 1306, 0), new ScheduledTask(2700, 2709, 0), new ScheduledTask(0, 2, 2), new ScheduledTask(6100, 6105, 0)};
        int[] expectedProcessorEndTimes = new int[]{6105, 1210, 2209, 809};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_9dot97_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_9.97_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5980;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(4000, 4003, 0), new ScheduledTask(4700, 4706, 0), new ScheduledTask(1800, 1809, 3), new ScheduledTask(600, 609, 2), new ScheduledTask(3800, 3802, 0), new ScheduledTask(3600, 3602, 0), new ScheduledTask(300, 302, 2), new ScheduledTask(1900, 1908, 0), new ScheduledTask(0, 4, 0), new ScheduledTask(960, 966, 1), new ScheduledTask(4300, 4302, 0), new ScheduledTask(0, 9, 3), new ScheduledTask(0, 8, 1), new ScheduledTask(4500, 4502, 0), new ScheduledTask(400, 405, 0), new ScheduledTask(900, 904, 0), new ScheduledTask(1680, 1690, 1), new ScheduledTask(1300, 1306, 0), new ScheduledTask(2700, 2709, 0), new ScheduledTask(0, 2, 2), new ScheduledTask(5480, 5485, 0)};
        int[] expectedProcessorEndTimes = new int[]{5485, 1690, 609, 1809};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_9dot97_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_9.97_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(40, 43, 0), new ScheduledTask(57, 63, 0), new ScheduledTask(36, 45, 1), new ScheduledTask(17, 26, 1), new ScheduledTask(38, 40, 0), new ScheduledTask(36, 38, 0), new ScheduledTask(49, 51, 0), new ScheduledTask(19, 27, 0), new ScheduledTask(0, 4, 0), new ScheduledTask(51, 57, 0), new ScheduledTask(43, 45, 0), new ScheduledTask(8, 17, 1), new ScheduledTask(0, 8, 1), new ScheduledTask(45, 47, 0), new ScheduledTask(4, 9, 0), new ScheduledTask(9, 13, 0), new ScheduledTask(26, 36, 1), new ScheduledTask(13, 19, 0), new ScheduledTask(27, 36, 0), new ScheduledTask(47, 49, 0), new ScheduledTask(63, 68, 0)};
        int[] expectedProcessorEndTimes = new int[]{68, 45};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_9dot97_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_9.97_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(40, 43, 0), new ScheduledTask(2, 8, 1), new ScheduledTask(18, 27, 1), new ScheduledTask(8, 17, 2), new ScheduledTask(38, 40, 0), new ScheduledTask(36, 38, 0), new ScheduledTask(0, 2, 2), new ScheduledTask(19, 27, 0), new ScheduledTask(0, 4, 0), new ScheduledTask(2, 8, 2), new ScheduledTask(43, 45, 0), new ScheduledTask(8, 17, 3), new ScheduledTask(0, 8, 3), new ScheduledTask(45, 47, 0), new ScheduledTask(4, 9, 0), new ScheduledTask(9, 13, 0), new ScheduledTask(8, 18, 1), new ScheduledTask(13, 19, 0), new ScheduledTask(27, 36, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(52, 57, 0)};
        int[] expectedProcessorEndTimes = new int[]{57, 27, 17, 17};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_9dot97_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_9.97_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(40, 43, 0), new ScheduledTask(10, 16, 5), new ScheduledTask(9, 18, 2), new ScheduledTask(0, 9, 2), new ScheduledTask(38, 40, 0), new ScheduledTask(36, 38, 0), new ScheduledTask(2, 4, 5), new ScheduledTask(19, 27, 0), new ScheduledTask(0, 4, 0), new ScheduledTask(4, 10, 5), new ScheduledTask(43, 45, 0), new ScheduledTask(0, 9, 3), new ScheduledTask(0, 8, 4), new ScheduledTask(45, 47, 0), new ScheduledTask(4, 9, 0), new ScheduledTask(9, 13, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(13, 19, 0), new ScheduledTask(27, 36, 0), new ScheduledTask(0, 2, 5), new ScheduledTask(52, 57, 0)};
        int[] expectedProcessorEndTimes = new int[]{57, 10, 18, 9, 8, 16};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_9dot98_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_9.98_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 9;
        int expectedScheduleEndTime = 60;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 4), new ScheduledTask(0, 6, 5), new ScheduledTask(0, 4, 7), new ScheduledTask(24, 34, 0), new ScheduledTask(53, 56, 0), new ScheduledTask(37, 43, 0), new ScheduledTask(0, 8, 3), new ScheduledTask(12, 18, 0), new ScheduledTask(0, 9, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 2, 8), new ScheduledTask(0, 6, 6), new ScheduledTask(9, 12, 0), new ScheduledTask(51, 53, 0), new ScheduledTask(34, 37, 0), new ScheduledTask(43, 51, 0), new ScheduledTask(9, 19, 2), new ScheduledTask(18, 20, 0), new ScheduledTask(20, 24, 0), new ScheduledTask(0, 9, 2), new ScheduledTask(56, 60, 0)};
        int[] expectedProcessorEndTimes = new int[]{60, 10, 19, 8, 7, 6, 6, 4, 2};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_9dot98_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_9.98_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 75;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(6, 13, 1), new ScheduledTask(0, 6, 1), new ScheduledTask(58, 62, 0), new ScheduledTask(24, 34, 0), new ScheduledTask(53, 56, 0), new ScheduledTask(37, 43, 0), new ScheduledTask(62, 70, 0), new ScheduledTask(12, 18, 0), new ScheduledTask(0, 9, 0), new ScheduledTask(38, 48, 1), new ScheduledTask(56, 58, 0), new ScheduledTask(32, 38, 1), new ScheduledTask(9, 12, 0), new ScheduledTask(51, 53, 0), new ScheduledTask(34, 37, 0), new ScheduledTask(43, 51, 0), new ScheduledTask(22, 32, 1), new ScheduledTask(18, 20, 0), new ScheduledTask(20, 24, 0), new ScheduledTask(13, 22, 1), new ScheduledTask(71, 75, 0)};
        int[] expectedProcessorEndTimes = new int[]{75, 48};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_9dot98_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_9.98_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 60;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(2, 9, 3), new ScheduledTask(0, 6, 1), new ScheduledTask(9, 13, 3), new ScheduledTask(24, 34, 0), new ScheduledTask(53, 56, 0), new ScheduledTask(37, 43, 0), new ScheduledTask(13, 21, 3), new ScheduledTask(12, 18, 0), new ScheduledTask(0, 9, 0), new ScheduledTask(16, 26, 1), new ScheduledTask(0, 2, 3), new ScheduledTask(21, 27, 3), new ScheduledTask(9, 12, 0), new ScheduledTask(51, 53, 0), new ScheduledTask(34, 37, 0), new ScheduledTask(43, 51, 0), new ScheduledTask(6, 16, 1), new ScheduledTask(18, 20, 0), new ScheduledTask(20, 24, 0), new ScheduledTask(0, 9, 2), new ScheduledTask(56, 60, 0)};
        int[] expectedProcessorEndTimes = new int[]{60, 26, 9, 27};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_9dot98_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_9.98_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 60;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 4), new ScheduledTask(0, 6, 5), new ScheduledTask(2, 6, 7), new ScheduledTask(24, 34, 0), new ScheduledTask(53, 56, 0), new ScheduledTask(37, 43, 0), new ScheduledTask(0, 8, 3), new ScheduledTask(12, 18, 0), new ScheduledTask(0, 9, 0), new ScheduledTask(10, 20, 1), new ScheduledTask(0, 2, 7), new ScheduledTask(0, 6, 6), new ScheduledTask(9, 12, 0), new ScheduledTask(51, 53, 0), new ScheduledTask(34, 37, 0), new ScheduledTask(43, 51, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(18, 20, 0), new ScheduledTask(20, 24, 0), new ScheduledTask(0, 9, 2), new ScheduledTask(56, 60, 0)};
        int[] expectedProcessorEndTimes = new int[]{60, 20, 9, 8, 7, 6, 6, 6};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_9dot99_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_9.99_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(7600, 7608, 0), new ScheduledTask(1300, 1305, 0), new ScheduledTask(0, 5, 3), new ScheduledTask(0, 4, 1), new ScheduledTask(1800, 1803, 0), new ScheduledTask(2100, 2106, 0), new ScheduledTask(2400, 2406, 1), new ScheduledTask(2700, 2708, 0), new ScheduledTask(1000, 1003, 0), new ScheduledTask(0, 10, 0), new ScheduledTask(5400, 5407, 0), new ScheduledTask(3500, 3504, 0), new ScheduledTask(3900, 3907, 0), new ScheduledTask(0, 4, 2), new ScheduledTask(6100, 6107, 0), new ScheduledTask(2400, 2406, 2), new ScheduledTask(6800, 6808, 0), new ScheduledTask(3000, 3006, 3), new ScheduledTask(4600, 4608, 0), new ScheduledTask(8400, 8410, 0), new ScheduledTask(9400, 9410, 0)};
        int[] expectedProcessorEndTimes = new int[]{9410, 2406, 2406, 3006};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_9dot99_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_9.99_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 7800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(2400, 2408, 2), new ScheduledTask(1300, 1305, 0), new ScheduledTask(1400, 1405, 2), new ScheduledTask(0, 4, 1), new ScheduledTask(1800, 1803, 0), new ScheduledTask(2100, 2106, 0), new ScheduledTask(800, 806, 1), new ScheduledTask(2700, 2708, 0), new ScheduledTask(1000, 1003, 0), new ScheduledTask(0, 10, 0), new ScheduledTask(5800, 5807, 0), new ScheduledTask(3500, 3504, 0), new ScheduledTask(4300, 4307, 0), new ScheduledTask(3900, 3904, 0), new ScheduledTask(0, 7, 2), new ScheduledTask(2800, 2806, 3), new ScheduledTask(0, 8, 3), new ScheduledTask(1600, 1606, 3), new ScheduledTask(5000, 5008, 0), new ScheduledTask(2000, 2010, 1), new ScheduledTask(6800, 6810, 0)};
        int[] expectedProcessorEndTimes = new int[]{6810, 2010, 2408, 2806};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_9dot99_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_9.99_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 7440;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1600, 1608, 3), new ScheduledTask(1300, 1305, 0), new ScheduledTask(1050, 1055, 2), new ScheduledTask(840, 844, 1), new ScheduledTask(1800, 1803, 0), new ScheduledTask(2100, 2106, 0), new ScheduledTask(1320, 1326, 1), new ScheduledTask(2700, 2708, 0), new ScheduledTask(1000, 1003, 0), new ScheduledTask(0, 10, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(3500, 3504, 0), new ScheduledTask(4300, 4307, 0), new ScheduledTask(3900, 3904, 0), new ScheduledTask(0, 7, 2), new ScheduledTask(2700, 2706, 2), new ScheduledTask(0, 8, 3), new ScheduledTask(1800, 1806, 2), new ScheduledTask(5000, 5008, 0), new ScheduledTask(2040, 2050, 1), new ScheduledTask(6440, 6450, 0)};
        int[] expectedProcessorEndTimes = new int[]{6450, 2050, 2706, 1608};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_9dot99_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_9.99_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 87;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(31, 39, 1), new ScheduledTask(13, 18, 0), new ScheduledTask(8, 13, 1), new ScheduledTask(4, 8, 1), new ScheduledTask(18, 21, 0), new ScheduledTask(21, 27, 0), new ScheduledTask(25, 31, 1), new ScheduledTask(27, 35, 0), new ScheduledTask(10, 13, 0), new ScheduledTask(0, 10, 0), new ScheduledTask(54, 61, 0), new ScheduledTask(35, 39, 0), new ScheduledTask(39, 46, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(61, 68, 0), new ScheduledTask(19, 25, 1), new ScheduledTask(68, 76, 0), new ScheduledTask(13, 19, 1), new ScheduledTask(46, 54, 0), new ScheduledTask(39, 49, 1), new ScheduledTask(77, 87, 0)};
        int[] expectedProcessorEndTimes = new int[]{87, 49};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_9dot99_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_9.99_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(9, 17, 2), new ScheduledTask(13, 18, 0), new ScheduledTask(4, 9, 2), new ScheduledTask(0, 4, 2), new ScheduledTask(18, 21, 0), new ScheduledTask(21, 27, 0), new ScheduledTask(26, 32, 3), new ScheduledTask(27, 35, 0), new ScheduledTask(10, 13, 0), new ScheduledTask(0, 10, 0), new ScheduledTask(0, 7, 3), new ScheduledTask(35, 39, 0), new ScheduledTask(43, 50, 0), new ScheduledTask(39, 43, 0), new ScheduledTask(7, 14, 3), new ScheduledTask(20, 26, 3), new ScheduledTask(0, 8, 1), new ScheduledTask(14, 20, 3), new ScheduledTask(50, 58, 0), new ScheduledTask(8, 18, 1), new ScheduledTask(63, 73, 0)};
        int[] expectedProcessorEndTimes = new int[]{73, 18, 17, 32};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_9dot99_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_9.99_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(8, 16, 2), new ScheduledTask(13, 18, 0), new ScheduledTask(4, 9, 5), new ScheduledTask(0, 4, 5), new ScheduledTask(18, 21, 0), new ScheduledTask(21, 27, 0), new ScheduledTask(21, 27, 5), new ScheduledTask(27, 35, 0), new ScheduledTask(10, 13, 0), new ScheduledTask(0, 10, 0), new ScheduledTask(0, 7, 3), new ScheduledTask(35, 39, 0), new ScheduledTask(43, 50, 0), new ScheduledTask(39, 43, 0), new ScheduledTask(0, 7, 4), new ScheduledTask(15, 21, 5), new ScheduledTask(0, 8, 2), new ScheduledTask(9, 15, 5), new ScheduledTask(50, 58, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(63, 73, 0)};
        int[] expectedProcessorEndTimes = new int[]{73, 10, 16, 7, 7, 27};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_9dot99_WeightType_Random2_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_9.99_WeightType_Random#2_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(4400, 4409, 0), new ScheduledTask(1200, 1208, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(2400, 2407, 3), new ScheduledTask(8300, 8310, 0), new ScheduledTask(6000, 6002, 2), new ScheduledTask(700, 705, 0), new ScheduledTask(3600, 3608, 0), new ScheduledTask(5300, 5303, 0), new ScheduledTask(7500, 7508, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(2000, 2009, 0), new ScheduledTask(0, 4, 3), new ScheduledTask(0, 2, 2), new ScheduledTask(5600, 5605, 0), new ScheduledTask(2900, 2907, 0), new ScheduledTask(9300, 9306, 0), new ScheduledTask(6800, 6807, 0), new ScheduledTask(1200, 1208, 2), new ScheduledTask(6100, 6107, 0), new ScheduledTask(9900, 9906, 0)};
        int[] expectedProcessorEndTimes = new int[]{9906, 10, 6002, 2407};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_9dot99_WeightType_Random2_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_9.99_WeightType_Random#2_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(4600, 4609, 0), new ScheduledTask(1200, 1208, 0), new ScheduledTask(1400, 1410, 1), new ScheduledTask(3200, 3207, 3), new ScheduledTask(0, 10, 2), new ScheduledTask(3200, 3202, 2), new ScheduledTask(700, 705, 0), new ScheduledTask(3800, 3808, 0), new ScheduledTask(5500, 5503, 0), new ScheduledTask(0, 8, 3), new ScheduledTask(0, 7, 0), new ScheduledTask(2000, 2009, 0), new ScheduledTask(5800, 5804, 0), new ScheduledTask(2900, 2902, 0), new ScheduledTask(6200, 6205, 0), new ScheduledTask(3100, 3107, 0), new ScheduledTask(2000, 2006, 2), new ScheduledTask(6700, 6707, 0), new ScheduledTask(1600, 1608, 3), new ScheduledTask(0, 7, 1), new ScheduledTask(7400, 7406, 0)};
        int[] expectedProcessorEndTimes = new int[]{7406, 1410, 3202, 3207};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_9dot99_WeightType_Random2_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_9.99_WeightType_Random#2_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 7300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(4600, 4609, 0), new ScheduledTask(1200, 1208, 0), new ScheduledTask(1500, 1510, 2), new ScheduledTask(2800, 2807, 3), new ScheduledTask(0, 10, 2), new ScheduledTask(3000, 3002, 2), new ScheduledTask(700, 705, 0), new ScheduledTask(3800, 3808, 0), new ScheduledTask(5500, 5503, 0), new ScheduledTask(0, 8, 3), new ScheduledTask(0, 7, 0), new ScheduledTask(2000, 2009, 0), new ScheduledTask(5800, 5804, 0), new ScheduledTask(2900, 2902, 0), new ScheduledTask(6200, 6205, 0), new ScheduledTask(3100, 3107, 0), new ScheduledTask(1600, 1606, 3), new ScheduledTask(840, 847, 1), new ScheduledTask(1680, 1688, 1), new ScheduledTask(0, 7, 1), new ScheduledTask(6700, 6706, 0)};
        int[] expectedProcessorEndTimes = new int[]{6706, 1688, 3002, 2807};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_9dot99_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_9.99_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 86;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(46, 55, 0), new ScheduledTask(12, 20, 0), new ScheduledTask(33, 43, 1), new ScheduledTask(45, 52, 1), new ScheduledTask(62, 72, 0), new ScheduledTask(43, 45, 1), new ScheduledTask(7, 12, 0), new ScheduledTask(38, 46, 0), new ScheduledTask(55, 58, 0), new ScheduledTask(19, 27, 1), new ScheduledTask(0, 7, 0), new ScheduledTask(20, 29, 0), new ScheduledTask(58, 62, 0), new ScheduledTask(29, 31, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(31, 38, 0), new ScheduledTask(27, 33, 1), new ScheduledTask(12, 19, 1), new ScheduledTask(72, 80, 0), new ScheduledTask(5, 12, 1), new ScheduledTask(80, 86, 0)};
        int[] expectedProcessorEndTimes = new int[]{86, 52};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_9dot99_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_9.99_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(46, 55, 0), new ScheduledTask(12, 20, 0), new ScheduledTask(10, 20, 1), new ScheduledTask(30, 37, 3), new ScheduledTask(0, 10, 1), new ScheduledTask(28, 30, 3), new ScheduledTask(7, 12, 0), new ScheduledTask(38, 46, 0), new ScheduledTask(55, 58, 0), new ScheduledTask(0, 8, 2), new ScheduledTask(0, 7, 0), new ScheduledTask(20, 29, 0), new ScheduledTask(58, 62, 0), new ScheduledTask(29, 31, 0), new ScheduledTask(62, 67, 0), new ScheduledTask(31, 38, 0), new ScheduledTask(14, 20, 3), new ScheduledTask(7, 14, 3), new ScheduledTask(20, 28, 3), new ScheduledTask(0, 7, 3), new ScheduledTask(67, 73, 0)};
        int[] expectedProcessorEndTimes = new int[]{73, 20, 8, 37};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_9dot99_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_9.99_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(46, 55, 0), new ScheduledTask(12, 20, 0), new ScheduledTask(10, 20, 1), new ScheduledTask(0, 7, 4), new ScheduledTask(0, 10, 1), new ScheduledTask(20, 22, 5), new ScheduledTask(7, 12, 0), new ScheduledTask(38, 46, 0), new ScheduledTask(55, 58, 0), new ScheduledTask(0, 8, 2), new ScheduledTask(0, 7, 0), new ScheduledTask(20, 29, 0), new ScheduledTask(58, 62, 0), new ScheduledTask(29, 31, 0), new ScheduledTask(62, 67, 0), new ScheduledTask(31, 38, 0), new ScheduledTask(14, 20, 5), new ScheduledTask(7, 14, 5), new ScheduledTask(0, 8, 3), new ScheduledTask(0, 7, 5), new ScheduledTask(67, 73, 0)};
        int[] expectedProcessorEndTimes = new int[]{73, 20, 8, 8, 7, 22};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_9dot99_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_9.99_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1200, 1206, 2), new ScheduledTask(6000, 6007, 0), new ScheduledTask(2700, 2708, 0), new ScheduledTask(0, 4, 0), new ScheduledTask(7600, 7608, 0), new ScheduledTask(4500, 4510, 0), new ScheduledTask(4200, 4205, 3), new ScheduledTask(6700, 6709, 0), new ScheduledTask(1800, 1804, 3), new ScheduledTask(0, 3, 3), new ScheduledTask(0, 8, 1), new ScheduledTask(5500, 5505, 0), new ScheduledTask(1900, 1908, 0), new ScheduledTask(1000, 1009, 0), new ScheduledTask(3500, 3510, 0), new ScheduledTask(4800, 4804, 1), new ScheduledTask(4800, 4803, 2), new ScheduledTask(400, 406, 0), new ScheduledTask(8400, 8410, 0), new ScheduledTask(0, 2, 2), new ScheduledTask(9400, 9404, 0)};
        int[] expectedProcessorEndTimes = new int[]{9404, 4804, 4803, 4205};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_9dot99_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_9.99_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1800, 1806, 3), new ScheduledTask(6000, 6007, 0), new ScheduledTask(2700, 2708, 0), new ScheduledTask(0, 4, 0), new ScheduledTask(7600, 7608, 0), new ScheduledTask(4500, 4510, 0), new ScheduledTask(2000, 2005, 1), new ScheduledTask(6700, 6709, 0), new ScheduledTask(1000, 1004, 3), new ScheduledTask(0, 3, 3), new ScheduledTask(0, 8, 2), new ScheduledTask(5500, 5505, 0), new ScheduledTask(1900, 1908, 0), new ScheduledTask(1000, 1009, 0), new ScheduledTask(3500, 3510, 0), new ScheduledTask(3600, 3604, 3), new ScheduledTask(3000, 3003, 3), new ScheduledTask(400, 406, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(600, 602, 3), new ScheduledTask(8400, 8404, 0)};
        int[] expectedProcessorEndTimes = new int[]{8404, 2005, 8, 3604};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_9dot99_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_9.99_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8460;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(3000, 3006, 3), new ScheduledTask(6000, 6007, 0), new ScheduledTask(2700, 2708, 0), new ScheduledTask(0, 4, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(4500, 4510, 0), new ScheduledTask(5000, 5005, 3), new ScheduledTask(6700, 6709, 0), new ScheduledTask(600, 604, 3), new ScheduledTask(0, 3, 3), new ScheduledTask(1400, 1408, 3), new ScheduledTask(5500, 5505, 0), new ScheduledTask(1900, 1908, 0), new ScheduledTask(1000, 1009, 0), new ScheduledTask(3500, 3510, 0), new ScheduledTask(4200, 4204, 3), new ScheduledTask(1800, 1803, 2), new ScheduledTask(400, 406, 0), new ScheduledTask(0, 10, 2), new ScheduledTask(1500, 1502, 2), new ScheduledTask(8060, 8064, 0)};
        int[] expectedProcessorEndTimes = new int[]{8064, 8, 1803, 5005};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 83;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(32, 38, 1), new ScheduledTask(60, 67, 0), new ScheduledTask(27, 35, 0), new ScheduledTask(0, 4, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(45, 55, 0), new ScheduledTask(45, 50, 1), new ScheduledTask(67, 76, 0), new ScheduledTask(20, 24, 1), new ScheduledTask(76, 79, 0), new ScheduledTask(24, 32, 1), new ScheduledTask(55, 60, 0), new ScheduledTask(19, 27, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(35, 45, 0), new ScheduledTask(41, 45, 1), new ScheduledTask(38, 41, 1), new ScheduledTask(4, 10, 0), new ScheduledTask(8, 18, 1), new ScheduledTask(18, 20, 1), new ScheduledTask(79, 83, 0)};
        int[] expectedProcessorEndTimes = new int[]{83, 50};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 83;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(9, 15, 3), new ScheduledTask(60, 67, 0), new ScheduledTask(27, 35, 0), new ScheduledTask(0, 4, 0), new ScheduledTask(0, 8, 2), new ScheduledTask(45, 55, 0), new ScheduledTask(22, 27, 3), new ScheduledTask(67, 76, 0), new ScheduledTask(5, 9, 3), new ScheduledTask(0, 3, 3), new ScheduledTask(10, 18, 1), new ScheduledTask(55, 60, 0), new ScheduledTask(19, 27, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(35, 45, 0), new ScheduledTask(18, 22, 3), new ScheduledTask(15, 18, 3), new ScheduledTask(4, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(3, 5, 3), new ScheduledTask(79, 83, 0)};
        int[] expectedProcessorEndTimes = new int[]{83, 18, 8, 27};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_21_CCR_9dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Join_Nodes_21_CCR_9.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 83;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 2), new ScheduledTask(60, 67, 0), new ScheduledTask(27, 35, 0), new ScheduledTask(0, 4, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(45, 55, 0), new ScheduledTask(0, 5, 3), new ScheduledTask(67, 76, 0), new ScheduledTask(0, 4, 4), new ScheduledTask(0, 3, 5), new ScheduledTask(18, 26, 1), new ScheduledTask(55, 60, 0), new ScheduledTask(19, 27, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(35, 45, 0), new ScheduledTask(8, 12, 5), new ScheduledTask(5, 8, 5), new ScheduledTask(4, 10, 0), new ScheduledTask(8, 18, 1), new ScheduledTask(3, 5, 5), new ScheduledTask(79, 83, 0)};
        int[] expectedProcessorEndTimes = new int[]{83, 26, 6, 5, 4, 12};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 68200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 43, 0), new ScheduledTask(4300, 4385, 0), new ScheduledTask(31500, 31577, 0), new ScheduledTask(4700, 4777, 1), new ScheduledTask(12800, 12851, 0), new ScheduledTask(5200, 5243, 2), new ScheduledTask(47700, 47785, 0), new ScheduledTask(60500, 60577, 0), new ScheduledTask(23000, 23068, 0), new ScheduledTask(13500, 13526, 3), new ScheduledTask(42600, 42651, 0), new ScheduledTask(56200, 56243, 0), new ScheduledTask(31400, 31443, 3), new ScheduledTask(31000, 31043, 2), new ScheduledTask(39200, 39234, 0), new ScheduledTask(19600, 19634, 0), new ScheduledTask(50900, 50926, 1), new ScheduledTask(57200, 57217, 3), new ScheduledTask(56800, 56817, 2), new ScheduledTask(17900, 17917, 0), new ScheduledTask(29800, 29817, 0)};
        int[] expectedProcessorEndTimes = new int[]{60577, 50926, 56817, 57217};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 43900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 43, 0), new ScheduledTask(4300, 4385, 0), new ScheduledTask(12800, 12877, 0), new ScheduledTask(4700, 4777, 1), new ScheduledTask(13300, 13351, 2), new ScheduledTask(5200, 5243, 3), new ScheduledTask(35100, 35185, 0), new ScheduledTask(27600, 27677, 3), new ScheduledTask(30300, 30368, 2), new ScheduledTask(22400, 22426, 3), new ScheduledTask(33700, 33751, 1), new ScheduledTask(26500, 26543, 0), new ScheduledTask(13800, 13843, 3), new ScheduledTask(20500, 20543, 0), new ScheduledTask(23500, 23534, 2), new ScheduledTask(26900, 26934, 1), new ScheduledTask(32500, 32526, 0), new ScheduledTask(23500, 23517, 1), new ScheduledTask(20100, 20117, 1), new ScheduledTask(24800, 24817, 0), new ScheduledTask(30800, 30817, 0)};
        int[] expectedProcessorEndTimes = new int[]{35185, 33751, 30368, 27677};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 36650;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 43, 0), new ScheduledTask(4700, 4785, 1), new ScheduledTask(15100, 15177, 0), new ScheduledTask(4700, 4777, 2), new ScheduledTask(16250, 16301, 2), new ScheduledTask(4300, 4343, 0), new ScheduledTask(23900, 23985, 2), new ScheduledTask(21000, 21077, 3), new ScheduledTask(28340, 28408, 1), new ScheduledTask(14900, 14926, 1), new ScheduledTask(31300, 31351, 0), new ScheduledTask(21140, 21183, 1), new ScheduledTask(9000, 9043, 3), new ScheduledTask(10300, 10343, 0), new ScheduledTask(27900, 27934, 0), new ScheduledTask(24500, 24534, 0), new ScheduledTask(18020, 18046, 1), new ScheduledTask(17600, 17617, 3), new ScheduledTask(8600, 8617, 0), new ScheduledTask(26300, 26317, 1), new ScheduledTask(22800, 22817, 0)};
        int[] expectedProcessorEndTimes = new int[]{31351, 28408, 23985, 21077};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 511;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 43, 0), new ScheduledTask(103, 188, 0), new ScheduledTask(305, 382, 1), new ScheduledTask(47, 124, 1), new ScheduledTask(205, 256, 0), new ScheduledTask(43, 86, 0), new ScheduledTask(426, 511, 0), new ScheduledTask(433, 510, 1), new ScheduledTask(324, 392, 0), new ScheduledTask(253, 279, 1), new ScheduledTask(382, 433, 1), new ScheduledTask(210, 253, 1), new ScheduledTask(167, 210, 1), new ScheduledTask(124, 167, 1), new ScheduledTask(392, 426, 0), new ScheduledTask(273, 307, 0), new ScheduledTask(279, 305, 1), new ScheduledTask(188, 205, 0), new ScheduledTask(86, 103, 0), new ScheduledTask(256, 273, 0), new ScheduledTask(307, 324, 0)};
        int[] expectedProcessorEndTimes = new int[]{511, 510};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 294;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 43, 0), new ScheduledTask(47, 132, 1), new ScheduledTask(132, 209, 1), new ScheduledTask(47, 124, 2), new ScheduledTask(137, 188, 3), new ScheduledTask(43, 86, 0), new ScheduledTask(209, 294, 1), new ScheduledTask(124, 201, 2), new ScheduledTask(188, 256, 3), new ScheduledTask(235, 261, 2), new ScheduledTask(223, 274, 0), new ScheduledTask(163, 206, 0), new ScheduledTask(90, 133, 3), new ScheduledTask(103, 146, 0), new ScheduledTask(256, 290, 3), new ScheduledTask(201, 235, 2), new ScheduledTask(261, 287, 2), new ScheduledTask(146, 163, 0), new ScheduledTask(86, 103, 0), new ScheduledTask(206, 223, 0), new ScheduledTask(274, 291, 0)};
        int[] expectedProcessorEndTimes = new int[]{291, 294, 287, 290};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 290;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 43, 0), new ScheduledTask(43, 128, 0), new ScheduledTask(128, 205, 0), new ScheduledTask(47, 124, 1), new ScheduledTask(133, 184, 1), new ScheduledTask(52, 95, 2), new ScheduledTask(205, 290, 0), new ScheduledTask(126, 203, 2), new ScheduledTask(184, 252, 1), new ScheduledTask(135, 161, 3), new ScheduledTask(210, 261, 2), new ScheduledTask(127, 170, 4), new ScheduledTask(99, 142, 5), new ScheduledTask(142, 185, 5), new ScheduledTask(215, 249, 3), new ScheduledTask(189, 223, 4), new ScheduledTask(185, 211, 5), new ScheduledTask(211, 228, 5), new ScheduledTask(223, 240, 4), new ScheduledTask(228, 245, 5), new ScheduledTask(240, 257, 4)};
        int[] expectedProcessorEndTimes = new int[]{290, 252, 261, 249, 257, 245};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random2_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#2_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 83100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 29, 0), new ScheduledTask(2900, 2948, 0), new ScheduledTask(3700, 3768, 1), new ScheduledTask(8500, 8568, 2), new ScheduledTask(27000, 27097, 0), new ScheduledTask(7700, 7748, 0), new ScheduledTask(73400, 73497, 0), new ScheduledTask(63700, 63797, 0), new ScheduledTask(8400, 8419, 3), new ScheduledTask(45400, 45477, 0), new ScheduledTask(19800, 19858, 3), new ScheduledTask(44500, 44558, 1), new ScheduledTask(57900, 57958, 0), new ScheduledTask(16400, 16458, 0), new ScheduledTask(49300, 49348, 2), new ScheduledTask(40600, 40648, 0), new ScheduledTask(22200, 22248, 0), new ScheduledTask(53100, 53148, 0), new ScheduledTask(54600, 54639, 3), new ScheduledTask(36700, 36739, 0), new ScheduledTask(12500, 12539, 0)};
        int[] expectedProcessorEndTimes = new int[]{73497, 44558, 49348, 54639};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random2_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#2_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 51000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 29, 0), new ScheduledTask(2900, 2948, 0), new ScheduledTask(3700, 3768, 1), new ScheduledTask(17300, 17368, 1), new ScheduledTask(3400, 3497, 2), new ScheduledTask(7700, 7748, 0), new ScheduledTask(31600, 31697, 3), new ScheduledTask(31300, 31397, 2), new ScheduledTask(8400, 8419, 3), new ScheduledTask(23100, 23177, 0), new ScheduledTask(12200, 12258, 3), new ScheduledTask(38700, 38758, 1), new ScheduledTask(45200, 45258, 0), new ScheduledTask(17300, 17358, 0), new ScheduledTask(40400, 40448, 0), new ScheduledTask(30800, 30848, 0), new ScheduledTask(12500, 12548, 0), new ScheduledTask(35600, 35648, 0), new ScheduledTask(23800, 23839, 3), new ScheduledTask(22800, 22839, 2), new ScheduledTask(30900, 30939, 1)};
        int[] expectedProcessorEndTimes = new int[]{45258, 38758, 31397, 31697};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random2_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#2_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 42850;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 29, 0), new ScheduledTask(2900, 2948, 0), new ScheduledTask(3700, 3768, 2), new ScheduledTask(17600, 17668, 3), new ScheduledTask(3400, 3497, 1), new ScheduledTask(8000, 8048, 3), new ScheduledTask(13900, 13997, 2), new ScheduledTask(32900, 32997, 0), new ScheduledTask(7700, 7719, 0), new ScheduledTask(26560, 26637, 1), new ScheduledTask(31200, 31258, 3), new ScheduledTask(9600, 9658, 0), new ScheduledTask(35800, 35858, 1), new ScheduledTask(27100, 27158, 0), new ScheduledTask(28450, 28498, 2), new ScheduledTask(20800, 20848, 1), new ScheduledTask(15040, 15088, 1), new ScheduledTask(35650, 35698, 2), new ScheduledTask(23200, 23239, 0), new ScheduledTask(15400, 15439, 0), new ScheduledTask(19300, 19339, 0)};
        int[] expectedProcessorEndTimes = new int[]{32997, 35858, 35698, 31258};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 612;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 29, 0), new ScheduledTask(179, 227, 1), new ScheduledTask(29, 97, 0), new ScheduledTask(272, 340, 0), new ScheduledTask(34, 131, 1), new ScheduledTask(419, 467, 1), new ScheduledTask(175, 272, 0), new ScheduledTask(515, 612, 1), new ScheduledTask(352, 371, 1), new ScheduledTask(275, 352, 1), new ScheduledTask(456, 514, 0), new ScheduledTask(398, 456, 0), new ScheduledTask(340, 398, 0), new ScheduledTask(553, 611, 0), new ScheduledTask(227, 275, 1), new ScheduledTask(131, 179, 1), new ScheduledTask(467, 515, 1), new ScheduledTask(371, 419, 1), new ScheduledTask(97, 136, 0), new ScheduledTask(136, 175, 0), new ScheduledTask(514, 553, 0)};
        int[] expectedProcessorEndTimes = new int[]{611, 612};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 337;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 29, 0), new ScheduledTask(29, 77, 0), new ScheduledTask(37, 105, 1), new ScheduledTask(125, 193, 0), new ScheduledTask(34, 131, 2), new ScheduledTask(77, 125, 0), new ScheduledTask(239, 336, 3), new ScheduledTask(237, 334, 2), new ScheduledTask(84, 103, 3), new ScheduledTask(105, 182, 1), new ScheduledTask(103, 161, 3), new ScheduledTask(179, 237, 2), new ScheduledTask(279, 337, 1), new ScheduledTask(221, 279, 1), new ScheduledTask(131, 179, 2), new ScheduledTask(289, 337, 0), new ScheduledTask(241, 289, 0), new ScheduledTask(193, 241, 0), new ScheduledTask(200, 239, 3), new ScheduledTask(161, 200, 3), new ScheduledTask(182, 221, 1)};
        int[] expectedProcessorEndTimes = new int[]{337, 337, 334, 336};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 259;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 29, 0), new ScheduledTask(29, 77, 0), new ScheduledTask(37, 105, 1), new ScheduledTask(85, 153, 2), new ScheduledTask(34, 131, 3), new ScheduledTask(80, 128, 4), new ScheduledTask(158, 255, 5), new ScheduledTask(153, 250, 2), new ScheduledTask(77, 96, 0), new ScheduledTask(128, 205, 4), new ScheduledTask(100, 158, 5), new ScheduledTask(96, 154, 0), new ScheduledTask(201, 259, 1), new ScheduledTask(193, 251, 0), new ScheduledTask(205, 253, 4), new ScheduledTask(153, 201, 1), new ScheduledTask(105, 153, 1), new ScheduledTask(209, 257, 3), new ScheduledTask(170, 209, 3), new ScheduledTask(131, 170, 3), new ScheduledTask(154, 193, 0)};
        int[] expectedProcessorEndTimes = new int[]{251, 259, 250, 257, 253, 255};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random3_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#3_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 86000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 40, 0), new ScheduledTask(4000, 4070, 0), new ScheduledTask(11000, 11100, 0), new ScheduledTask(5000, 5080, 1), new ScheduledTask(11800, 11870, 2), new ScheduledTask(28700, 28770, 3), new ScheduledTask(44000, 44100, 0), new ScheduledTask(4700, 4740, 3), new ScheduledTask(71000, 71090, 0), new ScheduledTask(24000, 24090, 0), new ScheduledTask(63000, 63080, 0), new ScheduledTask(57000, 57060, 0), new ScheduledTask(80000, 80060, 0), new ScheduledTask(39000, 39050, 0), new ScheduledTask(53800, 53850, 2), new ScheduledTask(54200, 54250, 1), new ScheduledTask(35000, 35040, 0), new ScheduledTask(54000, 54030, 0), new ScheduledTask(21000, 21030, 0), new ScheduledTask(33000, 33020, 0), new ScheduledTask(70700, 70720, 3)};
        int[] expectedProcessorEndTimes = new int[]{80060, 54250, 53850, 70720};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random3_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#3_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 54400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 40, 0), new ScheduledTask(8000, 8070, 0), new ScheduledTask(15000, 15100, 0), new ScheduledTask(5000, 5080, 1), new ScheduledTask(16200, 16270, 2), new ScheduledTask(22400, 22470, 3), new ScheduledTask(30200, 30300, 2), new ScheduledTask(4000, 4040, 0), new ScheduledTask(36400, 36490, 3), new ScheduledTask(28000, 28090, 0), new ScheduledTask(37000, 37080, 1), new ScheduledTask(48000, 48060, 0), new ScheduledTask(42000, 42060, 0), new ScheduledTask(8400, 8450, 3), new ScheduledTask(27000, 27050, 1), new ScheduledTask(37000, 37050, 0), new ScheduledTask(8200, 8240, 2), new ScheduledTask(21000, 21030, 1), new ScheduledTask(25000, 25030, 0), new ScheduledTask(18400, 18420, 3), new ScheduledTask(50200, 50220, 2)};
        int[] expectedProcessorEndTimes = new int[]{48060, 37080, 50220, 36490};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random3_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#3_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 45700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 40, 0), new ScheduledTask(5000, 5070, 2), new ScheduledTask(17000, 17100, 0), new ScheduledTask(4000, 4080, 0), new ScheduledTask(17700, 17770, 3), new ScheduledTask(15500, 15570, 2), new ScheduledTask(30500, 30600, 2), new ScheduledTask(4700, 4740, 1), new ScheduledTask(34700, 34790, 1), new ScheduledTask(30000, 30090, 0), new ScheduledTask(17900, 17980, 1), new ScheduledTask(39000, 39060, 0), new ScheduledTask(27500, 27560, 1), new ScheduledTask(11900, 11950, 1), new ScheduledTask(12000, 12050, 0), new ScheduledTask(35700, 35750, 3), new ScheduledTask(9700, 9740, 3), new ScheduledTask(26000, 26030, 2), new ScheduledTask(27000, 27030, 0), new ScheduledTask(9500, 9520, 1), new ScheduledTask(31700, 31720, 3)};
        int[] expectedProcessorEndTimes = new int[]{39060, 34790, 30600, 35750};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 647;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 40, 0), new ScheduledTask(40, 110, 0), new ScheduledTask(267, 367, 1), new ScheduledTask(107, 187, 1), new ScheduledTask(370, 440, 0), new ScheduledTask(280, 350, 0), new ScheduledTask(547, 647, 1), new ScheduledTask(47, 87, 1), new ScheduledTask(457, 547, 1), new ScheduledTask(367, 457, 1), new ScheduledTask(187, 267, 1), new ScheduledTask(580, 640, 0), new ScheduledTask(520, 580, 0), new ScheduledTask(150, 200, 0), new ScheduledTask(230, 280, 0), new ScheduledTask(470, 520, 0), new ScheduledTask(110, 150, 0), new ScheduledTask(200, 230, 0), new ScheduledTask(440, 470, 0), new ScheduledTask(87, 107, 1), new ScheduledTask(350, 370, 0)};
        int[] expectedProcessorEndTimes = new int[]{640, 647};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 360;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 40, 0), new ScheduledTask(40, 110, 0), new ScheduledTask(110, 210, 0), new ScheduledTask(50, 130, 1), new ScheduledTask(118, 188, 2), new ScheduledTask(129, 199, 3), new ScheduledTask(259, 359, 3), new ScheduledTask(47, 87, 2), new ScheduledTask(268, 358, 2), new ScheduledTask(270, 360, 1), new ScheduledTask(188, 268, 2), new ScheduledTask(199, 259, 3), new ScheduledTask(210, 270, 1), new ScheduledTask(160, 210, 1), new ScheduledTask(310, 360, 0), new ScheduledTask(260, 310, 0), new ScheduledTask(89, 129, 3), new ScheduledTask(130, 160, 1), new ScheduledTask(230, 260, 0), new ScheduledTask(87, 107, 2), new ScheduledTask(210, 230, 0)};
        int[] expectedProcessorEndTimes = new int[]{360, 360, 358, 359};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 310;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 40, 0), new ScheduledTask(40, 110, 0), new ScheduledTask(110, 210, 0), new ScheduledTask(50, 130, 1), new ScheduledTask(130, 200, 1), new ScheduledTask(113, 183, 2), new ScheduledTask(210, 310, 0), new ScheduledTask(47, 87, 3), new ScheduledTask(214, 304, 4), new ScheduledTask(220, 310, 5), new ScheduledTask(140, 220, 5), new ScheduledTask(248, 308, 3), new ScheduledTask(188, 248, 3), new ScheduledTask(114, 164, 4), new ScheduledTask(164, 214, 4), new ScheduledTask(244, 294, 2), new ScheduledTask(89, 129, 5), new ScheduledTask(132, 162, 3), new ScheduledTask(214, 244, 2), new ScheduledTask(94, 114, 4), new ScheduledTask(183, 203, 2)};
        int[] expectedProcessorEndTimes = new int[]{310, 200, 294, 308, 304, 310};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random4_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#4_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 90400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 87, 0), new ScheduledTask(9100, 9119, 1), new ScheduledTask(40300, 40387, 0), new ScheduledTask(21000, 21039, 0), new ScheduledTask(8700, 8758, 0), new ScheduledTask(9500, 9519, 2), new ScheduledTask(20500, 20529, 1), new ScheduledTask(80800, 80896, 0), new ScheduledTask(71200, 71296, 0), new ScheduledTask(37900, 37987, 1), new ScheduledTask(62500, 62587, 0), new ScheduledTask(32600, 32677, 0), new ScheduledTask(54800, 54877, 0), new ScheduledTask(50100, 50167, 3), new ScheduledTask(49700, 49767, 2), new ScheduledTask(15300, 15358, 3), new ScheduledTask(14500, 14558, 0), new ScheduledTask(26800, 26858, 0), new ScheduledTask(49000, 49058, 0), new ScheduledTask(20900, 20948, 2), new ScheduledTask(24900, 24919, 0)};
        int[] expectedProcessorEndTimes = new int[]{80896, 37987, 49767, 50167};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random4_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#4_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 57700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 87, 0), new ScheduledTask(8700, 8719, 0), new ScheduledTask(10600, 10687, 0), new ScheduledTask(11100, 11139, 1), new ScheduledTask(9500, 9558, 2), new ScheduledTask(9500, 9519, 3), new ScheduledTask(30700, 30729, 3), new ScheduledTask(33700, 33796, 0), new ScheduledTask(38500, 38596, 2), new ScheduledTask(13300, 13387, 3), new ScheduledTask(21100, 21187, 2), new ScheduledTask(42100, 42177, 1), new ScheduledTask(50000, 50077, 0), new ScheduledTask(27000, 27067, 0), new ScheduledTask(43300, 43367, 0), new ScheduledTask(46100, 46158, 3), new ScheduledTask(30500, 30558, 1), new ScheduledTask(18900, 18958, 1), new ScheduledTask(21200, 21258, 0), new ScheduledTask(36500, 36548, 3), new ScheduledTask(19300, 19319, 0)};
        int[] expectedProcessorEndTimes = new int[]{50077, 42177, 38596, 46158};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random4_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#4_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 49820;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 87, 0), new ScheduledTask(9100, 9119, 2), new ScheduledTask(19300, 19387, 0), new ScheduledTask(11950, 11989, 2), new ScheduledTask(9500, 9558, 1), new ScheduledTask(8700, 8719, 0), new ScheduledTask(28400, 28429, 3), new ScheduledTask(35200, 35296, 2), new ScheduledTask(39600, 39696, 0), new ScheduledTask(11000, 11087, 3), new ScheduledTask(10600, 10687, 0), new ScheduledTask(24500, 24577, 1), new ScheduledTask(34200, 34277, 3), new ScheduledTask(33740, 33807, 1), new ScheduledTask(41780, 41847, 1), new ScheduledTask(26500, 26558, 2), new ScheduledTask(17800, 17858, 2), new ScheduledTask(33800, 33858, 0), new ScheduledTask(28000, 28058, 0), new ScheduledTask(16460, 16508, 1), new ScheduledTask(22220, 22239, 1)};
        int[] expectedProcessorEndTimes = new int[]{39696, 41847, 35296, 34277};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 692;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 87, 0), new ScheduledTask(91, 110, 1), new ScheduledTask(279, 366, 0), new ScheduledTask(535, 574, 1), new ScheduledTask(361, 419, 1), new ScheduledTask(87, 106, 0), new ScheduledTask(183, 212, 0), new ScheduledTask(596, 692, 0), new ScheduledTask(481, 577, 0), new ScheduledTask(110, 197, 1), new ScheduledTask(197, 284, 1), new ScheduledTask(106, 183, 0), new ScheduledTask(284, 361, 1), new ScheduledTask(366, 433, 0), new ScheduledTask(212, 279, 0), new ScheduledTask(632, 690, 1), new ScheduledTask(477, 535, 1), new ScheduledTask(574, 632, 1), new ScheduledTask(419, 477, 1), new ScheduledTask(433, 481, 0), new ScheduledTask(577, 596, 0)};
        int[] expectedProcessorEndTimes = new int[]{692, 690};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 399;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 87, 0), new ScheduledTask(91, 110, 1), new ScheduledTask(202, 289, 0), new ScheduledTask(110, 149, 1), new ScheduledTask(95, 153, 2), new ScheduledTask(87, 106, 0), new ScheduledTask(197, 226, 3), new ScheduledTask(303, 399, 3), new ScheduledTask(298, 394, 2), new ScheduledTask(110, 197, 3), new ScheduledTask(211, 298, 2), new ScheduledTask(106, 183, 0), new ScheduledTask(226, 303, 3), new ScheduledTask(332, 399, 1), new ScheduledTask(265, 332, 1), new ScheduledTask(153, 211, 2), new ScheduledTask(207, 265, 1), new ScheduledTask(149, 207, 1), new ScheduledTask(337, 395, 0), new ScheduledTask(289, 337, 0), new ScheduledTask(183, 202, 0)};
        int[] expectedProcessorEndTimes = new int[]{395, 399, 394, 399};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 307;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 87, 0), new ScheduledTask(91, 110, 1), new ScheduledTask(117, 204, 2), new ScheduledTask(115, 154, 0), new ScheduledTask(95, 153, 3), new ScheduledTask(87, 106, 0), new ScheduledTask(110, 139, 1), new ScheduledTask(211, 307, 3), new ScheduledTask(204, 300, 2), new ScheduledTask(110, 197, 4), new ScheduledTask(216, 303, 1), new ScheduledTask(113, 190, 5), new ScheduledTask(139, 216, 1), new ScheduledTask(240, 307, 0), new ScheduledTask(173, 240, 0), new ScheduledTask(248, 306, 5), new ScheduledTask(153, 211, 3), new ScheduledTask(190, 248, 5), new ScheduledTask(245, 303, 4), new ScheduledTask(197, 245, 4), new ScheduledTask(154, 173, 0)};
        int[] expectedProcessorEndTimes = new int[]{307, 303, 300, 307, 303, 306};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random5_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#5_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 81300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 39, 0), new ScheduledTask(7800, 7903, 0), new ScheduledTask(24500, 24564, 0), new ScheduledTask(4300, 4339, 1), new ScheduledTask(60600, 60729, 0), new ScheduledTask(18100, 18164, 0), new ScheduledTask(49000, 49116, 0), new ScheduledTask(32000, 32052, 2), new ScheduledTask(3900, 3939, 0), new ScheduledTask(40000, 40090, 0), new ScheduledTask(8200, 8252, 3), new ScheduledTask(46700, 46752, 1), new ScheduledTask(34800, 34852, 0), new ScheduledTask(76100, 76152, 0), new ScheduledTask(8600, 8639, 2), new ScheduledTask(55000, 55039, 3), new ScheduledTask(30900, 30939, 0), new ScheduledTask(39400, 39426, 3), new ScheduledTask(63200, 63226, 2), new ScheduledTask(31100, 31126, 1), new ScheduledTask(73500, 73526, 0)};
        int[] expectedProcessorEndTimes = new int[]{76152, 46752, 63226, 55039};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random5_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#5_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 51300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 39, 0), new ScheduledTask(3900, 4003, 0), new ScheduledTask(25900, 25964, 0), new ScheduledTask(4300, 4339, 1), new ScheduledTask(37500, 37629, 0), new ScheduledTask(22500, 22564, 2), new ScheduledTask(12100, 12216, 1), new ScheduledTask(22900, 22952, 3), new ScheduledTask(4300, 4339, 2), new ScheduledTask(33300, 33390, 3), new ScheduledTask(12500, 12552, 3), new ScheduledTask(12100, 12152, 2), new ScheduledTask(35300, 35352, 2), new ScheduledTask(35300, 35352, 1), new ScheduledTask(22000, 22039, 0), new ScheduledTask(18100, 18139, 0), new ScheduledTask(14200, 14239, 0), new ScheduledTask(45700, 45726, 2), new ScheduledTask(45700, 45726, 1), new ScheduledTask(32300, 32326, 0), new ScheduledTask(34900, 34926, 0)};
        int[] expectedProcessorEndTimes = new int[]{37629, 45726, 45726, 33390};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random5_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#5_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 43000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 39, 0), new ScheduledTask(3900, 4003, 0), new ScheduledTask(18100, 18164, 0), new ScheduledTask(4300, 4339, 2), new ScheduledTask(29700, 29829, 0), new ScheduledTask(16000, 16064, 2), new ScheduledTask(19780, 19896, 3), new ScheduledTask(19900, 19952, 1), new ScheduledTask(4300, 4339, 1), new ScheduledTask(29500, 29590, 2), new ScheduledTask(9380, 9432, 3), new ScheduledTask(8980, 9032, 1), new ScheduledTask(35500, 35552, 1), new ScheduledTask(29260, 29312, 1), new ScheduledTask(10150, 10189, 2), new ScheduledTask(15220, 15259, 1), new ScheduledTask(14200, 14239, 0), new ScheduledTask(25600, 25626, 2), new ScheduledTask(26140, 26166, 1), new ScheduledTask(24500, 24526, 0), new ScheduledTask(27100, 27126, 0)};
        int[] expectedProcessorEndTimes = new int[]{29829, 35552, 29590, 19896};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 605;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 39, 0), new ScheduledTask(39, 142, 0), new ScheduledTask(322, 386, 0), new ScheduledTask(43, 82, 1), new ScheduledTask(386, 515, 0), new ScheduledTask(258, 322, 0), new ScheduledTask(142, 258, 0), new ScheduledTask(472, 524, 1), new ScheduledTask(160, 199, 1), new ScheduledTask(515, 605, 0), new ScheduledTask(290, 342, 1), new ScheduledTask(238, 290, 1), new ScheduledTask(420, 472, 1), new ScheduledTask(550, 602, 1), new ScheduledTask(199, 238, 1), new ScheduledTask(121, 160, 1), new ScheduledTask(82, 121, 1), new ScheduledTask(368, 394, 1), new ScheduledTask(342, 368, 1), new ScheduledTask(394, 420, 1), new ScheduledTask(524, 550, 1)};
        int[] expectedProcessorEndTimes = new int[]{605, 602};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 340;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 39, 0), new ScheduledTask(39, 142, 0), new ScheduledTask(142, 206, 0), new ScheduledTask(43, 82, 1), new ScheduledTask(206, 335, 0), new ScheduledTask(166, 230, 2), new ScheduledTask(82, 198, 1), new ScheduledTask(173, 225, 3), new ScheduledTask(43, 82, 3), new ScheduledTask(250, 340, 1), new ScheduledTask(121, 173, 3), new ScheduledTask(198, 250, 1), new ScheduledTask(277, 329, 3), new ScheduledTask(225, 277, 3), new ScheduledTask(82, 121, 3), new ScheduledTask(127, 166, 2), new ScheduledTask(88, 127, 2), new ScheduledTask(308, 334, 2), new ScheduledTask(282, 308, 2), new ScheduledTask(256, 282, 2), new ScheduledTask(230, 256, 2)};
        int[] expectedProcessorEndTimes = new int[]{335, 340, 334, 329};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 335;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 39, 0), new ScheduledTask(39, 142, 0), new ScheduledTask(142, 206, 0), new ScheduledTask(43, 82, 1), new ScheduledTask(206, 335, 0), new ScheduledTask(147, 211, 1), new ScheduledTask(92, 208, 2), new ScheduledTask(146, 198, 3), new ScheduledTask(43, 82, 4), new ScheduledTask(216, 306, 1), new ScheduledTask(82, 134, 4), new ScheduledTask(87, 139, 5), new ScheduledTask(213, 265, 2), new ScheduledTask(198, 250, 3), new ScheduledTask(134, 173, 4), new ScheduledTask(139, 178, 5), new ScheduledTask(173, 212, 4), new ScheduledTask(218, 244, 4), new ScheduledTask(216, 242, 5), new ScheduledTask(242, 268, 5), new ScheduledTask(244, 270, 4)};
        int[] expectedProcessorEndTimes = new int[]{335, 306, 265, 250, 270, 268};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random6_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#6_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 73800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 54, 0), new ScheduledTask(7200, 7290, 0), new ScheduledTask(56700, 56781, 0), new ScheduledTask(37800, 37836, 0), new ScheduledTask(5400, 5418, 0), new ScheduledTask(6400, 6427, 1), new ScheduledTask(16200, 16227, 0), new ScheduledTask(22600, 22681, 1), new ScheduledTask(48600, 48681, 0), new ScheduledTask(7800, 7872, 2), new ScheduledTask(30300, 30372, 3), new ScheduledTask(41400, 41472, 0), new ScheduledTask(31500, 31563, 0), new ScheduledTask(18900, 18954, 0), new ScheduledTask(27000, 27045, 0), new ScheduledTask(64800, 64845, 0), new ScheduledTask(69300, 69345, 0), new ScheduledTask(51000, 51036, 2), new ScheduledTask(24300, 24327, 0), new ScheduledTask(8100, 8118, 3), new ScheduledTask(19500, 19518, 3)};
        int[] expectedProcessorEndTimes = new int[]{69345, 22681, 51036, 30372};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random6_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#6_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 47400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 54, 0), new ScheduledTask(5600, 5690, 1), new ScheduledTask(24000, 24081, 0), new ScheduledTask(23900, 23936, 2), new ScheduledTask(5600, 5618, 3), new ScheduledTask(5400, 5427, 0), new ScheduledTask(23600, 23627, 1), new ScheduledTask(12800, 12881, 3), new ScheduledTask(31100, 31181, 2), new ScheduledTask(15300, 15372, 0), new ScheduledTask(8500, 8572, 2), new ScheduledTask(32600, 32672, 1), new ScheduledTask(41100, 41163, 0), new ScheduledTask(29400, 29454, 3), new ScheduledTask(10800, 10845, 0), new ScheduledTask(36600, 36645, 0), new ScheduledTask(32100, 32145, 0), new ScheduledTask(40200, 40236, 3), new ScheduledTask(8100, 8127, 0), new ScheduledTask(9200, 9218, 3), new ScheduledTask(29000, 29018, 1)};
        int[] expectedProcessorEndTimes = new int[]{41163, 32672, 31181, 40236};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random6_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#6_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 40160;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 54, 0), new ScheduledTask(5400, 5490, 0), new ScheduledTask(16200, 16281, 0), new ScheduledTask(16400, 16436, 1), new ScheduledTask(5600, 5618, 1), new ScheduledTask(6400, 6427, 2), new ScheduledTask(24860, 24887, 3), new ScheduledTask(8660, 8741, 3), new ScheduledTask(21250, 21331, 2), new ScheduledTask(7760, 7832, 1), new ScheduledTask(10450, 10522, 2), new ScheduledTask(23960, 24032, 1), new ScheduledTask(32600, 32663, 1), new ScheduledTask(34200, 34254, 0), new ScheduledTask(30260, 30305, 3), new ScheduledTask(33400, 33445, 2), new ScheduledTask(27900, 27945, 0), new ScheduledTask(24300, 24336, 0), new ScheduledTask(20720, 20747, 1), new ScheduledTask(14400, 14418, 0), new ScheduledTask(32400, 32418, 0)};
        int[] expectedProcessorEndTimes = new int[]{34254, 32663, 33445, 30305};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 560;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 54, 0), new ScheduledTask(128, 218, 0), new ScheduledTask(218, 299, 0), new ScheduledTask(371, 407, 1), new ScheduledTask(56, 74, 1), new ScheduledTask(54, 81, 0), new ScheduledTask(344, 371, 1), new ScheduledTask(263, 344, 1), new ScheduledTask(407, 488, 1), new ScheduledTask(74, 146, 1), new ScheduledTask(191, 263, 1), new ScheduledTask(488, 560, 1), new ScheduledTask(497, 560, 0), new ScheduledTask(407, 461, 0), new ScheduledTask(146, 191, 1), new ScheduledTask(344, 389, 0), new ScheduledTask(299, 344, 0), new ScheduledTask(461, 497, 0), new ScheduledTask(101, 128, 0), new ScheduledTask(83, 101, 0), new ScheduledTask(389, 407, 0)};
        int[] expectedProcessorEndTimes = new int[]{560, 560};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 317;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 54, 0), new ScheduledTask(54, 144, 0), new ScheduledTask(144, 225, 0), new ScheduledTask(164, 200, 1), new ScheduledTask(56, 74, 2), new ScheduledTask(64, 91, 3), new ScheduledTask(164, 191, 2), new ScheduledTask(83, 164, 1), new ScheduledTask(235, 316, 3), new ScheduledTask(92, 164, 2), new ScheduledTask(163, 235, 3), new ScheduledTask(245, 317, 2), new ScheduledTask(254, 317, 1), new ScheduledTask(191, 245, 2), new ScheduledTask(118, 163, 3), new ScheduledTask(225, 270, 0), new ScheduledTask(270, 315, 0), new ScheduledTask(218, 254, 1), new ScheduledTask(91, 118, 3), new ScheduledTask(74, 92, 2), new ScheduledTask(200, 218, 1)};
        int[] expectedProcessorEndTimes = new int[]{315, 317, 317, 316};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 276;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 54, 0), new ScheduledTask(54, 144, 0), new ScheduledTask(144, 225, 0), new ScheduledTask(147, 183, 1), new ScheduledTask(56, 74, 2), new ScheduledTask(64, 91, 3), new ScheduledTask(173, 200, 4), new ScheduledTask(83, 164, 5), new ScheduledTask(191, 272, 5), new ScheduledTask(101, 173, 4), new ScheduledTask(136, 208, 3), new ScheduledTask(200, 272, 4), new ScheduledTask(208, 271, 3), new ScheduledTask(221, 275, 2), new ScheduledTask(91, 136, 3), new ScheduledTask(231, 276, 1), new ScheduledTask(225, 270, 0), new ScheduledTask(185, 221, 2), new ScheduledTask(164, 191, 5), new ScheduledTask(83, 101, 4), new ScheduledTask(206, 224, 1)};
        int[] expectedProcessorEndTimes = new int[]{270, 276, 275, 271, 272, 272};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random7_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#7_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 91200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 68, 0), new ScheduledTask(6800, 6868, 0), new ScheduledTask(7700, 7797, 1), new ScheduledTask(7300, 7368, 2), new ScheduledTask(34000, 34078, 0), new ScheduledTask(13600, 13668, 0), new ScheduledTask(14000, 14049, 3), new ScheduledTask(65000, 65097, 0), new ScheduledTask(82500, 82587, 0), new ScheduledTask(56300, 56387, 0), new ScheduledTask(47600, 47687, 0), new ScheduledTask(74700, 74778, 0), new ScheduledTask(43400, 43478, 3), new ScheduledTask(27200, 27268, 0), new ScheduledTask(48100, 48149, 2), new ScheduledTask(22300, 22349, 0), new ScheduledTask(65900, 65939, 1), new ScheduledTask(43700, 43739, 0), new ScheduledTask(77500, 77519, 2), new ScheduledTask(41800, 41819, 0), new ScheduledTask(20400, 20419, 0)};
        int[] expectedProcessorEndTimes = new int[]{82587, 65939, 77519, 43478};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random7_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#7_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 58600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 68, 0), new ScheduledTask(6800, 6868, 0), new ScheduledTask(7700, 7797, 1), new ScheduledTask(7300, 7368, 2), new ScheduledTask(13600, 13678, 0), new ScheduledTask(20900, 20968, 2), new ScheduledTask(14000, 14049, 3), new ScheduledTask(39200, 39297, 3), new ScheduledTask(27100, 27187, 1), new ScheduledTask(49800, 49887, 0), new ScheduledTask(34300, 34387, 0), new ScheduledTask(42300, 42378, 2), new ScheduledTask(26500, 26578, 0), new ScheduledTask(44500, 44568, 1), new ScheduledTask(21600, 21649, 0), new ScheduledTask(44900, 44949, 0), new ScheduledTask(27600, 27639, 3), new ScheduledTask(34500, 34539, 2), new ScheduledTask(35400, 35419, 3), new ScheduledTask(23800, 23819, 3), new ScheduledTask(43000, 43019, 0)};
        int[] expectedProcessorEndTimes = new int[]{49887, 44568, 42378, 39297};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random7_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#7_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 50160;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 68, 0), new ScheduledTask(7200, 7268, 1), new ScheduledTask(7700, 7797, 2), new ScheduledTask(6800, 6868, 0), new ScheduledTask(24100, 24178, 3), new ScheduledTask(22250, 22318, 2), new ScheduledTask(15360, 15409, 1), new ScheduledTask(21240, 21337, 1), new ScheduledTask(37440, 37527, 1), new ScheduledTask(13600, 13687, 0), new ScheduledTask(26200, 26287, 0), new ScheduledTask(32450, 32528, 2), new ScheduledTask(41700, 41778, 0), new ScheduledTask(34900, 34968, 0), new ScheduledTask(14300, 14349, 3), new ScheduledTask(39700, 39749, 3), new ScheduledTask(44150, 44189, 2), new ScheduledTask(22300, 22339, 0), new ScheduledTask(32880, 32899, 1), new ScheduledTask(47880, 47899, 1), new ScheduledTask(35160, 35179, 1)};
        int[] expectedProcessorEndTimes = new int[]{41778, 47899, 44189, 39749};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 692;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 68, 0), new ScheduledTask(292, 360, 0), new ScheduledTask(68, 165, 0), new ScheduledTask(73, 141, 1), new ScheduledTask(448, 526, 0), new ScheduledTask(518, 586, 1), new ScheduledTask(360, 409, 0), new ScheduledTask(334, 431, 1), new ScheduledTask(247, 334, 1), new ScheduledTask(141, 228, 1), new ScheduledTask(431, 518, 1), new ScheduledTask(214, 292, 0), new ScheduledTask(565, 643, 0), new ScheduledTask(624, 692, 1), new ScheduledTask(165, 214, 0), new ScheduledTask(643, 692, 0), new ScheduledTask(526, 565, 0), new ScheduledTask(409, 448, 0), new ScheduledTask(228, 247, 1), new ScheduledTask(605, 624, 1), new ScheduledTask(586, 605, 1)};
        int[] expectedProcessorEndTimes = new int[]{692, 692};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 402;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 68, 0), new ScheduledTask(68, 136, 0), new ScheduledTask(77, 174, 1), new ScheduledTask(73, 141, 2), new ScheduledTask(204, 282, 0), new ScheduledTask(136, 204, 0), new ScheduledTask(140, 189, 3), new ScheduledTask(286, 383, 3), new ScheduledTask(315, 402, 2), new ScheduledTask(141, 228, 2), new ScheduledTask(228, 315, 2), new ScheduledTask(208, 286, 3), new ScheduledTask(285, 363, 1), new ScheduledTask(331, 399, 0), new ScheduledTask(174, 223, 1), new ScheduledTask(282, 331, 0), new ScheduledTask(363, 402, 1), new ScheduledTask(242, 281, 1), new ScheduledTask(189, 208, 3), new ScheduledTask(383, 402, 3), new ScheduledTask(223, 242, 1)};
        int[] expectedProcessorEndTimes = new int[]{399, 402, 402, 402};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 319;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 68, 0), new ScheduledTask(68, 136, 0), new ScheduledTask(77, 174, 1), new ScheduledTask(73, 141, 2), new ScheduledTask(136, 214, 0), new ScheduledTask(145, 213, 3), new ScheduledTask(140, 189, 4), new ScheduledTask(150, 247, 5), new ScheduledTask(174, 261, 1), new ScheduledTask(189, 276, 4), new ScheduledTask(232, 319, 3), new ScheduledTask(190, 268, 2), new ScheduledTask(237, 315, 0), new ScheduledTask(247, 315, 5), new ScheduledTask(141, 190, 2), new ScheduledTask(268, 317, 2), new ScheduledTask(276, 315, 4), new ScheduledTask(280, 319, 1), new ScheduledTask(213, 232, 3), new ScheduledTask(261, 280, 1), new ScheduledTask(218, 237, 0)};
        int[] expectedProcessorEndTimes = new int[]{315, 319, 317, 319, 315, 315};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random8_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#8_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 88600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 93, 0), new ScheduledTask(9300, 9393, 0), new ScheduledTask(10200, 10270, 1), new ScheduledTask(51200, 51282, 0), new ScheduledTask(19000, 19023, 2), new ScheduledTask(18600, 18705, 0), new ScheduledTask(9900, 9935, 3), new ScheduledTask(39500, 39617, 0), new ScheduledTask(78100, 78205, 0), new ScheduledTask(30900, 30993, 3), new ScheduledTask(69900, 69982, 0), new ScheduledTask(46600, 46670, 2), new ScheduledTask(52200, 52258, 1), new ScheduledTask(65200, 65247, 0), new ScheduledTask(36000, 36035, 0), new ScheduledTask(61700, 61735, 0), new ScheduledTask(33700, 33723, 0), new ScheduledTask(32800, 32823, 2), new ScheduledTask(31400, 31423, 0), new ScheduledTask(29100, 29123, 0), new ScheduledTask(59400, 59423, 0)};
        int[] expectedProcessorEndTimes = new int[]{78205, 52258, 46670, 30993};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random8_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#8_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 58200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 93, 0), new ScheduledTask(12800, 12893, 0), new ScheduledTask(10200, 10270, 1), new ScheduledTask(22100, 22182, 0), new ScheduledTask(24200, 24223, 1), new ScheduledTask(22600, 22705, 2), new ScheduledTask(9300, 9335, 0), new ScheduledTask(28800, 28917, 1), new ScheduledTask(41900, 42005, 0), new ScheduledTask(13700, 13793, 3), new ScheduledTask(41700, 41782, 3), new ScheduledTask(43600, 43670, 2), new ScheduledTask(36100, 36158, 0), new ScheduledTask(32300, 32347, 3), new ScheduledTask(54700, 54735, 0), new ScheduledTask(32600, 32635, 0), new ScheduledTask(18000, 18023, 2), new ScheduledTask(13400, 13423, 2), new ScheduledTask(52200, 52223, 1), new ScheduledTask(52400, 52423, 0), new ScheduledTask(30300, 30323, 0)};
        int[] expectedProcessorEndTimes = new int[]{54735, 52223, 43670, 41782};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random8_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#8_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 49900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 93, 0), new ScheduledTask(10000, 10093, 2), new ScheduledTask(10200, 10270, 1), new ScheduledTask(23950, 24032, 2), new ScheduledTask(24400, 24423, 0), new ScheduledTask(26700, 26805, 0), new ScheduledTask(9300, 9335, 0), new ScheduledTask(31200, 31317, 1), new ScheduledTask(18600, 18705, 1), new ScheduledTask(15100, 15193, 0), new ScheduledTask(36250, 36332, 2), new ScheduledTask(28200, 28270, 3), new ScheduledTask(44100, 44158, 0), new ScheduledTask(18800, 18847, 3), new ScheduledTask(42200, 42235, 3), new ScheduledTask(45240, 45275, 1), new ScheduledTask(12800, 12823, 0), new ScheduledTask(13400, 13423, 3), new ScheduledTask(41800, 41823, 0), new ScheduledTask(39500, 39523, 0), new ScheduledTask(37200, 37223, 0)};
        int[] expectedProcessorEndTimes = new int[]{44158, 45275, 36332, 42235};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 680;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 93, 0), new ScheduledTask(210, 303, 0), new ScheduledTask(93, 163, 0), new ScheduledTask(443, 525, 0), new ScheduledTask(303, 326, 0), new ScheduledTask(506, 611, 1), new ScheduledTask(99, 134, 1), new ScheduledTask(326, 443, 0), new ScheduledTask(331, 436, 1), new ScheduledTask(238, 331, 1), new ScheduledTask(560, 642, 0), new ScheduledTask(436, 506, 1), new ScheduledTask(180, 238, 1), new ScheduledTask(163, 210, 0), new ScheduledTask(642, 677, 0), new ScheduledTask(525, 560, 0), new ScheduledTask(157, 180, 1), new ScheduledTask(134, 157, 1), new ScheduledTask(657, 680, 1), new ScheduledTask(634, 657, 1), new ScheduledTask(611, 634, 1)};
        int[] expectedProcessorEndTimes = new int[]{677, 680};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 402;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 93, 0), new ScheduledTask(100, 193, 1), new ScheduledTask(93, 163, 0), new ScheduledTask(216, 298, 1), new ScheduledTask(193, 216, 1), new ScheduledTask(212, 317, 2), new ScheduledTask(99, 134, 3), new ScheduledTask(285, 402, 3), new ScheduledTask(163, 268, 0), new ScheduledTask(134, 227, 3), new ScheduledTask(317, 399, 2), new ScheduledTask(268, 338, 0), new ScheduledTask(227, 285, 3), new ScheduledTask(165, 212, 2), new ScheduledTask(367, 402, 1), new ScheduledTask(361, 396, 0), new ScheduledTask(298, 321, 1), new ScheduledTask(140, 163, 2), new ScheduledTask(344, 367, 1), new ScheduledTask(321, 344, 1), new ScheduledTask(338, 361, 0)};
        int[] expectedProcessorEndTimes = new int[]{396, 402, 399, 402};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 350;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 93, 0), new ScheduledTask(93, 186, 0), new ScheduledTask(102, 172, 1), new ScheduledTask(186, 268, 0), new ScheduledTask(190, 213, 2), new ScheduledTask(189, 294, 1), new ScheduledTask(99, 134, 3), new ScheduledTask(233, 350, 4), new ScheduledTask(236, 341, 5), new ScheduledTask(143, 236, 5), new ScheduledTask(268, 350, 0), new ScheduledTask(239, 309, 3), new ScheduledTask(181, 239, 3), new ScheduledTask(186, 233, 4), new ScheduledTask(309, 344, 3), new ScheduledTask(278, 313, 2), new ScheduledTask(163, 186, 4), new ScheduledTask(140, 163, 4), new ScheduledTask(313, 336, 2), new ScheduledTask(317, 340, 1), new ScheduledTask(294, 317, 1)};
        int[] expectedProcessorEndTimes = new int[]{350, 340, 336, 344, 350, 341};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random9_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#9_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 89900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 83, 0), new ScheduledTask(13000, 13119, 0), new ScheduledTask(8900, 8983, 1), new ScheduledTask(24900, 24947, 0), new ScheduledTask(46100, 46159, 0), new ScheduledTask(35200, 35247, 2), new ScheduledTask(8300, 8347, 0), new ScheduledTask(80400, 80495, 0), new ScheduledTask(30100, 30195, 3), new ScheduledTask(73300, 73371, 0), new ScheduledTask(59100, 59171, 0), new ScheduledTask(52000, 52071, 0), new ScheduledTask(66200, 66271, 0), new ScheduledTask(40200, 40259, 0), new ScheduledTask(34300, 34359, 0), new ScheduledTask(29600, 29647, 0), new ScheduledTask(13600, 13636, 2), new ScheduledTask(63400, 63436, 2), new ScheduledTask(13300, 13324, 3), new ScheduledTask(73100, 73124, 1), new ScheduledTask(58700, 58724, 1)};
        int[] expectedProcessorEndTimes = new int[]{80495, 73124, 63436, 30195};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random9_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#9_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 58700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 83, 0), new ScheduledTask(8300, 8419, 0), new ScheduledTask(8900, 8983, 1), new ScheduledTask(28000, 28047, 2), new ScheduledTask(20800, 20859, 3), new ScheduledTask(37400, 37447, 2), new ScheduledTask(9200, 9247, 2), new ScheduledTask(25500, 25595, 1), new ScheduledTask(38100, 38195, 0), new ScheduledTask(28600, 28671, 0), new ScheduledTask(32600, 32671, 3), new ScheduledTask(44500, 44571, 1), new ScheduledTask(51200, 51271, 0), new ScheduledTask(46800, 46859, 3), new ScheduledTask(46800, 46859, 2), new ScheduledTask(18600, 18647, 2), new ScheduledTask(22600, 22636, 0), new ScheduledTask(47600, 47636, 0), new ScheduledTask(20200, 20224, 0), new ScheduledTask(26200, 26224, 0), new ScheduledTask(35700, 35724, 0)};
        int[] expectedProcessorEndTimes = new int[]{51271, 44571, 46859, 46859};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random9_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#9_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 49700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 83, 0), new ScheduledTask(8300, 8419, 0), new ScheduledTask(8900, 8983, 2), new ScheduledTask(20200, 20247, 0), new ScheduledTask(24900, 24959, 0), new ScheduledTask(32000, 32047, 2), new ScheduledTask(9200, 9247, 1), new ScheduledTask(25140, 25235, 3), new ScheduledTask(25400, 25495, 1), new ScheduledTask(21350, 21421, 2), new ScheduledTask(39050, 39121, 2), new ScheduledTask(36800, 36871, 1), new ScheduledTask(42600, 42671, 0), new ScheduledTask(36700, 36759, 0), new ScheduledTask(30800, 30859, 0), new ScheduledTask(15740, 15787, 3), new ScheduledTask(17720, 17756, 1), new ScheduledTask(45320, 45356, 1), new ScheduledTask(14840, 14864, 1), new ScheduledTask(22040, 22064, 1), new ScheduledTask(44140, 44164, 3)};
        int[] expectedProcessorEndTimes = new int[]{42671, 45356, 39121, 44164};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 679;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 83, 0), new ScheduledTask(83, 202, 0), new ScheduledTask(89, 172, 1), new ScheduledTask(514, 561, 1), new ScheduledTask(313, 372, 1), new ScheduledTask(266, 313, 1), new ScheduledTask(172, 219, 1), new ScheduledTask(488, 583, 0), new ScheduledTask(583, 678, 0), new ScheduledTask(286, 357, 0), new ScheduledTask(443, 514, 1), new ScheduledTask(372, 443, 1), new ScheduledTask(417, 488, 0), new ScheduledTask(561, 620, 1), new ScheduledTask(620, 679, 1), new ScheduledTask(219, 266, 1), new ScheduledTask(250, 286, 0), new ScheduledTask(357, 393, 0), new ScheduledTask(226, 250, 0), new ScheduledTask(202, 226, 0), new ScheduledTask(393, 417, 0)};
        int[] expectedProcessorEndTimes = new int[]{678, 679};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 401;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 83, 0), new ScheduledTask(93, 212, 1), new ScheduledTask(89, 172, 2), new ScheduledTask(218, 265, 0), new ScheduledTask(257, 316, 3), new ScheduledTask(212, 259, 1), new ScheduledTask(83, 130, 0), new ScheduledTask(172, 267, 2), new ScheduledTask(303, 398, 2), new ScheduledTask(186, 257, 3), new ScheduledTask(330, 401, 1), new ScheduledTask(324, 395, 0), new ScheduledTask(259, 330, 1), new ScheduledTask(340, 399, 3), new ScheduledTask(265, 324, 0), new ScheduledTask(139, 186, 3), new ScheduledTask(154, 190, 0), new ScheduledTask(267, 303, 2), new ScheduledTask(130, 154, 0), new ScheduledTask(190, 214, 0), new ScheduledTask(316, 340, 3)};
        int[] expectedProcessorEndTimes = new int[]{395, 401, 398, 399};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 347;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 83, 0), new ScheduledTask(83, 202, 0), new ScheduledTask(89, 172, 1), new ScheduledTask(202, 249, 0), new ScheduledTask(208, 267, 2), new ScheduledTask(212, 259, 3), new ScheduledTask(92, 139, 4), new ScheduledTask(172, 267, 1), new ScheduledTask(249, 344, 0), new ScheduledTask(195, 266, 5), new ScheduledTask(273, 344, 5), new ScheduledTask(267, 338, 2), new ScheduledTask(267, 338, 1), new ScheduledTask(252, 311, 4), new ScheduledTask(259, 318, 3), new ScheduledTask(148, 195, 5), new ScheduledTask(202, 238, 4), new ScheduledTask(311, 347, 4), new ScheduledTask(139, 163, 4), new ScheduledTask(178, 202, 4), new ScheduledTask(318, 342, 3)};
        int[] expectedProcessorEndTimes = new int[]{344, 338, 338, 342, 347, 344};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 10;
        int expectedScheduleEndTime = 227;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 50, 0), new ScheduledTask(50, 75, 0), new ScheduledTask(75, 158, 0), new ScheduledTask(81, 156, 1), new ScheduledTask(84, 142, 2), new ScheduledTask(54, 96, 3), new ScheduledTask(59, 84, 4), new ScheduledTask(142, 225, 2), new ScheduledTask(84, 159, 4), new ScheduledTask(152, 227, 3), new ScheduledTask(87, 154, 5), new ScheduledTask(101, 168, 6), new ScheduledTask(158, 225, 0), new ScheduledTask(156, 223, 1), new ScheduledTask(101, 159, 7), new ScheduledTask(162, 212, 4), new ScheduledTask(164, 206, 5), new ScheduledTask(163, 196, 7), new ScheduledTask(98, 123, 8), new ScheduledTask(86, 103, 9), new ScheduledTask(145, 162, 8)};
        int[] expectedProcessorEndTimes = new int[]{225, 223, 225, 227, 212, 206, 168, 196, 162, 103};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 578;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 50, 0), new ScheduledTask(159, 184, 0), new ScheduledTask(379, 462, 1), new ScheduledTask(242, 317, 0), new ScheduledTask(184, 242, 0), new ScheduledTask(54, 96, 1), new ScheduledTask(50, 75, 0), new ScheduledTask(495, 578, 1), new ScheduledTask(179, 254, 1), new ScheduledTask(254, 329, 1), new ScheduledTask(92, 159, 0), new ScheduledTask(401, 468, 0), new ScheduledTask(510, 577, 0), new ScheduledTask(334, 401, 0), new ScheduledTask(121, 179, 1), new ScheduledTask(329, 379, 1), new ScheduledTask(468, 510, 0), new ScheduledTask(462, 495, 1), new ScheduledTask(96, 121, 1), new ScheduledTask(75, 92, 0), new ScheduledTask(317, 334, 0)};
        int[] expectedProcessorEndTimes = new int[]{577, 578};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 325;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 50, 0), new ScheduledTask(50, 75, 0), new ScheduledTask(75, 158, 0), new ScheduledTask(81, 156, 1), new ScheduledTask(84, 142, 2), new ScheduledTask(54, 96, 3), new ScheduledTask(59, 84, 2), new ScheduledTask(142, 225, 2), new ScheduledTask(247, 322, 3), new ScheduledTask(248, 323, 1), new ScheduledTask(180, 247, 3), new ScheduledTask(113, 180, 3), new ScheduledTask(258, 325, 2), new ScheduledTask(181, 248, 1), new ScheduledTask(267, 325, 0), new ScheduledTask(217, 267, 0), new ScheduledTask(175, 217, 0), new ScheduledTask(225, 258, 2), new ScheduledTask(156, 181, 1), new ScheduledTask(96, 113, 3), new ScheduledTask(158, 175, 0)};
        int[] expectedProcessorEndTimes = new int[]{325, 323, 325, 322};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 227;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 50, 0), new ScheduledTask(50, 75, 0), new ScheduledTask(75, 158, 0), new ScheduledTask(81, 156, 1), new ScheduledTask(84, 142, 2), new ScheduledTask(54, 96, 3), new ScheduledTask(59, 84, 4), new ScheduledTask(142, 225, 2), new ScheduledTask(84, 159, 4), new ScheduledTask(152, 227, 3), new ScheduledTask(87, 154, 5), new ScheduledTask(101, 168, 6), new ScheduledTask(158, 225, 0), new ScheduledTask(156, 223, 1), new ScheduledTask(101, 159, 7), new ScheduledTask(162, 212, 4), new ScheduledTask(164, 206, 5), new ScheduledTask(163, 196, 7), new ScheduledTask(168, 193, 6), new ScheduledTask(193, 210, 6), new ScheduledTask(196, 213, 7)};
        int[] expectedProcessorEndTimes = new int[]{225, 223, 225, 227, 212, 206, 210, 213};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 68800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 50, 0), new ScheduledTask(5000, 5014, 0), new ScheduledTask(15600, 15657, 0), new ScheduledTask(7000, 7050, 1), new ScheduledTask(6400, 6442, 0), new ScheduledTask(5800, 5835, 2), new ScheduledTask(7100, 7128, 3), new ScheduledTask(23900, 23971, 3), new ScheduledTask(61700, 61771, 0), new ScheduledTask(54600, 54671, 0), new ScheduledTask(22700, 22764, 0), new ScheduledTask(37500, 37557, 0), new ScheduledTask(48900, 48957, 0), new ScheduledTask(43200, 43257, 0), new ScheduledTask(37000, 37050, 1), new ScheduledTask(10600, 10650, 0), new ScheduledTask(33300, 33342, 0), new ScheduledTask(29100, 29142, 0), new ScheduledTask(47800, 47835, 2), new ScheduledTask(26800, 26835, 2), new ScheduledTask(21300, 21314, 0)};
        int[] expectedProcessorEndTimes = new int[]{61771, 37050, 47835, 23971};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 43800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 50, 0), new ScheduledTask(5000, 5014, 0), new ScheduledTask(6400, 6457, 0), new ScheduledTask(7000, 7050, 1), new ScheduledTask(7000, 7042, 2), new ScheduledTask(5800, 5835, 3), new ScheduledTask(15600, 15628, 3), new ScheduledTask(29600, 29671, 3), new ScheduledTask(12100, 12171, 0), new ScheduledTask(36300, 36371, 0), new ScheduledTask(31000, 31064, 1), new ScheduledTask(30600, 30657, 0), new ScheduledTask(24900, 24957, 0), new ScheduledTask(19200, 19257, 0), new ScheduledTask(33800, 33850, 2), new ScheduledTask(15400, 15450, 2), new ScheduledTask(21200, 21242, 3), new ScheduledTask(25400, 25442, 2), new ScheduledTask(17000, 17035, 1), new ScheduledTask(24000, 24035, 1), new ScheduledTask(12800, 12814, 3)};
        int[] expectedProcessorEndTimes = new int[]{36371, 31064, 33850, 29671};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 37250;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 50, 0), new ScheduledTask(5000, 5014, 0), new ScheduledTask(5600, 5657, 2), new ScheduledTask(7000, 7050, 3), new ScheduledTask(19400, 19442, 2), new ScheduledTask(5800, 5835, 1), new ScheduledTask(6400, 6428, 0), new ScheduledTask(15040, 15111, 1), new ScheduledTask(16300, 16371, 0), new ScheduledTask(23400, 23471, 0), new ScheduledTask(30500, 30564, 0), new ScheduledTask(9200, 9257, 0), new ScheduledTask(30400, 30457, 1), new ScheduledTask(23560, 23617, 1), new ScheduledTask(17000, 17050, 3), new ScheduledTask(27000, 27050, 3), new ScheduledTask(30950, 30992, 2), new ScheduledTask(10000, 10042, 1), new ScheduledTask(25700, 25735, 2), new ScheduledTask(14150, 14185, 2), new ScheduledTask(14900, 14914, 0)};
        int[] expectedProcessorEndTimes = new int[]{30564, 30457, 30992, 27050};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 523;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 50, 0), new ScheduledTask(53, 67, 1), new ScheduledTask(239, 296, 0), new ScheduledTask(358, 408, 1), new ScheduledTask(202, 244, 1), new ScheduledTask(50, 85, 0), new ScheduledTask(67, 95, 1), new ScheduledTask(381, 452, 0), new ScheduledTask(310, 381, 0), new ScheduledTask(452, 523, 0), new ScheduledTask(294, 358, 1), new ScheduledTask(145, 202, 1), new ScheduledTask(465, 522, 1), new ScheduledTask(408, 465, 1), new ScheduledTask(95, 145, 1), new ScheduledTask(244, 294, 1), new ScheduledTask(197, 239, 0), new ScheduledTask(155, 197, 0), new ScheduledTask(85, 120, 0), new ScheduledTask(120, 155, 0), new ScheduledTask(296, 310, 0)};
        int[] expectedProcessorEndTimes = new int[]{523, 522};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 295;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 50, 0), new ScheduledTask(53, 67, 1), new ScheduledTask(56, 113, 2), new ScheduledTask(67, 117, 1), new ScheduledTask(120, 162, 0), new ScheduledTask(50, 85, 0), new ScheduledTask(74, 102, 3), new ScheduledTask(223, 294, 3), new ScheduledTask(152, 223, 3), new ScheduledTask(220, 291, 2), new ScheduledTask(231, 295, 1), new ScheduledTask(113, 170, 2), new ScheduledTask(174, 231, 1), new ScheduledTask(117, 174, 1), new ScheduledTask(102, 152, 3), new ScheduledTask(170, 220, 2), new ScheduledTask(253, 295, 0), new ScheduledTask(211, 253, 0), new ScheduledTask(85, 120, 0), new ScheduledTask(176, 211, 0), new ScheduledTask(162, 176, 0)};
        int[] expectedProcessorEndTimes = new int[]{295, 295, 291, 294};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 226;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 50, 0), new ScheduledTask(50, 64, 0), new ScheduledTask(56, 113, 1), new ScheduledTask(70, 120, 2), new ScheduledTask(70, 112, 3), new ScheduledTask(58, 93, 4), new ScheduledTask(64, 92, 0), new ScheduledTask(151, 222, 5), new ScheduledTask(143, 214, 4), new ScheduledTask(155, 226, 2), new ScheduledTask(162, 226, 3), new ScheduledTask(94, 151, 5), new ScheduledTask(169, 226, 1), new ScheduledTask(169, 226, 0), new ScheduledTask(93, 143, 4), new ScheduledTask(112, 162, 3), new ScheduledTask(127, 169, 1), new ScheduledTask(127, 169, 0), new ScheduledTask(120, 155, 2), new ScheduledTask(92, 127, 0), new ScheduledTask(113, 127, 1)};
        int[] expectedProcessorEndTimes = new int[]{226, 226, 226, 226, 214, 222};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot92_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.92_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(700, 707, 0), new ScheduledTask(900, 906, 1), new ScheduledTask(2100, 2107, 2), new ScheduledTask(1400, 1410, 0), new ScheduledTask(900, 903, 3), new ScheduledTask(2700, 2702, 3), new ScheduledTask(6700, 6710, 0), new ScheduledTask(7700, 7710, 0), new ScheduledTask(4500, 4507, 1), new ScheduledTask(6000, 6007, 0), new ScheduledTask(3300, 3307, 0), new ScheduledTask(3900, 3907, 3), new ScheduledTask(4900, 4906, 0), new ScheduledTask(5500, 5505, 0), new ScheduledTask(4400, 4405, 0), new ScheduledTask(4000, 4004, 0), new ScheduledTask(6300, 6304, 2), new ScheduledTask(2900, 2904, 0), new ScheduledTask(2600, 2603, 0), new ScheduledTask(2400, 2402, 0)};
        int[] expectedProcessorEndTimes = new int[]{7710, 4507, 6304, 3907};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot92_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.92_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(700, 707, 0), new ScheduledTask(900, 906, 1), new ScheduledTask(1400, 1407, 0), new ScheduledTask(2100, 2110, 1), new ScheduledTask(900, 903, 2), new ScheduledTask(1600, 1602, 3), new ScheduledTask(2300, 2310, 3), new ScheduledTask(3700, 3710, 2), new ScheduledTask(4300, 4307, 3), new ScheduledTask(4100, 4107, 1), new ScheduledTask(2300, 2307, 2), new ScheduledTask(4100, 4107, 0), new ScheduledTask(3500, 3506, 0), new ScheduledTask(3000, 3005, 0), new ScheduledTask(2500, 2505, 0), new ScheduledTask(1500, 1504, 2), new ScheduledTask(2100, 2104, 0), new ScheduledTask(5300, 5304, 0), new ScheduledTask(4800, 4803, 0), new ScheduledTask(5100, 5102, 0)};
        int[] expectedProcessorEndTimes = new int[]{5304, 4107, 3710, 4307};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot92_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.92_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4860;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(700, 707, 0), new ScheduledTask(900, 906, 1), new ScheduledTask(1400, 1407, 0), new ScheduledTask(1950, 1960, 2), new ScheduledTask(900, 903, 2), new ScheduledTask(1600, 1602, 3), new ScheduledTask(2460, 2470, 1), new ScheduledTask(3660, 3670, 1), new ScheduledTask(3400, 3407, 3), new ScheduledTask(1620, 1627, 1), new ScheduledTask(2000, 2007, 3), new ScheduledTask(3750, 3757, 2), new ScheduledTask(3500, 3506, 0), new ScheduledTask(3000, 3005, 0), new ScheduledTask(2500, 2505, 0), new ScheduledTask(1350, 1354, 2), new ScheduledTask(2100, 2104, 0), new ScheduledTask(4400, 4404, 0), new ScheduledTask(4100, 4103, 0), new ScheduledTask(3450, 3452, 2)};
        int[] expectedProcessorEndTimes = new int[]{4404, 3670, 3757, 3407};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot92_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.92_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 14, 0), new ScheduledTask(36, 42, 1), new ScheduledTask(31, 38, 0), new ScheduledTask(26, 36, 1), new ScheduledTask(9, 12, 1), new ScheduledTask(14, 16, 0), new ScheduledTask(56, 66, 0), new ScheduledTask(56, 66, 1), new ScheduledTask(49, 56, 1), new ScheduledTask(42, 49, 1), new ScheduledTask(12, 19, 1), new ScheduledTask(19, 26, 1), new ScheduledTask(16, 22, 0), new ScheduledTask(51, 56, 0), new ScheduledTask(26, 31, 0), new ScheduledTask(22, 26, 0), new ScheduledTask(38, 42, 0), new ScheduledTask(47, 51, 0), new ScheduledTask(42, 45, 0), new ScheduledTask(45, 47, 0)};
        int[] expectedProcessorEndTimes = new int[]{66, 66};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot92_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.92_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 40;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 14, 0), new ScheduledTask(9, 15, 1), new ScheduledTask(14, 21, 0), new ScheduledTask(19, 29, 2), new ScheduledTask(9, 12, 3), new ScheduledTask(16, 18, 2), new ScheduledTask(23, 33, 3), new ScheduledTask(29, 39, 2), new ScheduledTask(33, 40, 3), new ScheduledTask(15, 22, 1), new ScheduledTask(16, 23, 3), new ScheduledTask(28, 35, 1), new ScheduledTask(22, 28, 1), new ScheduledTask(30, 35, 0), new ScheduledTask(25, 30, 0), new ScheduledTask(12, 16, 3), new ScheduledTask(21, 25, 0), new ScheduledTask(35, 39, 1), new ScheduledTask(35, 38, 0), new ScheduledTask(38, 40, 0)};
        int[] expectedProcessorEndTimes = new int[]{40, 39, 39, 40};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot92_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.92_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 36;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 14, 0), new ScheduledTask(9, 15, 1), new ScheduledTask(14, 21, 0), new ScheduledTask(19, 29, 2), new ScheduledTask(9, 12, 3), new ScheduledTask(16, 18, 4), new ScheduledTask(25, 35, 5), new ScheduledTask(21, 31, 0), new ScheduledTask(29, 36, 4), new ScheduledTask(28, 35, 3), new ScheduledTask(18, 25, 5), new ScheduledTask(18, 25, 4), new ScheduledTask(22, 28, 3), new ScheduledTask(15, 20, 1), new ScheduledTask(12, 17, 3), new ScheduledTask(25, 29, 4), new ScheduledTask(29, 33, 1), new ScheduledTask(32, 36, 0), new ScheduledTask(29, 32, 2), new ScheduledTask(32, 34, 2)};
        int[] expectedProcessorEndTimes = new int[]{36, 33, 34, 35, 36, 35};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot98_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.98_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(400, 408, 0), new ScheduledTask(900, 909, 1), new ScheduledTask(1200, 1211, 0), new ScheduledTask(1400, 1404, 2), new ScheduledTask(2100, 2104, 3), new ScheduledTask(4500, 4507, 3), new ScheduledTask(3000, 3013, 0), new ScheduledTask(6800, 6812, 0), new ScheduledTask(4800, 4812, 0), new ScheduledTask(8800, 8809, 0), new ScheduledTask(8000, 8008, 0), new ScheduledTask(6000, 6008, 0), new ScheduledTask(2300, 2307, 0), new ScheduledTask(6300, 6307, 1), new ScheduledTask(6200, 6207, 2), new ScheduledTask(4300, 4305, 0), new ScheduledTask(3800, 3804, 2), new ScheduledTask(10100, 10104, 0), new ScheduledTask(9700, 9704, 0), new ScheduledTask(8700, 8703, 3)};
        int[] expectedProcessorEndTimes = new int[]{10104, 6307, 6207, 8703};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot98_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.98_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 6800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(400, 408, 0), new ScheduledTask(900, 909, 1), new ScheduledTask(1300, 1311, 2), new ScheduledTask(1400, 1404, 3), new ScheduledTask(2200, 2204, 3), new ScheduledTask(1200, 1207, 0), new ScheduledTask(4100, 4113, 2), new ScheduledTask(3000, 3012, 3), new ScheduledTask(3200, 3212, 0), new ScheduledTask(4100, 4109, 1), new ScheduledTask(5900, 5908, 0), new ScheduledTask(5100, 5108, 0), new ScheduledTask(5400, 5407, 3), new ScheduledTask(2700, 2707, 1), new ScheduledTask(4400, 4407, 0), new ScheduledTask(2700, 2705, 0), new ScheduledTask(5900, 5904, 1), new ScheduledTask(2300, 2304, 0), new ScheduledTask(1900, 1904, 0), new ScheduledTask(3500, 3503, 2)};
        int[] expectedProcessorEndTimes = new int[]{5908, 5904, 4113, 5407};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot98_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.98_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(400, 408, 0), new ScheduledTask(900, 909, 1), new ScheduledTask(1300, 1311, 2), new ScheduledTask(1400, 1404, 3), new ScheduledTask(2940, 2944, 1), new ScheduledTask(1200, 1207, 0), new ScheduledTask(3700, 3713, 0), new ScheduledTask(3420, 3432, 1), new ScheduledTask(4000, 4012, 2), new ScheduledTask(3200, 3209, 3), new ScheduledTask(1980, 1988, 1), new ScheduledTask(5000, 5008, 0), new ScheduledTask(2950, 2957, 2), new ScheduledTask(2700, 2707, 0), new ScheduledTask(4860, 4867, 1), new ScheduledTask(2200, 2205, 3), new ScheduledTask(5000, 5004, 3), new ScheduledTask(2300, 2304, 0), new ScheduledTask(1900, 1904, 0), new ScheduledTask(3400, 3403, 0)};
        int[] expectedProcessorEndTimes = new int[]{5008, 4867, 4012, 5004};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(33, 41, 0), new ScheduledTask(9, 18, 1), new ScheduledTask(4, 15, 0), new ScheduledTask(48, 52, 1), new ScheduledTask(52, 56, 1), new ScheduledTask(41, 48, 0), new ScheduledTask(35, 48, 1), new ScheduledTask(68, 80, 1), new ScheduledTask(56, 68, 1), new ScheduledTask(26, 35, 1), new ScheduledTask(18, 26, 1), new ScheduledTask(65, 73, 0), new ScheduledTask(19, 26, 0), new ScheduledTask(26, 33, 0), new ScheduledTask(73, 80, 0), new ScheduledTask(57, 62, 0), new ScheduledTask(15, 19, 0), new ScheduledTask(52, 56, 0), new ScheduledTask(48, 52, 0), new ScheduledTask(62, 65, 0)};
        int[] expectedProcessorEndTimes = new int[]{80, 80};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 12, 0), new ScheduledTask(9, 18, 1), new ScheduledTask(13, 24, 2), new ScheduledTask(14, 18, 3), new ScheduledTask(21, 25, 3), new ScheduledTask(12, 19, 0), new ScheduledTask(33, 46, 3), new ScheduledTask(35, 47, 2), new ScheduledTask(35, 47, 1), new ScheduledTask(26, 35, 1), new ScheduledTask(18, 26, 1), new ScheduledTask(25, 33, 3), new ScheduledTask(28, 35, 2), new ScheduledTask(32, 39, 0), new ScheduledTask(39, 46, 0), new ScheduledTask(27, 32, 0), new ScheduledTask(24, 28, 2), new ScheduledTask(23, 27, 0), new ScheduledTask(19, 23, 0), new ScheduledTask(18, 21, 3)};
        int[] expectedProcessorEndTimes = new int[]{46, 47, 47, 46};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 38;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 12, 0), new ScheduledTask(9, 18, 1), new ScheduledTask(13, 24, 2), new ScheduledTask(14, 18, 3), new ScheduledTask(12, 16, 0), new ScheduledTask(19, 26, 4), new ScheduledTask(24, 37, 2), new ScheduledTask(25, 37, 1), new ScheduledTask(18, 30, 3), new ScheduledTask(28, 37, 5), new ScheduledTask(30, 38, 4), new ScheduledTask(20, 28, 5), new ScheduledTask(31, 38, 0), new ScheduledTask(18, 25, 1), new ScheduledTask(16, 23, 0), new ScheduledTask(23, 28, 0), new ScheduledTask(34, 38, 3), new ScheduledTask(26, 30, 4), new ScheduledTask(30, 34, 3), new ScheduledTask(28, 31, 0)};
        int[] expectedProcessorEndTimes = new int[]{38, 37, 37, 38, 38, 37};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(1400, 1405, 1), new ScheduledTask(7200, 7209, 0), new ScheduledTask(2000, 2007, 0), new ScheduledTask(5000, 5008, 0), new ScheduledTask(800, 802, 0), new ScheduledTask(4400, 4403, 1), new ScheduledTask(2000, 2010, 2), new ScheduledTask(1400, 1410, 3), new ScheduledTask(1000, 1010, 0), new ScheduledTask(4100, 4109, 0), new ScheduledTask(5800, 5809, 0), new ScheduledTask(9500, 9509, 0), new ScheduledTask(3300, 3308, 0), new ScheduledTask(6200, 6207, 1), new ScheduledTask(8800, 8807, 0), new ScheduledTask(8100, 8107, 0), new ScheduledTask(2700, 2706, 0), new ScheduledTask(7400, 7405, 3), new ScheduledTask(6700, 6705, 0), new ScheduledTask(8000, 8003, 2)};
        int[] expectedProcessorEndTimes = new int[]{9509, 6207, 8003, 7405};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 6900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(1400, 1405, 1), new ScheduledTask(3000, 3009, 0), new ScheduledTask(800, 807, 0), new ScheduledTask(3500, 3508, 2), new ScheduledTask(1700, 1702, 3), new ScheduledTask(2400, 2403, 1), new ScheduledTask(2100, 2110, 3), new ScheduledTask(3000, 3010, 1), new ScheduledTask(5400, 5410, 0), new ScheduledTask(2100, 2109, 0), new ScheduledTask(5100, 5109, 2), new ScheduledTask(5000, 5009, 1), new ScheduledTask(1900, 1908, 2), new ScheduledTask(5500, 5507, 3), new ScheduledTask(4100, 4107, 3), new ScheduledTask(4700, 4707, 0), new ScheduledTask(1500, 1506, 0), new ScheduledTask(6400, 6405, 0), new ScheduledTask(4200, 4205, 0), new ScheduledTask(3900, 3903, 0)};
        int[] expectedProcessorEndTimes = new int[]{6405, 5009, 5109, 5507};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 6000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(1400, 1405, 3), new ScheduledTask(2400, 2409, 3), new ScheduledTask(1000, 1007, 0), new ScheduledTask(3500, 3508, 2), new ScheduledTask(800, 802, 0), new ScheduledTask(3600, 3603, 0), new ScheduledTask(2000, 2010, 2), new ScheduledTask(1400, 1410, 1), new ScheduledTask(2600, 2610, 0), new ScheduledTask(1700, 1709, 0), new ScheduledTask(4900, 4909, 1), new ScheduledTask(4200, 4209, 3), new ScheduledTask(2600, 2608, 1), new ScheduledTask(5300, 5307, 0), new ScheduledTask(3900, 3907, 0), new ScheduledTask(4600, 4607, 0), new ScheduledTask(3560, 3566, 1), new ScheduledTask(5150, 5155, 2), new ScheduledTask(4300, 4305, 1), new ScheduledTask(4700, 4703, 2)};
        int[] expectedProcessorEndTimes = new int[]{5307, 4909, 5155, 4209};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(14, 19, 1), new ScheduledTask(44, 53, 0), new ScheduledTask(8, 15, 0), new ScheduledTask(53, 61, 1), new ScheduledTask(22, 24, 1), new ScheduledTask(19, 22, 1), new ScheduledTask(70, 80, 1), new ScheduledTask(43, 53, 1), new ScheduledTask(33, 43, 1), new ScheduledTask(24, 33, 1), new ScheduledTask(61, 70, 1), new ScheduledTask(60, 69, 0), new ScheduledTask(21, 29, 0), new ScheduledTask(69, 76, 0), new ScheduledTask(37, 44, 0), new ScheduledTask(53, 60, 0), new ScheduledTask(15, 21, 0), new ScheduledTask(76, 81, 0), new ScheduledTask(32, 37, 0), new ScheduledTask(29, 32, 0)};
        int[] expectedProcessorEndTimes = new int[]{81, 80};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 49;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(14, 19, 1), new ScheduledTask(24, 33, 2), new ScheduledTask(20, 27, 3), new ScheduledTask(19, 27, 1), new ScheduledTask(8, 10, 0), new ScheduledTask(28, 31, 3), new ScheduledTask(20, 30, 0), new ScheduledTask(14, 24, 2), new ScheduledTask(10, 20, 0), new ScheduledTask(40, 49, 3), new ScheduledTask(31, 40, 3), new ScheduledTask(33, 42, 2), new ScheduledTask(32, 40, 1), new ScheduledTask(30, 37, 0), new ScheduledTask(42, 49, 2), new ScheduledTask(42, 49, 0), new ScheduledTask(43, 49, 1), new ScheduledTask(27, 32, 1), new ScheduledTask(37, 42, 0), new ScheduledTask(40, 43, 1)};
        int[] expectedProcessorEndTimes = new int[]{49, 49, 49, 49};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 41;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 13, 0), new ScheduledTask(18, 27, 1), new ScheduledTask(13, 20, 0), new ScheduledTask(18, 26, 2), new ScheduledTask(17, 19, 3), new ScheduledTask(22, 25, 4), new ScheduledTask(19, 29, 3), new ScheduledTask(23, 33, 5), new ScheduledTask(31, 41, 2), new ScheduledTask(32, 41, 4), new ScheduledTask(29, 38, 3), new ScheduledTask(27, 36, 1), new ScheduledTask(26, 34, 0), new ScheduledTask(33, 40, 5), new ScheduledTask(25, 32, 4), new ScheduledTask(34, 41, 0), new ScheduledTask(20, 26, 0), new ScheduledTask(26, 31, 2), new ScheduledTask(36, 41, 1), new ScheduledTask(38, 41, 3)};
        int[] expectedProcessorEndTimes = new int[]{41, 41, 41, 41, 41, 40};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot00_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_1.00_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(3000, 3012, 0), new ScheduledTask(1400, 1410, 0), new ScheduledTask(4700, 4704, 0), new ScheduledTask(900, 905, 0), new ScheduledTask(8400, 8404, 0), new ScheduledTask(4200, 4205, 0), new ScheduledTask(7200, 7212, 0), new ScheduledTask(8800, 8812, 0), new ScheduledTask(6200, 6210, 0), new ScheduledTask(4200, 4209, 1), new ScheduledTask(2300, 2309, 2), new ScheduledTask(5300, 5309, 3), new ScheduledTask(5500, 5507, 0), new ScheduledTask(10000, 10007, 0), new ScheduledTask(2400, 2406, 0), new ScheduledTask(2300, 2305, 3), new ScheduledTask(7700, 7705, 2), new ScheduledTask(1800, 1804, 1), new ScheduledTask(5300, 5302, 0), new ScheduledTask(5100, 5102, 0)};
        int[] expectedProcessorEndTimes = new int[]{10007, 4209, 7705, 5309};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot00_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_1.00_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 7100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(1400, 1412, 0), new ScheduledTask(1400, 1410, 1), new ScheduledTask(2600, 2604, 0), new ScheduledTask(900, 905, 0), new ScheduledTask(3000, 3004, 0), new ScheduledTask(4000, 4005, 2), new ScheduledTask(4600, 4612, 1), new ScheduledTask(4100, 4112, 3), new ScheduledTask(5000, 5010, 2), new ScheduledTask(5000, 5009, 0), new ScheduledTask(2300, 2309, 3), new ScheduledTask(4100, 4109, 0), new ScheduledTask(6400, 6407, 0), new ScheduledTask(3400, 3407, 0), new ScheduledTask(3400, 3406, 1), new ScheduledTask(2600, 2605, 2), new ScheduledTask(5900, 5905, 0), new ScheduledTask(1800, 1804, 2), new ScheduledTask(6500, 6502, 3), new ScheduledTask(3600, 3602, 2)};
        int[] expectedProcessorEndTimes = new int[]{6407, 4612, 5010, 6502};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot00_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_1.00_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 6150;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(1400, 1412, 0), new ScheduledTask(1400, 1410, 1), new ScheduledTask(2600, 2604, 0), new ScheduledTask(900, 905, 0), new ScheduledTask(3000, 3004, 0), new ScheduledTask(3800, 3805, 1), new ScheduledTask(4050, 4062, 2), new ScheduledTask(3400, 3412, 0), new ScheduledTask(2600, 2610, 1), new ScheduledTask(5200, 5209, 0), new ScheduledTask(2400, 2409, 2), new ScheduledTask(3300, 3309, 3), new ScheduledTask(5240, 5247, 1), new ScheduledTask(4400, 4407, 1), new ScheduledTask(4600, 4606, 0), new ScheduledTask(2300, 2305, 3), new ScheduledTask(5100, 5105, 3), new ScheduledTask(1800, 1804, 2), new ScheduledTask(5850, 5852, 2), new ScheduledTask(3750, 3752, 2)};
        int[] expectedProcessorEndTimes = new int[]{5209, 5247, 5852, 5105};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 21, 0), new ScheduledTask(14, 24, 1), new ScheduledTask(32, 36, 0), new ScheduledTask(60, 65, 1), new ScheduledTask(21, 25, 0), new ScheduledTask(55, 60, 1), new ScheduledTask(53, 65, 0), new ScheduledTask(43, 55, 1), new ScheduledTask(33, 43, 1), new ScheduledTask(24, 33, 1), new ScheduledTask(72, 81, 1), new ScheduledTask(44, 53, 0), new ScheduledTask(65, 72, 1), new ScheduledTask(25, 32, 0), new ScheduledTask(38, 44, 0), new ScheduledTask(76, 81, 0), new ScheduledTask(65, 70, 0), new ScheduledTask(72, 76, 0), new ScheduledTask(70, 72, 0), new ScheduledTask(36, 38, 0)};
        int[] expectedProcessorEndTimes = new int[]{81, 81};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 21, 0), new ScheduledTask(14, 24, 1), new ScheduledTask(21, 25, 0), new ScheduledTask(19, 24, 2), new ScheduledTask(31, 35, 2), new ScheduledTask(36, 41, 3), new ScheduledTask(25, 37, 0), new ScheduledTask(35, 47, 2), new ScheduledTask(42, 52, 1), new ScheduledTask(24, 33, 1), new ScheduledTask(33, 42, 1), new ScheduledTask(27, 36, 3), new ScheduledTask(45, 52, 3), new ScheduledTask(43, 50, 0), new ScheduledTask(37, 43, 0), new ScheduledTask(24, 29, 2), new ScheduledTask(47, 52, 2), new ScheduledTask(41, 45, 3), new ScheduledTask(50, 52, 0), new ScheduledTask(29, 31, 2)};
        int[] expectedProcessorEndTimes = new int[]{52, 52, 52, 52};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 21, 0), new ScheduledTask(14, 24, 1), new ScheduledTask(21, 25, 0), new ScheduledTask(19, 24, 2), new ScheduledTask(25, 29, 0), new ScheduledTask(29, 34, 3), new ScheduledTask(29, 41, 0), new ScheduledTask(33, 45, 4), new ScheduledTask(30, 40, 1), new ScheduledTask(36, 45, 5), new ScheduledTask(29, 38, 2), new ScheduledTask(27, 36, 5), new ScheduledTask(38, 45, 3), new ScheduledTask(38, 45, 2), new ScheduledTask(24, 30, 1), new ScheduledTask(24, 29, 2), new ScheduledTask(40, 45, 1), new ScheduledTask(28, 32, 4), new ScheduledTask(36, 38, 3), new ScheduledTask(34, 36, 3)};
        int[] expectedProcessorEndTimes = new int[]{41, 45, 45, 45, 45, 45};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot00_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_1.00_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(600, 606, 0), new ScheduledTask(1300, 1306, 1), new ScheduledTask(1400, 1408, 2), new ScheduledTask(2500, 2509, 0), new ScheduledTask(800, 802, 3), new ScheduledTask(1200, 1202, 0), new ScheduledTask(5200, 5210, 0), new ScheduledTask(6200, 6210, 0), new ScheduledTask(4200, 4210, 0), new ScheduledTask(3200, 3209, 3), new ScheduledTask(1600, 1609, 0), new ScheduledTask(3400, 3408, 0), new ScheduledTask(8000, 8007, 0), new ScheduledTask(7500, 7505, 0), new ScheduledTask(6200, 6204, 2), new ScheduledTask(6700, 6703, 1), new ScheduledTask(4900, 4903, 1), new ScheduledTask(7200, 7203, 0), new ScheduledTask(2000, 2002, 3), new ScheduledTask(1400, 1402, 0)};
        int[] expectedProcessorEndTimes = new int[]{8007, 6703, 6204, 3209};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot00_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_1.00_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(600, 606, 0), new ScheduledTask(1300, 1306, 1), new ScheduledTask(1400, 1408, 2), new ScheduledTask(1800, 1809, 3), new ScheduledTask(800, 802, 3), new ScheduledTask(1200, 1202, 0), new ScheduledTask(3600, 3610, 2), new ScheduledTask(2900, 2910, 1), new ScheduledTask(3600, 3610, 3), new ScheduledTask(2500, 2509, 0), new ScheduledTask(1600, 1609, 0), new ScheduledTask(4900, 4908, 0), new ScheduledTask(3700, 3707, 0), new ScheduledTask(4400, 4405, 0), new ScheduledTask(4900, 4904, 1), new ScheduledTask(1200, 1203, 3), new ScheduledTask(3400, 3403, 0), new ScheduledTask(3000, 3003, 2), new ScheduledTask(2500, 2502, 1), new ScheduledTask(1400, 1402, 0)};
        int[] expectedProcessorEndTimes = new int[]{4908, 4904, 3610, 3610};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot00_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_1.00_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(600, 606, 0), new ScheduledTask(1300, 1306, 3), new ScheduledTask(1400, 1408, 1), new ScheduledTask(1740, 1749, 2), new ScheduledTask(800, 802, 1), new ScheduledTask(1200, 1202, 0), new ScheduledTask(2900, 2910, 3), new ScheduledTask(3700, 3710, 1), new ScheduledTask(3900, 3910, 0), new ScheduledTask(2300, 2309, 0), new ScheduledTask(1400, 1409, 0), new ScheduledTask(3090, 3098, 2), new ScheduledTask(3200, 3207, 0), new ScheduledTask(2720, 2725, 1), new ScheduledTask(4290, 4294, 2), new ScheduledTask(1040, 1043, 1), new ScheduledTask(3320, 3323, 1), new ScheduledTask(2360, 2363, 1), new ScheduledTask(1440, 1442, 2), new ScheduledTask(2500, 2502, 3)};
        int[] expectedProcessorEndTimes = new int[]{3910, 3710, 4294, 2910};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 12, 0), new ScheduledTask(19, 25, 1), new ScheduledTask(41, 49, 0), new ScheduledTask(12, 21, 0), new ScheduledTask(8, 10, 1), new ScheduledTask(55, 57, 1), new ScheduledTask(45, 55, 1), new ScheduledTask(35, 45, 1), new ScheduledTask(25, 35, 1), new ScheduledTask(10, 19, 1), new ScheduledTask(57, 66, 1), new ScheduledTask(33, 41, 0), new ScheduledTask(57, 64, 0), new ScheduledTask(52, 57, 0), new ScheduledTask(26, 30, 0), new ScheduledTask(23, 26, 0), new ScheduledTask(30, 33, 0), new ScheduledTask(49, 52, 0), new ScheduledTask(21, 23, 0), new ScheduledTask(64, 66, 0)};
        int[] expectedProcessorEndTimes = new int[]{66, 66};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 40;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 12, 0), new ScheduledTask(13, 19, 1), new ScheduledTask(14, 22, 2), new ScheduledTask(12, 21, 0), new ScheduledTask(8, 10, 3), new ScheduledTask(29, 31, 1), new ScheduledTask(22, 32, 3), new ScheduledTask(19, 29, 1), new ScheduledTask(29, 39, 2), new ScheduledTask(13, 22, 3), new ScheduledTask(31, 40, 1), new ScheduledTask(32, 40, 3), new ScheduledTask(22, 29, 2), new ScheduledTask(33, 38, 0), new ScheduledTask(26, 30, 0), new ScheduledTask(10, 13, 3), new ScheduledTask(23, 26, 0), new ScheduledTask(30, 33, 0), new ScheduledTask(21, 23, 0), new ScheduledTask(38, 40, 0)};
        int[] expectedProcessorEndTimes = new int[]{40, 40, 39, 40};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 12, 0), new ScheduledTask(13, 19, 1), new ScheduledTask(14, 22, 2), new ScheduledTask(12, 21, 0), new ScheduledTask(8, 10, 3), new ScheduledTask(24, 26, 3), new ScheduledTask(21, 31, 4), new ScheduledTask(22, 32, 1), new ScheduledTask(23, 33, 5), new ScheduledTask(10, 19, 3), new ScheduledTask(26, 35, 3), new ScheduledTask(21, 29, 0), new ScheduledTask(22, 29, 2), new ScheduledTask(29, 34, 2), new ScheduledTask(31, 35, 4), new ScheduledTask(16, 19, 5), new ScheduledTask(19, 22, 1), new ScheduledTask(32, 35, 1), new ScheduledTask(14, 16, 5), new ScheduledTask(33, 35, 5)};
        int[] expectedProcessorEndTimes = new int[]{29, 35, 34, 35, 35, 35};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot01_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_1.01_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(400, 406, 0), new ScheduledTask(900, 909, 1), new ScheduledTask(1600, 1604, 2), new ScheduledTask(1300, 1305, 3), new ScheduledTask(2700, 2707, 0), new ScheduledTask(1000, 1010, 0), new ScheduledTask(6800, 6810, 0), new ScheduledTask(4500, 4510, 0), new ScheduledTask(5800, 5810, 0), new ScheduledTask(8600, 8609, 0), new ScheduledTask(4000, 4009, 2), new ScheduledTask(4300, 4308, 3), new ScheduledTask(7800, 7808, 0), new ScheduledTask(6300, 6305, 1), new ScheduledTask(4000, 4005, 0), new ScheduledTask(3600, 3604, 0), new ScheduledTask(2300, 2304, 0), new ScheduledTask(5500, 5503, 0), new ScheduledTask(2000, 2003, 0), new ScheduledTask(3400, 3402, 0)};
        int[] expectedProcessorEndTimes = new int[]{8609, 6305, 4009, 4308};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot01_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_1.01_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 6200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(400, 406, 0), new ScheduledTask(900, 909, 1), new ScheduledTask(1600, 1604, 2), new ScheduledTask(1300, 1305, 3), new ScheduledTask(1000, 1007, 0), new ScheduledTask(2300, 2310, 3), new ScheduledTask(4200, 4210, 2), new ScheduledTask(3400, 3410, 1), new ScheduledTask(5200, 5210, 0), new ScheduledTask(4300, 4309, 3), new ScheduledTask(2400, 2409, 2), new ScheduledTask(2800, 2808, 0), new ScheduledTask(4100, 4108, 0), new ScheduledTask(3600, 3605, 0), new ScheduledTask(2300, 2305, 0), new ScheduledTask(1900, 1904, 0), new ScheduledTask(5400, 5404, 1), new ScheduledTask(2800, 2803, 1), new ScheduledTask(4900, 4903, 0), new ScheduledTask(1700, 1702, 0)};
        int[] expectedProcessorEndTimes = new int[]{5210, 5404, 4210, 4309};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot01_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_1.01_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5220;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(900, 906, 1), new ScheduledTask(900, 909, 2), new ScheduledTask(2460, 2464, 1), new ScheduledTask(400, 405, 0), new ScheduledTask(1620, 1627, 1), new ScheduledTask(2200, 2210, 0), new ScheduledTask(1200, 1210, 0), new ScheduledTask(3600, 3610, 2), new ScheduledTask(2940, 2950, 1), new ScheduledTask(2250, 2259, 2), new ScheduledTask(4140, 4149, 1), new ScheduledTask(1400, 1408, 3), new ScheduledTask(3000, 3008, 3), new ScheduledTask(4700, 4705, 0), new ScheduledTask(4200, 4205, 0), new ScheduledTask(3800, 3804, 0), new ScheduledTask(3200, 3204, 0), new ScheduledTask(900, 903, 0), new ScheduledTask(4600, 4603, 3), new ScheduledTask(3600, 3602, 0)};
        int[] expectedProcessorEndTimes = new int[]{4705, 4149, 3610, 4603};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(9, 15, 1), new ScheduledTask(20, 29, 0), new ScheduledTask(48, 52, 1), new ScheduledTask(4, 9, 0), new ScheduledTask(35, 42, 1), new ScheduledTask(15, 25, 1), new ScheduledTask(25, 35, 1), new ScheduledTask(52, 62, 1), new ScheduledTask(62, 72, 1), new ScheduledTask(49, 58, 0), new ScheduledTask(63, 72, 0), new ScheduledTask(12, 20, 0), new ScheduledTask(41, 49, 0), new ScheduledTask(36, 41, 0), new ScheduledTask(58, 63, 0), new ScheduledTask(44, 48, 1), new ScheduledTask(32, 36, 0), new ScheduledTask(9, 12, 0), new ScheduledTask(29, 32, 0), new ScheduledTask(42, 44, 1)};
        int[] expectedProcessorEndTimes = new int[]{72, 72};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 42;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(9, 15, 1), new ScheduledTask(9, 18, 2), new ScheduledTask(15, 19, 1), new ScheduledTask(4, 9, 0), new ScheduledTask(19, 26, 1), new ScheduledTask(20, 30, 0), new ScheduledTask(9, 19, 0), new ScheduledTask(25, 35, 3), new ScheduledTask(32, 42, 2), new ScheduledTask(23, 32, 2), new ScheduledTask(30, 39, 1), new ScheduledTask(17, 25, 3), new ScheduledTask(34, 42, 0), new ScheduledTask(18, 23, 2), new ScheduledTask(37, 42, 3), new ScheduledTask(26, 30, 1), new ScheduledTask(30, 34, 0), new ScheduledTask(14, 17, 3), new ScheduledTask(39, 42, 1), new ScheduledTask(35, 37, 3)};
        int[] expectedProcessorEndTimes = new int[]{42, 42, 42, 42};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 10, 0), new ScheduledTask(9, 18, 1), new ScheduledTask(10, 14, 0), new ScheduledTask(13, 18, 2), new ScheduledTask(16, 23, 3), new ScheduledTask(15, 25, 4), new ScheduledTask(25, 35, 0), new ScheduledTask(19, 29, 5), new ScheduledTask(14, 24, 0), new ScheduledTask(26, 35, 1), new ScheduledTask(26, 35, 2), new ScheduledTask(18, 26, 2), new ScheduledTask(18, 26, 1), new ScheduledTask(29, 34, 5), new ScheduledTask(30, 35, 3), new ScheduledTask(29, 33, 4), new ScheduledTask(25, 29, 4), new ScheduledTask(23, 26, 3), new ScheduledTask(27, 30, 3), new ScheduledTask(33, 35, 4)};
        int[] expectedProcessorEndTimes = new int[]{35, 35, 35, 35, 35, 34};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot02_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_1.02_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(800, 806, 0), new ScheduledTask(1400, 1404, 0), new ScheduledTask(1200, 1206, 1), new ScheduledTask(1000, 1005, 2), new ScheduledTask(2200, 2209, 3), new ScheduledTask(4000, 4003, 2), new ScheduledTask(3700, 3710, 0), new ScheduledTask(2700, 2710, 0), new ScheduledTask(7500, 7509, 0), new ScheduledTask(1800, 1809, 0), new ScheduledTask(4700, 4708, 0), new ScheduledTask(5500, 5507, 0), new ScheduledTask(4800, 4807, 1), new ScheduledTask(6200, 6207, 0), new ScheduledTask(5800, 5804, 2), new ScheduledTask(8400, 8404, 0), new ScheduledTask(7200, 7203, 0), new ScheduledTask(6900, 6903, 0), new ScheduledTask(7600, 7602, 3), new ScheduledTask(8800, 8802, 0)};
        int[] expectedProcessorEndTimes = new int[]{8802, 4807, 5804, 7602};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot02_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_1.02_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(800, 806, 0), new ScheduledTask(2800, 2804, 0), new ScheduledTask(1200, 1206, 1), new ScheduledTask(1000, 1005, 2), new ScheduledTask(1700, 1709, 0), new ScheduledTask(1400, 1403, 0), new ScheduledTask(4900, 4910, 0), new ScheduledTask(3900, 3910, 3), new ScheduledTask(4000, 4009, 2), new ScheduledTask(4000, 4009, 1), new ScheduledTask(2000, 2008, 2), new ScheduledTask(4200, 4207, 0), new ScheduledTask(3500, 3507, 0), new ScheduledTask(1900, 1907, 3), new ScheduledTask(2400, 2404, 1), new ScheduledTask(3200, 3204, 1), new ScheduledTask(3300, 3303, 3), new ScheduledTask(3200, 3203, 0), new ScheduledTask(3600, 3602, 2), new ScheduledTask(2600, 2602, 0)};
        int[] expectedProcessorEndTimes = new int[]{4910, 4009, 4009, 3910};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot02_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_1.02_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(800, 806, 0), new ScheduledTask(2000, 2004, 0), new ScheduledTask(1200, 1206, 1), new ScheduledTask(1000, 1005, 2), new ScheduledTask(2200, 2209, 1), new ScheduledTask(1400, 1403, 0), new ScheduledTask(3550, 3560, 2), new ScheduledTask(3880, 3890, 1), new ScheduledTask(3300, 3309, 3), new ScheduledTask(3800, 3809, 0), new ScheduledTask(1750, 1758, 2), new ScheduledTask(3100, 3107, 0), new ScheduledTask(2400, 2407, 0), new ScheduledTask(1900, 1907, 3), new ScheduledTask(2950, 2954, 2), new ScheduledTask(4700, 4704, 0), new ScheduledTask(3520, 3523, 1), new ScheduledTask(1700, 1703, 0), new ScheduledTask(1920, 1922, 1), new ScheduledTask(3280, 3282, 1)};
        int[] expectedProcessorEndTimes = new int[]{4704, 3890, 3560, 3309};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 14, 0), new ScheduledTask(35, 39, 1), new ScheduledTask(15, 21, 1), new ScheduledTask(10, 15, 1), new ScheduledTask(53, 62, 0), new ScheduledTask(14, 17, 0), new ScheduledTask(58, 68, 1), new ScheduledTask(48, 58, 1), new ScheduledTask(23, 32, 1), new ScheduledTask(39, 48, 1), new ScheduledTask(45, 53, 0), new ScheduledTask(38, 45, 0), new ScheduledTask(27, 34, 0), new ScheduledTask(20, 27, 0), new ScheduledTask(34, 38, 0), new ScheduledTask(62, 66, 0), new ScheduledTask(32, 35, 1), new ScheduledTask(17, 20, 0), new ScheduledTask(21, 23, 1), new ScheduledTask(66, 68, 0)};
        int[] expectedProcessorEndTimes = new int[]{68, 68};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_1.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 42;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 14, 0), new ScheduledTask(14, 18, 0), new ScheduledTask(12, 18, 1), new ScheduledTask(10, 15, 2), new ScheduledTask(18, 27, 0), new ScheduledTask(25, 28, 1), new ScheduledTask(27, 37, 0), new ScheduledTask(26, 36, 3), new ScheduledTask(31, 40, 2), new ScheduledTask(22, 31, 2), new ScheduledTask(18, 26, 3), new ScheduledTask(15, 22, 2), new ScheduledTask(18, 25, 1), new ScheduledTask(31, 38, 1), new ScheduledTask(38, 42, 3), new ScheduledTask(38, 42, 1), new ScheduledTask(28, 31, 1), new ScheduledTask(37, 40, 0), new ScheduledTask(36, 38, 3), new ScheduledTask(40, 42, 2)};
        int[] expectedProcessorEndTimes = new int[]{40, 42, 42, 42};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_1.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 14, 0), new ScheduledTask(14, 18, 0), new ScheduledTask(12, 18, 1), new ScheduledTask(10, 15, 2), new ScheduledTask(22, 31, 2), new ScheduledTask(20, 23, 3), new ScheduledTask(18, 28, 0), new ScheduledTask(25, 35, 4), new ScheduledTask(26, 35, 5), new ScheduledTask(23, 32, 3), new ScheduledTask(18, 26, 5), new ScheduledTask(15, 22, 2), new ScheduledTask(18, 25, 4), new ScheduledTask(25, 32, 1), new ScheduledTask(32, 36, 3), new ScheduledTask(31, 35, 2), new ScheduledTask(33, 36, 1), new ScheduledTask(30, 33, 0), new ScheduledTask(35, 37, 5), new ScheduledTask(35, 37, 2)};
        int[] expectedProcessorEndTimes = new int[]{33, 36, 37, 36, 35, 37};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot03_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_1.03_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(1300, 1308, 0), new ScheduledTask(3500, 3510, 0), new ScheduledTask(800, 809, 1), new ScheduledTask(2100, 2105, 0), new ScheduledTask(400, 407, 0), new ScheduledTask(2700, 2704, 2), new ScheduledTask(6900, 6910, 0), new ScheduledTask(2600, 2609, 0), new ScheduledTask(1500, 1508, 3), new ScheduledTask(5300, 5308, 0), new ScheduledTask(4500, 4508, 0), new ScheduledTask(5100, 5105, 2), new ScheduledTask(6300, 6304, 0), new ScheduledTask(6300, 6303, 3), new ScheduledTask(6200, 6203, 1), new ScheduledTask(1500, 1502, 2), new ScheduledTask(1100, 1102, 0), new ScheduledTask(7900, 7902, 0), new ScheduledTask(6700, 6702, 0), new ScheduledTask(6100, 6102, 0)};
        int[] expectedProcessorEndTimes = new int[]{7902, 6203, 5105, 6303};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot03_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_1.03_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(400, 408, 0), new ScheduledTask(1700, 1710, 0), new ScheduledTask(800, 809, 1), new ScheduledTask(1200, 1205, 0), new ScheduledTask(1600, 1607, 2), new ScheduledTask(1600, 1604, 3), new ScheduledTask(3400, 3410, 3), new ScheduledTask(3600, 3609, 2), new ScheduledTask(3800, 3808, 1), new ScheduledTask(4600, 4608, 0), new ScheduledTask(3000, 3008, 0), new ScheduledTask(2400, 2405, 3), new ScheduledTask(3000, 3004, 1), new ScheduledTask(3000, 3003, 2), new ScheduledTask(2700, 2703, 0), new ScheduledTask(4400, 4402, 0), new ScheduledTask(4200, 4202, 0), new ScheduledTask(2600, 2602, 1), new ScheduledTask(4000, 4002, 0), new ScheduledTask(3800, 3802, 0)};
        int[] expectedProcessorEndTimes = new int[]{4608, 3808, 3609, 3410};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot03_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_1.03_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4560;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(800, 808, 1), new ScheduledTask(1760, 1770, 1), new ScheduledTask(800, 809, 2), new ScheduledTask(1960, 1965, 0), new ScheduledTask(400, 407, 0), new ScheduledTask(2160, 2164, 3), new ScheduledTask(2450, 2460, 2), new ScheduledTask(2460, 2469, 0), new ScheduledTask(1100, 1108, 0), new ScheduledTask(3560, 3568, 1), new ScheduledTask(3560, 3568, 0), new ScheduledTask(2960, 2965, 3), new ScheduledTask(3950, 3954, 2), new ScheduledTask(3960, 3963, 3), new ScheduledTask(2960, 2963, 1), new ScheduledTask(1500, 1502, 3), new ScheduledTask(2150, 2152, 2), new ScheduledTask(3320, 3322, 1), new ScheduledTask(3360, 3362, 0), new ScheduledTask(4360, 4362, 0)};
        int[] expectedProcessorEndTimes = new int[]{4362, 3568, 3954, 3963};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot03_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_1.03_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 12, 0), new ScheduledTask(12, 22, 0), new ScheduledTask(8, 17, 1), new ScheduledTask(17, 22, 1), new ScheduledTask(22, 29, 0), new ScheduledTask(22, 26, 1), new ScheduledTask(26, 36, 1), new ScheduledTask(29, 38, 0), new ScheduledTask(36, 44, 1), new ScheduledTask(38, 46, 0), new ScheduledTask(44, 52, 1), new ScheduledTask(46, 51, 0), new ScheduledTask(51, 55, 0), new ScheduledTask(52, 55, 1), new ScheduledTask(55, 58, 0), new ScheduledTask(55, 57, 1), new ScheduledTask(57, 59, 1), new ScheduledTask(58, 60, 0), new ScheduledTask(59, 61, 1), new ScheduledTask(60, 62, 0)};
        int[] expectedProcessorEndTimes = new int[]{62, 61};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot03_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_1.03_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 38;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(8, 16, 1), new ScheduledTask(16, 26, 1), new ScheduledTask(8, 17, 2), new ScheduledTask(18, 23, 3), new ScheduledTask(4, 11, 0), new ScheduledTask(23, 27, 3), new ScheduledTask(19, 29, 2), new ScheduledTask(25, 34, 0), new ScheduledTask(13, 21, 0), new ScheduledTask(26, 34, 1), new ScheduledTask(30, 38, 3), new ScheduledTask(29, 34, 2), new ScheduledTask(34, 38, 2), new ScheduledTask(35, 38, 1), new ScheduledTask(34, 37, 0), new ScheduledTask(15, 17, 3), new ScheduledTask(11, 13, 0), new ScheduledTask(17, 19, 2), new ScheduledTask(22, 24, 0), new ScheduledTask(27, 29, 3)};
        int[] expectedProcessorEndTimes = new int[]{37, 38, 38, 38};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot03_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_1.03_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 34;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 12, 0), new ScheduledTask(12, 22, 0), new ScheduledTask(8, 17, 1), new ScheduledTask(14, 19, 2), new ScheduledTask(16, 23, 3), new ScheduledTask(16, 20, 4), new ScheduledTask(17, 27, 1), new ScheduledTask(19, 28, 2), new ScheduledTask(23, 31, 3), new ScheduledTask(22, 30, 0), new ScheduledTask(26, 34, 4), new ScheduledTask(24, 29, 5), new ScheduledTask(27, 31, 1), new ScheduledTask(28, 31, 2), new ScheduledTask(29, 32, 5), new ScheduledTask(30, 32, 0), new ScheduledTask(31, 33, 3), new ScheduledTask(31, 33, 1), new ScheduledTask(31, 33, 2), new ScheduledTask(32, 34, 0)};
        int[] expectedProcessorEndTimes = new int[]{34, 33, 33, 33, 34, 32};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot04_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_1.04_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 7800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(400, 404, 0), new ScheduledTask(800, 810, 0), new ScheduledTask(1300, 1306, 1), new ScheduledTask(1200, 1203, 2), new ScheduledTask(1100, 1102, 3), new ScheduledTask(2300, 2302, 3), new ScheduledTask(6800, 6810, 0), new ScheduledTask(3000, 3008, 2), new ScheduledTask(3400, 3408, 0), new ScheduledTask(6000, 6008, 0), new ScheduledTask(4400, 4408, 0), new ScheduledTask(3500, 3507, 3), new ScheduledTask(2800, 2806, 0), new ScheduledTask(5200, 5206, 0), new ScheduledTask(2300, 2305, 0), new ScheduledTask(4900, 4904, 1), new ScheduledTask(2000, 2003, 0), new ScheduledTask(1800, 1802, 0), new ScheduledTask(4200, 4202, 0), new ScheduledTask(5800, 5802, 0)};
        int[] expectedProcessorEndTimes = new int[]{6810, 4904, 3008, 3507};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot04_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_1.04_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(800, 804, 1), new ScheduledTask(600, 610, 0), new ScheduledTask(2100, 2106, 2), new ScheduledTask(1600, 1603, 1), new ScheduledTask(2100, 2102, 0), new ScheduledTask(400, 402, 0), new ScheduledTask(4000, 4010, 0), new ScheduledTask(3400, 3408, 3), new ScheduledTask(3300, 3308, 2), new ScheduledTask(2200, 2208, 1), new ScheduledTask(2900, 2908, 0), new ScheduledTask(1000, 1007, 3), new ScheduledTask(2300, 2306, 0), new ScheduledTask(3800, 3806, 1), new ScheduledTask(2400, 2405, 3), new ScheduledTask(800, 804, 2), new ScheduledTask(1800, 1803, 0), new ScheduledTask(1600, 1602, 0), new ScheduledTask(1600, 1602, 2), new ScheduledTask(3800, 3802, 0)};
        int[] expectedProcessorEndTimes = new int[]{4010, 3806, 3308, 3408};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot04_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_1.04_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4280;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(800, 804, 1), new ScheduledTask(600, 610, 0), new ScheduledTask(1280, 1286, 1), new ScheduledTask(1700, 1703, 2), new ScheduledTask(1600, 1602, 0), new ScheduledTask(400, 402, 0), new ScheduledTask(3080, 3090, 1), new ScheduledTask(2600, 2608, 0), new ScheduledTask(1800, 1808, 0), new ScheduledTask(2150, 2158, 2), new ScheduledTask(3400, 3408, 0), new ScheduledTask(1000, 1007, 3), new ScheduledTask(3000, 3006, 3), new ScheduledTask(3350, 3356, 2), new ScheduledTask(2480, 2485, 1), new ScheduledTask(800, 804, 2), new ScheduledTask(2400, 2403, 3), new ScheduledTask(2240, 2242, 1), new ScheduledTask(1400, 1402, 2), new ScheduledTask(2000, 2002, 1)};
        int[] expectedProcessorEndTimes = new int[]{3408, 3090, 3356, 3006};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot04_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_1.04_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(8, 12, 1), new ScheduledTask(31, 41, 1), new ScheduledTask(19, 25, 0), new ScheduledTask(20, 23, 1), new ScheduledTask(12, 14, 1), new ScheduledTask(4, 6, 0), new ScheduledTask(49, 59, 1), new ScheduledTask(41, 49, 1), new ScheduledTask(23, 31, 1), new ScheduledTask(41, 49, 0), new ScheduledTask(33, 41, 0), new ScheduledTask(12, 19, 0), new ScheduledTask(14, 20, 1), new ScheduledTask(27, 33, 0), new ScheduledTask(54, 59, 0), new ScheduledTask(8, 12, 0), new ScheduledTask(51, 54, 0), new ScheduledTask(49, 51, 0), new ScheduledTask(6, 8, 0), new ScheduledTask(25, 27, 0)};
        int[] expectedProcessorEndTimes = new int[]{59, 59};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot04_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_1.04_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(8, 12, 1), new ScheduledTask(6, 16, 0), new ScheduledTask(17, 23, 2), new ScheduledTask(16, 19, 3), new ScheduledTask(12, 14, 1), new ScheduledTask(4, 6, 0), new ScheduledTask(25, 35, 2), new ScheduledTask(27, 35, 3), new ScheduledTask(14, 22, 1), new ScheduledTask(19, 27, 3), new ScheduledTask(26, 34, 1), new ScheduledTask(10, 17, 2), new ScheduledTask(21, 27, 0), new ScheduledTask(27, 33, 0), new ScheduledTask(16, 21, 0), new ScheduledTask(8, 12, 3), new ScheduledTask(23, 26, 1), new ScheduledTask(23, 25, 2), new ScheduledTask(13, 15, 3), new ScheduledTask(33, 35, 0)};
        int[] expectedProcessorEndTimes = new int[]{35, 34, 35, 35};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot04_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_1.04_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 8, 0), new ScheduledTask(10, 20, 0), new ScheduledTask(13, 19, 1), new ScheduledTask(12, 15, 2), new ScheduledTask(11, 13, 3), new ScheduledTask(8, 10, 0), new ScheduledTask(19, 29, 1), new ScheduledTask(19, 27, 4), new ScheduledTask(19, 27, 3), new ScheduledTask(15, 23, 2), new ScheduledTask(21, 29, 5), new ScheduledTask(14, 21, 5), new ScheduledTask(13, 19, 3), new ScheduledTask(23, 29, 2), new ScheduledTask(20, 25, 0), new ScheduledTask(12, 16, 4), new ScheduledTask(25, 28, 0), new ScheduledTask(27, 29, 4), new ScheduledTask(17, 19, 4), new ScheduledTask(27, 29, 3)};
        int[] expectedProcessorEndTimes = new int[]{28, 29, 29, 29, 29, 29};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot05_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_1.05_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 12;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 12, 0), new ScheduledTask(12, 20, 0), new ScheduledTask(12, 22, 1), new ScheduledTask(19, 23, 2), new ScheduledTask(20, 24, 3), new ScheduledTask(20, 24, 0), new ScheduledTask(22, 32, 1), new ScheduledTask(25, 35, 4), new ScheduledTask(23, 32, 2), new ScheduledTask(24, 33, 0), new ScheduledTask(30, 37, 3), new ScheduledTask(27, 34, 5), new ScheduledTask(29, 36, 6), new ScheduledTask(26, 33, 7), new ScheduledTask(24, 30, 3), new ScheduledTask(32, 37, 2), new ScheduledTask(27, 31, 8), new ScheduledTask(32, 35, 9), new ScheduledTask(32, 34, 10), new ScheduledTask(32, 34, 11)};
        int[] expectedProcessorEndTimes = new int[]{33, 32, 37, 37, 35, 34, 36, 33, 31, 35, 34, 34};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot05_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_1.05_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 12, 0), new ScheduledTask(12, 20, 0), new ScheduledTask(12, 22, 1), new ScheduledTask(20, 24, 0), new ScheduledTask(22, 26, 1), new ScheduledTask(24, 28, 0), new ScheduledTask(26, 36, 1), new ScheduledTask(28, 38, 0), new ScheduledTask(36, 45, 1), new ScheduledTask(38, 47, 0), new ScheduledTask(45, 52, 1), new ScheduledTask(47, 54, 0), new ScheduledTask(52, 59, 1), new ScheduledTask(54, 61, 0), new ScheduledTask(59, 65, 1), new ScheduledTask(61, 66, 0), new ScheduledTask(65, 69, 1), new ScheduledTask(66, 69, 0), new ScheduledTask(69, 71, 0), new ScheduledTask(69, 71, 1)};
        int[] expectedProcessorEndTimes = new int[]{71, 71};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot05_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_1.05_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 44;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(15, 17, 1), new ScheduledTask(17, 25, 1), new ScheduledTask(12, 22, 2), new ScheduledTask(10, 14, 0), new ScheduledTask(28, 32, 0), new ScheduledTask(25, 29, 3), new ScheduledTask(24, 34, 2), new ScheduledTask(34, 44, 2), new ScheduledTask(19, 28, 0), new ScheduledTask(25, 34, 1), new ScheduledTask(18, 25, 3), new ScheduledTask(29, 36, 3), new ScheduledTask(36, 43, 3), new ScheduledTask(37, 44, 1), new ScheduledTask(36, 42, 0), new ScheduledTask(14, 19, 0), new ScheduledTask(32, 36, 0), new ScheduledTask(34, 37, 1), new ScheduledTask(22, 24, 2), new ScheduledTask(42, 44, 0)};
        int[] expectedProcessorEndTimes = new int[]{44, 44, 44, 43};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot05_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_1.05_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 12, 0), new ScheduledTask(12, 20, 0), new ScheduledTask(12, 22, 1), new ScheduledTask(19, 23, 2), new ScheduledTask(20, 24, 3), new ScheduledTask(18, 22, 4), new ScheduledTask(27, 37, 5), new ScheduledTask(25, 35, 6), new ScheduledTask(23, 32, 2), new ScheduledTask(20, 29, 0), new ScheduledTask(27, 34, 7), new ScheduledTask(22, 29, 4), new ScheduledTask(29, 36, 4), new ScheduledTask(24, 31, 3), new ScheduledTask(31, 37, 3), new ScheduledTask(32, 37, 2), new ScheduledTask(32, 36, 1), new ScheduledTask(34, 37, 7), new ScheduledTask(35, 37, 6), new ScheduledTask(30, 32, 1)};
        int[] expectedProcessorEndTimes = new int[]{29, 36, 37, 37, 36, 37, 37, 37};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot07_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_1.07_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(700, 702, 0), new ScheduledTask(900, 906, 0), new ScheduledTask(2900, 2908, 0), new ScheduledTask(900, 905, 1), new ScheduledTask(1900, 1907, 2), new ScheduledTask(1200, 1202, 3), new ScheduledTask(5900, 5910, 0), new ScheduledTask(5000, 5009, 0), new ScheduledTask(2100, 2108, 0), new ScheduledTask(3900, 3907, 1), new ScheduledTask(4300, 4307, 3), new ScheduledTask(1500, 1506, 0), new ScheduledTask(7900, 7906, 0), new ScheduledTask(7400, 7405, 0), new ScheduledTask(6900, 6905, 0), new ScheduledTask(4200, 4205, 0), new ScheduledTask(3700, 3705, 0), new ScheduledTask(6100, 6104, 2), new ScheduledTask(2400, 2403, 3), new ScheduledTask(4700, 4703, 0)};
        int[] expectedProcessorEndTimes = new int[]{7906, 3907, 6104, 4307};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot07_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_1.07_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(700, 702, 0), new ScheduledTask(900, 906, 0), new ScheduledTask(1300, 1308, 1), new ScheduledTask(900, 905, 2), new ScheduledTask(2600, 2607, 3), new ScheduledTask(1200, 1202, 3), new ScheduledTask(1900, 1910, 2), new ScheduledTask(3700, 3709, 1), new ScheduledTask(2100, 2108, 0), new ScheduledTask(3200, 3207, 0), new ScheduledTask(4000, 4007, 3), new ScheduledTask(1500, 1506, 0), new ScheduledTask(4400, 4406, 0), new ScheduledTask(5000, 5005, 0), new ScheduledTask(4500, 4505, 2), new ScheduledTask(3900, 3905, 0), new ScheduledTask(1600, 1605, 3), new ScheduledTask(2900, 2904, 1), new ScheduledTask(3900, 3903, 2), new ScheduledTask(2900, 2903, 0)};
        int[] expectedProcessorEndTimes = new int[]{5005, 3709, 4505, 4007};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot07_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_1.07_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(700, 702, 0), new ScheduledTask(900, 906, 0), new ScheduledTask(1300, 1308, 2), new ScheduledTask(900, 905, 3), new ScheduledTask(1900, 1907, 3), new ScheduledTask(1200, 1202, 1), new ScheduledTask(2600, 2610, 0), new ScheduledTask(2500, 2509, 2), new ScheduledTask(1800, 1808, 0), new ScheduledTask(3300, 3307, 3), new ScheduledTask(3600, 3607, 0), new ScheduledTask(2880, 2886, 1), new ScheduledTask(3850, 3856, 2), new ScheduledTask(4200, 4205, 1), new ScheduledTask(4300, 4305, 0), new ScheduledTask(3600, 3605, 1), new ScheduledTask(1920, 1925, 1), new ScheduledTask(1440, 1444, 1), new ScheduledTask(1500, 1503, 0), new ScheduledTask(2520, 2523, 1)};
        int[] expectedProcessorEndTimes = new int[]{4305, 4205, 3856, 3307};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot07_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_1.07_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(25, 27, 0), new ScheduledTask(7, 13, 0), new ScheduledTask(41, 49, 1), new ScheduledTask(9, 14, 1), new ScheduledTask(27, 34, 0), new ScheduledTask(39, 41, 1), new ScheduledTask(21, 31, 1), new ScheduledTask(49, 58, 1), new ScheduledTask(31, 39, 1), new ScheduledTask(14, 21, 1), new ScheduledTask(58, 65, 1), new ScheduledTask(16, 22, 0), new ScheduledTask(44, 50, 0), new ScheduledTask(39, 44, 0), new ScheduledTask(34, 39, 0), new ScheduledTask(59, 64, 0), new ScheduledTask(54, 59, 0), new ScheduledTask(50, 54, 0), new ScheduledTask(13, 16, 0), new ScheduledTask(22, 25, 0)};
        int[] expectedProcessorEndTimes = new int[]{64, 65};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot07_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_1.07_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 39;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 9, 0), new ScheduledTask(9, 15, 0), new ScheduledTask(13, 21, 1), new ScheduledTask(9, 14, 2), new ScheduledTask(21, 28, 1), new ScheduledTask(12, 14, 3), new ScheduledTask(22, 32, 3), new ScheduledTask(28, 37, 2), new ScheduledTask(21, 29, 0), new ScheduledTask(14, 21, 2), new ScheduledTask(32, 39, 3), new ScheduledTask(15, 21, 0), new ScheduledTask(28, 34, 1), new ScheduledTask(34, 39, 1), new ScheduledTask(34, 39, 0), new ScheduledTask(29, 34, 0), new ScheduledTask(14, 19, 3), new ScheduledTask(21, 25, 2), new ScheduledTask(25, 28, 2), new ScheduledTask(19, 22, 3)};
        int[] expectedProcessorEndTimes = new int[]{39, 39, 37, 39};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_1dot07_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_1.07_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 9, 0), new ScheduledTask(9, 15, 0), new ScheduledTask(13, 21, 1), new ScheduledTask(9, 14, 2), new ScheduledTask(15, 22, 0), new ScheduledTask(12, 14, 3), new ScheduledTask(14, 24, 2), new ScheduledTask(21, 30, 1), new ScheduledTask(25, 33, 2), new ScheduledTask(27, 34, 0), new ScheduledTask(27, 34, 3), new ScheduledTask(24, 30, 4), new ScheduledTask(28, 34, 5), new ScheduledTask(30, 35, 4), new ScheduledTask(22, 27, 0), new ScheduledTask(30, 35, 1), new ScheduledTask(23, 28, 5), new ScheduledTask(19, 23, 5), new ScheduledTask(24, 27, 3), new ScheduledTask(19, 22, 4)};
        int[] expectedProcessorEndTimes = new int[]{34, 35, 33, 34, 35, 34};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(1300, 1308, 0), new ScheduledTask(7100, 7102, 0), new ScheduledTask(500, 504, 0), new ScheduledTask(4200, 4209, 0), new ScheduledTask(2300, 2303, 0), new ScheduledTask(2100, 2102, 0), new ScheduledTask(7300, 7310, 0), new ScheduledTask(3300, 3309, 0), new ScheduledTask(8800, 8808, 0), new ScheduledTask(6300, 6308, 0), new ScheduledTask(4400, 4408, 1), new ScheduledTask(2600, 2607, 0), new ScheduledTask(5600, 5607, 0), new ScheduledTask(8300, 8305, 0), new ScheduledTask(5100, 5105, 0), new ScheduledTask(6600, 6605, 2), new ScheduledTask(4400, 4405, 3), new ScheduledTask(900, 904, 0), new ScheduledTask(4700, 4703, 2), new ScheduledTask(8300, 8302, 3)};
        int[] expectedProcessorEndTimes = new int[]{8808, 4408, 6605, 8302};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(900, 908, 0), new ScheduledTask(2000, 2002, 0), new ScheduledTask(500, 504, 0), new ScheduledTask(2200, 2209, 0), new ScheduledTask(1700, 1703, 0), new ScheduledTask(3800, 3802, 1), new ScheduledTask(5400, 5410, 2), new ScheduledTask(6800, 6809, 0), new ScheduledTask(6000, 6008, 0), new ScheduledTask(5200, 5208, 0), new ScheduledTask(4200, 4208, 1), new ScheduledTask(4500, 4507, 0), new ScheduledTask(3800, 3807, 0), new ScheduledTask(3300, 3305, 0), new ScheduledTask(5200, 5205, 3), new ScheduledTask(5800, 5805, 1), new ScheduledTask(6300, 6305, 3), new ScheduledTask(7300, 7304, 3), new ScheduledTask(4100, 4103, 3), new ScheduledTask(3100, 3102, 0)};
        int[] expectedProcessorEndTimes = new int[]{6809, 5805, 5410, 7304};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 7460;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(500, 508, 0), new ScheduledTask(2500, 2502, 0), new ScheduledTask(5600, 5604, 0), new ScheduledTask(1300, 1309, 0), new ScheduledTask(2200, 2203, 0), new ScheduledTask(3400, 3402, 1), new ScheduledTask(5900, 5910, 2), new ScheduledTask(4700, 4709, 0), new ScheduledTask(3900, 3908, 0), new ScheduledTask(6500, 6508, 1), new ScheduledTask(4240, 4248, 1), new ScheduledTask(6600, 6607, 0), new ScheduledTask(3200, 3207, 0), new ScheduledTask(2700, 2705, 0), new ScheduledTask(5200, 5205, 3), new ScheduledTask(3640, 3645, 1), new ScheduledTask(6200, 6205, 3), new ScheduledTask(6000, 6004, 0), new ScheduledTask(4600, 4603, 3), new ScheduledTask(6400, 6402, 0)};
        int[] expectedProcessorEndTimes = new int[]{6607, 6508, 5910, 6205};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 13, 0), new ScheduledTask(25, 27, 0), new ScheduledTask(59, 63, 0), new ScheduledTask(16, 25, 0), new ScheduledTask(13, 16, 0), new ScheduledTask(34, 36, 1), new ScheduledTask(59, 69, 1), new ScheduledTask(50, 59, 0), new ScheduledTask(42, 50, 0), new ScheduledTask(69, 77, 1), new ScheduledTask(51, 59, 1), new ScheduledTask(69, 76, 0), new ScheduledTask(35, 42, 0), new ScheduledTask(30, 35, 0), new ScheduledTask(46, 51, 1), new ScheduledTask(41, 46, 1), new ScheduledTask(36, 41, 1), new ScheduledTask(63, 67, 0), new ScheduledTask(27, 30, 0), new ScheduledTask(67, 69, 0)};
        int[] expectedProcessorEndTimes = new int[]{76, 77};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 13, 0), new ScheduledTask(29, 31, 0), new ScheduledTask(56, 60, 0), new ScheduledTask(13, 22, 0), new ScheduledTask(36, 39, 0), new ScheduledTask(34, 36, 1), new ScheduledTask(63, 73, 2), new ScheduledTask(47, 56, 0), new ScheduledTask(39, 47, 0), new ScheduledTask(65, 73, 1), new ScheduledTask(41, 49, 1), new ScheduledTask(66, 73, 0), new ScheduledTask(22, 29, 0), new ScheduledTask(31, 36, 0), new ScheduledTask(68, 73, 3), new ScheduledTask(36, 41, 1), new ScheduledTask(63, 68, 3), new ScheduledTask(60, 64, 0), new ScheduledTask(60, 63, 3), new ScheduledTask(64, 66, 0)};
        int[] expectedProcessorEndTimes = new int[]{73, 73, 73, 73};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 13, 0), new ScheduledTask(29, 31, 0), new ScheduledTask(56, 60, 0), new ScheduledTask(13, 22, 0), new ScheduledTask(36, 39, 0), new ScheduledTask(34, 36, 1), new ScheduledTask(63, 73, 1), new ScheduledTask(47, 56, 0), new ScheduledTask(39, 47, 0), new ScheduledTask(65, 73, 2), new ScheduledTask(57, 65, 3), new ScheduledTask(66, 73, 0), new ScheduledTask(22, 29, 0), new ScheduledTask(31, 36, 0), new ScheduledTask(43, 48, 4), new ScheduledTask(36, 41, 1), new ScheduledTask(63, 68, 5), new ScheduledTask(60, 64, 0), new ScheduledTask(60, 63, 5), new ScheduledTask(64, 66, 0)};
        int[] expectedProcessorEndTimes = new int[]{73, 73, 73, 65, 48, 68};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random2_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random#2_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(1000, 1006, 0), new ScheduledTask(2700, 2704, 0), new ScheduledTask(1900, 1906, 0), new ScheduledTask(1600, 1603, 0), new ScheduledTask(6700, 6710, 0), new ScheduledTask(200, 208, 0), new ScheduledTask(8500, 8509, 0), new ScheduledTask(7700, 7708, 0), new ScheduledTask(9400, 9408, 0), new ScheduledTask(3100, 3108, 1), new ScheduledTask(5200, 5208, 2), new ScheduledTask(5900, 5908, 0), new ScheduledTask(4200, 4206, 3), new ScheduledTask(5300, 5306, 0), new ScheduledTask(4700, 4706, 0), new ScheduledTask(4100, 4106, 0), new ScheduledTask(3600, 3605, 0), new ScheduledTask(3100, 3105, 0), new ScheduledTask(7800, 7804, 3), new ScheduledTask(2500, 2502, 0)};
        int[] expectedProcessorEndTimes = new int[]{9408, 3108, 5208, 7804};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random2_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random#2_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(200, 206, 0), new ScheduledTask(3200, 3204, 0), new ScheduledTask(4000, 4006, 1), new ScheduledTask(1600, 1603, 0), new ScheduledTask(4400, 4410, 0), new ScheduledTask(800, 808, 0), new ScheduledTask(6200, 6209, 0), new ScheduledTask(5400, 5408, 0), new ScheduledTask(7100, 7108, 0), new ScheduledTask(3700, 3708, 2), new ScheduledTask(6300, 6308, 3), new ScheduledTask(3600, 3608, 0), new ScheduledTask(5300, 5306, 2), new ScheduledTask(2600, 2606, 0), new ScheduledTask(5100, 5106, 3), new ScheduledTask(5200, 5206, 1), new ScheduledTask(2100, 2105, 0), new ScheduledTask(7200, 7205, 1), new ScheduledTask(6400, 6404, 1), new ScheduledTask(1900, 1902, 0)};
        int[] expectedProcessorEndTimes = new int[]{7108, 7205, 5306, 6308};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random2_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random#2_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 7480;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(200, 206, 0), new ScheduledTask(3600, 3604, 0), new ScheduledTask(4000, 4006, 1), new ScheduledTask(800, 803, 0), new ScheduledTask(1100, 1110, 0), new ScheduledTask(2100, 2108, 0), new ScheduledTask(6200, 6209, 0), new ScheduledTask(6520, 6528, 1), new ScheduledTask(5400, 5408, 0), new ScheduledTask(5000, 5008, 2), new ScheduledTask(6200, 6208, 2), new ScheduledTask(4600, 4608, 0), new ScheduledTask(6100, 6106, 3), new ScheduledTask(4000, 4006, 0), new ScheduledTask(4300, 4306, 3), new ScheduledTask(5800, 5806, 1), new ScheduledTask(3100, 3105, 0), new ScheduledTask(5200, 5205, 1), new ScheduledTask(4720, 4724, 1), new ScheduledTask(2900, 2902, 0)};
        int[] expectedProcessorEndTimes = new int[]{6209, 6528, 6208, 6106};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(10, 16, 0), new ScheduledTask(61, 65, 0), new ScheduledTask(48, 54, 1), new ScheduledTask(34, 37, 0), new ScheduledTask(16, 26, 0), new ScheduledTask(2, 10, 0), new ScheduledTask(52, 61, 0), new ScheduledTask(44, 52, 0), new ScheduledTask(26, 34, 0), new ScheduledTask(31, 39, 1), new ScheduledTask(65, 73, 0), new ScheduledTask(73, 81, 0), new ScheduledTask(42, 48, 1), new ScheduledTask(75, 81, 1), new ScheduledTask(69, 75, 1), new ScheduledTask(63, 69, 1), new ScheduledTask(39, 44, 0), new ScheduledTask(58, 63, 1), new ScheduledTask(54, 58, 1), new ScheduledTask(37, 39, 0)};
        int[] expectedProcessorEndTimes = new int[]{81, 81};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(12, 18, 0), new ScheduledTask(21, 25, 0), new ScheduledTask(50, 56, 1), new ScheduledTask(18, 21, 0), new ScheduledTask(2, 12, 0), new ScheduledTask(25, 33, 0), new ScheduledTask(62, 71, 0), new ScheduledTask(55, 63, 2), new ScheduledTask(54, 62, 0), new ScheduledTask(59, 67, 3), new ScheduledTask(46, 54, 2), new ScheduledTask(46, 54, 0), new ScheduledTask(65, 71, 2), new ScheduledTask(40, 46, 0), new ScheduledTask(53, 59, 3), new ScheduledTask(56, 62, 1), new ScheduledTask(35, 40, 0), new ScheduledTask(66, 71, 1), new ScheduledTask(62, 66, 1), new ScheduledTask(33, 35, 0)};
        int[] expectedProcessorEndTimes = new int[]{71, 71, 71, 67};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 8, 0), new ScheduledTask(29, 33, 0), new ScheduledTask(40, 46, 1), new ScheduledTask(26, 29, 0), new ScheduledTask(8, 18, 0), new ScheduledTask(18, 26, 0), new ScheduledTask(62, 71, 0), new ScheduledTask(62, 70, 2), new ScheduledTask(54, 62, 0), new ScheduledTask(47, 55, 3), new ScheduledTask(54, 62, 2), new ScheduledTask(46, 54, 0), new ScheduledTask(61, 67, 1), new ScheduledTask(40, 46, 0), new ScheduledTask(61, 67, 4), new ScheduledTask(55, 61, 1), new ScheduledTask(35, 40, 0), new ScheduledTask(50, 55, 1), new ScheduledTask(46, 50, 1), new ScheduledTask(33, 35, 0)};
        int[] expectedProcessorEndTimes = new int[]{71, 67, 70, 55, 67};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random3_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random#3_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(1500, 1504, 0), new ScheduledTask(600, 607, 0), new ScheduledTask(7600, 7607, 0), new ScheduledTask(1900, 1904, 0), new ScheduledTask(1300, 1302, 0), new ScheduledTask(2700, 2708, 0), new ScheduledTask(6700, 6709, 0), new ScheduledTask(5800, 5809, 0), new ScheduledTask(5000, 5008, 0), new ScheduledTask(5000, 5008, 1), new ScheduledTask(4300, 4307, 0), new ScheduledTask(8300, 8307, 0), new ScheduledTask(9400, 9407, 0), new ScheduledTask(3700, 3706, 0), new ScheduledTask(5900, 5906, 2), new ScheduledTask(2300, 2304, 0), new ScheduledTask(9000, 9004, 0), new ScheduledTask(8300, 8303, 3), new ScheduledTask(7100, 7102, 3), new ScheduledTask(3500, 3502, 0)};
        int[] expectedProcessorEndTimes = new int[]{9407, 5008, 5906, 8303};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random3_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random#3_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(800, 804, 0), new ScheduledTask(6000, 6007, 0), new ScheduledTask(3500, 3507, 0), new ScheduledTask(3000, 3004, 1), new ScheduledTask(600, 602, 0), new ScheduledTask(2500, 2508, 0), new ScheduledTask(1600, 1609, 0), new ScheduledTask(6400, 6409, 1), new ScheduledTask(7600, 7608, 0), new ScheduledTask(6500, 6508, 2), new ScheduledTask(3800, 3807, 1), new ScheduledTask(5300, 5307, 0), new ScheduledTask(4600, 4607, 0), new ScheduledTask(7000, 7006, 0), new ScheduledTask(5200, 5206, 1), new ScheduledTask(1200, 1204, 0), new ScheduledTask(4200, 4204, 0), new ScheduledTask(6700, 6703, 0), new ScheduledTask(6900, 6902, 3), new ScheduledTask(3300, 3302, 0)};
        int[] expectedProcessorEndTimes = new int[]{7608, 6409, 6508, 6902};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random3_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random#3_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 7320;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 1), new ScheduledTask(720, 724, 1), new ScheduledTask(4440, 4447, 1), new ScheduledTask(4800, 4807, 0), new ScheduledTask(3000, 3004, 2), new ScheduledTask(1200, 1202, 1), new ScheduledTask(3000, 3008, 1), new ScheduledTask(1920, 1929, 1), new ScheduledTask(4800, 4809, 2), new ScheduledTask(6360, 6368, 1), new ScheduledTask(3600, 3608, 2), new ScheduledTask(6150, 6157, 2), new ScheduledTask(5500, 5507, 0), new ScheduledTask(6600, 6607, 0), new ScheduledTask(5640, 5646, 1), new ScheduledTask(5840, 5846, 3), new ScheduledTask(1440, 1444, 1), new ScheduledTask(6200, 6204, 0), new ScheduledTask(5280, 5283, 1), new ScheduledTask(4200, 4202, 1), new ScheduledTask(3960, 3962, 1)};
        int[] expectedProcessorEndTimes = new int[]{6607, 6368, 6157, 5846};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 75;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 10, 0), new ScheduledTask(50, 57, 0), new ScheduledTask(25, 32, 0), new ScheduledTask(28, 32, 1), new ScheduledTask(10, 12, 0), new ScheduledTask(63, 71, 1), new ScheduledTask(16, 25, 0), new ScheduledTask(47, 56, 1), new ScheduledTask(66, 74, 0), new ScheduledTask(39, 47, 1), new ScheduledTask(32, 39, 1), new ScheduledTask(43, 50, 0), new ScheduledTask(36, 43, 0), new ScheduledTask(60, 66, 0), new ScheduledTask(56, 62, 1), new ScheduledTask(12, 16, 0), new ScheduledTask(32, 36, 0), new ScheduledTask(57, 60, 0), new ScheduledTask(71, 73, 1), new ScheduledTask(73, 75, 1)};
        int[] expectedProcessorEndTimes = new int[]{74, 75};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 10, 0), new ScheduledTask(35, 42, 0), new ScheduledTask(46, 53, 1), new ScheduledTask(28, 32, 2), new ScheduledTask(18, 20, 0), new ScheduledTask(10, 18, 0), new ScheduledTask(26, 35, 0), new ScheduledTask(32, 41, 2), new ScheduledTask(51, 59, 0), new ScheduledTask(59, 67, 0), new ScheduledTask(41, 48, 2), new ScheduledTask(53, 60, 1), new ScheduledTask(64, 71, 1), new ScheduledTask(45, 51, 0), new ScheduledTask(64, 70, 3), new ScheduledTask(22, 26, 0), new ScheduledTask(60, 64, 1), new ScheduledTask(42, 45, 0), new ScheduledTask(54, 56, 3), new ScheduledTask(20, 22, 0)};
        int[] expectedProcessorEndTimes = new int[]{67, 71, 48, 70};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 10, 0), new ScheduledTask(35, 42, 0), new ScheduledTask(46, 53, 1), new ScheduledTask(28, 32, 2), new ScheduledTask(18, 20, 0), new ScheduledTask(10, 18, 0), new ScheduledTask(26, 35, 0), new ScheduledTask(32, 41, 2), new ScheduledTask(51, 59, 0), new ScheduledTask(59, 67, 3), new ScheduledTask(41, 48, 2), new ScheduledTask(53, 60, 1), new ScheduledTask(64, 71, 1), new ScheduledTask(45, 51, 0), new ScheduledTask(64, 70, 4), new ScheduledTask(22, 26, 0), new ScheduledTask(60, 64, 1), new ScheduledTask(42, 45, 0), new ScheduledTask(54, 56, 5), new ScheduledTask(20, 22, 0)};
        int[] expectedProcessorEndTimes = new int[]{59, 71, 48, 67, 70, 56};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(5, 15, 0), new ScheduledTask(47, 52, 1), new ScheduledTask(40, 47, 0), new ScheduledTask(28, 37, 0), new ScheduledTask(15, 19, 0), new ScheduledTask(2, 5, 0), new ScheduledTask(63, 73, 1), new ScheduledTask(57, 66, 2), new ScheduledTask(54, 63, 1), new ScheduledTask(60, 69, 0), new ScheduledTask(52, 60, 0), new ScheduledTask(58, 64, 3), new ScheduledTask(51, 57, 2), new ScheduledTask(22, 28, 0), new ScheduledTask(47, 52, 0), new ScheduledTask(47, 50, 4), new ScheduledTask(37, 40, 0), new ScheduledTask(19, 22, 0), new ScheduledTask(68, 71, 5), new ScheduledTask(52, 54, 1)};
        int[] expectedProcessorEndTimes = new int[]{69, 73, 66, 64, 50, 71};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 79;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(5, 15, 0), new ScheduledTask(47, 52, 1), new ScheduledTask(15, 22, 0), new ScheduledTask(53, 62, 0), new ScheduledTask(31, 35, 0), new ScheduledTask(2, 5, 0), new ScheduledTask(63, 73, 1), new ScheduledTask(26, 35, 1), new ScheduledTask(54, 63, 1), new ScheduledTask(44, 53, 0), new ScheduledTask(70, 78, 0), new ScheduledTask(25, 31, 0), new ScheduledTask(73, 79, 1), new ScheduledTask(38, 44, 0), new ScheduledTask(62, 67, 0), new ScheduledTask(22, 25, 0), new ScheduledTask(67, 70, 0), new ScheduledTask(35, 38, 0), new ScheduledTask(43, 46, 1), new ScheduledTask(52, 54, 1)};
        int[] expectedProcessorEndTimes = new int[]{78, 79};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(5, 15, 0), new ScheduledTask(47, 52, 1), new ScheduledTask(22, 29, 0), new ScheduledTask(44, 53, 0), new ScheduledTask(15, 19, 0), new ScheduledTask(2, 5, 0), new ScheduledTask(63, 73, 1), new ScheduledTask(26, 35, 2), new ScheduledTask(54, 63, 1), new ScheduledTask(35, 44, 0), new ScheduledTask(61, 69, 0), new ScheduledTask(62, 68, 3), new ScheduledTask(56, 62, 3), new ScheduledTask(29, 35, 0), new ScheduledTask(53, 58, 0), new ScheduledTask(53, 56, 3), new ScheduledTask(58, 61, 0), new ScheduledTask(19, 22, 0), new ScheduledTask(50, 53, 3), new ScheduledTask(52, 54, 1)};
        int[] expectedProcessorEndTimes = new int[]{69, 73, 35, 68};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(5, 15, 0), new ScheduledTask(47, 52, 1), new ScheduledTask(40, 47, 0), new ScheduledTask(28, 37, 0), new ScheduledTask(15, 19, 0), new ScheduledTask(2, 5, 0), new ScheduledTask(63, 73, 1), new ScheduledTask(26, 35, 2), new ScheduledTask(54, 63, 1), new ScheduledTask(60, 69, 0), new ScheduledTask(52, 60, 0), new ScheduledTask(58, 64, 3), new ScheduledTask(51, 57, 3), new ScheduledTask(22, 28, 0), new ScheduledTask(47, 52, 0), new ScheduledTask(47, 50, 4), new ScheduledTask(37, 40, 0), new ScheduledTask(19, 22, 0), new ScheduledTask(68, 71, 5), new ScheduledTask(52, 54, 1)};
        int[] expectedProcessorEndTimes = new int[]{69, 73, 35, 64, 50, 71};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 7900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(200, 202, 0), new ScheduledTask(4400, 4405, 1), new ScheduledTask(3000, 3008, 0), new ScheduledTask(400, 406, 0), new ScheduledTask(3400, 3402, 2), new ScheduledTask(2200, 2209, 3), new ScheduledTask(5100, 5110, 0), new ScheduledTask(5600, 5609, 3), new ScheduledTask(7000, 7009, 0), new ScheduledTask(4200, 4209, 0), new ScheduledTask(2100, 2109, 0), new ScheduledTask(3800, 3809, 2), new ScheduledTask(5800, 5809, 1), new ScheduledTask(4000, 4008, 3), new ScheduledTask(1500, 1506, 0), new ScheduledTask(5600, 5606, 2), new ScheduledTask(1000, 1005, 0), new ScheduledTask(3800, 3804, 0), new ScheduledTask(7400, 7402, 3), new ScheduledTask(5400, 5402, 1)};
        int[] expectedProcessorEndTimes = new int[]{7009, 5809, 5606, 7402};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 6850;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(200, 202, 0), new ScheduledTask(4700, 4705, 0), new ScheduledTask(2200, 2208, 2), new ScheduledTask(2100, 2106, 0), new ScheduledTask(400, 402, 0), new ScheduledTask(2200, 2209, 1), new ScheduledTask(3400, 3410, 2), new ScheduledTask(4360, 4369, 1), new ScheduledTask(3280, 3289, 1), new ScheduledTask(4900, 4909, 2), new ScheduledTask(3800, 3809, 0), new ScheduledTask(1200, 1209, 0), new ScheduledTask(5400, 5409, 0), new ScheduledTask(5440, 5448, 1), new ScheduledTask(3200, 3206, 0), new ScheduledTask(600, 606, 0), new ScheduledTask(2700, 2705, 0), new ScheduledTask(6250, 6254, 2), new ScheduledTask(3600, 3602, 3), new ScheduledTask(5200, 5202, 0)};
        int[] expectedProcessorEndTimes = new int[]{5409, 5448, 6254, 3602};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(23, 25, 0), new ScheduledTask(61, 66, 0), new ScheduledTask(2, 10, 0), new ScheduledTask(35, 41, 0), new ScheduledTask(57, 59, 1), new ScheduledTask(22, 31, 1), new ScheduledTask(25, 35, 0), new ScheduledTask(48, 57, 1), new ScheduledTask(39, 48, 1), new ScheduledTask(14, 23, 0), new ScheduledTask(52, 61, 0), new ScheduledTask(61, 70, 1), new ScheduledTask(68, 77, 0), new ScheduledTask(31, 39, 1), new ScheduledTask(46, 52, 0), new ScheduledTask(70, 76, 1), new ScheduledTask(41, 46, 0), new ScheduledTask(10, 14, 0), new ScheduledTask(59, 61, 1), new ScheduledTask(66, 68, 0)};
        int[] expectedProcessorEndTimes = new int[]{77, 76};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 4, 0), new ScheduledTask(30, 35, 0), new ScheduledTask(22, 30, 1), new ScheduledTask(4, 10, 0), new ScheduledTask(34, 36, 2), new ScheduledTask(22, 31, 3), new ScheduledTask(30, 40, 1), new ScheduledTask(40, 49, 3), new ScheduledTask(31, 40, 3), new ScheduledTask(40, 49, 1), new ScheduledTask(21, 30, 0), new ScheduledTask(38, 47, 2), new ScheduledTask(37, 46, 0), new ScheduledTask(49, 57, 3), new ScheduledTask(15, 21, 0), new ScheduledTask(47, 53, 2), new ScheduledTask(10, 15, 0), new ScheduledTask(49, 53, 1), new ScheduledTask(36, 38, 2), new ScheduledTask(35, 37, 0)};
        int[] expectedProcessorEndTimes = new int[]{46, 53, 53, 57};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 4, 0), new ScheduledTask(30, 35, 0), new ScheduledTask(22, 30, 1), new ScheduledTask(4, 10, 0), new ScheduledTask(34, 36, 2), new ScheduledTask(22, 31, 3), new ScheduledTask(30, 40, 1), new ScheduledTask(40, 49, 3), new ScheduledTask(31, 40, 3), new ScheduledTask(40, 49, 1), new ScheduledTask(21, 30, 0), new ScheduledTask(38, 47, 2), new ScheduledTask(37, 46, 0), new ScheduledTask(49, 57, 3), new ScheduledTask(15, 21, 0), new ScheduledTask(47, 53, 2), new ScheduledTask(10, 15, 0), new ScheduledTask(49, 53, 1), new ScheduledTask(36, 38, 2), new ScheduledTask(35, 37, 0)};
        int[] expectedProcessorEndTimes = new int[]{46, 53, 53, 57};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot01_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_10.01_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(600, 607, 0), new ScheduledTask(5300, 5305, 0), new ScheduledTask(3700, 3702, 0), new ScheduledTask(1900, 1907, 0), new ScheduledTask(3200, 3202, 1), new ScheduledTask(1300, 1303, 0), new ScheduledTask(7700, 7710, 0), new ScheduledTask(6700, 6710, 0), new ScheduledTask(5800, 5809, 0), new ScheduledTask(4500, 4507, 2), new ScheduledTask(3500, 3507, 3), new ScheduledTask(4700, 4706, 0), new ScheduledTask(4200, 4205, 0), new ScheduledTask(3200, 3205, 0), new ScheduledTask(3900, 3903, 0), new ScheduledTask(2900, 2903, 0), new ScheduledTask(2600, 2603, 0), new ScheduledTask(1600, 1603, 0), new ScheduledTask(4400, 4403, 1), new ScheduledTask(6200, 6202, 1)};
        int[] expectedProcessorEndTimes = new int[]{7710, 6202, 4507, 3507};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot01_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_10.01_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 6600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(600, 607, 0), new ScheduledTask(3200, 3205, 0), new ScheduledTask(3400, 3402, 1), new ScheduledTask(1600, 1607, 0), new ScheduledTask(5200, 5202, 2), new ScheduledTask(1300, 1303, 0), new ScheduledTask(5600, 5610, 0), new ScheduledTask(4600, 4610, 0), new ScheduledTask(3700, 3709, 0), new ScheduledTask(4900, 4907, 3), new ScheduledTask(3500, 3507, 3), new ScheduledTask(3800, 3806, 1), new ScheduledTask(5000, 5005, 1), new ScheduledTask(4200, 4205, 2), new ScheduledTask(6000, 6003, 1), new ScheduledTask(2900, 2903, 0), new ScheduledTask(2600, 2603, 0), new ScheduledTask(2300, 2303, 0), new ScheduledTask(5600, 5603, 2), new ScheduledTask(6200, 6202, 2)};
        int[] expectedProcessorEndTimes = new int[]{5610, 6003, 6202, 4907};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot01_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_10.01_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 6600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(600, 607, 0), new ScheduledTask(3200, 3205, 0), new ScheduledTask(3400, 3402, 2), new ScheduledTask(1600, 1607, 0), new ScheduledTask(3200, 3202, 1), new ScheduledTask(1300, 1303, 0), new ScheduledTask(5600, 5610, 0), new ScheduledTask(4600, 4610, 0), new ScheduledTask(3700, 3709, 0), new ScheduledTask(4900, 4907, 3), new ScheduledTask(3500, 3507, 3), new ScheduledTask(5700, 5706, 2), new ScheduledTask(4950, 4955, 2), new ScheduledTask(4200, 4205, 2), new ScheduledTask(3700, 3703, 2), new ScheduledTask(2900, 2903, 0), new ScheduledTask(2600, 2603, 0), new ScheduledTask(2300, 2303, 0), new ScheduledTask(3440, 3443, 1), new ScheduledTask(3800, 3802, 1)};
        int[] expectedProcessorEndTimes = new int[]{5610, 3802, 5706, 4907};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 13, 0), new ScheduledTask(36, 41, 0), new ScheduledTask(39, 41, 1), new ScheduledTask(26, 33, 0), new ScheduledTask(32, 34, 1), new ScheduledTask(13, 16, 0), new ScheduledTask(60, 70, 0), new ScheduledTask(50, 60, 0), new ScheduledTask(41, 50, 0), new ScheduledTask(60, 67, 1), new ScheduledTask(19, 26, 0), new ScheduledTask(49, 55, 1), new ScheduledTask(44, 49, 1), new ScheduledTask(55, 60, 1), new ScheduledTask(41, 44, 1), new ScheduledTask(33, 36, 0), new ScheduledTask(67, 70, 1), new ScheduledTask(16, 19, 0), new ScheduledTask(36, 39, 1), new ScheduledTask(34, 36, 1)};
        int[] expectedProcessorEndTimes = new int[]{70, 70};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 13, 0), new ScheduledTask(29, 34, 0), new ScheduledTask(34, 36, 1), new ScheduledTask(16, 23, 0), new ScheduledTask(32, 34, 2), new ScheduledTask(13, 16, 0), new ScheduledTask(53, 63, 0), new ScheduledTask(43, 53, 0), new ScheduledTask(34, 43, 0), new ScheduledTask(54, 61, 3), new ScheduledTask(47, 54, 3), new ScheduledTask(36, 42, 1), new ScheduledTask(42, 47, 1), new ScheduledTask(42, 47, 3), new ScheduledTask(47, 50, 1), new ScheduledTask(26, 29, 0), new ScheduledTask(63, 66, 3), new ScheduledTask(23, 26, 0), new ScheduledTask(34, 37, 2), new ScheduledTask(37, 39, 2)};
        int[] expectedProcessorEndTimes = new int[]{63, 50, 39, 66};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_10.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 13, 0), new ScheduledTask(29, 34, 0), new ScheduledTask(34, 36, 1), new ScheduledTask(19, 26, 0), new ScheduledTask(32, 34, 2), new ScheduledTask(13, 16, 0), new ScheduledTask(53, 63, 0), new ScheduledTask(43, 53, 0), new ScheduledTask(34, 43, 0), new ScheduledTask(45, 52, 3), new ScheduledTask(35, 42, 4), new ScheduledTask(36, 42, 1), new ScheduledTask(42, 47, 1), new ScheduledTask(45, 50, 5), new ScheduledTask(47, 50, 1), new ScheduledTask(26, 29, 0), new ScheduledTask(63, 66, 5), new ScheduledTask(16, 19, 0), new ScheduledTask(34, 37, 2), new ScheduledTask(37, 39, 2)};
        int[] expectedProcessorEndTimes = new int[]{63, 50, 39, 52, 42, 66};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot02_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_10.02_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 11800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(600, 607, 0), new ScheduledTask(1300, 1310, 0), new ScheduledTask(2300, 2303, 0), new ScheduledTask(2600, 2606, 0), new ScheduledTask(3200, 3205, 0), new ScheduledTask(3700, 3702, 0), new ScheduledTask(3900, 3910, 0), new ScheduledTask(4900, 4910, 0), new ScheduledTask(5900, 5910, 0), new ScheduledTask(6900, 6909, 0), new ScheduledTask(7800, 7808, 0), new ScheduledTask(8600, 8608, 0), new ScheduledTask(9400, 9407, 0), new ScheduledTask(6000, 6006, 1), new ScheduledTask(10100, 10105, 0), new ScheduledTask(10600, 10605, 0), new ScheduledTask(5300, 5304, 2), new ScheduledTask(8400, 8404, 2), new ScheduledTask(11100, 11104, 0), new ScheduledTask(11500, 11503, 0)};
        int[] expectedProcessorEndTimes = new int[]{11503, 6006, 8404};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot02_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_10.02_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(600, 607, 0), new ScheduledTask(2700, 2710, 1), new ScheduledTask(4700, 4703, 0), new ScheduledTask(3400, 3406, 0), new ScheduledTask(1300, 1305, 0), new ScheduledTask(5500, 5502, 2), new ScheduledTask(4700, 4710, 1), new ScheduledTask(5000, 5010, 0), new ScheduledTask(7000, 7010, 3), new ScheduledTask(7100, 7109, 2), new ScheduledTask(2600, 2608, 0), new ScheduledTask(1800, 1808, 0), new ScheduledTask(6700, 6707, 1), new ScheduledTask(5900, 5906, 2), new ScheduledTask(8100, 8105, 1), new ScheduledTask(6000, 6005, 0), new ScheduledTask(6100, 6104, 3), new ScheduledTask(4300, 4304, 0), new ScheduledTask(6500, 6504, 0), new ScheduledTask(4000, 4003, 0)};
        int[] expectedProcessorEndTimes = new int[]{6504, 8105, 7109, 7010};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot02_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_10.02_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 7900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(600, 607, 0), new ScheduledTask(2700, 2710, 2), new ScheduledTask(5300, 5303, 0), new ScheduledTask(1300, 1306, 0), new ScheduledTask(2200, 2205, 0), new ScheduledTask(5500, 5502, 1), new ScheduledTask(4200, 4210, 2), new ScheduledTask(5600, 5610, 0), new ScheduledTask(4300, 4310, 0), new ScheduledTask(6460, 6469, 1), new ScheduledTask(3500, 3508, 0), new ScheduledTask(2700, 2708, 0), new ScheduledTask(5700, 5707, 2), new ScheduledTask(5740, 5746, 1), new ScheduledTask(6750, 6755, 2), new ScheduledTask(6600, 6605, 0), new ScheduledTask(4000, 4004, 3), new ScheduledTask(7100, 7104, 3), new ScheduledTask(7100, 7104, 0), new ScheduledTask(1900, 1903, 0)};
        int[] expectedProcessorEndTimes = new int[]{7104, 6469, 6755, 7104};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(12, 19, 0), new ScheduledTask(27, 37, 1), new ScheduledTask(57, 60, 0), new ScheduledTask(6, 12, 0), new ScheduledTask(26, 31, 0), new ScheduledTask(63, 65, 1), new ScheduledTask(53, 63, 1), new ScheduledTask(60, 70, 0), new ScheduledTask(47, 57, 0), new ScheduledTask(71, 80, 1), new ScheduledTask(39, 47, 0), new ScheduledTask(31, 39, 0), new ScheduledTask(46, 53, 1), new ScheduledTask(65, 71, 1), new ScheduledTask(41, 46, 1), new ScheduledTask(70, 75, 0), new ScheduledTask(37, 41, 1), new ScheduledTask(22, 26, 0), new ScheduledTask(75, 79, 0), new ScheduledTask(19, 22, 0)};
        int[] expectedProcessorEndTimes = new int[]{79, 80};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 75;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 13, 0), new ScheduledTask(27, 37, 1), new ScheduledTask(53, 56, 0), new ScheduledTask(13, 19, 0), new ScheduledTask(22, 27, 0), new ScheduledTask(55, 57, 2), new ScheduledTask(37, 47, 1), new ScheduledTask(56, 66, 0), new ScheduledTask(43, 53, 0), new ScheduledTask(63, 72, 2), new ScheduledTask(35, 43, 0), new ScheduledTask(27, 35, 0), new ScheduledTask(47, 54, 1), new ScheduledTask(57, 63, 2), new ScheduledTask(54, 59, 1), new ScheduledTask(66, 71, 0), new ScheduledTask(40, 44, 3), new ScheduledTask(71, 75, 3), new ScheduledTask(71, 75, 0), new ScheduledTask(19, 22, 0)};
        int[] expectedProcessorEndTimes = new int[]{75, 59, 72, 75};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_10dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 75;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 13, 0), new ScheduledTask(27, 37, 1), new ScheduledTask(53, 56, 0), new ScheduledTask(13, 19, 0), new ScheduledTask(22, 27, 0), new ScheduledTask(55, 57, 2), new ScheduledTask(37, 47, 1), new ScheduledTask(56, 66, 0), new ScheduledTask(43, 53, 0), new ScheduledTask(63, 72, 2), new ScheduledTask(35, 43, 0), new ScheduledTask(27, 35, 0), new ScheduledTask(47, 54, 1), new ScheduledTask(57, 63, 2), new ScheduledTask(54, 59, 1), new ScheduledTask(66, 71, 0), new ScheduledTask(40, 44, 3), new ScheduledTask(71, 75, 4), new ScheduledTask(71, 75, 0), new ScheduledTask(19, 22, 0)};
        int[] expectedProcessorEndTimes = new int[]{75, 59, 72, 44, 75};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_2dot01_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_2.01_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(13, 23, 1), new ScheduledTask(6, 14, 0), new ScheduledTask(40, 48, 1), new ScheduledTask(25, 32, 1), new ScheduledTask(46, 54, 0), new ScheduledTask(23, 25, 1), new ScheduledTask(57, 67, 1), new ScheduledTask(30, 40, 0), new ScheduledTask(20, 30, 0), new ScheduledTask(48, 57, 1), new ScheduledTask(67, 76, 1), new ScheduledTask(32, 40, 1), new ScheduledTask(74, 82, 0), new ScheduledTask(63, 70, 0), new ScheduledTask(14, 20, 0), new ScheduledTask(76, 82, 1), new ScheduledTask(40, 46, 0), new ScheduledTask(58, 63, 0), new ScheduledTask(70, 74, 0), new ScheduledTask(54, 58, 0)};
        int[] expectedProcessorEndTimes = new int[]{82, 82};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_2dot01_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_2.01_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 16, 0), new ScheduledTask(24, 32, 1), new ScheduledTask(17, 25, 2), new ScheduledTask(16, 23, 0), new ScheduledTask(23, 31, 0), new ScheduledTask(32, 34, 3), new ScheduledTask(29, 39, 2), new ScheduledTask(38, 48, 1), new ScheduledTask(46, 56, 0), new ScheduledTask(47, 56, 3), new ScheduledTask(37, 46, 0), new ScheduledTask(48, 56, 2), new ScheduledTask(48, 56, 1), new ScheduledTask(40, 47, 3), new ScheduledTask(32, 38, 1), new ScheduledTask(31, 37, 0), new ScheduledTask(34, 40, 3), new ScheduledTask(43, 48, 2), new ScheduledTask(25, 29, 2), new ScheduledTask(39, 43, 2)};
        int[] expectedProcessorEndTimes = new int[]{56, 56, 56, 56};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot97_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_9.97_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(1900, 1910, 0), new ScheduledTask(3800, 3809, 0), new ScheduledTask(200, 202, 0), new ScheduledTask(6500, 6507, 0), new ScheduledTask(700, 707, 0), new ScheduledTask(2900, 2907, 0), new ScheduledTask(7200, 7210, 0), new ScheduledTask(5000, 5007, 1), new ScheduledTask(5800, 5807, 0), new ScheduledTask(3600, 3606, 2), new ScheduledTask(8200, 8206, 0), new ScheduledTask(8800, 8806, 0), new ScheduledTask(5200, 5206, 0), new ScheduledTask(1400, 1405, 0), new ScheduledTask(4700, 4705, 0), new ScheduledTask(2600, 2604, 1), new ScheduledTask(6900, 6904, 3), new ScheduledTask(400, 403, 0), new ScheduledTask(7200, 7203, 2), new ScheduledTask(3600, 3602, 0)};
        int[] expectedProcessorEndTimes = new int[]{8806, 5007, 7203, 6904};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot97_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_9.97_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 7600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(700, 710, 0), new ScheduledTask(3300, 3309, 0), new ScheduledTask(200, 202, 0), new ScheduledTask(4700, 4707, 0), new ScheduledTask(2400, 2407, 1), new ScheduledTask(1700, 1707, 0), new ScheduledTask(5400, 5410, 0), new ScheduledTask(5000, 5007, 1), new ScheduledTask(2600, 2607, 0), new ScheduledTask(3800, 3806, 1), new ScheduledTask(6400, 6406, 0), new ScheduledTask(7000, 7006, 0), new ScheduledTask(5700, 5706, 2), new ScheduledTask(6400, 6405, 1), new ScheduledTask(4200, 4205, 0), new ScheduledTask(2600, 2604, 2), new ScheduledTask(6500, 6504, 3), new ScheduledTask(400, 403, 0), new ScheduledTask(5900, 5903, 3), new ScheduledTask(2400, 2402, 0)};
        int[] expectedProcessorEndTimes = new int[]{7006, 6405, 5706, 6504};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot97_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_9.97_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 6720;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 1), new ScheduledTask(240, 250, 1), new ScheduledTask(1680, 1689, 1), new ScheduledTask(1440, 1442, 1), new ScheduledTask(3640, 3647, 0), new ScheduledTask(2440, 2447, 2), new ScheduledTask(4080, 4087, 1), new ScheduledTask(4340, 4350, 0), new ScheduledTask(4390, 4397, 2), new ScheduledTask(5640, 5647, 1), new ScheduledTask(3490, 3496, 2), new ScheduledTask(5340, 5346, 0), new ScheduledTask(5940, 5946, 0), new ScheduledTask(4920, 4926, 1), new ScheduledTask(5440, 5445, 2), new ScheduledTask(3480, 3485, 1), new ScheduledTask(5760, 5764, 3), new ScheduledTask(4960, 4964, 3), new ScheduledTask(3120, 3123, 1), new ScheduledTask(2760, 2763, 1), new ScheduledTask(6480, 6482, 1)};
        int[] expectedProcessorEndTimes = new int[]{5946, 6482, 5445, 5764};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot97_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_9.97_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(10, 20, 0), new ScheduledTask(46, 55, 0), new ScheduledTask(2, 4, 0), new ScheduledTask(42, 49, 1), new ScheduledTask(24, 31, 1), new ScheduledTask(24, 31, 0), new ScheduledTask(49, 59, 1), new ScheduledTask(64, 71, 0), new ScheduledTask(39, 46, 0), new ScheduledTask(36, 42, 1), new ScheduledTask(59, 65, 1), new ScheduledTask(65, 71, 1), new ScheduledTask(33, 39, 0), new ScheduledTask(31, 36, 1), new ScheduledTask(59, 64, 0), new ScheduledTask(20, 24, 0), new ScheduledTask(55, 59, 0), new ScheduledTask(7, 10, 0), new ScheduledTask(4, 7, 0), new ScheduledTask(31, 33, 0)};
        int[] expectedProcessorEndTimes = new int[]{71, 71};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot97_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_9.97_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 12, 0), new ScheduledTask(21, 30, 0), new ScheduledTask(19, 21, 0), new ScheduledTask(34, 41, 1), new ScheduledTask(24, 31, 2), new ScheduledTask(12, 19, 0), new ScheduledTask(41, 51, 1), new ScheduledTask(37, 44, 2), new ScheduledTask(43, 50, 0), new ScheduledTask(31, 37, 2), new ScheduledTask(51, 57, 1), new ScheduledTask(57, 63, 1), new ScheduledTask(56, 62, 3), new ScheduledTask(44, 49, 2), new ScheduledTask(38, 43, 0), new ScheduledTask(43, 47, 3), new ScheduledTask(52, 56, 3), new ScheduledTask(35, 38, 0), new ScheduledTask(32, 35, 0), new ScheduledTask(30, 32, 0)};
        int[] expectedProcessorEndTimes = new int[]{50, 63, 49, 62};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot97_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_9.97_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 12, 0), new ScheduledTask(26, 35, 0), new ScheduledTask(21, 23, 0), new ScheduledTask(34, 41, 1), new ScheduledTask(24, 31, 2), new ScheduledTask(12, 19, 0), new ScheduledTask(41, 51, 1), new ScheduledTask(37, 44, 2), new ScheduledTask(43, 50, 0), new ScheduledTask(31, 37, 2), new ScheduledTask(51, 57, 1), new ScheduledTask(57, 63, 1), new ScheduledTask(52, 58, 3), new ScheduledTask(44, 49, 2), new ScheduledTask(38, 43, 0), new ScheduledTask(45, 49, 4), new ScheduledTask(57, 61, 5), new ScheduledTask(35, 38, 0), new ScheduledTask(23, 26, 0), new ScheduledTask(19, 21, 0)};
        int[] expectedProcessorEndTimes = new int[]{50, 63, 49, 58, 49, 61};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(800, 803, 0), new ScheduledTask(500, 503, 0), new ScheduledTask(3400, 3405, 0), new ScheduledTask(1100, 1107, 0), new ScheduledTask(3100, 3103, 0), new ScheduledTask(1800, 1807, 0), new ScheduledTask(8200, 8209, 0), new ScheduledTask(7300, 7309, 0), new ScheduledTask(6400, 6409, 0), new ScheduledTask(5600, 5608, 0), new ScheduledTask(4900, 4907, 0), new ScheduledTask(4200, 4207, 0), new ScheduledTask(2500, 2506, 0), new ScheduledTask(6700, 6704, 1), new ScheduledTask(3900, 3903, 0), new ScheduledTask(4700, 4702, 1), new ScheduledTask(6600, 6602, 2), new ScheduledTask(7800, 7802, 3), new ScheduledTask(7800, 7802, 2), new ScheduledTask(6400, 6402, 3)};
        int[] expectedProcessorEndTimes = new int[]{8209, 6704, 7802, 7802};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 6600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(500, 503, 0), new ScheduledTask(5200, 5203, 0), new ScheduledTask(3000, 3005, 0), new ScheduledTask(2700, 2707, 1), new ScheduledTask(1500, 1503, 0), new ScheduledTask(800, 807, 0), new ScheduledTask(4700, 4709, 2), new ScheduledTask(2100, 2109, 0), new ScheduledTask(4400, 4409, 3), new ScheduledTask(4400, 4408, 0), new ScheduledTask(5900, 5907, 0), new ScheduledTask(3700, 3707, 0), new ScheduledTask(4900, 4906, 1), new ScheduledTask(4100, 4104, 1), new ScheduledTask(1800, 1803, 0), new ScheduledTask(5500, 5502, 0), new ScheduledTask(5700, 5702, 0), new ScheduledTask(3500, 3502, 0), new ScheduledTask(6100, 6102, 1), new ScheduledTask(6200, 6202, 3)};
        int[] expectedProcessorEndTimes = new int[]{5907, 6102, 4709, 6202};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5860;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(500, 503, 0), new ScheduledTask(1100, 1103, 0), new ScheduledTask(3500, 3505, 0), new ScheduledTask(2700, 2707, 2), new ScheduledTask(800, 803, 0), new ScheduledTask(3700, 3707, 1), new ScheduledTask(4000, 4009, 3), new ScheduledTask(2600, 2609, 0), new ScheduledTask(4540, 4549, 1), new ScheduledTask(4200, 4208, 0), new ScheduledTask(1900, 1907, 0), new ScheduledTask(5000, 5007, 0), new ScheduledTask(4650, 4656, 2), new ScheduledTask(4050, 4054, 2), new ScheduledTask(1600, 1603, 0), new ScheduledTask(5550, 5552, 2), new ScheduledTask(1400, 1402, 0), new ScheduledTask(4000, 4002, 0), new ScheduledTask(3750, 3752, 2), new ScheduledTask(5620, 5622, 1)};
        int[] expectedProcessorEndTimes = new int[]{5007, 5622, 5552, 4009};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 8, 0), new ScheduledTask(52, 55, 0), new ScheduledTask(14, 19, 0), new ScheduledTask(27, 34, 1), new ScheduledTask(8, 11, 0), new ScheduledTask(46, 53, 1), new ScheduledTask(43, 52, 0), new ScheduledTask(34, 43, 0), new ScheduledTask(55, 64, 1), new ScheduledTask(26, 34, 0), new ScheduledTask(59, 66, 0), new ScheduledTask(19, 26, 0), new ScheduledTask(40, 46, 1), new ScheduledTask(36, 40, 1), new ScheduledTask(11, 14, 0), new ScheduledTask(55, 57, 0), new ScheduledTask(57, 59, 0), new ScheduledTask(64, 66, 1), new ScheduledTask(34, 36, 1), new ScheduledTask(53, 55, 1)};
        int[] expectedProcessorEndTimes = new int[]{66, 66};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 8, 0), new ScheduledTask(13, 16, 0), new ScheduledTask(8, 13, 0), new ScheduledTask(27, 34, 1), new ScheduledTask(16, 19, 0), new ScheduledTask(37, 44, 2), new ScheduledTask(48, 57, 1), new ScheduledTask(46, 55, 0), new ScheduledTask(44, 53, 2), new ScheduledTask(38, 46, 0), new ScheduledTask(31, 38, 0), new ScheduledTask(24, 31, 0), new ScheduledTask(40, 46, 1), new ScheduledTask(36, 40, 1), new ScheduledTask(21, 24, 0), new ScheduledTask(55, 57, 3), new ScheduledTask(19, 21, 0), new ScheduledTask(52, 54, 3), new ScheduledTask(34, 36, 1), new ScheduledTask(53, 55, 2)};
        int[] expectedProcessorEndTimes = new int[]{55, 57, 55, 57};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 8, 0), new ScheduledTask(13, 16, 0), new ScheduledTask(8, 13, 0), new ScheduledTask(27, 34, 1), new ScheduledTask(16, 19, 0), new ScheduledTask(37, 44, 2), new ScheduledTask(48, 57, 1), new ScheduledTask(46, 55, 0), new ScheduledTask(44, 53, 2), new ScheduledTask(38, 46, 0), new ScheduledTask(31, 38, 0), new ScheduledTask(24, 31, 0), new ScheduledTask(40, 46, 1), new ScheduledTask(36, 40, 1), new ScheduledTask(21, 24, 0), new ScheduledTask(55, 57, 3), new ScheduledTask(19, 21, 0), new ScheduledTask(52, 54, 4), new ScheduledTask(34, 36, 1), new ScheduledTask(53, 55, 2)};
        int[] expectedProcessorEndTimes = new int[]{55, 57, 55, 57, 54};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random2_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random#2_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(600, 604, 0), new ScheduledTask(1000, 1002, 0), new ScheduledTask(8200, 8210, 0), new ScheduledTask(3000, 3010, 0), new ScheduledTask(1500, 1510, 0), new ScheduledTask(6100, 6107, 0), new ScheduledTask(4500, 4508, 1), new ScheduledTask(7400, 7408, 0), new ScheduledTask(5400, 5407, 0), new ScheduledTask(4700, 4707, 0), new ScheduledTask(4000, 4007, 0), new ScheduledTask(9400, 9406, 0), new ScheduledTask(5600, 5606, 2), new ScheduledTask(6800, 6806, 0), new ScheduledTask(5800, 5805, 3), new ScheduledTask(2500, 2505, 0), new ScheduledTask(1200, 1203, 0), new ScheduledTask(8800, 8802, 3), new ScheduledTask(10000, 10002, 0), new ScheduledTask(9200, 9202, 0)};
        int[] expectedProcessorEndTimes = new int[]{10002, 4508, 5606, 8802};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random2_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random#2_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(600, 604, 0), new ScheduledTask(1700, 1702, 0), new ScheduledTask(3200, 3210, 0), new ScheduledTask(2800, 2810, 1), new ScheduledTask(2200, 2210, 0), new ScheduledTask(1000, 1007, 0), new ScheduledTask(5200, 5208, 2), new ScheduledTask(6800, 6808, 0), new ScheduledTask(6600, 6607, 1), new ScheduledTask(5200, 5207, 1), new ScheduledTask(6100, 6107, 0), new ScheduledTask(5500, 5506, 0), new ScheduledTask(6800, 6806, 2), new ScheduledTask(4900, 4906, 0), new ScheduledTask(6800, 6805, 3), new ScheduledTask(4400, 4405, 0), new ScheduledTask(1900, 1903, 0), new ScheduledTask(4800, 4802, 1), new ScheduledTask(4200, 4202, 0), new ScheduledTask(6400, 6402, 3)};
        int[] expectedProcessorEndTimes = new int[]{6808, 6607, 6806, 6805};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random2_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random#2_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 7600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(1600, 1604, 0), new ScheduledTask(2000, 2002, 0), new ScheduledTask(600, 610, 0), new ScheduledTask(2800, 2810, 1), new ScheduledTask(2200, 2210, 0), new ScheduledTask(5500, 5507, 0), new ScheduledTask(5500, 5508, 2), new ScheduledTask(6200, 6208, 0), new ScheduledTask(5080, 5087, 1), new ScheduledTask(4240, 4247, 1), new ScheduledTask(4800, 4807, 0), new ScheduledTask(4200, 4206, 0), new ScheduledTask(6700, 6706, 2), new ScheduledTask(7000, 7006, 0), new ScheduledTask(6500, 6505, 3), new ScheduledTask(3700, 3705, 0), new ScheduledTask(3400, 3403, 0), new ScheduledTask(4000, 4002, 1), new ScheduledTask(3200, 3202, 0), new ScheduledTask(3800, 3802, 3)};
        int[] expectedProcessorEndTimes = new int[]{7006, 5087, 6706, 6505};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 10, 0), new ScheduledTask(10, 12, 0), new ScheduledTask(15, 25, 0), new ScheduledTask(28, 38, 1), new ScheduledTask(27, 37, 0), new ScheduledTask(55, 62, 0), new ScheduledTask(45, 53, 1), new ScheduledTask(62, 70, 0), new ScheduledTask(38, 45, 1), new ScheduledTask(63, 70, 1), new ScheduledTask(48, 55, 0), new ScheduledTask(42, 48, 0), new ScheduledTask(57, 63, 1), new ScheduledTask(70, 76, 0), new ScheduledTask(70, 75, 1), new ScheduledTask(37, 42, 0), new ScheduledTask(12, 15, 0), new ScheduledTask(55, 57, 1), new ScheduledTask(25, 27, 0), new ScheduledTask(53, 55, 1)};
        int[] expectedProcessorEndTimes = new int[]{76, 75};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(16, 20, 0), new ScheduledTask(20, 22, 0), new ScheduledTask(6, 16, 0), new ScheduledTask(28, 38, 1), new ScheduledTask(22, 32, 0), new ScheduledTask(55, 62, 0), new ScheduledTask(55, 63, 2), new ScheduledTask(62, 70, 0), new ScheduledTask(47, 54, 1), new ScheduledTask(40, 47, 1), new ScheduledTask(48, 55, 0), new ScheduledTask(42, 48, 0), new ScheduledTask(70, 76, 3), new ScheduledTask(70, 76, 0), new ScheduledTask(65, 70, 3), new ScheduledTask(37, 42, 0), new ScheduledTask(34, 37, 0), new ScheduledTask(38, 40, 1), new ScheduledTask(32, 34, 0), new ScheduledTask(38, 40, 3)};
        int[] expectedProcessorEndTimes = new int[]{76, 54, 63, 76};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(18, 22, 0), new ScheduledTask(22, 24, 0), new ScheduledTask(6, 16, 0), new ScheduledTask(28, 38, 1), new ScheduledTask(27, 37, 0), new ScheduledTask(55, 62, 0), new ScheduledTask(57, 65, 2), new ScheduledTask(62, 70, 0), new ScheduledTask(47, 54, 1), new ScheduledTask(40, 47, 1), new ScheduledTask(48, 55, 0), new ScheduledTask(42, 48, 0), new ScheduledTask(68, 74, 3), new ScheduledTask(70, 76, 0), new ScheduledTask(70, 75, 4), new ScheduledTask(37, 42, 0), new ScheduledTask(24, 27, 0), new ScheduledTask(38, 40, 1), new ScheduledTask(16, 18, 0), new ScheduledTask(38, 40, 5)};
        int[] expectedProcessorEndTimes = new int[]{76, 54, 65, 74, 75, 40};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(700, 710, 0), new ScheduledTask(7600, 7607, 0), new ScheduledTask(5100, 5106, 0), new ScheduledTask(2400, 2410, 0), new ScheduledTask(5000, 5002, 1), new ScheduledTask(200, 205, 0), new ScheduledTask(8300, 8310, 0), new ScheduledTask(9900, 9910, 0), new ScheduledTask(4200, 4209, 0), new ScheduledTask(3400, 3408, 0), new ScheduledTask(6800, 6808, 0), new ScheduledTask(6000, 6008, 0), new ScheduledTask(1700, 1707, 0), new ScheduledTask(6200, 6207, 2), new ScheduledTask(9300, 9306, 0), new ScheduledTask(6200, 6204, 1), new ScheduledTask(5700, 5703, 0), new ScheduledTask(8900, 8903, 3), new ScheduledTask(5600, 5603, 3), new ScheduledTask(8600, 8603, 1)};
        int[] expectedProcessorEndTimes = new int[]{9910, 8603, 6207, 8903};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(700, 710, 0), new ScheduledTask(2400, 2407, 0), new ScheduledTask(5500, 5506, 0), new ScheduledTask(3900, 3910, 1), new ScheduledTask(5000, 5002, 2), new ScheduledTask(200, 205, 0), new ScheduledTask(6400, 6410, 3), new ScheduledTask(4500, 4510, 0), new ScheduledTask(6500, 6509, 1), new ScheduledTask(3700, 3708, 0), new ScheduledTask(7200, 7208, 0), new ScheduledTask(6400, 6408, 0), new ScheduledTask(1700, 1707, 0), new ScheduledTask(6800, 6807, 2), new ScheduledTask(3100, 3106, 0), new ScheduledTask(6000, 6004, 2), new ScheduledTask(6100, 6103, 0), new ScheduledTask(5900, 5903, 1), new ScheduledTask(8100, 8103, 0), new ScheduledTask(5400, 5403, 2)};
        int[] expectedProcessorEndTimes = new int[]{8103, 6509, 6807, 6410};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(700, 710, 0), new ScheduledTask(2400, 2407, 0), new ScheduledTask(5500, 5506, 0), new ScheduledTask(3900, 3910, 1), new ScheduledTask(5000, 5002, 2), new ScheduledTask(200, 205, 0), new ScheduledTask(6540, 6550, 1), new ScheduledTask(4500, 4510, 0), new ScheduledTask(5460, 5469, 1), new ScheduledTask(3700, 3708, 0), new ScheduledTask(6900, 6908, 0), new ScheduledTask(6100, 6108, 0), new ScheduledTask(1700, 1707, 0), new ScheduledTask(6200, 6207, 3), new ScheduledTask(3100, 3106, 0), new ScheduledTask(5750, 5754, 2), new ScheduledTask(7700, 7703, 0), new ScheduledTask(5100, 5103, 1), new ScheduledTask(7300, 7303, 2), new ScheduledTask(5300, 5303, 2)};
        int[] expectedProcessorEndTimes = new int[]{7703, 6550, 7303, 6207};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 83;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 12, 0), new ScheduledTask(24, 31, 0), new ScheduledTask(55, 61, 0), new ScheduledTask(34, 44, 1), new ScheduledTask(56, 58, 1), new ScheduledTask(12, 17, 0), new ScheduledTask(65, 75, 1), new ScheduledTask(45, 55, 0), new ScheduledTask(47, 56, 1), new ScheduledTask(37, 45, 0), new ScheduledTask(75, 83, 0), new ScheduledTask(64, 72, 0), new ScheduledTask(17, 24, 0), new ScheduledTask(75, 82, 1), new ScheduledTask(31, 37, 0), new ScheduledTask(61, 65, 1), new ScheduledTask(61, 64, 0), new ScheduledTask(44, 47, 1), new ScheduledTask(72, 75, 0), new ScheduledTask(58, 61, 1)};
        int[] expectedProcessorEndTimes = new int[]{83, 82};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 12, 0), new ScheduledTask(30, 37, 0), new ScheduledTask(24, 30, 0), new ScheduledTask(34, 44, 1), new ScheduledTask(45, 47, 2), new ScheduledTask(12, 17, 0), new ScheduledTask(70, 80, 1), new ScheduledTask(70, 80, 0), new ScheduledTask(47, 56, 1), new ScheduledTask(62, 70, 0), new ScheduledTask(54, 62, 0), new ScheduledTask(46, 54, 0), new ScheduledTask(17, 24, 0), new ScheduledTask(72, 79, 3), new ScheduledTask(40, 46, 0), new ScheduledTask(47, 51, 2), new ScheduledTask(37, 40, 0), new ScheduledTask(44, 47, 1), new ScheduledTask(66, 69, 3), new ScheduledTask(51, 54, 2)};
        int[] expectedProcessorEndTimes = new int[]{80, 80, 54, 79};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Balanced-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(13, 23, 0), new ScheduledTask(26, 33, 0), new ScheduledTask(7, 13, 0), new ScheduledTask(45, 55, 1), new ScheduledTask(67, 69, 1), new ScheduledTask(2, 7, 0), new ScheduledTask(66, 76, 2), new ScheduledTask(70, 80, 0), new ScheduledTask(58, 67, 1), new ScheduledTask(62, 70, 0), new ScheduledTask(54, 62, 0), new ScheduledTask(46, 54, 0), new ScheduledTask(39, 46, 0), new ScheduledTask(62, 69, 3), new ScheduledTask(33, 39, 0), new ScheduledTask(69, 73, 1), new ScheduledTask(23, 26, 0), new ScheduledTask(55, 58, 1), new ScheduledTask(77, 80, 4), new ScheduledTask(73, 76, 1)};
        int[] expectedProcessorEndTimes = new int[]{80, 76, 76, 69, 80};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 9;
        int expectedScheduleEndTime = 416;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 52, 0), new ScheduledTask(52, 156, 0), new ScheduledTask(54, 132, 1), new ScheduledTask(156, 247, 0), new ScheduledTask(132, 171, 1), new ScheduledTask(247, 286, 0), new ScheduledTask(171, 210, 1), new ScheduledTask(257, 309, 1), new ScheduledTask(286, 416, 0), new ScheduledTask(220, 337, 2), new ScheduledTask(160, 212, 3), new ScheduledTask(296, 400, 3), new ScheduledTask(309, 387, 1), new ScheduledTask(294, 359, 4), new ScheduledTask(222, 274, 5), new ScheduledTask(216, 255, 6), new ScheduledTask(218, 257, 7), new ScheduledTask(256, 282, 6), new ScheduledTask(214, 240, 8), new ScheduledTask(319, 345, 5), new ScheduledTask(315, 341, 6)};
        int[] expectedProcessorEndTimes = new int[]{416, 387, 337, 400, 359, 345, 341, 257, 240};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 665;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 52, 0), new ScheduledTask(52, 156, 0), new ScheduledTask(54, 132, 1), new ScheduledTask(156, 247, 0), new ScheduledTask(132, 171, 1), new ScheduledTask(390, 429, 0), new ScheduledTask(405, 444, 1), new ScheduledTask(275, 327, 1), new ScheduledTask(533, 663, 0), new ScheduledTask(548, 665, 1), new ScheduledTask(171, 223, 1), new ScheduledTask(444, 548, 1), new ScheduledTask(327, 405, 1), new ScheduledTask(429, 494, 0), new ScheduledTask(223, 275, 1), new ScheduledTask(299, 338, 0), new ScheduledTask(494, 533, 0), new ScheduledTask(273, 299, 0), new ScheduledTask(247, 273, 0), new ScheduledTask(364, 390, 0), new ScheduledTask(338, 364, 0)};
        int[] expectedProcessorEndTimes = new int[]{663, 665};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 431;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 52, 0), new ScheduledTask(52, 156, 0), new ScheduledTask(54, 132, 1), new ScheduledTask(160, 251, 2), new ScheduledTask(132, 171, 1), new ScheduledTask(260, 299, 3), new ScheduledTask(173, 212, 3), new ScheduledTask(251, 303, 2), new ScheduledTask(299, 429, 3), new ScheduledTask(236, 353, 1), new ScheduledTask(156, 208, 0), new ScheduledTask(325, 429, 0), new ScheduledTask(353, 431, 1), new ScheduledTask(355, 420, 2), new ScheduledTask(208, 260, 0), new ScheduledTask(212, 251, 3), new ScheduledTask(286, 325, 0), new ScheduledTask(260, 286, 0), new ScheduledTask(210, 236, 1), new ScheduledTask(329, 355, 2), new ScheduledTask(303, 329, 2)};
        int[] expectedProcessorEndTimes = new int[]{429, 431, 420, 429};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 416;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 52, 0), new ScheduledTask(52, 156, 0), new ScheduledTask(54, 132, 1), new ScheduledTask(156, 247, 0), new ScheduledTask(132, 171, 1), new ScheduledTask(247, 286, 0), new ScheduledTask(171, 210, 1), new ScheduledTask(257, 309, 1), new ScheduledTask(286, 416, 0), new ScheduledTask(220, 337, 2), new ScheduledTask(160, 212, 3), new ScheduledTask(296, 400, 3), new ScheduledTask(309, 387, 1), new ScheduledTask(294, 359, 4), new ScheduledTask(222, 274, 5), new ScheduledTask(216, 255, 6), new ScheduledTask(218, 257, 7), new ScheduledTask(256, 282, 6), new ScheduledTask(257, 283, 7), new ScheduledTask(319, 345, 5), new ScheduledTask(315, 341, 6)};
        int[] expectedProcessorEndTimes = new int[]{416, 387, 337, 400, 359, 345, 341, 283};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 12;
        int expectedScheduleEndTime = 40;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(15, 25, 0), new ScheduledTask(9, 15, 0), new ScheduledTask(16, 18, 1), new ScheduledTask(18, 22, 1), new ScheduledTask(25, 35, 0), new ScheduledTask(18, 22, 2), new ScheduledTask(20, 24, 3), new ScheduledTask(23, 31, 4), new ScheduledTask(22, 32, 1), new ScheduledTask(27, 37, 5), new ScheduledTask(24, 34, 6), new ScheduledTask(24, 33, 3), new ScheduledTask(22, 31, 2), new ScheduledTask(32, 39, 7), new ScheduledTask(35, 39, 0), new ScheduledTask(30, 33, 8), new ScheduledTask(31, 34, 4), new ScheduledTask(37, 40, 9), new ScheduledTask(37, 39, 10), new ScheduledTask(38, 40, 11)};
        int[] expectedProcessorEndTimes = new int[]{39, 32, 31, 33, 34, 37, 34, 39, 33, 40, 39, 40};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(11, 21, 0), new ScheduledTask(14, 20, 1), new ScheduledTask(9, 11, 0), new ScheduledTask(48, 52, 1), new ScheduledTask(21, 31, 0), new ScheduledTask(28, 32, 1), new ScheduledTask(40, 44, 0), new ScheduledTask(20, 28, 1), new ScheduledTask(62, 72, 1), new ScheduledTask(52, 62, 1), new ScheduledTask(32, 42, 1), new ScheduledTask(63, 72, 0), new ScheduledTask(51, 60, 0), new ScheduledTask(44, 51, 0), new ScheduledTask(44, 48, 1), new ScheduledTask(60, 63, 0), new ScheduledTask(37, 40, 0), new ScheduledTask(34, 37, 0), new ScheduledTask(42, 44, 1), new ScheduledTask(31, 33, 0)};
        int[] expectedProcessorEndTimes = new int[]{72, 72};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 19, 0), new ScheduledTask(14, 20, 1), new ScheduledTask(16, 18, 2), new ScheduledTask(18, 22, 2), new ScheduledTask(19, 29, 0), new ScheduledTask(20, 24, 1), new ScheduledTask(25, 29, 3), new ScheduledTask(29, 37, 3), new ScheduledTask(32, 42, 2), new ScheduledTask(22, 32, 2), new ScheduledTask(29, 39, 0), new ScheduledTask(37, 46, 1), new ScheduledTask(24, 33, 1), new ScheduledTask(39, 46, 0), new ScheduledTask(42, 46, 2), new ScheduledTask(43, 46, 3), new ScheduledTask(40, 43, 3), new ScheduledTask(37, 40, 3), new ScheduledTask(35, 37, 1), new ScheduledTask(33, 35, 1)};
        int[] expectedProcessorEndTimes = new int[]{46, 46, 46, 46};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 40;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(15, 25, 0), new ScheduledTask(9, 15, 0), new ScheduledTask(16, 18, 1), new ScheduledTask(18, 22, 1), new ScheduledTask(25, 35, 0), new ScheduledTask(18, 22, 2), new ScheduledTask(20, 24, 3), new ScheduledTask(23, 31, 4), new ScheduledTask(22, 32, 1), new ScheduledTask(27, 37, 5), new ScheduledTask(24, 34, 6), new ScheduledTask(24, 33, 3), new ScheduledTask(22, 31, 2), new ScheduledTask(33, 40, 7), new ScheduledTask(35, 39, 0), new ScheduledTask(30, 33, 7), new ScheduledTask(31, 34, 4), new ScheduledTask(37, 40, 6), new ScheduledTask(37, 39, 5), new ScheduledTask(38, 40, 4)};
        int[] expectedProcessorEndTimes = new int[]{39, 32, 31, 33, 40, 39, 40, 40};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(23, 31, 0), new ScheduledTask(31, 34, 0), new ScheduledTask(5, 15, 0), new ScheduledTask(34, 44, 0), new ScheduledTask(15, 19, 0), new ScheduledTask(19, 23, 0), new ScheduledTask(52, 59, 0), new ScheduledTask(60, 62, 1), new ScheduledTask(44, 50, 0), new ScheduledTask(56, 58, 2), new ScheduledTask(56, 60, 3), new ScheduledTask(61, 64, 4), new ScheduledTask(59, 67, 0), new ScheduledTask(60, 66, 3), new ScheduledTask(64, 69, 1), new ScheduledTask(64, 68, 4), new ScheduledTask(58, 62, 2), new ScheduledTask(62, 64, 1), new ScheduledTask(50, 52, 0), new ScheduledTask(66, 68, 3)};
        int[] expectedProcessorEndTimes = new int[]{67, 69, 62, 68, 68};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(19, 27, 0), new ScheduledTask(27, 30, 0), new ScheduledTask(5, 15, 0), new ScheduledTask(30, 40, 0), new ScheduledTask(15, 19, 0), new ScheduledTask(36, 40, 1), new ScheduledTask(55, 62, 0), new ScheduledTask(60, 62, 1), new ScheduledTask(47, 53, 0), new ScheduledTask(52, 54, 1), new ScheduledTask(40, 44, 1), new ScheduledTask(40, 43, 0), new ScheduledTask(62, 70, 0), new ScheduledTask(46, 52, 1), new ScheduledTask(64, 69, 1), new ScheduledTask(43, 47, 0), new ScheduledTask(54, 58, 1), new ScheduledTask(62, 64, 1), new ScheduledTask(53, 55, 0), new ScheduledTask(44, 46, 1)};
        int[] expectedProcessorEndTimes = new int[]{70, 69};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(19, 27, 0), new ScheduledTask(27, 30, 0), new ScheduledTask(5, 15, 0), new ScheduledTask(30, 40, 0), new ScheduledTask(15, 19, 0), new ScheduledTask(36, 40, 1), new ScheduledTask(48, 55, 0), new ScheduledTask(60, 62, 2), new ScheduledTask(40, 46, 0), new ScheduledTask(52, 54, 1), new ScheduledTask(40, 44, 1), new ScheduledTask(57, 60, 3), new ScheduledTask(55, 63, 0), new ScheduledTask(46, 52, 1), new ScheduledTask(64, 69, 2), new ScheduledTask(60, 64, 3), new ScheduledTask(54, 58, 1), new ScheduledTask(62, 64, 2), new ScheduledTask(46, 48, 0), new ScheduledTask(44, 46, 1)};
        int[] expectedProcessorEndTimes = new int[]{63, 58, 69, 64};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(23, 31, 0), new ScheduledTask(31, 34, 0), new ScheduledTask(5, 15, 0), new ScheduledTask(34, 44, 0), new ScheduledTask(15, 19, 0), new ScheduledTask(19, 23, 0), new ScheduledTask(52, 59, 0), new ScheduledTask(60, 62, 1), new ScheduledTask(44, 50, 0), new ScheduledTask(56, 58, 2), new ScheduledTask(56, 60, 3), new ScheduledTask(61, 64, 4), new ScheduledTask(59, 67, 0), new ScheduledTask(60, 66, 3), new ScheduledTask(64, 69, 1), new ScheduledTask(64, 68, 4), new ScheduledTask(58, 62, 2), new ScheduledTask(62, 64, 1), new ScheduledTask(50, 52, 0), new ScheduledTask(66, 68, 3)};
        int[] expectedProcessorEndTimes = new int[]{67, 69, 62, 68, 68};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_21_CCR_2dot03_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_21_CCR_2.03_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 11;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 8, 0), new ScheduledTask(11, 15, 1), new ScheduledTask(8, 13, 2), new ScheduledTask(14, 22, 3), new ScheduledTask(21, 26, 4), new ScheduledTask(26, 35, 5), new ScheduledTask(13, 22, 2), new ScheduledTask(8, 18, 0), new ScheduledTask(29, 37, 6), new ScheduledTask(22, 29, 2), new ScheduledTask(22, 29, 3), new ScheduledTask(29, 35, 2), new ScheduledTask(26, 32, 4), new ScheduledTask(32, 37, 7), new ScheduledTask(25, 30, 8), new ScheduledTask(29, 34, 9), new ScheduledTask(32, 35, 4), new ScheduledTask(29, 31, 3), new ScheduledTask(30, 32, 10), new ScheduledTask(35, 37, 5)};
        int[] expectedProcessorEndTimes = new int[]{18, 15, 35, 31, 35, 37, 37, 37, 30, 34, 32};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_21_CCR_2dot03_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_21_CCR_2.03_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(6, 12, 0), new ScheduledTask(2, 6, 0), new ScheduledTask(8, 13, 1), new ScheduledTask(12, 20, 0), new ScheduledTask(13, 18, 1), new ScheduledTask(21, 30, 1), new ScheduledTask(29, 38, 0), new ScheduledTask(30, 40, 1), new ScheduledTask(54, 62, 1), new ScheduledTask(47, 54, 1), new ScheduledTask(40, 47, 1), new ScheduledTask(56, 62, 0), new ScheduledTask(43, 49, 0), new ScheduledTask(38, 43, 0), new ScheduledTask(51, 56, 0), new ScheduledTask(24, 29, 0), new ScheduledTask(18, 21, 1), new ScheduledTask(20, 22, 0), new ScheduledTask(22, 24, 0), new ScheduledTask(49, 51, 0)};
        int[] expectedProcessorEndTimes = new int[]{62, 62};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_21_CCR_2dot03_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_21_CCR_2.03_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 38;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 8, 0), new ScheduledTask(11, 15, 1), new ScheduledTask(8, 13, 2), new ScheduledTask(14, 22, 3), new ScheduledTask(23, 28, 0), new ScheduledTask(20, 29, 1), new ScheduledTask(13, 22, 2), new ScheduledTask(8, 18, 0), new ScheduledTask(28, 36, 2), new ScheduledTask(31, 38, 3), new ScheduledTask(24, 31, 3), new ScheduledTask(22, 28, 2), new ScheduledTask(28, 34, 0), new ScheduledTask(15, 20, 1), new ScheduledTask(18, 23, 0), new ScheduledTask(31, 36, 1), new ScheduledTask(34, 37, 0), new ScheduledTask(22, 24, 3), new ScheduledTask(36, 38, 2), new ScheduledTask(29, 31, 1)};
        int[] expectedProcessorEndTimes = new int[]{37, 36, 38, 38};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_21_CCR_2dot03_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_21_CCR_2.03_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 8, 0), new ScheduledTask(11, 15, 1), new ScheduledTask(8, 13, 2), new ScheduledTask(14, 22, 3), new ScheduledTask(21, 26, 4), new ScheduledTask(26, 35, 5), new ScheduledTask(13, 22, 2), new ScheduledTask(8, 18, 0), new ScheduledTask(29, 37, 6), new ScheduledTask(22, 29, 2), new ScheduledTask(27, 34, 3), new ScheduledTask(29, 35, 2), new ScheduledTask(26, 32, 4), new ScheduledTask(32, 37, 7), new ScheduledTask(25, 30, 7), new ScheduledTask(22, 27, 3), new ScheduledTask(32, 35, 4), new ScheduledTask(34, 36, 3), new ScheduledTask(30, 32, 7), new ScheduledTask(35, 37, 5)};
        int[] expectedProcessorEndTimes = new int[]{18, 15, 35, 36, 35, 37, 37, 37};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 186500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 37, 0), new ScheduledTask(3700, 3865, 0), new ScheduledTask(20200, 20328, 0), new ScheduledTask(33000, 33110, 0), new ScheduledTask(33200, 33255, 1), new ScheduledTask(34000, 34092, 2), new ScheduledTask(66800, 66983, 0), new ScheduledTask(96100, 96192, 0), new ScheduledTask(44000, 44092, 0), new ScheduledTask(105300, 105428, 0), new ScheduledTask(85100, 85210, 0), new ScheduledTask(118100, 118265, 0), new ScheduledTask(53200, 53273, 0), new ScheduledTask(96900, 96955, 3), new ScheduledTask(60500, 60555, 0), new ScheduledTask(138300, 138392, 0), new ScheduledTask(66300, 66465, 1), new ScheduledTask(134600, 134637, 0), new ScheduledTask(147500, 147665, 0), new ScheduledTask(166300, 166355, 0), new ScheduledTask(171800, 171947, 0)};
        int[] expectedProcessorEndTimes = new int[]{171947, 66465, 34092, 96955};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 135700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 37, 0), new ScheduledTask(3700, 3865, 0), new ScheduledTask(4700, 4828, 1), new ScheduledTask(20200, 20310, 0), new ScheduledTask(31200, 31255, 0), new ScheduledTask(31300, 31392, 2), new ScheduledTask(36700, 36883, 0), new ScheduledTask(55000, 55092, 0), new ScheduledTask(31800, 31892, 3), new ScheduledTask(64200, 64328, 0), new ScheduledTask(55900, 56010, 2), new ScheduledTask(78800, 78965, 0), new ScheduledTask(50200, 50273, 3), new ScheduledTask(78700, 78755, 3), new ScheduledTask(64800, 64855, 3), new ScheduledTask(95300, 95392, 0), new ScheduledTask(76100, 76265, 1), new ScheduledTask(89700, 89737, 3), new ScheduledTask(104500, 104665, 0), new ScheduledTask(109100, 109155, 1), new ScheduledTask(121000, 121147, 0)};
        int[] expectedProcessorEndTimes = new int[]{121147, 109155, 56010, 89737};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 121400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 37, 0), new ScheduledTask(3700, 3865, 0), new ScheduledTask(4700, 4828, 1), new ScheduledTask(20200, 20310, 0), new ScheduledTask(21200, 21255, 1), new ScheduledTask(21060, 21152, 2), new ScheduledTask(31200, 31383, 0), new ScheduledTask(35860, 35952, 1), new ScheduledTask(34860, 34952, 2), new ScheduledTask(49500, 49628, 0), new ScheduledTask(50400, 50510, 1), new ScheduledTask(64500, 64665, 0), new ScheduledTask(48660, 48733, 2), new ScheduledTask(63600, 63655, 1), new ScheduledTask(59610, 59665, 2), new ScheduledTask(81000, 81092, 0), new ScheduledTask(70200, 70365, 1), new ScheduledTask(71200, 71237, 2), new ScheduledTask(90200, 90365, 0), new ScheduledTask(90000, 90055, 1), new ScheduledTask(106700, 106847, 0)};
        int[] expectedProcessorEndTimes = new int[]{106847, 90055, 71237};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1207;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 37, 0), new ScheduledTask(44, 209, 1), new ScheduledTask(37, 165, 0), new ScheduledTask(209, 319, 1), new ScheduledTask(257, 312, 0), new ScheduledTask(165, 257, 0), new ScheduledTask(319, 502, 1), new ScheduledTask(417, 509, 0), new ScheduledTask(325, 417, 0), new ScheduledTask(509, 637, 0), new ScheduledTask(502, 612, 1), new ScheduledTask(637, 802, 0), new ScheduledTask(612, 685, 1), new ScheduledTask(740, 795, 1), new ScheduledTask(685, 740, 1), new ScheduledTask(802, 894, 0), new ScheduledTask(832, 997, 1), new ScheduledTask(795, 832, 1), new ScheduledTask(894, 1059, 0), new ScheduledTask(997, 1052, 1), new ScheduledTask(1060, 1207, 0)};
        int[] expectedProcessorEndTimes = new int[]{1207, 1052};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 1192;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 37, 0), new ScheduledTask(37, 202, 0), new ScheduledTask(47, 175, 1), new ScheduledTask(202, 312, 0), new ScheduledTask(212, 267, 1), new ScheduledTask(185, 277, 2), new ScheduledTask(312, 495, 0), new ScheduledTask(277, 369, 2), new ScheduledTask(318, 410, 1), new ScheduledTask(495, 623, 0), new ScheduledTask(504, 614, 1), new ScheduledTask(623, 788, 0), new ScheduledTask(417, 490, 2), new ScheduledTask(614, 669, 1), new ScheduledTask(490, 545, 2), new ScheduledTask(788, 880, 0), new ScheduledTask(545, 710, 2), new ScheduledTask(669, 706, 1), new ScheduledTask(880, 1045, 0), new ScheduledTask(712, 767, 2), new ScheduledTask(1045, 1192, 0)};
        int[] expectedProcessorEndTimes = new int[]{1192, 706, 767};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 1192;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 37, 0), new ScheduledTask(37, 202, 0), new ScheduledTask(47, 175, 1), new ScheduledTask(202, 312, 0), new ScheduledTask(212, 267, 1), new ScheduledTask(185, 277, 2), new ScheduledTask(312, 495, 0), new ScheduledTask(277, 369, 2), new ScheduledTask(318, 410, 1), new ScheduledTask(495, 623, 0), new ScheduledTask(504, 614, 1), new ScheduledTask(623, 788, 0), new ScheduledTask(417, 490, 2), new ScheduledTask(614, 669, 1), new ScheduledTask(490, 545, 2), new ScheduledTask(788, 880, 0), new ScheduledTask(545, 710, 2), new ScheduledTask(669, 706, 1), new ScheduledTask(880, 1045, 0), new ScheduledTask(712, 767, 2), new ScheduledTask(1045, 1192, 0)};
        int[] expectedProcessorEndTimes = new int[]{1192, 706, 767};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random2_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#2_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 163500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 75, 0), new ScheduledTask(33000, 33135, 0), new ScheduledTask(7500, 7560, 0), new ScheduledTask(46500, 46635, 0), new ScheduledTask(13500, 13560, 0), new ScheduledTask(60000, 60120, 0), new ScheduledTask(19500, 19590, 0), new ScheduledTask(46900, 46930, 1), new ScheduledTask(85500, 85545, 0), new ScheduledTask(72000, 72135, 0), new ScheduledTask(90000, 90135, 0), new ScheduledTask(28500, 28545, 0), new ScheduledTask(33700, 33760, 2), new ScheduledTask(103500, 103635, 0), new ScheduledTask(69700, 69805, 2), new ScheduledTask(86500, 86530, 3), new ScheduledTask(104500, 104530, 3), new ScheduledTask(117000, 117075, 0), new ScheduledTask(133500, 133650, 0), new ScheduledTask(124500, 124590, 0), new ScheduledTask(148500, 148650, 0)};
        int[] expectedProcessorEndTimes = new int[]{148650, 46930, 69805, 104530};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random2_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#2_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 125800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 75, 0), new ScheduledTask(13500, 13635, 0), new ScheduledTask(7500, 7560, 0), new ScheduledTask(27000, 27135, 0), new ScheduledTask(14500, 14560, 1), new ScheduledTask(40500, 40620, 0), new ScheduledTask(27000, 27090, 2), new ScheduledTask(27400, 27430, 3), new ScheduledTask(41500, 41545, 3), new ScheduledTask(52500, 52635, 0), new ScheduledTask(53400, 53535, 3), new ScheduledTask(45000, 45045, 2), new ScheduledTask(54000, 54060, 2), new ScheduledTask(80800, 80935, 0), new ScheduledTask(66800, 66905, 0), new ScheduledTask(67000, 67030, 2), new ScheduledTask(73000, 73030, 2), new ScheduledTask(94300, 94375, 0), new ScheduledTask(79000, 79150, 2), new ScheduledTask(101800, 101890, 0), new ScheduledTask(110800, 110950, 0)};
        int[] expectedProcessorEndTimes = new int[]{110950, 14560, 79150, 53535};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random2_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#2_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 108500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 75, 0), new ScheduledTask(7500, 7635, 0), new ScheduledTask(7900, 7960, 1), new ScheduledTask(21000, 21135, 0), new ScheduledTask(16100, 16160, 2), new ScheduledTask(34500, 34620, 0), new ScheduledTask(25100, 25190, 2), new ScheduledTask(21400, 21430, 3), new ScheduledTask(35500, 35545, 1), new ScheduledTask(46700, 46835, 1), new ScheduledTask(46500, 46635, 0), new ScheduledTask(38800, 38845, 3), new ScheduledTask(48500, 48560, 2), new ScheduledTask(63500, 63635, 0), new ScheduledTask(57500, 57605, 2), new ScheduledTask(63900, 63930, 3), new ScheduledTask(70400, 70430, 1), new ScheduledTask(77000, 77075, 0), new ScheduledTask(74000, 74150, 1), new ScheduledTask(84500, 84590, 0), new ScheduledTask(93500, 93650, 0)};
        int[] expectedProcessorEndTimes = new int[]{93650, 74150, 57605, 63930};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1065;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 75, 0), new ScheduledTask(75, 210, 0), new ScheduledTask(79, 139, 1), new ScheduledTask(210, 345, 0), new ScheduledTask(139, 199, 1), new ScheduledTask(345, 465, 0), new ScheduledTask(199, 289, 1), new ScheduledTask(334, 364, 1), new ScheduledTask(364, 409, 1), new ScheduledTask(469, 604, 1), new ScheduledTask(465, 600, 0), new ScheduledTask(289, 334, 1), new ScheduledTask(409, 469, 1), new ScheduledTask(604, 739, 1), new ScheduledTask(600, 705, 0), new ScheduledTask(705, 735, 0), new ScheduledTask(735, 765, 0), new ScheduledTask(739, 814, 1), new ScheduledTask(765, 915, 0), new ScheduledTask(814, 904, 1), new ScheduledTask(915, 1065, 0)};
        int[] expectedProcessorEndTimes = new int[]{1065, 904};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1054;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 75, 0), new ScheduledTask(75, 210, 0), new ScheduledTask(79, 139, 1), new ScheduledTask(210, 345, 0), new ScheduledTask(149, 209, 2), new ScheduledTask(345, 465, 0), new ScheduledTask(244, 334, 3), new ScheduledTask(214, 244, 3), new ScheduledTask(355, 400, 1), new ScheduledTask(467, 602, 3), new ScheduledTask(465, 600, 0), new ScheduledTask(334, 379, 3), new ScheduledTask(379, 439, 3), new ScheduledTask(604, 739, 3), new ScheduledTask(447, 552, 2), new ScheduledTask(612, 642, 2), new ScheduledTask(642, 672, 2), new ScheduledTask(739, 814, 3), new ScheduledTask(672, 822, 2), new ScheduledTask(814, 904, 3), new ScheduledTask(904, 1054, 3)};
        int[] expectedProcessorEndTimes = new int[]{600, 400, 822, 1054};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 1054;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 75, 0), new ScheduledTask(75, 210, 0), new ScheduledTask(79, 139, 1), new ScheduledTask(210, 345, 0), new ScheduledTask(149, 209, 2), new ScheduledTask(345, 465, 0), new ScheduledTask(214, 304, 3), new ScheduledTask(214, 244, 4), new ScheduledTask(355, 400, 3), new ScheduledTask(467, 602, 5), new ScheduledTask(465, 600, 0), new ScheduledTask(306, 351, 5), new ScheduledTask(351, 411, 5), new ScheduledTask(604, 739, 5), new ScheduledTask(419, 524, 4), new ScheduledTask(612, 642, 4), new ScheduledTask(642, 672, 4), new ScheduledTask(739, 814, 5), new ScheduledTask(672, 822, 4), new ScheduledTask(814, 904, 5), new ScheduledTask(904, 1054, 5)};
        int[] expectedProcessorEndTimes = new int[]{600, 139, 209, 400, 822, 1054};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random3_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#3_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 167100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 31, 0), new ScheduledTask(13900, 13993, 0), new ScheduledTask(3100, 3208, 0), new ScheduledTask(23200, 23262, 0), new ScheduledTask(24000, 24031, 1), new ScheduledTask(58800, 58955, 0), new ScheduledTask(29400, 29493, 0), new ScheduledTask(86700, 86839, 0), new ScheduledTask(38700, 38793, 0), new ScheduledTask(14200, 14246, 2), new ScheduledTask(43100, 43131, 3), new ScheduledTask(105200, 105324, 0), new ScheduledTask(74300, 74424, 0), new ScheduledTask(48000, 48108, 0), new ScheduledTask(100600, 100646, 0), new ScheduledTask(123800, 123908, 0), new ScheduledTask(61700, 61839, 3), new ScheduledTask(117600, 117662, 0), new ScheduledTask(134600, 134755, 0), new ScheduledTask(150100, 150208, 0), new ScheduledTask(160900, 160962, 0)};
        int[] expectedProcessorEndTimes = new int[]{160962, 24031, 14246, 61839};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random3_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#3_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 118400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 31, 0), new ScheduledTask(3100, 3193, 0), new ScheduledTask(3500, 3608, 1), new ScheduledTask(12400, 12462, 0), new ScheduledTask(25900, 25931, 2), new ScheduledTask(37200, 37355, 0), new ScheduledTask(18600, 18693, 0), new ScheduledTask(52700, 52839, 0), new ScheduledTask(27900, 27993, 0), new ScheduledTask(25400, 25446, 3), new ScheduledTask(34600, 34631, 3), new ScheduledTask(66600, 66724, 0), new ScheduledTask(53000, 53124, 3), new ScheduledTask(37700, 37808, 2), new ScheduledTask(77800, 77846, 3), new ScheduledTask(79000, 79108, 0), new ScheduledTask(59300, 59439, 2), new ScheduledTask(89800, 89862, 0), new ScheduledTask(96000, 96155, 0), new ScheduledTask(90000, 90108, 3), new ScheduledTask(112200, 112262, 0)};
        int[] expectedProcessorEndTimes = new int[]{112262, 3608, 59439, 90108};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random3_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#3_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 95780;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 31, 0), new ScheduledTask(3100, 3193, 0), new ScheduledTask(3500, 3608, 1), new ScheduledTask(12400, 12462, 0), new ScheduledTask(16460, 16491, 1), new ScheduledTask(21180, 21335, 0), new ScheduledTask(18800, 18893, 2), new ScheduledTask(36680, 36819, 0), new ScheduledTask(33550, 33643, 1), new ScheduledTask(16760, 16806, 3), new ScheduledTask(32750, 32781, 2), new ScheduledTask(50580, 50704, 0), new ScheduledTask(37400, 37524, 2), new ScheduledTask(44710, 44818, 1), new ScheduledTask(56000, 56046, 2), new ScheduledTask(62980, 63088, 0), new ScheduledTask(57670, 57809, 1), new ScheduledTask(63980, 64042, 2), new ScheduledTask(74080, 74235, 0), new ScheduledTask(74350, 74458, 1), new ScheduledTask(89580, 89642, 0)};
        int[] expectedProcessorEndTimes = new int[]{89642, 74458, 64042, 16806};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1011;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 31, 0), new ScheduledTask(36, 129, 1), new ScheduledTask(31, 139, 0), new ScheduledTask(129, 191, 1), new ScheduledTask(185, 216, 0), new ScheduledTask(216, 371, 0), new ScheduledTask(191, 284, 1), new ScheduledTask(371, 510, 0), new ScheduledTask(315, 408, 1), new ScheduledTask(139, 185, 0), new ScheduledTask(284, 315, 1), new ScheduledTask(510, 634, 0), new ScheduledTask(408, 532, 1), new ScheduledTask(578, 686, 1), new ScheduledTask(532, 578, 1), new ScheduledTask(686, 794, 1), new ScheduledTask(696, 835, 0), new ScheduledTask(634, 696, 0), new ScheduledTask(794, 949, 1), new ScheduledTask(835, 943, 0), new ScheduledTask(949, 1011, 1)};
        int[] expectedProcessorEndTimes = new int[]{943, 1011};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 929;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 31, 0), new ScheduledTask(31, 124, 0), new ScheduledTask(35, 143, 1), new ScheduledTask(124, 186, 0), new ScheduledTask(143, 174, 1), new ScheduledTask(186, 341, 0), new ScheduledTask(188, 281, 1), new ScheduledTask(341, 480, 0), new ScheduledTask(281, 374, 1), new ScheduledTask(146, 192, 2), new ScheduledTask(192, 223, 2), new ScheduledTask(480, 604, 0), new ScheduledTask(344, 468, 2), new ScheduledTask(374, 482, 1), new ScheduledTask(485, 531, 1), new ScheduledTask(604, 712, 0), new ScheduledTask(486, 625, 2), new ScheduledTask(614, 676, 1), new ScheduledTask(712, 867, 0), new ScheduledTask(714, 822, 1), new ScheduledTask(867, 929, 0)};
        int[] expectedProcessorEndTimes = new int[]{929, 822, 625};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 929;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 31, 0), new ScheduledTask(31, 124, 0), new ScheduledTask(35, 143, 1), new ScheduledTask(124, 186, 0), new ScheduledTask(143, 174, 1), new ScheduledTask(186, 341, 0), new ScheduledTask(188, 281, 1), new ScheduledTask(341, 480, 0), new ScheduledTask(281, 374, 1), new ScheduledTask(146, 192, 2), new ScheduledTask(192, 223, 2), new ScheduledTask(480, 604, 0), new ScheduledTask(344, 468, 2), new ScheduledTask(374, 482, 1), new ScheduledTask(485, 531, 1), new ScheduledTask(604, 712, 0), new ScheduledTask(486, 625, 2), new ScheduledTask(614, 676, 1), new ScheduledTask(712, 867, 0), new ScheduledTask(714, 822, 1), new ScheduledTask(867, 929, 0)};
        int[] expectedProcessorEndTimes = new int[]{929, 822, 625};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random4_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#4_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 156500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 132, 0), new ScheduledTask(13200, 13365, 0), new ScheduledTask(13400, 13449, 1), new ScheduledTask(52700, 52782, 0), new ScheduledTask(29700, 29782, 0), new ScheduledTask(46100, 46166, 0), new ScheduledTask(60900, 61032, 0), new ScheduledTask(37900, 37982, 0), new ScheduledTask(53400, 53433, 2), new ScheduledTask(46300, 46349, 3), new ScheduledTask(74100, 74133, 0), new ScheduledTask(75700, 75749, 3), new ScheduledTask(85600, 85682, 0), new ScheduledTask(77400, 77482, 0), new ScheduledTask(110300, 110432, 0), new ScheduledTask(93800, 93965, 0), new ScheduledTask(123500, 123566, 0), new ScheduledTask(130100, 130232, 0), new ScheduledTask(85900, 85933, 2), new ScheduledTask(110500, 110533, 3), new ScheduledTask(143300, 143432, 0)};
        int[] expectedProcessorEndTimes = new int[]{143432, 13449, 85933, 110533};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random4_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#4_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 120300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 132, 0), new ScheduledTask(13200, 13365, 0), new ScheduledTask(13400, 13449, 1), new ScheduledTask(23600, 23682, 2), new ScheduledTask(29700, 29782, 0), new ScheduledTask(30300, 30366, 1), new ScheduledTask(46100, 46232, 0), new ScheduledTask(37900, 37982, 0), new ScheduledTask(44200, 44233, 3), new ScheduledTask(46300, 46349, 2), new ScheduledTask(50800, 50833, 3), new ScheduledTask(59300, 59349, 0), new ScheduledTask(57400, 57482, 3), new ScheduledTask(56100, 56182, 2), new ScheduledTask(64200, 64332, 0), new ScheduledTask(77400, 77565, 0), new ScheduledTask(78000, 78066, 3), new ScheduledTask(93900, 94032, 0), new ScheduledTask(91200, 91233, 3), new ScheduledTask(97800, 97833, 3), new ScheduledTask(107100, 107232, 0)};
        int[] expectedProcessorEndTimes = new int[]{107232, 30366, 56182, 97833};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random4_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#4_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 110320;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 132, 0), new ScheduledTask(13200, 13365, 0), new ScheduledTask(13400, 13449, 1), new ScheduledTask(19680, 19762, 2), new ScheduledTask(29700, 29782, 0), new ScheduledTask(30300, 30366, 1), new ScheduledTask(38820, 38952, 0), new ScheduledTask(38600, 38682, 1), new ScheduledTask(38920, 38953, 3), new ScheduledTask(48440, 48489, 1), new ScheduledTask(48740, 48773, 3), new ScheduledTask(52020, 52069, 0), new ScheduledTask(56920, 57002, 0), new ScheduledTask(54820, 54902, 2), new ScheduledTask(57720, 57852, 1), new ScheduledTask(67420, 67585, 0), new ScheduledTask(73560, 73626, 1), new ScheduledTask(83920, 84052, 0), new ScheduledTask(67420, 67453, 3), new ScheduledTask(84120, 84153, 3), new ScheduledTask(97120, 97252, 0)};
        int[] expectedProcessorEndTimes = new int[]{97252, 73626, 54902, 84153};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1095;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 132, 0), new ScheduledTask(132, 297, 0), new ScheduledTask(134, 183, 1), new ScheduledTask(183, 265, 1), new ScheduledTask(297, 379, 0), new ScheduledTask(303, 369, 1), new ScheduledTask(369, 501, 1), new ScheduledTask(412, 494, 0), new ScheduledTask(379, 412, 0), new ScheduledTask(494, 543, 0), new ScheduledTask(550, 583, 1), new ScheduledTask(501, 550, 1), new ScheduledTask(583, 665, 1), new ScheduledTask(543, 625, 0), new ScheduledTask(625, 757, 0), new ScheduledTask(665, 830, 1), new ScheduledTask(757, 823, 0), new ScheduledTask(831, 963, 1), new ScheduledTask(823, 856, 0), new ScheduledTask(856, 889, 0), new ScheduledTask(963, 1095, 1)};
        int[] expectedProcessorEndTimes = new int[]{889, 1095};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1024;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 132, 0), new ScheduledTask(132, 297, 0), new ScheduledTask(134, 183, 1), new ScheduledTask(187, 269, 2), new ScheduledTask(297, 379, 0), new ScheduledTask(303, 369, 2), new ScheduledTask(369, 501, 2), new ScheduledTask(379, 461, 0), new ScheduledTask(382, 415, 1), new ScheduledTask(461, 510, 0), new ScheduledTask(464, 497, 3), new ScheduledTask(501, 550, 2), new ScheduledTask(513, 595, 3), new ScheduledTask(510, 592, 0), new ScheduledTask(550, 682, 2), new ScheduledTask(595, 760, 3), new ScheduledTask(682, 748, 2), new ScheduledTask(760, 892, 3), new ScheduledTask(748, 781, 2), new ScheduledTask(781, 814, 2), new ScheduledTask(892, 1024, 3)};
        int[] expectedProcessorEndTimes = new int[]{592, 415, 814, 1024};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 1024;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 132, 0), new ScheduledTask(132, 297, 0), new ScheduledTask(134, 183, 1), new ScheduledTask(187, 269, 2), new ScheduledTask(297, 379, 0), new ScheduledTask(303, 369, 1), new ScheduledTask(369, 501, 1), new ScheduledTask(379, 461, 0), new ScheduledTask(382, 415, 3), new ScheduledTask(461, 510, 0), new ScheduledTask(464, 497, 4), new ScheduledTask(501, 550, 1), new ScheduledTask(513, 595, 5), new ScheduledTask(510, 592, 0), new ScheduledTask(550, 682, 1), new ScheduledTask(595, 760, 5), new ScheduledTask(682, 748, 1), new ScheduledTask(760, 892, 5), new ScheduledTask(595, 628, 4), new ScheduledTask(762, 795, 4), new ScheduledTask(892, 1024, 5)};
        int[] expectedProcessorEndTimes = new int[]{592, 748, 269, 415, 795, 1024};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random5_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#5_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 164700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 122, 0), new ScheduledTask(12200, 12298, 0), new ScheduledTask(12700, 12798, 1), new ScheduledTask(22000, 22122, 0), new ScheduledTask(74500, 74585, 0), new ScheduledTask(34200, 34322, 0), new ScheduledTask(83000, 83122, 0), new ScheduledTask(72100, 72185, 2), new ScheduledTask(95200, 95310, 0), new ScheduledTask(46400, 46473, 0), new ScheduledTask(125700, 125724, 0), new ScheduledTask(128100, 128173, 0), new ScheduledTask(106200, 106310, 0), new ScheduledTask(53700, 53798, 0), new ScheduledTask(135400, 135461, 0), new ScheduledTask(117200, 117285, 0), new ScheduledTask(63500, 63610, 0), new ScheduledTask(141500, 141561, 0), new ScheduledTask(147600, 147698, 0), new ScheduledTask(126300, 126349, 3), new ScheduledTask(157400, 157473, 0)};
        int[] expectedProcessorEndTimes = new int[]{157473, 12798, 72185, 126349};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random5_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#5_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 119100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 122, 0), new ScheduledTask(12200, 12298, 0), new ScheduledTask(12700, 12798, 1), new ScheduledTask(22000, 22122, 0), new ScheduledTask(32300, 32385, 1), new ScheduledTask(34200, 34322, 0), new ScheduledTask(50000, 50122, 0), new ScheduledTask(32900, 32985, 2), new ScheduledTask(62200, 62310, 0), new ScheduledTask(47400, 47473, 3), new ScheduledTask(62000, 62024, 3), new ScheduledTask(66800, 66873, 3), new ScheduledTask(73200, 73310, 0), new ScheduledTask(63000, 63098, 2), new ScheduledTask(81400, 81461, 3), new ScheduledTask(84400, 84485, 2), new ScheduledTask(84200, 84310, 0), new ScheduledTask(95200, 95261, 0), new ScheduledTask(102000, 102098, 0), new ScheduledTask(101400, 101449, 2), new ScheduledTask(111800, 111873, 0)};
        int[] expectedProcessorEndTimes = new int[]{111873, 32385, 101449, 81461};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random5_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#5_Heterogeneous-4-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 98950;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 122, 0), new ScheduledTask(12200, 12298, 0), new ScheduledTask(12700, 12798, 1), new ScheduledTask(22000, 22122, 0), new ScheduledTask(24460, 24545, 1), new ScheduledTask(34200, 34322, 0), new ScheduledTask(34660, 34782, 1), new ScheduledTask(25060, 25145, 2), new ScheduledTask(49700, 49810, 0), new ScheduledTask(49300, 49373, 1), new ScheduledTask(37810, 37834, 2), new ScheduledTask(49700, 49773, 2), new ScheduledTask(60700, 60810, 0), new ScheduledTask(58060, 58158, 1), new ScheduledTask(61000, 61061, 2), new ScheduledTask(71700, 71785, 0), new ScheduledTask(69820, 69930, 1), new ScheduledTask(72400, 72461, 2), new ScheduledTask(81850, 81948, 0), new ScheduledTask(83020, 83069, 1), new ScheduledTask(91650, 91723, 0)};
        int[] expectedProcessorEndTimes = new int[]{91723, 83069, 72461};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1044;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 122, 0), new ScheduledTask(122, 220, 0), new ScheduledTask(127, 225, 1), new ScheduledTask(220, 342, 0), new ScheduledTask(227, 312, 1), new ScheduledTask(397, 519, 1), new ScheduledTask(342, 464, 0), new ScheduledTask(312, 397, 1), new ScheduledTask(519, 629, 1), new ScheduledTask(561, 634, 0), new ScheduledTask(464, 488, 0), new ScheduledTask(488, 561, 0), new ScheduledTask(635, 745, 0), new ScheduledTask(690, 788, 1), new ScheduledTask(629, 690, 1), new ScheduledTask(788, 873, 1), new ScheduledTask(806, 916, 0), new ScheduledTask(745, 806, 0), new ScheduledTask(873, 971, 1), new ScheduledTask(916, 965, 0), new ScheduledTask(971, 1044, 1)};
        int[] expectedProcessorEndTimes = new int[]{965, 1044};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 944;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 122, 0), new ScheduledTask(122, 220, 0), new ScheduledTask(127, 225, 1), new ScheduledTask(220, 342, 0), new ScheduledTask(227, 312, 1), new ScheduledTask(342, 464, 0), new ScheduledTask(344, 466, 1), new ScheduledTask(231, 316, 2), new ScheduledTask(468, 578, 1), new ScheduledTask(464, 537, 0), new ScheduledTask(321, 345, 2), new ScheduledTask(470, 543, 2), new ScheduledTask(578, 688, 1), new ScheduledTask(537, 635, 0), new ScheduledTask(581, 642, 2), new ScheduledTask(688, 773, 1), new ScheduledTask(635, 745, 0), new ScheduledTask(695, 756, 2), new ScheduledTask(773, 871, 1), new ScheduledTask(779, 828, 0), new ScheduledTask(871, 944, 1)};
        int[] expectedProcessorEndTimes = new int[]{828, 944, 756};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 944;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 122, 0), new ScheduledTask(122, 220, 0), new ScheduledTask(127, 225, 1), new ScheduledTask(220, 342, 0), new ScheduledTask(227, 312, 1), new ScheduledTask(342, 464, 0), new ScheduledTask(344, 466, 1), new ScheduledTask(231, 316, 2), new ScheduledTask(468, 578, 1), new ScheduledTask(464, 537, 0), new ScheduledTask(321, 345, 2), new ScheduledTask(470, 543, 2), new ScheduledTask(578, 688, 1), new ScheduledTask(537, 635, 0), new ScheduledTask(581, 642, 2), new ScheduledTask(688, 773, 1), new ScheduledTask(635, 745, 0), new ScheduledTask(695, 756, 2), new ScheduledTask(773, 871, 1), new ScheduledTask(779, 828, 0), new ScheduledTask(871, 944, 1)};
        int[] expectedProcessorEndTimes = new int[]{828, 944, 756};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random6_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#6_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 165900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 142, 0), new ScheduledTask(30500, 30683, 0), new ScheduledTask(14200, 14363, 0), new ScheduledTask(52900, 52961, 0), new ScheduledTask(49000, 49061, 1), new ScheduledTask(59000, 59081, 0), new ScheduledTask(48800, 48841, 0), new ScheduledTask(98700, 98822, 0), new ScheduledTask(67100, 67242, 0), new ScheduledTask(86500, 86581, 0), new ScheduledTask(94600, 94641, 0), new ScheduledTask(110900, 110941, 0), new ScheduledTask(115000, 115102, 0), new ScheduledTask(81300, 81341, 0), new ScheduledTask(99300, 99341, 2), new ScheduledTask(85700, 85781, 3), new ScheduledTask(131300, 131341, 0), new ScheduledTask(125200, 125261, 0), new ScheduledTask(143500, 143622, 0), new ScheduledTask(135400, 135481, 0), new ScheduledTask(155700, 155802, 0)};
        int[] expectedProcessorEndTimes = new int[]{155802, 49061, 99341, 85781};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random6_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#6_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 122700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 142, 0), new ScheduledTask(14200, 14383, 0), new ScheduledTask(14700, 14863, 1), new ScheduledTask(32500, 32561, 0), new ScheduledTask(48200, 48261, 0), new ScheduledTask(38600, 38681, 0), new ScheduledTask(47300, 47341, 1), new ScheduledTask(62400, 62522, 0), new ScheduledTask(47200, 47342, 2), new ScheduledTask(54300, 54381, 0), new ScheduledTask(62700, 62741, 3), new ScheduledTask(74600, 74641, 0), new ScheduledTask(78700, 78802, 0), new ScheduledTask(75600, 75641, 2), new ScheduledTask(76200, 76241, 3), new ScheduledTask(83800, 83881, 2), new ScheduledTask(84700, 84741, 3), new ScheduledTask(88900, 88961, 0), new ScheduledTask(100300, 100422, 0), new ScheduledTask(95800, 95881, 3), new ScheduledTask(112500, 112602, 0)};
        int[] expectedProcessorEndTimes = new int[]{112602, 47341, 83881, 95881};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random6_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#6_Heterogeneous-4-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 100040;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 142, 0), new ScheduledTask(14200, 14383, 0), new ScheduledTask(14700, 14863, 1), new ScheduledTask(32500, 32561, 0), new ScheduledTask(34260, 34321, 1), new ScheduledTask(38600, 38681, 0), new ScheduledTask(34660, 34701, 2), new ScheduledTask(41580, 41702, 1), new ScheduledTask(46700, 46842, 0), new ScheduledTask(42480, 42561, 2), new ScheduledTask(54630, 54671, 2), new ScheduledTask(56220, 56261, 1), new ScheduledTask(61340, 61442, 0), new ScheduledTask(61140, 61181, 1), new ScheduledTask(61500, 61541, 2), new ScheduledTask(66060, 66141, 1), new ScheduledTask(67650, 67691, 2), new ScheduledTask(71540, 71601, 0), new ScheduledTask(77640, 77762, 0), new ScheduledTask(78440, 78521, 1), new ScheduledTask(89840, 89942, 0)};
        int[] expectedProcessorEndTimes = new int[]{89942, 78521, 67691};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1043;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 142, 0), new ScheduledTask(142, 325, 0), new ScheduledTask(147, 310, 1), new ScheduledTask(325, 386, 0), new ScheduledTask(351, 412, 1), new ScheduledTask(386, 467, 0), new ScheduledTask(310, 351, 1), new ScheduledTask(493, 615, 1), new ScheduledTask(467, 609, 0), new ScheduledTask(412, 493, 1), new ScheduledTask(615, 656, 1), new ScheduledTask(650, 691, 0), new ScheduledTask(691, 793, 0), new ScheduledTask(609, 650, 0), new ScheduledTask(737, 778, 1), new ScheduledTask(656, 737, 1), new ScheduledTask(778, 819, 1), new ScheduledTask(793, 854, 0), new ScheduledTask(819, 941, 1), new ScheduledTask(854, 935, 0), new ScheduledTask(941, 1043, 1)};
        int[] expectedProcessorEndTimes = new int[]{935, 1043};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 955;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 142, 0), new ScheduledTask(142, 325, 0), new ScheduledTask(147, 310, 1), new ScheduledTask(325, 386, 0), new ScheduledTask(327, 388, 1), new ScheduledTask(386, 467, 0), new ScheduledTask(314, 355, 2), new ScheduledTask(388, 510, 1), new ScheduledTask(467, 609, 0), new ScheduledTask(397, 478, 2), new ScheduledTask(478, 519, 2), new ScheduledTask(510, 551, 1), new ScheduledTask(551, 653, 1), new ScheduledTask(609, 650, 0), new ScheduledTask(615, 656, 2), new ScheduledTask(650, 731, 0), new ScheduledTask(659, 700, 2), new ScheduledTask(660, 721, 1), new ScheduledTask(731, 853, 0), new ScheduledTask(721, 802, 1), new ScheduledTask(853, 955, 0)};
        int[] expectedProcessorEndTimes = new int[]{955, 802, 700};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 955;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 142, 0), new ScheduledTask(142, 325, 0), new ScheduledTask(147, 310, 1), new ScheduledTask(325, 386, 0), new ScheduledTask(327, 388, 1), new ScheduledTask(386, 467, 0), new ScheduledTask(314, 355, 2), new ScheduledTask(388, 510, 1), new ScheduledTask(467, 609, 0), new ScheduledTask(397, 478, 2), new ScheduledTask(478, 519, 2), new ScheduledTask(510, 551, 1), new ScheduledTask(551, 653, 1), new ScheduledTask(609, 650, 0), new ScheduledTask(615, 656, 2), new ScheduledTask(650, 731, 0), new ScheduledTask(659, 700, 2), new ScheduledTask(660, 721, 1), new ScheduledTask(731, 853, 0), new ScheduledTask(721, 802, 1), new ScheduledTask(853, 955, 0)};
        int[] expectedProcessorEndTimes = new int[]{955, 802, 700};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random7_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#7_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 154200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 51, 0), new ScheduledTask(15300, 15427, 0), new ScheduledTask(5100, 5202, 0), new ScheduledTask(34300, 34427, 0), new ScheduledTask(15500, 15627, 1), new ScheduledTask(28000, 28063, 0), new ScheduledTask(34500, 34525, 2), new ScheduledTask(58400, 58514, 0), new ScheduledTask(47000, 47114, 0), new ScheduledTask(97700, 97802, 0), new ScheduledTask(69800, 69914, 0), new ScheduledTask(59400, 59425, 3), new ScheduledTask(107900, 107989, 0), new ScheduledTask(81200, 81289, 0), new ScheduledTask(81500, 81589, 3), new ScheduledTask(116800, 116889, 0), new ScheduledTask(90100, 90176, 0), new ScheduledTask(135100, 135189, 0), new ScheduledTask(125700, 125738, 0), new ScheduledTask(129500, 129538, 0), new ScheduledTask(144000, 144102, 0)};
        int[] expectedProcessorEndTimes = new int[]{144102, 15627, 34525, 81589};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random7_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#7_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 109100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 51, 0), new ScheduledTask(5100, 5227, 0), new ScheduledTask(5400, 5502, 1), new ScheduledTask(26700, 26827, 0), new ScheduledTask(25800, 25927, 1), new ScheduledTask(17800, 17863, 0), new ScheduledTask(24100, 24125, 0), new ScheduledTask(27000, 27114, 2), new ScheduledTask(39400, 39514, 0), new ScheduledTask(52100, 52202, 0), new ScheduledTask(50800, 50914, 3), new ScheduledTask(51800, 51825, 2), new ScheduledTask(62300, 62389, 0), new ScheduledTask(56800, 56889, 2), new ScheduledTask(80100, 80189, 0), new ScheduledTask(71200, 71289, 0), new ScheduledTask(74600, 74676, 2), new ScheduledTask(90000, 90089, 0), new ScheduledTask(80600, 80638, 3), new ScheduledTask(89800, 89838, 2), new ScheduledTask(98900, 99002, 0)};
        int[] expectedProcessorEndTimes = new int[]{99002, 25927, 89838, 80638};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random7_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#7_Heterogeneous-4-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 89520;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 51, 0), new ScheduledTask(5100, 5227, 0), new ScheduledTask(5400, 5502, 1), new ScheduledTask(18500, 18627, 1), new ScheduledTask(17840, 17967, 2), new ScheduledTask(17800, 17863, 0), new ScheduledTask(24100, 24125, 0), new ScheduledTask(26600, 26714, 0), new ScheduledTask(33740, 33854, 1), new ScheduledTask(38000, 38102, 0), new ScheduledTask(39000, 39114, 2), new ScheduledTask(47420, 47445, 1), new ScheduledTask(48200, 48289, 0), new ScheduledTask(50420, 50509, 1), new ScheduledTask(56100, 56189, 2), new ScheduledTask(57100, 57189, 0), new ScheduledTask(61100, 61176, 1), new ScheduledTask(70420, 70509, 0), new ScheduledTask(66000, 66038, 0), new ScheduledTask(71220, 71258, 2), new ScheduledTask(79320, 79422, 0)};
        int[] expectedProcessorEndTimes = new int[]{79422, 61176, 71258};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 977;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 51, 0), new ScheduledTask(53, 180, 1), new ScheduledTask(51, 153, 0), new ScheduledTask(180, 307, 1), new ScheduledTask(153, 280, 0), new ScheduledTask(280, 343, 0), new ScheduledTask(343, 368, 0), new ScheduledTask(368, 482, 0), new ScheduledTask(409, 523, 1), new ScheduledTask(307, 409, 1), new ScheduledTask(482, 596, 0), new ScheduledTask(596, 621, 0), new ScheduledTask(523, 612, 1), new ScheduledTask(621, 710, 0), new ScheduledTask(612, 701, 1), new ScheduledTask(701, 790, 1), new ScheduledTask(710, 786, 0), new ScheduledTask(786, 875, 0), new ScheduledTask(790, 828, 1), new ScheduledTask(828, 866, 1), new ScheduledTask(875, 977, 0)};
        int[] expectedProcessorEndTimes = new int[]{977, 866};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 51, 0), new ScheduledTask(51, 178, 0), new ScheduledTask(54, 156, 1), new ScheduledTask(178, 305, 0), new ScheduledTask(156, 283, 1), new ScheduledTask(187, 250, 2), new ScheduledTask(250, 275, 2), new ScheduledTask(275, 389, 2), new ScheduledTask(305, 419, 0), new ScheduledTask(311, 413, 1), new ScheduledTask(389, 503, 2), new ScheduledTask(419, 444, 0), new ScheduledTask(422, 511, 1), new ScheduledTask(444, 533, 0), new ScheduledTask(503, 592, 2), new ScheduledTask(511, 600, 1), new ScheduledTask(533, 609, 0), new ScheduledTask(609, 698, 0), new ScheduledTask(600, 638, 1), new ScheduledTask(638, 676, 1), new ScheduledTask(698, 800, 0)};
        int[] expectedProcessorEndTimes = new int[]{800, 676, 592};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 51, 0), new ScheduledTask(51, 178, 0), new ScheduledTask(54, 156, 1), new ScheduledTask(178, 305, 0), new ScheduledTask(156, 283, 1), new ScheduledTask(187, 250, 2), new ScheduledTask(250, 275, 2), new ScheduledTask(275, 389, 2), new ScheduledTask(305, 419, 0), new ScheduledTask(311, 413, 1), new ScheduledTask(389, 503, 2), new ScheduledTask(419, 444, 0), new ScheduledTask(422, 511, 1), new ScheduledTask(444, 533, 0), new ScheduledTask(503, 592, 2), new ScheduledTask(511, 600, 1), new ScheduledTask(533, 609, 0), new ScheduledTask(609, 698, 0), new ScheduledTask(600, 638, 1), new ScheduledTask(638, 676, 1), new ScheduledTask(698, 800, 0)};
        int[] expectedProcessorEndTimes = new int[]{800, 676, 592};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random8_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#8_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 166000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 124, 0), new ScheduledTask(22000, 22096, 0), new ScheduledTask(12400, 12496, 0), new ScheduledTask(61700, 61837, 0), new ScheduledTask(31600, 31682, 0), new ScheduledTask(75400, 75510, 0), new ScheduledTask(22300, 22437, 1), new ScheduledTask(39800, 39827, 0), new ScheduledTask(86400, 86510, 0), new ScheduledTask(42500, 42596, 0), new ScheduledTask(116600, 116641, 0), new ScheduledTask(120700, 120810, 0), new ScheduledTask(97400, 97537, 0), new ScheduledTask(52100, 52196, 0), new ScheduledTask(131700, 131755, 0), new ScheduledTask(137200, 137282, 0), new ScheduledTask(111100, 111155, 0), new ScheduledTask(62300, 62410, 2), new ScheduledTask(145400, 145496, 0), new ScheduledTask(129100, 129141, 3), new ScheduledTask(155000, 155110, 0)};
        int[] expectedProcessorEndTimes = new int[]{155110, 22437, 62410, 129141};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random8_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#8_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 123400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 124, 0), new ScheduledTask(12400, 12496, 0), new ScheduledTask(13300, 13396, 1), new ScheduledTask(32700, 32837, 0), new ScheduledTask(22000, 22082, 0), new ScheduledTask(46400, 46510, 0), new ScheduledTask(32500, 32637, 1), new ScheduledTask(31200, 31227, 2), new ScheduledTask(64400, 64510, 0), new ScheduledTask(37200, 37296, 3), new ScheduledTask(60300, 60341, 0), new ScheduledTask(65200, 65310, 3), new ScheduledTask(75400, 75537, 0), new ScheduledTask(57300, 57396, 2), new ScheduledTask(89100, 89155, 0), new ScheduledTask(94600, 94682, 0), new ScheduledTask(89900, 89955, 3), new ScheduledTask(76500, 76610, 2), new ScheduledTask(102800, 102896, 0), new ScheduledTask(100900, 100941, 3), new ScheduledTask(112400, 112510, 0)};
        int[] expectedProcessorEndTimes = new int[]{112510, 32637, 76610, 100941};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random8_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#8_Heterogeneous-4-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 103220;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 124, 0), new ScheduledTask(12400, 12496, 0), new ScheduledTask(13300, 13396, 1), new ScheduledTask(25020, 25157, 0), new ScheduledTask(24820, 24902, 1), new ScheduledTask(38720, 38830, 0), new ScheduledTask(25120, 25257, 2), new ScheduledTask(34660, 34687, 1), new ScheduledTask(49720, 49830, 0), new ScheduledTask(37900, 37996, 1), new ScheduledTask(45670, 45711, 2), new ScheduledTask(52620, 52730, 1), new ScheduledTask(60720, 60857, 0), new ScheduledTask(51820, 51916, 2), new ScheduledTask(65820, 65875, 1), new ScheduledTask(74420, 74502, 0), new ScheduledTask(75220, 75275, 1), new ScheduledTask(66220, 66330, 2), new ScheduledTask(82620, 82716, 0), new ScheduledTask(83520, 83561, 1), new ScheduledTask(92220, 92330, 0)};
        int[] expectedProcessorEndTimes = new int[]{92330, 83561, 66330};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1098;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 124, 0), new ScheduledTask(124, 220, 0), new ScheduledTask(133, 229, 1), new ScheduledTask(230, 367, 1), new ScheduledTask(220, 302, 0), new ScheduledTask(367, 477, 1), new ScheduledTask(329, 466, 0), new ScheduledTask(302, 329, 0), new ScheduledTask(507, 617, 0), new ScheduledTask(477, 573, 1), new ScheduledTask(466, 507, 0), new ScheduledTask(573, 683, 1), new ScheduledTask(617, 754, 0), new ScheduledTask(683, 779, 1), new ScheduledTask(754, 809, 0), new ScheduledTask(809, 891, 0), new ScheduledTask(779, 834, 1), new ScheduledTask(834, 944, 1), new ScheduledTask(891, 987, 0), new ScheduledTask(944, 985, 1), new ScheduledTask(988, 1098, 0)};
        int[] expectedProcessorEndTimes = new int[]{1098, 985};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1005;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 124, 0), new ScheduledTask(127, 223, 1), new ScheduledTask(124, 220, 0), new ScheduledTask(223, 360, 1), new ScheduledTask(229, 311, 2), new ScheduledTask(360, 470, 1), new ScheduledTask(223, 360, 3), new ScheduledTask(321, 348, 0), new ScheduledTask(470, 580, 1), new ScheduledTask(408, 504, 3), new ScheduledTask(367, 408, 3), new ScheduledTask(504, 614, 3), new ScheduledTask(580, 717, 1), new ScheduledTask(614, 710, 3), new ScheduledTask(616, 671, 2), new ScheduledTask(717, 799, 1), new ScheduledTask(725, 780, 3), new ScheduledTask(716, 826, 2), new ScheduledTask(799, 895, 1), new ScheduledTask(834, 875, 3), new ScheduledTask(895, 1005, 1)};
        int[] expectedProcessorEndTimes = new int[]{348, 1005, 826, 875};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 1005;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 124, 0), new ScheduledTask(127, 223, 1), new ScheduledTask(124, 220, 0), new ScheduledTask(223, 360, 1), new ScheduledTask(229, 311, 2), new ScheduledTask(360, 470, 1), new ScheduledTask(223, 360, 3), new ScheduledTask(321, 348, 4), new ScheduledTask(470, 580, 1), new ScheduledTask(408, 504, 5), new ScheduledTask(367, 408, 5), new ScheduledTask(504, 614, 5), new ScheduledTask(580, 717, 1), new ScheduledTask(614, 710, 5), new ScheduledTask(616, 671, 4), new ScheduledTask(717, 799, 1), new ScheduledTask(725, 780, 5), new ScheduledTask(716, 826, 4), new ScheduledTask(799, 895, 1), new ScheduledTask(834, 875, 5), new ScheduledTask(895, 1005, 1)};
        int[] expectedProcessorEndTimes = new int[]{220, 1005, 311, 360, 826, 875};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random9_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#9_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 164500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 58, 0), new ScheduledTask(20300, 20416, 0), new ScheduledTask(5800, 5945, 0), new ScheduledTask(31900, 32045, 0), new ScheduledTask(32200, 32229, 1), new ScheduledTask(46400, 46458, 0), new ScheduledTask(76800, 76887, 0), new ScheduledTask(52200, 52345, 0), new ScheduledTask(20900, 20958, 2), new ScheduledTask(85500, 85601, 0), new ScheduledTask(56400, 56487, 3), new ScheduledTask(95600, 95701, 0), new ScheduledTask(66700, 66801, 0), new ScheduledTask(109200, 109243, 0), new ScheduledTask(113500, 113543, 0), new ScheduledTask(117800, 117945, 0), new ScheduledTask(77300, 77416, 2), new ScheduledTask(108600, 108643, 3), new ScheduledTask(147200, 147301, 0), new ScheduledTask(135300, 135372, 0), new ScheduledTask(157300, 157372, 0)};
        int[] expectedProcessorEndTimes = new int[]{157372, 32229, 77416, 108643};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random9_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#9_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 115700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 58, 0), new ScheduledTask(5800, 5916, 0), new ScheduledTask(6000, 6145, 1), new ScheduledTask(17400, 17545, 0), new ScheduledTask(35000, 35029, 1), new ScheduledTask(31900, 31958, 0), new ScheduledTask(41600, 41687, 2), new ScheduledTask(37700, 37845, 0), new ScheduledTask(35600, 35658, 3), new ScheduledTask(62300, 62401, 0), new ScheduledTask(47200, 47287, 3), new ScheduledTask(72400, 72501, 0), new ScheduledTask(52200, 52301, 0), new ScheduledTask(64600, 64643, 3), new ScheduledTask(73200, 73243, 3), new ScheduledTask(86800, 86945, 0), new ScheduledTask(62800, 62916, 2), new ScheduledTask(82500, 82543, 0), new ScheduledTask(87400, 87501, 3), new ScheduledTask(101300, 101372, 0), new ScheduledTask(108500, 108572, 0)};
        int[] expectedProcessorEndTimes = new int[]{108572, 35029, 62916, 87501};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random9_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#9_Heterogeneous-4-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 98700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 58, 0), new ScheduledTask(5800, 5916, 0), new ScheduledTask(6000, 6145, 1), new ScheduledTask(17400, 17545, 0), new ScheduledTask(23400, 23429, 1), new ScheduledTask(31900, 31958, 0), new ScheduledTask(32500, 32587, 1), new ScheduledTask(37700, 37845, 0), new ScheduledTask(24000, 24058, 2), new ScheduledTask(42940, 43041, 1), new ScheduledTask(32700, 32787, 2), new ScheduledTask(55460, 55561, 0), new ScheduledTask(55060, 55161, 1), new ScheduledTask(45750, 45793, 2), new ScheduledTask(55460, 55503, 2), new ScheduledTask(65560, 65705, 0), new ScheduledTask(67180, 67296, 1), new ScheduledTask(67380, 67423, 2), new ScheduledTask(81400, 81501, 0), new ScheduledTask(81100, 81172, 1), new ScheduledTask(91500, 91572, 0)};
        int[] expectedProcessorEndTimes = new int[]{91572, 81172, 67423};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1005;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 58, 0), new ScheduledTask(58, 174, 0), new ScheduledTask(60, 205, 1), new ScheduledTask(174, 319, 0), new ScheduledTask(263, 292, 1), new ScheduledTask(319, 377, 0), new ScheduledTask(379, 466, 1), new ScheduledTask(377, 522, 0), new ScheduledTask(205, 263, 1), new ScheduledTask(509, 610, 1), new ScheduledTask(292, 379, 1), new ScheduledTask(610, 711, 1), new ScheduledTask(522, 623, 0), new ScheduledTask(466, 509, 1), new ScheduledTask(623, 666, 0), new ScheduledTask(711, 856, 1), new ScheduledTask(666, 782, 0), new ScheduledTask(782, 825, 0), new ScheduledTask(825, 926, 0), new ScheduledTask(856, 928, 1), new ScheduledTask(933, 1005, 1)};
        int[] expectedProcessorEndTimes = new int[]{926, 1005};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 919;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 58, 0), new ScheduledTask(58, 174, 0), new ScheduledTask(60, 205, 1), new ScheduledTask(174, 319, 0), new ScheduledTask(211, 240, 2), new ScheduledTask(319, 377, 0), new ScheduledTask(325, 412, 3), new ScheduledTask(377, 522, 0), new ScheduledTask(205, 263, 1), new ScheduledTask(420, 521, 1), new ScheduledTask(412, 499, 3), new ScheduledTask(528, 629, 1), new ScheduledTask(522, 623, 0), new ScheduledTask(499, 542, 3), new ScheduledTask(542, 585, 3), new ScheduledTask(629, 774, 1), new ScheduledTask(623, 739, 0), new ScheduledTask(638, 681, 3), new ScheduledTask(739, 840, 0), new ScheduledTask(774, 846, 1), new ScheduledTask(847, 919, 1)};
        int[] expectedProcessorEndTimes = new int[]{840, 919, 240, 681};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 919;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 58, 0), new ScheduledTask(58, 174, 0), new ScheduledTask(60, 205, 1), new ScheduledTask(174, 319, 0), new ScheduledTask(211, 240, 2), new ScheduledTask(319, 377, 0), new ScheduledTask(325, 412, 3), new ScheduledTask(377, 522, 0), new ScheduledTask(211, 269, 4), new ScheduledTask(420, 521, 2), new ScheduledTask(276, 363, 5), new ScheduledTask(528, 629, 5), new ScheduledTask(522, 623, 0), new ScheduledTask(422, 465, 5), new ScheduledTask(525, 568, 4), new ScheduledTask(629, 774, 5), new ScheduledTask(623, 739, 0), new ScheduledTask(638, 681, 4), new ScheduledTask(739, 840, 0), new ScheduledTask(774, 846, 5), new ScheduledTask(847, 919, 5)};
        int[] expectedProcessorEndTimes = new int[]{840, 205, 521, 412, 681, 919};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 787;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 27, 0), new ScheduledTask(27, 160, 0), new ScheduledTask(32, 112, 1), new ScheduledTask(160, 293, 0), new ScheduledTask(112, 231, 1), new ScheduledTask(170, 289, 2), new ScheduledTask(293, 359, 0), new ScheduledTask(231, 311, 1), new ScheduledTask(303, 356, 2), new ScheduledTask(361, 494, 2), new ScheduledTask(311, 444, 1), new ScheduledTask(359, 439, 0), new ScheduledTask(494, 574, 2), new ScheduledTask(445, 485, 1), new ScheduledTask(454, 494, 0), new ScheduledTask(494, 613, 0), new ScheduledTask(574, 667, 2), new ScheduledTask(667, 760, 2), new ScheduledTask(496, 536, 1), new ScheduledTask(613, 640, 0), new ScheduledTask(760, 787, 2)};
        int[] expectedProcessorEndTimes = new int[]{640, 536, 787};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 904;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 27, 0), new ScheduledTask(33, 166, 1), new ScheduledTask(27, 107, 0), new ScheduledTask(226, 359, 0), new ScheduledTask(107, 226, 0), new ScheduledTask(166, 285, 1), new ScheduledTask(412, 478, 0), new ScheduledTask(285, 365, 1), new ScheduledTask(359, 412, 0), new ScheduledTask(478, 611, 0), new ScheduledTask(365, 498, 1), new ScheduledTask(498, 578, 1), new ScheduledTask(611, 691, 0), new ScheduledTask(618, 658, 1), new ScheduledTask(578, 618, 1), new ScheduledTask(658, 777, 1), new ScheduledTask(691, 784, 0), new ScheduledTask(784, 877, 0), new ScheduledTask(777, 817, 1), new ScheduledTask(817, 844, 1), new ScheduledTask(877, 904, 0)};
        int[] expectedProcessorEndTimes = new int[]{904, 844};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 787;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 27, 0), new ScheduledTask(27, 160, 0), new ScheduledTask(32, 112, 1), new ScheduledTask(160, 293, 0), new ScheduledTask(112, 231, 1), new ScheduledTask(170, 289, 2), new ScheduledTask(293, 359, 0), new ScheduledTask(231, 311, 1), new ScheduledTask(303, 356, 2), new ScheduledTask(361, 494, 2), new ScheduledTask(311, 444, 1), new ScheduledTask(359, 439, 0), new ScheduledTask(494, 574, 2), new ScheduledTask(445, 485, 1), new ScheduledTask(454, 494, 0), new ScheduledTask(494, 613, 0), new ScheduledTask(574, 667, 2), new ScheduledTask(667, 760, 2), new ScheduledTask(496, 536, 1), new ScheduledTask(613, 640, 0), new ScheduledTask(760, 787, 2)};
        int[] expectedProcessorEndTimes = new int[]{640, 536, 787};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 787;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 27, 0), new ScheduledTask(27, 160, 0), new ScheduledTask(32, 112, 1), new ScheduledTask(160, 293, 0), new ScheduledTask(112, 231, 1), new ScheduledTask(170, 289, 2), new ScheduledTask(293, 359, 0), new ScheduledTask(231, 311, 1), new ScheduledTask(303, 356, 2), new ScheduledTask(361, 494, 2), new ScheduledTask(311, 444, 1), new ScheduledTask(359, 439, 0), new ScheduledTask(494, 574, 2), new ScheduledTask(445, 485, 1), new ScheduledTask(454, 494, 0), new ScheduledTask(494, 613, 0), new ScheduledTask(574, 667, 2), new ScheduledTask(667, 760, 2), new ScheduledTask(496, 536, 1), new ScheduledTask(613, 640, 0), new ScheduledTask(760, 787, 2)};
        int[] expectedProcessorEndTimes = new int[]{640, 536, 787};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 154900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 137, 0), new ScheduledTask(14400, 14427, 1), new ScheduledTask(13700, 13727, 0), new ScheduledTask(49300, 49396, 0), new ScheduledTask(16400, 16441, 0), new ScheduledTask(72600, 72724, 0), new ScheduledTask(20500, 20596, 0), new ScheduledTask(31300, 31341, 2), new ScheduledTask(30100, 30237, 0), new ScheduledTask(58900, 59037, 0), new ScheduledTask(85000, 85137, 0), new ScheduledTask(43800, 43855, 0), new ScheduledTask(85400, 85441, 3), new ScheduledTask(98700, 98741, 0), new ScheduledTask(120700, 120727, 0), new ScheduledTask(102800, 102910, 0), new ScheduledTask(123400, 123482, 0), new ScheduledTask(55900, 55996, 2), new ScheduledTask(131600, 131696, 0), new ScheduledTask(113800, 113869, 0), new ScheduledTask(141200, 141337, 0)};
        int[] expectedProcessorEndTimes = new int[]{141337, 14427, 55996, 85441};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 114300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 137, 0), new ScheduledTask(16400, 16427, 0), new ScheduledTask(13700, 13727, 0), new ScheduledTask(19100, 19196, 0), new ScheduledTask(16800, 16841, 1), new ScheduledTask(29000, 29124, 2), new ScheduledTask(28700, 28796, 0), new ScheduledTask(19800, 19841, 3), new ScheduledTask(38300, 38437, 0), new ScheduledTask(28900, 29037, 3), new ScheduledTask(54500, 54637, 0), new ScheduledTask(56300, 56355, 3), new ScheduledTask(56500, 56541, 2), new ScheduledTask(68200, 68241, 0), new ScheduledTask(68500, 68527, 2), new ScheduledTask(72300, 72410, 0), new ScheduledTask(73900, 73982, 2), new ScheduledTask(67300, 67396, 3), new ScheduledTask(91000, 91096, 0), new ScheduledTask(86500, 86569, 3), new ScheduledTask(100600, 100737, 0)};
        int[] expectedProcessorEndTimes = new int[]{100737, 16841, 73982, 86569};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 93860;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 137, 0), new ScheduledTask(14400, 14427, 2), new ScheduledTask(13700, 13727, 0), new ScheduledTask(19250, 19346, 0), new ScheduledTask(16800, 16841, 1), new ScheduledTask(28850, 28974, 0), new ScheduledTask(21720, 21816, 1), new ScheduledTask(19150, 19191, 3), new ScheduledTask(33240, 33377, 1), new ScheduledTask(29050, 29187, 2), new ScheduledTask(41250, 41387, 0), new ScheduledTask(49680, 49735, 1), new ScheduledTask(49600, 49641, 2), new ScheduledTask(54950, 54991, 0), new ScheduledTask(56650, 56677, 1), new ScheduledTask(59050, 59160, 0), new ScheduledTask(59950, 60032, 1), new ScheduledTask(56880, 56976, 2), new ScheduledTask(70490, 70586, 0), new ScheduledTask(71580, 71649, 1), new ScheduledTask(80160, 80297, 0)};
        int[] expectedProcessorEndTimes = new int[]{80297, 71649, 56976, 19191};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1017;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 137, 0), new ScheduledTask(137, 164, 0), new ScheduledTask(139, 166, 1), new ScheduledTask(205, 301, 0), new ScheduledTask(166, 207, 1), new ScheduledTask(301, 425, 0), new ScheduledTask(207, 303, 1), new ScheduledTask(164, 205, 0), new ScheduledTask(440, 577, 1), new ScheduledTask(303, 440, 1), new ScheduledTask(425, 562, 0), new ScheduledTask(618, 673, 1), new ScheduledTask(562, 603, 0), new ScheduledTask(577, 618, 1), new ScheduledTask(603, 630, 0), new ScheduledTask(673, 783, 1), new ScheduledTask(630, 712, 0), new ScheduledTask(712, 808, 0), new ScheduledTask(783, 879, 1), new ScheduledTask(808, 877, 0), new ScheduledTask(880, 1017, 1)};
        int[] expectedProcessorEndTimes = new int[]{877, 1017};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 912;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 137, 0), new ScheduledTask(137, 164, 0), new ScheduledTask(139, 166, 1), new ScheduledTask(171, 267, 0), new ScheduledTask(166, 207, 1), new ScheduledTask(267, 391, 0), new ScheduledTask(207, 303, 1), new ScheduledTask(171, 212, 2), new ScheduledTask(303, 440, 1), new ScheduledTask(269, 406, 2), new ScheduledTask(391, 528, 0), new ScheduledTask(440, 495, 1), new ScheduledTask(406, 447, 2), new ScheduledTask(528, 569, 0), new ScheduledTask(531, 558, 1), new ScheduledTask(569, 679, 0), new ScheduledTask(578, 660, 1), new ScheduledTask(501, 597, 2), new ScheduledTask(679, 775, 0), new ScheduledTask(685, 754, 1), new ScheduledTask(775, 912, 0)};
        int[] expectedProcessorEndTimes = new int[]{912, 754, 597};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 912;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 137, 0), new ScheduledTask(137, 164, 0), new ScheduledTask(139, 166, 1), new ScheduledTask(171, 267, 0), new ScheduledTask(166, 207, 1), new ScheduledTask(267, 391, 0), new ScheduledTask(207, 303, 1), new ScheduledTask(171, 212, 2), new ScheduledTask(303, 440, 1), new ScheduledTask(269, 406, 2), new ScheduledTask(391, 528, 0), new ScheduledTask(440, 495, 1), new ScheduledTask(406, 447, 2), new ScheduledTask(528, 569, 0), new ScheduledTask(531, 558, 1), new ScheduledTask(569, 679, 0), new ScheduledTask(578, 660, 1), new ScheduledTask(501, 597, 2), new ScheduledTask(679, 775, 0), new ScheduledTask(685, 754, 1), new ScheduledTask(775, 912, 0)};
        int[] expectedProcessorEndTimes = new int[]{912, 754, 597};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot98_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.98_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 15200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(1000, 1010, 0), new ScheduledTask(1200, 1203, 1), new ScheduledTask(5300, 5313, 0), new ScheduledTask(2000, 2003, 0), new ScheduledTask(3000, 3008, 1), new ScheduledTask(2300, 2306, 0), new ScheduledTask(6600, 6605, 0), new ScheduledTask(9000, 9004, 0), new ScheduledTask(2900, 2911, 0), new ScheduledTask(9400, 9405, 0), new ScheduledTask(7100, 7104, 0), new ScheduledTask(4000, 4013, 0), new ScheduledTask(11200, 11209, 0), new ScheduledTask(7500, 7505, 0), new ScheduledTask(8000, 8010, 0), new ScheduledTask(12100, 12113, 0), new ScheduledTask(5600, 5606, 2), new ScheduledTask(13400, 13408, 0), new ScheduledTask(9900, 9913, 0), new ScheduledTask(14200, 14210, 0)};
        int[] expectedProcessorEndTimes = new int[]{14210, 3008, 5606};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot98_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.98_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 12300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(1000, 1010, 0), new ScheduledTask(1200, 1203, 1), new ScheduledTask(2300, 2313, 0), new ScheduledTask(2000, 2003, 0), new ScheduledTask(1800, 1808, 1), new ScheduledTask(2600, 2606, 2), new ScheduledTask(3600, 3605, 0), new ScheduledTask(3900, 3904, 3), new ScheduledTask(3800, 3811, 2), new ScheduledTask(4700, 4705, 3), new ScheduledTask(4500, 4504, 1), new ScheduledTask(6200, 6213, 0), new ScheduledTask(5700, 5709, 3), new ScheduledTask(6000, 6005, 2), new ScheduledTask(8100, 8110, 0), new ScheduledTask(7500, 7513, 3), new ScheduledTask(7500, 7506, 0), new ScheduledTask(10500, 10508, 0), new ScheduledTask(9100, 9113, 0), new ScheduledTask(11300, 11310, 0)};
        int[] expectedProcessorEndTimes = new int[]{11310, 4504, 6005, 7513};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot98_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.98_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10260;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(1000, 1010, 0), new ScheduledTask(1200, 1203, 3), new ScheduledTask(3000, 3013, 1), new ScheduledTask(2000, 2003, 0), new ScheduledTask(1800, 1808, 3), new ScheduledTask(2300, 2306, 0), new ScheduledTask(4560, 4565, 1), new ScheduledTask(5300, 5304, 0), new ScheduledTask(2900, 2911, 0), new ScheduledTask(5760, 5765, 0), new ScheduledTask(5160, 5164, 1), new ScheduledTask(4000, 4013, 0), new ScheduledTask(6260, 6269, 0), new ScheduledTask(5640, 5645, 1), new ScheduledTask(6240, 6250, 1), new ScheduledTask(7160, 7173, 0), new ScheduledTask(5600, 5606, 3), new ScheduledTask(8460, 8468, 0), new ScheduledTask(7440, 7453, 1), new ScheduledTask(9260, 9270, 0)};
        int[] expectedProcessorEndTimes = new int[]{9270, 7453, 0, 5606};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot98_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.98_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 97;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 20, 0), new ScheduledTask(12, 15, 1), new ScheduledTask(20, 33, 0), new ScheduledTask(24, 27, 1), new ScheduledTask(15, 23, 1), new ScheduledTask(27, 33, 1), new ScheduledTask(37, 42, 0), new ScheduledTask(33, 37, 0), new ScheduledTask(33, 44, 1), new ScheduledTask(46, 51, 0), new ScheduledTask(42, 46, 0), new ScheduledTask(44, 57, 1), new ScheduledTask(51, 60, 0), new ScheduledTask(57, 62, 1), new ScheduledTask(62, 72, 1), new ScheduledTask(66, 79, 0), new ScheduledTask(60, 66, 0), new ScheduledTask(79, 87, 0), new ScheduledTask(72, 85, 1), new ScheduledTask(87, 97, 0)};
        int[] expectedProcessorEndTimes = new int[]{97, 85};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot98_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.98_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 96;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 20, 0), new ScheduledTask(12, 15, 1), new ScheduledTask(23, 36, 0), new ScheduledTask(20, 23, 0), new ScheduledTask(15, 23, 1), new ScheduledTask(26, 32, 2), new ScheduledTask(42, 47, 3), new ScheduledTask(38, 42, 3), new ScheduledTask(32, 43, 2), new ScheduledTask(51, 56, 3), new ScheduledTask(47, 51, 3), new ScheduledTask(43, 56, 2), new ScheduledTask(56, 65, 3), new ScheduledTask(56, 61, 2), new ScheduledTask(61, 71, 2), new ScheduledTask(65, 78, 3), new ScheduledTask(59, 65, 1), new ScheduledTask(78, 86, 3), new ScheduledTask(71, 84, 2), new ScheduledTask(86, 96, 3)};
        int[] expectedProcessorEndTimes = new int[]{36, 65, 84, 96};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot98_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.98_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 96;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 20, 0), new ScheduledTask(12, 15, 1), new ScheduledTask(23, 36, 0), new ScheduledTask(20, 23, 0), new ScheduledTask(25, 33, 2), new ScheduledTask(26, 32, 3), new ScheduledTask(36, 41, 0), new ScheduledTask(38, 42, 4), new ScheduledTask(32, 43, 3), new ScheduledTask(49, 54, 5), new ScheduledTask(45, 49, 5), new ScheduledTask(43, 56, 3), new ScheduledTask(54, 63, 5), new ScheduledTask(56, 61, 3), new ScheduledTask(61, 71, 3), new ScheduledTask(65, 78, 5), new ScheduledTask(59, 65, 4), new ScheduledTask(78, 86, 5), new ScheduledTask(71, 84, 3), new ScheduledTask(86, 96, 5)};
        int[] expectedProcessorEndTimes = new int[]{41, 15, 33, 84, 65, 96};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot98_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.98_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 15700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(2800, 2812, 0), new ScheduledTask(1100, 1103, 0), new ScheduledTask(1400, 1411, 0), new ScheduledTask(4000, 4008, 0), new ScheduledTask(4500, 4505, 1), new ScheduledTask(4800, 4808, 0), new ScheduledTask(8500, 8515, 0), new ScheduledTask(2500, 2503, 0), new ScheduledTask(5600, 5615, 0), new ScheduledTask(10000, 10012, 0), new ScheduledTask(3600, 3605, 2), new ScheduledTask(7100, 7114, 0), new ScheduledTask(11200, 11214, 0), new ScheduledTask(6600, 6606, 2), new ScheduledTask(10200, 10203, 2), new ScheduledTask(12600, 12603, 0), new ScheduledTask(10400, 10406, 3), new ScheduledTask(12900, 12915, 0), new ScheduledTask(14400, 14405, 0), new ScheduledTask(14900, 14908, 0)};
        int[] expectedProcessorEndTimes = new int[]{14908, 4505, 10203, 10406};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot98_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.98_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 13000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(1400, 1412, 0), new ScheduledTask(1100, 1103, 0), new ScheduledTask(1800, 1811, 1), new ScheduledTask(2600, 2608, 0), new ScheduledTask(3400, 3405, 0), new ScheduledTask(4100, 4108, 1), new ScheduledTask(3900, 3915, 0), new ScheduledTask(4900, 4903, 2), new ScheduledTask(6100, 6115, 0), new ScheduledTask(5900, 5912, 3), new ScheduledTask(5500, 5505, 2), new ScheduledTask(7600, 7614, 0), new ScheduledTask(9000, 9014, 0), new ScheduledTask(6500, 6506, 2), new ScheduledTask(9200, 9203, 3), new ScheduledTask(10400, 10403, 0), new ScheduledTask(7700, 7706, 2), new ScheduledTask(10700, 10715, 0), new ScheduledTask(9800, 9805, 3), new ScheduledTask(12200, 12208, 0)};
        int[] expectedProcessorEndTimes = new int[]{12208, 4108, 7706, 9805};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot98_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.98_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 11870;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(1400, 1412, 0), new ScheduledTask(1100, 1103, 0), new ScheduledTask(1800, 1811, 1), new ScheduledTask(2600, 2608, 0), new ScheduledTask(3120, 3125, 1), new ScheduledTask(4020, 4028, 0), new ScheduledTask(3720, 3735, 1), new ScheduledTask(4020, 4023, 2), new ScheduledTask(4970, 4985, 0), new ScheduledTask(5520, 5532, 1), new ScheduledTask(4470, 4475, 2), new ScheduledTask(6470, 6484, 0), new ScheduledTask(7870, 7884, 0), new ScheduledTask(5620, 5626, 3), new ScheduledTask(8070, 8073, 3), new ScheduledTask(9270, 9273, 0), new ScheduledTask(6820, 6826, 3), new ScheduledTask(9570, 9585, 0), new ScheduledTask(8670, 8675, 3), new ScheduledTask(11070, 11078, 0)};
        int[] expectedProcessorEndTimes = new int[]{11078, 5532, 4475, 8675};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 111;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(11, 23, 0), new ScheduledTask(16, 19, 1), new ScheduledTask(19, 30, 1), new ScheduledTask(28, 36, 0), new ScheduledTask(23, 28, 0), new ScheduledTask(39, 47, 0), new ScheduledTask(44, 59, 1), new ScheduledTask(30, 33, 1), new ScheduledTask(47, 62, 0), new ScheduledTask(59, 71, 1), new ScheduledTask(33, 38, 1), new ScheduledTask(62, 76, 0), new ScheduledTask(71, 85, 1), new ScheduledTask(38, 44, 1), new ScheduledTask(76, 79, 0), new ScheduledTask(85, 88, 1), new ScheduledTask(79, 85, 0), new ScheduledTask(88, 103, 1), new ScheduledTask(85, 90, 0), new ScheduledTask(103, 111, 1)};
        int[] expectedProcessorEndTimes = new int[]{90, 111};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 110;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(14, 26, 0), new ScheduledTask(11, 14, 0), new ScheduledTask(18, 29, 1), new ScheduledTask(26, 34, 0), new ScheduledTask(31, 36, 2), new ScheduledTask(38, 46, 0), new ScheduledTask(39, 54, 1), new ScheduledTask(38, 41, 3), new ScheduledTask(46, 61, 0), new ScheduledTask(58, 70, 3), new ScheduledTask(41, 46, 3), new ScheduledTask(61, 75, 0), new ScheduledTask(70, 84, 3), new ScheduledTask(46, 52, 3), new ScheduledTask(75, 78, 0), new ScheduledTask(84, 87, 3), new ScheduledTask(52, 58, 3), new ScheduledTask(87, 102, 3), new ScheduledTask(84, 89, 2), new ScheduledTask(102, 110, 3)};
        int[] expectedProcessorEndTimes = new int[]{78, 54, 89, 110};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_0dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_0.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 110;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(14, 26, 0), new ScheduledTask(11, 14, 0), new ScheduledTask(18, 29, 1), new ScheduledTask(26, 34, 0), new ScheduledTask(31, 36, 2), new ScheduledTask(38, 46, 0), new ScheduledTask(39, 54, 3), new ScheduledTask(38, 41, 4), new ScheduledTask(46, 61, 0), new ScheduledTask(56, 68, 5), new ScheduledTask(49, 54, 5), new ScheduledTask(61, 75, 0), new ScheduledTask(69, 83, 5), new ScheduledTask(58, 64, 4), new ScheduledTask(75, 78, 0), new ScheduledTask(84, 87, 5), new ScheduledTask(64, 70, 4), new ScheduledTask(87, 102, 5), new ScheduledTask(84, 89, 4), new ScheduledTask(102, 110, 5)};
        int[] expectedProcessorEndTimes = new int[]{78, 29, 36, 54, 89, 110};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot00_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.00_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 18500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(2000, 2014, 0), new ScheduledTask(800, 812, 0), new ScheduledTask(3400, 3403, 0), new ScheduledTask(7500, 7508, 0), new ScheduledTask(3700, 3715, 0), new ScheduledTask(3000, 3011, 1), new ScheduledTask(8300, 8306, 0), new ScheduledTask(5200, 5209, 0), new ScheduledTask(8900, 8911, 0), new ScheduledTask(12100, 12109, 0), new ScheduledTask(13000, 13012, 0), new ScheduledTask(6100, 6114, 0), new ScheduledTask(10000, 10009, 0), new ScheduledTask(14200, 14209, 0), new ScheduledTask(7700, 7714, 2), new ScheduledTask(10900, 10912, 0), new ScheduledTask(15100, 15111, 0), new ScheduledTask(17000, 17009, 0), new ScheduledTask(16200, 16208, 0), new ScheduledTask(17900, 17906, 0)};
        int[] expectedProcessorEndTimes = new int[]{17906, 3011, 7714};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot00_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.00_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 14300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(800, 814, 0), new ScheduledTask(1400, 1412, 1), new ScheduledTask(2200, 2203, 0), new ScheduledTask(4200, 4208, 2), new ScheduledTask(2500, 2515, 0), new ScheduledTask(3800, 3811, 1), new ScheduledTask(6600, 6606, 0), new ScheduledTask(4000, 4009, 0), new ScheduledTask(7200, 7211, 0), new ScheduledTask(6200, 6209, 1), new ScheduledTask(8000, 8012, 1), new ScheduledTask(4900, 4914, 0), new ScheduledTask(8300, 8309, 0), new ScheduledTask(10800, 10809, 0), new ScheduledTask(6500, 6514, 3), new ScheduledTask(9200, 9212, 0), new ScheduledTask(11700, 11711, 0), new ScheduledTask(10900, 10909, 3), new ScheduledTask(12800, 12808, 0), new ScheduledTask(13700, 13706, 0)};
        int[] expectedProcessorEndTimes = new int[]{13706, 8012, 4208, 10909};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot00_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.00_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 11540;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(800, 814, 0), new ScheduledTask(1400, 1412, 2), new ScheduledTask(2200, 2203, 0), new ScheduledTask(3600, 3608, 1), new ScheduledTask(2500, 2515, 0), new ScheduledTask(3200, 3211, 2), new ScheduledTask(4560, 4566, 1), new ScheduledTask(4000, 4009, 0), new ScheduledTask(5280, 5291, 1), new ScheduledTask(4960, 4969, 2), new ScheduledTask(6510, 6522, 0), new ScheduledTask(4900, 4914, 0), new ScheduledTask(6600, 6609, 1), new ScheduledTask(7710, 7719, 0), new ScheduledTask(6500, 6514, 2), new ScheduledTask(7680, 7692, 1), new ScheduledTask(8610, 8621, 0), new ScheduledTask(9300, 9309, 1), new ScheduledTask(9820, 9828, 0), new ScheduledTask(10820, 10826, 1)};
        int[] expectedProcessorEndTimes = new int[]{9828, 10826, 6514};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 119;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 22, 0), new ScheduledTask(14, 26, 1), new ScheduledTask(22, 25, 0), new ScheduledTask(37, 45, 1), new ScheduledTask(25, 40, 0), new ScheduledTask(26, 37, 1), new ScheduledTask(45, 51, 1), new ScheduledTask(40, 49, 0), new ScheduledTask(51, 62, 1), new ScheduledTask(49, 58, 0), new ScheduledTask(58, 70, 0), new ScheduledTask(71, 85, 1), new ScheduledTask(62, 71, 1), new ScheduledTask(70, 79, 0), new ScheduledTask(90, 104, 0), new ScheduledTask(85, 97, 1), new ScheduledTask(79, 90, 0), new ScheduledTask(104, 113, 0), new ScheduledTask(98, 106, 1), new ScheduledTask(113, 119, 0)};
        int[] expectedProcessorEndTimes = new int[]{119, 106};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 107;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 22, 0), new ScheduledTask(14, 26, 1), new ScheduledTask(22, 25, 0), new ScheduledTask(31, 39, 2), new ScheduledTask(25, 40, 0), new ScheduledTask(26, 37, 1), new ScheduledTask(39, 45, 2), new ScheduledTask(40, 49, 0), new ScheduledTask(52, 63, 1), new ScheduledTask(46, 55, 3), new ScheduledTask(55, 67, 3), new ScheduledTask(49, 63, 0), new ScheduledTask(63, 72, 1), new ScheduledTask(70, 79, 3), new ScheduledTask(65, 79, 2), new ScheduledTask(72, 84, 1), new ScheduledTask(79, 90, 3), new ScheduledTask(89, 98, 2), new ScheduledTask(91, 99, 3), new ScheduledTask(101, 107, 2)};
        int[] expectedProcessorEndTimes = new int[]{63, 84, 107, 99};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 107;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 22, 0), new ScheduledTask(14, 26, 1), new ScheduledTask(22, 25, 0), new ScheduledTask(31, 39, 2), new ScheduledTask(25, 40, 0), new ScheduledTask(26, 37, 1), new ScheduledTask(39, 45, 2), new ScheduledTask(40, 49, 0), new ScheduledTask(45, 56, 2), new ScheduledTask(46, 55, 3), new ScheduledTask(57, 69, 4), new ScheduledTask(49, 63, 0), new ScheduledTask(56, 65, 2), new ScheduledTask(69, 78, 4), new ScheduledTask(65, 79, 5), new ScheduledTask(72, 84, 2), new ScheduledTask(78, 89, 4), new ScheduledTask(89, 98, 5), new ScheduledTask(91, 99, 4), new ScheduledTask(101, 107, 5)};
        int[] expectedProcessorEndTimes = new int[]{63, 37, 84, 55, 99, 107};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot00_WeightType_Random2_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.00_WeightType_Random#2_Heterogeneous-4-2-strong.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 19400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(2800, 2816, 0), new ScheduledTask(1200, 1216, 0), new ScheduledTask(5300, 5304, 0), new ScheduledTask(6900, 6907, 0), new ScheduledTask(4400, 4409, 0), new ScheduledTask(8500, 8516, 0), new ScheduledTask(5700, 5707, 0), new ScheduledTask(3100, 3104, 1), new ScheduledTask(6400, 6405, 0), new ScheduledTask(7600, 7609, 0), new ScheduledTask(10500, 10514, 0), new ScheduledTask(7500, 7514, 2), new ScheduledTask(10100, 10104, 0), new ScheduledTask(13500, 13516, 0), new ScheduledTask(16500, 16507, 0), new ScheduledTask(11900, 11916, 0), new ScheduledTask(17200, 17204, 0), new ScheduledTask(15100, 15114, 0), new ScheduledTask(17600, 17611, 0), new ScheduledTask(18700, 18707, 0)};
        int[] expectedProcessorEndTimes = new int[]{18707, 3104, 7514};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot00_WeightType_Random2_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.00_WeightType_Random#2_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 15300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(1200, 1216, 0), new ScheduledTask(1800, 1816, 1), new ScheduledTask(2800, 2804, 0), new ScheduledTask(3200, 3207, 0), new ScheduledTask(5000, 5009, 1), new ScheduledTask(3900, 3916, 0), new ScheduledTask(7400, 7407, 0), new ScheduledTask(5300, 5304, 2), new ScheduledTask(7800, 7805, 3), new ScheduledTask(8100, 8109, 0), new ScheduledTask(5500, 5514, 0), new ScheduledTask(8800, 8814, 3), new ScheduledTask(9000, 9004, 0), new ScheduledTask(9400, 9416, 0), new ScheduledTask(12400, 12407, 0), new ScheduledTask(7600, 7616, 2), new ScheduledTask(13100, 13104, 0), new ScheduledTask(11000, 11014, 0), new ScheduledTask(13500, 13511, 0), new ScheduledTask(14600, 14607, 0)};
        int[] expectedProcessorEndTimes = new int[]{14607, 5009, 7616, 8814};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot00_WeightType_Random2_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.00_WeightType_Random#2_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 12300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(1200, 1216, 0), new ScheduledTask(1800, 1816, 1), new ScheduledTask(2800, 2804, 0), new ScheduledTask(3200, 3207, 0), new ScheduledTask(3720, 3729, 1), new ScheduledTask(3900, 3916, 0), new ScheduledTask(4800, 4807, 1), new ScheduledTask(4020, 4024, 3), new ScheduledTask(5800, 5805, 2), new ScheduledTask(5640, 5649, 1), new ScheduledTask(5500, 5514, 0), new ScheduledTask(6550, 6564, 2), new ScheduledTask(6720, 6724, 1), new ScheduledTask(7400, 7416, 1), new ScheduledTask(9250, 9257, 0), new ScheduledTask(6900, 6916, 0), new ScheduledTask(9950, 9954, 0), new ScheduledTask(9320, 9334, 1), new ScheduledTask(10350, 10361, 0), new ScheduledTask(11600, 11607, 0)};
        int[] expectedProcessorEndTimes = new int[]{11607, 9334, 6564, 4024};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 124;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(12, 28, 0), new ScheduledTask(18, 34, 1), new ScheduledTask(28, 32, 0), new ScheduledTask(32, 39, 0), new ScheduledTask(37, 46, 1), new ScheduledTask(43, 59, 0), new ScheduledTask(46, 53, 1), new ScheduledTask(39, 43, 0), new ScheduledTask(62, 67, 1), new ScheduledTask(53, 62, 1), new ScheduledTask(59, 73, 0), new ScheduledTask(67, 81, 1), new ScheduledTask(73, 77, 0), new ScheduledTask(77, 93, 0), new ScheduledTask(93, 100, 0), new ScheduledTask(81, 97, 1), new ScheduledTask(100, 104, 0), new ScheduledTask(97, 111, 1), new ScheduledTask(104, 115, 0), new ScheduledTask(117, 124, 0)};
        int[] expectedProcessorEndTimes = new int[]{124, 111};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 116;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(12, 28, 0), new ScheduledTask(18, 34, 1), new ScheduledTask(28, 32, 0), new ScheduledTask(32, 39, 0), new ScheduledTask(37, 46, 1), new ScheduledTask(39, 55, 0), new ScheduledTask(46, 53, 1), new ScheduledTask(37, 41, 2), new ScheduledTask(56, 61, 3), new ScheduledTask(53, 62, 1), new ScheduledTask(55, 69, 0), new ScheduledTask(61, 75, 3), new ScheduledTask(66, 70, 2), new ScheduledTask(74, 90, 2), new ScheduledTask(75, 82, 3), new ScheduledTask(76, 92, 1), new ScheduledTask(82, 86, 3), new ScheduledTask(94, 108, 3), new ScheduledTask(90, 101, 2), new ScheduledTask(109, 116, 3)};
        int[] expectedProcessorEndTimes = new int[]{69, 92, 101, 116};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 116;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(12, 28, 0), new ScheduledTask(18, 34, 1), new ScheduledTask(28, 32, 0), new ScheduledTask(32, 39, 0), new ScheduledTask(37, 46, 1), new ScheduledTask(39, 55, 0), new ScheduledTask(46, 53, 1), new ScheduledTask(37, 41, 2), new ScheduledTask(56, 61, 2), new ScheduledTask(53, 62, 1), new ScheduledTask(55, 69, 0), new ScheduledTask(61, 75, 2), new ScheduledTask(66, 70, 3), new ScheduledTask(74, 90, 3), new ScheduledTask(75, 82, 2), new ScheduledTask(76, 92, 4), new ScheduledTask(82, 86, 2), new ScheduledTask(94, 108, 5), new ScheduledTask(90, 101, 3), new ScheduledTask(109, 116, 5)};
        int[] expectedProcessorEndTimes = new int[]{69, 62, 86, 101, 92, 116};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot00_WeightType_Random3_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.00_WeightType_Random#3_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 18000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(2400, 2409, 0), new ScheduledTask(1100, 1113, 0), new ScheduledTask(6300, 6313, 0), new ScheduledTask(3300, 3304, 0), new ScheduledTask(2800, 2809, 1), new ScheduledTask(3700, 3715, 0), new ScheduledTask(10200, 10219, 0), new ScheduledTask(7600, 7611, 0), new ScheduledTask(8700, 8715, 0), new ScheduledTask(12100, 12108, 0), new ScheduledTask(12900, 12913, 0), new ScheduledTask(5200, 5211, 0), new ScheduledTask(10800, 10804, 1), new ScheduledTask(7300, 7304, 2), new ScheduledTask(15100, 15115, 0), new ScheduledTask(14200, 14209, 0), new ScheduledTask(10600, 10608, 3), new ScheduledTask(17000, 17004, 0), new ScheduledTask(16600, 16604, 0), new ScheduledTask(17400, 17406, 0)};
        int[] expectedProcessorEndTimes = new int[]{17406, 10804, 7304, 10608};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot00_WeightType_Random3_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.00_WeightType_Random#3_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 14200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(1100, 1109, 0), new ScheduledTask(2000, 2013, 0), new ScheduledTask(3300, 3313, 0), new ScheduledTask(2700, 2704, 1), new ScheduledTask(4600, 4609, 0), new ScheduledTask(3500, 3515, 1), new ScheduledTask(5500, 5519, 0), new ScheduledTask(4900, 4911, 2), new ScheduledTask(7700, 7715, 0), new ScheduledTask(9200, 9208, 0), new ScheduledTask(10000, 10013, 0), new ScheduledTask(7200, 7211, 3), new ScheduledTask(9800, 9804, 2), new ScheduledTask(9400, 9404, 3), new ScheduledTask(11300, 11315, 0), new ScheduledTask(10700, 10709, 2), new ScheduledTask(10200, 10208, 3), new ScheduledTask(13200, 13204, 0), new ScheduledTask(12800, 12804, 0), new ScheduledTask(13600, 13606, 0)};
        int[] expectedProcessorEndTimes = new int[]{13606, 3515, 10709, 10208};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot00_WeightType_Random3_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.00_WeightType_Random#3_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 12380;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(1500, 1509, 1), new ScheduledTask(1100, 1113, 0), new ScheduledTask(2600, 2613, 1), new ScheduledTask(3280, 3284, 0), new ScheduledTask(2800, 2809, 3), new ScheduledTask(3680, 3695, 0), new ScheduledTask(5300, 5319, 0), new ScheduledTask(4480, 4491, 1), new ScheduledTask(5880, 5895, 1), new ScheduledTask(7200, 7208, 0), new ScheduledTask(8580, 8593, 0), new ScheduledTask(5880, 5891, 2), new ScheduledTask(7730, 7734, 1), new ScheduledTask(7530, 7534, 2), new ScheduledTask(9880, 9895, 0), new ScheduledTask(8630, 8639, 1), new ScheduledTask(8130, 8138, 2), new ScheduledTask(9710, 9714, 1), new ScheduledTask(11380, 11384, 0), new ScheduledTask(11780, 11786, 0)};
        int[] expectedProcessorEndTimes = new int[]{11786, 9714, 8138, 2809};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.00_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 119;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(11, 20, 0), new ScheduledTask(16, 29, 1), new ScheduledTask(29, 42, 1), new ScheduledTask(20, 24, 0), new ScheduledTask(39, 48, 0), new ScheduledTask(24, 39, 0), new ScheduledTask(48, 67, 0), new ScheduledTask(42, 53, 1), new ScheduledTask(53, 68, 1), new ScheduledTask(67, 75, 0), new ScheduledTask(77, 90, 0), new ScheduledTask(68, 79, 1), new ScheduledTask(83, 87, 1), new ScheduledTask(79, 83, 1), new ScheduledTask(90, 105, 0), new ScheduledTask(87, 96, 1), new ScheduledTask(96, 104, 1), new ScheduledTask(109, 113, 0), new ScheduledTask(105, 109, 0), new ScheduledTask(113, 119, 0)};
        int[] expectedProcessorEndTimes = new int[]{119, 104};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot00_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.00_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 113;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(15, 24, 1), new ScheduledTask(11, 24, 0), new ScheduledTask(26, 39, 1), new ScheduledTask(31, 35, 2), new ScheduledTask(24, 33, 0), new ScheduledTask(43, 58, 3), new ScheduledTask(40, 59, 1), new ScheduledTask(42, 53, 2), new ScheduledTask(59, 74, 3), new ScheduledTask(59, 67, 1), new ScheduledTask(75, 88, 3), new ScheduledTask(65, 76, 2), new ScheduledTask(80, 84, 1), new ScheduledTask(76, 80, 2), new ScheduledTask(88, 103, 3), new ScheduledTask(85, 94, 1), new ScheduledTask(80, 88, 2), new ScheduledTask(94, 98, 1), new ScheduledTask(103, 107, 3), new ScheduledTask(107, 113, 3)};
        int[] expectedProcessorEndTimes = new int[]{33, 98, 88, 113};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot00_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.00_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 113;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(15, 24, 1), new ScheduledTask(11, 24, 0), new ScheduledTask(26, 39, 1), new ScheduledTask(31, 35, 2), new ScheduledTask(24, 33, 0), new ScheduledTask(43, 58, 0), new ScheduledTask(40, 59, 1), new ScheduledTask(42, 53, 2), new ScheduledTask(59, 74, 0), new ScheduledTask(59, 67, 1), new ScheduledTask(75, 88, 0), new ScheduledTask(65, 76, 3), new ScheduledTask(80, 84, 4), new ScheduledTask(76, 80, 3), new ScheduledTask(88, 103, 0), new ScheduledTask(85, 94, 4), new ScheduledTask(80, 88, 3), new ScheduledTask(94, 98, 4), new ScheduledTask(103, 107, 0), new ScheduledTask(107, 113, 0)};
        int[] expectedProcessorEndTimes = new int[]{113, 67, 53, 88, 98};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot00_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.00_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 108;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 15, 0), new ScheduledTask(15, 23, 0), new ScheduledTask(17, 23, 1), new ScheduledTask(23, 39, 0), new ScheduledTask(23, 26, 1), new ScheduledTask(29, 40, 2), new ScheduledTask(26, 41, 1), new ScheduledTask(42, 55, 0), new ScheduledTask(40, 45, 2), new ScheduledTask(48, 61, 2), new ScheduledTask(47, 52, 3), new ScheduledTask(62, 65, 4), new ScheduledTask(68, 81, 4), new ScheduledTask(52, 65, 3), new ScheduledTask(61, 71, 2), new ScheduledTask(81, 87, 4), new ScheduledTask(71, 84, 5), new ScheduledTask(74, 82, 2), new ScheduledTask(87, 102, 4), new ScheduledTask(89, 92, 5), new ScheduledTask(102, 108, 4)};
        int[] expectedProcessorEndTimes = new int[]{55, 41, 82, 65, 108, 92};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 118;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 15, 0), new ScheduledTask(15, 23, 0), new ScheduledTask(17, 23, 1), new ScheduledTask(23, 39, 0), new ScheduledTask(23, 26, 1), new ScheduledTask(39, 50, 0), new ScheduledTask(26, 41, 1), new ScheduledTask(59, 72, 1), new ScheduledTask(50, 55, 0), new ScheduledTask(55, 68, 0), new ScheduledTask(41, 46, 1), new ScheduledTask(72, 75, 1), new ScheduledTask(75, 88, 1), new ScheduledTask(46, 59, 1), new ScheduledTask(68, 78, 0), new ScheduledTask(88, 94, 1), new ScheduledTask(86, 99, 0), new ScheduledTask(78, 86, 0), new ScheduledTask(94, 109, 1), new ScheduledTask(109, 112, 1), new ScheduledTask(112, 118, 1)};
        int[] expectedProcessorEndTimes = new int[]{99, 118};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot00_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.00_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 108;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 15, 0), new ScheduledTask(15, 23, 0), new ScheduledTask(17, 23, 1), new ScheduledTask(31, 47, 2), new ScheduledTask(23, 26, 1), new ScheduledTask(29, 40, 3), new ScheduledTask(26, 41, 1), new ScheduledTask(47, 60, 2), new ScheduledTask(40, 45, 3), new ScheduledTask(48, 61, 3), new ScheduledTask(41, 46, 1), new ScheduledTask(60, 63, 2), new ScheduledTask(68, 81, 2), new ScheduledTask(46, 59, 1), new ScheduledTask(61, 71, 3), new ScheduledTask(81, 87, 2), new ScheduledTask(59, 72, 1), new ScheduledTask(71, 79, 3), new ScheduledTask(87, 102, 2), new ScheduledTask(79, 82, 3), new ScheduledTask(102, 108, 2)};
        int[] expectedProcessorEndTimes = new int[]{23, 72, 108, 82};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot00_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.00_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 108;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 15, 0), new ScheduledTask(15, 23, 0), new ScheduledTask(17, 23, 1), new ScheduledTask(31, 47, 2), new ScheduledTask(23, 26, 1), new ScheduledTask(29, 40, 3), new ScheduledTask(26, 41, 1), new ScheduledTask(47, 60, 2), new ScheduledTask(40, 45, 3), new ScheduledTask(48, 61, 3), new ScheduledTask(47, 52, 4), new ScheduledTask(60, 63, 2), new ScheduledTask(68, 81, 2), new ScheduledTask(52, 65, 4), new ScheduledTask(61, 71, 3), new ScheduledTask(81, 87, 2), new ScheduledTask(71, 84, 5), new ScheduledTask(74, 82, 3), new ScheduledTask(87, 102, 2), new ScheduledTask(89, 92, 5), new ScheduledTask(102, 108, 2)};
        int[] expectedProcessorEndTimes = new int[]{23, 41, 108, 82, 65, 92};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot00_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.00_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 17100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(1900, 1905, 0), new ScheduledTask(2400, 2415, 0), new ScheduledTask(1400, 1405, 0), new ScheduledTask(2700, 2705, 1), new ScheduledTask(2500, 2512, 2), new ScheduledTask(6500, 6515, 0), new ScheduledTask(3900, 3908, 0), new ScheduledTask(10100, 10109, 0), new ScheduledTask(4700, 4703, 0), new ScheduledTask(8000, 8006, 0), new ScheduledTask(11000, 11012, 0), new ScheduledTask(5000, 5015, 0), new ScheduledTask(8600, 8606, 0), new ScheduledTask(12200, 12205, 0), new ScheduledTask(12700, 12712, 0), new ScheduledTask(9700, 9706, 3), new ScheduledTask(7300, 7303, 3), new ScheduledTask(15100, 15114, 0), new ScheduledTask(13900, 13912, 0), new ScheduledTask(16500, 16506, 0)};
        int[] expectedProcessorEndTimes = new int[]{16506, 2705, 2512, 9706};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot00_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.00_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 13500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(1900, 1905, 0), new ScheduledTask(2400, 2415, 0), new ScheduledTask(1400, 1405, 0), new ScheduledTask(2700, 2705, 1), new ScheduledTask(2500, 2512, 2), new ScheduledTask(4700, 4715, 0), new ScheduledTask(3900, 3908, 0), new ScheduledTask(4900, 4909, 2), new ScheduledTask(5000, 5003, 3), new ScheduledTask(6200, 6206, 0), new ScheduledTask(7400, 7412, 0), new ScheduledTask(5600, 5615, 3), new ScheduledTask(6800, 6806, 0), new ScheduledTask(8600, 8605, 0), new ScheduledTask(9100, 9112, 0), new ScheduledTask(8600, 8606, 3), new ScheduledTask(9800, 9803, 3), new ScheduledTask(11500, 11514, 0), new ScheduledTask(10300, 10312, 0), new ScheduledTask(12900, 12906, 0)};
        int[] expectedProcessorEndTimes = new int[]{12906, 2705, 4909, 9803};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot00_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.00_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 11280;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(1400, 1405, 0), new ScheduledTask(1900, 1915, 0), new ScheduledTask(2100, 2105, 2), new ScheduledTask(3350, 3355, 1), new ScheduledTask(2850, 2862, 2), new ScheduledTask(4350, 4365, 0), new ScheduledTask(3400, 3408, 0), new ScheduledTask(4650, 4659, 2), new ScheduledTask(4500, 4503, 1), new ScheduledTask(5850, 5856, 0), new ScheduledTask(6500, 6512, 0), new ScheduledTask(4860, 4875, 1), new ScheduledTask(6660, 6666, 1), new ScheduledTask(7700, 7705, 0), new ScheduledTask(8280, 8292, 0), new ScheduledTask(7740, 7746, 1), new ScheduledTask(7380, 7383, 1), new ScheduledTask(8460, 8474, 1), new ScheduledTask(9480, 9492, 0), new ScheduledTask(10680, 10686, 0)};
        int[] expectedProcessorEndTimes = new int[]{10686, 8474, 4659};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 111;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(14, 19, 0), new ScheduledTask(19, 34, 0), new ScheduledTask(21, 26, 1), new ScheduledTask(34, 39, 0), new ScheduledTask(26, 38, 1), new ScheduledTask(39, 54, 0), new ScheduledTask(38, 46, 1), new ScheduledTask(46, 55, 1), new ScheduledTask(54, 57, 0), new ScheduledTask(57, 63, 0), new ScheduledTask(58, 70, 1), new ScheduledTask(63, 78, 0), new ScheduledTask(70, 76, 1), new ScheduledTask(76, 81, 1), new ScheduledTask(81, 93, 1), new ScheduledTask(81, 87, 0), new ScheduledTask(78, 81, 0), new ScheduledTask(87, 101, 0), new ScheduledTask(93, 105, 1), new ScheduledTask(105, 111, 1)};
        int[] expectedProcessorEndTimes = new int[]{101, 111};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 103;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(14, 19, 0), new ScheduledTask(19, 34, 0), new ScheduledTask(21, 26, 1), new ScheduledTask(26, 31, 1), new ScheduledTask(31, 43, 1), new ScheduledTask(35, 50, 0), new ScheduledTask(38, 46, 2), new ScheduledTask(43, 52, 1), new ScheduledTask(46, 49, 2), new ScheduledTask(56, 62, 0), new ScheduledTask(54, 66, 1), new ScheduledTask(55, 70, 3), new ScheduledTask(62, 68, 0), new ScheduledTask(68, 73, 0), new ScheduledTask(73, 85, 0), new ScheduledTask(73, 79, 3), new ScheduledTask(70, 73, 3), new ScheduledTask(79, 93, 3), new ScheduledTask(85, 97, 0), new ScheduledTask(97, 103, 0)};
        int[] expectedProcessorEndTimes = new int[]{103, 66, 49, 93};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 103;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(14, 19, 0), new ScheduledTask(19, 34, 0), new ScheduledTask(21, 26, 1), new ScheduledTask(26, 31, 1), new ScheduledTask(32, 44, 2), new ScheduledTask(35, 50, 0), new ScheduledTask(38, 46, 3), new ScheduledTask(44, 53, 2), new ScheduledTask(49, 52, 4), new ScheduledTask(56, 62, 0), new ScheduledTask(54, 66, 2), new ScheduledTask(52, 67, 4), new ScheduledTask(62, 68, 0), new ScheduledTask(68, 73, 0), new ScheduledTask(73, 85, 0), new ScheduledTask(73, 79, 4), new ScheduledTask(67, 70, 4), new ScheduledTask(79, 93, 4), new ScheduledTask(85, 97, 0), new ScheduledTask(97, 103, 0)};
        int[] expectedProcessorEndTimes = new int[]{103, 31, 66, 46, 93};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot01_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.01_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 16600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 13, 0), new ScheduledTask(2000, 2004, 0), new ScheduledTask(1300, 1307, 0), new ScheduledTask(2400, 2409, 0), new ScheduledTask(4600, 4607, 0), new ScheduledTask(5300, 5310, 0), new ScheduledTask(3300, 3313, 0), new ScheduledTask(2400, 2409, 1), new ScheduledTask(6300, 6310, 0), new ScheduledTask(5000, 5004, 2), new ScheduledTask(9700, 9713, 0), new ScheduledTask(7800, 7804, 0), new ScheduledTask(7900, 7904, 2), new ScheduledTask(11000, 11004, 0), new ScheduledTask(11400, 11415, 0), new ScheduledTask(8200, 8215, 0), new ScheduledTask(11800, 11803, 3), new ScheduledTask(14100, 14112, 0), new ScheduledTask(12900, 12912, 0), new ScheduledTask(15300, 15307, 0), new ScheduledTask(16000, 16006, 0)};
        int[] expectedProcessorEndTimes = new int[]{16006, 2409, 7904, 11803};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot01_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.01_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 12600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 13, 0), new ScheduledTask(1300, 1304, 0), new ScheduledTask(1800, 1807, 1), new ScheduledTask(1700, 1709, 0), new ScheduledTask(3200, 3207, 1), new ScheduledTask(4900, 4910, 0), new ScheduledTask(2600, 2613, 0), new ScheduledTask(3600, 3609, 2), new ScheduledTask(5900, 5910, 0), new ScheduledTask(3900, 3904, 0), new ScheduledTask(5400, 5413, 2), new ScheduledTask(4700, 4704, 3), new ScheduledTask(6900, 6904, 0), new ScheduledTask(8000, 8004, 2), new ScheduledTask(7300, 7315, 0), new ScheduledTask(5500, 5515, 3), new ScheduledTask(9200, 9203, 3), new ScheduledTask(10100, 10112, 0), new ScheduledTask(8900, 8912, 0), new ScheduledTask(11300, 11307, 0), new ScheduledTask(12000, 12006, 0)};
        int[] expectedProcessorEndTimes = new int[]{12006, 3207, 8004, 9203};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot01_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.01_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 10650;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 13, 0), new ScheduledTask(1300, 1304, 0), new ScheduledTask(1800, 1807, 2), new ScheduledTask(1700, 1709, 0), new ScheduledTask(2850, 2857, 2), new ScheduledTask(4200, 4210, 0), new ScheduledTask(2600, 2613, 0), new ScheduledTask(3250, 3259, 1), new ScheduledTask(5200, 5210, 0), new ScheduledTask(4300, 4304, 2), new ScheduledTask(4330, 4343, 1), new ScheduledTask(4900, 4904, 2), new ScheduledTask(6200, 6204, 0), new ScheduledTask(5890, 5894, 1), new ScheduledTask(6600, 6615, 0), new ScheduledTask(5500, 5515, 2), new ScheduledTask(6400, 6403, 1), new ScheduledTask(7100, 7112, 1), new ScheduledTask(8150, 8162, 0), new ScheduledTask(9350, 9357, 0), new ScheduledTask(10050, 10056, 0)};
        int[] expectedProcessorEndTimes = new int[]{10056, 7112, 5515};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 106;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 13, 0), new ScheduledTask(13, 17, 0), new ScheduledTask(17, 24, 0), new ScheduledTask(19, 28, 1), new ScheduledTask(24, 31, 0), new ScheduledTask(37, 47, 1), new ScheduledTask(31, 44, 0), new ScheduledTask(28, 37, 1), new ScheduledTask(48, 58, 1), new ScheduledTask(44, 48, 0), new ScheduledTask(52, 65, 0), new ScheduledTask(48, 52, 0), new ScheduledTask(58, 62, 1), new ScheduledTask(65, 69, 0), new ScheduledTask(62, 77, 1), new ScheduledTask(72, 87, 0), new ScheduledTask(69, 72, 0), new ScheduledTask(77, 89, 1), new ScheduledTask(87, 99, 0), new ScheduledTask(89, 96, 1), new ScheduledTask(100, 106, 0)};
        int[] expectedProcessorEndTimes = new int[]{106, 96};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 13, 0), new ScheduledTask(13, 17, 0), new ScheduledTask(18, 25, 1), new ScheduledTask(17, 26, 0), new ScheduledTask(25, 32, 1), new ScheduledTask(35, 45, 0), new ScheduledTask(29, 42, 2), new ScheduledTask(29, 38, 3), new ScheduledTask(46, 56, 0), new ScheduledTask(42, 46, 2), new ScheduledTask(38, 51, 3), new ScheduledTask(46, 50, 2), new ScheduledTask(56, 60, 0), new ScheduledTask(51, 55, 3), new ScheduledTask(60, 75, 0), new ScheduledTask(50, 65, 2), new ScheduledTask(58, 61, 3), new ScheduledTask(65, 77, 3), new ScheduledTask(75, 87, 0), new ScheduledTask(87, 94, 0), new ScheduledTask(94, 100, 0)};
        int[] expectedProcessorEndTimes = new int[]{100, 32, 65, 77};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 13, 0), new ScheduledTask(13, 17, 0), new ScheduledTask(18, 25, 1), new ScheduledTask(17, 26, 0), new ScheduledTask(25, 32, 1), new ScheduledTask(35, 45, 0), new ScheduledTask(29, 42, 2), new ScheduledTask(29, 38, 3), new ScheduledTask(46, 56, 0), new ScheduledTask(42, 46, 2), new ScheduledTask(44, 57, 4), new ScheduledTask(46, 50, 2), new ScheduledTask(56, 60, 0), new ScheduledTask(60, 64, 5), new ScheduledTask(60, 75, 0), new ScheduledTask(50, 65, 2), new ScheduledTask(64, 67, 5), new ScheduledTask(67, 79, 5), new ScheduledTask(75, 87, 0), new ScheduledTask(87, 94, 0), new ScheduledTask(94, 100, 0)};
        int[] expectedProcessorEndTimes = new int[]{100, 32, 65, 38, 57, 79};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot01_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.01_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 15400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(1100, 1116, 0), new ScheduledTask(2700, 2711, 0), new ScheduledTask(1700, 1708, 1), new ScheduledTask(7400, 7403, 0), new ScheduledTask(3800, 3811, 0), new ScheduledTask(7700, 7711, 0), new ScheduledTask(6900, 6903, 2), new ScheduledTask(10500, 10506, 0), new ScheduledTask(4900, 4910, 0), new ScheduledTask(8800, 8803, 0), new ScheduledTask(11100, 11105, 0), new ScheduledTask(5900, 5915, 0), new ScheduledTask(9100, 9108, 0), new ScheduledTask(11600, 11605, 0), new ScheduledTask(12100, 12113, 0), new ScheduledTask(9900, 9906, 0), new ScheduledTask(8400, 8403, 3), new ScheduledTask(13400, 13415, 0), new ScheduledTask(11100, 11105, 3), new ScheduledTask(14900, 14905, 0)};
        int[] expectedProcessorEndTimes = new int[]{14905, 1708, 6903, 11105};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot01_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.01_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 12800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(1100, 1116, 0), new ScheduledTask(2700, 2711, 0), new ScheduledTask(1700, 1708, 1), new ScheduledTask(3900, 3903, 2), new ScheduledTask(3800, 3811, 0), new ScheduledTask(4900, 4911, 0), new ScheduledTask(3700, 3703, 3), new ScheduledTask(5300, 5306, 3), new ScheduledTask(6000, 6010, 0), new ScheduledTask(6600, 6603, 3), new ScheduledTask(6900, 6905, 2), new ScheduledTask(7000, 7015, 0), new ScheduledTask(7400, 7408, 3), new ScheduledTask(8800, 8805, 0), new ScheduledTask(9500, 9513, 0), new ScheduledTask(9000, 9006, 3), new ScheduledTask(8500, 8503, 0), new ScheduledTask(10800, 10815, 0), new ScheduledTask(10200, 10205, 3), new ScheduledTask(12300, 12305, 0)};
        int[] expectedProcessorEndTimes = new int[]{12305, 1708, 6905, 10205};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot01_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.01_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 11370;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(1100, 1116, 0), new ScheduledTask(2700, 2711, 0), new ScheduledTask(1700, 1708, 1), new ScheduledTask(3260, 3263, 2), new ScheduledTask(3800, 3811, 0), new ScheduledTask(4700, 4711, 1), new ScheduledTask(3060, 3063, 3), new ScheduledTask(4510, 4516, 3), new ScheduledTask(4900, 4910, 0), new ScheduledTask(6020, 6023, 1), new ScheduledTask(6220, 6225, 2), new ScheduledTask(5900, 5915, 0), new ScheduledTask(6380, 6388, 1), new ScheduledTask(7570, 7575, 0), new ScheduledTask(8070, 8083, 0), new ScheduledTask(7800, 7806, 1), new ScheduledTask(8400, 8403, 3), new ScheduledTask(9370, 9385, 0), new ScheduledTask(9120, 9125, 3), new ScheduledTask(10870, 10875, 0)};
        int[] expectedProcessorEndTimes = new int[]{10875, 7806, 6225, 9125};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 110;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(11, 27, 0), new ScheduledTask(27, 38, 0), new ScheduledTask(17, 25, 1), new ScheduledTask(30, 33, 1), new ScheduledTask(38, 49, 0), new ScheduledTask(47, 58, 1), new ScheduledTask(25, 28, 1), new ScheduledTask(33, 39, 1), new ScheduledTask(49, 59, 0), new ScheduledTask(58, 61, 1), new ScheduledTask(60, 65, 0), new ScheduledTask(65, 80, 0), new ScheduledTask(63, 71, 1), new ScheduledTask(71, 76, 1), new ScheduledTask(76, 89, 1), new ScheduledTask(80, 86, 0), new ScheduledTask(86, 89, 0), new ScheduledTask(90, 105, 1), new ScheduledTask(89, 94, 0), new ScheduledTask(105, 110, 1)};
        int[] expectedProcessorEndTimes = new int[]{94, 110};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 109;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(11, 27, 0), new ScheduledTask(27, 38, 0), new ScheduledTask(17, 25, 1), new ScheduledTask(30, 33, 1), new ScheduledTask(38, 49, 0), new ScheduledTask(47, 58, 2), new ScheduledTask(29, 32, 3), new ScheduledTask(41, 47, 3), new ScheduledTask(49, 59, 0), new ScheduledTask(58, 61, 2), new ScheduledTask(60, 65, 3), new ScheduledTask(59, 74, 0), new ScheduledTask(63, 71, 2), new ScheduledTask(71, 76, 3), new ScheduledTask(76, 89, 3), new ScheduledTask(78, 84, 2), new ScheduledTask(84, 87, 2), new ScheduledTask(89, 104, 3), new ScheduledTask(87, 92, 2), new ScheduledTask(104, 109, 3)};
        int[] expectedProcessorEndTimes = new int[]{74, 33, 92, 109};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 109;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(11, 27, 0), new ScheduledTask(27, 38, 0), new ScheduledTask(17, 25, 1), new ScheduledTask(31, 34, 2), new ScheduledTask(38, 49, 0), new ScheduledTask(47, 58, 3), new ScheduledTask(25, 28, 1), new ScheduledTask(42, 48, 4), new ScheduledTask(49, 59, 0), new ScheduledTask(58, 61, 3), new ScheduledTask(60, 65, 5), new ScheduledTask(59, 74, 0), new ScheduledTask(63, 71, 3), new ScheduledTask(71, 76, 5), new ScheduledTask(76, 89, 5), new ScheduledTask(78, 84, 3), new ScheduledTask(84, 87, 4), new ScheduledTask(89, 104, 5), new ScheduledTask(90, 95, 4), new ScheduledTask(104, 109, 5)};
        int[] expectedProcessorEndTimes = new int[]{74, 28, 34, 84, 95, 109};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot02_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.02_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 16800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(300, 310, 0), new ScheduledTask(3500, 3505, 0), new ScheduledTask(4000, 4005, 0), new ScheduledTask(5700, 5703, 1), new ScheduledTask(1300, 1305, 0), new ScheduledTask(1800, 1812, 0), new ScheduledTask(8300, 8317, 0), new ScheduledTask(4500, 4507, 0), new ScheduledTask(10000, 10015, 0), new ScheduledTask(5200, 5214, 0), new ScheduledTask(3000, 3005, 0), new ScheduledTask(11500, 11507, 0), new ScheduledTask(3900, 3903, 1), new ScheduledTask(6600, 6607, 0), new ScheduledTask(6200, 6212, 2), new ScheduledTask(12200, 12217, 0), new ScheduledTask(7300, 7310, 0), new ScheduledTask(14900, 14905, 0), new ScheduledTask(13900, 13910, 0), new ScheduledTask(15400, 15414, 0)};
        int[] expectedProcessorEndTimes = new int[]{15414, 5703, 6212};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot02_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.02_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 13100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(800, 810, 0), new ScheduledTask(300, 305, 0), new ScheduledTask(1800, 1805, 0), new ScheduledTask(1600, 1603, 1), new ScheduledTask(2300, 2305, 0), new ScheduledTask(2800, 2812, 0), new ScheduledTask(3100, 3117, 2), new ScheduledTask(4000, 4007, 0), new ScheduledTask(6800, 6815, 0), new ScheduledTask(4700, 4714, 0), new ScheduledTask(4400, 4405, 3), new ScheduledTask(8300, 8307, 0), new ScheduledTask(5400, 5403, 3), new ScheduledTask(6100, 6107, 0), new ScheduledTask(6000, 6012, 3), new ScheduledTask(9000, 9017, 0), new ScheduledTask(7700, 7710, 2), new ScheduledTask(9700, 9705, 2), new ScheduledTask(10700, 10710, 0), new ScheduledTask(11700, 11714, 0)};
        int[] expectedProcessorEndTimes = new int[]{11714, 1603, 9705, 6012};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot02_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.02_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 11300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(300, 310, 0), new ScheduledTask(1200, 1205, 1), new ScheduledTask(1800, 1805, 1), new ScheduledTask(3000, 3003, 0), new ScheduledTask(1300, 1305, 0), new ScheduledTask(1800, 1812, 0), new ScheduledTask(3300, 3317, 0), new ScheduledTask(2600, 2607, 1), new ScheduledTask(5000, 5015, 0), new ScheduledTask(4000, 4014, 1), new ScheduledTask(3400, 3405, 3), new ScheduledTask(6500, 6507, 0), new ScheduledTask(4400, 4403, 3), new ScheduledTask(5680, 5687, 1), new ScheduledTask(5000, 5012, 3), new ScheduledTask(7200, 7217, 0), new ScheduledTask(6520, 6530, 1), new ScheduledTask(8200, 8205, 1), new ScheduledTask(8900, 8910, 0), new ScheduledTask(9900, 9914, 0)};
        int[] expectedProcessorEndTimes = new int[]{9914, 8205, 0, 5012};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot02_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.02_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 111;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 13, 0), new ScheduledTask(12, 17, 1), new ScheduledTask(18, 23, 1), new ScheduledTask(23, 26, 1), new ScheduledTask(13, 18, 0), new ScheduledTask(18, 30, 0), new ScheduledTask(26, 43, 1), new ScheduledTask(31, 38, 0), new ScheduledTask(46, 61, 1), new ScheduledTask(43, 57, 0), new ScheduledTask(38, 43, 0), new ScheduledTask(61, 68, 1), new ScheduledTask(64, 67, 0), new ScheduledTask(57, 64, 0), new ScheduledTask(77, 89, 0), new ScheduledTask(68, 85, 1), new ScheduledTask(67, 77, 0), new ScheduledTask(89, 94, 0), new ScheduledTask(85, 95, 1), new ScheduledTask(97, 111, 0)};
        int[] expectedProcessorEndTimes = new int[]{111, 95};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot02_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.02_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 109;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 13, 0), new ScheduledTask(12, 17, 1), new ScheduledTask(18, 23, 1), new ScheduledTask(23, 26, 1), new ScheduledTask(13, 18, 0), new ScheduledTask(18, 30, 0), new ScheduledTask(26, 43, 1), new ScheduledTask(31, 38, 0), new ScheduledTask(46, 61, 0), new ScheduledTask(41, 55, 2), new ScheduledTask(34, 39, 3), new ScheduledTask(61, 68, 0), new ScheduledTask(39, 42, 3), new ScheduledTask(55, 62, 2), new ScheduledTask(42, 54, 3), new ScheduledTask(68, 85, 0), new ScheduledTask(62, 72, 2), new ScheduledTask(72, 77, 2), new ScheduledTask(85, 95, 0), new ScheduledTask(95, 109, 0)};
        int[] expectedProcessorEndTimes = new int[]{109, 43, 77, 54};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot02_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.02_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 109;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 13, 0), new ScheduledTask(12, 17, 1), new ScheduledTask(18, 23, 1), new ScheduledTask(23, 26, 1), new ScheduledTask(13, 18, 0), new ScheduledTask(18, 30, 0), new ScheduledTask(26, 43, 1), new ScheduledTask(31, 38, 0), new ScheduledTask(46, 61, 0), new ScheduledTask(41, 55, 2), new ScheduledTask(34, 39, 3), new ScheduledTask(61, 68, 0), new ScheduledTask(39, 42, 3), new ScheduledTask(55, 62, 2), new ScheduledTask(42, 54, 3), new ScheduledTask(68, 85, 0), new ScheduledTask(62, 72, 2), new ScheduledTask(72, 77, 2), new ScheduledTask(85, 95, 0), new ScheduledTask(95, 109, 0)};
        int[] expectedProcessorEndTimes = new int[]{109, 43, 77, 54};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot02_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.02_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 15900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(1900, 1906, 0), new ScheduledTask(2500, 2516, 0), new ScheduledTask(600, 613, 0), new ScheduledTask(4100, 4116, 0), new ScheduledTask(2800, 2803, 1), new ScheduledTask(2400, 2406, 2), new ScheduledTask(4600, 4603, 1), new ScheduledTask(6000, 6006, 2), new ScheduledTask(7300, 7316, 0), new ScheduledTask(5700, 5705, 0), new ScheduledTask(10800, 10803, 0), new ScheduledTask(6200, 6211, 0), new ScheduledTask(8900, 8908, 0), new ScheduledTask(11100, 11108, 0), new ScheduledTask(9700, 9711, 0), new ScheduledTask(11900, 11913, 0), new ScheduledTask(8300, 8308, 3), new ScheduledTask(13200, 13211, 0), new ScheduledTask(14300, 14305, 0), new ScheduledTask(14800, 14811, 0)};
        int[] expectedProcessorEndTimes = new int[]{14811, 4603, 6006, 8308};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot02_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.02_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 13100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(600, 606, 0), new ScheduledTask(1200, 1216, 0), new ScheduledTask(1000, 1013, 1), new ScheduledTask(2800, 2816, 0), new ScheduledTask(3600, 3603, 1), new ScheduledTask(4100, 4106, 2), new ScheduledTask(4900, 4903, 0), new ScheduledTask(5300, 5306, 2), new ScheduledTask(5200, 5216, 0), new ScheduledTask(4400, 4405, 0), new ScheduledTask(6500, 6503, 2), new ScheduledTask(5400, 5411, 3), new ScheduledTask(6800, 6808, 0), new ScheduledTask(7200, 7208, 2), new ScheduledTask(8500, 8511, 0), new ScheduledTask(9600, 9613, 0), new ScheduledTask(7600, 7608, 3), new ScheduledTask(10900, 10911, 0), new ScheduledTask(10100, 10105, 3), new ScheduledTask(12000, 12011, 0)};
        int[] expectedProcessorEndTimes = new int[]{12011, 3603, 7208, 10105};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot02_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.02_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 11800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(600, 606, 0), new ScheduledTask(1200, 1216, 0), new ScheduledTask(1000, 1013, 1), new ScheduledTask(2800, 2816, 0), new ScheduledTask(2560, 2563, 1), new ScheduledTask(3060, 3066, 3), new ScheduledTask(3520, 3523, 2), new ScheduledTask(4260, 4266, 3), new ScheduledTask(4470, 4486, 0), new ScheduledTask(5000, 5005, 1), new ScheduledTask(5460, 5463, 3), new ScheduledTask(5600, 5611, 1), new ScheduledTask(6070, 6078, 0), new ScheduledTask(6960, 6968, 0), new ScheduledTask(7880, 7891, 1), new ScheduledTask(7760, 7773, 0), new ScheduledTask(6920, 6928, 1), new ScheduledTask(9600, 9611, 0), new ScheduledTask(9200, 9205, 1), new ScheduledTask(10700, 10711, 0)};
        int[] expectedProcessorEndTimes = new int[]{10711, 9205, 3523, 5463};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 113;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 12, 0), new ScheduledTask(12, 28, 0), new ScheduledTask(10, 23, 1), new ScheduledTask(28, 44, 0), new ScheduledTask(29, 32, 1), new ScheduledTask(23, 29, 1), new ScheduledTask(33, 36, 1), new ScheduledTask(36, 42, 1), new ScheduledTask(44, 60, 0), new ScheduledTask(50, 55, 1), new ScheduledTask(42, 45, 1), new ScheduledTask(55, 66, 1), new ScheduledTask(60, 68, 0), new ScheduledTask(68, 76, 0), new ScheduledTask(76, 87, 1), new ScheduledTask(76, 89, 0), new ScheduledTask(66, 74, 1), new ScheduledTask(91, 102, 0), new ScheduledTask(87, 92, 1), new ScheduledTask(102, 113, 0)};
        int[] expectedProcessorEndTimes = new int[]{113, 92};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 112;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 12, 0), new ScheduledTask(12, 28, 0), new ScheduledTask(10, 23, 1), new ScheduledTask(28, 44, 0), new ScheduledTask(31, 34, 2), new ScheduledTask(28, 34, 3), new ScheduledTask(40, 43, 1), new ScheduledTask(43, 49, 1), new ScheduledTask(48, 64, 0), new ScheduledTask(50, 55, 3), new ScheduledTask(59, 62, 2), new ScheduledTask(55, 66, 3), new ScheduledTask(64, 72, 0), new ScheduledTask(68, 76, 2), new ScheduledTask(75, 86, 0), new ScheduledTask(76, 89, 2), new ScheduledTask(66, 74, 3), new ScheduledTask(90, 101, 2), new ScheduledTask(86, 91, 0), new ScheduledTask(101, 112, 2)};
        int[] expectedProcessorEndTimes = new int[]{91, 49, 112, 74};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 112;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 12, 0), new ScheduledTask(12, 28, 0), new ScheduledTask(10, 23, 1), new ScheduledTask(28, 44, 0), new ScheduledTask(31, 34, 2), new ScheduledTask(28, 34, 3), new ScheduledTask(40, 43, 4), new ScheduledTask(42, 48, 5), new ScheduledTask(48, 64, 0), new ScheduledTask(50, 55, 5), new ScheduledTask(58, 61, 4), new ScheduledTask(55, 66, 5), new ScheduledTask(64, 72, 0), new ScheduledTask(68, 76, 4), new ScheduledTask(75, 86, 0), new ScheduledTask(76, 89, 4), new ScheduledTask(66, 74, 5), new ScheduledTask(90, 101, 4), new ScheduledTask(86, 91, 0), new ScheduledTask(101, 112, 4)};
        int[] expectedProcessorEndTimes = new int[]{91, 23, 34, 34, 112, 74};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot98_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.98_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(16, 23, 1), new ScheduledTask(8, 10, 0), new ScheduledTask(10, 14, 0), new ScheduledTask(23, 31, 1), new ScheduledTask(28, 36, 2), new ScheduledTask(31, 39, 1), new ScheduledTask(14, 16, 0), new ScheduledTask(42, 50, 2), new ScheduledTask(16, 23, 0), new ScheduledTask(39, 43, 1), new ScheduledTask(50, 59, 2), new ScheduledTask(23, 33, 0), new ScheduledTask(43, 53, 1), new ScheduledTask(59, 61, 2), new ScheduledTask(33, 43, 0), new ScheduledTask(61, 65, 2), new ScheduledTask(53, 55, 1), new ScheduledTask(65, 69, 2), new ScheduledTask(57, 63, 1), new ScheduledTask(69, 76, 2)};
        int[] expectedProcessorEndTimes = new int[]{43, 63, 76};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot98_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.98_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(10, 17, 0), new ScheduledTask(8, 10, 0), new ScheduledTask(15, 19, 1), new ScheduledTask(17, 25, 0), new ScheduledTask(22, 30, 1), new ScheduledTask(30, 38, 1), new ScheduledTask(19, 21, 1), new ScheduledTask(42, 50, 0), new ScheduledTask(25, 32, 0), new ScheduledTask(38, 42, 1), new ScheduledTask(50, 59, 0), new ScheduledTask(32, 42, 0), new ScheduledTask(42, 52, 1), new ScheduledTask(59, 61, 0), new ScheduledTask(54, 64, 1), new ScheduledTask(61, 65, 0), new ScheduledTask(52, 54, 1), new ScheduledTask(65, 69, 0), new ScheduledTask(64, 70, 1), new ScheduledTask(74, 81, 0)};
        int[] expectedProcessorEndTimes = new int[]{81, 70};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot98_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.98_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(16, 23, 1), new ScheduledTask(8, 10, 0), new ScheduledTask(10, 14, 0), new ScheduledTask(23, 31, 1), new ScheduledTask(28, 36, 2), new ScheduledTask(31, 39, 1), new ScheduledTask(14, 16, 0), new ScheduledTask(42, 50, 2), new ScheduledTask(16, 23, 0), new ScheduledTask(39, 43, 1), new ScheduledTask(50, 59, 2), new ScheduledTask(23, 33, 0), new ScheduledTask(43, 53, 1), new ScheduledTask(59, 61, 2), new ScheduledTask(33, 43, 0), new ScheduledTask(61, 65, 2), new ScheduledTask(53, 55, 1), new ScheduledTask(65, 69, 2), new ScheduledTask(57, 63, 1), new ScheduledTask(69, 76, 2)};
        int[] expectedProcessorEndTimes = new int[]{43, 63, 76};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_1dot98_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_1.98_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(16, 23, 1), new ScheduledTask(8, 10, 0), new ScheduledTask(10, 14, 0), new ScheduledTask(23, 31, 1), new ScheduledTask(28, 36, 2), new ScheduledTask(31, 39, 1), new ScheduledTask(14, 16, 0), new ScheduledTask(42, 50, 2), new ScheduledTask(16, 23, 0), new ScheduledTask(39, 43, 1), new ScheduledTask(50, 59, 2), new ScheduledTask(23, 33, 0), new ScheduledTask(43, 53, 1), new ScheduledTask(59, 61, 2), new ScheduledTask(33, 43, 0), new ScheduledTask(61, 65, 2), new ScheduledTask(53, 55, 1), new ScheduledTask(65, 69, 2), new ScheduledTask(57, 63, 1), new ScheduledTask(69, 76, 2)};
        int[] expectedProcessorEndTimes = new int[]{43, 63, 76};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot00_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.00_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 12300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(1100, 1107, 0), new ScheduledTask(200, 209, 0), new ScheduledTask(2600, 2602, 0), new ScheduledTask(1800, 1808, 0), new ScheduledTask(2500, 2509, 1), new ScheduledTask(3000, 3005, 0), new ScheduledTask(9300, 9302, 0), new ScheduledTask(2800, 2802, 0), new ScheduledTask(9500, 9503, 0), new ScheduledTask(4300, 4305, 0), new ScheduledTask(3500, 3508, 0), new ScheduledTask(6500, 6507, 0), new ScheduledTask(9800, 9806, 0), new ScheduledTask(4800, 4810, 0), new ScheduledTask(5800, 5807, 0), new ScheduledTask(10400, 10405, 0), new ScheduledTask(7200, 7210, 0), new ScheduledTask(8200, 8208, 0), new ScheduledTask(10900, 10907, 0), new ScheduledTask(11600, 11607, 0)};
        int[] expectedProcessorEndTimes = new int[]{11607, 2509};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot00_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.00_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 12000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(1100, 1107, 0), new ScheduledTask(200, 209, 0), new ScheduledTask(2600, 2602, 0), new ScheduledTask(1800, 1808, 0), new ScheduledTask(2500, 2509, 1), new ScheduledTask(3000, 3005, 0), new ScheduledTask(9000, 9002, 0), new ScheduledTask(2800, 2802, 0), new ScheduledTask(9200, 9203, 0), new ScheduledTask(4300, 4305, 0), new ScheduledTask(3500, 3508, 0), new ScheduledTask(6500, 6507, 0), new ScheduledTask(9500, 9506, 0), new ScheduledTask(4800, 4810, 0), new ScheduledTask(5800, 5807, 0), new ScheduledTask(10100, 10105, 0), new ScheduledTask(7200, 7210, 0), new ScheduledTask(8200, 8208, 0), new ScheduledTask(10600, 10607, 0), new ScheduledTask(11300, 11307, 0)};
        int[] expectedProcessorEndTimes = new int[]{11307, 2509};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot00_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.00_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 12000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(1100, 1107, 0), new ScheduledTask(200, 209, 0), new ScheduledTask(2600, 2602, 0), new ScheduledTask(1800, 1808, 0), new ScheduledTask(2500, 2509, 2), new ScheduledTask(3000, 3005, 0), new ScheduledTask(9000, 9002, 0), new ScheduledTask(2800, 2802, 0), new ScheduledTask(9200, 9203, 0), new ScheduledTask(4300, 4305, 0), new ScheduledTask(3500, 3508, 0), new ScheduledTask(6500, 6507, 0), new ScheduledTask(9500, 9506, 0), new ScheduledTask(4800, 4810, 0), new ScheduledTask(5800, 5807, 0), new ScheduledTask(10100, 10105, 0), new ScheduledTask(7200, 7210, 0), new ScheduledTask(8200, 8208, 0), new ScheduledTask(10600, 10607, 0), new ScheduledTask(11300, 11307, 0)};
        int[] expectedProcessorEndTimes = new int[]{11307, 0, 2509};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 120;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(11, 18, 0), new ScheduledTask(2, 11, 0), new ScheduledTask(26, 28, 0), new ScheduledTask(18, 26, 0), new ScheduledTask(25, 34, 1), new ScheduledTask(30, 35, 0), new ScheduledTask(90, 92, 0), new ScheduledTask(28, 30, 0), new ScheduledTask(92, 95, 0), new ScheduledTask(43, 48, 0), new ScheduledTask(35, 43, 0), new ScheduledTask(65, 72, 0), new ScheduledTask(95, 101, 0), new ScheduledTask(48, 58, 0), new ScheduledTask(58, 65, 0), new ScheduledTask(101, 106, 0), new ScheduledTask(72, 82, 0), new ScheduledTask(82, 90, 0), new ScheduledTask(106, 113, 0), new ScheduledTask(113, 120, 0)};
        int[] expectedProcessorEndTimes = new int[]{120, 34};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 120;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(11, 18, 0), new ScheduledTask(2, 11, 0), new ScheduledTask(26, 28, 0), new ScheduledTask(18, 26, 0), new ScheduledTask(25, 34, 1), new ScheduledTask(30, 35, 0), new ScheduledTask(90, 92, 0), new ScheduledTask(28, 30, 0), new ScheduledTask(92, 95, 0), new ScheduledTask(43, 48, 0), new ScheduledTask(35, 43, 0), new ScheduledTask(65, 72, 0), new ScheduledTask(95, 101, 0), new ScheduledTask(48, 58, 0), new ScheduledTask(58, 65, 0), new ScheduledTask(101, 106, 0), new ScheduledTask(72, 82, 0), new ScheduledTask(82, 90, 0), new ScheduledTask(106, 113, 0), new ScheduledTask(113, 120, 0)};
        int[] expectedProcessorEndTimes = new int[]{120, 34};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 120;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(11, 18, 0), new ScheduledTask(2, 11, 0), new ScheduledTask(26, 28, 0), new ScheduledTask(18, 26, 0), new ScheduledTask(25, 34, 1), new ScheduledTask(30, 35, 0), new ScheduledTask(90, 92, 0), new ScheduledTask(28, 30, 0), new ScheduledTask(92, 95, 0), new ScheduledTask(43, 48, 0), new ScheduledTask(35, 43, 0), new ScheduledTask(65, 72, 0), new ScheduledTask(95, 101, 0), new ScheduledTask(48, 58, 0), new ScheduledTask(58, 65, 0), new ScheduledTask(101, 106, 0), new ScheduledTask(72, 82, 0), new ScheduledTask(82, 90, 0), new ScheduledTask(106, 113, 0), new ScheduledTask(113, 120, 0)};
        int[] expectedProcessorEndTimes = new int[]{120, 34};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot01_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.01_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 10100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(500, 509, 0), new ScheduledTask(300, 302, 0), new ScheduledTask(1700, 1706, 0), new ScheduledTask(1400, 1403, 0), new ScheduledTask(1600, 1604, 1), new ScheduledTask(2900, 2907, 0), new ScheduledTask(7000, 7007, 0), new ScheduledTask(2300, 2306, 0), new ScheduledTask(4500, 4507, 0), new ScheduledTask(3600, 3609, 0), new ScheduledTask(7700, 7705, 0), new ScheduledTask(5500, 5505, 0), new ScheduledTask(5200, 5203, 0), new ScheduledTask(8200, 8205, 0), new ScheduledTask(6300, 6304, 0), new ScheduledTask(6000, 6003, 0), new ScheduledTask(8700, 8705, 0), new ScheduledTask(6700, 6703, 0), new ScheduledTask(9200, 9202, 0), new ScheduledTask(9400, 9407, 0)};
        int[] expectedProcessorEndTimes = new int[]{9407, 1604};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot01_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.01_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 9600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(300, 309, 0), new ScheduledTask(1400, 1402, 1), new ScheduledTask(1200, 1206, 0), new ScheduledTask(3700, 3703, 0), new ScheduledTask(1800, 1804, 1), new ScheduledTask(1800, 1807, 0), new ScheduledTask(6200, 6207, 0), new ScheduledTask(4000, 4006, 0), new ScheduledTask(2500, 2507, 0), new ScheduledTask(4600, 4609, 0), new ScheduledTask(6900, 6905, 0), new ScheduledTask(3200, 3205, 0), new ScheduledTask(5500, 5503, 0), new ScheduledTask(7400, 7405, 0), new ScheduledTask(5800, 5804, 0), new ScheduledTask(4800, 4803, 2), new ScheduledTask(8200, 8205, 0), new ScheduledTask(7900, 7903, 0), new ScheduledTask(8700, 8702, 0), new ScheduledTask(8900, 8907, 0)};
        int[] expectedProcessorEndTimes = new int[]{8907, 1804, 4803};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot01_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.01_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(300, 309, 0), new ScheduledTask(1400, 1402, 1), new ScheduledTask(1200, 1206, 0), new ScheduledTask(3700, 3703, 0), new ScheduledTask(1640, 1644, 1), new ScheduledTask(1800, 1807, 0), new ScheduledTask(6200, 6207, 0), new ScheduledTask(4000, 4006, 0), new ScheduledTask(2500, 2507, 0), new ScheduledTask(4600, 4609, 0), new ScheduledTask(6900, 6905, 0), new ScheduledTask(3200, 3205, 0), new ScheduledTask(5500, 5503, 0), new ScheduledTask(7400, 7405, 0), new ScheduledTask(5800, 5804, 0), new ScheduledTask(4800, 4803, 3), new ScheduledTask(8200, 8205, 0), new ScheduledTask(7900, 7903, 0), new ScheduledTask(8700, 8702, 0), new ScheduledTask(8900, 8907, 0)};
        int[] expectedProcessorEndTimes = new int[]{8907, 1644, 0, 4803};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 96;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 12, 0), new ScheduledTask(14, 16, 1), new ScheduledTask(12, 18, 0), new ScheduledTask(37, 40, 0), new ScheduledTask(16, 20, 1), new ScheduledTask(18, 25, 0), new ScheduledTask(62, 69, 0), new ScheduledTask(40, 46, 0), new ScheduledTask(25, 32, 0), new ScheduledTask(46, 55, 0), new ScheduledTask(69, 74, 0), new ScheduledTask(32, 37, 0), new ScheduledTask(55, 58, 0), new ScheduledTask(77, 82, 0), new ScheduledTask(58, 62, 0), new ScheduledTask(48, 51, 1), new ScheduledTask(82, 87, 0), new ScheduledTask(74, 77, 0), new ScheduledTask(87, 89, 0), new ScheduledTask(89, 96, 0)};
        int[] expectedProcessorEndTimes = new int[]{96, 51};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 96;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 12, 0), new ScheduledTask(14, 16, 1), new ScheduledTask(12, 18, 0), new ScheduledTask(37, 40, 0), new ScheduledTask(27, 31, 2), new ScheduledTask(18, 25, 0), new ScheduledTask(62, 69, 0), new ScheduledTask(40, 46, 0), new ScheduledTask(25, 32, 0), new ScheduledTask(46, 55, 0), new ScheduledTask(69, 74, 0), new ScheduledTask(32, 37, 0), new ScheduledTask(55, 58, 0), new ScheduledTask(77, 82, 0), new ScheduledTask(58, 62, 0), new ScheduledTask(48, 51, 3), new ScheduledTask(82, 87, 0), new ScheduledTask(74, 77, 0), new ScheduledTask(87, 89, 0), new ScheduledTask(89, 96, 0)};
        int[] expectedProcessorEndTimes = new int[]{96, 16, 31, 51};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 96;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 12, 0), new ScheduledTask(14, 16, 1), new ScheduledTask(12, 18, 0), new ScheduledTask(37, 40, 0), new ScheduledTask(16, 20, 1), new ScheduledTask(18, 25, 0), new ScheduledTask(62, 69, 0), new ScheduledTask(40, 46, 0), new ScheduledTask(25, 32, 0), new ScheduledTask(46, 55, 0), new ScheduledTask(69, 74, 0), new ScheduledTask(32, 37, 0), new ScheduledTask(55, 58, 0), new ScheduledTask(77, 82, 0), new ScheduledTask(58, 62, 0), new ScheduledTask(48, 51, 2), new ScheduledTask(82, 87, 0), new ScheduledTask(74, 77, 0), new ScheduledTask(87, 89, 0), new ScheduledTask(89, 96, 0)};
        int[] expectedProcessorEndTimes = new int[]{96, 20, 51};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot01_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.01_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 12200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(1900, 1908, 0), new ScheduledTask(900, 910, 0), new ScheduledTask(3600, 3602, 0), new ScheduledTask(2700, 2709, 0), new ScheduledTask(6000, 6003, 0), new ScheduledTask(3800, 3810, 0), new ScheduledTask(6300, 6308, 0), new ScheduledTask(3200, 3205, 1), new ScheduledTask(4800, 4803, 0), new ScheduledTask(8700, 8703, 0), new ScheduledTask(7100, 7109, 0), new ScheduledTask(9000, 9003, 0), new ScheduledTask(5100, 5109, 0), new ScheduledTask(8000, 8007, 0), new ScheduledTask(9300, 9306, 0), new ScheduledTask(7300, 7303, 2), new ScheduledTask(9900, 9906, 0), new ScheduledTask(11000, 11009, 0), new ScheduledTask(10500, 10505, 0), new ScheduledTask(11900, 11903, 0)};
        int[] expectedProcessorEndTimes = new int[]{11903, 3205, 7303};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot01_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.01_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 12000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(900, 908, 0), new ScheduledTask(3200, 3210, 0), new ScheduledTask(1700, 1702, 0), new ScheduledTask(4700, 4709, 0), new ScheduledTask(5900, 5903, 0), new ScheduledTask(1900, 1910, 0), new ScheduledTask(6500, 6508, 0), new ScheduledTask(4200, 4205, 0), new ScheduledTask(2900, 2903, 0), new ScheduledTask(5600, 5603, 0), new ScheduledTask(7900, 7909, 0), new ScheduledTask(6200, 6203, 0), new ScheduledTask(6500, 6509, 1), new ScheduledTask(9600, 9607, 0), new ScheduledTask(7300, 7306, 0), new ScheduledTask(8300, 8303, 1), new ScheduledTask(8800, 8806, 0), new ScheduledTask(10800, 10809, 0), new ScheduledTask(10300, 10305, 0), new ScheduledTask(11700, 11703, 0)};
        int[] expectedProcessorEndTimes = new int[]{11703, 8303};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot01_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.01_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 11800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(900, 908, 0), new ScheduledTask(3200, 3210, 0), new ScheduledTask(1700, 1702, 0), new ScheduledTask(4700, 4709, 0), new ScheduledTask(5900, 5903, 0), new ScheduledTask(1900, 1910, 0), new ScheduledTask(6500, 6508, 0), new ScheduledTask(4200, 4205, 0), new ScheduledTask(2900, 2903, 0), new ScheduledTask(5600, 5603, 0), new ScheduledTask(7900, 7909, 0), new ScheduledTask(6200, 6203, 0), new ScheduledTask(6500, 6509, 1), new ScheduledTask(9400, 9407, 0), new ScheduledTask(7300, 7306, 0), new ScheduledTask(7580, 7583, 1), new ScheduledTask(8800, 8806, 0), new ScheduledTask(10600, 10609, 0), new ScheduledTask(10100, 10105, 0), new ScheduledTask(11500, 11503, 0)};
        int[] expectedProcessorEndTimes = new int[]{11503, 7583};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 118;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 17, 0), new ScheduledTask(32, 42, 0), new ScheduledTask(17, 19, 0), new ScheduledTask(47, 56, 0), new ScheduledTask(59, 62, 0), new ScheduledTask(19, 29, 0), new ScheduledTask(65, 73, 0), new ScheduledTask(42, 47, 0), new ScheduledTask(29, 32, 0), new ScheduledTask(56, 59, 0), new ScheduledTask(79, 88, 0), new ScheduledTask(62, 65, 0), new ScheduledTask(65, 74, 1), new ScheduledTask(94, 101, 0), new ScheduledTask(73, 79, 0), new ScheduledTask(74, 77, 1), new ScheduledTask(88, 94, 0), new ScheduledTask(106, 115, 0), new ScheduledTask(101, 106, 0), new ScheduledTask(115, 118, 0)};
        int[] expectedProcessorEndTimes = new int[]{118, 77};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 118;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 17, 0), new ScheduledTask(32, 42, 0), new ScheduledTask(17, 19, 0), new ScheduledTask(47, 56, 0), new ScheduledTask(59, 62, 0), new ScheduledTask(19, 29, 0), new ScheduledTask(65, 73, 0), new ScheduledTask(42, 47, 0), new ScheduledTask(29, 32, 0), new ScheduledTask(56, 59, 0), new ScheduledTask(79, 88, 0), new ScheduledTask(62, 65, 0), new ScheduledTask(65, 74, 1), new ScheduledTask(94, 101, 0), new ScheduledTask(73, 79, 0), new ScheduledTask(87, 90, 2), new ScheduledTask(88, 94, 0), new ScheduledTask(106, 115, 0), new ScheduledTask(101, 106, 0), new ScheduledTask(115, 118, 0)};
        int[] expectedProcessorEndTimes = new int[]{118, 74, 90};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 118;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 17, 0), new ScheduledTask(32, 42, 0), new ScheduledTask(17, 19, 0), new ScheduledTask(47, 56, 0), new ScheduledTask(59, 62, 0), new ScheduledTask(19, 29, 0), new ScheduledTask(65, 73, 0), new ScheduledTask(42, 47, 0), new ScheduledTask(29, 32, 0), new ScheduledTask(56, 59, 0), new ScheduledTask(79, 88, 0), new ScheduledTask(62, 65, 0), new ScheduledTask(65, 74, 1), new ScheduledTask(94, 101, 0), new ScheduledTask(73, 79, 0), new ScheduledTask(87, 90, 2), new ScheduledTask(88, 94, 0), new ScheduledTask(106, 115, 0), new ScheduledTask(101, 106, 0), new ScheduledTask(115, 118, 0)};
        int[] expectedProcessorEndTimes = new int[]{118, 74, 90};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot02_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.02_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 12500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(1000, 1009, 0), new ScheduledTask(300, 307, 0), new ScheduledTask(2400, 2408, 0), new ScheduledTask(1900, 1905, 0), new ScheduledTask(5200, 5204, 0), new ScheduledTask(3200, 3203, 0), new ScheduledTask(3500, 3506, 0), new ScheduledTask(5600, 5607, 0), new ScheduledTask(4800, 4803, 1), new ScheduledTask(8500, 8506, 0), new ScheduledTask(6300, 6310, 0), new ScheduledTask(4100, 4103, 0), new ScheduledTask(9100, 9106, 0), new ScheduledTask(9700, 9710, 0), new ScheduledTask(7300, 7307, 0), new ScheduledTask(4400, 4408, 0), new ScheduledTask(10700, 10702, 0), new ScheduledTask(8000, 8005, 0), new ScheduledTask(10900, 10906, 0), new ScheduledTask(11500, 11510, 0)};
        int[] expectedProcessorEndTimes = new int[]{11510, 4803};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot02_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.02_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 12500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(1000, 1009, 0), new ScheduledTask(300, 307, 0), new ScheduledTask(1900, 1908, 0), new ScheduledTask(4700, 4705, 0), new ScheduledTask(5200, 5204, 0), new ScheduledTask(2700, 2703, 0), new ScheduledTask(3000, 3006, 0), new ScheduledTask(5600, 5607, 0), new ScheduledTask(4800, 4803, 1), new ScheduledTask(8500, 8506, 0), new ScheduledTask(6300, 6310, 0), new ScheduledTask(3600, 3603, 0), new ScheduledTask(9100, 9106, 0), new ScheduledTask(9700, 9710, 0), new ScheduledTask(7300, 7307, 0), new ScheduledTask(3900, 3908, 0), new ScheduledTask(10700, 10702, 0), new ScheduledTask(8000, 8005, 0), new ScheduledTask(10900, 10906, 0), new ScheduledTask(11500, 11510, 0)};
        int[] expectedProcessorEndTimes = new int[]{11510, 4803};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot02_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.02_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 12460;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(1000, 1009, 0), new ScheduledTask(300, 307, 0), new ScheduledTask(2400, 2408, 0), new ScheduledTask(1900, 1905, 0), new ScheduledTask(3500, 3504, 0), new ScheduledTask(3200, 3203, 0), new ScheduledTask(4600, 4606, 0), new ScheduledTask(3900, 3907, 0), new ScheduledTask(4800, 4803, 3), new ScheduledTask(7300, 7306, 1), new ScheduledTask(5500, 5510, 0), new ScheduledTask(5200, 5203, 0), new ScheduledTask(8020, 8026, 1), new ScheduledTask(9100, 9110, 1), new ScheduledTask(6500, 6507, 0), new ScheduledTask(7200, 7208, 0), new ScheduledTask(10300, 10302, 1), new ScheduledTask(8000, 8005, 0), new ScheduledTask(10540, 10546, 1), new ScheduledTask(11260, 11270, 1)};
        int[] expectedProcessorEndTimes = new int[]{8005, 11270, 0, 4803};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 121;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(3, 10, 0), new ScheduledTask(24, 32, 0), new ScheduledTask(19, 24, 0), new ScheduledTask(35, 39, 0), new ScheduledTask(32, 35, 0), new ScheduledTask(46, 52, 0), new ScheduledTask(39, 46, 0), new ScheduledTask(48, 51, 1), new ScheduledTask(62, 68, 1), new ScheduledTask(55, 65, 0), new ScheduledTask(52, 55, 0), new ScheduledTask(68, 74, 1), new ScheduledTask(91, 101, 1), new ScheduledTask(65, 72, 0), new ScheduledTask(72, 80, 0), new ScheduledTask(101, 103, 1), new ScheduledTask(80, 85, 0), new ScheduledTask(104, 110, 1), new ScheduledTask(111, 121, 1)};
        int[] expectedProcessorEndTimes = new int[]{85, 121};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 121;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(3, 10, 0), new ScheduledTask(24, 32, 0), new ScheduledTask(19, 24, 0), new ScheduledTask(35, 39, 0), new ScheduledTask(32, 35, 0), new ScheduledTask(46, 52, 0), new ScheduledTask(39, 46, 0), new ScheduledTask(48, 51, 1), new ScheduledTask(70, 76, 2), new ScheduledTask(55, 65, 0), new ScheduledTask(52, 55, 0), new ScheduledTask(76, 82, 2), new ScheduledTask(91, 101, 2), new ScheduledTask(65, 72, 0), new ScheduledTask(72, 80, 0), new ScheduledTask(101, 103, 2), new ScheduledTask(80, 85, 0), new ScheduledTask(104, 110, 2), new ScheduledTask(111, 121, 2)};
        int[] expectedProcessorEndTimes = new int[]{85, 51, 121};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 121;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(3, 10, 0), new ScheduledTask(24, 32, 0), new ScheduledTask(19, 24, 0), new ScheduledTask(35, 39, 0), new ScheduledTask(32, 35, 0), new ScheduledTask(46, 52, 0), new ScheduledTask(39, 46, 0), new ScheduledTask(48, 51, 1), new ScheduledTask(70, 76, 2), new ScheduledTask(55, 65, 0), new ScheduledTask(52, 55, 0), new ScheduledTask(76, 82, 2), new ScheduledTask(91, 101, 2), new ScheduledTask(65, 72, 0), new ScheduledTask(72, 80, 0), new ScheduledTask(101, 103, 2), new ScheduledTask(80, 85, 0), new ScheduledTask(104, 110, 2), new ScheduledTask(111, 121, 2)};
        int[] expectedProcessorEndTimes = new int[]{85, 51, 121};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot03_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.03_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 11900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(300, 305, 0), new ScheduledTask(800, 810, 0), new ScheduledTask(1800, 1807, 0), new ScheduledTask(2500, 2507, 0), new ScheduledTask(3200, 3202, 0), new ScheduledTask(3400, 3408, 0), new ScheduledTask(4200, 4203, 0), new ScheduledTask(4500, 4505, 0), new ScheduledTask(5000, 5009, 0), new ScheduledTask(5900, 5906, 0), new ScheduledTask(6500, 6506, 0), new ScheduledTask(7100, 7102, 0), new ScheduledTask(7300, 7303, 0), new ScheduledTask(7600, 7602, 0), new ScheduledTask(7800, 7807, 0), new ScheduledTask(8500, 8508, 0), new ScheduledTask(9300, 9307, 0), new ScheduledTask(10000, 10008, 0), new ScheduledTask(10800, 10803, 0), new ScheduledTask(11100, 11108, 0)};
        int[] expectedProcessorEndTimes = new int[]{11108};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot03_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.03_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 11200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3700, 3705, 0), new ScheduledTask(300, 310, 0), new ScheduledTask(4500, 4507, 0), new ScheduledTask(1300, 1307, 0), new ScheduledTask(6100, 6102, 0), new ScheduledTask(2000, 2008, 0), new ScheduledTask(4200, 4203, 0), new ScheduledTask(6900, 6905, 0), new ScheduledTask(5200, 5209, 0), new ScheduledTask(2800, 2806, 0), new ScheduledTask(6300, 6306, 0), new ScheduledTask(7600, 7602, 0), new ScheduledTask(3400, 3403, 0), new ScheduledTask(7400, 7402, 0), new ScheduledTask(8600, 8607, 0), new ScheduledTask(7800, 7808, 0), new ScheduledTask(6400, 6407, 1), new ScheduledTask(9600, 9608, 0), new ScheduledTask(9300, 9303, 0), new ScheduledTask(10400, 10408, 0)};
        int[] expectedProcessorEndTimes = new int[]{10408, 6407};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot03_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.03_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 11000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(300, 305, 0), new ScheduledTask(1100, 1110, 0), new ScheduledTask(2100, 2107, 0), new ScheduledTask(2800, 2807, 0), new ScheduledTask(5900, 5902, 0), new ScheduledTask(3500, 3508, 0), new ScheduledTask(800, 803, 0), new ScheduledTask(6100, 6105, 0), new ScheduledTask(4900, 4909, 1), new ScheduledTask(4300, 4306, 0), new ScheduledTask(8300, 8306, 0), new ScheduledTask(6600, 6602, 0), new ScheduledTask(4900, 4903, 0), new ScheduledTask(8900, 8902, 0), new ScheduledTask(6800, 6807, 0), new ScheduledTask(9100, 9108, 0), new ScheduledTask(5200, 5207, 0), new ScheduledTask(7500, 7508, 0), new ScheduledTask(9900, 9903, 0), new ScheduledTask(10200, 10208, 0)};
        int[] expectedProcessorEndTimes = new int[]{10208, 4909};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot03_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.03_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 109;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(37, 42, 0), new ScheduledTask(3, 13, 0), new ScheduledTask(42, 49, 0), new ScheduledTask(13, 20, 0), new ScheduledTask(49, 51, 0), new ScheduledTask(20, 28, 0), new ScheduledTask(65, 68, 0), new ScheduledTask(51, 56, 0), new ScheduledTask(68, 77, 0), new ScheduledTask(28, 34, 0), new ScheduledTask(77, 83, 0), new ScheduledTask(56, 58, 0), new ScheduledTask(34, 37, 0), new ScheduledTask(83, 85, 0), new ScheduledTask(58, 65, 0), new ScheduledTask(85, 93, 0), new ScheduledTask(64, 71, 1), new ScheduledTask(79, 87, 1), new ScheduledTask(93, 96, 0), new ScheduledTask(101, 109, 0)};
        int[] expectedProcessorEndTimes = new int[]{109, 87};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot03_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.03_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 109;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(37, 42, 0), new ScheduledTask(3, 13, 0), new ScheduledTask(42, 49, 0), new ScheduledTask(13, 20, 0), new ScheduledTask(49, 51, 0), new ScheduledTask(20, 28, 0), new ScheduledTask(65, 68, 0), new ScheduledTask(51, 56, 0), new ScheduledTask(68, 77, 0), new ScheduledTask(28, 34, 0), new ScheduledTask(77, 83, 0), new ScheduledTask(56, 58, 0), new ScheduledTask(34, 37, 0), new ScheduledTask(83, 85, 0), new ScheduledTask(58, 65, 0), new ScheduledTask(85, 93, 0), new ScheduledTask(64, 71, 1), new ScheduledTask(79, 87, 1), new ScheduledTask(93, 96, 0), new ScheduledTask(101, 109, 0)};
        int[] expectedProcessorEndTimes = new int[]{109, 87};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot03_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.03_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 109;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(37, 42, 0), new ScheduledTask(3, 13, 0), new ScheduledTask(42, 49, 0), new ScheduledTask(13, 20, 0), new ScheduledTask(49, 51, 0), new ScheduledTask(20, 28, 0), new ScheduledTask(65, 68, 0), new ScheduledTask(51, 56, 0), new ScheduledTask(68, 77, 0), new ScheduledTask(28, 34, 0), new ScheduledTask(77, 83, 0), new ScheduledTask(56, 58, 0), new ScheduledTask(34, 37, 0), new ScheduledTask(83, 85, 0), new ScheduledTask(58, 65, 0), new ScheduledTask(85, 93, 0), new ScheduledTask(64, 71, 1), new ScheduledTask(79, 87, 1), new ScheduledTask(93, 96, 0), new ScheduledTask(101, 109, 0)};
        int[] expectedProcessorEndTimes = new int[]{109, 87};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot03_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.03_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 12500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(2700, 2709, 0), new ScheduledTask(400, 402, 0), new ScheduledTask(600, 606, 0), new ScheduledTask(4400, 4407, 0), new ScheduledTask(1200, 1202, 0), new ScheduledTask(3600, 3608, 0), new ScheduledTask(6100, 6103, 0), new ScheduledTask(5100, 5110, 0), new ScheduledTask(7400, 7406, 0), new ScheduledTask(1400, 1403, 0), new ScheduledTask(6400, 6410, 0), new ScheduledTask(9200, 9205, 0), new ScheduledTask(1700, 1710, 0), new ScheduledTask(8000, 8004, 0), new ScheduledTask(5200, 5202, 1), new ScheduledTask(9700, 9709, 0), new ScheduledTask(8400, 8408, 0), new ScheduledTask(11600, 11603, 0), new ScheduledTask(10600, 10610, 0), new ScheduledTask(11900, 11906, 0)};
        int[] expectedProcessorEndTimes = new int[]{11906, 5202};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot03_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.03_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 12300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(400, 409, 0), new ScheduledTask(1300, 1302, 0), new ScheduledTask(3000, 3006, 0), new ScheduledTask(2300, 2307, 0), new ScheduledTask(3900, 3902, 0), new ScheduledTask(1500, 1508, 0), new ScheduledTask(3600, 3603, 0), new ScheduledTask(6200, 6210, 0), new ScheduledTask(4100, 4106, 0), new ScheduledTask(4700, 4703, 0), new ScheduledTask(7200, 7210, 0), new ScheduledTask(8200, 8205, 0), new ScheduledTask(5000, 5010, 0), new ScheduledTask(6600, 6604, 1), new ScheduledTask(6000, 6002, 0), new ScheduledTask(9800, 9809, 0), new ScheduledTask(8700, 8708, 0), new ScheduledTask(9500, 9503, 0), new ScheduledTask(10700, 10710, 0), new ScheduledTask(11700, 11706, 0)};
        int[] expectedProcessorEndTimes = new int[]{11706, 6604};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot03_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.03_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 12260;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(400, 409, 0), new ScheduledTask(1300, 1302, 0), new ScheduledTask(2200, 2206, 0), new ScheduledTask(1500, 1507, 0), new ScheduledTask(3100, 3102, 0), new ScheduledTask(3200, 3208, 1), new ScheduledTask(2800, 2803, 0), new ScheduledTask(7260, 7270, 0), new ScheduledTask(4800, 4806, 0), new ScheduledTask(3300, 3303, 0), new ScheduledTask(8260, 8270, 0), new ScheduledTask(9260, 9265, 0), new ScheduledTask(3600, 3610, 0), new ScheduledTask(5400, 5404, 0), new ScheduledTask(4600, 4602, 0), new ScheduledTask(9760, 9769, 0), new ScheduledTask(5800, 5808, 0), new ScheduledTask(6600, 6603, 0), new ScheduledTask(10660, 10670, 0), new ScheduledTask(11660, 11666, 0)};
        int[] expectedProcessorEndTimes = new int[]{11666, 3208};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot03_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.03_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 121;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 13, 0), new ScheduledTask(13, 15, 0), new ScheduledTask(22, 28, 0), new ScheduledTask(15, 22, 0), new ScheduledTask(31, 33, 0), new ScheduledTask(32, 40, 1), new ScheduledTask(28, 31, 0), new ScheduledTask(71, 81, 0), new ScheduledTask(48, 54, 0), new ScheduledTask(33, 36, 0), new ScheduledTask(81, 91, 0), new ScheduledTask(91, 96, 0), new ScheduledTask(36, 46, 0), new ScheduledTask(54, 58, 0), new ScheduledTask(46, 48, 0), new ScheduledTask(96, 105, 0), new ScheduledTask(58, 66, 0), new ScheduledTask(66, 69, 0), new ScheduledTask(105, 115, 0), new ScheduledTask(115, 121, 0)};
        int[] expectedProcessorEndTimes = new int[]{121, 40};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot03_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.03_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 121;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 13, 0), new ScheduledTask(13, 15, 0), new ScheduledTask(22, 28, 0), new ScheduledTask(15, 22, 0), new ScheduledTask(31, 33, 0), new ScheduledTask(32, 40, 1), new ScheduledTask(28, 31, 0), new ScheduledTask(71, 81, 0), new ScheduledTask(48, 54, 0), new ScheduledTask(33, 36, 0), new ScheduledTask(81, 91, 0), new ScheduledTask(91, 96, 0), new ScheduledTask(36, 46, 0), new ScheduledTask(54, 58, 0), new ScheduledTask(46, 48, 0), new ScheduledTask(96, 105, 0), new ScheduledTask(58, 66, 0), new ScheduledTask(66, 69, 0), new ScheduledTask(105, 115, 0), new ScheduledTask(115, 121, 0)};
        int[] expectedProcessorEndTimes = new int[]{121, 40};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot03_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.03_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 121;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 13, 0), new ScheduledTask(13, 15, 0), new ScheduledTask(22, 28, 0), new ScheduledTask(15, 22, 0), new ScheduledTask(31, 33, 0), new ScheduledTask(32, 40, 1), new ScheduledTask(28, 31, 0), new ScheduledTask(71, 81, 0), new ScheduledTask(48, 54, 0), new ScheduledTask(33, 36, 0), new ScheduledTask(81, 91, 0), new ScheduledTask(91, 96, 0), new ScheduledTask(36, 46, 0), new ScheduledTask(54, 58, 0), new ScheduledTask(46, 48, 0), new ScheduledTask(96, 105, 0), new ScheduledTask(58, 66, 0), new ScheduledTask(66, 69, 0), new ScheduledTask(105, 115, 0), new ScheduledTask(115, 121, 0)};
        int[] expectedProcessorEndTimes = new int[]{121, 40};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot05_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.05_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 12400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(300, 307, 0), new ScheduledTask(1000, 1003, 0), new ScheduledTask(1300, 1310, 0), new ScheduledTask(2300, 2309, 0), new ScheduledTask(3200, 3207, 0), new ScheduledTask(3900, 3904, 0), new ScheduledTask(4300, 4302, 0), new ScheduledTask(4500, 4506, 0), new ScheduledTask(5100, 5106, 0), new ScheduledTask(5700, 5709, 0), new ScheduledTask(6600, 6603, 0), new ScheduledTask(6900, 6907, 0), new ScheduledTask(7600, 7605, 0), new ScheduledTask(8100, 8104, 0), new ScheduledTask(8500, 8510, 0), new ScheduledTask(9500, 9506, 0), new ScheduledTask(10100, 10103, 0), new ScheduledTask(10400, 10409, 0), new ScheduledTask(11300, 11306, 0), new ScheduledTask(11900, 11905, 0)};
        int[] expectedProcessorEndTimes = new int[]{11905};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot05_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.05_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 12200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(300, 307, 0), new ScheduledTask(1900, 1903, 1), new ScheduledTask(1000, 1010, 0), new ScheduledTask(2500, 2509, 1), new ScheduledTask(5700, 5707, 0), new ScheduledTask(2000, 2004, 0), new ScheduledTask(6400, 6402, 0), new ScheduledTask(8900, 8906, 0), new ScheduledTask(2400, 2406, 0), new ScheduledTask(9500, 9509, 0), new ScheduledTask(6600, 6603, 0), new ScheduledTask(3000, 3007, 0), new ScheduledTask(6900, 6905, 0), new ScheduledTask(10400, 10404, 0), new ScheduledTask(3700, 3710, 0), new ScheduledTask(7400, 7406, 0), new ScheduledTask(10800, 10803, 0), new ScheduledTask(8000, 8009, 0), new ScheduledTask(11100, 11106, 0), new ScheduledTask(11700, 11705, 0)};
        int[] expectedProcessorEndTimes = new int[]{11705, 2509};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot05_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.05_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 11960;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(300, 307, 0), new ScheduledTask(1900, 1903, 1), new ScheduledTask(1000, 1010, 0), new ScheduledTask(2260, 2269, 1), new ScheduledTask(5460, 5467, 0), new ScheduledTask(2000, 2004, 0), new ScheduledTask(6160, 6162, 0), new ScheduledTask(8660, 8666, 0), new ScheduledTask(2400, 2406, 0), new ScheduledTask(9260, 9269, 0), new ScheduledTask(6360, 6363, 0), new ScheduledTask(3000, 3007, 0), new ScheduledTask(6660, 6665, 0), new ScheduledTask(10160, 10164, 0), new ScheduledTask(3700, 3710, 0), new ScheduledTask(7160, 7166, 0), new ScheduledTask(10560, 10563, 0), new ScheduledTask(7760, 7769, 0), new ScheduledTask(10860, 10866, 0), new ScheduledTask(11460, 11465, 0)};
        int[] expectedProcessorEndTimes = new int[]{11465, 2269};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot05_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.05_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 117;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(6, 13, 0), new ScheduledTask(3, 6, 0), new ScheduledTask(20, 30, 0), new ScheduledTask(38, 47, 1), new ScheduledTask(13, 20, 0), new ScheduledTask(32, 36, 0), new ScheduledTask(30, 32, 0), new ScheduledTask(47, 53, 1), new ScheduledTask(39, 45, 0), new ScheduledTask(90, 99, 0), new ScheduledTask(36, 39, 0), new ScheduledTask(50, 57, 0), new ScheduledTask(45, 50, 0), new ScheduledTask(99, 103, 0), new ScheduledTask(63, 73, 0), new ScheduledTask(57, 63, 0), new ScheduledTask(103, 106, 0), new ScheduledTask(73, 82, 0), new ScheduledTask(106, 112, 0), new ScheduledTask(112, 117, 0)};
        int[] expectedProcessorEndTimes = new int[]{117, 53};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot05_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.05_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 117;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(6, 13, 0), new ScheduledTask(3, 6, 0), new ScheduledTask(20, 30, 0), new ScheduledTask(38, 47, 1), new ScheduledTask(13, 20, 0), new ScheduledTask(32, 36, 0), new ScheduledTask(30, 32, 0), new ScheduledTask(47, 53, 1), new ScheduledTask(39, 45, 0), new ScheduledTask(90, 99, 0), new ScheduledTask(36, 39, 0), new ScheduledTask(50, 57, 0), new ScheduledTask(45, 50, 0), new ScheduledTask(99, 103, 0), new ScheduledTask(63, 73, 0), new ScheduledTask(57, 63, 0), new ScheduledTask(103, 106, 0), new ScheduledTask(73, 82, 0), new ScheduledTask(106, 112, 0), new ScheduledTask(112, 117, 0)};
        int[] expectedProcessorEndTimes = new int[]{117, 53};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot05_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.05_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 117;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(6, 13, 0), new ScheduledTask(3, 6, 0), new ScheduledTask(20, 30, 0), new ScheduledTask(38, 47, 1), new ScheduledTask(13, 20, 0), new ScheduledTask(32, 36, 0), new ScheduledTask(30, 32, 0), new ScheduledTask(47, 53, 1), new ScheduledTask(39, 45, 0), new ScheduledTask(90, 99, 0), new ScheduledTask(36, 39, 0), new ScheduledTask(50, 57, 0), new ScheduledTask(45, 50, 0), new ScheduledTask(99, 103, 0), new ScheduledTask(63, 73, 0), new ScheduledTask(57, 63, 0), new ScheduledTask(103, 106, 0), new ScheduledTask(73, 82, 0), new ScheduledTask(106, 112, 0), new ScheduledTask(112, 117, 0)};
        int[] expectedProcessorEndTimes = new int[]{117, 53};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot08_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.08_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 11700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(800, 802, 0), new ScheduledTask(1000, 1005, 0), new ScheduledTask(1500, 1508, 0), new ScheduledTask(2300, 2303, 0), new ScheduledTask(2600, 2604, 0), new ScheduledTask(3000, 3005, 0), new ScheduledTask(3500, 3505, 0), new ScheduledTask(4000, 4006, 0), new ScheduledTask(4600, 4607, 0), new ScheduledTask(5300, 5308, 0), new ScheduledTask(6100, 6110, 0), new ScheduledTask(7100, 7102, 0), new ScheduledTask(7300, 7307, 0), new ScheduledTask(8000, 8002, 0), new ScheduledTask(8200, 8206, 0), new ScheduledTask(8800, 8807, 0), new ScheduledTask(9500, 9506, 0), new ScheduledTask(10100, 10108, 0), new ScheduledTask(10900, 10906, 0), new ScheduledTask(11500, 11502, 0)};
        int[] expectedProcessorEndTimes = new int[]{11502};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot08_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.08_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 11700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(800, 802, 0), new ScheduledTask(1000, 1005, 0), new ScheduledTask(1500, 1508, 0), new ScheduledTask(2300, 2303, 0), new ScheduledTask(2600, 2604, 0), new ScheduledTask(3000, 3005, 0), new ScheduledTask(3500, 3505, 0), new ScheduledTask(4000, 4006, 0), new ScheduledTask(4600, 4607, 0), new ScheduledTask(5300, 5308, 0), new ScheduledTask(6100, 6110, 0), new ScheduledTask(7100, 7102, 0), new ScheduledTask(7300, 7307, 0), new ScheduledTask(8000, 8002, 0), new ScheduledTask(8200, 8206, 0), new ScheduledTask(8800, 8807, 0), new ScheduledTask(9500, 9506, 0), new ScheduledTask(10100, 10108, 0), new ScheduledTask(10900, 10906, 0), new ScheduledTask(11500, 11502, 0)};
        int[] expectedProcessorEndTimes = new int[]{11502};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot08_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.08_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 11700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(800, 802, 0), new ScheduledTask(1000, 1005, 0), new ScheduledTask(1500, 1508, 0), new ScheduledTask(2300, 2303, 0), new ScheduledTask(2600, 2604, 0), new ScheduledTask(3000, 3005, 0), new ScheduledTask(3500, 3505, 0), new ScheduledTask(4000, 4006, 0), new ScheduledTask(4600, 4607, 0), new ScheduledTask(5300, 5308, 0), new ScheduledTask(6100, 6110, 0), new ScheduledTask(7100, 7102, 0), new ScheduledTask(7300, 7307, 0), new ScheduledTask(8000, 8002, 0), new ScheduledTask(8200, 8206, 0), new ScheduledTask(8800, 8807, 0), new ScheduledTask(9500, 9506, 0), new ScheduledTask(10100, 10108, 0), new ScheduledTask(10900, 10906, 0), new ScheduledTask(11500, 11502, 0)};
        int[] expectedProcessorEndTimes = new int[]{11502};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot08_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.08_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 117;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 10, 0), new ScheduledTask(10, 15, 0), new ScheduledTask(15, 23, 0), new ScheduledTask(23, 26, 0), new ScheduledTask(26, 30, 0), new ScheduledTask(30, 35, 0), new ScheduledTask(35, 40, 0), new ScheduledTask(40, 46, 0), new ScheduledTask(46, 53, 0), new ScheduledTask(53, 61, 0), new ScheduledTask(61, 71, 0), new ScheduledTask(71, 73, 0), new ScheduledTask(73, 80, 0), new ScheduledTask(80, 82, 0), new ScheduledTask(82, 88, 0), new ScheduledTask(88, 95, 0), new ScheduledTask(95, 101, 0), new ScheduledTask(101, 109, 0), new ScheduledTask(109, 115, 0), new ScheduledTask(115, 117, 0)};
        int[] expectedProcessorEndTimes = new int[]{117};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot08_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.08_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 117;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 10, 0), new ScheduledTask(10, 15, 0), new ScheduledTask(15, 23, 0), new ScheduledTask(23, 26, 0), new ScheduledTask(26, 30, 0), new ScheduledTask(30, 35, 0), new ScheduledTask(35, 40, 0), new ScheduledTask(40, 46, 0), new ScheduledTask(46, 53, 0), new ScheduledTask(53, 61, 0), new ScheduledTask(61, 71, 0), new ScheduledTask(71, 73, 0), new ScheduledTask(73, 80, 0), new ScheduledTask(80, 82, 0), new ScheduledTask(82, 88, 0), new ScheduledTask(88, 95, 0), new ScheduledTask(95, 101, 0), new ScheduledTask(101, 109, 0), new ScheduledTask(109, 115, 0), new ScheduledTask(115, 117, 0)};
        int[] expectedProcessorEndTimes = new int[]{117};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_10dot08_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_10.08_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 117;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 10, 0), new ScheduledTask(10, 15, 0), new ScheduledTask(15, 23, 0), new ScheduledTask(23, 26, 0), new ScheduledTask(26, 30, 0), new ScheduledTask(30, 35, 0), new ScheduledTask(35, 40, 0), new ScheduledTask(40, 46, 0), new ScheduledTask(46, 53, 0), new ScheduledTask(53, 61, 0), new ScheduledTask(61, 71, 0), new ScheduledTask(71, 73, 0), new ScheduledTask(73, 80, 0), new ScheduledTask(80, 82, 0), new ScheduledTask(82, 88, 0), new ScheduledTask(88, 95, 0), new ScheduledTask(95, 101, 0), new ScheduledTask(101, 109, 0), new ScheduledTask(109, 115, 0), new ScheduledTask(115, 117, 0)};
        int[] expectedProcessorEndTimes = new int[]{117};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_9dot95_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_9.95_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 105;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(6, 11, 0), new ScheduledTask(3, 6, 0), new ScheduledTask(33, 42, 0), new ScheduledTask(11, 20, 0), new ScheduledTask(30, 33, 0), new ScheduledTask(20, 23, 0), new ScheduledTask(49, 53, 0), new ScheduledTask(42, 49, 0), new ScheduledTask(58, 64, 0), new ScheduledTask(23, 30, 0), new ScheduledTask(53, 58, 0), new ScheduledTask(69, 78, 0), new ScheduledTask(64, 69, 0), new ScheduledTask(54, 62, 1), new ScheduledTask(86, 89, 0), new ScheduledTask(78, 86, 0), new ScheduledTask(74, 81, 2), new ScheduledTask(96, 99, 0), new ScheduledTask(89, 96, 0), new ScheduledTask(99, 105, 0)};
        int[] expectedProcessorEndTimes = new int[]{105, 62, 81};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_9dot95_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_9.95_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 105;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(6, 11, 0), new ScheduledTask(3, 6, 0), new ScheduledTask(30, 39, 0), new ScheduledTask(11, 20, 0), new ScheduledTask(30, 33, 1), new ScheduledTask(20, 23, 0), new ScheduledTask(39, 43, 0), new ScheduledTask(57, 64, 0), new ScheduledTask(43, 49, 0), new ScheduledTask(23, 30, 0), new ScheduledTask(64, 69, 0), new ScheduledTask(69, 78, 0), new ScheduledTask(49, 54, 0), new ScheduledTask(54, 62, 1), new ScheduledTask(86, 89, 0), new ScheduledTask(78, 86, 0), new ScheduledTask(62, 69, 1), new ScheduledTask(96, 99, 0), new ScheduledTask(89, 96, 0), new ScheduledTask(99, 105, 0)};
        int[] expectedProcessorEndTimes = new int[]{105, 69};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_9dot95_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_9.95_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 105;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(6, 11, 0), new ScheduledTask(3, 6, 0), new ScheduledTask(33, 42, 0), new ScheduledTask(11, 20, 0), new ScheduledTask(30, 33, 0), new ScheduledTask(20, 23, 0), new ScheduledTask(49, 53, 0), new ScheduledTask(42, 49, 0), new ScheduledTask(58, 64, 0), new ScheduledTask(23, 30, 0), new ScheduledTask(53, 58, 0), new ScheduledTask(69, 78, 0), new ScheduledTask(64, 69, 0), new ScheduledTask(54, 62, 1), new ScheduledTask(86, 89, 0), new ScheduledTask(78, 86, 0), new ScheduledTask(74, 81, 2), new ScheduledTask(96, 99, 0), new ScheduledTask(89, 96, 0), new ScheduledTask(99, 105, 0)};
        int[] expectedProcessorEndTimes = new int[]{105, 62, 81};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_9dot95_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_9.95_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 105;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(6, 11, 0), new ScheduledTask(3, 6, 0), new ScheduledTask(30, 39, 0), new ScheduledTask(11, 20, 0), new ScheduledTask(30, 33, 1), new ScheduledTask(20, 23, 0), new ScheduledTask(39, 43, 0), new ScheduledTask(57, 64, 0), new ScheduledTask(43, 49, 0), new ScheduledTask(23, 30, 0), new ScheduledTask(64, 69, 0), new ScheduledTask(69, 78, 0), new ScheduledTask(49, 54, 0), new ScheduledTask(54, 62, 2), new ScheduledTask(86, 89, 0), new ScheduledTask(78, 86, 0), new ScheduledTask(74, 81, 3), new ScheduledTask(96, 99, 0), new ScheduledTask(89, 96, 0), new ScheduledTask(99, 105, 0)};
        int[] expectedProcessorEndTimes = new int[]{105, 33, 62, 81};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_9dot97_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_9.97_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 12000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(700, 709, 0), new ScheduledTask(1600, 1609, 0), new ScheduledTask(2500, 2502, 0), new ScheduledTask(2700, 2706, 0), new ScheduledTask(3300, 3309, 0), new ScheduledTask(4200, 4205, 0), new ScheduledTask(4700, 4704, 0), new ScheduledTask(5100, 5102, 0), new ScheduledTask(5300, 5310, 0), new ScheduledTask(6300, 6304, 0), new ScheduledTask(6700, 6705, 0), new ScheduledTask(7200, 7208, 0), new ScheduledTask(8000, 8010, 0), new ScheduledTask(9000, 9005, 0), new ScheduledTask(9500, 9506, 0), new ScheduledTask(10100, 10102, 0), new ScheduledTask(10300, 10303, 0), new ScheduledTask(10600, 10604, 0), new ScheduledTask(11000, 11002, 0), new ScheduledTask(11200, 11208, 0)};
        int[] expectedProcessorEndTimes = new int[]{11208};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_9dot97_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_9.97_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 12000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(700, 709, 0), new ScheduledTask(1600, 1609, 0), new ScheduledTask(2500, 2502, 0), new ScheduledTask(2700, 2706, 0), new ScheduledTask(3300, 3309, 0), new ScheduledTask(4200, 4205, 0), new ScheduledTask(4700, 4704, 0), new ScheduledTask(5100, 5102, 0), new ScheduledTask(5300, 5310, 0), new ScheduledTask(6300, 6304, 0), new ScheduledTask(6700, 6705, 0), new ScheduledTask(7200, 7208, 0), new ScheduledTask(8000, 8010, 0), new ScheduledTask(9000, 9005, 0), new ScheduledTask(9500, 9506, 0), new ScheduledTask(10100, 10102, 0), new ScheduledTask(10300, 10303, 0), new ScheduledTask(10600, 10604, 0), new ScheduledTask(11000, 11002, 0), new ScheduledTask(11200, 11208, 0)};
        int[] expectedProcessorEndTimes = new int[]{11208};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_9dot97_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_9.97_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 11700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(2700, 2709, 0), new ScheduledTask(700, 709, 0), new ScheduledTask(3600, 3602, 0), new ScheduledTask(4300, 4306, 0), new ScheduledTask(1600, 1609, 0), new ScheduledTask(3800, 3805, 0), new ScheduledTask(4900, 4904, 0), new ScheduledTask(2500, 2502, 0), new ScheduledTask(6300, 6310, 1), new ScheduledTask(4000, 4004, 1), new ScheduledTask(5300, 5305, 0), new ScheduledTask(8580, 8588, 1), new ScheduledTask(4480, 4490, 1), new ScheduledTask(7500, 7505, 1), new ScheduledTask(9540, 9546, 1), new ScheduledTask(8100, 8102, 1), new ScheduledTask(5680, 5683, 1), new ScheduledTask(10260, 10264, 1), new ScheduledTask(8340, 8342, 1), new ScheduledTask(10740, 10748, 1)};
        int[] expectedProcessorEndTimes = new int[]{5305, 10748};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_9dot97_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_9.97_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 111;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(27, 36, 0), new ScheduledTask(7, 16, 0), new ScheduledTask(36, 38, 0), new ScheduledTask(43, 49, 0), new ScheduledTask(16, 25, 0), new ScheduledTask(38, 43, 0), new ScheduledTask(49, 53, 0), new ScheduledTask(25, 27, 0), new ScheduledTask(63, 73, 1), new ScheduledTask(40, 44, 1), new ScheduledTask(53, 58, 0), new ScheduledTask(85, 93, 1), new ScheduledTask(44, 54, 1), new ScheduledTask(73, 78, 1), new ScheduledTask(93, 99, 1), new ScheduledTask(78, 80, 1), new ScheduledTask(54, 57, 1), new ScheduledTask(99, 103, 1), new ScheduledTask(80, 82, 1), new ScheduledTask(103, 111, 1)};
        int[] expectedProcessorEndTimes = new int[]{58, 111};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_9dot97_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_9.97_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 111;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(27, 36, 0), new ScheduledTask(7, 16, 0), new ScheduledTask(36, 38, 0), new ScheduledTask(43, 49, 0), new ScheduledTask(16, 25, 0), new ScheduledTask(38, 43, 0), new ScheduledTask(49, 53, 0), new ScheduledTask(25, 27, 0), new ScheduledTask(63, 73, 1), new ScheduledTask(40, 44, 1), new ScheduledTask(53, 58, 0), new ScheduledTask(85, 93, 1), new ScheduledTask(44, 54, 1), new ScheduledTask(73, 78, 1), new ScheduledTask(93, 99, 1), new ScheduledTask(78, 80, 1), new ScheduledTask(54, 57, 1), new ScheduledTask(99, 103, 1), new ScheduledTask(80, 82, 1), new ScheduledTask(103, 111, 1)};
        int[] expectedProcessorEndTimes = new int[]{58, 111};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_9dot97_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_9.97_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 111;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(27, 36, 0), new ScheduledTask(7, 16, 0), new ScheduledTask(36, 38, 0), new ScheduledTask(43, 49, 0), new ScheduledTask(16, 25, 0), new ScheduledTask(38, 43, 0), new ScheduledTask(49, 53, 0), new ScheduledTask(25, 27, 0), new ScheduledTask(63, 73, 1), new ScheduledTask(40, 44, 1), new ScheduledTask(53, 58, 0), new ScheduledTask(85, 93, 1), new ScheduledTask(44, 54, 1), new ScheduledTask(73, 78, 1), new ScheduledTask(93, 99, 1), new ScheduledTask(78, 80, 1), new ScheduledTask(54, 57, 1), new ScheduledTask(99, 103, 1), new ScheduledTask(80, 82, 1), new ScheduledTask(103, 111, 1)};
        int[] expectedProcessorEndTimes = new int[]{58, 111};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_9dot97_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_9.97_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 13100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(500, 504, 0), new ScheduledTask(900, 906, 0), new ScheduledTask(1500, 1510, 0), new ScheduledTask(2500, 2508, 0), new ScheduledTask(3300, 3306, 0), new ScheduledTask(3900, 3910, 0), new ScheduledTask(4900, 4903, 0), new ScheduledTask(5200, 5203, 0), new ScheduledTask(5500, 5503, 0), new ScheduledTask(5800, 5806, 0), new ScheduledTask(6400, 6407, 0), new ScheduledTask(7100, 7109, 0), new ScheduledTask(8000, 8005, 0), new ScheduledTask(8500, 8504, 0), new ScheduledTask(8900, 8907, 0), new ScheduledTask(9600, 9609, 0), new ScheduledTask(10500, 10509, 0), new ScheduledTask(11400, 11407, 0), new ScheduledTask(12100, 12104, 0), new ScheduledTask(12500, 12506, 0)};
        int[] expectedProcessorEndTimes = new int[]{12506};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_9dot97_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_9.97_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 13100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(500, 504, 0), new ScheduledTask(900, 906, 0), new ScheduledTask(1500, 1510, 0), new ScheduledTask(2500, 2508, 0), new ScheduledTask(3300, 3306, 0), new ScheduledTask(3900, 3910, 0), new ScheduledTask(4900, 4903, 0), new ScheduledTask(5200, 5203, 0), new ScheduledTask(5500, 5503, 0), new ScheduledTask(5800, 5806, 0), new ScheduledTask(6400, 6407, 0), new ScheduledTask(7100, 7109, 0), new ScheduledTask(8000, 8005, 0), new ScheduledTask(8500, 8504, 0), new ScheduledTask(8900, 8907, 0), new ScheduledTask(9600, 9609, 0), new ScheduledTask(10500, 10509, 0), new ScheduledTask(11400, 11407, 0), new ScheduledTask(12100, 12104, 0), new ScheduledTask(12500, 12506, 0)};
        int[] expectedProcessorEndTimes = new int[]{12506};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_9dot97_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_9.97_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 13100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(500, 504, 0), new ScheduledTask(900, 906, 0), new ScheduledTask(1500, 1510, 0), new ScheduledTask(2500, 2508, 0), new ScheduledTask(3300, 3306, 0), new ScheduledTask(3900, 3910, 0), new ScheduledTask(4900, 4903, 0), new ScheduledTask(5200, 5203, 0), new ScheduledTask(5500, 5503, 0), new ScheduledTask(5800, 5806, 0), new ScheduledTask(6400, 6407, 0), new ScheduledTask(7100, 7109, 0), new ScheduledTask(8000, 8005, 0), new ScheduledTask(8500, 8504, 0), new ScheduledTask(8900, 8907, 0), new ScheduledTask(9600, 9609, 0), new ScheduledTask(10500, 10509, 0), new ScheduledTask(11400, 11407, 0), new ScheduledTask(12100, 12104, 0), new ScheduledTask(12500, 12506, 0)};
        int[] expectedProcessorEndTimes = new int[]{12506};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_9dot97_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_9.97_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 130;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 9, 0), new ScheduledTask(25, 31, 0), new ScheduledTask(9, 19, 0), new ScheduledTask(31, 39, 0), new ScheduledTask(19, 25, 0), new ScheduledTask(39, 49, 0), new ScheduledTask(51, 54, 1), new ScheduledTask(57, 60, 1), new ScheduledTask(54, 57, 1), new ScheduledTask(49, 55, 0), new ScheduledTask(69, 76, 1), new ScheduledTask(60, 69, 1), new ScheduledTask(99, 104, 1), new ScheduledTask(83, 87, 1), new ScheduledTask(76, 83, 1), new ScheduledTask(104, 113, 1), new ScheduledTask(87, 96, 1), new ScheduledTask(113, 120, 1), new ScheduledTask(120, 124, 1), new ScheduledTask(124, 130, 1)};
        int[] expectedProcessorEndTimes = new int[]{55, 130};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_9dot97_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_9.97_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 130;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 9, 0), new ScheduledTask(25, 31, 0), new ScheduledTask(9, 19, 0), new ScheduledTask(31, 39, 0), new ScheduledTask(19, 25, 0), new ScheduledTask(39, 49, 0), new ScheduledTask(51, 54, 1), new ScheduledTask(57, 60, 1), new ScheduledTask(54, 57, 1), new ScheduledTask(49, 55, 0), new ScheduledTask(69, 76, 1), new ScheduledTask(60, 69, 1), new ScheduledTask(99, 104, 1), new ScheduledTask(83, 87, 1), new ScheduledTask(76, 83, 1), new ScheduledTask(104, 113, 1), new ScheduledTask(87, 96, 1), new ScheduledTask(113, 120, 1), new ScheduledTask(120, 124, 1), new ScheduledTask(124, 130, 1)};
        int[] expectedProcessorEndTimes = new int[]{55, 130};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_21_CCR_9dot97_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Pipeline_Nodes_21_CCR_9.97_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 130;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 9, 0), new ScheduledTask(25, 31, 0), new ScheduledTask(9, 19, 0), new ScheduledTask(31, 39, 0), new ScheduledTask(19, 25, 0), new ScheduledTask(39, 49, 0), new ScheduledTask(51, 54, 1), new ScheduledTask(57, 60, 1), new ScheduledTask(54, 57, 1), new ScheduledTask(49, 55, 0), new ScheduledTask(69, 76, 1), new ScheduledTask(60, 69, 1), new ScheduledTask(99, 104, 1), new ScheduledTask(83, 87, 1), new ScheduledTask(76, 83, 1), new ScheduledTask(104, 113, 1), new ScheduledTask(87, 96, 1), new ScheduledTask(113, 120, 1), new ScheduledTask(120, 124, 1), new ScheduledTask(124, 130, 1)};
        int[] expectedProcessorEndTimes = new int[]{55, 130};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_0dot29_CCR_2dot00_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_0.29_CCR_2.00_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 15;
        int expectedScheduleEndTime = 24;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(4, 10, 0), new ScheduledTask(8, 12, 1), new ScheduledTask(0, 4, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 9, 3), new ScheduledTask(15, 24, 0), new ScheduledTask(0, 8, 4), new ScheduledTask(0, 7, 5), new ScheduledTask(0, 7, 6), new ScheduledTask(0, 7, 7), new ScheduledTask(15, 22, 1), new ScheduledTask(0, 6, 8), new ScheduledTask(0, 5, 9), new ScheduledTask(10, 15, 0), new ScheduledTask(0, 5, 10), new ScheduledTask(0, 4, 11), new ScheduledTask(12, 15, 1), new ScheduledTask(0, 2, 12), new ScheduledTask(0, 2, 13), new ScheduledTask(0, 2, 14)};
        int[] expectedProcessorEndTimes = new int[]{24, 22, 10, 9, 8, 7, 7, 7, 6, 5, 5, 4, 2, 2, 2};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_0dot29_CCR_2dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_0.29_CCR_2.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 60;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(4, 8, 1), new ScheduledTask(6, 14, 0), new ScheduledTask(8, 18, 1), new ScheduledTask(14, 23, 0), new ScheduledTask(23, 32, 0), new ScheduledTask(18, 26, 1), new ScheduledTask(26, 33, 1), new ScheduledTask(32, 39, 0), new ScheduledTask(33, 40, 1), new ScheduledTask(40, 47, 1), new ScheduledTask(39, 45, 0), new ScheduledTask(45, 50, 0), new ScheduledTask(50, 55, 0), new ScheduledTask(47, 52, 1), new ScheduledTask(52, 56, 1), new ScheduledTask(55, 58, 0), new ScheduledTask(56, 58, 1), new ScheduledTask(58, 60, 0), new ScheduledTask(58, 60, 1)};
        int[] expectedProcessorEndTimes = new int[]{60, 60};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_0dot29_CCR_2dot00_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_0.29_CCR_2.00_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 30;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(10, 16, 0), new ScheduledTask(19, 23, 1), new ScheduledTask(6, 10, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 9, 3), new ScheduledTask(21, 30, 0), new ScheduledTask(9, 17, 3), new ScheduledTask(12, 19, 1), new ScheduledTask(10, 17, 2), new ScheduledTask(17, 24, 3), new ScheduledTask(23, 30, 1), new ScheduledTask(24, 30, 3), new ScheduledTask(17, 22, 2), new ScheduledTask(16, 21, 0), new ScheduledTask(22, 27, 2), new ScheduledTask(8, 12, 1), new ScheduledTask(27, 30, 2), new ScheduledTask(4, 6, 0), new ScheduledTask(2, 4, 0), new ScheduledTask(0, 2, 0)};
        int[] expectedProcessorEndTimes = new int[]{30, 30, 30, 30};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_0dot29_CCR_2dot00_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_0.29_CCR_2.00_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 24;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(4, 10, 0), new ScheduledTask(8, 12, 1), new ScheduledTask(0, 4, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 9, 3), new ScheduledTask(15, 24, 0), new ScheduledTask(0, 8, 4), new ScheduledTask(0, 7, 5), new ScheduledTask(0, 7, 6), new ScheduledTask(0, 7, 7), new ScheduledTask(15, 22, 1), new ScheduledTask(7, 13, 7), new ScheduledTask(13, 18, 7), new ScheduledTask(10, 15, 0), new ScheduledTask(18, 23, 7), new ScheduledTask(7, 11, 6), new ScheduledTask(12, 15, 1), new ScheduledTask(11, 13, 6), new ScheduledTask(13, 15, 6), new ScheduledTask(15, 17, 6)};
        int[] expectedProcessorEndTimes = new int[]{24, 22, 10, 9, 8, 7, 17, 23};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_0dot52_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_0.52_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 13;
        int expectedScheduleEndTime = 95;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 28, 0), new ScheduledTask(28, 63, 0), new ScheduledTask(0, 28, 1), new ScheduledTask(0, 18, 2), new ScheduledTask(0, 18, 3), new ScheduledTask(0, 14, 4), new ScheduledTask(18, 50, 2), new ScheduledTask(63, 95, 0), new ScheduledTask(0, 25, 5), new ScheduledTask(0, 25, 6), new ScheduledTask(28, 53, 1), new ScheduledTask(0, 21, 7), new ScheduledTask(18, 39, 3), new ScheduledTask(0, 18, 8), new ScheduledTask(14, 32, 4), new ScheduledTask(0, 18, 9), new ScheduledTask(0, 18, 10), new ScheduledTask(0, 14, 11), new ScheduledTask(34, 48, 4), new ScheduledTask(0, 11, 12), new ScheduledTask(66, 77, 1)};
        int[] expectedProcessorEndTimes = new int[]{95, 77, 50, 39, 48, 25, 25, 21, 18, 18, 18, 14, 11};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_0dot52_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_0.52_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 222;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(108, 136, 0), new ScheduledTask(141, 176, 1), new ScheduledTask(113, 141, 1), new ScheduledTask(136, 154, 0), new ScheduledTask(74, 92, 1), new ScheduledTask(60, 74, 1), new ScheduledTask(190, 222, 1), new ScheduledTask(190, 222, 0), new ScheduledTask(65, 90, 0), new ScheduledTask(35, 60, 1), new ScheduledTask(154, 179, 0), new ScheduledTask(14, 35, 1), new ScheduledTask(92, 113, 1), new ScheduledTask(47, 65, 0), new ScheduledTask(90, 108, 0), new ScheduledTask(29, 47, 0), new ScheduledTask(11, 29, 0), new ScheduledTask(0, 14, 1), new ScheduledTask(176, 190, 1), new ScheduledTask(0, 11, 0), new ScheduledTask(179, 190, 0)};
        int[] expectedProcessorEndTimes = new int[]{222, 222};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_0dot52_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_0.52_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 112;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 28, 0), new ScheduledTask(28, 63, 0), new ScheduledTask(14, 42, 1), new ScheduledTask(36, 54, 2), new ScheduledTask(0, 18, 3), new ScheduledTask(63, 77, 0), new ScheduledTask(78, 110, 1), new ScheduledTask(79, 111, 2), new ScheduledTask(42, 67, 1), new ScheduledTask(18, 43, 3), new ScheduledTask(54, 79, 2), new ScheduledTask(43, 64, 3), new ScheduledTask(91, 112, 0), new ScheduledTask(18, 36, 2), new ScheduledTask(93, 111, 3), new ScheduledTask(0, 18, 2), new ScheduledTask(64, 82, 3), new ScheduledTask(0, 14, 1), new ScheduledTask(77, 91, 0), new ScheduledTask(82, 93, 3), new ScheduledTask(67, 78, 1)};
        int[] expectedProcessorEndTimes = new int[]{112, 110, 111, 111};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_0dot52_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_0.52_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 95;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 28, 0), new ScheduledTask(28, 63, 0), new ScheduledTask(0, 28, 1), new ScheduledTask(0, 18, 2), new ScheduledTask(0, 18, 3), new ScheduledTask(0, 14, 4), new ScheduledTask(18, 50, 2), new ScheduledTask(63, 95, 0), new ScheduledTask(0, 25, 5), new ScheduledTask(0, 25, 6), new ScheduledTask(28, 53, 1), new ScheduledTask(0, 21, 7), new ScheduledTask(18, 39, 3), new ScheduledTask(14, 32, 4), new ScheduledTask(21, 39, 7), new ScheduledTask(25, 43, 5), new ScheduledTask(25, 43, 6), new ScheduledTask(32, 46, 4), new ScheduledTask(39, 53, 3), new ScheduledTask(39, 50, 7), new ScheduledTask(66, 77, 1)};
        int[] expectedProcessorEndTimes = new int[]{95, 77, 50, 53, 46, 43, 43, 50};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_0dot52_CCR_0dot98_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_0.52_CCR_0.98_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 13;
        int expectedScheduleEndTime = 34;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 12, 0), new ScheduledTask(12, 20, 0), new ScheduledTask(16, 19, 1), new ScheduledTask(0, 8, 2), new ScheduledTask(0, 3, 3), new ScheduledTask(0, 7, 4), new ScheduledTask(18, 28, 2), new ScheduledTask(0, 10, 5), new ScheduledTask(20, 30, 0), new ScheduledTask(0, 9, 6), new ScheduledTask(0, 8, 7), new ScheduledTask(0, 8, 8), new ScheduledTask(26, 34, 1), new ScheduledTask(0, 6, 9), new ScheduledTask(0, 6, 10), new ScheduledTask(0, 5, 11), new ScheduledTask(0, 3, 12), new ScheduledTask(20, 23, 3), new ScheduledTask(22, 24, 4), new ScheduledTask(15, 17, 5)};
        int[] expectedProcessorEndTimes = new int[]{30, 34, 28, 23, 24, 17, 9, 8, 8, 6, 6, 5, 3};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_0dot52_CCR_0dot98_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_0.52_CCR_0.98_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(20, 26, 0), new ScheduledTask(26, 32, 0), new ScheduledTask(32, 40, 0), new ScheduledTask(45, 48, 1), new ScheduledTask(50, 58, 0), new ScheduledTask(42, 45, 1), new ScheduledTask(35, 42, 1), new ScheduledTask(40, 50, 0), new ScheduledTask(25, 35, 1), new ScheduledTask(56, 66, 1), new ScheduledTask(16, 25, 1), new ScheduledTask(8, 16, 1), new ScheduledTask(0, 8, 1), new ScheduledTask(48, 56, 1), new ScheduledTask(14, 20, 0), new ScheduledTask(8, 14, 0), new ScheduledTask(3, 8, 0), new ScheduledTask(0, 3, 0), new ScheduledTask(62, 65, 0), new ScheduledTask(60, 62, 0), new ScheduledTask(58, 60, 0)};
        int[] expectedProcessorEndTimes = new int[]{65, 66};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_0dot52_CCR_0dot98_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_0.52_CCR_0.98_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 34;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 12, 0), new ScheduledTask(12, 20, 0), new ScheduledTask(23, 26, 1), new ScheduledTask(8, 16, 1), new ScheduledTask(0, 3, 2), new ScheduledTask(0, 7, 3), new ScheduledTask(23, 33, 3), new ScheduledTask(7, 17, 3), new ScheduledTask(20, 30, 0), new ScheduledTask(3, 12, 2), new ScheduledTask(12, 20, 2), new ScheduledTask(20, 28, 2), new ScheduledTask(26, 34, 1), new ScheduledTask(28, 34, 2), new ScheduledTask(17, 23, 3), new ScheduledTask(3, 8, 1), new ScheduledTask(0, 3, 1), new ScheduledTask(20, 23, 1), new ScheduledTask(18, 20, 1), new ScheduledTask(16, 18, 1)};
        int[] expectedProcessorEndTimes = new int[]{30, 34, 34, 33};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_0dot52_CCR_0dot98_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_0.52_CCR_0.98_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 34;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 12, 0), new ScheduledTask(12, 20, 0), new ScheduledTask(16, 19, 1), new ScheduledTask(0, 8, 2), new ScheduledTask(0, 3, 3), new ScheduledTask(0, 7, 4), new ScheduledTask(18, 28, 2), new ScheduledTask(0, 10, 5), new ScheduledTask(20, 30, 0), new ScheduledTask(0, 9, 6), new ScheduledTask(0, 8, 7), new ScheduledTask(3, 11, 3), new ScheduledTask(26, 34, 1), new ScheduledTask(7, 13, 4), new ScheduledTask(8, 14, 7), new ScheduledTask(9, 14, 6), new ScheduledTask(10, 13, 5), new ScheduledTask(20, 23, 3), new ScheduledTask(22, 24, 4), new ScheduledTask(15, 17, 5)};
        int[] expectedProcessorEndTimes = new int[]{30, 34, 28, 23, 24, 17, 14, 14};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_0dot52_CCR_10dot01_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_0.52_CCR_10.01_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 10;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(54, 64, 0), new ScheduledTask(46, 54, 0), new ScheduledTask(26, 32, 0), new ScheduledTask(12, 19, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(0, 3, 0), new ScheduledTask(64, 72, 0), new ScheduledTask(3, 12, 0), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 9, 3), new ScheduledTask(37, 46, 0), new ScheduledTask(0, 8, 4), new ScheduledTask(0, 8, 5), new ScheduledTask(72, 80, 0), new ScheduledTask(0, 7, 6), new ScheduledTask(19, 26, 0), new ScheduledTask(0, 6, 7), new ScheduledTask(7, 12, 1), new ScheduledTask(32, 37, 0), new ScheduledTask(0, 4, 8), new ScheduledTask(0, 3, 9)};
        int[] expectedProcessorEndTimes = new int[]{80, 12, 10, 9, 8, 8, 7, 6, 4, 3};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_0dot52_CCR_10dot01_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_0.52_CCR_10.01_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(54, 64, 0), new ScheduledTask(46, 54, 0), new ScheduledTask(26, 32, 0), new ScheduledTask(12, 19, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(0, 3, 0), new ScheduledTask(64, 72, 0), new ScheduledTask(3, 12, 0), new ScheduledTask(7, 17, 1), new ScheduledTask(17, 26, 1), new ScheduledTask(37, 46, 0), new ScheduledTask(26, 34, 1), new ScheduledTask(34, 42, 1), new ScheduledTask(72, 80, 0), new ScheduledTask(42, 49, 1), new ScheduledTask(19, 26, 0), new ScheduledTask(49, 55, 1), new ScheduledTask(62, 67, 1), new ScheduledTask(32, 37, 0), new ScheduledTask(55, 59, 1), new ScheduledTask(59, 62, 1)};
        int[] expectedProcessorEndTimes = new int[]{80, 67};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_0dot52_CCR_10dot01_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_0.52_CCR_10.01_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(54, 64, 0), new ScheduledTask(46, 54, 0), new ScheduledTask(26, 32, 0), new ScheduledTask(12, 19, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(0, 3, 0), new ScheduledTask(64, 72, 0), new ScheduledTask(3, 12, 0), new ScheduledTask(7, 17, 1), new ScheduledTask(0, 9, 2), new ScheduledTask(37, 46, 0), new ScheduledTask(0, 8, 3), new ScheduledTask(8, 16, 3), new ScheduledTask(72, 80, 0), new ScheduledTask(16, 23, 3), new ScheduledTask(19, 26, 0), new ScheduledTask(23, 29, 3), new ScheduledTask(17, 22, 1), new ScheduledTask(32, 37, 0), new ScheduledTask(29, 33, 3), new ScheduledTask(33, 36, 3)};
        int[] expectedProcessorEndTimes = new int[]{80, 22, 9, 36};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_0dot52_CCR_10dot01_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_0.52_CCR_10.01_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(54, 64, 0), new ScheduledTask(46, 54, 0), new ScheduledTask(26, 32, 0), new ScheduledTask(12, 19, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(0, 3, 0), new ScheduledTask(64, 72, 0), new ScheduledTask(3, 12, 0), new ScheduledTask(7, 17, 1), new ScheduledTask(0, 9, 2), new ScheduledTask(37, 46, 0), new ScheduledTask(0, 8, 3), new ScheduledTask(0, 8, 4), new ScheduledTask(72, 80, 0), new ScheduledTask(0, 7, 5), new ScheduledTask(19, 26, 0), new ScheduledTask(0, 6, 6), new ScheduledTask(17, 22, 1), new ScheduledTask(32, 37, 0), new ScheduledTask(0, 4, 7), new ScheduledTask(4, 7, 7)};
        int[] expectedProcessorEndTimes = new int[]{80, 22, 9, 8, 8, 7, 6, 7};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_0dot86_CCR_0dot98_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_0.86_CCR_0.98_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 10;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 8, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(0, 7, 2), new ScheduledTask(5, 13, 1), new ScheduledTask(8, 17, 0), new ScheduledTask(7, 16, 2), new ScheduledTask(0, 4, 3), new ScheduledTask(0, 7, 4), new ScheduledTask(4, 12, 3), new ScheduledTask(13, 23, 1), new ScheduledTask(0, 10, 5), new ScheduledTask(14, 22, 3), new ScheduledTask(24, 32, 0), new ScheduledTask(0, 5, 6), new ScheduledTask(20, 24, 2), new ScheduledTask(0, 4, 7), new ScheduledTask(0, 3, 8), new ScheduledTask(0, 3, 9), new ScheduledTask(16, 19, 4), new ScheduledTask(18, 20, 5)};
        int[] expectedProcessorEndTimes = new int[]{32, 23, 24, 22, 19, 20, 5, 4, 3, 3};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_0dot86_CCR_0dot98_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_0.86_CCR_0.98_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(15, 18, 0), new ScheduledTask(18, 23, 0), new ScheduledTask(28, 33, 1), new ScheduledTask(21, 28, 1), new ScheduledTask(41, 49, 1), new ScheduledTask(23, 32, 0), new ScheduledTask(32, 41, 0), new ScheduledTask(17, 21, 1), new ScheduledTask(10, 17, 1), new ScheduledTask(33, 41, 1), new ScheduledTask(53, 63, 1), new ScheduledTask(0, 10, 1), new ScheduledTask(42, 50, 0), new ScheduledTask(55, 63, 0), new ScheduledTask(10, 15, 0), new ScheduledTask(49, 53, 1), new ScheduledTask(6, 10, 0), new ScheduledTask(3, 6, 0), new ScheduledTask(0, 3, 0), new ScheduledTask(52, 55, 0), new ScheduledTask(50, 52, 0)};
        int[] expectedProcessorEndTimes = new int[]{63, 63};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_0dot86_CCR_0dot98_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_0.86_CCR_0.98_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(4, 7, 0), new ScheduledTask(7, 12, 0), new ScheduledTask(6, 11, 1), new ScheduledTask(0, 7, 2), new ScheduledTask(11, 19, 1), new ScheduledTask(12, 21, 0), new ScheduledTask(7, 16, 2), new ScheduledTask(0, 4, 0), new ScheduledTask(23, 30, 3), new ScheduledTask(15, 23, 3), new ScheduledTask(22, 32, 1), new ScheduledTask(5, 15, 3), new ScheduledTask(20, 28, 2), new ScheduledTask(24, 32, 0), new ScheduledTask(0, 5, 3), new ScheduledTask(28, 32, 2), new ScheduledTask(16, 20, 2), new ScheduledTask(3, 6, 1), new ScheduledTask(0, 3, 1), new ScheduledTask(19, 22, 1), new ScheduledTask(30, 32, 3)};
        int[] expectedProcessorEndTimes = new int[]{32, 32, 32, 32};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_0dot86_CCR_0dot98_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_0.86_CCR_0.98_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 8, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(0, 7, 2), new ScheduledTask(5, 13, 1), new ScheduledTask(8, 17, 0), new ScheduledTask(7, 16, 2), new ScheduledTask(0, 4, 3), new ScheduledTask(0, 7, 4), new ScheduledTask(4, 12, 3), new ScheduledTask(13, 23, 1), new ScheduledTask(0, 10, 5), new ScheduledTask(14, 22, 3), new ScheduledTask(24, 32, 0), new ScheduledTask(0, 5, 6), new ScheduledTask(20, 24, 2), new ScheduledTask(0, 4, 7), new ScheduledTask(4, 7, 7), new ScheduledTask(5, 8, 6), new ScheduledTask(16, 19, 4), new ScheduledTask(18, 20, 5)};
        int[] expectedProcessorEndTimes = new int[]{32, 23, 24, 22, 19, 20, 8, 7};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_0dot95_CCR_10dot00_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_0.95_CCR_10.00_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(16, 18, 0), new ScheduledTask(18, 24, 0), new ScheduledTask(3, 5, 1), new ScheduledTask(10, 16, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(36, 46, 0), new ScheduledTask(40, 47, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(5, 10, 0), new ScheduledTask(36, 38, 3), new ScheduledTask(12, 16, 1), new ScheduledTask(0, 5, 0), new ScheduledTask(46, 50, 0), new ScheduledTask(26, 36, 0), new ScheduledTask(47, 57, 1), new ScheduledTask(50, 59, 0), new ScheduledTask(5, 12, 1), new ScheduledTask(38, 45, 3), new ScheduledTask(0, 4, 4), new ScheduledTask(36, 40, 1), new ScheduledTask(24, 26, 0)};
        int[] expectedProcessorEndTimes = new int[]{59, 57, 10, 45, 4};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_0dot95_CCR_10dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_0.95_CCR_10.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 60;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(16, 18, 0), new ScheduledTask(18, 24, 0), new ScheduledTask(17, 19, 1), new ScheduledTask(0, 6, 0), new ScheduledTask(14, 17, 1), new ScheduledTask(36, 46, 0), new ScheduledTask(30, 37, 1), new ScheduledTask(0, 10, 1), new ScheduledTask(11, 16, 0), new ScheduledTask(51, 53, 1), new ScheduledTask(26, 30, 1), new ScheduledTask(6, 11, 0), new ScheduledTask(46, 50, 0), new ScheduledTask(26, 36, 0), new ScheduledTask(41, 51, 1), new ScheduledTask(50, 59, 0), new ScheduledTask(19, 26, 1), new ScheduledTask(53, 60, 1), new ScheduledTask(10, 14, 1), new ScheduledTask(37, 41, 1), new ScheduledTask(24, 26, 0)};
        int[] expectedProcessorEndTimes = new int[]{59, 60};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_0dot95_CCR_10dot00_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_0.95_CCR_10.00_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(16, 18, 0), new ScheduledTask(18, 24, 0), new ScheduledTask(3, 5, 1), new ScheduledTask(10, 16, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(36, 46, 0), new ScheduledTask(40, 47, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(5, 10, 0), new ScheduledTask(36, 38, 3), new ScheduledTask(12, 16, 1), new ScheduledTask(0, 5, 0), new ScheduledTask(46, 50, 0), new ScheduledTask(26, 36, 0), new ScheduledTask(47, 57, 1), new ScheduledTask(50, 59, 0), new ScheduledTask(5, 12, 1), new ScheduledTask(42, 49, 3), new ScheduledTask(38, 42, 3), new ScheduledTask(36, 40, 1), new ScheduledTask(24, 26, 0)};
        int[] expectedProcessorEndTimes = new int[]{59, 57, 10, 49};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_0dot95_CCR_10dot00_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_0.95_CCR_10.00_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(10, 12, 0), new ScheduledTask(12, 18, 0), new ScheduledTask(9, 11, 1), new ScheduledTask(3, 9, 1), new ScheduledTask(0, 3, 1), new ScheduledTask(36, 46, 0), new ScheduledTask(34, 41, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(5, 10, 0), new ScheduledTask(30, 32, 3), new ScheduledTask(18, 22, 1), new ScheduledTask(0, 5, 0), new ScheduledTask(46, 50, 0), new ScheduledTask(20, 30, 0), new ScheduledTask(41, 51, 1), new ScheduledTask(50, 59, 0), new ScheduledTask(11, 18, 1), new ScheduledTask(32, 39, 3), new ScheduledTask(0, 4, 4), new ScheduledTask(30, 34, 1), new ScheduledTask(18, 20, 0)};
        int[] expectedProcessorEndTimes = new int[]{59, 51, 10, 39, 4};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot00_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.00_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 9;
        int expectedScheduleEndTime = 264;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 84, 0), new ScheduledTask(0, 60, 1), new ScheduledTask(0, 120, 2), new ScheduledTask(0, 24, 3), new ScheduledTask(0, 60, 4), new ScheduledTask(0, 36, 5), new ScheduledTask(84, 120, 0), new ScheduledTask(24, 48, 3), new ScheduledTask(120, 204, 0), new ScheduledTask(0, 48, 6), new ScheduledTask(120, 192, 2), new ScheduledTask(92, 140, 1), new ScheduledTask(130, 226, 3), new ScheduledTask(60, 156, 4), new ScheduledTask(48, 108, 6), new ScheduledTask(0, 84, 7), new ScheduledTask(204, 264, 0), new ScheduledTask(140, 164, 1), new ScheduledTask(126, 150, 5), new ScheduledTask(0, 24, 8), new ScheduledTask(192, 216, 2)};
        int[] expectedProcessorEndTimes = new int[]{264, 164, 216, 226, 156, 150, 108, 84, 24};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot00_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.00_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 84, 0), new ScheduledTask(0, 60, 1), new ScheduledTask(60, 180, 1), new ScheduledTask(84, 108, 0), new ScheduledTask(108, 168, 0), new ScheduledTask(168, 204, 0), new ScheduledTask(180, 216, 1), new ScheduledTask(204, 228, 0), new ScheduledTask(228, 312, 0), new ScheduledTask(216, 264, 1), new ScheduledTask(264, 336, 1), new ScheduledTask(312, 360, 0), new ScheduledTask(336, 432, 1), new ScheduledTask(360, 456, 0), new ScheduledTask(432, 492, 1), new ScheduledTask(456, 540, 0), new ScheduledTask(492, 552, 1), new ScheduledTask(540, 564, 0), new ScheduledTask(552, 576, 1), new ScheduledTask(564, 588, 0), new ScheduledTask(576, 600, 1)};
        int[] expectedProcessorEndTimes = new int[]{588, 600};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot00_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.00_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 84, 0), new ScheduledTask(0, 60, 1), new ScheduledTask(36, 156, 2), new ScheduledTask(48, 72, 3), new ScheduledTask(60, 120, 1), new ScheduledTask(0, 36, 2), new ScheduledTask(96, 132, 3), new ScheduledTask(72, 96, 3), new ScheduledTask(132, 216, 3), new ScheduledTask(0, 48, 3), new ScheduledTask(156, 228, 2), new ScheduledTask(120, 168, 1), new ScheduledTask(168, 264, 1), new ScheduledTask(144, 240, 0), new ScheduledTask(84, 144, 0), new ScheduledTask(216, 300, 3), new ScheduledTask(240, 300, 0), new ScheduledTask(228, 252, 2), new ScheduledTask(276, 300, 2), new ScheduledTask(252, 276, 2), new ScheduledTask(264, 288, 1)};
        int[] expectedProcessorEndTimes = new int[]{300, 288, 300, 300};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot00_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.00_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 264;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 84, 0), new ScheduledTask(0, 60, 1), new ScheduledTask(0, 120, 2), new ScheduledTask(0, 24, 3), new ScheduledTask(0, 60, 4), new ScheduledTask(0, 36, 5), new ScheduledTask(84, 120, 0), new ScheduledTask(24, 48, 3), new ScheduledTask(120, 204, 0), new ScheduledTask(0, 48, 6), new ScheduledTask(120, 192, 2), new ScheduledTask(92, 140, 1), new ScheduledTask(130, 226, 3), new ScheduledTask(60, 156, 4), new ScheduledTask(48, 108, 6), new ScheduledTask(0, 84, 7), new ScheduledTask(204, 264, 0), new ScheduledTask(140, 164, 1), new ScheduledTask(126, 150, 5), new ScheduledTask(84, 108, 7), new ScheduledTask(192, 216, 2)};
        int[] expectedProcessorEndTimes = new int[]{264, 164, 216, 226, 156, 150, 108, 108};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot29_CCR_1dot95_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.29_CCR_1.95_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(21, 25, 0), new ScheduledTask(7, 9, 0), new ScheduledTask(3, 13, 1), new ScheduledTask(9, 18, 0), new ScheduledTask(33, 41, 1), new ScheduledTask(13, 22, 1), new ScheduledTask(22, 25, 1), new ScheduledTask(0, 3, 1), new ScheduledTask(25, 33, 1), new ScheduledTask(41, 49, 1), new ScheduledTask(27, 31, 0), new ScheduledTask(38, 45, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(31, 38, 0), new ScheduledTask(49, 56, 1), new ScheduledTask(52, 56, 0), new ScheduledTask(49, 52, 0), new ScheduledTask(18, 21, 0), new ScheduledTask(47, 49, 0), new ScheduledTask(45, 47, 0), new ScheduledTask(25, 27, 0)};
        int[] expectedProcessorEndTimes = new int[]{56, 56};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot29_CCR_1dot95_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.29_CCR_1.95_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 36;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 9, 3), new ScheduledTask(10, 18, 2), new ScheduledTask(2, 11, 1), new ScheduledTask(13, 16, 0), new ScheduledTask(11, 14, 1), new ScheduledTask(9, 17, 3), new ScheduledTask(18, 26, 2), new ScheduledTask(24, 28, 3), new ScheduledTask(22, 29, 0), new ScheduledTask(17, 24, 3), new ScheduledTask(28, 35, 3), new ScheduledTask(29, 36, 0), new ScheduledTask(32, 36, 2), new ScheduledTask(29, 32, 2), new ScheduledTask(26, 29, 2), new ScheduledTask(30, 32, 1), new ScheduledTask(24, 26, 1), new ScheduledTask(22, 24, 1)};
        int[] expectedProcessorEndTimes = new int[]{36, 32, 36, 35};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot33_CCR_10dot01_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.33_CCR_10.01_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(800, 808, 0), new ScheduledTask(0, 8, 0), new ScheduledTask(1600, 1602, 0), new ScheduledTask(5900, 5905, 0), new ScheduledTask(3700, 3710, 0), new ScheduledTask(1800, 1807, 0), new ScheduledTask(7000, 7005, 0), new ScheduledTask(4700, 4704, 0), new ScheduledTask(3300, 3304, 0), new ScheduledTask(8400, 8404, 0), new ScheduledTask(2500, 2508, 0), new ScheduledTask(9700, 9710, 0), new ScheduledTask(7500, 7509, 0), new ScheduledTask(8800, 8809, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(5100, 5108, 0), new ScheduledTask(6400, 6406, 0), new ScheduledTask(6300, 6305, 2), new ScheduledTask(7900, 7905, 1), new ScheduledTask(8200, 8204, 3), new ScheduledTask(9300, 9302, 2)};
        int[] expectedProcessorEndTimes = new int[]{9710, 7905, 9302, 8204};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot33_CCR_10dot01_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.33_CCR_10.01_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1300, 1308, 0), new ScheduledTask(500, 508, 0), new ScheduledTask(2500, 2502, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(2700, 2707, 0), new ScheduledTask(4600, 4605, 0), new ScheduledTask(2000, 2004, 1), new ScheduledTask(2100, 2104, 0), new ScheduledTask(6000, 6004, 0), new ScheduledTask(3400, 3408, 0), new ScheduledTask(7300, 7310, 0), new ScheduledTask(5100, 5109, 0), new ScheduledTask(6400, 6409, 0), new ScheduledTask(0, 8, 2), new ScheduledTask(6200, 6208, 1), new ScheduledTask(4700, 4706, 3), new ScheduledTask(6800, 6805, 3), new ScheduledTask(7000, 7005, 2), new ScheduledTask(4200, 4204, 0), new ScheduledTask(7800, 7802, 3)};
        int[] expectedProcessorEndTimes = new int[]{7310, 6208, 7005, 7802};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot33_CCR_10dot01_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.33_CCR_10.01_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1300, 1308, 0), new ScheduledTask(500, 508, 0), new ScheduledTask(3000, 3002, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(0, 10, 3), new ScheduledTask(3200, 3207, 0), new ScheduledTask(2500, 2505, 0), new ScheduledTask(6200, 6204, 1), new ScheduledTask(2100, 2104, 0), new ScheduledTask(6000, 6004, 0), new ScheduledTask(3900, 3908, 0), new ScheduledTask(7300, 7310, 0), new ScheduledTask(5100, 5109, 0), new ScheduledTask(6400, 6409, 0), new ScheduledTask(2000, 2008, 3), new ScheduledTask(6700, 6708, 1), new ScheduledTask(4700, 4706, 3), new ScheduledTask(6800, 6805, 3), new ScheduledTask(7660, 7665, 1), new ScheduledTask(4700, 4704, 0), new ScheduledTask(7800, 7802, 3)};
        int[] expectedProcessorEndTimes = new int[]{7310, 7665, 0, 7802};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot33_CCR_10dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.33_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 83;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(13, 21, 0), new ScheduledTask(5, 13, 0), new ScheduledTask(25, 27, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(8, 18, 1), new ScheduledTask(27, 34, 0), new ScheduledTask(46, 51, 0), new ScheduledTask(53, 57, 1), new ScheduledTask(21, 25, 0), new ScheduledTask(60, 64, 0), new ScheduledTask(34, 42, 0), new ScheduledTask(73, 83, 0), new ScheduledTask(51, 60, 0), new ScheduledTask(64, 73, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(62, 70, 1), new ScheduledTask(47, 53, 1), new ScheduledTask(77, 82, 1), new ScheduledTask(70, 75, 1), new ScheduledTask(42, 46, 0), new ScheduledTask(75, 77, 1)};
        int[] expectedProcessorEndTimes = new int[]{83, 82};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot33_CCR_10dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.33_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(13, 21, 0), new ScheduledTask(0, 8, 0), new ScheduledTask(21, 23, 0), new ScheduledTask(8, 13, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(23, 30, 0), new ScheduledTask(48, 53, 0), new ScheduledTask(52, 56, 2), new ScheduledTask(30, 34, 0), new ScheduledTask(53, 57, 0), new ScheduledTask(36, 44, 0), new ScheduledTask(72, 82, 3), new ScheduledTask(66, 75, 0), new ScheduledTask(57, 66, 0), new ScheduledTask(0, 8, 3), new ScheduledTask(69, 77, 2), new ScheduledTask(55, 61, 3), new ScheduledTask(63, 68, 3), new ScheduledTask(77, 82, 2), new ScheduledTask(44, 48, 0), new ScheduledTask(34, 36, 0)};
        int[] expectedProcessorEndTimes = new int[]{75, 10, 82, 82};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot33_CCR_10dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.33_CCR_10.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(13, 21, 0), new ScheduledTask(5, 13, 0), new ScheduledTask(21, 23, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(23, 30, 0), new ScheduledTask(48, 53, 0), new ScheduledTask(52, 56, 2), new ScheduledTask(30, 34, 0), new ScheduledTask(53, 57, 0), new ScheduledTask(36, 44, 0), new ScheduledTask(72, 82, 3), new ScheduledTask(66, 75, 0), new ScheduledTask(57, 66, 0), new ScheduledTask(0, 8, 4), new ScheduledTask(69, 77, 2), new ScheduledTask(73, 79, 5), new ScheduledTask(68, 73, 5), new ScheduledTask(77, 82, 2), new ScheduledTask(44, 48, 0), new ScheduledTask(34, 36, 0)};
        int[] expectedProcessorEndTimes = new int[]{75, 10, 82, 82, 8, 79};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot52_CCR_10dot00_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.52_CCR_10.00_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 1), new ScheduledTask(1000, 1006, 0), new ScheduledTask(700, 703, 0), new ScheduledTask(2600, 2606, 0), new ScheduledTask(5700, 5706, 0), new ScheduledTask(3200, 3202, 0), new ScheduledTask(4200, 4210, 0), new ScheduledTask(6300, 6303, 0), new ScheduledTask(0, 4, 0), new ScheduledTask(1600, 1604, 0), new ScheduledTask(6600, 6609, 0), new ScheduledTask(1800, 1806, 1), new ScheduledTask(3400, 3408, 0), new ScheduledTask(400, 403, 0), new ScheduledTask(2000, 2006, 0), new ScheduledTask(7500, 7502, 0), new ScheduledTask(7700, 7709, 0), new ScheduledTask(5400, 5406, 1), new ScheduledTask(5200, 5205, 0), new ScheduledTask(4200, 4203, 2), new ScheduledTask(4600, 4603, 3)};
        int[] expectedProcessorEndTimes = new int[]{7709, 5406, 4203, 4603};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot52_CCR_10dot00_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.52_CCR_10.00_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 6800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 1), new ScheduledTask(300, 306, 0), new ScheduledTask(0, 3, 0), new ScheduledTask(900, 906, 0), new ScheduledTask(3800, 3806, 0), new ScheduledTask(1500, 1502, 0), new ScheduledTask(1700, 1710, 0), new ScheduledTask(4400, 4403, 0), new ScheduledTask(0, 4, 2), new ScheduledTask(2000, 2004, 3), new ScheduledTask(4700, 4709, 0), new ScheduledTask(4200, 4206, 3), new ScheduledTask(4100, 4108, 2), new ScheduledTask(1400, 1403, 2), new ScheduledTask(3000, 3006, 3), new ScheduledTask(5600, 5602, 0), new ScheduledTask(5800, 5809, 0), new ScheduledTask(5400, 5406, 3), new ScheduledTask(5800, 5805, 2), new ScheduledTask(3500, 3503, 2), new ScheduledTask(800, 803, 2)};
        int[] expectedProcessorEndTimes = new int[]{5809, 3, 5805, 5406};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot52_CCR_10dot00_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.52_CCR_10.00_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 6200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1500, 1503, 0), new ScheduledTask(300, 306, 0), new ScheduledTask(0, 3, 0), new ScheduledTask(900, 906, 0), new ScheduledTask(3000, 3006, 0), new ScheduledTask(1800, 1802, 0), new ScheduledTask(2000, 2010, 0), new ScheduledTask(3600, 3603, 0), new ScheduledTask(0, 4, 3), new ScheduledTask(2000, 2004, 2), new ScheduledTask(3900, 3909, 0), new ScheduledTask(4400, 4406, 2), new ScheduledTask(4000, 4008, 1), new ScheduledTask(2900, 2903, 1), new ScheduledTask(3000, 3006, 2), new ScheduledTask(4800, 4802, 0), new ScheduledTask(5000, 5009, 0), new ScheduledTask(5300, 5306, 2), new ScheduledTask(5600, 5605, 1), new ScheduledTask(3500, 3503, 3), new ScheduledTask(800, 803, 3)};
        int[] expectedProcessorEndTimes = new int[]{5009, 5605, 5306, 3503};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot52_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.52_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(6, 9, 0), new ScheduledTask(0, 6, 0), new ScheduledTask(9, 12, 0), new ScheduledTask(12, 18, 0), new ScheduledTask(33, 39, 0), new ScheduledTask(18, 20, 0), new ScheduledTask(20, 30, 0), new ScheduledTask(39, 42, 0), new ScheduledTask(21, 25, 1), new ScheduledTask(17, 21, 1), new ScheduledTask(42, 51, 0), new ScheduledTask(37, 43, 1), new ScheduledTask(49, 57, 1), new ScheduledTask(34, 37, 1), new ScheduledTask(28, 34, 1), new ScheduledTask(51, 53, 0), new ScheduledTask(53, 62, 0), new ScheduledTask(43, 49, 1), new ScheduledTask(57, 62, 1), new ScheduledTask(30, 33, 0), new ScheduledTask(25, 28, 1)};
        int[] expectedProcessorEndTimes = new int[]{62, 62};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot52_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.52_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(17, 20, 0), new ScheduledTask(3, 9, 0), new ScheduledTask(0, 3, 0), new ScheduledTask(9, 15, 0), new ScheduledTask(30, 36, 0), new ScheduledTask(15, 17, 0), new ScheduledTask(20, 30, 0), new ScheduledTask(36, 39, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(20, 24, 2), new ScheduledTask(39, 48, 0), new ScheduledTask(46, 52, 2), new ScheduledTask(41, 49, 3), new ScheduledTask(38, 41, 3), new ScheduledTask(30, 36, 2), new ScheduledTask(48, 50, 0), new ScheduledTask(50, 59, 0), new ScheduledTask(52, 58, 2), new ScheduledTask(56, 61, 3), new ScheduledTask(35, 38, 3), new ScheduledTask(49, 52, 3)};
        int[] expectedProcessorEndTimes = new int[]{59, 4, 58, 61};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot52_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.52_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(17, 20, 0), new ScheduledTask(3, 9, 0), new ScheduledTask(0, 3, 0), new ScheduledTask(9, 15, 0), new ScheduledTask(30, 36, 0), new ScheduledTask(15, 17, 0), new ScheduledTask(20, 30, 0), new ScheduledTask(36, 39, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(20, 24, 2), new ScheduledTask(39, 48, 0), new ScheduledTask(46, 52, 2), new ScheduledTask(40, 48, 3), new ScheduledTask(25, 28, 3), new ScheduledTask(30, 36, 2), new ScheduledTask(48, 50, 0), new ScheduledTask(50, 59, 0), new ScheduledTask(52, 58, 2), new ScheduledTask(56, 61, 3), new ScheduledTask(35, 38, 4), new ScheduledTask(46, 49, 5)};
        int[] expectedProcessorEndTimes = new int[]{59, 4, 58, 61, 38, 49};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot57_CCR_0dot10_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.57_CCR_0.10_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 129500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(5100, 5219, 0), new ScheduledTask(52800, 52868, 0), new ScheduledTask(28900, 29071, 0), new ScheduledTask(0, 51, 1), new ScheduledTask(59600, 59737, 0), new ScheduledTask(0, 51, 0), new ScheduledTask(46000, 46068, 0), new ScheduledTask(0, 102, 2), new ScheduledTask(20400, 20451, 3), new ScheduledTask(53100, 53151, 3), new ScheduledTask(17000, 17119, 0), new ScheduledTask(61200, 61234, 2), new ScheduledTask(73300, 73419, 0), new ScheduledTask(85200, 85285, 0), new ScheduledTask(0, 34, 3), new ScheduledTask(30600, 30737, 1), new ScheduledTask(93700, 93819, 0), new ScheduledTask(83700, 83734, 3), new ScheduledTask(105600, 105754, 0), new ScheduledTask(121000, 121085, 0), new ScheduledTask(81600, 81668, 2)};
        int[] expectedProcessorEndTimes = new int[]{121085, 30737, 81668, 83734};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot57_CCR_0dot10_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.57_CCR_0.10_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 79000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 119, 1), new ScheduledTask(3400, 3468, 0), new ScheduledTask(27800, 27971, 0), new ScheduledTask(0, 51, 2), new ScheduledTask(10400, 10537, 0), new ScheduledTask(0, 51, 3), new ScheduledTask(10200, 10268, 3), new ScheduledTask(23800, 23902, 3), new ScheduledTask(23800, 23851, 1), new ScheduledTask(44900, 44951, 0), new ScheduledTask(10200, 10319, 2), new ScheduledTask(34800, 34834, 2), new ScheduledTask(34000, 34119, 1), new ScheduledTask(50000, 50085, 0), new ScheduledTask(0, 34, 0), new ScheduledTask(41600, 41737, 2), new ScheduledTask(58600, 58719, 0), new ScheduledTask(24400, 24434, 0), new ScheduledTask(44200, 44354, 3), new ScheduledTask(70500, 70585, 0), new ScheduledTask(57800, 57868, 1)};
        int[] expectedProcessorEndTimes = new int[]{70585, 57868, 41737, 44354};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot57_CCR_0dot10_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.57_CCR_0.10_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 66380;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 119, 1), new ScheduledTask(6800, 6868, 0), new ScheduledTask(14580, 14751, 0), new ScheduledTask(0, 51, 2), new ScheduledTask(14300, 14437, 1), new ScheduledTask(0, 51, 3), new ScheduledTask(0, 68, 0), new ScheduledTask(7650, 7752, 2), new ScheduledTask(22950, 23001, 2), new ScheduledTask(31680, 31731, 0), new ScheduledTask(10200, 10319, 3), new ScheduledTask(30600, 30634, 2), new ScheduledTask(30800, 30919, 1), new ScheduledTask(36780, 36865, 0), new ScheduledTask(34000, 34034, 3), new ScheduledTask(35700, 35837, 2), new ScheduledTask(45880, 45999, 0), new ScheduledTask(40800, 40834, 3), new ScheduledTask(47900, 48054, 1), new ScheduledTask(57780, 57865, 0), new ScheduledTask(47600, 47668, 3)};
        int[] expectedProcessorEndTimes = new int[]{57865, 48054, 35837, 47668};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot57_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.57_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 935;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(204, 323, 0), new ScheduledTask(153, 221, 1), new ScheduledTask(409, 580, 1), new ScheduledTask(153, 204, 0), new ScheduledTask(221, 358, 1), new ScheduledTask(102, 153, 1), new ScheduledTask(357, 425, 0), new ScheduledTask(0, 102, 1), new ScheduledTask(358, 409, 1), new ScheduledTask(580, 631, 1), new ScheduledTask(34, 153, 0), new ScheduledTask(612, 646, 0), new ScheduledTask(493, 612, 0), new ScheduledTask(646, 731, 0), new ScheduledTask(0, 34, 0), new ScheduledTask(631, 768, 1), new ScheduledTask(731, 850, 0), new ScheduledTask(323, 357, 0), new ScheduledTask(768, 922, 1), new ScheduledTask(850, 935, 0), new ScheduledTask(425, 493, 0)};
        int[] expectedProcessorEndTimes = new int[]{935, 922};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot57_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.57_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 630;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 119, 0), new ScheduledTask(0, 68, 1), new ScheduledTask(119, 290, 0), new ScheduledTask(0, 51, 2), new ScheduledTask(68, 205, 1), new ScheduledTask(0, 51, 3), new ScheduledTask(51, 119, 2), new ScheduledTask(51, 153, 3), new ScheduledTask(122, 173, 2), new ScheduledTask(290, 341, 0), new ScheduledTask(153, 272, 3), new ScheduledTask(173, 207, 2), new ScheduledTask(205, 324, 1), new ScheduledTask(341, 426, 0), new ScheduledTask(207, 241, 2), new ScheduledTask(272, 409, 3), new ScheduledTask(426, 545, 0), new ScheduledTask(241, 275, 2), new ScheduledTask(275, 429, 2), new ScheduledTask(545, 630, 0), new ScheduledTask(324, 392, 1)};
        int[] expectedProcessorEndTimes = new int[]{630, 392, 429, 409};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot57_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.57_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 630;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 119, 0), new ScheduledTask(0, 68, 1), new ScheduledTask(119, 290, 0), new ScheduledTask(0, 51, 2), new ScheduledTask(68, 205, 1), new ScheduledTask(0, 51, 3), new ScheduledTask(0, 68, 4), new ScheduledTask(0, 102, 5), new ScheduledTask(122, 173, 2), new ScheduledTask(290, 341, 0), new ScheduledTask(51, 170, 3), new ScheduledTask(173, 207, 2), new ScheduledTask(205, 324, 1), new ScheduledTask(341, 426, 0), new ScheduledTask(68, 102, 4), new ScheduledTask(170, 307, 3), new ScheduledTask(426, 545, 0), new ScheduledTask(125, 159, 4), new ScheduledTask(207, 361, 2), new ScheduledTask(545, 630, 0), new ScheduledTask(178, 246, 4)};
        int[] expectedProcessorEndTimes = new int[]{630, 324, 361, 307, 246, 102};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot62_CCR_9dot96_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.62_CCR_9.96_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1100, 1105, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(1600, 1602, 0), new ScheduledTask(0, 8, 0), new ScheduledTask(1800, 1803, 0), new ScheduledTask(7500, 7504, 0), new ScheduledTask(7000, 7005, 0), new ScheduledTask(800, 803, 0), new ScheduledTask(5400, 5406, 0), new ScheduledTask(7900, 7904, 0), new ScheduledTask(3600, 3608, 0), new ScheduledTask(2500, 2503, 0), new ScheduledTask(8300, 8303, 0), new ScheduledTask(2100, 2104, 0), new ScheduledTask(6000, 6002, 0), new ScheduledTask(4400, 4410, 0), new ScheduledTask(4000, 4009, 2), new ScheduledTask(2800, 2808, 0), new ScheduledTask(6400, 6404, 3), new ScheduledTask(9000, 9004, 0), new ScheduledTask(8600, 8604, 0)};
        int[] expectedProcessorEndTimes = new int[]{9004, 4, 4009, 6404};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot62_CCR_9dot96_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.62_CCR_9.96_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 6600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 1), new ScheduledTask(4600, 4604, 0), new ScheduledTask(1000, 1002, 1), new ScheduledTask(0, 8, 0), new ScheduledTask(2000, 2003, 1), new ScheduledTask(3800, 3804, 0), new ScheduledTask(5000, 5005, 0), new ScheduledTask(800, 803, 0), new ScheduledTask(2600, 2606, 1), new ScheduledTask(4200, 4204, 0), new ScheduledTask(0, 8, 2), new ScheduledTask(1400, 1403, 1), new ScheduledTask(5500, 5503, 0), new ScheduledTask(1100, 1104, 0), new ScheduledTask(3800, 3802, 1), new ScheduledTask(4300, 4310, 2), new ScheduledTask(4400, 4409, 3), new ScheduledTask(5000, 5008, 1), new ScheduledTask(4200, 4204, 1), new ScheduledTask(5800, 5804, 0), new ScheduledTask(6200, 6204, 0)};
        int[] expectedProcessorEndTimes = new int[]{6204, 5008, 4310, 4409};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot62_CCR_9dot96_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.62_CCR_9.96_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 5660;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 1), new ScheduledTask(1500, 1504, 0), new ScheduledTask(600, 602, 1), new ScheduledTask(0, 8, 0), new ScheduledTask(1680, 1683, 1), new ScheduledTask(3400, 3404, 0), new ScheduledTask(1900, 1905, 0), new ScheduledTask(800, 803, 0), new ScheduledTask(2500, 2506, 1), new ScheduledTask(3800, 3804, 0), new ScheduledTask(0, 8, 3), new ScheduledTask(840, 843, 1), new ScheduledTask(4200, 4203, 0), new ScheduledTask(1100, 1104, 0), new ScheduledTask(3220, 3222, 1), new ScheduledTask(3500, 3510, 3), new ScheduledTask(4000, 4009, 2), new ScheduledTask(3460, 3468, 1), new ScheduledTask(1200, 1204, 1), new ScheduledTask(4500, 4504, 0), new ScheduledTask(5260, 5264, 0)};
        int[] expectedProcessorEndTimes = new int[]{5264, 3468, 4009, 3510};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot62_CCR_9dot96_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.62_CCR_9.96_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(23, 27, 1), new ScheduledTask(13, 15, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(22, 25, 0), new ScheduledTask(5, 9, 0), new ScheduledTask(27, 32, 1), new ScheduledTask(8, 11, 1), new ScheduledTask(25, 31, 0), new ScheduledTask(9, 13, 0), new ScheduledTask(15, 23, 1), new ScheduledTask(15, 18, 0), new ScheduledTask(32, 35, 1), new ScheduledTask(11, 15, 1), new ScheduledTask(31, 33, 0), new ScheduledTask(41, 51, 1), new ScheduledTask(41, 50, 0), new ScheduledTask(33, 41, 0), new ScheduledTask(18, 22, 0), new ScheduledTask(36, 40, 1), new ScheduledTask(51, 55, 1)};
        int[] expectedProcessorEndTimes = new int[]{50, 55};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot62_CCR_9dot96_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.62_CCR_9.96_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(15, 19, 1), new ScheduledTask(13, 15, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(22, 25, 0), new ScheduledTask(5, 9, 0), new ScheduledTask(19, 24, 1), new ScheduledTask(8, 11, 1), new ScheduledTask(25, 31, 0), new ScheduledTask(9, 13, 0), new ScheduledTask(0, 8, 2), new ScheduledTask(19, 22, 0), new ScheduledTask(31, 34, 1), new ScheduledTask(11, 15, 1), new ScheduledTask(31, 33, 0), new ScheduledTask(45, 55, 2), new ScheduledTask(43, 52, 3), new ScheduledTask(33, 41, 0), new ScheduledTask(15, 19, 0), new ScheduledTask(36, 40, 1), new ScheduledTask(51, 55, 1)};
        int[] expectedProcessorEndTimes = new int[]{41, 55, 55, 52};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot62_CCR_9dot96_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.62_CCR_9.96_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(13, 15, 0), new ScheduledTask(0, 8, 2), new ScheduledTask(22, 25, 0), new ScheduledTask(5, 9, 0), new ScheduledTask(26, 31, 1), new ScheduledTask(8, 11, 2), new ScheduledTask(25, 31, 0), new ScheduledTask(9, 13, 0), new ScheduledTask(0, 8, 3), new ScheduledTask(19, 22, 0), new ScheduledTask(31, 34, 1), new ScheduledTask(11, 15, 2), new ScheduledTask(31, 33, 0), new ScheduledTask(45, 55, 3), new ScheduledTask(43, 52, 4), new ScheduledTask(33, 41, 0), new ScheduledTask(15, 19, 0), new ScheduledTask(40, 44, 1), new ScheduledTask(51, 55, 1)};
        int[] expectedProcessorEndTimes = new int[]{41, 55, 15, 55, 52};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot76_CCR_0dot10_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.76_CCR_0.10_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 150600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(48400, 48579, 0), new ScheduledTask(0, 125, 1), new ScheduledTask(0, 161, 0), new ScheduledTask(32200, 32272, 0), new ScheduledTask(80700, 80754, 0), new ScheduledTask(0, 36, 2), new ScheduledTask(16100, 16261, 0), new ScheduledTask(86100, 86154, 0), new ScheduledTask(21600, 21743, 2), new ScheduledTask(121900, 122025, 0), new ScheduledTask(0, 107, 3), new ScheduledTask(73500, 73572, 0), new ScheduledTask(75000, 75090, 1), new ScheduledTask(104000, 104179, 0), new ScheduledTask(91500, 91625, 0), new ScheduledTask(134400, 134507, 0), new ScheduledTask(39400, 39490, 0), new ScheduledTask(66300, 66372, 0), new ScheduledTask(64200, 64343, 3), new ScheduledTask(107400, 107472, 2), new ScheduledTask(145100, 145154, 0)};
        int[] expectedProcessorEndTimes = new int[]{145154, 75090, 107472, 64343};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot76_CCR_0dot10_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.76_CCR_0.10_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 91200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 179, 0), new ScheduledTask(7200, 7325, 1), new ScheduledTask(0, 161, 2), new ScheduledTask(0, 72, 3), new ScheduledTask(17900, 17954, 0), new ScheduledTask(0, 36, 1), new ScheduledTask(14400, 14561, 3), new ScheduledTask(32600, 32654, 2), new ScheduledTask(34000, 34143, 0), new ScheduledTask(48300, 48425, 0), new ScheduledTask(23300, 23407, 0), new ScheduledTask(46600, 46672, 3), new ScheduledTask(32200, 32290, 1), new ScheduledTask(43400, 43579, 2), new ScheduledTask(71500, 71625, 0), new ScheduledTask(60800, 60907, 0), new ScheduledTask(64600, 64690, 1), new ScheduledTask(50200, 50272, 1), new ScheduledTask(61000, 61143, 3), new ScheduledTask(84000, 84072, 0), new ScheduledTask(79200, 79254, 2)};
        int[] expectedProcessorEndTimes = new int[]{84072, 64690, 79254, 61143};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot76_CCR_0dot10_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.76_CCR_0.10_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 75240;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 179, 0), new ScheduledTask(4320, 4445, 1), new ScheduledTask(0, 161, 2), new ScheduledTask(0, 72, 3), new ScheduledTask(17900, 17954, 0), new ScheduledTask(0, 36, 1), new ScheduledTask(28700, 28861, 0), new ScheduledTask(23300, 23354, 0), new ScheduledTask(44800, 44943, 0), new ScheduledTask(34950, 35075, 2), new ScheduledTask(30120, 30227, 1), new ScheduledTask(24150, 24222, 2), new ScheduledTask(14400, 14490, 3), new ScheduledTask(32400, 32579, 3), new ScheduledTask(51600, 51725, 1), new ScheduledTask(59100, 59207, 0), new ScheduledTask(19320, 19410, 1), new ScheduledTask(42960, 43032, 1), new ScheduledTask(53700, 53843, 2), new ScheduledTask(66600, 66672, 1), new ScheduledTask(69800, 69854, 0)};
        int[] expectedProcessorEndTimes = new int[]{69854, 66672, 53843, 32579};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot76_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.76_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1111;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(376, 555, 0), new ScheduledTask(555, 680, 0), new ScheduledTask(0, 161, 0), new ScheduledTask(537, 609, 1), new ScheduledTask(681, 735, 1), new ScheduledTask(501, 537, 1), new ScheduledTask(340, 501, 1), new ScheduledTask(735, 789, 1), new ScheduledTask(197, 340, 1), new ScheduledTask(789, 914, 1), new ScheduledTask(90, 197, 1), new ScheduledTask(609, 681, 1), new ScheduledTask(0, 90, 1), new ScheduledTask(770, 949, 0), new ScheduledTask(914, 1039, 1), new ScheduledTask(949, 1056, 0), new ScheduledTask(680, 770, 0), new ScheduledTask(304, 376, 0), new ScheduledTask(161, 304, 0), new ScheduledTask(1039, 1111, 1), new ScheduledTask(1056, 1110, 0)};
        int[] expectedProcessorEndTimes = new int[]{1110, 1111};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot76_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.76_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 573;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 179, 0), new ScheduledTask(36, 161, 1), new ScheduledTask(0, 161, 2), new ScheduledTask(0, 72, 3), new ScheduledTask(179, 233, 0), new ScheduledTask(0, 36, 1), new ScheduledTask(72, 233, 3), new ScheduledTask(233, 287, 0), new ScheduledTask(233, 376, 3), new ScheduledTask(287, 412, 0), new ScheduledTask(251, 358, 2), new ScheduledTask(251, 323, 1), new ScheduledTask(161, 251, 2), new ScheduledTask(323, 502, 1), new ScheduledTask(376, 501, 3), new ScheduledTask(412, 519, 0), new ScheduledTask(161, 251, 1), new ScheduledTask(358, 430, 2), new ScheduledTask(430, 573, 2), new ScheduledTask(501, 573, 3), new ScheduledTask(519, 573, 0)};
        int[] expectedProcessorEndTimes = new int[]{573, 502, 573, 573};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot76_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.76_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 573;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 179, 0), new ScheduledTask(0, 125, 1), new ScheduledTask(0, 161, 2), new ScheduledTask(0, 72, 3), new ScheduledTask(179, 233, 0), new ScheduledTask(0, 36, 4), new ScheduledTask(0, 161, 5), new ScheduledTask(233, 287, 0), new ScheduledTask(161, 304, 2), new ScheduledTask(287, 412, 0), new ScheduledTask(36, 143, 4), new ScheduledTask(189, 261, 1), new ScheduledTask(72, 162, 3), new ScheduledTask(143, 322, 4), new ScheduledTask(289, 414, 1), new ScheduledTask(412, 519, 0), new ScheduledTask(161, 251, 5), new ScheduledTask(167, 239, 3), new ScheduledTask(239, 382, 3), new ScheduledTask(414, 486, 1), new ScheduledTask(519, 573, 0)};
        int[] expectedProcessorEndTimes = new int[]{573, 486, 304, 382, 322, 251};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot76_CCR_1dot00_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.76_CCR_1.00_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 16300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 13, 0), new ScheduledTask(1300, 1318, 0), new ScheduledTask(3800, 3815, 0), new ScheduledTask(5300, 5316, 0), new ScheduledTask(0, 11, 1), new ScheduledTask(0, 11, 2), new ScheduledTask(0, 7, 3), new ScheduledTask(9200, 9209, 0), new ScheduledTask(6900, 6907, 0), new ScheduledTask(4200, 4207, 3), new ScheduledTask(8400, 8405, 3), new ScheduledTask(6600, 6604, 1), new ScheduledTask(11700, 11718, 0), new ScheduledTask(10100, 10116, 0), new ScheduledTask(3100, 3107, 0), new ScheduledTask(6600, 6605, 2), new ScheduledTask(7600, 7616, 0), new ScheduledTask(14800, 14815, 0), new ScheduledTask(13500, 13513, 0), new ScheduledTask(9600, 9611, 2), new ScheduledTask(11400, 11407, 3)};
        int[] expectedProcessorEndTimes = new int[]{14815, 6604, 9611, 11407};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot76_CCR_1dot00_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.76_CCR_1.00_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 12300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 13, 0), new ScheduledTask(1300, 1318, 0), new ScheduledTask(3100, 3115, 0), new ScheduledTask(5500, 5516, 0), new ScheduledTask(0, 11, 1), new ScheduledTask(3700, 3711, 2), new ScheduledTask(0, 7, 2), new ScheduledTask(4600, 4609, 0), new ScheduledTask(7100, 7107, 0), new ScheduledTask(3600, 3607, 1), new ScheduledTask(7800, 7805, 0), new ScheduledTask(4700, 4704, 3), new ScheduledTask(8300, 8318, 0), new ScheduledTask(6100, 6116, 3), new ScheduledTask(1800, 1807, 3), new ScheduledTask(3700, 3705, 3), new ScheduledTask(8500, 8516, 2), new ScheduledTask(9300, 9315, 3), new ScheduledTask(10100, 10113, 0), new ScheduledTask(5900, 5911, 2), new ScheduledTask(2300, 2307, 2)};
        int[] expectedProcessorEndTimes = new int[]{10113, 3607, 8516, 9315};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot76_CCR_1dot00_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.76_CCR_1.00_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 13, 0), new ScheduledTask(1300, 1318, 0), new ScheduledTask(3100, 3115, 0), new ScheduledTask(4600, 4616, 0), new ScheduledTask(0, 11, 1), new ScheduledTask(0, 11, 2), new ScheduledTask(0, 7, 3), new ScheduledTask(5300, 5309, 1), new ScheduledTask(6200, 6207, 0), new ScheduledTask(3600, 3607, 2), new ScheduledTask(6900, 6905, 0), new ScheduledTask(1400, 1404, 3), new ScheduledTask(7400, 7418, 0), new ScheduledTask(6380, 6396, 1), new ScheduledTask(2200, 2207, 3), new ScheduledTask(3700, 3705, 3), new ScheduledTask(7600, 7616, 2), new ScheduledTask(8300, 8315, 1), new ScheduledTask(9200, 9213, 0), new ScheduledTask(4700, 4711, 3), new ScheduledTask(6900, 6907, 3)};
        int[] expectedProcessorEndTimes = new int[]{9213, 8315, 7616, 6907};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot76_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.76_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 116;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 13, 0), new ScheduledTask(13, 31, 0), new ScheduledTask(31, 46, 0), new ScheduledTask(46, 62, 0), new ScheduledTask(29, 40, 1), new ScheduledTask(11, 22, 1), new ScheduledTask(0, 7, 1), new ScheduledTask(56, 65, 1), new ScheduledTask(62, 69, 0), new ScheduledTask(65, 72, 1), new ScheduledTask(69, 74, 0), new ScheduledTask(7, 11, 1), new ScheduledTask(75, 93, 0), new ScheduledTask(72, 88, 1), new ScheduledTask(22, 29, 1), new ScheduledTask(51, 56, 1), new ScheduledTask(100, 116, 0), new ScheduledTask(88, 103, 1), new ScheduledTask(103, 116, 1), new ScheduledTask(40, 51, 1), new ScheduledTask(93, 100, 0)};
        int[] expectedProcessorEndTimes = new int[]{116, 116};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot76_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.76_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 105;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 13, 0), new ScheduledTask(13, 31, 0), new ScheduledTask(31, 46, 0), new ScheduledTask(46, 62, 0), new ScheduledTask(0, 11, 1), new ScheduledTask(0, 11, 2), new ScheduledTask(0, 7, 3), new ScheduledTask(53, 62, 1), new ScheduledTask(62, 69, 0), new ScheduledTask(36, 43, 2), new ScheduledTask(69, 74, 0), new ScheduledTask(7, 11, 3), new ScheduledTask(74, 92, 0), new ScheduledTask(62, 78, 1), new ScheduledTask(18, 25, 3), new ScheduledTask(37, 42, 3), new ScheduledTask(76, 92, 2), new ScheduledTask(82, 97, 1), new ScheduledTask(92, 105, 0), new ScheduledTask(42, 53, 3), new ScheduledTask(53, 60, 3)};
        int[] expectedProcessorEndTimes = new int[]{105, 97, 92, 60};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot76_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.76_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 105;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 13, 0), new ScheduledTask(13, 31, 0), new ScheduledTask(31, 46, 0), new ScheduledTask(46, 62, 0), new ScheduledTask(0, 11, 1), new ScheduledTask(0, 11, 2), new ScheduledTask(0, 7, 3), new ScheduledTask(53, 62, 1), new ScheduledTask(62, 69, 0), new ScheduledTask(36, 43, 2), new ScheduledTask(69, 74, 0), new ScheduledTask(7, 11, 3), new ScheduledTask(74, 92, 0), new ScheduledTask(62, 78, 1), new ScheduledTask(18, 25, 3), new ScheduledTask(37, 42, 3), new ScheduledTask(76, 92, 2), new ScheduledTask(82, 97, 1), new ScheduledTask(92, 105, 0), new ScheduledTask(39, 50, 4), new ScheduledTask(23, 30, 5)};
        int[] expectedProcessorEndTimes = new int[]{105, 97, 92, 42, 50, 30};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot81_CCR_0dot10_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.81_CCR_0.10_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 163100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(26400, 26510, 0), new ScheduledTask(17600, 17688, 0), new ScheduledTask(0, 154, 1), new ScheduledTask(37400, 37532, 0), new ScheduledTask(39600, 39666, 2), new ScheduledTask(92700, 92898, 0), new ScheduledTask(0, 176, 3), new ScheduledTask(0, 176, 0), new ScheduledTask(50600, 50732, 0), new ScheduledTask(112500, 112676, 0), new ScheduledTask(0, 66, 2), new ScheduledTask(72600, 72776, 0), new ScheduledTask(63800, 63888, 0), new ScheduledTask(130100, 130166, 0), new ScheduledTask(79200, 79244, 2), new ScheduledTask(105600, 105644, 3), new ScheduledTask(147700, 147854, 0), new ScheduledTask(136700, 136810, 0), new ScheduledTask(105600, 105688, 2), new ScheduledTask(105800, 105888, 1), new ScheduledTask(132000, 132044, 3)};
        int[] expectedProcessorEndTimes = new int[]{147854, 105888, 105688, 132044};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot81_CCR_0dot10_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.81_CCR_0.10_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 103400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 110, 0), new ScheduledTask(8800, 8888, 1), new ScheduledTask(0, 154, 2), new ScheduledTask(11000, 11132, 0), new ScheduledTask(37400, 37466, 0), new ScheduledTask(44000, 44198, 0), new ScheduledTask(26400, 26576, 1), new ScheduledTask(0, 176, 3), new ScheduledTask(24200, 24332, 0), new ScheduledTask(63800, 63976, 0), new ScheduledTask(35200, 35266, 3), new ScheduledTask(35700, 35876, 2), new ScheduledTask(48400, 48488, 3), new ScheduledTask(81400, 81466, 0), new ScheduledTask(66000, 66044, 3), new ScheduledTask(70900, 70944, 2), new ScheduledTask(88000, 88154, 0), new ScheduledTask(79900, 80010, 3), new ScheduledTask(79700, 79788, 2), new ScheduledTask(75000, 75088, 1), new ScheduledTask(0, 44, 1)};
        int[] expectedProcessorEndTimes = new int[]{88154, 75088, 79788, 80010};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot81_CCR_0dot10_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.81_CCR_0.10_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 84900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 110, 0), new ScheduledTask(0, 88, 2), new ScheduledTask(0, 154, 1), new ScheduledTask(11000, 11132, 0), new ScheduledTask(13200, 13266, 2), new ScheduledTask(24200, 24398, 0), new ScheduledTask(18480, 18656, 1), new ScheduledTask(0, 176, 3), new ScheduledTask(24900, 25032, 2), new ScheduledTask(45300, 45476, 0), new ScheduledTask(35200, 35266, 3), new ScheduledTask(44700, 44876, 2), new ScheduledTask(49300, 49388, 1), new ScheduledTask(62900, 62966, 0), new ScheduledTask(59860, 59904, 1), new ScheduledTask(65140, 65184, 1), new ScheduledTask(69500, 69654, 0), new ScheduledTask(71400, 71510, 1), new ScheduledTask(71100, 71188, 2), new ScheduledTask(65340, 65428, 3), new ScheduledTask(48400, 48444, 3)};
        int[] expectedProcessorEndTimes = new int[]{69654, 71510, 71188, 65428};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot81_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.81_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1188;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(88, 198, 0), new ScheduledTask(0, 88, 0), new ScheduledTask(66, 220, 1), new ScheduledTask(220, 352, 1), new ScheduledTask(374, 440, 0), new ScheduledTask(440, 638, 0), new ScheduledTask(484, 660, 1), new ScheduledTask(198, 374, 0), new ScheduledTask(352, 484, 1), new ScheduledTask(660, 836, 1), new ScheduledTask(0, 66, 1), new ScheduledTask(902, 1078, 1), new ScheduledTask(682, 770, 0), new ScheduledTask(836, 902, 1), new ScheduledTask(814, 858, 0), new ScheduledTask(770, 814, 0), new ScheduledTask(946, 1100, 0), new ScheduledTask(1078, 1188, 1), new ScheduledTask(1100, 1188, 0), new ScheduledTask(858, 946, 0), new ScheduledTask(638, 682, 0)};
        int[] expectedProcessorEndTimes = new int[]{1188, 1188};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot81_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.81_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 836;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 110, 0), new ScheduledTask(0, 88, 1), new ScheduledTask(0, 154, 2), new ScheduledTask(110, 242, 0), new ScheduledTask(88, 154, 1), new ScheduledTask(242, 440, 0), new ScheduledTask(0, 176, 3), new ScheduledTask(154, 330, 1), new ScheduledTask(249, 381, 2), new ScheduledTask(440, 616, 0), new ScheduledTask(176, 242, 3), new ScheduledTask(330, 506, 1), new ScheduledTask(381, 469, 2), new ScheduledTask(616, 682, 0), new ScheduledTask(469, 513, 2), new ScheduledTask(473, 517, 3), new ScheduledTask(682, 836, 0), new ScheduledTask(519, 629, 2), new ScheduledTask(506, 594, 1), new ScheduledTask(517, 605, 3), new ScheduledTask(594, 638, 1)};
        int[] expectedProcessorEndTimes = new int[]{836, 638, 629, 605};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot81_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.81_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 836;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 110, 0), new ScheduledTask(0, 88, 1), new ScheduledTask(0, 154, 2), new ScheduledTask(110, 242, 0), new ScheduledTask(88, 154, 1), new ScheduledTask(242, 440, 0), new ScheduledTask(0, 176, 3), new ScheduledTask(0, 176, 4), new ScheduledTask(249, 381, 1), new ScheduledTask(440, 616, 0), new ScheduledTask(0, 66, 5), new ScheduledTask(176, 352, 4), new ScheduledTask(381, 469, 1), new ScheduledTask(616, 682, 0), new ScheduledTask(469, 513, 1), new ScheduledTask(473, 517, 2), new ScheduledTask(682, 836, 0), new ScheduledTask(519, 629, 1), new ScheduledTask(352, 440, 4), new ScheduledTask(515, 603, 3), new ScheduledTask(66, 110, 5)};
        int[] expectedProcessorEndTimes = new int[]{836, 629, 517, 603, 440, 110};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot81_CCR_1dot01_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.81_CCR_1.01_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 15000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 17, 0), new ScheduledTask(2300, 2306, 0), new ScheduledTask(2900, 2919, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(0, 6, 2), new ScheduledTask(0, 4, 3), new ScheduledTask(4800, 4804, 1), new ScheduledTask(8200, 8215, 0), new ScheduledTask(6900, 6913, 0), new ScheduledTask(9700, 9715, 0), new ScheduledTask(7200, 7208, 1), new ScheduledTask(1700, 1706, 0), new ScheduledTask(3600, 3615, 2), new ScheduledTask(12900, 12906, 0), new ScheduledTask(11200, 11211, 0), new ScheduledTask(4800, 4821, 0), new ScheduledTask(2400, 2421, 3), new ScheduledTask(13500, 13511, 0), new ScheduledTask(12600, 12604, 2), new ScheduledTask(14600, 14604, 0), new ScheduledTask(12300, 12304, 0)};
        int[] expectedProcessorEndTimes = new int[]{14604, 7208, 12604, 2421};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot81_CCR_1dot01_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.81_CCR_1.01_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 17, 0), new ScheduledTask(1700, 1706, 0), new ScheduledTask(2300, 2319, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(0, 6, 2), new ScheduledTask(1200, 1204, 3), new ScheduledTask(1900, 1904, 1), new ScheduledTask(2900, 2915, 2), new ScheduledTask(5000, 5013, 0), new ScheduledTask(6300, 6315, 0), new ScheduledTask(4200, 4208, 0), new ScheduledTask(0, 6, 3), new ScheduledTask(2000, 2015, 3), new ScheduledTask(5900, 5906, 2), new ScheduledTask(7800, 7811, 0), new ScheduledTask(5000, 5021, 3), new ScheduledTask(2700, 2721, 1), new ScheduledTask(7100, 7111, 2), new ScheduledTask(8200, 8204, 1), new ScheduledTask(6900, 6904, 1), new ScheduledTask(8900, 8904, 0)};
        int[] expectedProcessorEndTimes = new int[]{8904, 8204, 7111, 5021};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot81_CCR_1dot01_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.81_CCR_1.01_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 17, 0), new ScheduledTask(1700, 1706, 0), new ScheduledTask(2300, 2319, 0), new ScheduledTask(720, 728, 1), new ScheduledTask(0, 6, 2), new ScheduledTask(0, 4, 3), new ScheduledTask(1900, 1904, 1), new ScheduledTask(2380, 2395, 1), new ScheduledTask(4200, 4213, 0), new ScheduledTask(5500, 5515, 0), new ScheduledTask(2680, 2688, 2), new ScheduledTask(0, 6, 1), new ScheduledTask(2000, 2015, 3), new ScheduledTask(5100, 5106, 3), new ScheduledTask(7000, 7011, 0), new ScheduledTask(4600, 4621, 2), new ScheduledTask(4180, 4201, 1), new ScheduledTask(6300, 6311, 3), new ScheduledTask(7750, 7754, 2), new ScheduledTask(6700, 6704, 1), new ScheduledTask(8100, 8104, 0)};
        int[] expectedProcessorEndTimes = new int[]{8104, 6704, 7754, 6311};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot81_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.81_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 109;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 17, 0), new ScheduledTask(17, 23, 0), new ScheduledTask(23, 42, 0), new ScheduledTask(16, 24, 1), new ScheduledTask(10, 16, 1), new ScheduledTask(6, 10, 1), new ScheduledTask(39, 43, 1), new ScheduledTask(43, 58, 1), new ScheduledTask(58, 71, 1), new ScheduledTask(71, 86, 1), new ScheduledTask(84, 92, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(24, 39, 1), new ScheduledTask(92, 98, 0), new ScheduledTask(90, 101, 1), new ScheduledTask(63, 84, 0), new ScheduledTask(42, 63, 0), new ScheduledTask(98, 109, 0), new ScheduledTask(86, 90, 1), new ScheduledTask(105, 109, 1), new ScheduledTask(101, 105, 1)};
        int[] expectedProcessorEndTimes = new int[]{109, 109};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot81_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.81_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 85;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 17, 0), new ScheduledTask(17, 23, 0), new ScheduledTask(23, 42, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(0, 6, 2), new ScheduledTask(0, 4, 3), new ScheduledTask(19, 23, 1), new ScheduledTask(23, 38, 1), new ScheduledTask(42, 55, 0), new ScheduledTask(55, 70, 0), new ScheduledTask(26, 34, 2), new ScheduledTask(4, 10, 3), new ScheduledTask(20, 35, 3), new ScheduledTask(51, 57, 1), new ScheduledTask(70, 81, 0), new ScheduledTask(46, 67, 2), new ScheduledTask(35, 56, 3), new ScheduledTask(57, 68, 1), new ScheduledTask(74, 78, 1), new ScheduledTask(56, 60, 3), new ScheduledTask(81, 85, 0)};
        int[] expectedProcessorEndTimes = new int[]{85, 78, 67, 60};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot81_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.81_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 85;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 17, 0), new ScheduledTask(17, 23, 0), new ScheduledTask(23, 42, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(0, 6, 2), new ScheduledTask(0, 4, 3), new ScheduledTask(19, 23, 1), new ScheduledTask(23, 38, 1), new ScheduledTask(42, 55, 0), new ScheduledTask(55, 70, 0), new ScheduledTask(26, 34, 2), new ScheduledTask(0, 6, 4), new ScheduledTask(20, 35, 3), new ScheduledTask(51, 57, 1), new ScheduledTask(70, 81, 0), new ScheduledTask(46, 67, 2), new ScheduledTask(24, 45, 4), new ScheduledTask(57, 68, 1), new ScheduledTask(74, 78, 1), new ScheduledTask(43, 47, 3), new ScheduledTask(81, 85, 0)};
        int[] expectedProcessorEndTimes = new int[]{85, 78, 67, 47, 45};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot81_CCR_10dot00_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.81_CCR_10.00_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 11800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(3400, 3409, 0), new ScheduledTask(0, 9, 0), new ScheduledTask(5100, 5108, 0), new ScheduledTask(4300, 4308, 0), new ScheduledTask(7600, 7608, 0), new ScheduledTask(2500, 2509, 0), new ScheduledTask(1500, 1510, 0), new ScheduledTask(5900, 5905, 0), new ScheduledTask(9000, 9007, 0), new ScheduledTask(1800, 1806, 1), new ScheduledTask(0, 3, 1), new ScheduledTask(900, 906, 0), new ScheduledTask(7400, 7402, 0), new ScheduledTask(6400, 6410, 0), new ScheduledTask(5800, 5804, 1), new ScheduledTask(9700, 9708, 0), new ScheduledTask(2000, 2002, 2), new ScheduledTask(10700, 10709, 0), new ScheduledTask(8400, 8406, 0), new ScheduledTask(8200, 8206, 1), new ScheduledTask(10500, 10502, 0)};
        int[] expectedProcessorEndTimes = new int[]{10709, 8206, 2002};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot81_CCR_10dot00_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.81_CCR_10.00_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 1), new ScheduledTask(900, 909, 0), new ScheduledTask(0, 8, 2), new ScheduledTask(0, 8, 3), new ScheduledTask(5100, 5108, 0), new ScheduledTask(0, 9, 0), new ScheduledTask(2400, 2410, 0), new ScheduledTask(3400, 3405, 0), new ScheduledTask(6900, 6907, 0), new ScheduledTask(2200, 2206, 3), new ScheduledTask(1600, 1603, 3), new ScheduledTask(1800, 1806, 0), new ScheduledTask(4900, 4902, 0), new ScheduledTask(3900, 3910, 0), new ScheduledTask(6700, 6704, 3), new ScheduledTask(7600, 7608, 0), new ScheduledTask(3400, 3402, 3), new ScheduledTask(8600, 8609, 0), new ScheduledTask(6100, 6106, 0), new ScheduledTask(7500, 7506, 3), new ScheduledTask(8400, 8402, 0)};
        int[] expectedProcessorEndTimes = new int[]{8609, 9, 8, 7506};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot81_CCR_10dot00_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.81_CCR_10.00_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8550;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1600, 1609, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(0, 8, 0), new ScheduledTask(800, 808, 0), new ScheduledTask(2500, 2508, 0), new ScheduledTask(0, 9, 2), new ScheduledTask(1080, 1090, 1), new ScheduledTask(2400, 2405, 1), new ScheduledTask(4880, 4887, 0), new ScheduledTask(600, 606, 3), new ScheduledTask(0, 3, 3), new ScheduledTask(4280, 4286, 0), new ScheduledTask(3000, 3002, 1), new ScheduledTask(5050, 5060, 1), new ScheduledTask(5580, 5584, 0), new ScheduledTask(6580, 6588, 0), new ScheduledTask(2180, 2182, 3), new ScheduledTask(7380, 7389, 0), new ScheduledTask(6250, 6256, 1), new ScheduledTask(5980, 5986, 0), new ScheduledTask(8350, 8352, 0)};
        int[] expectedProcessorEndTimes = new int[]{8352, 6256, 9, 2182};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot81_CCR_10dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.81_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 86;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(25, 34, 0), new ScheduledTask(9, 18, 1), new ScheduledTask(3, 11, 0), new ScheduledTask(17, 25, 0), new ScheduledTask(36, 44, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(18, 28, 1), new ScheduledTask(28, 33, 1), new ScheduledTask(44, 51, 0), new ScheduledTask(11, 17, 0), new ScheduledTask(0, 3, 0), new ScheduledTask(51, 57, 0), new ScheduledTask(33, 35, 1), new ScheduledTask(35, 45, 1), new ScheduledTask(57, 61, 0), new ScheduledTask(67, 75, 0), new ScheduledTask(34, 36, 0), new ScheduledTask(77, 86, 0), new ScheduledTask(54, 60, 1), new ScheduledTask(61, 67, 0), new ScheduledTask(75, 77, 0)};
        int[] expectedProcessorEndTimes = new int[]{86, 60};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot81_CCR_10dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.81_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(16, 25, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(0, 8, 0), new ScheduledTask(8, 16, 0), new ScheduledTask(25, 33, 0), new ScheduledTask(0, 9, 2), new ScheduledTask(9, 19, 1), new ScheduledTask(24, 29, 1), new ScheduledTask(36, 43, 0), new ScheduledTask(3, 9, 3), new ScheduledTask(0, 3, 3), new ScheduledTask(43, 49, 0), new ScheduledTask(29, 31, 1), new ScheduledTask(46, 56, 1), new ScheduledTask(51, 55, 0), new ScheduledTask(63, 71, 0), new ScheduledTask(20, 22, 3), new ScheduledTask(71, 80, 0), new ScheduledTask(56, 62, 1), new ScheduledTask(55, 61, 0), new ScheduledTask(80, 82, 0)};
        int[] expectedProcessorEndTimes = new int[]{82, 62, 9, 22};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot81_CCR_10dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.81_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(16, 25, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(0, 8, 0), new ScheduledTask(8, 16, 0), new ScheduledTask(25, 33, 0), new ScheduledTask(0, 9, 2), new ScheduledTask(9, 19, 1), new ScheduledTask(24, 29, 1), new ScheduledTask(36, 43, 0), new ScheduledTask(0, 6, 3), new ScheduledTask(0, 3, 4), new ScheduledTask(43, 49, 0), new ScheduledTask(29, 31, 1), new ScheduledTask(46, 56, 1), new ScheduledTask(51, 55, 0), new ScheduledTask(63, 71, 0), new ScheduledTask(20, 22, 5), new ScheduledTask(71, 80, 0), new ScheduledTask(56, 62, 1), new ScheduledTask(55, 61, 0), new ScheduledTask(80, 82, 0)};
        int[] expectedProcessorEndTimes = new int[]{82, 62, 9, 6, 3, 22};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot81_CCR_10dot00_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.81_CCR_10.00_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 12300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(1000, 1007, 0), new ScheduledTask(1700, 1707, 0), new ScheduledTask(2400, 2409, 0), new ScheduledTask(3300, 3307, 0), new ScheduledTask(4000, 4004, 0), new ScheduledTask(4400, 4410, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(5400, 5408, 0), new ScheduledTask(0, 3, 2), new ScheduledTask(6200, 6210, 0), new ScheduledTask(7200, 7210, 0), new ScheduledTask(1200, 1210, 1), new ScheduledTask(8200, 8205, 0), new ScheduledTask(8700, 8708, 0), new ScheduledTask(1800, 1808, 2), new ScheduledTask(9500, 9510, 0), new ScheduledTask(10500, 10506, 0), new ScheduledTask(11100, 11110, 0), new ScheduledTask(9700, 9704, 1), new ScheduledTask(12100, 12102, 0)};
        int[] expectedProcessorEndTimes = new int[]{12102, 9704, 1808};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot81_CCR_10dot00_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.81_CCR_10.00_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 11600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(700, 710, 0), new ScheduledTask(1700, 1707, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(2400, 2409, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(6900, 6904, 0), new ScheduledTask(4100, 4110, 0), new ScheduledTask(0, 2, 2), new ScheduledTask(3300, 3308, 0), new ScheduledTask(5000, 5003, 3), new ScheduledTask(5100, 5110, 0), new ScheduledTask(7300, 7310, 0), new ScheduledTask(3000, 3010, 3), new ScheduledTask(10800, 10805, 0), new ScheduledTask(6100, 6108, 0), new ScheduledTask(5600, 5608, 3), new ScheduledTask(8100, 8110, 3), new ScheduledTask(10200, 10206, 0), new ScheduledTask(8300, 8310, 0), new ScheduledTask(9800, 9804, 0), new ScheduledTask(11400, 11402, 0)};
        int[] expectedProcessorEndTimes = new int[]{11402, 7, 2, 8110};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot81_CCR_10dot00_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.81_CCR_10.00_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10960;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(700, 710, 0), new ScheduledTask(1700, 1707, 0), new ScheduledTask(5700, 5707, 0), new ScheduledTask(4800, 4809, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(4400, 4404, 0), new ScheduledTask(2400, 2410, 0), new ScheduledTask(0, 2, 2), new ScheduledTask(6400, 6408, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(3400, 3410, 0), new ScheduledTask(8200, 8210, 0), new ScheduledTask(2900, 2910, 3), new ScheduledTask(9260, 9265, 1), new ScheduledTask(8300, 8308, 1), new ScheduledTask(5660, 5668, 3), new ScheduledTask(7200, 7210, 0), new ScheduledTask(10000, 10006, 1), new ScheduledTask(9200, 9210, 0), new ScheduledTask(10100, 10104, 3), new ScheduledTask(10720, 10722, 1)};
        int[] expectedProcessorEndTimes = new int[]{9210, 10722, 2, 10104};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot81_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.81_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 108;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(7, 17, 0), new ScheduledTask(17, 24, 0), new ScheduledTask(61, 68, 0), new ScheduledTask(52, 61, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(44, 48, 0), new ScheduledTask(24, 34, 0), new ScheduledTask(11, 13, 1), new ScheduledTask(68, 76, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(34, 44, 0), new ScheduledTask(86, 96, 0), new ScheduledTask(13, 23, 1), new ScheduledTask(91, 96, 1), new ScheduledTask(83, 91, 1), new ScheduledTask(3, 11, 1), new ScheduledTask(76, 86, 0), new ScheduledTask(100, 106, 1), new ScheduledTask(96, 106, 0), new ScheduledTask(48, 52, 0), new ScheduledTask(106, 108, 1)};
        int[] expectedProcessorEndTimes = new int[]{106, 108};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot81_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.81_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 108;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(7, 17, 0), new ScheduledTask(17, 24, 0), new ScheduledTask(57, 64, 0), new ScheduledTask(48, 57, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(44, 48, 0), new ScheduledTask(24, 34, 0), new ScheduledTask(3, 5, 1), new ScheduledTask(64, 72, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(34, 44, 0), new ScheduledTask(82, 92, 0), new ScheduledTask(31, 41, 2), new ScheduledTask(91, 96, 3), new ScheduledTask(83, 91, 3), new ScheduledTask(56, 64, 3), new ScheduledTask(72, 82, 0), new ScheduledTask(100, 106, 3), new ScheduledTask(92, 102, 0), new ScheduledTask(101, 105, 2), new ScheduledTask(106, 108, 3)};
        int[] expectedProcessorEndTimes = new int[]{102, 5, 105, 108};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot81_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.81_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 108;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(7, 17, 0), new ScheduledTask(17, 24, 0), new ScheduledTask(57, 64, 0), new ScheduledTask(48, 57, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(44, 48, 0), new ScheduledTask(24, 34, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(64, 72, 0), new ScheduledTask(0, 3, 2), new ScheduledTask(34, 44, 0), new ScheduledTask(82, 92, 0), new ScheduledTask(28, 38, 3), new ScheduledTask(91, 96, 4), new ScheduledTask(83, 91, 4), new ScheduledTask(56, 64, 5), new ScheduledTask(72, 82, 0), new ScheduledTask(100, 106, 4), new ScheduledTask(92, 102, 0), new ScheduledTask(101, 105, 5), new ScheduledTask(106, 108, 4)};
        int[] expectedProcessorEndTimes = new int[]{102, 2, 3, 38, 108, 105};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot86_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.86_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 9;
        int expectedScheduleEndTime = 677;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 65, 0), new ScheduledTask(65, 196, 0), new ScheduledTask(0, 115, 1), new ScheduledTask(0, 98, 2), new ScheduledTask(0, 164, 3), new ScheduledTask(0, 147, 4), new ScheduledTask(0, 49, 5), new ScheduledTask(196, 278, 0), new ScheduledTask(98, 180, 2), new ScheduledTask(278, 376, 0), new ScheduledTask(180, 327, 2), new ScheduledTask(376, 507, 0), new ScheduledTask(147, 245, 4), new ScheduledTask(327, 409, 2), new ScheduledTask(0, 33, 6), new ScheduledTask(507, 671, 0), new ScheduledTask(513, 677, 1), new ScheduledTask(107, 254, 5), new ScheduledTask(121, 236, 6), new ScheduledTask(102, 217, 7), new ScheduledTask(106, 171, 8)};
        int[] expectedProcessorEndTimes = new int[]{671, 677, 409, 164, 245, 254, 236, 217, 171};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot86_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.86_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1146;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(196, 261, 0), new ScheduledTask(261, 392, 0), new ScheduledTask(197, 312, 1), new ScheduledTask(312, 410, 1), new ScheduledTask(33, 197, 1), new ScheduledTask(49, 196, 0), new ScheduledTask(0, 49, 0), new ScheduledTask(392, 474, 0), new ScheduledTask(410, 492, 1), new ScheduledTask(492, 590, 1), new ScheduledTask(721, 868, 1), new ScheduledTask(590, 721, 1), new ScheduledTask(868, 966, 1), new ScheduledTask(900, 982, 0), new ScheduledTask(0, 33, 1), new ScheduledTask(736, 900, 0), new ScheduledTask(982, 1146, 0), new ScheduledTask(589, 736, 0), new ScheduledTask(1031, 1146, 1), new ScheduledTask(474, 589, 0), new ScheduledTask(966, 1031, 1)};
        int[] expectedProcessorEndTimes = new int[]{1146, 1146};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot86_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.86_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 677;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 65, 0), new ScheduledTask(65, 196, 0), new ScheduledTask(0, 115, 1), new ScheduledTask(0, 98, 2), new ScheduledTask(0, 164, 3), new ScheduledTask(98, 245, 2), new ScheduledTask(115, 164, 1), new ScheduledTask(196, 278, 0), new ScheduledTask(164, 246, 1), new ScheduledTask(278, 376, 0), new ScheduledTask(248, 395, 2), new ScheduledTask(376, 507, 0), new ScheduledTask(253, 351, 1), new ScheduledTask(395, 477, 2), new ScheduledTask(164, 197, 3), new ScheduledTask(507, 671, 0), new ScheduledTask(513, 677, 1), new ScheduledTask(197, 344, 3), new ScheduledTask(344, 459, 3), new ScheduledTask(459, 574, 3), new ScheduledTask(477, 542, 2)};
        int[] expectedProcessorEndTimes = new int[]{671, 677, 542, 574};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot86_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.86_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 677;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 65, 0), new ScheduledTask(65, 196, 0), new ScheduledTask(0, 115, 1), new ScheduledTask(0, 98, 2), new ScheduledTask(0, 164, 3), new ScheduledTask(0, 147, 4), new ScheduledTask(0, 49, 5), new ScheduledTask(196, 278, 0), new ScheduledTask(98, 180, 2), new ScheduledTask(278, 376, 0), new ScheduledTask(180, 327, 2), new ScheduledTask(376, 507, 0), new ScheduledTask(147, 245, 4), new ScheduledTask(327, 409, 2), new ScheduledTask(0, 33, 6), new ScheduledTask(507, 671, 0), new ScheduledTask(513, 677, 1), new ScheduledTask(107, 254, 5), new ScheduledTask(121, 236, 6), new ScheduledTask(102, 217, 7), new ScheduledTask(164, 229, 3)};
        int[] expectedProcessorEndTimes = new int[]{671, 677, 409, 229, 245, 254, 236, 217};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot86_CCR_1dot86_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.86_CCR_1.86_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(4, 6, 0), new ScheduledTask(6, 14, 0), new ScheduledTask(2, 4, 1), new ScheduledTask(0, 2, 1), new ScheduledTask(14, 21, 0), new ScheduledTask(14, 23, 1), new ScheduledTask(0, 2, 0), new ScheduledTask(21, 28, 0), new ScheduledTask(4, 14, 1), new ScheduledTask(23, 33, 1), new ScheduledTask(28, 36, 0), new ScheduledTask(35, 45, 1), new ScheduledTask(33, 35, 1), new ScheduledTask(45, 55, 1), new ScheduledTask(41, 49, 0), new ScheduledTask(55, 61, 1), new ScheduledTask(36, 41, 0), new ScheduledTask(54, 58, 0), new ScheduledTask(50, 54, 0), new ScheduledTask(58, 61, 0), new ScheduledTask(2, 4, 0)};
        int[] expectedProcessorEndTimes = new int[]{61, 61};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot86_CCR_1dot86_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.86_CCR_1.86_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 44;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 10, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(0, 2, 2), new ScheduledTask(12, 19, 0), new ScheduledTask(2, 11, 2), new ScheduledTask(0, 2, 3), new ScheduledTask(19, 26, 0), new ScheduledTask(2, 12, 1), new ScheduledTask(11, 21, 2), new ScheduledTask(16, 24, 1), new ScheduledTask(26, 36, 0), new ScheduledTask(22, 24, 2), new ScheduledTask(26, 36, 1), new ScheduledTask(24, 32, 2), new ScheduledTask(19, 25, 3), new ScheduledTask(31, 36, 3), new ScheduledTask(36, 40, 0), new ScheduledTask(40, 44, 0), new ScheduledTask(36, 39, 1), new ScheduledTask(32, 34, 2)};
        int[] expectedProcessorEndTimes = new int[]{44, 39, 34, 36};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot90_CCR_0dot10_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.90_CCR_0.10_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 151300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(20700, 20887, 0), new ScheduledTask(0, 41, 1), new ScheduledTask(51800, 51966, 0), new ScheduledTask(0, 104, 2), new ScheduledTask(0, 207, 0), new ScheduledTask(74600, 74683, 0), new ScheduledTask(39400, 39462, 0), new ScheduledTask(0, 83, 3), new ScheduledTask(68800, 68862, 2), new ScheduledTask(99500, 99604, 0), new ScheduledTask(114000, 114062, 0), new ScheduledTask(45600, 45662, 0), new ScheduledTask(68400, 68462, 0), new ScheduledTask(24600, 24787, 1), new ScheduledTask(132600, 132787, 0), new ScheduledTask(49800, 49966, 3), new ScheduledTask(82900, 83066, 0), new ScheduledTask(120200, 120262, 0), new ScheduledTask(106000, 106062, 2), new ScheduledTask(126400, 126462, 0), new ScheduledTask(109900, 109941, 0)};
        int[] expectedProcessorEndTimes = new int[]{132787, 24787, 106062, 49966};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot90_CCR_0dot10_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.90_CCR_0.10_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 91000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 187, 0), new ScheduledTask(0, 41, 1), new ScheduledTask(18700, 18866, 0), new ScheduledTask(8200, 8304, 1), new ScheduledTask(0, 207, 2), new ScheduledTask(29000, 29083, 1), new ScheduledTask(29000, 29062, 3), new ScheduledTask(0, 83, 3), new ScheduledTask(41400, 41462, 3), new ScheduledTask(45600, 45704, 1), new ScheduledTask(53800, 53862, 3), new ScheduledTask(41600, 41662, 2), new ScheduledTask(16600, 16662, 3), new ScheduledTask(51900, 52087, 0), new ScheduledTask(70600, 70787, 0), new ScheduledTask(35300, 35466, 0), new ScheduledTask(54000, 54166, 2), new ScheduledTask(66200, 66262, 3), new ScheduledTask(74600, 74662, 1), new ScheduledTask(78600, 78662, 3), new ScheduledTask(66400, 66441, 1)};
        int[] expectedProcessorEndTimes = new int[]{70787, 74662, 54166, 78662};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot90_CCR_0dot10_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.90_CCR_0.10_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 74600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 187, 0), new ScheduledTask(0, 41, 3), new ScheduledTask(8200, 8366, 3), new ScheduledTask(0, 104, 2), new ScheduledTask(9960, 10167, 1), new ScheduledTask(15600, 15683, 2), new ScheduledTask(18700, 18762, 0), new ScheduledTask(0, 83, 1), new ScheduledTask(43500, 43562, 0), new ScheduledTask(28050, 28154, 2), new ScheduledTask(49700, 49762, 0), new ScheduledTask(24900, 24962, 0), new ScheduledTask(31100, 31162, 0), new ScheduledTask(43650, 43837, 2), new ScheduledTask(55900, 56087, 0), new ScheduledTask(41400, 41566, 3), new ScheduledTask(34800, 34966, 1), new ScheduledTask(59640, 59702, 1), new ScheduledTask(37300, 37362, 0), new ScheduledTask(67080, 67142, 1), new ScheduledTask(54720, 54761, 1)};
        int[] expectedProcessorEndTimes = new int[]{56087, 67142, 43837, 41566};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot90_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.90_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1117;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(187, 374, 0), new ScheduledTask(228, 269, 1), new ScheduledTask(457, 623, 0), new ScheduledTask(83, 187, 0), new ScheduledTask(269, 476, 1), new ScheduledTask(374, 457, 0), new ScheduledTask(476, 538, 1), new ScheduledTask(0, 83, 0), new ScheduledTask(662, 724, 1), new ScheduledTask(810, 914, 0), new ScheduledTask(765, 827, 1), new ScheduledTask(600, 662, 1), new ScheduledTask(166, 228, 1), new ScheduledTask(623, 810, 0), new ScheduledTask(914, 1101, 0), new ScheduledTask(0, 166, 1), new ScheduledTask(951, 1117, 1), new ScheduledTask(827, 889, 1), new ScheduledTask(538, 600, 1), new ScheduledTask(889, 951, 1), new ScheduledTask(724, 765, 1)};
        int[] expectedProcessorEndTimes = new int[]{1101, 1117};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot90_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.90_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 560;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 187, 0), new ScheduledTask(0, 41, 1), new ScheduledTask(83, 249, 2), new ScheduledTask(0, 104, 3), new ScheduledTask(41, 248, 1), new ScheduledTask(104, 187, 3), new ScheduledTask(187, 249, 0), new ScheduledTask(0, 83, 2), new ScheduledTask(249, 311, 2), new ScheduledTask(249, 353, 0), new ScheduledTask(311, 373, 2), new ScheduledTask(320, 382, 3), new ScheduledTask(187, 249, 3), new ScheduledTask(248, 435, 1), new ScheduledTask(373, 560, 2), new ScheduledTask(382, 548, 3), new ScheduledTask(394, 560, 0), new ScheduledTask(435, 497, 1), new ScheduledTask(258, 320, 3), new ScheduledTask(497, 559, 1), new ScheduledTask(353, 394, 0)};
        int[] expectedProcessorEndTimes = new int[]{560, 559, 560, 548};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot90_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.90_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 540;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 187, 0), new ScheduledTask(0, 41, 1), new ScheduledTask(41, 207, 1), new ScheduledTask(0, 104, 2), new ScheduledTask(0, 207, 3), new ScheduledTask(104, 187, 2), new ScheduledTask(187, 249, 0), new ScheduledTask(0, 83, 4), new ScheduledTask(207, 269, 1), new ScheduledTask(249, 353, 0), new ScheduledTask(269, 331, 1), new ScheduledTask(251, 313, 2), new ScheduledTask(83, 145, 4), new ScheduledTask(207, 394, 3), new ScheduledTask(353, 540, 0), new ScheduledTask(0, 166, 5), new ScheduledTask(313, 479, 2), new ScheduledTask(331, 393, 1), new ScheduledTask(258, 320, 4), new ScheduledTask(393, 455, 1), new ScheduledTask(276, 317, 5)};
        int[] expectedProcessorEndTimes = new int[]{540, 455, 479, 394, 320, 317};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot90_CCR_0dot10_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.90_CCR_0.10_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 152800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 109, 0), new ScheduledTask(10900, 11082, 0), new ScheduledTask(21600, 21691, 1), new ScheduledTask(29100, 29227, 0), new ScheduledTask(0, 36, 1), new ScheduledTask(83600, 83746, 0), new ScheduledTask(11700, 11773, 2), new ScheduledTask(41800, 41982, 0), new ScheduledTask(60000, 60036, 0), new ScheduledTask(107300, 107482, 0), new ScheduledTask(64300, 64391, 2), new ScheduledTask(98200, 98291, 0), new ScheduledTask(63600, 63691, 0), new ScheduledTask(125500, 125591, 0), new ScheduledTask(134600, 134709, 0), new ScheduledTask(0, 164, 3), new ScheduledTask(76200, 76327, 1), new ScheduledTask(72700, 72809, 0), new ScheduledTask(98400, 98473, 3), new ScheduledTask(145500, 145573, 0), new ScheduledTask(118900, 118955, 2)};
        int[] expectedProcessorEndTimes = new int[]{145573, 76327, 118955, 98473};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot90_CCR_0dot10_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.90_CCR_0.10_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 97000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 109, 0), new ScheduledTask(10900, 11082, 0), new ScheduledTask(7200, 7291, 1), new ScheduledTask(29100, 29227, 0), new ScheduledTask(0, 36, 1), new ScheduledTask(29900, 30046, 1), new ScheduledTask(11700, 11773, 2), new ScheduledTask(41800, 41982, 0), new ScheduledTask(32800, 32836, 3), new ScheduledTask(60000, 60182, 0), new ScheduledTask(40000, 40091, 3), new ScheduledTask(60200, 60291, 3), new ScheduledTask(48100, 48191, 2), new ScheduledTask(59100, 59191, 1), new ScheduledTask(78800, 78909, 0), new ScheduledTask(0, 164, 3), new ScheduledTask(66300, 66427, 2), new ScheduledTask(26300, 26409, 2), new ScheduledTask(78400, 78473, 3), new ScheduledTask(89700, 89773, 0), new ScheduledTask(77300, 77355, 1)};
        int[] expectedProcessorEndTimes = new int[]{89773, 77355, 66427, 78473};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot90_CCR_0dot10_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.90_CCR_0.10_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 88060;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 109, 0), new ScheduledTask(10900, 11082, 0), new ScheduledTask(0, 91, 1), new ScheduledTask(29100, 29227, 0), new ScheduledTask(0, 36, 2), new ScheduledTask(29900, 30046, 1), new ScheduledTask(11700, 11773, 1), new ScheduledTask(41800, 41982, 0), new ScheduledTask(20460, 20496, 1), new ScheduledTask(47420, 47602, 1), new ScheduledTask(32800, 32891, 3), new ScheduledTask(60000, 60091, 0), new ScheduledTask(42500, 42591, 2), new ScheduledTask(51000, 51091, 3), new ScheduledTask(69860, 69969, 0), new ScheduledTask(0, 164, 3), new ScheduledTask(60700, 60827, 2), new ScheduledTask(5400, 5509, 2), new ScheduledTask(69200, 69273, 3), new ScheduledTask(80760, 80833, 0), new ScheduledTask(79750, 79805, 2)};
        int[] expectedProcessorEndTimes = new int[]{80833, 47602, 79805, 69273};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot90_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.90_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1127;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 109, 0), new ScheduledTask(218, 400, 0), new ScheduledTask(36, 127, 1), new ScheduledTask(400, 527, 0), new ScheduledTask(0, 36, 1), new ScheduledTask(418, 564, 1), new ScheduledTask(127, 200, 1), new ScheduledTask(527, 709, 0), new ScheduledTask(200, 236, 1), new ScheduledTask(709, 891, 0), new ScheduledTask(236, 327, 1), new ScheduledTask(783, 874, 1), new ScheduledTask(637, 728, 1), new ScheduledTask(327, 418, 1), new ScheduledTask(891, 1000, 0), new ScheduledTask(874, 1038, 1), new ScheduledTask(1000, 1127, 0), new ScheduledTask(109, 218, 0), new ScheduledTask(564, 637, 1), new ScheduledTask(1038, 1111, 1), new ScheduledTask(728, 783, 1)};
        int[] expectedProcessorEndTimes = new int[]{1127, 1111};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot90_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.90_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 873;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 109, 0), new ScheduledTask(109, 291, 0), new ScheduledTask(0, 91, 1), new ScheduledTask(291, 418, 0), new ScheduledTask(0, 36, 2), new ScheduledTask(299, 445, 1), new ScheduledTask(117, 190, 2), new ScheduledTask(418, 600, 0), new ScheduledTask(190, 226, 2), new ScheduledTask(445, 627, 1), new ScheduledTask(226, 317, 2), new ScheduledTask(600, 691, 0), new ScheduledTask(425, 516, 2), new ScheduledTask(319, 410, 3), new ScheduledTask(691, 800, 0), new ScheduledTask(410, 574, 3), new ScheduledTask(607, 734, 2), new ScheduledTask(574, 683, 3), new ScheduledTask(627, 700, 1), new ScheduledTask(800, 873, 0), new ScheduledTask(683, 738, 3)};
        int[] expectedProcessorEndTimes = new int[]{873, 700, 734, 738};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot90_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.90_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 873;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 109, 0), new ScheduledTask(109, 291, 0), new ScheduledTask(0, 91, 1), new ScheduledTask(291, 418, 0), new ScheduledTask(0, 36, 2), new ScheduledTask(299, 445, 1), new ScheduledTask(117, 190, 2), new ScheduledTask(418, 600, 0), new ScheduledTask(190, 226, 2), new ScheduledTask(445, 627, 1), new ScheduledTask(226, 317, 2), new ScheduledTask(600, 691, 0), new ScheduledTask(425, 516, 2), new ScheduledTask(319, 410, 3), new ScheduledTask(691, 800, 0), new ScheduledTask(0, 164, 4), new ScheduledTask(607, 734, 2), new ScheduledTask(41, 150, 5), new ScheduledTask(424, 497, 3), new ScheduledTask(800, 873, 0), new ScheduledTask(609, 664, 3)};
        int[] expectedProcessorEndTimes = new int[]{873, 627, 734, 664, 164, 150};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot95_CCR_1dot01_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.95_CCR_1.01_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 19800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1300, 1320, 0), new ScheduledTask(0, 13, 0), new ScheduledTask(3300, 3316, 0), new ScheduledTask(4900, 4913, 0), new ScheduledTask(0, 11, 1), new ScheduledTask(0, 11, 2), new ScheduledTask(6800, 6809, 0), new ScheduledTask(6900, 6904, 1), new ScheduledTask(7700, 7713, 0), new ScheduledTask(11600, 11607, 0), new ScheduledTask(5600, 5607, 3), new ScheduledTask(9000, 9004, 0), new ScheduledTask(14500, 14511, 0), new ScheduledTask(10000, 10007, 3), new ScheduledTask(12300, 12322, 0), new ScheduledTask(9400, 9422, 0), new ScheduledTask(17600, 17622, 0), new ScheduledTask(15600, 15620, 0), new ScheduledTask(14200, 14209, 3), new ScheduledTask(0, 7, 3), new ScheduledTask(9900, 9904, 2)};
        int[] expectedProcessorEndTimes = new int[]{17622, 6904, 9904, 14209};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot95_CCR_1dot01_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.95_CCR_1.01_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 13700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 20, 0), new ScheduledTask(0, 13, 1), new ScheduledTask(2800, 2816, 0), new ScheduledTask(4400, 4413, 0), new ScheduledTask(0, 11, 2), new ScheduledTask(3200, 3211, 3), new ScheduledTask(5700, 5709, 0), new ScheduledTask(5700, 5704, 1), new ScheduledTask(6600, 6613, 0), new ScheduledTask(7900, 7907, 3), new ScheduledTask(5400, 5407, 3), new ScheduledTask(7900, 7904, 0), new ScheduledTask(10200, 10211, 0), new ScheduledTask(8300, 8307, 0), new ScheduledTask(9300, 9322, 3), new ScheduledTask(8600, 8622, 2), new ScheduledTask(11300, 11322, 0), new ScheduledTask(9700, 9720, 1), new ScheduledTask(1400, 1409, 3), new ScheduledTask(0, 7, 3), new ScheduledTask(7100, 7104, 3)};
        int[] expectedProcessorEndTimes = new int[]{11322, 9720, 8622, 9322};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot95_CCR_1dot01_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.95_CCR_1.01_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 11340;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 20, 0), new ScheduledTask(0, 13, 1), new ScheduledTask(2000, 2016, 0), new ScheduledTask(3600, 3613, 0), new ScheduledTask(0, 11, 2), new ScheduledTask(1400, 1411, 3), new ScheduledTask(4900, 4909, 0), new ScheduledTask(4600, 4604, 1), new ScheduledTask(5800, 5813, 0), new ScheduledTask(5080, 5087, 1), new ScheduledTask(5400, 5407, 3), new ScheduledTask(7100, 7104, 0), new ScheduledTask(7500, 7511, 0), new ScheduledTask(8100, 8107, 1), new ScheduledTask(6820, 6842, 3), new ScheduledTask(7800, 7822, 2), new ScheduledTask(8600, 8622, 0), new ScheduledTask(8940, 8960, 1), new ScheduledTask(3600, 3609, 3), new ScheduledTask(0, 7, 3), new ScheduledTask(5680, 5684, 2)};
        int[] expectedProcessorEndTimes = new int[]{8622, 8960, 7822, 6842};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot95_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.95_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 126;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 20, 0), new ScheduledTask(0, 13, 1), new ScheduledTask(20, 36, 0), new ScheduledTask(36, 49, 0), new ScheduledTask(29, 40, 1), new ScheduledTask(40, 51, 1), new ScheduledTask(49, 58, 0), new ScheduledTask(51, 55, 1), new ScheduledTask(58, 71, 0), new ScheduledTask(55, 62, 1), new ScheduledTask(66, 73, 1), new ScheduledTask(95, 99, 1), new ScheduledTask(71, 82, 0), new ScheduledTask(99, 106, 1), new ScheduledTask(73, 95, 1), new ScheduledTask(104, 126, 0), new ScheduledTask(82, 104, 0), new ScheduledTask(106, 126, 1), new ScheduledTask(20, 29, 1), new ScheduledTask(13, 20, 1), new ScheduledTask(62, 66, 1)};
        int[] expectedProcessorEndTimes = new int[]{126, 126};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot95_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.95_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 107;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 20, 0), new ScheduledTask(0, 13, 1), new ScheduledTask(20, 36, 0), new ScheduledTask(36, 49, 0), new ScheduledTask(0, 11, 2), new ScheduledTask(16, 27, 3), new ScheduledTask(49, 58, 0), new ScheduledTask(50, 54, 1), new ScheduledTask(58, 71, 0), new ScheduledTask(54, 61, 1), new ScheduledTask(43, 50, 1), new ScheduledTask(73, 77, 2), new ScheduledTask(71, 82, 0), new ScheduledTask(80, 87, 2), new ScheduledTask(61, 83, 1), new ScheduledTask(80, 102, 3), new ScheduledTask(82, 104, 0), new ScheduledTask(87, 107, 2), new ScheduledTask(7, 16, 3), new ScheduledTask(0, 7, 3), new ScheduledTask(60, 64, 3)};
        int[] expectedProcessorEndTimes = new int[]{104, 83, 107, 102};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot95_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.95_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 107;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 20, 0), new ScheduledTask(0, 13, 1), new ScheduledTask(20, 36, 0), new ScheduledTask(36, 49, 0), new ScheduledTask(0, 11, 2), new ScheduledTask(0, 11, 3), new ScheduledTask(49, 58, 0), new ScheduledTask(46, 50, 3), new ScheduledTask(58, 71, 0), new ScheduledTask(50, 57, 3), new ScheduledTask(43, 50, 4), new ScheduledTask(76, 80, 5), new ScheduledTask(71, 82, 0), new ScheduledTask(80, 87, 5), new ScheduledTask(66, 88, 4), new ScheduledTask(83, 105, 3), new ScheduledTask(82, 104, 0), new ScheduledTask(87, 107, 5), new ScheduledTask(67, 76, 5), new ScheduledTask(60, 67, 5), new ScheduledTask(56, 60, 5)};
        int[] expectedProcessorEndTimes = new int[]{104, 13, 11, 105, 88, 107};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot95_CCR_10dot00_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.95_CCR_10.00_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(700, 710, 0), new ScheduledTask(1700, 1705, 0), new ScheduledTask(2800, 2809, 0), new ScheduledTask(2200, 2203, 0), new ScheduledTask(5400, 5406, 0), new ScheduledTask(2500, 2503, 0), new ScheduledTask(6000, 6003, 0), new ScheduledTask(6800, 6803, 0), new ScheduledTask(4700, 4707, 0), new ScheduledTask(3700, 3710, 0), new ScheduledTask(3800, 3802, 1), new ScheduledTask(8100, 8103, 0), new ScheduledTask(8400, 8404, 0), new ScheduledTask(5000, 5003, 1), new ScheduledTask(8800, 8804, 0), new ScheduledTask(7100, 7110, 0), new ScheduledTask(6500, 6505, 2), new ScheduledTask(4200, 4205, 3), new ScheduledTask(6300, 6305, 0), new ScheduledTask(9200, 9205, 0)};
        int[] expectedProcessorEndTimes = new int[]{9205, 5003, 6505, 4205};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot95_CCR_10dot00_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.95_CCR_10.00_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(900, 907, 0), new ScheduledTask(2700, 2710, 0), new ScheduledTask(1600, 1605, 0), new ScheduledTask(0, 9, 0), new ScheduledTask(2100, 2103, 0), new ScheduledTask(2400, 2406, 1), new ScheduledTask(2400, 2403, 0), new ScheduledTask(5100, 5103, 0), new ScheduledTask(5900, 5903, 0), new ScheduledTask(1900, 1907, 2), new ScheduledTask(3700, 3710, 0), new ScheduledTask(4700, 4702, 3), new ScheduledTask(6200, 6203, 0), new ScheduledTask(6500, 6504, 0), new ScheduledTask(6100, 6103, 3), new ScheduledTask(7700, 7704, 0), new ScheduledTask(6700, 6710, 3), new ScheduledTask(6400, 6405, 2), new ScheduledTask(5100, 5105, 3), new ScheduledTask(5400, 5405, 0), new ScheduledTask(8100, 8105, 0)};
        int[] expectedProcessorEndTimes = new int[]{8105, 2406, 6405, 6710};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot95_CCR_10dot00_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.95_CCR_10.00_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 7900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(900, 907, 0), new ScheduledTask(2700, 2710, 0), new ScheduledTask(1600, 1605, 0), new ScheduledTask(0, 9, 0), new ScheduledTask(2100, 2103, 0), new ScheduledTask(2400, 2406, 1), new ScheduledTask(2400, 2403, 0), new ScheduledTask(4700, 4703, 0), new ScheduledTask(5500, 5503, 0), new ScheduledTask(1900, 1907, 2), new ScheduledTask(3700, 3710, 0), new ScheduledTask(4700, 4702, 1), new ScheduledTask(5800, 5803, 0), new ScheduledTask(6100, 6104, 0), new ScheduledTask(4940, 4943, 1), new ScheduledTask(6500, 6504, 0), new ScheduledTask(6700, 6710, 1), new ScheduledTask(6400, 6405, 3), new ScheduledTask(5100, 5105, 3), new ScheduledTask(5000, 5005, 0), new ScheduledTask(6900, 6905, 0)};
        int[] expectedProcessorEndTimes = new int[]{6905, 6710, 1907, 6405};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot95_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.95_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 79;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(9, 16, 0), new ScheduledTask(27, 37, 0), new ScheduledTask(16, 21, 0), new ScheduledTask(0, 9, 0), new ScheduledTask(21, 24, 0), new ScheduledTask(26, 32, 1), new ScheduledTask(24, 27, 0), new ScheduledTask(52, 55, 0), new ScheduledTask(60, 63, 0), new ScheduledTask(19, 26, 1), new ScheduledTask(39, 49, 0), new ScheduledTask(37, 39, 0), new ScheduledTask(63, 66, 0), new ScheduledTask(66, 70, 0), new ScheduledTask(49, 52, 0), new ScheduledTask(70, 74, 0), new ScheduledTask(69, 79, 1), new ScheduledTask(64, 69, 1), new ScheduledTask(51, 56, 1), new ScheduledTask(55, 60, 0), new ScheduledTask(74, 79, 0)};
        int[] expectedProcessorEndTimes = new int[]{79, 79};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot95_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.95_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(9, 16, 0), new ScheduledTask(27, 37, 0), new ScheduledTask(16, 21, 0), new ScheduledTask(0, 9, 0), new ScheduledTask(21, 24, 0), new ScheduledTask(24, 30, 1), new ScheduledTask(24, 27, 0), new ScheduledTask(47, 50, 0), new ScheduledTask(55, 58, 0), new ScheduledTask(19, 26, 2), new ScheduledTask(37, 47, 0), new ScheduledTask(47, 49, 3), new ScheduledTask(58, 61, 0), new ScheduledTask(61, 65, 0), new ScheduledTask(49, 52, 3), new ScheduledTask(65, 69, 0), new ScheduledTask(67, 77, 3), new ScheduledTask(64, 69, 2), new ScheduledTask(52, 57, 3), new ScheduledTask(50, 55, 0), new ScheduledTask(69, 74, 0)};
        int[] expectedProcessorEndTimes = new int[]{74, 30, 69, 77};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot95_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.95_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(9, 16, 0), new ScheduledTask(27, 37, 0), new ScheduledTask(16, 21, 0), new ScheduledTask(0, 9, 0), new ScheduledTask(21, 24, 0), new ScheduledTask(24, 30, 1), new ScheduledTask(24, 27, 0), new ScheduledTask(47, 50, 0), new ScheduledTask(55, 58, 0), new ScheduledTask(19, 26, 2), new ScheduledTask(37, 47, 0), new ScheduledTask(47, 49, 3), new ScheduledTask(58, 61, 0), new ScheduledTask(61, 65, 0), new ScheduledTask(49, 52, 3), new ScheduledTask(65, 69, 0), new ScheduledTask(67, 77, 3), new ScheduledTask(64, 69, 4), new ScheduledTask(51, 56, 5), new ScheduledTask(50, 55, 0), new ScheduledTask(69, 74, 0)};
        int[] expectedProcessorEndTimes = new int[]{74, 30, 26, 77, 69, 56};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot95_CCR_10dot02_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.95_CCR_10.02_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(2000, 2009, 0), new ScheduledTask(1300, 1307, 0), new ScheduledTask(300, 310, 0), new ScheduledTask(5800, 5806, 0), new ScheduledTask(2900, 2907, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(3600, 3609, 0), new ScheduledTask(8300, 8302, 0), new ScheduledTask(4500, 4506, 0), new ScheduledTask(0, 4, 2), new ScheduledTask(6900, 6906, 0), new ScheduledTask(8500, 8509, 0), new ScheduledTask(6400, 6405, 0), new ScheduledTask(4600, 4609, 1), new ScheduledTask(4800, 4808, 3), new ScheduledTask(7500, 7508, 0), new ScheduledTask(9400, 9408, 0), new ScheduledTask(5100, 5107, 0), new ScheduledTask(7500, 7504, 2), new ScheduledTask(2400, 2402, 2)};
        int[] expectedProcessorEndTimes = new int[]{9408, 4609, 7504, 4808};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot95_CCR_10dot02_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.95_CCR_10.02_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(2000, 2009, 0), new ScheduledTask(1300, 1307, 0), new ScheduledTask(300, 310, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(2900, 2907, 0), new ScheduledTask(0, 5, 2), new ScheduledTask(3600, 3609, 0), new ScheduledTask(6300, 6302, 0), new ScheduledTask(4500, 4506, 0), new ScheduledTask(0, 4, 3), new ScheduledTask(6400, 6406, 3), new ScheduledTask(6500, 6509, 0), new ScheduledTask(5800, 5805, 0), new ScheduledTask(3000, 3009, 2), new ScheduledTask(4800, 4808, 3), new ScheduledTask(7900, 7908, 3), new ScheduledTask(8700, 8708, 0), new ScheduledTask(5100, 5107, 0), new ScheduledTask(7500, 7504, 2), new ScheduledTask(800, 802, 3)};
        int[] expectedProcessorEndTimes = new int[]{8708, 6, 7504, 7908};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot95_CCR_10dot02_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.95_CCR_10.02_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8860;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1000, 1003, 0), new ScheduledTask(2000, 2009, 0), new ScheduledTask(1300, 1307, 0), new ScheduledTask(0, 10, 0), new ScheduledTask(0, 6, 3), new ScheduledTask(2900, 2907, 0), new ScheduledTask(1200, 1205, 3), new ScheduledTask(3600, 3609, 0), new ScheduledTask(6300, 6302, 0), new ScheduledTask(4500, 4506, 0), new ScheduledTask(2200, 2204, 3), new ScheduledTask(5700, 5706, 1), new ScheduledTask(6500, 6509, 0), new ScheduledTask(5800, 5805, 0), new ScheduledTask(3400, 3409, 3), new ScheduledTask(5800, 5808, 3), new ScheduledTask(7900, 7908, 1), new ScheduledTask(7520, 7528, 0), new ScheduledTask(5100, 5107, 0), new ScheduledTask(7500, 7504, 3), new ScheduledTask(3000, 3002, 3)};
        int[] expectedProcessorEndTimes = new int[]{7528, 7908, 0, 7504};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot95_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.95_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 87;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(17, 20, 0), new ScheduledTask(20, 29, 0), new ScheduledTask(10, 17, 0), new ScheduledTask(0, 10, 0), new ScheduledTask(11, 17, 1), new ScheduledTask(29, 36, 0), new ScheduledTask(6, 11, 1), new ScheduledTask(36, 45, 0), new ScheduledTask(63, 65, 0), new ScheduledTask(45, 51, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(51, 57, 1), new ScheduledTask(65, 74, 0), new ScheduledTask(58, 63, 0), new ScheduledTask(17, 26, 1), new ScheduledTask(65, 73, 1), new ScheduledTask(79, 87, 1), new ScheduledTask(74, 82, 0), new ScheduledTask(51, 58, 0), new ScheduledTask(75, 79, 1), new ScheduledTask(4, 6, 1)};
        int[] expectedProcessorEndTimes = new int[]{82, 87};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot95_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.95_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 87;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(17, 20, 0), new ScheduledTask(20, 29, 0), new ScheduledTask(10, 17, 0), new ScheduledTask(0, 10, 0), new ScheduledTask(5, 11, 1), new ScheduledTask(29, 36, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(36, 45, 0), new ScheduledTask(63, 65, 0), new ScheduledTask(45, 51, 0), new ScheduledTask(0, 4, 2), new ScheduledTask(60, 66, 3), new ScheduledTask(65, 74, 0), new ScheduledTask(58, 63, 0), new ScheduledTask(51, 60, 3), new ScheduledTask(66, 74, 3), new ScheduledTask(79, 87, 3), new ScheduledTask(77, 85, 0), new ScheduledTask(51, 58, 0), new ScheduledTask(75, 79, 3), new ScheduledTask(49, 51, 3)};
        int[] expectedProcessorEndTimes = new int[]{85, 11, 4, 87};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot95_CCR_9dot98_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.95_CCR_9.98_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 11800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 1), new ScheduledTask(4300, 4309, 0), new ScheduledTask(8600, 8602, 0), new ScheduledTask(8800, 8807, 0), new ScheduledTask(0, 3, 0), new ScheduledTask(300, 309, 0), new ScheduledTask(2900, 2909, 0), new ScheduledTask(1800, 1802, 0), new ScheduledTask(9500, 9505, 0), new ScheduledTask(1200, 1206, 0), new ScheduledTask(10000, 10002, 0), new ScheduledTask(3800, 3805, 0), new ScheduledTask(2300, 2303, 2), new ScheduledTask(5200, 5205, 0), new ScheduledTask(5800, 5809, 0), new ScheduledTask(10800, 10810, 0), new ScheduledTask(7600, 7610, 0), new ScheduledTask(2000, 2009, 0), new ScheduledTask(4900, 4909, 3), new ScheduledTask(6700, 6709, 0), new ScheduledTask(10200, 10206, 0)};
        int[] expectedProcessorEndTimes = new int[]{10810, 9, 2303, 4909};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot95_CCR_9dot98_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.95_CCR_9.98_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1800, 1809, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(4600, 4602, 0), new ScheduledTask(5800, 5807, 0), new ScheduledTask(0, 3, 0), new ScheduledTask(300, 309, 0), new ScheduledTask(0, 9, 2), new ScheduledTask(3500, 3502, 3), new ScheduledTask(6500, 6505, 0), new ScheduledTask(1200, 1206, 0), new ScheduledTask(7000, 7002, 0), new ScheduledTask(1800, 1805, 2), new ScheduledTask(2300, 2303, 3), new ScheduledTask(5700, 5705, 3), new ScheduledTask(5200, 5209, 2), new ScheduledTask(4800, 4810, 0), new ScheduledTask(6700, 6710, 3), new ScheduledTask(3900, 3909, 3), new ScheduledTask(2800, 2809, 2), new ScheduledTask(6800, 6809, 1), new ScheduledTask(8100, 8106, 0)};
        int[] expectedProcessorEndTimes = new int[]{8106, 6809, 5209, 6710};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot95_CCR_9dot98_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.95_CCR_9.98_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 7250;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1080, 1089, 1), new ScheduledTask(0, 9, 1), new ScheduledTask(2160, 2162, 1), new ScheduledTask(3600, 3607, 1), new ScheduledTask(0, 3, 0), new ScheduledTask(300, 309, 0), new ScheduledTask(0, 9, 2), new ScheduledTask(1800, 1802, 0), new ScheduledTask(4440, 4445, 1), new ScheduledTask(1200, 1206, 0), new ScheduledTask(6280, 6282, 1), new ScheduledTask(1350, 1355, 2), new ScheduledTask(2300, 2303, 3), new ScheduledTask(4480, 4485, 0), new ScheduledTask(5200, 5209, 1), new ScheduledTask(2400, 2410, 1), new ScheduledTask(5350, 5360, 0), new ScheduledTask(2000, 2009, 0), new ScheduledTask(2900, 2909, 3), new ScheduledTask(6350, 6359, 0), new ScheduledTask(6520, 6526, 1)};
        int[] expectedProcessorEndTimes = new int[]{6359, 6526, 1355, 2909};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot95_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.95_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 74;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(14, 23, 0), new ScheduledTask(3, 12, 1), new ScheduledTask(40, 42, 0), new ScheduledTask(52, 59, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(12, 21, 1), new ScheduledTask(0, 9, 0), new ScheduledTask(30, 32, 1), new ScheduledTask(59, 64, 0), new ScheduledTask(24, 30, 1), new ScheduledTask(64, 66, 0), new ScheduledTask(9, 14, 0), new ScheduledTask(21, 24, 1), new ScheduledTask(41, 46, 1), new ScheduledTask(46, 55, 1), new ScheduledTask(42, 52, 0), new ScheduledTask(64, 74, 1), new ScheduledTask(32, 41, 1), new ScheduledTask(26, 35, 0), new ScheduledTask(55, 64, 1), new ScheduledTask(66, 72, 0)};
        int[] expectedProcessorEndTimes = new int[]{72, 74};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot95_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.95_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(37, 39, 0), new ScheduledTask(49, 56, 0), new ScheduledTask(0, 3, 2), new ScheduledTask(3, 12, 2), new ScheduledTask(0, 9, 3), new ScheduledTask(35, 37, 3), new ScheduledTask(56, 61, 0), new ScheduledTask(12, 18, 2), new ScheduledTask(61, 63, 0), new ScheduledTask(9, 14, 3), new ScheduledTask(23, 26, 3), new ScheduledTask(54, 59, 3), new ScheduledTask(43, 52, 2), new ScheduledTask(39, 49, 0), new ScheduledTask(59, 69, 3), new ScheduledTask(37, 46, 3), new ScheduledTask(26, 35, 3), new ScheduledTask(60, 69, 2), new ScheduledTask(63, 69, 0)};
        int[] expectedProcessorEndTimes = new int[]{69, 9, 69, 69};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_1dot95_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_1.95_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(37, 39, 0), new ScheduledTask(49, 56, 0), new ScheduledTask(0, 3, 2), new ScheduledTask(3, 12, 2), new ScheduledTask(0, 9, 3), new ScheduledTask(35, 37, 4), new ScheduledTask(56, 61, 0), new ScheduledTask(12, 18, 2), new ScheduledTask(61, 63, 0), new ScheduledTask(9, 14, 3), new ScheduledTask(23, 26, 5), new ScheduledTask(54, 59, 4), new ScheduledTask(43, 52, 2), new ScheduledTask(39, 49, 0), new ScheduledTask(59, 69, 4), new ScheduledTask(37, 46, 4), new ScheduledTask(26, 35, 5), new ScheduledTask(60, 69, 5), new ScheduledTask(63, 69, 0)};
        int[] expectedProcessorEndTimes = new int[]{69, 9, 52, 14, 69, 69};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot00_CCR_0dot99_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.00_CCR_0.99_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 18400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 17, 0), new ScheduledTask(3800, 3817, 0), new ScheduledTask(1700, 1710, 0), new ScheduledTask(5500, 5515, 0), new ScheduledTask(2700, 2711, 0), new ScheduledTask(7000, 7019, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(2400, 2419, 1), new ScheduledTask(3300, 3317, 2), new ScheduledTask(8900, 8915, 0), new ScheduledTask(11900, 11913, 0), new ScheduledTask(7500, 7508, 3), new ScheduledTask(10400, 10415, 0), new ScheduledTask(14200, 14210, 0), new ScheduledTask(15200, 15208, 0), new ScheduledTask(14200, 14204, 1), new ScheduledTask(16000, 16010, 0), new ScheduledTask(12300, 12310, 3), new ScheduledTask(17000, 17008, 0), new ScheduledTask(3200, 3206, 3), new ScheduledTask(17800, 17806, 0)};
        int[] expectedProcessorEndTimes = new int[]{17806, 14204, 3317, 12310};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot00_CCR_0dot99_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.00_CCR_0.99_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 12500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(400, 417, 0), new ScheduledTask(0, 17, 1), new ScheduledTask(2100, 2110, 0), new ScheduledTask(4300, 4315, 0), new ScheduledTask(3100, 3111, 0), new ScheduledTask(5800, 5819, 0), new ScheduledTask(0, 4, 0), new ScheduledTask(700, 719, 2), new ScheduledTask(3700, 3717, 3), new ScheduledTask(7700, 7715, 0), new ScheduledTask(7900, 7913, 3), new ScheduledTask(6300, 6308, 2), new ScheduledTask(6500, 6515, 1), new ScheduledTask(7900, 7910, 2), new ScheduledTask(9200, 9208, 0), new ScheduledTask(10500, 10504, 3), new ScheduledTask(10400, 10410, 0), new ScheduledTask(10000, 10010, 2), new ScheduledTask(11500, 11508, 0), new ScheduledTask(4500, 4506, 2), new ScheduledTask(11300, 11306, 3)};
        int[] expectedProcessorEndTimes = new int[]{11508, 6515, 10010, 11306};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot00_CCR_0dot99_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.00_CCR_0.99_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10780;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 17, 0), new ScheduledTask(0, 17, 1), new ScheduledTask(1700, 1710, 0), new ScheduledTask(2100, 2115, 1), new ScheduledTask(2700, 2711, 0), new ScheduledTask(4900, 4919, 0), new ScheduledTask(0, 4, 2), new ScheduledTask(600, 619, 2), new ScheduledTask(3900, 3917, 1), new ScheduledTask(6800, 6815, 0), new ScheduledTask(7000, 7013, 1), new ScheduledTask(4400, 4408, 2), new ScheduledTask(4600, 4615, 3), new ScheduledTask(6640, 6650, 2), new ScheduledTask(8300, 8308, 0), new ScheduledTask(9200, 9204, 1), new ScheduledTask(9100, 9110, 0), new ScheduledTask(9100, 9110, 2), new ScheduledTask(9680, 9688, 1), new ScheduledTask(7600, 7606, 3), new ScheduledTask(10180, 10186, 0)};
        int[] expectedProcessorEndTimes = new int[]{10186, 9688, 9110, 7606};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot00_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.00_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 121;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 17, 0), new ScheduledTask(4, 21, 1), new ScheduledTask(17, 27, 0), new ScheduledTask(21, 36, 1), new ScheduledTask(44, 55, 0), new ScheduledTask(55, 74, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(51, 70, 1), new ScheduledTask(27, 44, 0), new ScheduledTask(74, 89, 0), new ScheduledTask(88, 101, 1), new ScheduledTask(70, 78, 1), new ScheduledTask(36, 51, 1), new ScheduledTask(78, 88, 1), new ScheduledTask(89, 97, 0), new ScheduledTask(101, 105, 1), new ScheduledTask(111, 121, 1), new ScheduledTask(97, 107, 0), new ScheduledTask(107, 115, 0), new ScheduledTask(105, 111, 1), new ScheduledTask(115, 121, 0)};
        int[] expectedProcessorEndTimes = new int[]{121, 121};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot00_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.00_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 103;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 17, 0), new ScheduledTask(0, 17, 1), new ScheduledTask(17, 27, 0), new ScheduledTask(21, 36, 1), new ScheduledTask(27, 38, 0), new ScheduledTask(46, 65, 1), new ScheduledTask(0, 4, 2), new ScheduledTask(7, 26, 3), new ScheduledTask(33, 50, 3), new ScheduledTask(65, 80, 1), new ScheduledTask(73, 86, 3), new ScheduledTask(50, 58, 3), new ScheduledTask(58, 73, 3), new ScheduledTask(62, 72, 2), new ScheduledTask(82, 90, 2), new ScheduledTask(89, 93, 3), new ScheduledTask(90, 100, 2), new ScheduledTask(80, 90, 1), new ScheduledTask(95, 103, 1), new ScheduledTask(32, 38, 2), new ScheduledTask(93, 99, 3)};
        int[] expectedProcessorEndTimes = new int[]{38, 103, 100, 99};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot00_CCR_1dot00_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.00_CCR_1.00_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 17000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(1400, 1411, 0), new ScheduledTask(3400, 3414, 0), new ScheduledTask(3200, 3207, 1), new ScheduledTask(0, 21, 2), new ScheduledTask(0, 11, 3), new ScheduledTask(0, 5, 1), new ScheduledTask(8500, 8509, 0), new ScheduledTask(2500, 2509, 0), new ScheduledTask(4800, 4811, 0), new ScheduledTask(13400, 13418, 0), new ScheduledTask(5900, 5921, 0), new ScheduledTask(9400, 9423, 0), new ScheduledTask(6600, 6605, 3), new ScheduledTask(7400, 7411, 1), new ScheduledTask(11700, 11707, 0), new ScheduledTask(15200, 15218, 0), new ScheduledTask(8000, 8005, 0), new ScheduledTask(9600, 9611, 3), new ScheduledTask(12400, 12409, 0), new ScheduledTask(12600, 12605, 2)};
        int[] expectedProcessorEndTimes = new int[]{15218, 7411, 12605, 9611};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot00_CCR_1dot00_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.00_CCR_1.00_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 11400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(1400, 1411, 0), new ScheduledTask(2500, 2514, 0), new ScheduledTask(3200, 3207, 1), new ScheduledTask(0, 21, 2), new ScheduledTask(0, 11, 3), new ScheduledTask(0, 5, 1), new ScheduledTask(6100, 6109, 0), new ScheduledTask(3000, 3009, 3), new ScheduledTask(3900, 3911, 0), new ScheduledTask(4200, 4218, 2), new ScheduledTask(4800, 4821, 3), new ScheduledTask(7000, 7023, 0), new ScheduledTask(5500, 5505, 1), new ScheduledTask(5000, 5011, 0), new ScheduledTask(6500, 6507, 1), new ScheduledTask(7800, 7818, 2), new ScheduledTask(9000, 9005, 3), new ScheduledTask(7900, 7911, 1), new ScheduledTask(10200, 10209, 0), new ScheduledTask(10100, 10105, 3)};
        int[] expectedProcessorEndTimes = new int[]{10209, 7911, 7818, 10105};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot00_CCR_1dot00_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.00_CCR_1.00_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(1400, 1411, 0), new ScheduledTask(2500, 2514, 0), new ScheduledTask(3200, 3207, 1), new ScheduledTask(750, 771, 2), new ScheduledTask(0, 11, 3), new ScheduledTask(0, 5, 2), new ScheduledTask(4040, 4049, 1), new ScheduledTask(3000, 3009, 3), new ScheduledTask(3900, 3911, 0), new ScheduledTask(3900, 3918, 2), new ScheduledTask(5120, 5141, 1), new ScheduledTask(6100, 6123, 0), new ScheduledTask(4900, 4905, 3), new ScheduledTask(5000, 5011, 0), new ScheduledTask(5900, 5907, 3), new ScheduledTask(6600, 6618, 2), new ScheduledTask(7640, 7645, 1), new ScheduledTask(7300, 7311, 3), new ScheduledTask(8300, 8309, 1), new ScheduledTask(8400, 8405, 0)};
        int[] expectedProcessorEndTimes = new int[]{8405, 8309, 6618, 7311};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot00_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.00_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 123;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(14, 25, 0), new ScheduledTask(25, 39, 0), new ScheduledTask(37, 44, 1), new ScheduledTask(16, 37, 1), new ScheduledTask(5, 16, 1), new ScheduledTask(0, 5, 1), new ScheduledTask(44, 53, 1), new ScheduledTask(50, 59, 0), new ScheduledTask(39, 50, 0), new ScheduledTask(70, 88, 0), new ScheduledTask(53, 74, 1), new ScheduledTask(95, 118, 1), new ScheduledTask(79, 84, 1), new ScheduledTask(84, 95, 1), new ScheduledTask(88, 95, 0), new ScheduledTask(104, 122, 0), new ScheduledTask(74, 79, 1), new ScheduledTask(59, 70, 0), new ScheduledTask(95, 104, 0), new ScheduledTask(118, 123, 1)};
        int[] expectedProcessorEndTimes = new int[]{122, 123};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot00_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.00_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 83;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(14, 25, 0), new ScheduledTask(25, 39, 0), new ScheduledTask(39, 46, 1), new ScheduledTask(0, 21, 2), new ScheduledTask(0, 11, 3), new ScheduledTask(0, 5, 1), new ScheduledTask(46, 55, 1), new ScheduledTask(30, 39, 1), new ScheduledTask(39, 50, 0), new ScheduledTask(29, 47, 3), new ScheduledTask(48, 69, 3), new ScheduledTask(55, 78, 1), new ScheduledTask(49, 54, 2), new ScheduledTask(50, 61, 0), new ScheduledTask(54, 61, 2), new ScheduledTask(65, 83, 2), new ScheduledTask(69, 74, 3), new ScheduledTask(61, 72, 0), new ScheduledTask(74, 83, 3), new ScheduledTask(78, 83, 1)};
        int[] expectedProcessorEndTimes = new int[]{72, 83, 83, 83};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot00_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.00_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 83;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(14, 25, 0), new ScheduledTask(25, 39, 0), new ScheduledTask(32, 39, 1), new ScheduledTask(0, 21, 2), new ScheduledTask(0, 11, 3), new ScheduledTask(0, 5, 4), new ScheduledTask(39, 48, 1), new ScheduledTask(30, 39, 5), new ScheduledTask(39, 50, 0), new ScheduledTask(28, 46, 2), new ScheduledTask(48, 69, 4), new ScheduledTask(48, 71, 1), new ScheduledTask(49, 54, 5), new ScheduledTask(50, 61, 0), new ScheduledTask(54, 61, 5), new ScheduledTask(65, 83, 5), new ScheduledTask(69, 74, 4), new ScheduledTask(45, 56, 3), new ScheduledTask(74, 83, 4), new ScheduledTask(71, 76, 1)};
        int[] expectedProcessorEndTimes = new int[]{61, 76, 46, 56, 83, 83};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot00_CCR_1dot01_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.00_CCR_1.01_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 15000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(2700, 2710, 0), new ScheduledTask(5900, 5914, 0), new ScheduledTask(4800, 4811, 0), new ScheduledTask(1300, 1311, 2), new ScheduledTask(7300, 7311, 0), new ScheduledTask(1000, 1003, 0), new ScheduledTask(8400, 8410, 0), new ScheduledTask(1300, 1314, 0), new ScheduledTask(10700, 10706, 0), new ScheduledTask(11300, 11311, 0), new ScheduledTask(3700, 3711, 0), new ScheduledTask(9400, 9413, 0), new ScheduledTask(12400, 12411, 0), new ScheduledTask(0, 16, 3), new ScheduledTask(5500, 5514, 1), new ScheduledTask(14000, 14010, 0), new ScheduledTask(7900, 7910, 2), new ScheduledTask(13500, 13505, 0), new ScheduledTask(11600, 11603, 3)};
        int[] expectedProcessorEndTimes = new int[]{14010, 5514, 7910, 11603};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot00_CCR_1dot01_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.00_CCR_1.01_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(1300, 1314, 1), new ScheduledTask(2400, 2411, 0), new ScheduledTask(1000, 1011, 0), new ScheduledTask(4500, 4511, 0), new ScheduledTask(0, 3, 3), new ScheduledTask(3500, 3510, 0), new ScheduledTask(600, 614, 3), new ScheduledTask(5600, 5606, 0), new ScheduledTask(6200, 6211, 0), new ScheduledTask(3400, 3411, 3), new ScheduledTask(5600, 5613, 3), new ScheduledTask(7300, 7311, 0), new ScheduledTask(2000, 2016, 2), new ScheduledTask(6300, 6314, 2), new ScheduledTask(8400, 8410, 0), new ScheduledTask(4100, 4110, 1), new ScheduledTask(8800, 8805, 3), new ScheduledTask(8200, 8203, 3)};
        int[] expectedProcessorEndTimes = new int[]{8410, 4110, 6314, 8805};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot00_CCR_1dot01_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.00_CCR_1.01_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 5, 2), new ScheduledTask(0, 10, 1), new ScheduledTask(2100, 2114, 0), new ScheduledTask(1550, 1561, 1), new ScheduledTask(1000, 1011, 0), new ScheduledTask(3500, 3511, 0), new ScheduledTask(0, 3, 3), new ScheduledTask(2870, 2880, 1), new ScheduledTask(600, 614, 3), new ScheduledTask(4600, 4606, 0), new ScheduledTask(5200, 5211, 0), new ScheduledTask(3400, 3411, 3), new ScheduledTask(5400, 5413, 2), new ScheduledTask(6300, 6311, 0), new ScheduledTask(3000, 3016, 2), new ScheduledTask(5600, 5614, 3), new ScheduledTask(7400, 7410, 0), new ScheduledTask(1500, 1510, 2), new ScheduledTask(7800, 7805, 1), new ScheduledTask(7350, 7353, 2)};
        int[] expectedProcessorEndTimes = new int[]{7410, 7805, 7353, 5614};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot00_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.00_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 105;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(5, 15, 1), new ScheduledTask(18, 32, 1), new ScheduledTask(21, 32, 0), new ScheduledTask(10, 21, 0), new ScheduledTask(32, 43, 1), new ScheduledTask(15, 18, 1), new ScheduledTask(32, 42, 0), new ScheduledTask(42, 56, 0), new ScheduledTask(44, 50, 1), new ScheduledTask(56, 67, 0), new ScheduledTask(66, 77, 1), new ScheduledTask(77, 90, 1), new ScheduledTask(67, 78, 0), new ScheduledTask(50, 66, 1), new ScheduledTask(88, 102, 0), new ScheduledTask(95, 105, 1), new ScheduledTask(78, 88, 0), new ScheduledTask(90, 95, 1), new ScheduledTask(102, 105, 0)};
        int[] expectedProcessorEndTimes = new int[]{105, 105};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot00_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.00_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(13, 27, 3), new ScheduledTask(14, 25, 1), new ScheduledTask(10, 21, 0), new ScheduledTask(27, 38, 3), new ScheduledTask(0, 3, 3), new ScheduledTask(26, 36, 1), new ScheduledTask(20, 34, 2), new ScheduledTask(38, 44, 3), new ScheduledTask(44, 55, 3), new ScheduledTask(34, 45, 2), new ScheduledTask(45, 58, 2), new ScheduledTask(55, 66, 3), new ScheduledTask(58, 74, 2), new ScheduledTask(52, 66, 1), new ScheduledTask(66, 76, 3), new ScheduledTask(10, 20, 2), new ScheduledTask(70, 75, 1), new ScheduledTask(67, 70, 1)};
        int[] expectedProcessorEndTimes = new int[]{21, 75, 74, 76};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot00_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.00_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(13, 27, 3), new ScheduledTask(14, 25, 4), new ScheduledTask(10, 21, 0), new ScheduledTask(27, 38, 3), new ScheduledTask(16, 19, 5), new ScheduledTask(26, 36, 4), new ScheduledTask(19, 33, 5), new ScheduledTask(38, 44, 3), new ScheduledTask(44, 55, 3), new ScheduledTask(33, 44, 5), new ScheduledTask(44, 57, 5), new ScheduledTask(55, 66, 3), new ScheduledTask(0, 16, 5), new ScheduledTask(57, 71, 5), new ScheduledTask(66, 76, 3), new ScheduledTask(36, 46, 4), new ScheduledTask(71, 76, 5), new ScheduledTask(66, 69, 4)};
        int[] expectedProcessorEndTimes = new int[]{21, 5, 10, 76, 69, 76};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot10_CCR_1dot01_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.10_CCR_1.01_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 16500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1400, 1406, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(3300, 3319, 0), new ScheduledTask(1500, 1509, 1), new ScheduledTask(2000, 2013, 0), new ScheduledTask(0, 13, 2), new ScheduledTask(5200, 5207, 0), new ScheduledTask(7800, 7813, 0), new ScheduledTask(0, 11, 3), new ScheduledTask(10200, 10217, 0), new ScheduledTask(700, 707, 0), new ScheduledTask(9100, 9111, 0), new ScheduledTask(5900, 5919, 0), new ScheduledTask(11900, 11917, 0), new ScheduledTask(6600, 6611, 3), new ScheduledTask(6900, 6907, 1), new ScheduledTask(13600, 13609, 0), new ScheduledTask(11100, 11106, 1), new ScheduledTask(14500, 14511, 0), new ScheduledTask(15600, 15609, 0), new ScheduledTask(12200, 12206, 2)};
        int[] expectedProcessorEndTimes = new int[]{15609, 11106, 12206, 6611};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot10_CCR_1dot01_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.10_CCR_1.01_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 11200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(600, 619, 0), new ScheduledTask(2500, 2509, 0), new ScheduledTask(2200, 2213, 2), new ScheduledTask(0, 13, 3), new ScheduledTask(2900, 2907, 3), new ScheduledTask(3400, 3413, 0), new ScheduledTask(0, 11, 2), new ScheduledTask(5800, 5817, 0), new ScheduledTask(1400, 1407, 1), new ScheduledTask(4700, 4711, 0), new ScheduledTask(4300, 4319, 3), new ScheduledTask(7500, 7517, 0), new ScheduledTask(6200, 6211, 2), new ScheduledTask(4800, 4807, 2), new ScheduledTask(9200, 9209, 0), new ScheduledTask(8100, 8106, 3), new ScheduledTask(10100, 10111, 0), new ScheduledTask(9300, 9309, 3), new ScheduledTask(8400, 8406, 2)};
        int[] expectedProcessorEndTimes = new int[]{10111, 1407, 8406, 9309};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot10_CCR_1dot01_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.10_CCR_1.01_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 1), new ScheduledTask(0, 7, 0), new ScheduledTask(720, 739, 1), new ScheduledTask(700, 709, 0), new ScheduledTask(2900, 2913, 0), new ScheduledTask(0, 13, 2), new ScheduledTask(3000, 3007, 1), new ScheduledTask(1600, 1613, 0), new ScheduledTask(1400, 1411, 3), new ScheduledTask(4200, 4217, 0), new ScheduledTask(0, 7, 3), new ScheduledTask(4000, 4011, 2), new ScheduledTask(3840, 3859, 1), new ScheduledTask(5900, 5917, 0), new ScheduledTask(5000, 5011, 3), new ScheduledTask(3600, 3607, 3), new ScheduledTask(7600, 7609, 0), new ScheduledTask(7120, 7126, 2), new ScheduledTask(8500, 8511, 0), new ScheduledTask(8020, 8029, 2), new ScheduledTask(7200, 7206, 3)};
        int[] expectedProcessorEndTimes = new int[]{8511, 3859, 8029, 7206};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot10_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.10_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 114;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(20, 26, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(26, 45, 0), new ScheduledTask(18, 27, 1), new ScheduledTask(40, 53, 1), new ScheduledTask(7, 20, 0), new ScheduledTask(53, 60, 1), new ScheduledTask(27, 40, 1), new ScheduledTask(7, 18, 1), new ScheduledTask(60, 77, 1), new ScheduledTask(0, 7, 1), new ScheduledTask(56, 67, 0), new ScheduledTask(67, 86, 0), new ScheduledTask(77, 94, 1), new ScheduledTask(45, 56, 0), new ScheduledTask(86, 93, 0), new ScheduledTask(94, 103, 1), new ScheduledTask(99, 105, 0), new ScheduledTask(103, 114, 1), new ScheduledTask(105, 114, 0), new ScheduledTask(93, 99, 0)};
        int[] expectedProcessorEndTimes = new int[]{114, 114};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot10_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.10_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 89;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(6, 25, 0), new ScheduledTask(7, 16, 1), new ScheduledTask(16, 29, 1), new ScheduledTask(0, 13, 2), new ScheduledTask(25, 32, 0), new ScheduledTask(22, 35, 2), new ScheduledTask(0, 11, 3), new ScheduledTask(35, 52, 1), new ScheduledTask(11, 18, 3), new ScheduledTask(35, 46, 2), new ScheduledTask(32, 51, 0), new ScheduledTask(52, 69, 1), new ScheduledTask(18, 29, 3), new ScheduledTask(29, 36, 3), new ScheduledTask(69, 78, 1), new ScheduledTask(51, 57, 0), new ScheduledTask(78, 89, 1), new ScheduledTask(57, 66, 0), new ScheduledTask(55, 61, 2)};
        int[] expectedProcessorEndTimes = new int[]{66, 89, 61, 36};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot10_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.10_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 89;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(6, 25, 0), new ScheduledTask(7, 16, 1), new ScheduledTask(16, 29, 1), new ScheduledTask(0, 13, 2), new ScheduledTask(25, 32, 0), new ScheduledTask(22, 35, 2), new ScheduledTask(0, 11, 3), new ScheduledTask(35, 52, 1), new ScheduledTask(0, 7, 4), new ScheduledTask(35, 46, 2), new ScheduledTask(32, 51, 0), new ScheduledTask(52, 69, 1), new ScheduledTask(11, 22, 3), new ScheduledTask(12, 19, 4), new ScheduledTask(69, 78, 1), new ScheduledTask(51, 57, 0), new ScheduledTask(78, 89, 1), new ScheduledTask(57, 66, 0), new ScheduledTask(55, 61, 2)};
        int[] expectedProcessorEndTimes = new int[]{66, 89, 61, 22, 19};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot10_CCR_9dot99_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.10_CCR_9.99_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 13300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1000, 1009, 0), new ScheduledTask(4600, 4606, 0), new ScheduledTask(5200, 5208, 0), new ScheduledTask(1900, 1910, 0), new ScheduledTask(2900, 2909, 0), new ScheduledTask(0, 10, 0), new ScheduledTask(10300, 10303, 0), new ScheduledTask(7600, 7607, 0), new ScheduledTask(3800, 3808, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(11100, 11102, 0), new ScheduledTask(8300, 8310, 0), new ScheduledTask(6000, 6009, 0), new ScheduledTask(11300, 11308, 0), new ScheduledTask(9300, 9310, 0), new ScheduledTask(12100, 12106, 0), new ScheduledTask(7400, 7408, 1), new ScheduledTask(8100, 8108, 2), new ScheduledTask(6900, 6907, 0), new ScheduledTask(12700, 12706, 0), new ScheduledTask(10600, 10605, 0)};
        int[] expectedProcessorEndTimes = new int[]{12706, 7408, 8108};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot10_CCR_9dot99_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.10_CCR_9.99_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(900, 906, 0), new ScheduledTask(5900, 5908, 0), new ScheduledTask(3200, 3210, 0), new ScheduledTask(4200, 4209, 0), new ScheduledTask(1200, 1210, 1), new ScheduledTask(7600, 7603, 0), new ScheduledTask(1500, 1507, 0), new ScheduledTask(5100, 5108, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(8600, 8602, 0), new ScheduledTask(2200, 2210, 0), new ScheduledTask(6700, 6709, 0), new ScheduledTask(8800, 8808, 0), new ScheduledTask(7400, 7410, 1), new ScheduledTask(9600, 9606, 0), new ScheduledTask(8700, 8708, 2), new ScheduledTask(8800, 8808, 3), new ScheduledTask(7900, 7907, 0), new ScheduledTask(10200, 10206, 0), new ScheduledTask(9700, 9705, 1)};
        int[] expectedProcessorEndTimes = new int[]{10206, 9705, 8708, 8808};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot10_CCR_9dot99_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.10_CCR_9.99_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(1900, 1906, 0), new ScheduledTask(4200, 4208, 0), new ScheduledTask(900, 910, 0), new ScheduledTask(3100, 3109, 2), new ScheduledTask(0, 10, 3), new ScheduledTask(5900, 5903, 0), new ScheduledTask(2500, 2507, 0), new ScheduledTask(6250, 6258, 0), new ScheduledTask(2000, 2006, 3), new ScheduledTask(7750, 7752, 0), new ScheduledTask(3200, 3210, 0), new ScheduledTask(5000, 5009, 0), new ScheduledTask(7950, 7958, 0), new ScheduledTask(8400, 8410, 1), new ScheduledTask(8750, 8756, 0), new ScheduledTask(8850, 8858, 2), new ScheduledTask(7100, 7108, 3), new ScheduledTask(7050, 7057, 0), new ScheduledTask(9350, 9356, 0), new ScheduledTask(9600, 9605, 1)};
        int[] expectedProcessorEndTimes = new int[]{9356, 9605, 8858, 7108};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot10_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.10_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(19, 25, 0), new ScheduledTask(42, 50, 0), new ScheduledTask(9, 19, 0), new ScheduledTask(31, 40, 1), new ScheduledTask(6, 16, 1), new ScheduledTask(66, 69, 0), new ScheduledTask(25, 32, 0), new ScheduledTask(40, 48, 1), new ScheduledTask(0, 6, 1), new ScheduledTask(78, 80, 0), new ScheduledTask(32, 42, 0), new ScheduledTask(50, 59, 0), new ScheduledTask(80, 88, 0), new ScheduledTask(84, 94, 1), new ScheduledTask(88, 94, 0), new ScheduledTask(48, 56, 1), new ScheduledTask(71, 79, 1), new ScheduledTask(59, 66, 0), new ScheduledTask(94, 100, 0), new ScheduledTask(94, 99, 1)};
        int[] expectedProcessorEndTimes = new int[]{100, 99};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot10_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.10_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 99;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 15, 0), new ScheduledTask(33, 41, 1), new ScheduledTask(22, 32, 0), new ScheduledTask(44, 53, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(41, 44, 1), new ScheduledTask(15, 22, 0), new ScheduledTask(53, 61, 1), new ScheduledTask(0, 6, 3), new ScheduledTask(77, 79, 1), new ScheduledTask(32, 42, 0), new ScheduledTask(61, 70, 1), new ScheduledTask(79, 87, 1), new ScheduledTask(84, 94, 3), new ScheduledTask(87, 93, 1), new ScheduledTask(90, 98, 2), new ScheduledTask(82, 90, 2), new ScheduledTask(70, 77, 1), new ScheduledTask(93, 99, 1), new ScheduledTask(94, 99, 3)};
        int[] expectedProcessorEndTimes = new int[]{42, 99, 98, 99};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot10_CCR_9dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.10_CCR_9.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 99;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 15, 0), new ScheduledTask(33, 41, 1), new ScheduledTask(22, 32, 0), new ScheduledTask(44, 53, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(41, 44, 1), new ScheduledTask(15, 22, 0), new ScheduledTask(53, 61, 1), new ScheduledTask(0, 6, 3), new ScheduledTask(77, 79, 1), new ScheduledTask(32, 42, 0), new ScheduledTask(61, 70, 1), new ScheduledTask(79, 87, 1), new ScheduledTask(84, 94, 4), new ScheduledTask(87, 93, 1), new ScheduledTask(90, 98, 5), new ScheduledTask(82, 90, 5), new ScheduledTask(70, 77, 1), new ScheduledTask(93, 99, 1), new ScheduledTask(94, 99, 4)};
        int[] expectedProcessorEndTimes = new int[]{42, 99, 10, 6, 99, 98};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot14_CCR_0dot10_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.14_CCR_0.10_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 190800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 95, 0), new ScheduledTask(9500, 9595, 0), new ScheduledTask(0, 95, 1), new ScheduledTask(19700, 19748, 2), new ScheduledTask(59400, 59519, 0), new ScheduledTask(19000, 19119, 0), new ScheduledTask(71300, 71443, 0), new ScheduledTask(57000, 57048, 1), new ScheduledTask(86100, 86148, 0), new ScheduledTask(49900, 49995, 0), new ScheduledTask(72000, 72048, 3), new ScheduledTask(114700, 114938, 0), new ScheduledTask(59900, 60019, 2), new ScheduledTask(155100, 155338, 0), new ScheduledTask(138500, 138666, 0), new ScheduledTask(30900, 31090, 0), new ScheduledTask(90900, 91138, 0), new ScheduledTask(100800, 100919, 3), new ScheduledTask(178900, 179019, 0), new ScheduledTask(131300, 131395, 2), new ScheduledTask(101400, 101448, 1)};
        int[] expectedProcessorEndTimes = new int[]{179019, 101448, 131395, 100919};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot14_CCR_0dot10_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.14_CCR_0.10_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 114800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 95, 0), new ScheduledTask(9500, 9595, 0), new ScheduledTask(0, 95, 1), new ScheduledTask(19000, 19048, 0), new ScheduledTask(24200, 24319, 1), new ScheduledTask(9700, 9819, 2), new ScheduledTask(48200, 48343, 0), new ScheduledTask(34300, 34348, 3), new ScheduledTask(43900, 43948, 3), new ScheduledTask(23800, 23895, 0), new ScheduledTask(48000, 48048, 1), new ScheduledTask(62500, 62738, 0), new ScheduledTask(34100, 34219, 0), new ScheduledTask(53500, 53738, 3), new ScheduledTask(86300, 86466, 0), new ScheduledTask(33500, 33690, 2), new ScheduledTask(57600, 57838, 1), new ScheduledTask(90500, 90619, 2), new ScheduledTask(102900, 103019, 0), new ScheduledTask(71500, 71595, 2), new ScheduledTask(101100, 101148, 3)};
        int[] expectedProcessorEndTimes = new int[]{103019, 57838, 90619, 101148};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot14_CCR_0dot10_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.14_CCR_0.10_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 102300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 95, 0), new ScheduledTask(9500, 9595, 0), new ScheduledTask(0, 95, 1), new ScheduledTask(19000, 19048, 0), new ScheduledTask(23800, 23919, 0), new ScheduledTask(11400, 11519, 1), new ScheduledTask(35700, 35843, 0), new ScheduledTask(25680, 25728, 1), new ScheduledTask(31440, 31488, 1), new ScheduledTask(24500, 24595, 2), new ScheduledTask(37200, 37248, 1), new ScheduledTask(50000, 50238, 0), new ScheduledTask(38750, 38869, 2), new ScheduledTask(56900, 57138, 1), new ScheduledTask(73800, 73966, 0), new ScheduledTask(26380, 26570, 3), new ScheduledTask(56600, 56838, 2), new ScheduledTask(64380, 64499, 3), new ScheduledTask(90400, 90519, 0), new ScheduledTask(85460, 85555, 1), new ScheduledTask(88180, 88228, 3)};
        int[] expectedProcessorEndTimes = new int[]{90519, 85555, 56838, 88228};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot14_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.14_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1263;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 95, 0), new ScheduledTask(95, 190, 0), new ScheduledTask(0, 95, 1), new ScheduledTask(190, 238, 0), new ScheduledTask(334, 453, 0), new ScheduledTask(97, 216, 1), new ScheduledTask(501, 644, 1), new ScheduledTask(238, 286, 0), new ScheduledTask(286, 334, 0), new ScheduledTask(406, 501, 1), new ScheduledTask(453, 501, 0), new ScheduledTask(644, 882, 1), new ScheduledTask(787, 906, 0), new ScheduledTask(906, 1144, 0), new ScheduledTask(882, 1048, 1), new ScheduledTask(216, 406, 1), new ScheduledTask(549, 787, 0), new ScheduledTask(1143, 1262, 1), new ScheduledTask(1144, 1263, 0), new ScheduledTask(1048, 1143, 1), new ScheduledTask(501, 549, 0)};
        int[] expectedProcessorEndTimes = new int[]{1263, 1262};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot14_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.14_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1023;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 95, 0), new ScheduledTask(95, 190, 0), new ScheduledTask(0, 95, 1), new ScheduledTask(190, 238, 0), new ScheduledTask(238, 357, 0), new ScheduledTask(97, 216, 1), new ScheduledTask(357, 500, 0), new ScheduledTask(216, 264, 1), new ScheduledTask(264, 312, 1), new ScheduledTask(245, 340, 2), new ScheduledTask(364, 412, 1), new ScheduledTask(500, 738, 0), new ScheduledTask(340, 459, 2), new ScheduledTask(459, 697, 2), new ScheduledTask(738, 904, 0), new ScheduledTask(223, 413, 3), new ScheduledTask(412, 650, 1), new ScheduledTask(413, 532, 3), new ScheduledTask(904, 1023, 0), new ScheduledTask(532, 627, 3), new ScheduledTask(627, 675, 3)};
        int[] expectedProcessorEndTimes = new int[]{1023, 650, 697, 675};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot14_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.14_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 1023;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 95, 0), new ScheduledTask(95, 190, 0), new ScheduledTask(0, 95, 1), new ScheduledTask(190, 238, 0), new ScheduledTask(238, 357, 0), new ScheduledTask(97, 216, 1), new ScheduledTask(357, 500, 0), new ScheduledTask(216, 264, 1), new ScheduledTask(264, 312, 1), new ScheduledTask(245, 340, 2), new ScheduledTask(364, 412, 1), new ScheduledTask(500, 738, 0), new ScheduledTask(340, 459, 2), new ScheduledTask(459, 697, 2), new ScheduledTask(738, 904, 0), new ScheduledTask(223, 413, 3), new ScheduledTask(361, 599, 4), new ScheduledTask(322, 441, 5), new ScheduledTask(904, 1023, 0), new ScheduledTask(413, 508, 3), new ScheduledTask(412, 460, 1)};
        int[] expectedProcessorEndTimes = new int[]{1023, 460, 697, 508, 599, 441};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot14_CCR_1dot00_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.14_CCR_1.00_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 21500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1600, 1613, 0), new ScheduledTask(0, 16, 0), new ScheduledTask(2900, 2921, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(2300, 2308, 2), new ScheduledTask(5000, 5021, 0), new ScheduledTask(10000, 10027, 0), new ScheduledTask(12700, 12727, 0), new ScheduledTask(7100, 7105, 0), new ScheduledTask(7100, 7105, 2), new ScheduledTask(7600, 7624, 0), new ScheduledTask(15400, 15419, 0), new ScheduledTask(13400, 13408, 3), new ScheduledTask(2400, 2411, 3), new ScheduledTask(3700, 3711, 1), new ScheduledTask(17300, 17321, 0), new ScheduledTask(19400, 19421, 0), new ScheduledTask(10800, 10816, 2), new ScheduledTask(15100, 15108, 1), new ScheduledTask(10300, 10308, 1), new ScheduledTask(18200, 18205, 3)};
        int[] expectedProcessorEndTimes = new int[]{19421, 15108, 10816, 18205};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot14_CCR_1dot00_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.14_CCR_1.00_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 14000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 13, 0), new ScheduledTask(0, 16, 1), new ScheduledTask(1300, 1321, 0), new ScheduledTask(0, 5, 2), new ScheduledTask(3900, 3908, 0), new ScheduledTask(1700, 1721, 3), new ScheduledTask(4700, 4727, 0), new ScheduledTask(4200, 4227, 1), new ScheduledTask(5900, 5905, 3), new ScheduledTask(6900, 6905, 3), new ScheduledTask(7600, 7624, 0), new ScheduledTask(10000, 10019, 0), new ScheduledTask(8100, 8108, 3), new ScheduledTask(5900, 5911, 2), new ScheduledTask(2100, 2111, 2), new ScheduledTask(11900, 11921, 0), new ScheduledTask(9700, 9721, 3), new ScheduledTask(10800, 10816, 2), new ScheduledTask(8100, 8108, 2), new ScheduledTask(4300, 4308, 2), new ScheduledTask(12100, 12105, 1)};
        int[] expectedProcessorEndTimes = new int[]{11921, 12105, 10816, 9721};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot14_CCR_1dot00_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.14_CCR_1.00_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10650;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 13, 0), new ScheduledTask(0, 16, 1), new ScheduledTask(1300, 1321, 0), new ScheduledTask(0, 5, 2), new ScheduledTask(1920, 1928, 1), new ScheduledTask(750, 771, 2), new ScheduledTask(2880, 2907, 1), new ScheduledTask(3400, 3427, 0), new ScheduledTask(3900, 3905, 2), new ScheduledTask(4300, 4305, 3), new ScheduledTask(4650, 4674, 2), new ScheduledTask(6620, 6639, 0), new ScheduledTask(7080, 7088, 1), new ScheduledTask(5300, 5311, 3), new ScheduledTask(2100, 2111, 3), new ScheduledTask(8520, 8541, 0), new ScheduledTask(8040, 8061, 1), new ScheduledTask(8250, 8266, 2), new ScheduledTask(7500, 7508, 3), new ScheduledTask(6120, 6128, 1), new ScheduledTask(9100, 9105, 3)};
        int[] expectedProcessorEndTimes = new int[]{8541, 8061, 8266, 9105};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot14_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.14_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 150;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(26, 39, 0), new ScheduledTask(0, 16, 1), new ScheduledTask(39, 60, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(27, 35, 1), new ScheduledTask(5, 26, 0), new ScheduledTask(40, 67, 1), new ScheduledTask(60, 87, 0), new ScheduledTask(35, 40, 1), new ScheduledTask(78, 83, 1), new ScheduledTask(110, 134, 1), new ScheduledTask(91, 110, 1), new ScheduledTask(83, 91, 1), new ScheduledTask(16, 27, 1), new ScheduledTask(67, 78, 1), new ScheduledTask(129, 150, 0), new ScheduledTask(103, 124, 0), new ScheduledTask(134, 150, 1), new ScheduledTask(95, 103, 0), new ScheduledTask(87, 95, 0), new ScheduledTask(124, 129, 0)};
        int[] expectedProcessorEndTimes = new int[]{150, 150};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot14_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.14_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 101;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 13, 0), new ScheduledTask(0, 16, 1), new ScheduledTask(13, 34, 0), new ScheduledTask(0, 5, 2), new ScheduledTask(16, 24, 1), new ScheduledTask(5, 26, 2), new ScheduledTask(24, 51, 1), new ScheduledTask(34, 61, 0), new ScheduledTask(26, 31, 2), new ScheduledTask(34, 39, 2), new ScheduledTask(38, 62, 3), new ScheduledTask(61, 80, 0), new ScheduledTask(51, 59, 1), new ScheduledTask(39, 50, 2), new ScheduledTask(50, 61, 2), new ScheduledTask(80, 101, 0), new ScheduledTask(59, 80, 1), new ScheduledTask(62, 78, 3), new ScheduledTask(61, 69, 2), new ScheduledTask(69, 77, 2), new ScheduledTask(82, 87, 1)};
        int[] expectedProcessorEndTimes = new int[]{101, 87, 77, 78};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot14_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.14_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 101;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 13, 0), new ScheduledTask(0, 16, 1), new ScheduledTask(13, 34, 0), new ScheduledTask(0, 5, 2), new ScheduledTask(16, 24, 1), new ScheduledTask(5, 26, 2), new ScheduledTask(24, 51, 1), new ScheduledTask(34, 61, 0), new ScheduledTask(26, 31, 2), new ScheduledTask(34, 39, 2), new ScheduledTask(38, 62, 3), new ScheduledTask(61, 80, 0), new ScheduledTask(51, 59, 1), new ScheduledTask(24, 35, 4), new ScheduledTask(21, 32, 5), new ScheduledTask(80, 101, 0), new ScheduledTask(59, 80, 1), new ScheduledTask(62, 78, 3), new ScheduledTask(54, 62, 2), new ScheduledTask(32, 40, 5), new ScheduledTask(82, 87, 1)};
        int[] expectedProcessorEndTimes = new int[]{101, 87, 62, 78, 35, 40};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot14_CCR_9dot98_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.14_CCR_9.98_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 98;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(16, 25, 0), new ScheduledTask(25, 35, 0), new ScheduledTask(8, 11, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(14, 16, 0), new ScheduledTask(42, 45, 0), new ScheduledTask(7, 11, 1), new ScheduledTask(45, 50, 0), new ScheduledTask(50, 56, 0), new ScheduledTask(11, 14, 0), new ScheduledTask(72, 76, 0), new ScheduledTask(56, 62, 0), new ScheduledTask(76, 85, 0), new ScheduledTask(35, 44, 1), new ScheduledTask(35, 42, 0), new ScheduledTask(62, 72, 0), new ScheduledTask(85, 94, 0), new ScheduledTask(58, 68, 2), new ScheduledTask(94, 98, 0), new ScheduledTask(65, 67, 3)};
        int[] expectedProcessorEndTimes = new int[]{98, 44, 68, 67};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot14_CCR_9dot98_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.14_CCR_9.98_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 98;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(16, 25, 0), new ScheduledTask(25, 35, 0), new ScheduledTask(8, 11, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(14, 16, 0), new ScheduledTask(42, 45, 0), new ScheduledTask(7, 11, 1), new ScheduledTask(45, 50, 0), new ScheduledTask(50, 56, 0), new ScheduledTask(11, 14, 0), new ScheduledTask(72, 76, 0), new ScheduledTask(56, 62, 0), new ScheduledTask(76, 85, 0), new ScheduledTask(35, 44, 1), new ScheduledTask(35, 42, 0), new ScheduledTask(62, 72, 0), new ScheduledTask(85, 94, 0), new ScheduledTask(67, 77, 1), new ScheduledTask(94, 98, 0), new ScheduledTask(65, 67, 1)};
        int[] expectedProcessorEndTimes = new int[]{98, 77};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot14_CCR_9dot98_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.14_CCR_9.98_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 98;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(16, 25, 0), new ScheduledTask(25, 35, 0), new ScheduledTask(8, 11, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(14, 16, 0), new ScheduledTask(42, 45, 0), new ScheduledTask(7, 11, 1), new ScheduledTask(45, 50, 0), new ScheduledTask(50, 56, 0), new ScheduledTask(11, 14, 0), new ScheduledTask(72, 76, 0), new ScheduledTask(56, 62, 0), new ScheduledTask(76, 85, 0), new ScheduledTask(35, 44, 2), new ScheduledTask(35, 42, 0), new ScheduledTask(62, 72, 0), new ScheduledTask(85, 94, 0), new ScheduledTask(67, 77, 3), new ScheduledTask(94, 98, 0), new ScheduledTask(65, 67, 3)};
        int[] expectedProcessorEndTimes = new int[]{98, 11, 44, 77};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot14_CCR_9dot98_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.14_CCR_9.98_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 98;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(16, 25, 0), new ScheduledTask(25, 35, 0), new ScheduledTask(8, 11, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(14, 16, 0), new ScheduledTask(42, 45, 0), new ScheduledTask(0, 4, 2), new ScheduledTask(45, 50, 0), new ScheduledTask(50, 56, 0), new ScheduledTask(11, 14, 0), new ScheduledTask(72, 76, 0), new ScheduledTask(56, 62, 0), new ScheduledTask(76, 85, 0), new ScheduledTask(35, 44, 1), new ScheduledTask(35, 42, 0), new ScheduledTask(62, 72, 0), new ScheduledTask(85, 94, 0), new ScheduledTask(58, 68, 3), new ScheduledTask(94, 98, 0), new ScheduledTask(65, 67, 4)};
        int[] expectedProcessorEndTimes = new int[]{98, 44, 4, 68, 67};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot24_CCR_0dot10_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.24_CCR_0.10_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 205400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(17100, 17138, 0), new ScheduledTask(0, 171, 0), new ScheduledTask(20900, 21071, 0), new ScheduledTask(68400, 68552, 0), new ScheduledTask(0, 133, 1), new ScheduledTask(100700, 100890, 0), new ScheduledTask(51300, 51471, 0), new ScheduledTask(0, 190, 2), new ScheduledTask(38000, 38133, 0), new ScheduledTask(119700, 119776, 0), new ScheduledTask(127300, 127490, 0), new ScheduledTask(83600, 83771, 0), new ScheduledTask(0, 171, 3), new ScheduledTask(146300, 146433, 0), new ScheduledTask(165300, 165433, 0), new ScheduledTask(102600, 102733, 3), new ScheduledTask(159600, 159657, 0), new ScheduledTask(79800, 79971, 1), new ScheduledTask(178600, 178752, 0), new ScheduledTask(193800, 193914, 0), new ScheduledTask(159800, 159876, 2)};
        int[] expectedProcessorEndTimes = new int[]{193914, 79971, 159876, 102733};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot24_CCR_0dot10_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.24_CCR_0.10_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 134000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 38, 1), new ScheduledTask(0, 171, 0), new ScheduledTask(17100, 17271, 0), new ScheduledTask(34200, 34352, 0), new ScheduledTask(0, 133, 2), new ScheduledTask(49400, 49590, 0), new ScheduledTask(34600, 34771, 3), new ScheduledTask(34200, 34390, 1), new ScheduledTask(34600, 34733, 2), new ScheduledTask(69200, 69276, 0), new ScheduledTask(76800, 76990, 0), new ScheduledTask(61200, 61371, 2), new ScheduledTask(0, 171, 3), new ScheduledTask(96400, 96533, 0), new ScheduledTask(77000, 77133, 3), new ScheduledTask(7600, 7733, 1), new ScheduledTask(110700, 110757, 2), new ScheduledTask(72200, 72371, 1), new ScheduledTask(103600, 103752, 3), new ScheduledTask(122400, 122514, 0), new ScheduledTask(109900, 109976, 1)};
        int[] expectedProcessorEndTimes = new int[]{122514, 109976, 110757, 103752};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot24_CCR_0dot10_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.24_CCR_0.10_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 112720;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 38, 0), new ScheduledTask(0, 171, 1), new ScheduledTask(3800, 3971, 0), new ScheduledTask(21520, 21672, 0), new ScheduledTask(0, 133, 2), new ScheduledTask(36720, 36910, 0), new ScheduledTask(21300, 21471, 1), new ScheduledTask(0, 190, 3), new ScheduledTask(21300, 21433, 2), new ScheduledTask(55720, 55796, 0), new ScheduledTask(63320, 63510, 0), new ScheduledTask(42150, 42321, 1), new ScheduledTask(41250, 41421, 2), new ScheduledTask(82320, 82453, 0), new ScheduledTask(67300, 67433, 1), new ScheduledTask(38000, 38133, 3), new ScheduledTask(95620, 95677, 0), new ScheduledTask(66900, 67071, 2), new ScheduledTask(83260, 83412, 1), new ScheduledTask(101320, 101434, 0), new ScheduledTask(95820, 95896, 2)};
        int[] expectedProcessorEndTimes = new int[]{101434, 83412, 95896, 38133};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot24_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.24_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1463;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(133, 171, 0), new ScheduledTask(190, 361, 1), new ScheduledTask(171, 342, 0), new ScheduledTask(475, 627, 0), new ScheduledTask(342, 475, 0), new ScheduledTask(665, 855, 1), new ScheduledTask(494, 665, 1), new ScheduledTask(0, 190, 1), new ScheduledTask(361, 494, 1), new ScheduledTask(855, 931, 1), new ScheduledTask(931, 1121, 1), new ScheduledTask(798, 969, 0), new ScheduledTask(969, 1140, 0), new ScheduledTask(1121, 1254, 1), new ScheduledTask(1140, 1273, 0), new ScheduledTask(0, 133, 0), new ScheduledTask(1254, 1311, 1), new ScheduledTask(627, 798, 0), new ScheduledTask(1311, 1463, 1), new ScheduledTask(1349, 1463, 0), new ScheduledTask(1273, 1349, 0)};
        int[] expectedProcessorEndTimes = new int[]{1463, 1463};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot24_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.24_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1121;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 38, 0), new ScheduledTask(0, 171, 1), new ScheduledTask(38, 209, 0), new ScheduledTask(209, 361, 0), new ScheduledTask(0, 133, 2), new ScheduledTask(361, 551, 0), new ScheduledTask(213, 384, 1), new ScheduledTask(0, 190, 3), new ScheduledTask(213, 346, 2), new ScheduledTask(551, 627, 0), new ScheduledTask(627, 817, 0), new ScheduledTask(346, 517, 2), new ScheduledTask(190, 361, 3), new ScheduledTask(817, 950, 0), new ScheduledTask(629, 762, 1), new ScheduledTask(361, 494, 3), new ScheduledTask(950, 1007, 0), new ScheduledTask(494, 665, 3), new ScheduledTask(762, 914, 1), new ScheduledTask(1007, 1121, 0), new ScheduledTask(952, 1028, 1)};
        int[] expectedProcessorEndTimes = new int[]{1121, 1028, 517, 665};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot24_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.24_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 1121;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 38, 0), new ScheduledTask(0, 171, 1), new ScheduledTask(38, 209, 0), new ScheduledTask(209, 361, 0), new ScheduledTask(0, 133, 2), new ScheduledTask(361, 551, 0), new ScheduledTask(213, 384, 1), new ScheduledTask(0, 190, 3), new ScheduledTask(213, 346, 2), new ScheduledTask(551, 627, 0), new ScheduledTask(627, 817, 0), new ScheduledTask(346, 517, 2), new ScheduledTask(0, 171, 4), new ScheduledTask(817, 950, 0), new ScheduledTask(629, 762, 1), new ScheduledTask(0, 133, 5), new ScheduledTask(950, 1007, 0), new ScheduledTask(350, 521, 3), new ScheduledTask(762, 914, 1), new ScheduledTask(1007, 1121, 0), new ScheduledTask(952, 1028, 1)};
        int[] expectedProcessorEndTimes = new int[]{1121, 1028, 517, 521, 171, 133};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot24_CCR_1dot00_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.24_CCR_1.00_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 17400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1300, 1308, 0), new ScheduledTask(2100, 2113, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(4900, 4912, 0), new ScheduledTask(6100, 6116, 0), new ScheduledTask(0, 13, 0), new ScheduledTask(0, 13, 2), new ScheduledTask(7700, 7705, 0), new ScheduledTask(0, 15, 3), new ScheduledTask(3400, 3415, 0), new ScheduledTask(9500, 9507, 0), new ScheduledTask(14300, 14316, 0), new ScheduledTask(8200, 8213, 0), new ScheduledTask(9000, 9010, 3), new ScheduledTask(12000, 12008, 0), new ScheduledTask(10200, 10208, 0), new ScheduledTask(7800, 7816, 2), new ScheduledTask(12800, 12815, 0), new ScheduledTask(15900, 15915, 0), new ScheduledTask(5100, 5115, 1), new ScheduledTask(11000, 11010, 0)};
        int[] expectedProcessorEndTimes = new int[]{15915, 5115, 7816, 9010};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot24_CCR_1dot00_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.24_CCR_1.00_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(800, 813, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(2100, 2112, 0), new ScheduledTask(3300, 3316, 0), new ScheduledTask(0, 13, 2), new ScheduledTask(0, 13, 3), new ScheduledTask(4900, 4905, 0), new ScheduledTask(600, 615, 1), new ScheduledTask(2600, 2615, 2), new ScheduledTask(5400, 5407, 0), new ScheduledTask(6100, 6116, 0), new ScheduledTask(2600, 2613, 3), new ScheduledTask(3600, 3610, 1), new ScheduledTask(5200, 5208, 3), new ScheduledTask(5600, 5608, 2), new ScheduledTask(6200, 6216, 1), new ScheduledTask(6800, 6815, 3), new ScheduledTask(7700, 7715, 0), new ScheduledTask(7200, 7215, 2), new ScheduledTask(9200, 9210, 0)};
        int[] expectedProcessorEndTimes = new int[]{9210, 6216, 7215, 6815};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot24_CCR_1dot00_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.24_CCR_1.00_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(800, 813, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(2100, 2112, 0), new ScheduledTask(3300, 3316, 0), new ScheduledTask(360, 373, 1), new ScheduledTask(0, 13, 2), new ScheduledTask(4900, 4905, 0), new ScheduledTask(0, 15, 3), new ScheduledTask(1920, 1935, 1), new ScheduledTask(5400, 5407, 0), new ScheduledTask(6100, 6116, 0), new ScheduledTask(1950, 1963, 2), new ScheduledTask(3720, 3730, 1), new ScheduledTask(3000, 3008, 3), new ScheduledTask(4020, 4028, 2), new ScheduledTask(4920, 4936, 1), new ScheduledTask(5300, 5315, 2), new ScheduledTask(7700, 7715, 0), new ScheduledTask(4600, 4615, 3), new ScheduledTask(6840, 6850, 1)};
        int[] expectedProcessorEndTimes = new int[]{7715, 6850, 5315, 4615};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot24_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.24_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 123;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 21, 0), new ScheduledTask(15, 18, 1), new ScheduledTask(21, 33, 0), new ScheduledTask(33, 49, 0), new ScheduledTask(31, 44, 1), new ScheduledTask(18, 31, 1), new ScheduledTask(64, 69, 0), new ScheduledTask(0, 15, 1), new ScheduledTask(49, 64, 0), new ScheduledTask(69, 76, 0), new ScheduledTask(76, 92, 0), new ScheduledTask(62, 75, 1), new ScheduledTask(52, 62, 1), new ScheduledTask(44, 52, 1), new ScheduledTask(90, 98, 1), new ScheduledTask(107, 123, 0), new ScheduledTask(75, 90, 1), new ScheduledTask(108, 123, 1), new ScheduledTask(92, 107, 0), new ScheduledTask(98, 108, 1)};
        int[] expectedProcessorEndTimes = new int[]{123, 123};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot24_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.24_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 21, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(21, 33, 0), new ScheduledTask(33, 49, 0), new ScheduledTask(0, 13, 2), new ScheduledTask(0, 13, 3), new ScheduledTask(49, 54, 0), new ScheduledTask(3, 18, 1), new ScheduledTask(13, 28, 2), new ScheduledTask(54, 61, 0), new ScheduledTask(61, 77, 0), new ScheduledTask(13, 26, 3), new ScheduledTask(30, 40, 1), new ScheduledTask(26, 34, 3), new ScheduledTask(28, 36, 2), new ScheduledTask(38, 54, 2), new ScheduledTask(35, 50, 3), new ScheduledTask(77, 92, 0), new ScheduledTask(40, 55, 1), new ScheduledTask(50, 60, 3)};
        int[] expectedProcessorEndTimes = new int[]{92, 55, 54, 60};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot24_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.24_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 21, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(21, 33, 0), new ScheduledTask(33, 49, 0), new ScheduledTask(0, 13, 2), new ScheduledTask(0, 13, 3), new ScheduledTask(49, 54, 0), new ScheduledTask(0, 15, 4), new ScheduledTask(13, 28, 2), new ScheduledTask(54, 61, 0), new ScheduledTask(61, 77, 0), new ScheduledTask(13, 26, 3), new ScheduledTask(30, 40, 1), new ScheduledTask(15, 23, 4), new ScheduledTask(28, 36, 2), new ScheduledTask(38, 54, 2), new ScheduledTask(35, 50, 3), new ScheduledTask(77, 92, 0), new ScheduledTask(30, 45, 4), new ScheduledTask(46, 56, 1)};
        int[] expectedProcessorEndTimes = new int[]{92, 56, 54, 50, 45};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot29_CCR_0dot10_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.29_CCR_0.10_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 215400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(11300, 11436, 0), new ScheduledTask(0, 113, 0), new ScheduledTask(70200, 70359, 0), new ScheduledTask(24900, 25059, 0), new ScheduledTask(0, 113, 1), new ScheduledTask(40800, 40868, 0), new ScheduledTask(86100, 86304, 0), new ScheduledTask(41200, 41404, 2), new ScheduledTask(47600, 47645, 0), new ScheduledTask(52100, 52281, 0), new ScheduledTask(0, 136, 3), new ScheduledTask(0, 45, 2), new ScheduledTask(165500, 165727, 0), new ScheduledTask(106500, 106704, 0), new ScheduledTask(67800, 67868, 1), new ScheduledTask(81600, 81645, 3), new ScheduledTask(108900, 109013, 3), new ScheduledTask(126900, 127059, 0), new ScheduledTask(188200, 188427, 0), new ScheduledTask(142800, 143027, 0), new ScheduledTask(210900, 210945, 0)};
        int[] expectedProcessorEndTimes = new int[]{210945, 67868, 41404, 109013};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot29_CCR_0dot10_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.29_CCR_0.10_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 135600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 136, 0), new ScheduledTask(13600, 13713, 0), new ScheduledTask(13900, 14059, 1), new ScheduledTask(24900, 25059, 0), new ScheduledTask(0, 113, 2), new ScheduledTask(14100, 14168, 3), new ScheduledTask(46200, 46404, 0), new ScheduledTask(41200, 41404, 3), new ScheduledTask(27700, 27745, 3), new ScheduledTask(45700, 45881, 1), new ScheduledTask(22600, 22736, 2), new ScheduledTask(0, 45, 3), new ScheduledTask(82500, 82727, 0), new ScheduledTask(67300, 67504, 2), new ScheduledTask(49800, 49868, 2), new ScheduledTask(40800, 40845, 0), new ScheduledTask(82700, 82813, 3), new ScheduledTask(66600, 66759, 0), new ScheduledTask(108400, 108627, 0), new ScheduledTask(83200, 83427, 1), new ScheduledTask(131100, 131145, 0)};
        int[] expectedProcessorEndTimes = new int[]{131145, 83427, 67504, 82813};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot29_CCR_0dot10_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.29_CCR_0.10_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 109440;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 136, 0), new ScheduledTask(0, 113, 1), new ScheduledTask(13900, 14059, 1), new ScheduledTask(14060, 14219, 0), new ScheduledTask(9000, 9113, 3), new ScheduledTask(20400, 20468, 2), new ScheduledTask(32980, 33184, 1), new ScheduledTask(36760, 36964, 0), new ScheduledTask(30600, 30645, 2), new ScheduledTask(37350, 37531, 2), new ScheduledTask(0, 136, 2), new ScheduledTask(0, 45, 3), new ScheduledTask(58360, 58587, 0), new ScheduledTask(57460, 57664, 1), new ScheduledTask(29960, 30028, 0), new ScheduledTask(38150, 38195, 3), new ScheduledTask(64500, 64613, 2), new ScheduledTask(47150, 47309, 3), new ScheduledTask(82240, 82467, 0), new ScheduledTask(81940, 82167, 1), new ScheduledTask(104940, 104985, 0)};
        int[] expectedProcessorEndTimes = new int[]{104985, 82167, 64613, 47309};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot29_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.29_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1449;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 136, 0), new ScheduledTask(294, 407, 1), new ScheduledTask(249, 408, 0), new ScheduledTask(452, 611, 1), new ScheduledTask(181, 294, 1), new ScheduledTask(136, 204, 0), new ScheduledTask(416, 620, 0), new ScheduledTask(611, 815, 1), new ScheduledTask(204, 249, 0), new ScheduledTask(883, 1064, 1), new ScheduledTask(45, 181, 1), new ScheduledTask(0, 45, 1), new ScheduledTask(824, 1051, 0), new ScheduledTask(620, 824, 0), new ScheduledTask(815, 883, 1), new ScheduledTask(407, 452, 1), new ScheduledTask(1064, 1177, 1), new ScheduledTask(1051, 1210, 0), new ScheduledTask(1177, 1404, 1), new ScheduledTask(1210, 1437, 0), new ScheduledTask(1404, 1449, 1)};
        int[] expectedProcessorEndTimes = new int[]{1437, 1449};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot29_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.29_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1001;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 136, 0), new ScheduledTask(0, 113, 1), new ScheduledTask(139, 298, 2), new ScheduledTask(136, 295, 0), new ScheduledTask(45, 158, 3), new ScheduledTask(141, 209, 1), new ScheduledTask(298, 502, 2), new ScheduledTask(295, 499, 0), new ScheduledTask(209, 254, 1), new ScheduledTask(339, 520, 3), new ScheduledTask(158, 294, 3), new ScheduledTask(0, 45, 3), new ScheduledTask(502, 729, 2), new ScheduledTask(520, 724, 3), new ScheduledTask(507, 575, 1), new ScheduledTask(294, 339, 3), new ScheduledTask(575, 688, 1), new ScheduledTask(348, 507, 1), new ScheduledTask(729, 956, 2), new ScheduledTask(724, 951, 3), new ScheduledTask(956, 1001, 2)};
        int[] expectedProcessorEndTimes = new int[]{499, 688, 1001, 951};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot29_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.29_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 1001;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 136, 0), new ScheduledTask(0, 113, 1), new ScheduledTask(139, 298, 2), new ScheduledTask(136, 295, 0), new ScheduledTask(0, 113, 3), new ScheduledTask(141, 209, 4), new ScheduledTask(298, 502, 2), new ScheduledTask(295, 499, 0), new ScheduledTask(217, 262, 5), new ScheduledTask(307, 488, 5), new ScheduledTask(45, 181, 5), new ScheduledTask(0, 45, 5), new ScheduledTask(502, 729, 2), new ScheduledTask(509, 713, 5), new ScheduledTask(475, 543, 4), new ScheduledTask(262, 307, 5), new ScheduledTask(543, 656, 4), new ScheduledTask(316, 475, 4), new ScheduledTask(729, 956, 2), new ScheduledTask(713, 940, 5), new ScheduledTask(956, 1001, 2)};
        int[] expectedProcessorEndTimes = new int[]{499, 113, 1001, 113, 656, 940};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot33_CCR_0dot10_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.33_CCR_0.10_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 211300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(18600, 18786, 0), new ScheduledTask(0, 53, 1), new ScheduledTask(0, 186, 0), new ScheduledTask(37200, 37386, 0), new ScheduledTask(0, 53, 2), new ScheduledTask(31800, 31880, 2), new ScheduledTask(87700, 87966, 0), new ScheduledTask(55800, 55986, 0), new ScheduledTask(0, 53, 3), new ScheduledTask(56800, 57013, 3), new ScheduledTask(148900, 149086, 0), new ScheduledTask(132900, 132980, 0), new ScheduledTask(32000, 32213, 1), new ScheduledTask(114300, 114486, 0), new ScheduledTask(74400, 74533, 0), new ScheduledTask(140900, 140980, 0), new ScheduledTask(79800, 79853, 2), new ScheduledTask(191400, 191586, 0), new ScheduledTask(115300, 115460, 2), new ScheduledTask(178100, 178233, 0), new ScheduledTask(167500, 167606, 0)};
        int[] expectedProcessorEndTimes = new int[]{191586, 32213, 115460, 57013};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot33_CCR_0dot10_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.33_CCR_0.10_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 122400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 186, 0), new ScheduledTask(0, 53, 1), new ScheduledTask(0, 186, 2), new ScheduledTask(18600, 18786, 0), new ScheduledTask(10600, 10653, 3), new ScheduledTask(21200, 21280, 3), new ScheduledTask(56600, 56866, 0), new ScheduledTask(38000, 38186, 0), new ScheduledTask(0, 53, 3), new ScheduledTask(47800, 48013, 3), new ScheduledTask(83200, 83386, 0), new ScheduledTask(37600, 37680, 2), new ScheduledTask(10800, 11013, 1), new ScheduledTask(57400, 57586, 2), new ScheduledTask(57300, 57433, 1), new ScheduledTask(83900, 83980, 1), new ScheduledTask(37200, 37253, 3), new ScheduledTask(101800, 101986, 0), new ScheduledTask(90400, 90560, 3), new ScheduledTask(94600, 94733, 2), new ScheduledTask(99900, 100006, 1)};
        int[] expectedProcessorEndTimes = new int[]{101986, 100006, 94733, 90560};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot33_CCR_0dot10_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.33_CCR_0.10_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 101200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 186, 0), new ScheduledTask(0, 53, 3), new ScheduledTask(0, 186, 1), new ScheduledTask(18600, 18786, 0), new ScheduledTask(7950, 8003, 2), new ScheduledTask(15900, 15980, 2), new ScheduledTask(37200, 37466, 0), new ScheduledTask(22320, 22506, 1), new ScheduledTask(0, 53, 2), new ScheduledTask(49600, 49813, 2), new ScheduledTask(63800, 63986, 0), new ScheduledTask(37600, 37680, 2), new ScheduledTask(10600, 10813, 3), new ScheduledTask(60600, 60786, 1), new ScheduledTask(44640, 44773, 1), new ScheduledTask(53200, 53280, 3), new ScheduledTask(27900, 27953, 2), new ScheduledTask(82550, 82736, 0), new ScheduledTask(69200, 69360, 3), new ScheduledTask(82920, 83053, 1), new ScheduledTask(81550, 81656, 2)};
        int[] expectedProcessorEndTimes = new int[]{82736, 83053, 81656, 69360};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot33_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.33_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1489;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(53, 239, 0), new ScheduledTask(133, 186, 1), new ScheduledTask(399, 585, 1), new ScheduledTask(292, 478, 0), new ScheduledTask(0, 53, 1), new ScheduledTask(53, 133, 1), new ScheduledTask(585, 851, 1), new ScheduledTask(771, 957, 0), new ScheduledTask(0, 53, 0), new ScheduledTask(478, 691, 0), new ScheduledTask(851, 1037, 1), new ScheduledTask(691, 771, 0), new ScheduledTask(186, 399, 1), new ScheduledTask(1170, 1356, 1), new ScheduledTask(1037, 1170, 1), new ScheduledTask(957, 1037, 0), new ScheduledTask(239, 292, 0), new ScheduledTask(1143, 1329, 0), new ScheduledTask(1329, 1489, 0), new ScheduledTask(1356, 1489, 1), new ScheduledTask(1037, 1143, 0)};
        int[] expectedProcessorEndTimes = new int[]{1489, 1489};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot33_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.33_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1010;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 186, 0), new ScheduledTask(0, 53, 1), new ScheduledTask(0, 186, 2), new ScheduledTask(186, 372, 0), new ScheduledTask(0, 53, 3), new ScheduledTask(53, 133, 3), new ScheduledTask(372, 638, 0), new ScheduledTask(189, 375, 2), new ScheduledTask(53, 106, 1), new ScheduledTask(382, 595, 1), new ScheduledTask(638, 824, 0), new ScheduledTask(376, 456, 2), new ScheduledTask(133, 346, 3), new ScheduledTask(383, 569, 3), new ScheduledTask(456, 589, 2), new ScheduledTask(569, 649, 3), new ScheduledTask(589, 642, 2), new ScheduledTask(824, 1010, 0), new ScheduledTask(648, 808, 1), new ScheduledTask(642, 775, 2), new ScheduledTask(649, 755, 3)};
        int[] expectedProcessorEndTimes = new int[]{1010, 808, 775, 755};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot33_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.33_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 1010;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 186, 0), new ScheduledTask(0, 53, 1), new ScheduledTask(0, 186, 2), new ScheduledTask(186, 372, 0), new ScheduledTask(0, 53, 3), new ScheduledTask(53, 133, 3), new ScheduledTask(372, 638, 0), new ScheduledTask(189, 375, 2), new ScheduledTask(0, 53, 4), new ScheduledTask(382, 595, 1), new ScheduledTask(638, 824, 0), new ScheduledTask(376, 456, 2), new ScheduledTask(59, 272, 4), new ScheduledTask(383, 569, 3), new ScheduledTask(382, 515, 4), new ScheduledTask(456, 536, 2), new ScheduledTask(135, 188, 5), new ScheduledTask(824, 1010, 0), new ScheduledTask(648, 808, 1), new ScheduledTask(569, 702, 3), new ScheduledTask(536, 642, 2)};
        int[] expectedProcessorEndTimes = new int[]{1010, 808, 642, 702, 515, 188};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot33_CCR_10dot01_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.33_CCR_10.01_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(1700, 1707, 0), new ScheduledTask(1000, 1007, 0), new ScheduledTask(2400, 2402, 0), new ScheduledTask(2600, 2605, 0), new ScheduledTask(3900, 3906, 0), new ScheduledTask(6000, 6007, 0), new ScheduledTask(6700, 6707, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(5300, 5307, 0), new ScheduledTask(7400, 7402, 0), new ScheduledTask(3100, 3108, 0), new ScheduledTask(7600, 7605, 0), new ScheduledTask(4500, 4508, 0), new ScheduledTask(8700, 8709, 0), new ScheduledTask(5500, 5503, 2), new ScheduledTask(6500, 6503, 1), new ScheduledTask(9600, 9607, 0), new ScheduledTask(8100, 8106, 0), new ScheduledTask(10400, 10403, 0), new ScheduledTask(9500, 9502, 3)};
        int[] expectedProcessorEndTimes = new int[]{10403, 6503, 5503, 9502};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot33_CCR_10dot01_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.33_CCR_10.01_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(1700, 1707, 0), new ScheduledTask(1000, 1007, 0), new ScheduledTask(2400, 2402, 0), new ScheduledTask(2600, 2605, 0), new ScheduledTask(3400, 3406, 0), new ScheduledTask(4800, 4807, 0), new ScheduledTask(5500, 5507, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(2500, 2507, 2), new ScheduledTask(6200, 6202, 0), new ScheduledTask(2300, 2308, 1), new ScheduledTask(6400, 6405, 0), new ScheduledTask(4000, 4008, 0), new ScheduledTask(8200, 8209, 0), new ScheduledTask(3100, 3103, 0), new ScheduledTask(6500, 6503, 3), new ScheduledTask(7500, 7507, 0), new ScheduledTask(6900, 6906, 0), new ScheduledTask(9200, 9203, 0), new ScheduledTask(9000, 9002, 3)};
        int[] expectedProcessorEndTimes = new int[]{9203, 2308, 2507, 9002};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot33_CCR_10dot01_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.33_CCR_10.01_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9360;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(1700, 1707, 0), new ScheduledTask(1000, 1007, 0), new ScheduledTask(2400, 2402, 0), new ScheduledTask(2600, 2605, 0), new ScheduledTask(3100, 3106, 0), new ScheduledTask(4500, 4507, 0), new ScheduledTask(5200, 5207, 0), new ScheduledTask(3260, 3262, 1), new ScheduledTask(2500, 2507, 3), new ScheduledTask(6000, 6002, 0), new ScheduledTask(2300, 2308, 1), new ScheduledTask(6200, 6205, 0), new ScheduledTask(3700, 3708, 0), new ScheduledTask(7460, 7469, 0), new ScheduledTask(5500, 5503, 3), new ScheduledTask(6500, 6503, 2), new ScheduledTask(8360, 8367, 0), new ScheduledTask(6700, 6706, 0), new ScheduledTask(9060, 9063, 0), new ScheduledTask(8700, 8702, 3)};
        int[] expectedProcessorEndTimes = new int[]{9063, 3262, 6503, 8702};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot33_CCR_10dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.33_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(17, 24, 0), new ScheduledTask(10, 17, 0), new ScheduledTask(24, 26, 0), new ScheduledTask(26, 31, 0), new ScheduledTask(31, 37, 0), new ScheduledTask(45, 52, 0), new ScheduledTask(52, 59, 0), new ScheduledTask(31, 33, 1), new ScheduledTask(33, 40, 1), new ScheduledTask(59, 61, 0), new ScheduledTask(23, 31, 1), new ScheduledTask(61, 66, 0), new ScheduledTask(37, 45, 0), new ScheduledTask(73, 82, 0), new ScheduledTask(55, 58, 1), new ScheduledTask(65, 68, 1), new ScheduledTask(82, 89, 0), new ScheduledTask(66, 72, 0), new ScheduledTask(89, 92, 0), new ScheduledTask(87, 89, 1)};
        int[] expectedProcessorEndTimes = new int[]{92, 89};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot33_CCR_10dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.33_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(17, 24, 0), new ScheduledTask(10, 17, 0), new ScheduledTask(24, 26, 0), new ScheduledTask(26, 31, 0), new ScheduledTask(31, 37, 0), new ScheduledTask(45, 52, 0), new ScheduledTask(52, 59, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(25, 32, 2), new ScheduledTask(59, 61, 0), new ScheduledTask(23, 31, 3), new ScheduledTask(61, 66, 0), new ScheduledTask(37, 45, 0), new ScheduledTask(73, 82, 0), new ScheduledTask(55, 58, 3), new ScheduledTask(65, 68, 3), new ScheduledTask(82, 89, 0), new ScheduledTask(66, 72, 0), new ScheduledTask(89, 92, 0), new ScheduledTask(87, 89, 3)};
        int[] expectedProcessorEndTimes = new int[]{92, 2, 32, 89};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot33_CCR_10dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.33_CCR_10.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(17, 24, 0), new ScheduledTask(10, 17, 0), new ScheduledTask(24, 26, 0), new ScheduledTask(26, 31, 0), new ScheduledTask(31, 37, 0), new ScheduledTask(45, 52, 0), new ScheduledTask(52, 59, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(25, 32, 2), new ScheduledTask(59, 61, 0), new ScheduledTask(23, 31, 3), new ScheduledTask(61, 66, 0), new ScheduledTask(37, 45, 0), new ScheduledTask(73, 82, 0), new ScheduledTask(55, 58, 4), new ScheduledTask(65, 68, 5), new ScheduledTask(82, 89, 0), new ScheduledTask(66, 72, 0), new ScheduledTask(89, 92, 0), new ScheduledTask(87, 89, 5)};
        int[] expectedProcessorEndTimes = new int[]{92, 2, 32, 31, 58, 89};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot38_CCR_0dot99_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.38_CCR_0.99_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 19800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 1), new ScheduledTask(1400, 1404, 0), new ScheduledTask(7000, 7020, 0), new ScheduledTask(0, 14, 0), new ScheduledTask(1800, 1812, 0), new ScheduledTask(5000, 5020, 0), new ScheduledTask(9000, 9014, 0), new ScheduledTask(3000, 3020, 0), new ScheduledTask(0, 14, 2), new ScheduledTask(8400, 8410, 2), new ScheduledTask(11600, 11612, 0), new ScheduledTask(16800, 16814, 0), new ScheduledTask(2000, 2018, 3), new ScheduledTask(10400, 10412, 0), new ScheduledTask(6000, 6012, 1), new ScheduledTask(14800, 14820, 0), new ScheduledTask(12800, 12818, 0), new ScheduledTask(18200, 18204, 0), new ScheduledTask(18600, 18612, 0), new ScheduledTask(13700, 13708, 3), new ScheduledTask(14400, 14406, 2)};
        int[] expectedProcessorEndTimes = new int[]{18612, 6012, 14406, 13708};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot38_CCR_0dot99_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.38_CCR_0.99_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 12200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 1), new ScheduledTask(0, 4, 0), new ScheduledTask(3600, 3620, 0), new ScheduledTask(0, 14, 2), new ScheduledTask(400, 412, 0), new ScheduledTask(1900, 1920, 3), new ScheduledTask(5600, 5614, 0), new ScheduledTask(2800, 2820, 2), new ScheduledTask(2000, 2014, 1), new ScheduledTask(5900, 5910, 3), new ScheduledTask(7100, 7112, 0), new ScheduledTask(8900, 8914, 0), new ScheduledTask(4800, 4818, 1), new ScheduledTask(7200, 7212, 2), new ScheduledTask(2400, 2412, 0), new ScheduledTask(7900, 7920, 3), new ScheduledTask(8600, 8618, 1), new ScheduledTask(10300, 10304, 0), new ScheduledTask(10700, 10712, 0), new ScheduledTask(9600, 9608, 2), new ScheduledTask(8300, 8306, 0)};
        int[] expectedProcessorEndTimes = new int[]{10712, 8618, 9608, 7920};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot38_CCR_0dot99_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.38_CCR_0.99_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 1), new ScheduledTask(0, 4, 0), new ScheduledTask(2200, 2220, 0), new ScheduledTask(0, 14, 2), new ScheduledTask(400, 412, 0), new ScheduledTask(2100, 2120, 2), new ScheduledTask(4200, 4214, 0), new ScheduledTask(2700, 2720, 1), new ScheduledTask(0, 14, 3), new ScheduledTask(2800, 2810, 3), new ScheduledTask(5600, 5612, 0), new ScheduledTask(6800, 6814, 0), new ScheduledTask(5100, 5118, 2), new ScheduledTask(6060, 6072, 1), new ScheduledTask(1200, 1212, 1), new ScheduledTask(4800, 4820, 3), new ScheduledTask(7500, 7518, 1), new ScheduledTask(8200, 8204, 0), new ScheduledTask(8600, 8612, 0), new ScheduledTask(5100, 5108, 1), new ScheduledTask(7800, 7806, 2)};
        int[] expectedProcessorEndTimes = new int[]{8612, 7518, 7806, 4820};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot38_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.38_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 138;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(4, 14, 0), new ScheduledTask(0, 4, 0), new ScheduledTask(26, 46, 0), new ScheduledTask(36, 50, 1), new ScheduledTask(14, 26, 1), new ScheduledTask(66, 86, 0), new ScheduledTask(70, 84, 1), new ScheduledTask(50, 70, 1), new ScheduledTask(0, 14, 1), new ScheduledTask(26, 36, 1), new ScheduledTask(96, 108, 1), new ScheduledTask(108, 122, 1), new ScheduledTask(100, 118, 0), new ScheduledTask(84, 96, 1), new ScheduledTask(14, 26, 0), new ScheduledTask(46, 66, 0), new ScheduledTask(118, 136, 0), new ScheduledTask(122, 126, 1), new ScheduledTask(126, 138, 1), new ScheduledTask(92, 100, 0), new ScheduledTask(86, 92, 0)};
        int[] expectedProcessorEndTimes = new int[]{136, 138};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot38_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.38_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 86;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(10, 30, 0), new ScheduledTask(0, 14, 2), new ScheduledTask(4, 16, 1), new ScheduledTask(19, 39, 2), new ScheduledTask(30, 44, 0), new ScheduledTask(20, 40, 1), new ScheduledTask(0, 14, 3), new ScheduledTask(38, 48, 3), new ScheduledTask(44, 56, 0), new ScheduledTask(56, 70, 0), new ScheduledTask(20, 38, 3), new ScheduledTask(50, 62, 3), new ScheduledTask(45, 57, 2), new ScheduledTask(62, 82, 3), new ScheduledTask(65, 83, 2), new ScheduledTask(70, 74, 0), new ScheduledTask(74, 86, 0), new ScheduledTask(57, 65, 2), new ScheduledTask(39, 45, 2)};
        int[] expectedProcessorEndTimes = new int[]{86, 40, 83, 82};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot38_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.38_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 86;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(10, 30, 0), new ScheduledTask(0, 14, 2), new ScheduledTask(4, 16, 1), new ScheduledTask(19, 39, 3), new ScheduledTask(30, 44, 0), new ScheduledTask(20, 40, 1), new ScheduledTask(0, 14, 4), new ScheduledTask(26, 36, 5), new ScheduledTask(44, 56, 0), new ScheduledTask(56, 70, 0), new ScheduledTask(40, 58, 1), new ScheduledTask(52, 64, 4), new ScheduledTask(14, 26, 5), new ScheduledTask(36, 56, 5), new ScheduledTask(64, 82, 5), new ScheduledTask(70, 74, 0), new ScheduledTask(74, 86, 0), new ScheduledTask(56, 64, 5), new ScheduledTask(46, 52, 4)};
        int[] expectedProcessorEndTimes = new int[]{86, 58, 14, 39, 64, 82};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot48_CCR_0dot10_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.48_CCR_0.10_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 258800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(55100, 55361, 0), new ScheduledTask(0, 232, 0), new ScheduledTask(0, 203, 1), new ScheduledTask(81200, 81316, 0), new ScheduledTask(23200, 23345, 0), new ScheduledTask(37700, 37874, 0), new ScheduledTask(122200, 122316, 0), new ScheduledTask(38400, 38603, 2), new ScheduledTask(133800, 134061, 0), new ScheduledTask(160400, 160458, 3), new ScheduledTask(92800, 93061, 0), new ScheduledTask(195900, 196132, 0), new ScheduledTask(159900, 160016, 0), new ScheduledTask(172400, 172487, 2), new ScheduledTask(180200, 180345, 0), new ScheduledTask(219100, 219303, 0), new ScheduledTask(239400, 239458, 0), new ScheduledTask(171800, 171945, 1), new ScheduledTask(171500, 171587, 0), new ScheduledTask(245200, 245287, 0), new ScheduledTask(220000, 220058, 3)};
        int[] expectedProcessorEndTimes = new int[]{245287, 171945, 172487, 220058};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot48_CCR_0dot10_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.48_CCR_0.10_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 159500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(23200, 23461, 0), new ScheduledTask(0, 232, 0), new ScheduledTask(0, 203, 1), new ScheduledTask(49300, 49416, 0), new ScheduledTask(23900, 24045, 2), new ScheduledTask(23800, 23974, 3), new ScheduledTask(60900, 61016, 0), new ScheduledTask(53600, 53803, 1), new ScheduledTask(72500, 72761, 0), new ScheduledTask(94400, 94458, 3), new ScheduledTask(61400, 61661, 2), new ScheduledTask(110200, 110432, 0), new ScheduledTask(98600, 98716, 0), new ScheduledTask(114100, 114187, 3), new ScheduledTask(113600, 113745, 2), new ScheduledTask(139200, 139403, 0), new ScheduledTask(133400, 133458, 0), new ScheduledTask(110500, 110645, 1), new ScheduledTask(131500, 131587, 3), new ScheduledTask(139500, 139587, 1), new ScheduledTask(142600, 142658, 2)};
        int[] expectedProcessorEndTimes = new int[]{139403, 139587, 142658, 131587};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot48_CCR_0dot10_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.48_CCR_0.10_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 126560;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 261, 1), new ScheduledTask(0, 232, 0), new ScheduledTask(0, 203, 3), new ScheduledTask(31320, 31436, 1), new ScheduledTask(23200, 23345, 0), new ScheduledTask(23800, 23974, 2), new ScheduledTask(45240, 45356, 1), new ScheduledTask(37700, 37903, 0), new ScheduledTask(59860, 60121, 0), new ScheduledTask(59160, 59218, 1), new ScheduledTask(49900, 50161, 2), new ScheduledTask(66120, 66352, 1), new ScheduledTask(85960, 86076, 0), new ScheduledTask(98460, 98547, 1), new ScheduledTask(97560, 97705, 0), new ScheduledTask(94660, 94863, 2), new ScheduledTask(108900, 108958, 1), new ScheduledTask(112060, 112205, 0), new ScheduledTask(86960, 87047, 3), new ScheduledTask(115860, 115947, 1), new ScheduledTask(112460, 112518, 3)};
        int[] expectedProcessorEndTimes = new int[]{112205, 115947, 94863, 112518};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot48_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.48_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1624;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 261, 0), new ScheduledTask(203, 435, 1), new ScheduledTask(0, 203, 1), new ScheduledTask(261, 377, 0), new ScheduledTask(435, 580, 1), new ScheduledTask(493, 667, 0), new ScheduledTask(377, 493, 0), new ScheduledTask(580, 783, 1), new ScheduledTask(667, 928, 0), new ScheduledTask(783, 841, 1), new ScheduledTask(1015, 1276, 0), new ScheduledTask(841, 1073, 1), new ScheduledTask(1073, 1189, 1), new ScheduledTask(1334, 1421, 1), new ScheduledTask(1189, 1334, 1), new ScheduledTask(1421, 1624, 1), new ScheduledTask(1479, 1537, 0), new ScheduledTask(1276, 1421, 0), new ScheduledTask(928, 1015, 0), new ScheduledTask(1537, 1624, 0), new ScheduledTask(1421, 1479, 0)};
        int[] expectedProcessorEndTimes = new int[]{1624, 1624};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot48_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.48_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1102;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 261, 0), new ScheduledTask(0, 232, 1), new ScheduledTask(0, 203, 2), new ScheduledTask(261, 377, 0), new ScheduledTask(239, 384, 3), new ScheduledTask(232, 406, 1), new ScheduledTask(377, 493, 0), new ScheduledTask(406, 609, 1), new ScheduledTask(493, 754, 0), new ScheduledTask(609, 667, 1), new ScheduledTask(411, 672, 2), new ScheduledTask(667, 899, 1), new ScheduledTask(754, 870, 0), new ScheduledTask(870, 957, 0), new ScheduledTask(878, 1023, 2), new ScheduledTask(899, 1102, 1), new ScheduledTask(957, 1015, 0), new ScheduledTask(873, 1018, 3), new ScheduledTask(764, 851, 2), new ScheduledTask(1015, 1102, 0), new ScheduledTask(1023, 1081, 2)};
        int[] expectedProcessorEndTimes = new int[]{1102, 1102, 1081, 1018};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot48_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.48_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 1102;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 261, 0), new ScheduledTask(0, 232, 1), new ScheduledTask(0, 203, 2), new ScheduledTask(261, 377, 0), new ScheduledTask(232, 377, 1), new ScheduledTask(238, 412, 2), new ScheduledTask(377, 493, 0), new ScheduledTask(377, 580, 1), new ScheduledTask(493, 754, 0), new ScheduledTask(580, 638, 1), new ScheduledTask(412, 673, 2), new ScheduledTask(638, 870, 1), new ScheduledTask(754, 870, 0), new ScheduledTask(870, 957, 0), new ScheduledTask(878, 1023, 1), new ScheduledTask(877, 1080, 2), new ScheduledTask(957, 1015, 0), new ScheduledTask(873, 1018, 3), new ScheduledTask(764, 851, 4), new ScheduledTask(1015, 1102, 0), new ScheduledTask(1023, 1081, 1)};
        int[] expectedProcessorEndTimes = new int[]{1102, 1081, 1080, 1018, 851};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot48_CCR_0dot99_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.48_CCR_0.99_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 153;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(9, 27, 0), new ScheduledTask(30, 53, 1), new ScheduledTask(43, 48, 0), new ScheduledTask(65, 86, 1), new ScheduledTask(66, 87, 0), new ScheduledTask(48, 66, 0), new ScheduledTask(53, 60, 1), new ScheduledTask(9, 30, 1), new ScheduledTask(60, 65, 1), new ScheduledTask(104, 109, 1), new ScheduledTask(87, 108, 0), new ScheduledTask(109, 132, 1), new ScheduledTask(27, 43, 0), new ScheduledTask(132, 137, 1), new ScheduledTask(129, 152, 0), new ScheduledTask(108, 129, 0), new ScheduledTask(137, 153, 1), new ScheduledTask(95, 104, 1), new ScheduledTask(86, 95, 1)};
        int[] expectedProcessorEndTimes = new int[]{152, 153};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_2dot48_CCR_0dot99_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_2.48_CCR_0.99_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 108;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(0, 18, 2), new ScheduledTask(13, 36, 0), new ScheduledTask(18, 23, 2), new ScheduledTask(43, 64, 3), new ScheduledTask(39, 60, 2), new ScheduledTask(25, 43, 3), new ScheduledTask(36, 43, 0), new ScheduledTask(9, 30, 1), new ScheduledTask(47, 52, 1), new ScheduledTask(64, 69, 3), new ScheduledTask(60, 81, 2), new ScheduledTask(69, 92, 3), new ScheduledTask(23, 39, 2), new ScheduledTask(81, 86, 2), new ScheduledTask(84, 107, 1), new ScheduledTask(86, 107, 2), new ScheduledTask(92, 108, 3), new ScheduledTask(66, 75, 1), new ScheduledTask(75, 84, 1)};
        int[] expectedProcessorEndTimes = new int[]{43, 107, 107, 108};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot62_CCR_0dot10_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.62_CCR_0.10_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 528900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(36900, 37310, 0), new ScheduledTask(0, 369, 0), new ScheduledTask(0, 82, 1), new ScheduledTask(77900, 78064, 0), new ScheduledTask(94300, 94710, 0), new ScheduledTask(49200, 49282, 1), new ScheduledTask(135300, 135710, 0), new ScheduledTask(221400, 221769, 0), new ScheduledTask(258300, 258587, 0), new ScheduledTask(176300, 176382, 0), new ScheduledTask(184900, 185023, 1), new ScheduledTask(287000, 287410, 0), new ScheduledTask(184500, 184869, 0), new ScheduledTask(287900, 287982, 2), new ScheduledTask(356700, 357028, 0), new ScheduledTask(328000, 328287, 0), new ScheduledTask(389500, 389664, 0), new ScheduledTask(405900, 406310, 0), new ScheduledTask(328400, 328646, 3), new ScheduledTask(446900, 447310, 0), new ScheduledTask(487900, 488310, 0)};
        int[] expectedProcessorEndTimes = new int[]{488310, 185023, 287982, 328646};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot62_CCR_0dot10_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.62_CCR_0.10_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 402600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(8200, 8610, 0), new ScheduledTask(0, 369, 1), new ScheduledTask(0, 82, 2), new ScheduledTask(16800, 16964, 3), new ScheduledTask(74200, 74610, 0), new ScheduledTask(0, 82, 0), new ScheduledTask(115200, 115610, 0), new ScheduledTask(156200, 156569, 0), new ScheduledTask(193100, 193387, 0), new ScheduledTask(156400, 156482, 1), new ScheduledTask(173200, 173323, 2), new ScheduledTask(230000, 230410, 0), new ScheduledTask(116100, 116469, 3), new ScheduledTask(221800, 221882, 0), new ScheduledTask(230400, 230728, 3), new ScheduledTask(271000, 271287, 0), new ScheduledTask(299700, 299864, 0), new ScheduledTask(316100, 316510, 0), new ScheduledTask(271400, 271646, 2), new ScheduledTask(357100, 357510, 0), new ScheduledTask(320600, 321010, 2)};
        int[] expectedProcessorEndTimes = new int[]{357510, 156482, 321010, 230728};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot62_CCR_0dot10_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.62_CCR_0.10_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 360380;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 410, 0), new ScheduledTask(0, 369, 1), new ScheduledTask(0, 82, 2), new ScheduledTask(12300, 12464, 2), new ScheduledTask(44680, 45090, 0), new ScheduledTask(0, 82, 3), new ScheduledTask(85680, 86090, 0), new ScheduledTask(126680, 127049, 0), new ScheduledTask(163580, 163867, 0), new ScheduledTask(126880, 126962, 1), new ScheduledTask(136720, 136843, 1), new ScheduledTask(192280, 192690, 0), new ScheduledTask(86580, 86949, 2), new ScheduledTask(193180, 193262, 1), new ScheduledTask(203020, 203348, 1), new ScheduledTask(233280, 233567, 0), new ScheduledTask(261980, 262144, 0), new ScheduledTask(278380, 278790, 0), new ScheduledTask(233680, 233926, 2), new ScheduledTask(319380, 319790, 0), new ScheduledTask(278780, 279190, 1)};
        int[] expectedProcessorEndTimes = new int[]{319790, 279190, 233926, 82};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot62_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.62_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 3690;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(82, 492, 0), new ScheduledTask(0, 369, 1), new ScheduledTask(0, 82, 0), new ScheduledTask(369, 533, 1), new ScheduledTask(533, 943, 1), new ScheduledTask(492, 574, 0), new ScheduledTask(943, 1353, 1), new ScheduledTask(1353, 1722, 1), new ScheduledTask(1722, 2009, 1), new ScheduledTask(1355, 1437, 0), new ScheduledTask(1437, 1560, 0), new ScheduledTask(2009, 2419, 1), new ScheduledTask(952, 1321, 0), new ScheduledTask(2018, 2100, 0), new ScheduledTask(2100, 2428, 0), new ScheduledTask(2419, 2706, 1), new ScheduledTask(2706, 2870, 1), new ScheduledTask(2870, 3280, 1), new ScheduledTask(2428, 2674, 0), new ScheduledTask(3280, 3690, 1), new ScheduledTask(2874, 3284, 0)};
        int[] expectedProcessorEndTimes = new int[]{3284, 3690};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot62_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.62_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 3567;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 410, 0), new ScheduledTask(0, 369, 1), new ScheduledTask(0, 82, 2), new ScheduledTask(82, 246, 2), new ScheduledTask(410, 820, 0), new ScheduledTask(0, 82, 3), new ScheduledTask(820, 1230, 0), new ScheduledTask(1230, 1599, 0), new ScheduledTask(1599, 1886, 0), new ScheduledTask(1232, 1314, 1), new ScheduledTask(1314, 1437, 1), new ScheduledTask(1886, 2296, 0), new ScheduledTask(829, 1198, 2), new ScheduledTask(1895, 1977, 1), new ScheduledTask(1977, 2305, 1), new ScheduledTask(2296, 2583, 0), new ScheduledTask(2583, 2747, 0), new ScheduledTask(2747, 3157, 0), new ScheduledTask(2300, 2546, 2), new ScheduledTask(3157, 3567, 0), new ScheduledTask(2751, 3161, 1)};
        int[] expectedProcessorEndTimes = new int[]{3567, 3161, 2546, 82};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot62_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.62_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 3567;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 410, 0), new ScheduledTask(0, 369, 1), new ScheduledTask(0, 82, 2), new ScheduledTask(82, 246, 2), new ScheduledTask(410, 820, 0), new ScheduledTask(0, 82, 3), new ScheduledTask(820, 1230, 0), new ScheduledTask(1230, 1599, 0), new ScheduledTask(1599, 1886, 0), new ScheduledTask(1232, 1314, 1), new ScheduledTask(1314, 1437, 1), new ScheduledTask(1886, 2296, 0), new ScheduledTask(829, 1198, 2), new ScheduledTask(1895, 1977, 1), new ScheduledTask(1977, 2305, 1), new ScheduledTask(2296, 2583, 0), new ScheduledTask(2583, 2747, 0), new ScheduledTask(2747, 3157, 0), new ScheduledTask(2300, 2546, 2), new ScheduledTask(3157, 3567, 0), new ScheduledTask(2751, 3161, 1)};
        int[] expectedProcessorEndTimes = new int[]{3567, 3161, 2546, 82};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot71_CCR_0dot10_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.71_CCR_0.10_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 563100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 87, 0), new ScheduledTask(8700, 9090, 0), new ScheduledTask(86700, 86917, 0), new ScheduledTask(147400, 147746, 0), new ScheduledTask(47700, 48090, 0), new ScheduledTask(108400, 108530, 0), new ScheduledTask(121400, 121660, 0), new ScheduledTask(182000, 182260, 0), new ScheduledTask(87300, 87560, 1), new ScheduledTask(208000, 208433, 0), new ScheduledTask(251300, 251387, 0), new ScheduledTask(303300, 303603, 0), new ScheduledTask(260000, 260433, 0), new ScheduledTask(368200, 368546, 0), new ScheduledTask(402800, 402930, 0), new ScheduledTask(441800, 442233, 0), new ScheduledTask(333600, 333946, 0), new ScheduledTask(415800, 416060, 0), new ScheduledTask(515400, 515790, 0), new ScheduledTask(485100, 485403, 0), new ScheduledTask(554400, 554487, 0)};
        int[] expectedProcessorEndTimes = new int[]{554487, 87560};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot71_CCR_0dot10_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.71_CCR_0.10_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 394100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 87, 0), new ScheduledTask(8700, 9090, 0), new ScheduledTask(9500, 9717, 1), new ScheduledTask(86700, 87046, 0), new ScheduledTask(47700, 48090, 0), new ScheduledTask(53400, 53530, 2), new ScheduledTask(80400, 80660, 3), new ScheduledTask(121300, 121560, 0), new ScheduledTask(87300, 87560, 2), new ScheduledTask(147300, 147733, 0), new ScheduledTask(147700, 147787, 3), new ScheduledTask(165100, 165403, 3), new ScheduledTask(190600, 191033, 0), new ScheduledTask(233900, 234246, 0), new ScheduledTask(268500, 268630, 0), new ScheduledTask(281500, 281933, 0), new ScheduledTask(225700, 226046, 3), new ScheduledTask(294900, 295160, 3), new ScheduledTask(324800, 325190, 0), new ScheduledTask(363800, 364103, 0), new ScheduledTask(364800, 364887, 3)};
        int[] expectedProcessorEndTimes = new int[]{364103, 9717, 87560, 364887};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot71_CCR_0dot10_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.71_CCR_0.10_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 313940;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 87, 0), new ScheduledTask(8700, 9090, 0), new ScheduledTask(9500, 9717, 2), new ScheduledTask(48500, 48846, 1), new ScheduledTask(47700, 48090, 0), new ScheduledTask(48700, 48830, 3), new ScheduledTask(75700, 75960, 2), new ScheduledTask(90020, 90280, 1), new ScheduledTask(86700, 86960, 0), new ScheduledTask(121820, 122253, 0), new ScheduledTask(121220, 121307, 1), new ScheduledTask(131660, 131963, 1), new ScheduledTask(165120, 165553, 0), new ScheduledTask(168020, 168366, 1), new ScheduledTask(209940, 210070, 0), new ScheduledTask(222940, 223373, 0), new ScheduledTask(168320, 168666, 3), new ScheduledTask(238220, 238480, 1), new ScheduledTask(266240, 266630, 0), new ScheduledTask(269420, 269723, 1), new ScheduledTask(305240, 305327, 0)};
        int[] expectedProcessorEndTimes = new int[]{305327, 269723, 75960, 168666};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot71_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.71_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 3163;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 87, 0), new ScheduledTask(87, 477, 0), new ScheduledTask(95, 312, 1), new ScheduledTask(617, 963, 1), new ScheduledTask(477, 867, 0), new ScheduledTask(487, 617, 1), new ScheduledTask(867, 1127, 0), new ScheduledTask(963, 1223, 1), new ScheduledTask(1127, 1387, 0), new ScheduledTask(1223, 1656, 1), new ScheduledTask(1387, 1474, 0), new ScheduledTask(1474, 1777, 0), new ScheduledTask(1656, 2089, 1), new ScheduledTask(1777, 2123, 0), new ScheduledTask(2123, 2253, 0), new ScheduledTask(2253, 2686, 0), new ScheduledTask(2089, 2435, 1), new ScheduledTask(2435, 2695, 1), new ScheduledTask(2686, 3076, 0), new ScheduledTask(2695, 2998, 1), new ScheduledTask(3076, 3163, 0)};
        int[] expectedProcessorEndTimes = new int[]{3163, 2998};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot71_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.71_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 2989;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 87, 0), new ScheduledTask(87, 477, 0), new ScheduledTask(95, 312, 1), new ScheduledTask(477, 823, 0), new ScheduledTask(483, 873, 1), new ScheduledTask(487, 617, 2), new ScheduledTask(617, 877, 2), new ScheduledTask(823, 1083, 0), new ScheduledTask(873, 1133, 1), new ScheduledTask(1083, 1516, 0), new ScheduledTask(1133, 1220, 1), new ScheduledTask(1220, 1523, 1), new ScheduledTask(1516, 1949, 0), new ScheduledTask(1523, 1869, 1), new ScheduledTask(1949, 2079, 0), new ScheduledTask(2079, 2512, 0), new ScheduledTask(1526, 1872, 2), new ScheduledTask(2086, 2346, 1), new ScheduledTask(2512, 2902, 0), new ScheduledTask(2518, 2821, 1), new ScheduledTask(2902, 2989, 0)};
        int[] expectedProcessorEndTimes = new int[]{2989, 2821, 1872};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot71_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.71_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 2989;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 87, 0), new ScheduledTask(87, 477, 0), new ScheduledTask(95, 312, 1), new ScheduledTask(477, 823, 0), new ScheduledTask(483, 873, 1), new ScheduledTask(487, 617, 2), new ScheduledTask(617, 877, 2), new ScheduledTask(823, 1083, 0), new ScheduledTask(873, 1133, 1), new ScheduledTask(1083, 1516, 0), new ScheduledTask(1133, 1220, 1), new ScheduledTask(1220, 1523, 1), new ScheduledTask(1516, 1949, 0), new ScheduledTask(1523, 1869, 1), new ScheduledTask(1949, 2079, 0), new ScheduledTask(2079, 2512, 0), new ScheduledTask(1526, 1872, 2), new ScheduledTask(2086, 2346, 1), new ScheduledTask(2512, 2902, 0), new ScheduledTask(2518, 2821, 1), new ScheduledTask(2902, 2989, 0)};
        int[] expectedProcessorEndTimes = new int[]{2989, 2821, 1872};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot76_CCR_1dot00_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.76_CCR_1.00_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 53400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(3300, 3333, 0), new ScheduledTask(6600, 6647, 0), new ScheduledTask(0, 33, 0), new ScheduledTask(3600, 3609, 1), new ScheduledTask(13200, 13247, 0), new ScheduledTask(17900, 17914, 0), new ScheduledTask(11300, 11319, 0), new ScheduledTask(19300, 19314, 0), new ScheduledTask(20700, 20723, 0), new ScheduledTask(23000, 23023, 0), new ScheduledTask(25300, 25333, 0), new ScheduledTask(25700, 25709, 1), new ScheduledTask(31900, 31942, 0), new ScheduledTask(28600, 28633, 0), new ScheduledTask(39800, 39847, 0), new ScheduledTask(37500, 37523, 0), new ScheduledTask(36100, 36114, 0), new ScheduledTask(44500, 44547, 0), new ScheduledTask(50100, 50133, 0), new ScheduledTask(37900, 37923, 2), new ScheduledTask(49200, 49209, 0)};
        int[] expectedProcessorEndTimes = new int[]{50133, 25709, 37923};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot76_CCR_1dot00_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.76_CCR_1.00_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 43600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 33, 0), new ScheduledTask(3300, 3347, 0), new ScheduledTask(0, 33, 1), new ScheduledTask(6600, 6609, 1), new ScheduledTask(8600, 8647, 0), new ScheduledTask(13300, 13314, 0), new ScheduledTask(9200, 9219, 2), new ScheduledTask(14700, 14714, 0), new ScheduledTask(16100, 16123, 0), new ScheduledTask(18900, 18923, 3), new ScheduledTask(18400, 18433, 0), new ScheduledTask(23900, 23909, 0), new ScheduledTask(24800, 24842, 0), new ScheduledTask(23500, 23533, 3), new ScheduledTask(30900, 30947, 0), new ScheduledTask(30100, 30123, 3), new ScheduledTask(29400, 29414, 2), new ScheduledTask(35600, 35647, 0), new ScheduledTask(40300, 40333, 0), new ScheduledTask(34700, 34723, 3), new ScheduledTask(40800, 40809, 3)};
        int[] expectedProcessorEndTimes = new int[]{40333, 6609, 29414, 40809};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot76_CCR_1dot00_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.76_CCR_1.00_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 39260;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 33, 0), new ScheduledTask(3300, 3347, 0), new ScheduledTask(0, 33, 1), new ScheduledTask(4260, 4269, 2), new ScheduledTask(8000, 8047, 0), new ScheduledTask(12700, 12714, 0), new ScheduledTask(8300, 8319, 3), new ScheduledTask(14100, 14114, 0), new ScheduledTask(15500, 15523, 0), new ScheduledTask(18300, 18323, 1), new ScheduledTask(17800, 17833, 0), new ScheduledTask(21460, 21469, 0), new ScheduledTask(22360, 22402, 0), new ScheduledTask(21700, 21733, 1), new ScheduledTask(26560, 26607, 0), new ScheduledTask(27160, 27183, 1), new ScheduledTask(26960, 26974, 3), new ScheduledTask(31260, 31307, 0), new ScheduledTask(35960, 35993, 0), new ScheduledTask(29760, 29783, 3), new ScheduledTask(36460, 36469, 3)};
        int[] expectedProcessorEndTimes = new int[]{35993, 27183, 4269, 36469};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot76_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.76_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 388;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 33, 0), new ScheduledTask(33, 80, 0), new ScheduledTask(0, 33, 1), new ScheduledTask(33, 42, 1), new ScheduledTask(80, 127, 0), new ScheduledTask(127, 141, 0), new ScheduledTask(83, 102, 1), new ScheduledTask(141, 155, 0), new ScheduledTask(155, 178, 0), new ScheduledTask(183, 206, 1), new ScheduledTask(178, 211, 0), new ScheduledTask(206, 215, 1), new ScheduledTask(219, 261, 1), new ScheduledTask(212, 245, 0), new ScheduledTask(261, 308, 1), new ScheduledTask(267, 290, 0), new ScheduledTask(290, 304, 0), new ScheduledTask(308, 355, 1), new ScheduledTask(355, 388, 1), new ScheduledTask(304, 327, 0), new ScheduledTask(360, 369, 0)};
        int[] expectedProcessorEndTimes = new int[]{369, 388};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot76_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.76_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 388;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 33, 0), new ScheduledTask(33, 80, 0), new ScheduledTask(0, 33, 1), new ScheduledTask(36, 45, 2), new ScheduledTask(80, 127, 0), new ScheduledTask(127, 141, 0), new ScheduledTask(83, 102, 3), new ScheduledTask(141, 155, 0), new ScheduledTask(155, 178, 0), new ScheduledTask(183, 206, 2), new ScheduledTask(178, 211, 0), new ScheduledTask(210, 219, 3), new ScheduledTask(219, 261, 3), new ScheduledTask(217, 250, 2), new ScheduledTask(261, 308, 3), new ScheduledTask(267, 290, 2), new ScheduledTask(290, 304, 2), new ScheduledTask(308, 355, 3), new ScheduledTask(355, 388, 3), new ScheduledTask(304, 327, 2), new ScheduledTask(360, 369, 2)};
        int[] expectedProcessorEndTimes = new int[]{211, 33, 369, 388};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot76_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.76_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 388;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 33, 0), new ScheduledTask(33, 80, 0), new ScheduledTask(0, 33, 1), new ScheduledTask(36, 45, 2), new ScheduledTask(80, 127, 0), new ScheduledTask(127, 141, 0), new ScheduledTask(83, 102, 3), new ScheduledTask(141, 155, 0), new ScheduledTask(155, 178, 0), new ScheduledTask(183, 206, 4), new ScheduledTask(178, 211, 0), new ScheduledTask(210, 219, 5), new ScheduledTask(219, 261, 5), new ScheduledTask(217, 250, 4), new ScheduledTask(261, 308, 5), new ScheduledTask(267, 290, 4), new ScheduledTask(290, 304, 4), new ScheduledTask(308, 355, 5), new ScheduledTask(355, 388, 5), new ScheduledTask(304, 327, 4), new ScheduledTask(360, 369, 4)};
        int[] expectedProcessorEndTimes = new int[]{211, 33, 45, 102, 369, 388};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot81_CCR_0dot99_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.81_CCR_0.99_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 55000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(900, 914, 0), new ScheduledTask(4600, 4618, 0), new ScheduledTask(0, 9, 0), new ScheduledTask(6400, 6445, 0), new ScheduledTask(2300, 2323, 0), new ScheduledTask(10900, 10945, 0), new ScheduledTask(15400, 15445, 0), new ScheduledTask(2800, 2836, 1), new ScheduledTask(19900, 19918, 0), new ScheduledTask(27300, 27336, 0), new ScheduledTask(30900, 30923, 0), new ScheduledTask(33200, 33214, 0), new ScheduledTask(37800, 37836, 0), new ScheduledTask(24600, 24627, 0), new ScheduledTask(41400, 41441, 0), new ScheduledTask(28200, 28232, 1), new ScheduledTask(34600, 34632, 0), new ScheduledTask(45500, 45545, 0), new ScheduledTask(50000, 50027, 0), new ScheduledTask(52700, 52723, 0), new ScheduledTask(34000, 34009, 2)};
        int[] expectedProcessorEndTimes = new int[]{52723, 28232, 34009};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot81_CCR_0dot99_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.81_CCR_0.99_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 42300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(1400, 1418, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(3200, 3245, 0), new ScheduledTask(1800, 1823, 1), new ScheduledTask(7700, 7745, 0), new ScheduledTask(12200, 12245, 0), new ScheduledTask(2400, 2436, 2), new ScheduledTask(16700, 16718, 0), new ScheduledTask(18500, 18536, 0), new ScheduledTask(22100, 22123, 0), new ScheduledTask(24400, 24414, 0), new ScheduledTask(25800, 25836, 0), new ScheduledTask(17400, 17427, 1), new ScheduledTask(29400, 29441, 0), new ScheduledTask(22800, 22832, 1), new ScheduledTask(26100, 26132, 2), new ScheduledTask(33500, 33545, 0), new ScheduledTask(33800, 33827, 1), new ScheduledTask(40000, 40023, 0), new ScheduledTask(25200, 25209, 3)};
        int[] expectedProcessorEndTimes = new int[]{40023, 33827, 26132, 25209};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot81_CCR_0dot99_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.81_CCR_0.99_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 40300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(1400, 1418, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(3200, 3245, 0), new ScheduledTask(1080, 1103, 1), new ScheduledTask(7700, 7745, 0), new ScheduledTask(12200, 12245, 0), new ScheduledTask(1900, 1936, 2), new ScheduledTask(16700, 16718, 0), new ScheduledTask(18500, 18536, 0), new ScheduledTask(22100, 22123, 0), new ScheduledTask(24400, 24414, 0), new ScheduledTask(25800, 25836, 0), new ScheduledTask(17400, 17427, 1), new ScheduledTask(29400, 29441, 0), new ScheduledTask(20640, 20672, 1), new ScheduledTask(26100, 26132, 1), new ScheduledTask(33500, 33545, 0), new ScheduledTask(33800, 33827, 1), new ScheduledTask(38000, 38023, 0), new ScheduledTask(25200, 25209, 2)};
        int[] expectedProcessorEndTimes = new int[]{38023, 33827, 25209};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot81_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.81_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 403;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(14, 32, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(32, 77, 0), new ScheduledTask(9, 32, 1), new ScheduledTask(77, 122, 0), new ScheduledTask(122, 167, 0), new ScheduledTask(32, 68, 1), new ScheduledTask(167, 185, 0), new ScheduledTask(185, 221, 0), new ScheduledTask(221, 244, 0), new ScheduledTask(244, 258, 0), new ScheduledTask(258, 294, 0), new ScheduledTask(174, 201, 1), new ScheduledTask(294, 335, 0), new ScheduledTask(201, 233, 1), new ScheduledTask(261, 293, 1), new ScheduledTask(335, 380, 0), new ScheduledTask(338, 365, 1), new ScheduledTask(380, 403, 0), new ScheduledTask(365, 374, 1)};
        int[] expectedProcessorEndTimes = new int[]{403, 374};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot81_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.81_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 403;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(14, 32, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(32, 77, 0), new ScheduledTask(9, 32, 1), new ScheduledTask(77, 122, 0), new ScheduledTask(122, 167, 0), new ScheduledTask(19, 55, 2), new ScheduledTask(167, 185, 0), new ScheduledTask(185, 221, 0), new ScheduledTask(221, 244, 0), new ScheduledTask(244, 258, 0), new ScheduledTask(258, 294, 0), new ScheduledTask(174, 201, 1), new ScheduledTask(294, 335, 0), new ScheduledTask(201, 233, 1), new ScheduledTask(261, 293, 1), new ScheduledTask(335, 380, 0), new ScheduledTask(338, 365, 1), new ScheduledTask(380, 403, 0), new ScheduledTask(252, 261, 2)};
        int[] expectedProcessorEndTimes = new int[]{403, 365, 261};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot81_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.81_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 403;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(14, 32, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(32, 77, 0), new ScheduledTask(9, 32, 1), new ScheduledTask(77, 122, 0), new ScheduledTask(122, 167, 0), new ScheduledTask(19, 55, 2), new ScheduledTask(167, 185, 0), new ScheduledTask(185, 221, 0), new ScheduledTask(221, 244, 0), new ScheduledTask(244, 258, 0), new ScheduledTask(258, 294, 0), new ScheduledTask(174, 201, 1), new ScheduledTask(294, 335, 0), new ScheduledTask(201, 233, 1), new ScheduledTask(261, 293, 1), new ScheduledTask(335, 380, 0), new ScheduledTask(338, 365, 1), new ScheduledTask(380, 403, 0), new ScheduledTask(252, 261, 2)};
        int[] expectedProcessorEndTimes = new int[]{403, 365, 261};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot81_CCR_9dot96_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.81_CCR_9.96_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 11800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(600, 607, 0), new ScheduledTask(1300, 1305, 0), new ScheduledTask(1800, 1802, 0), new ScheduledTask(2000, 2005, 0), new ScheduledTask(2500, 2507, 0), new ScheduledTask(3200, 3205, 0), new ScheduledTask(3700, 3702, 0), new ScheduledTask(3900, 3905, 0), new ScheduledTask(4400, 4409, 0), new ScheduledTask(5300, 5304, 0), new ScheduledTask(5700, 5710, 0), new ScheduledTask(6700, 6704, 0), new ScheduledTask(7100, 7104, 0), new ScheduledTask(7500, 7504, 0), new ScheduledTask(7900, 7905, 0), new ScheduledTask(8400, 8403, 0), new ScheduledTask(8700, 8707, 0), new ScheduledTask(9400, 9410, 0), new ScheduledTask(10400, 10408, 0), new ScheduledTask(11200, 11206, 0)};
        int[] expectedProcessorEndTimes = new int[]{11206};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot81_CCR_9dot96_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.81_CCR_9.96_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 11200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(600, 607, 0), new ScheduledTask(1300, 1305, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(1800, 1805, 0), new ScheduledTask(2300, 2307, 0), new ScheduledTask(3000, 3005, 0), new ScheduledTask(3500, 3502, 0), new ScheduledTask(3700, 3705, 0), new ScheduledTask(4200, 4209, 0), new ScheduledTask(5100, 5104, 0), new ScheduledTask(5500, 5510, 0), new ScheduledTask(4500, 4504, 1), new ScheduledTask(6500, 6504, 0), new ScheduledTask(6900, 6904, 0), new ScheduledTask(7300, 7305, 0), new ScheduledTask(7800, 7803, 0), new ScheduledTask(8100, 8107, 0), new ScheduledTask(8800, 8810, 0), new ScheduledTask(9800, 9808, 0), new ScheduledTask(10600, 10606, 0)};
        int[] expectedProcessorEndTimes = new int[]{10606, 4504};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot81_CCR_9dot96_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.81_CCR_9.96_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 11200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(600, 607, 0), new ScheduledTask(1300, 1305, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(1800, 1805, 0), new ScheduledTask(2300, 2307, 0), new ScheduledTask(3000, 3005, 0), new ScheduledTask(3500, 3502, 0), new ScheduledTask(3700, 3705, 0), new ScheduledTask(4200, 4209, 0), new ScheduledTask(5100, 5104, 0), new ScheduledTask(5500, 5510, 0), new ScheduledTask(4500, 4504, 1), new ScheduledTask(6500, 6504, 0), new ScheduledTask(6900, 6904, 0), new ScheduledTask(7300, 7305, 0), new ScheduledTask(7800, 7803, 0), new ScheduledTask(8100, 8107, 0), new ScheduledTask(8800, 8810, 0), new ScheduledTask(9800, 9808, 0), new ScheduledTask(10600, 10606, 0)};
        int[] expectedProcessorEndTimes = new int[]{10606, 4504};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot81_CCR_9dot96_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.81_CCR_9.96_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 110;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 13, 0), new ScheduledTask(13, 18, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(18, 23, 0), new ScheduledTask(23, 30, 0), new ScheduledTask(39, 44, 0), new ScheduledTask(44, 46, 0), new ScheduledTask(46, 51, 0), new ScheduledTask(30, 39, 0), new ScheduledTask(51, 55, 0), new ScheduledTask(55, 65, 0), new ScheduledTask(54, 58, 1), new ScheduledTask(65, 69, 0), new ScheduledTask(69, 73, 0), new ScheduledTask(73, 78, 0), new ScheduledTask(78, 81, 0), new ScheduledTask(81, 88, 0), new ScheduledTask(94, 104, 1), new ScheduledTask(88, 96, 0), new ScheduledTask(104, 110, 1)};
        int[] expectedProcessorEndTimes = new int[]{96, 110};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot81_CCR_9dot96_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.81_CCR_9.96_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 110;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 13, 0), new ScheduledTask(13, 18, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(18, 23, 0), new ScheduledTask(23, 30, 0), new ScheduledTask(39, 44, 0), new ScheduledTask(44, 46, 0), new ScheduledTask(46, 51, 0), new ScheduledTask(30, 39, 0), new ScheduledTask(51, 55, 0), new ScheduledTask(55, 65, 0), new ScheduledTask(54, 58, 2), new ScheduledTask(65, 69, 0), new ScheduledTask(69, 73, 0), new ScheduledTask(73, 78, 0), new ScheduledTask(78, 81, 0), new ScheduledTask(81, 88, 0), new ScheduledTask(94, 104, 3), new ScheduledTask(88, 96, 0), new ScheduledTask(104, 110, 3)};
        int[] expectedProcessorEndTimes = new int[]{96, 2, 58, 110};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot81_CCR_9dot96_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.81_CCR_9.96_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 110;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 13, 0), new ScheduledTask(13, 18, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(18, 23, 0), new ScheduledTask(23, 30, 0), new ScheduledTask(39, 44, 0), new ScheduledTask(44, 46, 0), new ScheduledTask(46, 51, 0), new ScheduledTask(30, 39, 0), new ScheduledTask(51, 55, 0), new ScheduledTask(55, 65, 0), new ScheduledTask(54, 58, 2), new ScheduledTask(65, 69, 0), new ScheduledTask(69, 73, 0), new ScheduledTask(73, 78, 0), new ScheduledTask(78, 81, 0), new ScheduledTask(81, 88, 0), new ScheduledTask(94, 104, 3), new ScheduledTask(88, 96, 0), new ScheduledTask(104, 110, 3)};
        int[] expectedProcessorEndTimes = new int[]{96, 2, 58, 110};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot86_CCR_1dot00_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.86_CCR_1.00_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 57200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(2800, 2833, 0), new ScheduledTask(0, 11, 1), new ScheduledTask(0, 28, 0), new ScheduledTask(7100, 7122, 0), new ScheduledTask(0, 11, 2), new ScheduledTask(9300, 9333, 0), new ScheduledTask(12600, 12639, 0), new ScheduledTask(16500, 16539, 0), new ScheduledTask(7000, 7011, 3), new ScheduledTask(20400, 20439, 0), new ScheduledTask(24300, 24317, 0), new ScheduledTask(26000, 26044, 0), new ScheduledTask(30400, 30433, 0), new ScheduledTask(38700, 38711, 0), new ScheduledTask(33700, 33711, 0), new ScheduledTask(39800, 39844, 0), new ScheduledTask(34800, 34839, 0), new ScheduledTask(35500, 35522, 3), new ScheduledTask(48900, 48950, 0), new ScheduledTask(44200, 44244, 0), new ScheduledTask(53900, 53933, 0)};
        int[] expectedProcessorEndTimes = new int[]{53933, 11, 11, 35522};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot86_CCR_1dot00_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.86_CCR_1.00_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 52600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 33, 0), new ScheduledTask(0, 11, 1), new ScheduledTask(0, 28, 2), new ScheduledTask(3300, 3322, 0), new ScheduledTask(0, 11, 3), new ScheduledTask(6100, 6133, 0), new ScheduledTask(9400, 9439, 0), new ScheduledTask(13300, 13339, 0), new ScheduledTask(5600, 5611, 2), new ScheduledTask(17200, 17239, 0), new ScheduledTask(21100, 21117, 0), new ScheduledTask(22800, 22844, 0), new ScheduledTask(27200, 27233, 0), new ScheduledTask(31200, 31211, 3), new ScheduledTask(30500, 30511, 0), new ScheduledTask(35500, 35544, 0), new ScheduledTask(31600, 31639, 0), new ScheduledTask(33400, 33422, 3), new ScheduledTask(44300, 44350, 0), new ScheduledTask(39900, 39944, 0), new ScheduledTask(49300, 49333, 0)};
        int[] expectedProcessorEndTimes = new int[]{49333, 11, 5611, 33422};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot86_CCR_1dot00_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.86_CCR_1.00_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 45500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 33, 0), new ScheduledTask(0, 11, 1), new ScheduledTask(0, 28, 2), new ScheduledTask(3300, 3322, 0), new ScheduledTask(0, 11, 3), new ScheduledTask(5500, 5533, 0), new ScheduledTask(8800, 8839, 0), new ScheduledTask(12700, 12739, 0), new ScheduledTask(1320, 1331, 1), new ScheduledTask(16600, 16639, 0), new ScheduledTask(20500, 20517, 0), new ScheduledTask(22200, 22244, 0), new ScheduledTask(26600, 26633, 0), new ScheduledTask(29900, 29911, 0), new ScheduledTask(30400, 30411, 1), new ScheduledTask(31000, 31044, 0), new ScheduledTask(31720, 31759, 1), new ScheduledTask(32420, 32442, 2), new ScheduledTask(37200, 37250, 0), new ScheduledTask(36400, 36444, 1), new ScheduledTask(42200, 42233, 0)};
        int[] expectedProcessorEndTimes = new int[]{42233, 36444, 32442, 11};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot86_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.86_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 454;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 33, 0), new ScheduledTask(11, 22, 1), new ScheduledTask(22, 50, 1), new ScheduledTask(33, 55, 0), new ScheduledTask(0, 11, 1), new ScheduledTask(55, 88, 0), new ScheduledTask(88, 127, 0), new ScheduledTask(127, 166, 0), new ScheduledTask(50, 61, 1), new ScheduledTask(166, 205, 0), new ScheduledTask(205, 222, 0), new ScheduledTask(222, 266, 0), new ScheduledTask(266, 299, 0), new ScheduledTask(306, 317, 1), new ScheduledTask(299, 310, 0), new ScheduledTask(317, 361, 1), new ScheduledTask(310, 349, 0), new ScheduledTask(349, 371, 0), new ScheduledTask(371, 421, 0), new ScheduledTask(361, 405, 1), new ScheduledTask(421, 454, 0)};
        int[] expectedProcessorEndTimes = new int[]{454, 405};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot86_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.86_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 445;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 33, 0), new ScheduledTask(0, 11, 1), new ScheduledTask(0, 28, 2), new ScheduledTask(33, 55, 0), new ScheduledTask(0, 11, 3), new ScheduledTask(55, 88, 0), new ScheduledTask(88, 127, 0), new ScheduledTask(127, 166, 0), new ScheduledTask(11, 22, 1), new ScheduledTask(166, 205, 0), new ScheduledTask(205, 222, 0), new ScheduledTask(222, 266, 0), new ScheduledTask(266, 299, 0), new ScheduledTask(299, 310, 0), new ScheduledTask(304, 315, 1), new ScheduledTask(310, 354, 0), new ScheduledTask(315, 354, 1), new ScheduledTask(322, 344, 2), new ScheduledTask(362, 412, 0), new ScheduledTask(363, 407, 1), new ScheduledTask(412, 445, 0)};
        int[] expectedProcessorEndTimes = new int[]{445, 407, 344, 11};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot86_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.86_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 445;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 33, 0), new ScheduledTask(0, 11, 1), new ScheduledTask(0, 28, 2), new ScheduledTask(33, 55, 0), new ScheduledTask(0, 11, 3), new ScheduledTask(55, 88, 0), new ScheduledTask(88, 127, 0), new ScheduledTask(127, 166, 0), new ScheduledTask(11, 22, 1), new ScheduledTask(166, 205, 0), new ScheduledTask(205, 222, 0), new ScheduledTask(222, 266, 0), new ScheduledTask(266, 299, 0), new ScheduledTask(299, 310, 0), new ScheduledTask(304, 315, 1), new ScheduledTask(310, 354, 0), new ScheduledTask(315, 354, 1), new ScheduledTask(322, 344, 2), new ScheduledTask(362, 412, 0), new ScheduledTask(363, 407, 1), new ScheduledTask(412, 445, 0)};
        int[] expectedProcessorEndTimes = new int[]{445, 407, 344, 11};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot86_CCR_10dot02_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.86_CCR_10.02_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 105;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 13, 0), new ScheduledTask(13, 23, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(27, 34, 0), new ScheduledTask(23, 27, 0), new ScheduledTask(8, 16, 1), new ScheduledTask(34, 38, 0), new ScheduledTask(38, 45, 0), new ScheduledTask(45, 49, 0), new ScheduledTask(42, 47, 2), new ScheduledTask(53, 58, 0), new ScheduledTask(64, 67, 0), new ScheduledTask(67, 77, 0), new ScheduledTask(58, 63, 0), new ScheduledTask(62, 67, 3), new ScheduledTask(77, 84, 0), new ScheduledTask(90, 92, 0), new ScheduledTask(84, 90, 0), new ScheduledTask(92, 97, 0), new ScheduledTask(97, 105, 0)};
        int[] expectedProcessorEndTimes = new int[]{105, 16, 47, 67};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot86_CCR_10dot02_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.86_CCR_10.02_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 105;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 13, 0), new ScheduledTask(13, 23, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(27, 34, 0), new ScheduledTask(23, 27, 0), new ScheduledTask(8, 16, 1), new ScheduledTask(34, 38, 0), new ScheduledTask(38, 45, 0), new ScheduledTask(45, 49, 0), new ScheduledTask(42, 47, 1), new ScheduledTask(53, 58, 0), new ScheduledTask(64, 67, 0), new ScheduledTask(67, 77, 0), new ScheduledTask(58, 63, 0), new ScheduledTask(62, 67, 1), new ScheduledTask(77, 84, 0), new ScheduledTask(90, 92, 0), new ScheduledTask(84, 90, 0), new ScheduledTask(92, 97, 0), new ScheduledTask(97, 105, 0)};
        int[] expectedProcessorEndTimes = new int[]{105, 67};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot86_CCR_10dot02_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.86_CCR_10.02_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 105;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 13, 0), new ScheduledTask(13, 23, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(27, 34, 0), new ScheduledTask(23, 27, 0), new ScheduledTask(0, 8, 2), new ScheduledTask(34, 38, 0), new ScheduledTask(38, 45, 0), new ScheduledTask(45, 49, 0), new ScheduledTask(42, 47, 3), new ScheduledTask(53, 58, 0), new ScheduledTask(64, 67, 0), new ScheduledTask(67, 77, 0), new ScheduledTask(58, 63, 0), new ScheduledTask(62, 67, 3), new ScheduledTask(77, 84, 0), new ScheduledTask(90, 92, 0), new ScheduledTask(84, 90, 0), new ScheduledTask(92, 97, 0), new ScheduledTask(97, 105, 0)};
        int[] expectedProcessorEndTimes = new int[]{105, 8, 8, 67};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot86_CCR_10dot02_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.86_CCR_10.02_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 105;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 13, 0), new ScheduledTask(13, 23, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(27, 34, 0), new ScheduledTask(23, 27, 0), new ScheduledTask(8, 16, 1), new ScheduledTask(34, 38, 0), new ScheduledTask(38, 45, 0), new ScheduledTask(45, 49, 0), new ScheduledTask(42, 47, 1), new ScheduledTask(53, 58, 0), new ScheduledTask(64, 67, 0), new ScheduledTask(67, 77, 0), new ScheduledTask(58, 63, 0), new ScheduledTask(62, 67, 2), new ScheduledTask(77, 84, 0), new ScheduledTask(90, 92, 0), new ScheduledTask(84, 90, 0), new ScheduledTask(92, 97, 0), new ScheduledTask(97, 105, 0)};
        int[] expectedProcessorEndTimes = new int[]{105, 47, 67};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot86_CCR_10dot08_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.86_CCR_10.08_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 11800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(200, 208, 0), new ScheduledTask(1000, 1006, 0), new ScheduledTask(1600, 1607, 0), new ScheduledTask(2300, 2303, 0), new ScheduledTask(2600, 2608, 0), new ScheduledTask(3400, 3407, 0), new ScheduledTask(4100, 4104, 0), new ScheduledTask(4500, 4506, 0), new ScheduledTask(5100, 5110, 0), new ScheduledTask(6100, 6103, 0), new ScheduledTask(6400, 6406, 0), new ScheduledTask(7000, 7004, 0), new ScheduledTask(7400, 7408, 0), new ScheduledTask(8200, 8204, 0), new ScheduledTask(8600, 8605, 0), new ScheduledTask(9100, 9108, 0), new ScheduledTask(9900, 9909, 0), new ScheduledTask(10800, 10802, 0), new ScheduledTask(11000, 11004, 0), new ScheduledTask(11400, 11404, 0)};
        int[] expectedProcessorEndTimes = new int[]{11404};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot86_CCR_10dot08_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.86_CCR_10.08_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(800, 802, 0), new ScheduledTask(0, 8, 0), new ScheduledTask(1000, 1006, 0), new ScheduledTask(1900, 1907, 0), new ScheduledTask(1600, 1603, 0), new ScheduledTask(3300, 3308, 0), new ScheduledTask(2600, 2607, 0), new ScheduledTask(3300, 3304, 1), new ScheduledTask(4500, 4506, 0), new ScheduledTask(5100, 5110, 0), new ScheduledTask(5500, 5503, 1), new ScheduledTask(3500, 3506, 2), new ScheduledTask(7800, 7804, 0), new ScheduledTask(6100, 6108, 0), new ScheduledTask(8200, 8204, 0), new ScheduledTask(8600, 8605, 0), new ScheduledTask(6900, 6908, 0), new ScheduledTask(9100, 9109, 0), new ScheduledTask(9200, 9202, 3), new ScheduledTask(9600, 9604, 3), new ScheduledTask(10000, 10004, 0)};
        int[] expectedProcessorEndTimes = new int[]{10004, 5503, 3506, 9604};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot86_CCR_10dot08_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.86_CCR_10.08_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9920;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(800, 802, 0), new ScheduledTask(0, 8, 0), new ScheduledTask(1000, 1006, 0), new ScheduledTask(1900, 1907, 0), new ScheduledTask(1600, 1603, 0), new ScheduledTask(3300, 3308, 0), new ScheduledTask(2600, 2607, 0), new ScheduledTask(3300, 3304, 3), new ScheduledTask(5100, 5106, 0), new ScheduledTask(4100, 4110, 0), new ScheduledTask(6100, 6103, 1), new ScheduledTask(3500, 3506, 2), new ScheduledTask(6800, 6804, 1), new ScheduledTask(5800, 5808, 0), new ScheduledTask(7880, 7884, 1), new ScheduledTask(7280, 7285, 1), new ScheduledTask(6600, 6608, 0), new ScheduledTask(8360, 8369, 1), new ScheduledTask(8960, 8962, 2), new ScheduledTask(9260, 9264, 2), new ScheduledTask(9440, 9444, 1)};
        int[] expectedProcessorEndTimes = new int[]{6608, 9444, 9264, 3304};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot86_CCR_10dot08_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.86_CCR_10.08_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 94;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(8, 10, 0), new ScheduledTask(0, 8, 0), new ScheduledTask(10, 16, 0), new ScheduledTask(19, 26, 0), new ScheduledTask(16, 19, 0), new ScheduledTask(33, 41, 0), new ScheduledTask(26, 33, 0), new ScheduledTask(41, 45, 1), new ScheduledTask(51, 57, 0), new ScheduledTask(41, 51, 0), new ScheduledTask(61, 64, 1), new ScheduledTask(35, 41, 1), new ScheduledTask(68, 72, 1), new ScheduledTask(57, 65, 0), new ScheduledTask(77, 81, 1), new ScheduledTask(72, 77, 1), new ScheduledTask(65, 73, 0), new ScheduledTask(81, 90, 1), new ScheduledTask(87, 89, 0), new ScheduledTask(89, 93, 0), new ScheduledTask(90, 94, 1)};
        int[] expectedProcessorEndTimes = new int[]{93, 94};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot86_CCR_10dot08_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.86_CCR_10.08_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 94;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(8, 10, 0), new ScheduledTask(0, 8, 0), new ScheduledTask(10, 16, 0), new ScheduledTask(19, 26, 0), new ScheduledTask(16, 19, 0), new ScheduledTask(33, 41, 0), new ScheduledTask(26, 33, 0), new ScheduledTask(33, 37, 1), new ScheduledTask(51, 57, 0), new ScheduledTask(41, 51, 0), new ScheduledTask(61, 64, 2), new ScheduledTask(35, 41, 3), new ScheduledTask(68, 72, 2), new ScheduledTask(57, 65, 0), new ScheduledTask(77, 81, 2), new ScheduledTask(72, 77, 2), new ScheduledTask(65, 73, 0), new ScheduledTask(81, 90, 2), new ScheduledTask(88, 90, 3), new ScheduledTask(90, 94, 3), new ScheduledTask(90, 94, 2)};
        int[] expectedProcessorEndTimes = new int[]{73, 37, 94, 94};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot86_CCR_10dot08_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.86_CCR_10.08_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 94;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(8, 10, 0), new ScheduledTask(0, 8, 0), new ScheduledTask(10, 16, 0), new ScheduledTask(19, 26, 0), new ScheduledTask(16, 19, 0), new ScheduledTask(33, 41, 0), new ScheduledTask(26, 33, 0), new ScheduledTask(33, 37, 1), new ScheduledTask(51, 57, 0), new ScheduledTask(41, 51, 0), new ScheduledTask(61, 64, 2), new ScheduledTask(35, 41, 3), new ScheduledTask(68, 72, 2), new ScheduledTask(57, 65, 0), new ScheduledTask(77, 81, 2), new ScheduledTask(72, 77, 2), new ScheduledTask(65, 73, 0), new ScheduledTask(81, 90, 2), new ScheduledTask(88, 90, 4), new ScheduledTask(90, 94, 4), new ScheduledTask(90, 94, 2)};
        int[] expectedProcessorEndTimes = new int[]{73, 37, 94, 41, 94};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot90_CCR_0dot10_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.90_CCR_0.10_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 547700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 472, 0), new ScheduledTask(47200, 47624, 0), new ScheduledTask(89600, 89883, 0), new ScheduledTask(0, 236, 1), new ScheduledTask(48200, 48294, 2), new ScheduledTask(170400, 170777, 0), new ScheduledTask(142100, 142289, 0), new ScheduledTask(117900, 118136, 0), new ScheduledTask(161000, 161094, 0), new ScheduledTask(208100, 208194, 0), new ScheduledTask(236400, 236683, 0), new ScheduledTask(217500, 217689, 0), new ScheduledTask(293000, 293472, 0), new ScheduledTask(340200, 340577, 0), new ScheduledTask(264700, 264983, 0), new ScheduledTask(264900, 265230, 3), new ScheduledTask(425100, 425524, 0), new ScheduledTask(377900, 378372, 0), new ScheduledTask(510000, 510377, 0), new ScheduledTask(486400, 486636, 0), new ScheduledTask(467500, 467689, 0)};
        int[] expectedProcessorEndTimes = new int[]{510377, 236, 48294, 265230};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot90_CCR_0dot10_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.90_CCR_0.10_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 389300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 472, 0), new ScheduledTask(47200, 47624, 0), new ScheduledTask(89600, 89883, 0), new ScheduledTask(0, 236, 1), new ScheduledTask(48200, 48294, 1), new ScheduledTask(117900, 118277, 0), new ScheduledTask(118300, 118489, 1), new ScheduledTask(118200, 118436, 2), new ScheduledTask(156300, 156394, 0), new ScheduledTask(165700, 165794, 0), new ScheduledTask(175100, 175383, 0), new ScheduledTask(175400, 175589, 1), new ScheduledTask(213900, 214372, 0), new ScheduledTask(261100, 261477, 0), new ScheduledTask(213200, 213483, 1), new ScheduledTask(203600, 203930, 2), new ScheduledTask(298800, 299224, 0), new ScheduledTask(341200, 341672, 0), new ScheduledTask(269900, 270277, 1), new ScheduledTask(342100, 342336, 2), new ScheduledTask(342200, 342389, 3)};
        int[] expectedProcessorEndTimes = new int[]{341672, 270277, 342336, 342389};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot90_CCR_0dot10_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.90_CCR_0.10_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 349900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 472, 0), new ScheduledTask(47200, 47624, 0), new ScheduledTask(89600, 89883, 0), new ScheduledTask(0, 236, 1), new ScheduledTask(48200, 48294, 2), new ScheduledTask(117900, 118277, 0), new ScheduledTask(118300, 118489, 1), new ScheduledTask(118200, 118436, 2), new ScheduledTask(140980, 141074, 1), new ScheduledTask(155600, 155694, 0), new ScheduledTask(165000, 165283, 0), new ScheduledTask(165300, 165489, 1), new ScheduledTask(193300, 193772, 0), new ScheduledTask(240500, 240877, 0), new ScheduledTask(193900, 194183, 2), new ScheduledTask(193500, 193830, 1), new ScheduledTask(278200, 278624, 0), new ScheduledTask(279100, 279572, 2), new ScheduledTask(236650, 237027, 3), new ScheduledTask(321500, 321736, 1), new ScheduledTask(320600, 320789, 0)};
        int[] expectedProcessorEndTimes = new int[]{320789, 321736, 279572, 237027};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot90_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.90_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 3631;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 472, 0), new ScheduledTask(472, 896, 0), new ScheduledTask(896, 1179, 0), new ScheduledTask(576, 812, 1), new ScheduledTask(482, 576, 1), new ScheduledTask(1183, 1560, 1), new ScheduledTask(1179, 1368, 0), new ScheduledTask(1462, 1698, 0), new ScheduledTask(1368, 1462, 0), new ScheduledTask(1560, 1654, 1), new ScheduledTask(1698, 1981, 0), new ScheduledTask(1654, 1843, 1), new ScheduledTask(1983, 2455, 1), new ScheduledTask(2455, 2832, 1), new ScheduledTask(2311, 2594, 0), new ScheduledTask(1981, 2311, 0), new ScheduledTask(2971, 3395, 0), new ScheduledTask(2832, 3304, 1), new ScheduledTask(2594, 2971, 0), new ScheduledTask(3395, 3631, 0), new ScheduledTask(3405, 3594, 1)};
        int[] expectedProcessorEndTimes = new int[]{3631, 3594};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot90_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.90_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 3442;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 472, 0), new ScheduledTask(472, 896, 0), new ScheduledTask(896, 1179, 0), new ScheduledTask(0, 236, 1), new ScheduledTask(482, 576, 1), new ScheduledTask(1179, 1556, 0), new ScheduledTask(1183, 1372, 1), new ScheduledTask(1182, 1418, 2), new ScheduledTask(1372, 1466, 1), new ScheduledTask(1556, 1650, 0), new ScheduledTask(1650, 1933, 0), new ScheduledTask(1653, 1842, 1), new ScheduledTask(1933, 2405, 0), new ScheduledTask(2405, 2782, 0), new ScheduledTask(1939, 2222, 1), new ScheduledTask(1935, 2265, 2), new ScheduledTask(2782, 3206, 0), new ScheduledTask(2791, 3263, 1), new ScheduledTask(2265, 2642, 2), new ScheduledTask(3206, 3442, 0), new ScheduledTask(3216, 3405, 2)};
        int[] expectedProcessorEndTimes = new int[]{3442, 3263, 3405};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot90_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.90_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 3442;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 472, 0), new ScheduledTask(472, 896, 0), new ScheduledTask(896, 1179, 0), new ScheduledTask(0, 236, 1), new ScheduledTask(482, 576, 1), new ScheduledTask(1179, 1556, 0), new ScheduledTask(1183, 1372, 1), new ScheduledTask(1182, 1418, 2), new ScheduledTask(1372, 1466, 1), new ScheduledTask(1556, 1650, 0), new ScheduledTask(1650, 1933, 0), new ScheduledTask(1653, 1842, 1), new ScheduledTask(1933, 2405, 0), new ScheduledTask(2405, 2782, 0), new ScheduledTask(1939, 2222, 1), new ScheduledTask(1935, 2265, 2), new ScheduledTask(2782, 3206, 0), new ScheduledTask(2791, 3263, 1), new ScheduledTask(2265, 2642, 2), new ScheduledTask(3206, 3442, 0), new ScheduledTask(3216, 3405, 2)};
        int[] expectedProcessorEndTimes = new int[]{3442, 3263, 3405};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot90_CCR_0dot10_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.90_CCR_0.10_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 590800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 364, 0), new ScheduledTask(36400, 36562, 0), new ScheduledTask(117300, 117664, 0), new ScheduledTask(80900, 81264, 0), new ScheduledTask(52600, 52883, 0), new ScheduledTask(186100, 186383, 0), new ScheduledTask(214400, 214805, 0), new ScheduledTask(254900, 255224, 0), new ScheduledTask(153700, 154024, 0), new ScheduledTask(327800, 328002, 0), new ScheduledTask(215300, 215462, 1), new ScheduledTask(384400, 384805, 0), new ScheduledTask(287300, 287705, 0), new ScheduledTask(313500, 313662, 2), new ScheduledTask(348000, 348364, 0), new ScheduledTask(461300, 461664, 0), new ScheduledTask(424900, 425264, 0), new ScheduledTask(497700, 497781, 0), new ScheduledTask(530100, 530505, 0), new ScheduledTask(505800, 506043, 0), new ScheduledTask(570600, 570802, 0)};
        int[] expectedProcessorEndTimes = new int[]{570802, 215462, 313662};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot90_CCR_0dot10_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.90_CCR_0.10_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 387400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 364, 0), new ScheduledTask(36400, 36562, 0), new ScheduledTask(52600, 52964, 0), new ScheduledTask(52900, 53264, 1), new ScheduledTask(53200, 53483, 2), new ScheduledTask(89000, 89283, 0), new ScheduledTask(126500, 126905, 0), new ScheduledTask(167000, 167324, 0), new ScheduledTask(110600, 110924, 3), new ScheduledTask(200400, 200602, 1), new ScheduledTask(175400, 175562, 3), new ScheduledTask(241700, 242105, 0), new ScheduledTask(199400, 199805, 0), new ScheduledTask(207800, 207962, 3), new ScheduledTask(241800, 242164, 3), new ScheduledTask(282200, 282564, 0), new ScheduledTask(240900, 241264, 2), new ScheduledTask(318600, 318681, 0), new ScheduledTask(326700, 327105, 0), new ScheduledTask(327400, 327643, 3), new ScheduledTask(367200, 367402, 0)};
        int[] expectedProcessorEndTimes = new int[]{367402, 200602, 241264, 327643};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot90_CCR_0dot10_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.90_CCR_0.10_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 356100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 364, 0), new ScheduledTask(36400, 36562, 0), new ScheduledTask(52600, 52964, 0), new ScheduledTask(52900, 53264, 1), new ScheduledTask(53200, 53483, 2), new ScheduledTask(89000, 89283, 0), new ScheduledTask(117300, 117705, 0), new ScheduledTask(157800, 158124, 0), new ScheduledTask(96580, 96904, 1), new ScheduledTask(190200, 190402, 0), new ScheduledTask(135460, 135622, 1), new ScheduledTask(210400, 210805, 0), new ScheduledTask(190500, 190905, 1), new ScheduledTask(190400, 190562, 2), new ScheduledTask(214700, 215064, 2), new ScheduledTask(250900, 251264, 0), new ScheduledTask(239100, 239464, 1), new ScheduledTask(287300, 287381, 0), new ScheduledTask(295400, 295805, 0), new ScheduledTask(296100, 296343, 1), new ScheduledTask(335900, 336102, 0)};
        int[] expectedProcessorEndTimes = new int[]{336102, 296343, 215064};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot90_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.90_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 3726;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 364, 0), new ScheduledTask(364, 526, 0), new ScheduledTask(526, 890, 0), new ScheduledTask(529, 893, 1), new ScheduledTask(893, 1176, 1), new ScheduledTask(890, 1173, 0), new ScheduledTask(1176, 1581, 1), new ScheduledTask(1581, 1905, 1), new ScheduledTask(1184, 1508, 0), new ScheduledTask(1915, 2117, 0), new ScheduledTask(1508, 1670, 0), new ScheduledTask(2117, 2522, 0), new ScheduledTask(1905, 2310, 1), new ScheduledTask(2522, 2684, 0), new ScheduledTask(2310, 2674, 1), new ScheduledTask(2674, 3038, 1), new ScheduledTask(2684, 3048, 0), new ScheduledTask(3038, 3119, 1), new ScheduledTask(3119, 3524, 1), new ScheduledTask(3126, 3369, 0), new ScheduledTask(3524, 3726, 1)};
        int[] expectedProcessorEndTimes = new int[]{3369, 3726};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot90_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.90_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 3561;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 364, 0), new ScheduledTask(364, 526, 0), new ScheduledTask(526, 890, 0), new ScheduledTask(529, 893, 1), new ScheduledTask(532, 815, 2), new ScheduledTask(890, 1173, 0), new ScheduledTask(1173, 1578, 0), new ScheduledTask(1578, 1902, 0), new ScheduledTask(896, 1220, 1), new ScheduledTask(1902, 2104, 0), new ScheduledTask(1220, 1382, 1), new ScheduledTask(2104, 2509, 0), new ScheduledTask(1905, 2310, 1), new ScheduledTask(1904, 2066, 2), new ScheduledTask(2114, 2478, 2), new ScheduledTask(2509, 2873, 0), new ScheduledTask(2310, 2674, 1), new ScheduledTask(2873, 2954, 0), new ScheduledTask(2954, 3359, 0), new ScheduledTask(2961, 3204, 1), new ScheduledTask(3359, 3561, 0)};
        int[] expectedProcessorEndTimes = new int[]{3561, 3204, 2478};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot90_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.90_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 3561;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 364, 0), new ScheduledTask(364, 526, 0), new ScheduledTask(526, 890, 0), new ScheduledTask(529, 893, 1), new ScheduledTask(532, 815, 2), new ScheduledTask(890, 1173, 0), new ScheduledTask(1173, 1578, 0), new ScheduledTask(1578, 1902, 0), new ScheduledTask(896, 1220, 1), new ScheduledTask(1902, 2104, 0), new ScheduledTask(1220, 1382, 1), new ScheduledTask(2104, 2509, 0), new ScheduledTask(1905, 2310, 1), new ScheduledTask(1904, 2066, 2), new ScheduledTask(2114, 2478, 2), new ScheduledTask(2509, 2873, 0), new ScheduledTask(2310, 2674, 1), new ScheduledTask(2873, 2954, 0), new ScheduledTask(2954, 3359, 0), new ScheduledTask(2961, 3204, 1), new ScheduledTask(3359, 3561, 0)};
        int[] expectedProcessorEndTimes = new int[]{3561, 3204, 2478};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot95_CCR_1dot00_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.95_CCR_1.00_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 369;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 45, 0), new ScheduledTask(0, 36, 1), new ScheduledTask(45, 72, 0), new ScheduledTask(72, 113, 0), new ScheduledTask(75, 89, 1), new ScheduledTask(89, 112, 1), new ScheduledTask(80, 116, 2), new ScheduledTask(115, 147, 0), new ScheduledTask(119, 133, 2), new ScheduledTask(147, 179, 0), new ScheduledTask(133, 165, 2), new ScheduledTask(179, 224, 0), new ScheduledTask(165, 183, 2), new ScheduledTask(184, 211, 2), new ScheduledTask(224, 260, 0), new ScheduledTask(211, 243, 2), new ScheduledTask(232, 277, 1), new ScheduledTask(260, 283, 0), new ScheduledTask(283, 301, 0), new ScheduledTask(301, 328, 0), new ScheduledTask(328, 369, 0)};
        int[] expectedProcessorEndTimes = new int[]{369, 277, 243};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot95_CCR_1dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.95_CCR_1.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 388;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 45, 0), new ScheduledTask(0, 36, 1), new ScheduledTask(45, 72, 0), new ScheduledTask(89, 130, 1), new ScheduledTask(75, 89, 1), new ScheduledTask(108, 131, 0), new ScheduledTask(72, 108, 0), new ScheduledTask(134, 166, 1), new ScheduledTask(136, 150, 0), new ScheduledTask(166, 198, 1), new ScheduledTask(150, 182, 0), new ScheduledTask(198, 243, 1), new ScheduledTask(182, 200, 0), new ScheduledTask(203, 230, 0), new ScheduledTask(243, 279, 1), new ScheduledTask(230, 262, 0), new ScheduledTask(262, 307, 0), new ScheduledTask(279, 302, 1), new ScheduledTask(302, 320, 1), new ScheduledTask(320, 347, 1), new ScheduledTask(347, 388, 1)};
        int[] expectedProcessorEndTimes = new int[]{307, 388};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot95_CCR_1dot00_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.95_CCR_1.00_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 369;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 45, 0), new ScheduledTask(0, 36, 1), new ScheduledTask(45, 72, 0), new ScheduledTask(72, 113, 0), new ScheduledTask(75, 89, 1), new ScheduledTask(89, 112, 1), new ScheduledTask(80, 116, 2), new ScheduledTask(115, 147, 0), new ScheduledTask(119, 133, 2), new ScheduledTask(147, 179, 0), new ScheduledTask(133, 165, 2), new ScheduledTask(179, 224, 0), new ScheduledTask(165, 183, 2), new ScheduledTask(184, 211, 2), new ScheduledTask(224, 260, 0), new ScheduledTask(211, 243, 2), new ScheduledTask(232, 277, 1), new ScheduledTask(260, 283, 0), new ScheduledTask(283, 301, 0), new ScheduledTask(301, 328, 0), new ScheduledTask(328, 369, 0)};
        int[] expectedProcessorEndTimes = new int[]{369, 277, 243};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_4dot95_CCR_1dot00_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_4.95_CCR_1.00_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 369;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 45, 0), new ScheduledTask(0, 36, 1), new ScheduledTask(45, 72, 0), new ScheduledTask(72, 113, 0), new ScheduledTask(75, 89, 1), new ScheduledTask(89, 112, 1), new ScheduledTask(80, 116, 2), new ScheduledTask(115, 147, 0), new ScheduledTask(119, 133, 2), new ScheduledTask(147, 179, 0), new ScheduledTask(133, 165, 2), new ScheduledTask(179, 224, 0), new ScheduledTask(165, 183, 2), new ScheduledTask(184, 211, 2), new ScheduledTask(224, 260, 0), new ScheduledTask(211, 243, 2), new ScheduledTask(232, 277, 1), new ScheduledTask(260, 283, 0), new ScheduledTask(283, 301, 0), new ScheduledTask(301, 328, 0), new ScheduledTask(328, 369, 0)};
        int[] expectedProcessorEndTimes = new int[]{369, 277, 243};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot05_CCR_10dot07_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.05_CCR_10.07_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 12000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(300, 310, 0), new ScheduledTask(1300, 1305, 0), new ScheduledTask(1800, 1804, 0), new ScheduledTask(2200, 2205, 0), new ScheduledTask(2700, 2706, 0), new ScheduledTask(3300, 3307, 0), new ScheduledTask(4000, 4004, 0), new ScheduledTask(4400, 4410, 0), new ScheduledTask(5400, 5409, 0), new ScheduledTask(6300, 6307, 0), new ScheduledTask(7000, 7004, 0), new ScheduledTask(7400, 7408, 0), new ScheduledTask(6000, 6002, 1), new ScheduledTask(8200, 8209, 0), new ScheduledTask(9100, 9106, 0), new ScheduledTask(9700, 9705, 0), new ScheduledTask(10200, 10207, 0), new ScheduledTask(10900, 10905, 0), new ScheduledTask(11400, 11404, 0), new ScheduledTask(11800, 11802, 0)};
        int[] expectedProcessorEndTimes = new int[]{11802, 6002};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot05_CCR_10dot07_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.05_CCR_10.07_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 11300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(300, 310, 0), new ScheduledTask(1300, 1305, 0), new ScheduledTask(3000, 3004, 0), new ScheduledTask(1800, 1805, 0), new ScheduledTask(3400, 3406, 0), new ScheduledTask(2300, 2307, 0), new ScheduledTask(2700, 2704, 1), new ScheduledTask(4800, 4810, 0), new ScheduledTask(4900, 4909, 1), new ScheduledTask(5800, 5807, 0), new ScheduledTask(6700, 6704, 1), new ScheduledTask(7100, 7108, 0), new ScheduledTask(6400, 6402, 2), new ScheduledTask(8500, 8509, 0), new ScheduledTask(7900, 7906, 0), new ScheduledTask(9400, 9405, 0), new ScheduledTask(10400, 10407, 0), new ScheduledTask(9900, 9905, 0), new ScheduledTask(10400, 10404, 3), new ScheduledTask(11100, 11102, 0)};
        int[] expectedProcessorEndTimes = new int[]{11102, 6704, 6402, 10404};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot05_CCR_10dot07_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.05_CCR_10.07_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 10580;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(300, 310, 0), new ScheduledTask(1300, 1305, 0), new ScheduledTask(3000, 3004, 0), new ScheduledTask(1800, 1805, 0), new ScheduledTask(3400, 3406, 0), new ScheduledTask(2300, 2307, 0), new ScheduledTask(2700, 2704, 1), new ScheduledTask(4480, 4490, 0), new ScheduledTask(4900, 4909, 1), new ScheduledTask(5480, 5487, 0), new ScheduledTask(6580, 6584, 2), new ScheduledTask(6380, 6388, 0), new ScheduledTask(6080, 6082, 2), new ScheduledTask(7780, 7789, 0), new ScheduledTask(7180, 7186, 0), new ScheduledTask(9180, 9185, 0), new ScheduledTask(9680, 9687, 0), new ScheduledTask(8680, 8685, 0), new ScheduledTask(10080, 10084, 1), new ScheduledTask(10380, 10382, 0)};
        int[] expectedProcessorEndTimes = new int[]{10382, 10084, 6584};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot05_CCR_10dot07_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.05_CCR_10.07_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 104;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 13, 0), new ScheduledTask(13, 18, 0), new ScheduledTask(30, 34, 0), new ScheduledTask(18, 23, 0), new ScheduledTask(34, 40, 0), new ScheduledTask(23, 30, 0), new ScheduledTask(27, 31, 1), new ScheduledTask(44, 54, 0), new ScheduledTask(49, 58, 1), new ScheduledTask(54, 61, 0), new ScheduledTask(62, 66, 1), new ScheduledTask(62, 70, 0), new ScheduledTask(60, 62, 1), new ScheduledTask(66, 75, 1), new ScheduledTask(70, 76, 0), new ScheduledTask(87, 92, 1), new ScheduledTask(95, 102, 1), new ScheduledTask(92, 97, 0), new ScheduledTask(97, 101, 0), new ScheduledTask(102, 104, 1)};
        int[] expectedProcessorEndTimes = new int[]{101, 104};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot05_CCR_10dot07_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.05_CCR_10.07_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 103;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 13, 0), new ScheduledTask(13, 18, 0), new ScheduledTask(30, 34, 0), new ScheduledTask(18, 23, 0), new ScheduledTask(34, 40, 0), new ScheduledTask(23, 30, 0), new ScheduledTask(27, 31, 1), new ScheduledTask(44, 54, 0), new ScheduledTask(49, 58, 2), new ScheduledTask(54, 61, 0), new ScheduledTask(58, 62, 2), new ScheduledTask(62, 70, 0), new ScheduledTask(62, 64, 2), new ScheduledTask(65, 74, 2), new ScheduledTask(72, 78, 0), new ScheduledTask(89, 94, 0), new ScheduledTask(94, 101, 0), new ScheduledTask(95, 100, 3), new ScheduledTask(98, 102, 2), new ScheduledTask(101, 103, 0)};
        int[] expectedProcessorEndTimes = new int[]{103, 31, 102, 100};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot05_CCR_10dot07_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.05_CCR_10.07_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 103;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 13, 0), new ScheduledTask(13, 18, 0), new ScheduledTask(30, 34, 0), new ScheduledTask(18, 23, 0), new ScheduledTask(34, 40, 0), new ScheduledTask(23, 30, 0), new ScheduledTask(27, 31, 1), new ScheduledTask(44, 54, 0), new ScheduledTask(49, 58, 2), new ScheduledTask(54, 61, 0), new ScheduledTask(58, 62, 2), new ScheduledTask(62, 70, 0), new ScheduledTask(62, 64, 2), new ScheduledTask(65, 74, 2), new ScheduledTask(72, 78, 0), new ScheduledTask(89, 94, 0), new ScheduledTask(94, 101, 0), new ScheduledTask(95, 100, 3), new ScheduledTask(98, 102, 4), new ScheduledTask(101, 103, 0)};
        int[] expectedProcessorEndTimes = new int[]{103, 31, 74, 100, 102};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot14_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.14_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 3837;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 548, 0), new ScheduledTask(548, 877, 0), new ScheduledTask(0, 274, 1), new ScheduledTask(0, 110, 2), new ScheduledTask(877, 1261, 0), new ScheduledTask(557, 721, 1), new ScheduledTask(886, 1379, 1), new ScheduledTask(1261, 1754, 0), new ScheduledTask(1267, 1486, 2), new ScheduledTask(553, 717, 3), new ScheduledTask(1486, 1650, 2), new ScheduledTask(1379, 1708, 1), new ScheduledTask(1754, 1918, 0), new ScheduledTask(1918, 2466, 0), new ScheduledTask(2466, 2850, 0), new ScheduledTask(1927, 2091, 1), new ScheduledTask(2850, 3179, 0), new ScheduledTask(3179, 3727, 0), new ScheduledTask(3187, 3680, 1), new ScheduledTask(2471, 2909, 2), new ScheduledTask(3727, 3837, 0)};
        int[] expectedProcessorEndTimes = new int[]{3837, 3680, 2909, 717};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot14_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.14_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 3946;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 548, 0), new ScheduledTask(548, 877, 0), new ScheduledTask(110, 384, 1), new ScheduledTask(0, 110, 1), new ScheduledTask(886, 1270, 1), new ScheduledTask(557, 721, 1), new ScheduledTask(877, 1370, 0), new ScheduledTask(1370, 1863, 0), new ScheduledTask(1270, 1489, 1), new ScheduledTask(721, 885, 1), new ScheduledTask(1489, 1653, 1), new ScheduledTask(1653, 1982, 1), new ScheduledTask(1863, 2027, 0), new ScheduledTask(2027, 2575, 0), new ScheduledTask(2575, 2959, 0), new ScheduledTask(2036, 2200, 1), new ScheduledTask(2959, 3288, 0), new ScheduledTask(3288, 3836, 0), new ScheduledTask(3296, 3789, 1), new ScheduledTask(2580, 3018, 1), new ScheduledTask(3836, 3946, 0)};
        int[] expectedProcessorEndTimes = new int[]{3946, 3789};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot14_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.14_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 3837;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 548, 0), new ScheduledTask(548, 877, 0), new ScheduledTask(0, 274, 1), new ScheduledTask(0, 110, 2), new ScheduledTask(877, 1261, 0), new ScheduledTask(557, 721, 1), new ScheduledTask(886, 1379, 1), new ScheduledTask(1261, 1754, 0), new ScheduledTask(1267, 1486, 2), new ScheduledTask(553, 717, 3), new ScheduledTask(1486, 1650, 2), new ScheduledTask(1379, 1708, 1), new ScheduledTask(1754, 1918, 0), new ScheduledTask(1918, 2466, 0), new ScheduledTask(2466, 2850, 0), new ScheduledTask(1927, 2091, 1), new ScheduledTask(2850, 3179, 0), new ScheduledTask(3179, 3727, 0), new ScheduledTask(3187, 3680, 1), new ScheduledTask(2471, 2909, 2), new ScheduledTask(3727, 3837, 0)};
        int[] expectedProcessorEndTimes = new int[]{3837, 3680, 2909, 717};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot14_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.14_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 3837;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 548, 0), new ScheduledTask(548, 877, 0), new ScheduledTask(0, 274, 1), new ScheduledTask(0, 110, 2), new ScheduledTask(877, 1261, 0), new ScheduledTask(557, 721, 1), new ScheduledTask(886, 1379, 1), new ScheduledTask(1261, 1754, 0), new ScheduledTask(1267, 1486, 2), new ScheduledTask(553, 717, 3), new ScheduledTask(1486, 1650, 2), new ScheduledTask(1379, 1708, 1), new ScheduledTask(1754, 1918, 0), new ScheduledTask(1918, 2466, 0), new ScheduledTask(2466, 2850, 0), new ScheduledTask(1927, 2091, 1), new ScheduledTask(2850, 3179, 0), new ScheduledTask(3179, 3727, 0), new ScheduledTask(3187, 3680, 1), new ScheduledTask(2471, 2909, 2), new ScheduledTask(3727, 3837, 0)};
        int[] expectedProcessorEndTimes = new int[]{3837, 3680, 2909, 717};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot14_CCR_1dot00_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.14_CCR_1.00_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 65900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 16, 0), new ScheduledTask(1600, 1638, 0), new ScheduledTask(5400, 5454, 0), new ScheduledTask(14000, 14054, 0), new ScheduledTask(10800, 10832, 0), new ScheduledTask(19400, 19432, 0), new ScheduledTask(22600, 22638, 0), new ScheduledTask(26400, 26443, 0), new ScheduledTask(30700, 30727, 0), new ScheduledTask(20100, 20111, 1), new ScheduledTask(33400, 33427, 0), new ScheduledTask(36100, 36111, 0), new ScheduledTask(39900, 39922, 0), new ScheduledTask(42100, 42138, 0), new ScheduledTask(37200, 37227, 0), new ScheduledTask(36300, 36316, 2), new ScheduledTask(51200, 51249, 0), new ScheduledTask(46600, 46611, 3), new ScheduledTask(46300, 46349, 0), new ScheduledTask(56100, 56149, 0), new ScheduledTask(61000, 61049, 0)};
        int[] expectedProcessorEndTimes = new int[]{61049, 20111, 36316, 46611};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot14_CCR_1dot00_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.14_CCR_1.00_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 55600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 16, 0), new ScheduledTask(1600, 1638, 0), new ScheduledTask(5400, 5454, 0), new ScheduledTask(10800, 10854, 0), new ScheduledTask(11100, 11132, 1), new ScheduledTask(18200, 18232, 0), new ScheduledTask(21400, 21438, 0), new ScheduledTask(25200, 25243, 0), new ScheduledTask(29500, 29527, 0), new ScheduledTask(17500, 17511, 1), new ScheduledTask(32200, 32227, 0), new ScheduledTask(30300, 30311, 1), new ScheduledTask(34900, 34922, 0), new ScheduledTask(37100, 37138, 0), new ScheduledTask(32900, 32927, 1), new ScheduledTask(35100, 35116, 2), new ScheduledTask(40900, 40949, 0), new ScheduledTask(41500, 41511, 1), new ScheduledTask(38300, 38349, 2), new ScheduledTask(45800, 45849, 0), new ScheduledTask(50700, 50749, 0)};
        int[] expectedProcessorEndTimes = new int[]{50749, 41511, 38349};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot14_CCR_1dot00_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.14_CCR_1.00_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 53600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 16, 0), new ScheduledTask(1600, 1638, 0), new ScheduledTask(5400, 5454, 0), new ScheduledTask(10800, 10854, 0), new ScheduledTask(11100, 11132, 1), new ScheduledTask(16200, 16232, 0), new ScheduledTask(19400, 19438, 0), new ScheduledTask(23200, 23243, 0), new ScheduledTask(27500, 27527, 0), new ScheduledTask(16900, 16911, 1), new ScheduledTask(30200, 30227, 0), new ScheduledTask(28300, 28311, 1), new ScheduledTask(32900, 32922, 0), new ScheduledTask(35100, 35138, 0), new ScheduledTask(30900, 30927, 1), new ScheduledTask(33100, 33116, 2), new ScheduledTask(38900, 38949, 0), new ScheduledTask(39500, 39511, 1), new ScheduledTask(35500, 35549, 2), new ScheduledTask(43800, 43849, 0), new ScheduledTask(48700, 48749, 0)};
        int[] expectedProcessorEndTimes = new int[]{48749, 39511, 35549};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot14_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.14_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 536;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 16, 0), new ScheduledTask(16, 54, 0), new ScheduledTask(54, 108, 0), new ScheduledTask(108, 162, 0), new ScheduledTask(111, 143, 1), new ScheduledTask(162, 194, 0), new ScheduledTask(194, 232, 0), new ScheduledTask(232, 275, 0), new ScheduledTask(275, 302, 0), new ScheduledTask(169, 180, 1), new ScheduledTask(302, 329, 0), new ScheduledTask(283, 294, 1), new ScheduledTask(329, 351, 0), new ScheduledTask(351, 389, 0), new ScheduledTask(309, 336, 1), new ScheduledTask(336, 352, 1), new ScheduledTask(389, 438, 0), new ScheduledTask(395, 406, 1), new ScheduledTask(406, 455, 1), new ScheduledTask(438, 487, 0), new ScheduledTask(487, 536, 0)};
        int[] expectedProcessorEndTimes = new int[]{536, 455};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot14_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.14_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 536;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 16, 0), new ScheduledTask(16, 54, 0), new ScheduledTask(54, 108, 0), new ScheduledTask(108, 162, 0), new ScheduledTask(111, 143, 1), new ScheduledTask(162, 194, 0), new ScheduledTask(194, 232, 0), new ScheduledTask(232, 275, 0), new ScheduledTask(275, 302, 0), new ScheduledTask(169, 180, 1), new ScheduledTask(302, 329, 0), new ScheduledTask(283, 294, 1), new ScheduledTask(329, 351, 0), new ScheduledTask(351, 389, 0), new ScheduledTask(309, 336, 1), new ScheduledTask(331, 347, 2), new ScheduledTask(389, 438, 0), new ScheduledTask(395, 406, 1), new ScheduledTask(347, 396, 2), new ScheduledTask(438, 487, 0), new ScheduledTask(487, 536, 0)};
        int[] expectedProcessorEndTimes = new int[]{536, 406, 396};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot14_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.14_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 536;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 16, 0), new ScheduledTask(16, 54, 0), new ScheduledTask(54, 108, 0), new ScheduledTask(108, 162, 0), new ScheduledTask(111, 143, 1), new ScheduledTask(162, 194, 0), new ScheduledTask(194, 232, 0), new ScheduledTask(232, 275, 0), new ScheduledTask(275, 302, 0), new ScheduledTask(169, 180, 1), new ScheduledTask(302, 329, 0), new ScheduledTask(283, 294, 1), new ScheduledTask(329, 351, 0), new ScheduledTask(351, 389, 0), new ScheduledTask(309, 336, 1), new ScheduledTask(331, 347, 2), new ScheduledTask(389, 438, 0), new ScheduledTask(395, 406, 1), new ScheduledTask(347, 396, 2), new ScheduledTask(438, 487, 0), new ScheduledTask(487, 536, 0)};
        int[] expectedProcessorEndTimes = new int[]{536, 406, 396};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot19_CCR_0dot10_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.19_CCR_0.10_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 597300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(24000, 24144, 0), new ScheduledTask(38400, 38833, 0), new ScheduledTask(0, 240, 0), new ScheduledTask(81700, 81796, 0), new ScheduledTask(91300, 91636, 0), new ScheduledTask(124900, 125236, 0), new ScheduledTask(158500, 158884, 0), new ScheduledTask(196900, 197333, 0), new ScheduledTask(240200, 240536, 0), new ScheduledTask(312200, 312633, 0), new ScheduledTask(273800, 274184, 0), new ScheduledTask(355500, 355788, 0), new ScheduledTask(384300, 384781, 0), new ScheduledTask(38600, 38792, 1), new ScheduledTask(241200, 241536, 1), new ScheduledTask(432400, 432881, 0), new ScheduledTask(480500, 480884, 0), new ScheduledTask(442800, 442992, 1), new ScheduledTask(518900, 519284, 0), new ScheduledTask(558900, 559188, 0), new ScheduledTask(587700, 587796, 0)};
        int[] expectedProcessorEndTimes = new int[]{587796, 442992};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot19_CCR_0dot10_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.19_CCR_0.10_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 521800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 144, 0), new ScheduledTask(14400, 14833, 0), new ScheduledTask(0, 240, 1), new ScheduledTask(57700, 57796, 0), new ScheduledTask(67300, 67636, 0), new ScheduledTask(100900, 101236, 0), new ScheduledTask(134500, 134884, 0), new ScheduledTask(172900, 173333, 0), new ScheduledTask(216200, 216536, 0), new ScheduledTask(249800, 250233, 0), new ScheduledTask(250700, 251084, 1), new ScheduledTask(328300, 328588, 0), new ScheduledTask(357100, 357581, 0), new ScheduledTask(48400, 48592, 2), new ScheduledTask(217200, 217536, 2), new ScheduledTask(405200, 405681, 0), new ScheduledTask(405700, 406084, 1), new ScheduledTask(357400, 357592, 2), new ScheduledTask(483400, 483784, 0), new ScheduledTask(395800, 396088, 2), new ScheduledTask(482500, 482596, 1)};
        int[] expectedProcessorEndTimes = new int[]{483784, 482596, 396088};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot19_CCR_0dot10_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.19_CCR_0.10_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 460980;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 144, 0), new ScheduledTask(14400, 14833, 0), new ScheduledTask(0, 240, 1), new ScheduledTask(57700, 57796, 0), new ScheduledTask(67300, 67636, 0), new ScheduledTask(100900, 101236, 0), new ScheduledTask(134500, 134884, 0), new ScheduledTask(172900, 173333, 0), new ScheduledTask(216200, 216536, 0), new ScheduledTask(249800, 250233, 0), new ScheduledTask(250700, 251084, 1), new ScheduledTask(297580, 297868, 0), new ScheduledTask(326380, 326861, 0), new ScheduledTask(29200, 29392, 2), new ScheduledTask(217200, 217536, 2), new ScheduledTask(374480, 374961, 0), new ScheduledTask(374980, 375364, 1), new ScheduledTask(326680, 326872, 2), new ScheduledTask(422580, 422964, 0), new ScheduledTask(355480, 355768, 2), new ScheduledTask(421060, 421156, 1)};
        int[] expectedProcessorEndTimes = new int[]{422964, 421156, 355768};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot19_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.19_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4565;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 144, 0), new ScheduledTask(144, 577, 0), new ScheduledTask(0, 240, 1), new ScheduledTask(577, 673, 0), new ScheduledTask(673, 1009, 0), new ScheduledTask(1009, 1345, 0), new ScheduledTask(1345, 1729, 0), new ScheduledTask(1729, 2162, 0), new ScheduledTask(2162, 2498, 0), new ScheduledTask(2498, 2931, 0), new ScheduledTask(2508, 2892, 1), new ScheduledTask(2931, 3219, 0), new ScheduledTask(3219, 3700, 0), new ScheduledTask(240, 432, 1), new ScheduledTask(2172, 2508, 1), new ScheduledTask(3700, 4181, 0), new ScheduledTask(3705, 4089, 1), new ScheduledTask(3222, 3414, 1), new ScheduledTask(4181, 4565, 0), new ScheduledTask(3414, 3702, 1), new ScheduledTask(4089, 4185, 1)};
        int[] expectedProcessorEndTimes = new int[]{4565, 4185};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot19_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.19_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 4565;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 144, 0), new ScheduledTask(144, 577, 0), new ScheduledTask(0, 240, 1), new ScheduledTask(577, 673, 0), new ScheduledTask(673, 1009, 0), new ScheduledTask(1009, 1345, 0), new ScheduledTask(1345, 1729, 0), new ScheduledTask(1729, 2162, 0), new ScheduledTask(2162, 2498, 0), new ScheduledTask(2498, 2931, 0), new ScheduledTask(2507, 2891, 1), new ScheduledTask(2931, 3219, 0), new ScheduledTask(3219, 3700, 0), new ScheduledTask(244, 436, 2), new ScheduledTask(2172, 2508, 2), new ScheduledTask(3700, 4181, 0), new ScheduledTask(3705, 4089, 1), new ScheduledTask(3222, 3414, 2), new ScheduledTask(4181, 4565, 0), new ScheduledTask(3414, 3702, 2), new ScheduledTask(4089, 4185, 1)};
        int[] expectedProcessorEndTimes = new int[]{4565, 4185, 3702};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot19_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.19_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 4565;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 144, 0), new ScheduledTask(144, 577, 0), new ScheduledTask(0, 240, 1), new ScheduledTask(577, 673, 0), new ScheduledTask(673, 1009, 0), new ScheduledTask(1009, 1345, 0), new ScheduledTask(1345, 1729, 0), new ScheduledTask(1729, 2162, 0), new ScheduledTask(2162, 2498, 0), new ScheduledTask(2498, 2931, 0), new ScheduledTask(2507, 2891, 1), new ScheduledTask(2931, 3219, 0), new ScheduledTask(3219, 3700, 0), new ScheduledTask(244, 436, 2), new ScheduledTask(2172, 2508, 2), new ScheduledTask(3700, 4181, 0), new ScheduledTask(3705, 4089, 1), new ScheduledTask(3222, 3414, 2), new ScheduledTask(4181, 4565, 0), new ScheduledTask(3414, 3702, 2), new ScheduledTask(4089, 4185, 1)};
        int[] expectedProcessorEndTimes = new int[]{4565, 4185, 3702};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot19_CCR_10dot05_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.19_CCR_10.05_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 12000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(400, 403, 0), new ScheduledTask(700, 709, 0), new ScheduledTask(1600, 1609, 0), new ScheduledTask(2500, 2510, 0), new ScheduledTask(3500, 3506, 0), new ScheduledTask(4100, 4102, 0), new ScheduledTask(4300, 4308, 0), new ScheduledTask(5100, 5106, 0), new ScheduledTask(5700, 5706, 0), new ScheduledTask(6300, 6302, 0), new ScheduledTask(6500, 6502, 0), new ScheduledTask(6700, 6709, 0), new ScheduledTask(7600, 7606, 0), new ScheduledTask(8200, 8208, 0), new ScheduledTask(9000, 9010, 0), new ScheduledTask(10000, 10006, 0), new ScheduledTask(10600, 10602, 0), new ScheduledTask(9000, 9003, 1), new ScheduledTask(10800, 10806, 0), new ScheduledTask(11400, 11406, 0)};
        int[] expectedProcessorEndTimes = new int[]{11406, 9003};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot19_CCR_10dot05_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.19_CCR_10.05_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 11800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(400, 409, 0), new ScheduledTask(2000, 2009, 0), new ScheduledTask(2900, 2910, 0), new ScheduledTask(600, 606, 1), new ScheduledTask(3900, 3902, 0), new ScheduledTask(4100, 4108, 0), new ScheduledTask(4900, 4906, 0), new ScheduledTask(5500, 5506, 0), new ScheduledTask(6100, 6102, 0), new ScheduledTask(6300, 6302, 0), new ScheduledTask(6500, 6509, 0), new ScheduledTask(7400, 7406, 0), new ScheduledTask(8000, 8008, 0), new ScheduledTask(8800, 8810, 0), new ScheduledTask(9800, 9806, 0), new ScheduledTask(10400, 10402, 0), new ScheduledTask(8800, 8803, 1), new ScheduledTask(10600, 10606, 0), new ScheduledTask(11200, 11206, 0)};
        int[] expectedProcessorEndTimes = new int[]{11206, 8803};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot19_CCR_10dot05_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.19_CCR_10.05_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 11400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(300, 304, 0), new ScheduledTask(0, 3, 0), new ScheduledTask(700, 709, 0), new ScheduledTask(1600, 1609, 0), new ScheduledTask(2500, 2510, 0), new ScheduledTask(1500, 1506, 1), new ScheduledTask(3500, 3502, 0), new ScheduledTask(3700, 3708, 0), new ScheduledTask(4500, 4506, 0), new ScheduledTask(5100, 5106, 0), new ScheduledTask(5700, 5702, 0), new ScheduledTask(5900, 5902, 0), new ScheduledTask(6100, 6109, 0), new ScheduledTask(7000, 7006, 0), new ScheduledTask(7600, 7608, 0), new ScheduledTask(8400, 8410, 0), new ScheduledTask(9400, 9406, 0), new ScheduledTask(10600, 10602, 0), new ScheduledTask(8400, 8403, 3), new ScheduledTask(10000, 10006, 0), new ScheduledTask(10800, 10806, 0)};
        int[] expectedProcessorEndTimes = new int[]{10806, 1506, 0, 8403};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot19_CCR_10dot05_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.19_CCR_10.05_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 114;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(3, 7, 0), new ScheduledTask(0, 3, 0), new ScheduledTask(7, 16, 0), new ScheduledTask(16, 25, 0), new ScheduledTask(25, 35, 0), new ScheduledTask(15, 21, 1), new ScheduledTask(35, 37, 0), new ScheduledTask(37, 45, 0), new ScheduledTask(45, 51, 0), new ScheduledTask(51, 57, 0), new ScheduledTask(57, 59, 0), new ScheduledTask(59, 61, 0), new ScheduledTask(61, 70, 0), new ScheduledTask(70, 76, 0), new ScheduledTask(76, 84, 0), new ScheduledTask(84, 94, 0), new ScheduledTask(94, 100, 0), new ScheduledTask(106, 108, 0), new ScheduledTask(84, 87, 1), new ScheduledTask(100, 106, 0), new ScheduledTask(108, 114, 0)};
        int[] expectedProcessorEndTimes = new int[]{114, 87};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot19_CCR_10dot05_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.19_CCR_10.05_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 114;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(3, 7, 0), new ScheduledTask(0, 3, 0), new ScheduledTask(7, 16, 0), new ScheduledTask(16, 25, 0), new ScheduledTask(25, 35, 0), new ScheduledTask(15, 21, 1), new ScheduledTask(35, 37, 0), new ScheduledTask(37, 45, 0), new ScheduledTask(45, 51, 0), new ScheduledTask(51, 57, 0), new ScheduledTask(57, 59, 0), new ScheduledTask(59, 61, 0), new ScheduledTask(61, 70, 0), new ScheduledTask(70, 76, 0), new ScheduledTask(76, 84, 0), new ScheduledTask(84, 94, 0), new ScheduledTask(94, 100, 0), new ScheduledTask(106, 108, 0), new ScheduledTask(84, 87, 1), new ScheduledTask(100, 106, 0), new ScheduledTask(108, 114, 0)};
        int[] expectedProcessorEndTimes = new int[]{114, 87};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot19_CCR_10dot05_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.19_CCR_10.05_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 114;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(3, 7, 0), new ScheduledTask(0, 3, 0), new ScheduledTask(7, 16, 0), new ScheduledTask(16, 25, 0), new ScheduledTask(25, 35, 0), new ScheduledTask(15, 21, 1), new ScheduledTask(35, 37, 0), new ScheduledTask(37, 45, 0), new ScheduledTask(45, 51, 0), new ScheduledTask(51, 57, 0), new ScheduledTask(57, 59, 0), new ScheduledTask(59, 61, 0), new ScheduledTask(61, 70, 0), new ScheduledTask(70, 76, 0), new ScheduledTask(76, 84, 0), new ScheduledTask(84, 94, 0), new ScheduledTask(94, 100, 0), new ScheduledTask(106, 108, 0), new ScheduledTask(84, 87, 2), new ScheduledTask(100, 106, 0), new ScheduledTask(108, 114, 0)};
        int[] expectedProcessorEndTimes = new int[]{114, 21, 87};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot19_CCR_10dot08_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.19_CCR_10.08_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 11700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(1000, 1005, 0), new ScheduledTask(1500, 1502, 0), new ScheduledTask(1700, 1704, 0), new ScheduledTask(2100, 2103, 0), new ScheduledTask(2400, 2406, 0), new ScheduledTask(3000, 3004, 0), new ScheduledTask(3400, 3410, 0), new ScheduledTask(4400, 4409, 0), new ScheduledTask(5300, 5303, 0), new ScheduledTask(5600, 5602, 0), new ScheduledTask(5800, 5809, 0), new ScheduledTask(6700, 6707, 0), new ScheduledTask(7400, 7402, 0), new ScheduledTask(7600, 7605, 0), new ScheduledTask(8100, 8108, 0), new ScheduledTask(8900, 8904, 0), new ScheduledTask(9300, 9303, 0), new ScheduledTask(9600, 9604, 0), new ScheduledTask(10000, 10009, 0), new ScheduledTask(10900, 10908, 0)};
        int[] expectedProcessorEndTimes = new int[]{10908};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot19_CCR_10dot08_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.19_CCR_10.08_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 11700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(1000, 1005, 0), new ScheduledTask(1500, 1502, 0), new ScheduledTask(1700, 1704, 0), new ScheduledTask(2100, 2103, 0), new ScheduledTask(2400, 2406, 0), new ScheduledTask(3000, 3004, 0), new ScheduledTask(3400, 3410, 0), new ScheduledTask(4400, 4409, 0), new ScheduledTask(5300, 5303, 0), new ScheduledTask(5600, 5602, 0), new ScheduledTask(5800, 5809, 0), new ScheduledTask(6700, 6707, 0), new ScheduledTask(7400, 7402, 0), new ScheduledTask(7600, 7605, 0), new ScheduledTask(8100, 8108, 0), new ScheduledTask(8900, 8904, 0), new ScheduledTask(9300, 9303, 0), new ScheduledTask(9600, 9604, 0), new ScheduledTask(10000, 10009, 0), new ScheduledTask(10900, 10908, 0)};
        int[] expectedProcessorEndTimes = new int[]{10908};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot19_CCR_10dot08_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.19_CCR_10.08_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 11660;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(1000, 1005, 0), new ScheduledTask(1500, 1502, 0), new ScheduledTask(2400, 2404, 0), new ScheduledTask(1700, 1703, 0), new ScheduledTask(2800, 2806, 0), new ScheduledTask(2000, 2004, 0), new ScheduledTask(3400, 3410, 0), new ScheduledTask(4400, 4409, 0), new ScheduledTask(5500, 5503, 0), new ScheduledTask(5800, 5802, 0), new ScheduledTask(6000, 6009, 0), new ScheduledTask(6900, 6907, 0), new ScheduledTask(5300, 5302, 0), new ScheduledTask(7600, 7605, 0), new ScheduledTask(8100, 8108, 0), new ScheduledTask(8900, 8904, 0), new ScheduledTask(9300, 9303, 0), new ScheduledTask(9600, 9604, 0), new ScheduledTask(10000, 10009, 0), new ScheduledTask(10700, 10708, 1)};
        int[] expectedProcessorEndTimes = new int[]{10009, 10708};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot19_CCR_10dot08_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.19_CCR_10.08_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 115;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 15, 0), new ScheduledTask(15, 17, 0), new ScheduledTask(24, 28, 0), new ScheduledTask(17, 20, 0), new ScheduledTask(28, 34, 0), new ScheduledTask(20, 24, 0), new ScheduledTask(34, 44, 0), new ScheduledTask(44, 53, 0), new ScheduledTask(55, 58, 0), new ScheduledTask(58, 60, 0), new ScheduledTask(60, 69, 0), new ScheduledTask(69, 76, 0), new ScheduledTask(53, 55, 0), new ScheduledTask(76, 81, 0), new ScheduledTask(81, 89, 0), new ScheduledTask(89, 93, 0), new ScheduledTask(93, 96, 0), new ScheduledTask(96, 100, 0), new ScheduledTask(100, 109, 0), new ScheduledTask(107, 115, 1)};
        int[] expectedProcessorEndTimes = new int[]{109, 115};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot19_CCR_10dot08_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.19_CCR_10.08_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 115;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 15, 0), new ScheduledTask(15, 17, 0), new ScheduledTask(17, 21, 0), new ScheduledTask(27, 30, 0), new ScheduledTask(21, 27, 0), new ScheduledTask(30, 34, 0), new ScheduledTask(34, 44, 0), new ScheduledTask(44, 53, 0), new ScheduledTask(55, 58, 0), new ScheduledTask(58, 60, 0), new ScheduledTask(60, 69, 0), new ScheduledTask(69, 76, 0), new ScheduledTask(53, 55, 0), new ScheduledTask(76, 81, 0), new ScheduledTask(81, 89, 0), new ScheduledTask(89, 93, 0), new ScheduledTask(93, 96, 0), new ScheduledTask(96, 100, 0), new ScheduledTask(100, 109, 0), new ScheduledTask(107, 115, 1)};
        int[] expectedProcessorEndTimes = new int[]{109, 115};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot19_CCR_10dot08_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.19_CCR_10.08_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 115;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 15, 0), new ScheduledTask(15, 17, 0), new ScheduledTask(20, 24, 0), new ScheduledTask(17, 20, 0), new ScheduledTask(24, 30, 0), new ScheduledTask(30, 34, 0), new ScheduledTask(34, 44, 0), new ScheduledTask(44, 53, 0), new ScheduledTask(55, 58, 0), new ScheduledTask(58, 60, 0), new ScheduledTask(60, 69, 0), new ScheduledTask(69, 76, 0), new ScheduledTask(53, 55, 0), new ScheduledTask(76, 81, 0), new ScheduledTask(81, 89, 0), new ScheduledTask(89, 93, 0), new ScheduledTask(93, 96, 0), new ScheduledTask(96, 100, 0), new ScheduledTask(100, 109, 0), new ScheduledTask(107, 115, 1)};
        int[] expectedProcessorEndTimes = new int[]{109, 115};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot19_CCR_10dot10_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.19_CCR_10.10_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 14500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(900, 909, 0), new ScheduledTask(1800, 1810, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(0, 9, 0), new ScheduledTask(3700, 3707, 0), new ScheduledTask(2800, 2809, 0), new ScheduledTask(4400, 4410, 0), new ScheduledTask(5700, 5709, 0), new ScheduledTask(5400, 5403, 0), new ScheduledTask(7000, 7009, 0), new ScheduledTask(7900, 7905, 0), new ScheduledTask(9400, 9407, 0), new ScheduledTask(6600, 6604, 0), new ScheduledTask(10300, 10310, 0), new ScheduledTask(8400, 8410, 0), new ScheduledTask(10100, 10102, 0), new ScheduledTask(12100, 12109, 0), new ScheduledTask(11300, 11308, 0), new ScheduledTask(13200, 13208, 0), new ScheduledTask(14000, 14005, 0), new ScheduledTask(13000, 13002, 0)};
        int[] expectedProcessorEndTimes = new int[]{14005, 2};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot19_CCR_10dot10_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.19_CCR_10.10_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 13600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(900, 910, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(400, 409, 1), new ScheduledTask(2800, 2807, 0), new ScheduledTask(1900, 1909, 0), new ScheduledTask(3500, 3510, 0), new ScheduledTask(4800, 4809, 0), new ScheduledTask(4500, 4503, 0), new ScheduledTask(6100, 6109, 0), new ScheduledTask(7000, 7005, 0), new ScheduledTask(8500, 8507, 0), new ScheduledTask(5700, 5704, 0), new ScheduledTask(9400, 9410, 0), new ScheduledTask(7500, 7510, 0), new ScheduledTask(9200, 9202, 0), new ScheduledTask(11200, 11209, 0), new ScheduledTask(10400, 10408, 0), new ScheduledTask(12300, 12308, 0), new ScheduledTask(13100, 13105, 0), new ScheduledTask(12100, 12102, 0)};
        int[] expectedProcessorEndTimes = new int[]{13105, 409};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot19_CCR_10dot10_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.19_CCR_10.10_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 13360;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(900, 910, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(0, 9, 2), new ScheduledTask(2800, 2807, 0), new ScheduledTask(1900, 1909, 0), new ScheduledTask(3500, 3510, 0), new ScheduledTask(4800, 4809, 0), new ScheduledTask(4500, 4503, 0), new ScheduledTask(6100, 6109, 0), new ScheduledTask(7000, 7005, 0), new ScheduledTask(7500, 7507, 0), new ScheduledTask(5700, 5704, 0), new ScheduledTask(8200, 8210, 0), new ScheduledTask(9400, 9410, 0), new ScheduledTask(9200, 9202, 0), new ScheduledTask(10400, 10409, 0), new ScheduledTask(9700, 9708, 1), new ScheduledTask(12060, 12068, 0), new ScheduledTask(12860, 12865, 0), new ScheduledTask(11300, 11302, 0)};
        int[] expectedProcessorEndTimes = new int[]{12865, 9708, 9};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot19_CCR_10dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.19_CCR_10.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 132;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 19, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(2, 11, 1), new ScheduledTask(28, 35, 0), new ScheduledTask(19, 28, 0), new ScheduledTask(35, 45, 0), new ScheduledTask(48, 57, 0), new ScheduledTask(45, 48, 0), new ScheduledTask(61, 70, 0), new ScheduledTask(70, 75, 0), new ScheduledTask(75, 82, 0), new ScheduledTask(57, 61, 0), new ScheduledTask(82, 92, 0), new ScheduledTask(94, 104, 0), new ScheduledTask(92, 94, 0), new ScheduledTask(104, 113, 0), new ScheduledTask(97, 105, 1), new ScheduledTask(119, 127, 0), new ScheduledTask(127, 132, 0), new ScheduledTask(113, 115, 0)};
        int[] expectedProcessorEndTimes = new int[]{132, 105};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot19_CCR_10dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.19_CCR_10.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 132;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 19, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(2, 11, 1), new ScheduledTask(28, 35, 0), new ScheduledTask(19, 28, 0), new ScheduledTask(35, 45, 0), new ScheduledTask(48, 57, 0), new ScheduledTask(45, 48, 0), new ScheduledTask(61, 70, 0), new ScheduledTask(70, 75, 0), new ScheduledTask(75, 82, 0), new ScheduledTask(57, 61, 0), new ScheduledTask(82, 92, 0), new ScheduledTask(94, 104, 0), new ScheduledTask(92, 94, 0), new ScheduledTask(104, 113, 0), new ScheduledTask(97, 105, 1), new ScheduledTask(119, 127, 0), new ScheduledTask(127, 132, 0), new ScheduledTask(113, 115, 0)};
        int[] expectedProcessorEndTimes = new int[]{132, 105};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot19_CCR_10dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.19_CCR_10.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 132;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 19, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(0, 9, 2), new ScheduledTask(28, 35, 0), new ScheduledTask(19, 28, 0), new ScheduledTask(35, 45, 0), new ScheduledTask(48, 57, 0), new ScheduledTask(45, 48, 0), new ScheduledTask(61, 70, 0), new ScheduledTask(70, 75, 0), new ScheduledTask(75, 82, 0), new ScheduledTask(57, 61, 0), new ScheduledTask(82, 92, 0), new ScheduledTask(94, 104, 0), new ScheduledTask(92, 94, 0), new ScheduledTask(104, 113, 0), new ScheduledTask(97, 105, 1), new ScheduledTask(119, 127, 0), new ScheduledTask(127, 132, 0), new ScheduledTask(113, 115, 0)};
        int[] expectedProcessorEndTimes = new int[]{132, 105, 9};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot24_CCR_0dot10_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.24_CCR_0.10_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 618300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(36900, 37375, 0), new ScheduledTask(0, 369, 0), new ScheduledTask(84400, 84505, 0), new ScheduledTask(152900, 153427, 0), new ScheduledTask(94900, 95111, 0), new ScheduledTask(116900, 117058, 1), new ScheduledTask(212400, 212875, 0), new ScheduledTask(116000, 116369, 0), new ScheduledTask(211700, 211858, 1), new ScheduledTask(259900, 260427, 0), new ScheduledTask(312600, 313022, 0), new ScheduledTask(116800, 117169, 2), new ScheduledTask(354800, 354905, 0), new ScheduledTask(365300, 365669, 0), new ScheduledTask(402200, 402411, 0), new ScheduledTask(423300, 423669, 0), new ScheduledTask(402400, 402558, 3), new ScheduledTask(549800, 550327, 0), new ScheduledTask(460200, 460727, 0), new ScheduledTask(512900, 513269, 0), new ScheduledTask(602500, 602658, 0)};
        int[] expectedProcessorEndTimes = new int[]{602658, 211858, 117169, 402558};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot24_CCR_0dot10_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.24_CCR_0.10_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 455200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 475, 0), new ScheduledTask(0, 369, 1), new ScheduledTask(74400, 74505, 0), new ScheduledTask(106000, 106527, 0), new ScheduledTask(84900, 85111, 0), new ScheduledTask(106900, 107058, 2), new ScheduledTask(158700, 159175, 0), new ScheduledTask(106900, 107269, 3), new ScheduledTask(138500, 138658, 2), new ScheduledTask(206200, 206727, 0), new ScheduledTask(180700, 181122, 3), new ScheduledTask(170100, 170469, 2), new ScheduledTask(265500, 265605, 0), new ScheduledTask(276000, 276369, 0), new ScheduledTask(265100, 265311, 3), new ScheduledTask(312900, 313269, 0), new ScheduledTask(313100, 313258, 3), new ScheduledTask(349800, 350327, 0), new ScheduledTask(402500, 403027, 0), new ScheduledTask(344700, 345069, 3), new ScheduledTask(418500, 418658, 3)};
        int[] expectedProcessorEndTimes = new int[]{403027, 369, 170469, 418658};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot24_CCR_0dot10_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.24_CCR_0.10_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 363700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 475, 0), new ScheduledTask(0, 369, 1), new ScheduledTask(47500, 47605, 0), new ScheduledTask(58000, 58527, 0), new ScheduledTask(59000, 59211, 1), new ScheduledTask(84320, 84478, 1), new ScheduledTask(110700, 111175, 0), new ScheduledTask(85220, 85589, 2), new ScheduledTask(103280, 103438, 1), new ScheduledTask(158200, 158727, 0), new ScheduledTask(140770, 141192, 1), new ScheduledTask(85120, 85489, 3), new ScheduledTask(210900, 211005, 0), new ScheduledTask(221400, 221769, 0), new ScheduledTask(211800, 212011, 1), new ScheduledTask(258300, 258669, 0), new ScheduledTask(258500, 258658, 1), new ScheduledTask(295200, 295727, 0), new ScheduledTask(296100, 296627, 1), new ScheduledTask(277960, 278329, 2), new ScheduledTask(347900, 348058, 0)};
        int[] expectedProcessorEndTimes = new int[]{348058, 296627, 278329, 85489};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot24_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.24_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 3692;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 475, 0), new ScheduledTask(0, 369, 1), new ScheduledTask(475, 580, 0), new ScheduledTask(580, 1107, 0), new ScheduledTask(590, 801, 1), new ScheduledTask(801, 959, 1), new ScheduledTask(1117, 1592, 1), new ScheduledTask(1107, 1476, 0), new ScheduledTask(959, 1117, 1), new ScheduledTask(1592, 2119, 1), new ScheduledTask(1476, 1898, 0), new ScheduledTask(1898, 2267, 0), new ScheduledTask(2119, 2224, 1), new ScheduledTask(2267, 2636, 0), new ScheduledTask(2274, 2485, 1), new ScheduledTask(2636, 3005, 0), new ScheduledTask(2638, 2796, 1), new ScheduledTask(3005, 3532, 0), new ScheduledTask(3165, 3692, 1), new ScheduledTask(2796, 3165, 1), new ScheduledTask(3532, 3690, 0)};
        int[] expectedProcessorEndTimes = new int[]{3690, 3692};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot24_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.24_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 3637;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 475, 0), new ScheduledTask(0, 369, 1), new ScheduledTask(475, 580, 0), new ScheduledTask(580, 1107, 0), new ScheduledTask(590, 801, 1), new ScheduledTask(801, 959, 1), new ScheduledTask(1107, 1582, 0), new ScheduledTask(810, 1179, 2), new ScheduledTask(959, 1117, 1), new ScheduledTask(1582, 2109, 0), new ScheduledTask(1179, 1601, 2), new ScheduledTask(809, 1178, 3), new ScheduledTask(2109, 2214, 0), new ScheduledTask(2214, 2583, 0), new ScheduledTask(2118, 2329, 1), new ScheduledTask(2583, 2952, 0), new ScheduledTask(2585, 2743, 1), new ScheduledTask(2952, 3479, 0), new ScheduledTask(2961, 3488, 1), new ScheduledTask(2748, 3117, 2), new ScheduledTask(3479, 3637, 0)};
        int[] expectedProcessorEndTimes = new int[]{3637, 3488, 3117, 1178};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot24_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.24_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 3637;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 475, 0), new ScheduledTask(0, 369, 1), new ScheduledTask(475, 580, 0), new ScheduledTask(580, 1107, 0), new ScheduledTask(590, 801, 1), new ScheduledTask(801, 959, 1), new ScheduledTask(1107, 1582, 0), new ScheduledTask(810, 1179, 2), new ScheduledTask(959, 1117, 1), new ScheduledTask(1582, 2109, 0), new ScheduledTask(1179, 1601, 2), new ScheduledTask(809, 1178, 3), new ScheduledTask(2109, 2214, 0), new ScheduledTask(2214, 2583, 0), new ScheduledTask(2118, 2329, 1), new ScheduledTask(2583, 2952, 0), new ScheduledTask(2585, 2743, 1), new ScheduledTask(2952, 3479, 0), new ScheduledTask(2961, 3488, 1), new ScheduledTask(2748, 3117, 2), new ScheduledTask(3479, 3637, 0)};
        int[] expectedProcessorEndTimes = new int[]{3637, 3488, 3117, 1178};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot24_CCR_0dot10_WeightType_Random2_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.24_CCR_0.10_WeightType_Random#2_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 611800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(43700, 43864, 0), new ScheduledTask(60100, 60646, 0), new ScheduledTask(0, 437, 0), new ScheduledTask(114700, 115028, 0), new ScheduledTask(0, 219, 1), new ScheduledTask(191200, 191692, 0), new ScheduledTask(147500, 147664, 0), new ScheduledTask(131900, 132064, 2), new ScheduledTask(163900, 164173, 0), new ScheduledTask(240400, 240837, 0), new ScheduledTask(322300, 322682, 0), new ScheduledTask(284100, 284482, 0), new ScheduledTask(284800, 284909, 3), new ScheduledTask(360500, 360882, 0), new ScheduledTask(447900, 448173, 0), new ScheduledTask(426000, 426219, 0), new ScheduledTask(486100, 486537, 0), new ScheduledTask(398700, 398973, 0), new ScheduledTask(475200, 475309, 0), new ScheduledTask(529800, 530128, 0), new ScheduledTask(562600, 563092, 0)};
        int[] expectedProcessorEndTimes = new int[]{563092, 219, 132064, 284909};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot24_CCR_0dot10_WeightType_Random2_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.24_CCR_0.10_WeightType_Random#2_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 428300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 164, 0), new ScheduledTask(16400, 16946, 0), new ScheduledTask(0, 437, 1), new ScheduledTask(71000, 71328, 0), new ScheduledTask(0, 219, 2), new ScheduledTask(43800, 44292, 2), new ScheduledTask(103800, 103964, 0), new ScheduledTask(88200, 88364, 3), new ScheduledTask(121000, 121273, 3), new ScheduledTask(122000, 122437, 0), new ScheduledTask(176000, 176382, 0), new ScheduledTask(142200, 142582, 2), new ScheduledTask(175600, 175709, 3), new ScheduledTask(218800, 219182, 0), new ScheduledTask(257000, 257273, 0), new ScheduledTask(257800, 258019, 3), new ScheduledTask(302600, 303037, 0), new ScheduledTask(257400, 257673, 2), new ScheduledTask(312400, 312509, 3), new ScheduledTask(346300, 346628, 0), new ScheduledTask(379100, 379592, 0)};
        int[] expectedProcessorEndTimes = new int[]{379592, 437, 257673, 312509};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot24_CCR_0dot10_WeightType_Random2_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.24_CCR_0.10_WeightType_Random#2_Heterogeneous-4-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 379600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 164, 0), new ScheduledTask(16400, 16946, 0), new ScheduledTask(0, 437, 1), new ScheduledTask(71000, 71328, 0), new ScheduledTask(0, 219, 2), new ScheduledTask(32850, 33342, 2), new ScheduledTask(103800, 103964, 0), new ScheduledTask(71900, 72064, 1), new ScheduledTask(120200, 120473, 0), new ScheduledTask(121100, 121537, 1), new ScheduledTask(147500, 147882, 0), new ScheduledTask(106650, 107032, 2), new ScheduledTask(173540, 173649, 1), new ScheduledTask(187620, 188002, 0), new ScheduledTask(225820, 226093, 0), new ScheduledTask(226620, 226839, 1), new ScheduledTask(253900, 254337, 0), new ScheduledTask(226220, 226493, 2), new ScheduledTask(267570, 267679, 1), new ScheduledTask(297600, 297928, 0), new ScheduledTask(330400, 330892, 0)};
        int[] expectedProcessorEndTimes = new int[]{330892, 267679, 226493};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot24_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.24_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 3988;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 164, 0), new ScheduledTask(164, 710, 0), new ScheduledTask(219, 656, 1), new ScheduledTask(710, 1038, 0), new ScheduledTask(0, 219, 1), new ScheduledTask(656, 1148, 1), new ScheduledTask(1038, 1202, 0), new ScheduledTask(1148, 1312, 1), new ScheduledTask(1202, 1475, 0), new ScheduledTask(1475, 1912, 0), new ScheduledTask(1694, 2076, 1), new ScheduledTask(1312, 1694, 1), new ScheduledTask(1912, 2021, 0), new ScheduledTask(2076, 2458, 1), new ScheduledTask(2458, 2731, 1), new ScheduledTask(2466, 2685, 0), new ScheduledTask(2731, 3168, 1), new ScheduledTask(2685, 2958, 0), new ScheduledTask(2958, 3067, 0), new ScheduledTask(3168, 3496, 1), new ScheduledTask(3496, 3988, 1)};
        int[] expectedProcessorEndTimes = new int[]{3067, 3988};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot24_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.24_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 3769;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 164, 0), new ScheduledTask(164, 710, 0), new ScheduledTask(0, 437, 1), new ScheduledTask(710, 1038, 0), new ScheduledTask(0, 219, 2), new ScheduledTask(219, 711, 2), new ScheduledTask(1038, 1202, 0), new ScheduledTask(719, 883, 1), new ScheduledTask(1202, 1475, 0), new ScheduledTask(1211, 1648, 1), new ScheduledTask(1475, 1857, 0), new ScheduledTask(1047, 1429, 2), new ScheduledTask(1648, 1757, 1), new ScheduledTask(1857, 2239, 0), new ScheduledTask(2239, 2512, 0), new ScheduledTask(2247, 2466, 1), new ScheduledTask(2512, 2949, 0), new ScheduledTask(2243, 2516, 2), new ScheduledTask(2516, 2625, 2), new ScheduledTask(2949, 3277, 0), new ScheduledTask(3277, 3769, 0)};
        int[] expectedProcessorEndTimes = new int[]{3769, 2466, 2625};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot24_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.24_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 3769;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 164, 0), new ScheduledTask(164, 710, 0), new ScheduledTask(0, 437, 1), new ScheduledTask(710, 1038, 0), new ScheduledTask(0, 219, 2), new ScheduledTask(219, 711, 2), new ScheduledTask(1038, 1202, 0), new ScheduledTask(719, 883, 1), new ScheduledTask(1202, 1475, 0), new ScheduledTask(1211, 1648, 1), new ScheduledTask(1475, 1857, 0), new ScheduledTask(1047, 1429, 2), new ScheduledTask(1648, 1757, 1), new ScheduledTask(1857, 2239, 0), new ScheduledTask(2239, 2512, 0), new ScheduledTask(2247, 2466, 1), new ScheduledTask(2512, 2949, 0), new ScheduledTask(2243, 2516, 2), new ScheduledTask(2516, 2625, 2), new ScheduledTask(2949, 3277, 0), new ScheduledTask(3277, 3769, 0)};
        int[] expectedProcessorEndTimes = new int[]{3769, 2466, 2625};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot24_CCR_0dot10_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.24_CCR_0.10_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 635800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 148, 0), new ScheduledTask(14800, 15293, 0), new ScheduledTask(64100, 64396, 0), new ScheduledTask(0, 99, 1), new ScheduledTask(93700, 94045, 0), new ScheduledTask(128200, 128545, 0), new ScheduledTask(162700, 163193, 0), new ScheduledTask(212000, 212197, 0), new ScheduledTask(231700, 232193, 0), new ScheduledTask(163400, 163597, 1), new ScheduledTask(281000, 281197, 0), new ScheduledTask(300700, 301045, 0), new ScheduledTask(335200, 335693, 0), new ScheduledTask(384500, 384845, 0), new ScheduledTask(419000, 419394, 0), new ScheduledTask(458400, 458696, 0), new ScheduledTask(488000, 488246, 0), new ScheduledTask(512600, 512945, 0), new ScheduledTask(547100, 547396, 0), new ScheduledTask(576700, 576946, 0), new ScheduledTask(601300, 601645, 0)};
        int[] expectedProcessorEndTimes = new int[]{601645, 163597};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot24_CCR_0dot10_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.24_CCR_0.10_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 528800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 148, 0), new ScheduledTask(14800, 15293, 0), new ScheduledTask(64100, 64396, 0), new ScheduledTask(0, 99, 1), new ScheduledTask(93700, 94045, 0), new ScheduledTask(128200, 128545, 0), new ScheduledTask(162700, 163193, 0), new ScheduledTask(163600, 163797, 1), new ScheduledTask(212000, 212493, 0), new ScheduledTask(163400, 163597, 2), new ScheduledTask(261300, 261497, 0), new ScheduledTask(281000, 281345, 0), new ScheduledTask(315500, 315993, 0), new ScheduledTask(316400, 316745, 1), new ScheduledTask(364800, 365194, 0), new ScheduledTask(404200, 404496, 0), new ScheduledTask(385400, 385646, 1), new ScheduledTask(435100, 435445, 0), new ScheduledTask(434600, 434896, 1), new ScheduledTask(469600, 469846, 0), new ScheduledTask(494300, 494645, 0)};
        int[] expectedProcessorEndTimes = new int[]{494645, 434896, 163597};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot24_CCR_0dot10_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.24_CCR_0.10_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 459900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 148, 0), new ScheduledTask(14800, 15293, 0), new ScheduledTask(64100, 64396, 0), new ScheduledTask(0, 99, 1), new ScheduledTask(93700, 94045, 0), new ScheduledTask(128200, 128545, 0), new ScheduledTask(129200, 129693, 1), new ScheduledTask(162700, 162897, 0), new ScheduledTask(189060, 189553, 0), new ScheduledTask(163400, 163597, 2), new ScheduledTask(238360, 238557, 0), new ScheduledTask(258060, 258405, 0), new ScheduledTask(258860, 259353, 1), new ScheduledTask(292560, 292905, 0), new ScheduledTask(318020, 318414, 1), new ScheduledTask(327060, 327356, 0), new ScheduledTask(327560, 327806, 2), new ScheduledTask(366300, 366645, 0), new ScheduledTask(365460, 365756, 1), new ScheduledTask(400800, 401046, 0), new ScheduledTask(425400, 425745, 0)};
        int[] expectedProcessorEndTimes = new int[]{425745, 365756, 327806};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot24_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.24_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4583;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 148, 0), new ScheduledTask(148, 641, 0), new ScheduledTask(641, 937, 0), new ScheduledTask(0, 99, 1), new ScheduledTask(937, 1282, 0), new ScheduledTask(1282, 1627, 0), new ScheduledTask(1292, 1785, 1), new ScheduledTask(1627, 1824, 0), new ScheduledTask(1824, 2317, 0), new ScheduledTask(1785, 1982, 1), new ScheduledTask(2317, 2514, 0), new ScheduledTask(2521, 2866, 1), new ScheduledTask(2514, 3007, 0), new ScheduledTask(2866, 3211, 1), new ScheduledTask(3007, 3401, 0), new ScheduledTask(3211, 3507, 1), new ScheduledTask(3401, 3647, 0), new ScheduledTask(3647, 3992, 0), new ScheduledTask(3657, 3953, 1), new ScheduledTask(3992, 4238, 0), new ScheduledTask(4238, 4583, 0)};
        int[] expectedProcessorEndTimes = new int[]{4583, 3953};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot24_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.24_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 4436;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 148, 0), new ScheduledTask(148, 641, 0), new ScheduledTask(641, 937, 0), new ScheduledTask(0, 99, 1), new ScheduledTask(937, 1282, 0), new ScheduledTask(1282, 1627, 0), new ScheduledTask(1292, 1785, 1), new ScheduledTask(1627, 1824, 0), new ScheduledTask(1824, 2317, 0), new ScheduledTask(1634, 1831, 2), new ScheduledTask(2317, 2514, 0), new ScheduledTask(2514, 2859, 0), new ScheduledTask(2522, 3015, 1), new ScheduledTask(2859, 3204, 0), new ScheduledTask(3015, 3409, 1), new ScheduledTask(3204, 3500, 0), new ScheduledTask(3209, 3455, 2), new ScheduledTask(3500, 3845, 0), new ScheduledTask(3455, 3751, 2), new ScheduledTask(3845, 4091, 0), new ScheduledTask(4091, 4436, 0)};
        int[] expectedProcessorEndTimes = new int[]{4436, 3409, 3751};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot24_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.24_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 4436;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 148, 0), new ScheduledTask(148, 641, 0), new ScheduledTask(641, 937, 0), new ScheduledTask(0, 99, 1), new ScheduledTask(937, 1282, 0), new ScheduledTask(1282, 1627, 0), new ScheduledTask(1292, 1785, 1), new ScheduledTask(1627, 1824, 0), new ScheduledTask(1824, 2317, 0), new ScheduledTask(1634, 1831, 2), new ScheduledTask(2317, 2514, 0), new ScheduledTask(2514, 2859, 0), new ScheduledTask(2522, 3015, 1), new ScheduledTask(2859, 3204, 0), new ScheduledTask(3015, 3409, 1), new ScheduledTask(3204, 3500, 0), new ScheduledTask(3209, 3455, 2), new ScheduledTask(3500, 3845, 0), new ScheduledTask(3455, 3751, 2), new ScheduledTask(3845, 4091, 0), new ScheduledTask(4091, 4436, 0)};
        int[] expectedProcessorEndTimes = new int[]{4436, 3409, 3751};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot24_CCR_1dot00_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.24_CCR_1.00_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 62400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 45, 0), new ScheduledTask(4500, 4527, 0), new ScheduledTask(7200, 7232, 0), new ScheduledTask(10400, 10423, 0), new ScheduledTask(12700, 12741, 0), new ScheduledTask(16800, 16818, 0), new ScheduledTask(18600, 18636, 0), new ScheduledTask(22200, 22232, 0), new ScheduledTask(25400, 25441, 0), new ScheduledTask(29500, 29532, 0), new ScheduledTask(32700, 32723, 0), new ScheduledTask(13500, 13509, 1), new ScheduledTask(35000, 35041, 0), new ScheduledTask(29900, 29909, 1), new ScheduledTask(39100, 39132, 0), new ScheduledTask(42300, 42341, 0), new ScheduledTask(46400, 46441, 0), new ScheduledTask(50500, 50541, 0), new ScheduledTask(54600, 54632, 0), new ScheduledTask(57800, 57823, 0), new ScheduledTask(60100, 60123, 0)};
        int[] expectedProcessorEndTimes = new int[]{60123, 29909};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot24_CCR_1dot00_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.24_CCR_1.00_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 48600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 45, 0), new ScheduledTask(4500, 4527, 0), new ScheduledTask(7200, 7232, 0), new ScheduledTask(10400, 10423, 0), new ScheduledTask(0, 41, 1), new ScheduledTask(12700, 12718, 0), new ScheduledTask(14500, 14536, 0), new ScheduledTask(18100, 18132, 0), new ScheduledTask(21300, 21341, 0), new ScheduledTask(21900, 21932, 1), new ScheduledTask(28500, 28523, 0), new ScheduledTask(13500, 13509, 2), new ScheduledTask(30800, 30841, 0), new ScheduledTask(25800, 25809, 2), new ScheduledTask(34900, 34932, 0), new ScheduledTask(38100, 38141, 0), new ScheduledTask(35300, 35341, 1), new ScheduledTask(42200, 42241, 0), new ScheduledTask(35500, 35532, 2), new ScheduledTask(43000, 43023, 2), new ScheduledTask(46300, 46323, 0)};
        int[] expectedProcessorEndTimes = new int[]{46323, 35341, 43023};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot24_CCR_1dot00_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.24_CCR_1.00_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 46040;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 45, 0), new ScheduledTask(4500, 4527, 0), new ScheduledTask(7200, 7232, 0), new ScheduledTask(10400, 10423, 0), new ScheduledTask(0, 41, 1), new ScheduledTask(12700, 12718, 0), new ScheduledTask(14500, 14536, 0), new ScheduledTask(18100, 18132, 0), new ScheduledTask(21300, 21341, 0), new ScheduledTask(21900, 21932, 1), new ScheduledTask(25940, 25963, 0), new ScheduledTask(13500, 13509, 2), new ScheduledTask(28240, 28281, 0), new ScheduledTask(25800, 25809, 1), new ScheduledTask(32340, 32372, 0), new ScheduledTask(35540, 35581, 0), new ScheduledTask(32740, 32781, 1), new ScheduledTask(39640, 39681, 0), new ScheduledTask(32940, 32972, 2), new ScheduledTask(40440, 40463, 1), new ScheduledTask(43740, 43763, 0)};
        int[] expectedProcessorEndTimes = new int[]{43763, 40463, 32972};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot24_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.24_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 455;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 45, 0), new ScheduledTask(45, 72, 0), new ScheduledTask(72, 104, 0), new ScheduledTask(104, 127, 0), new ScheduledTask(0, 41, 1), new ScheduledTask(127, 145, 0), new ScheduledTask(145, 181, 0), new ScheduledTask(181, 213, 0), new ScheduledTask(213, 254, 0), new ScheduledTask(219, 251, 1), new ScheduledTask(254, 277, 0), new ScheduledTask(251, 260, 1), new ScheduledTask(277, 318, 0), new ScheduledTask(260, 269, 1), new ScheduledTask(318, 350, 0), new ScheduledTask(350, 391, 0), new ScheduledTask(322, 363, 1), new ScheduledTask(391, 432, 0), new ScheduledTask(363, 395, 1), new ScheduledTask(399, 422, 1), new ScheduledTask(432, 455, 0)};
        int[] expectedProcessorEndTimes = new int[]{455, 422};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot24_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.24_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 455;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 45, 0), new ScheduledTask(45, 72, 0), new ScheduledTask(72, 104, 0), new ScheduledTask(104, 127, 0), new ScheduledTask(0, 41, 1), new ScheduledTask(127, 145, 0), new ScheduledTask(145, 181, 0), new ScheduledTask(181, 213, 0), new ScheduledTask(213, 254, 0), new ScheduledTask(219, 251, 1), new ScheduledTask(254, 277, 0), new ScheduledTask(135, 144, 2), new ScheduledTask(277, 318, 0), new ScheduledTask(258, 267, 1), new ScheduledTask(318, 350, 0), new ScheduledTask(350, 391, 0), new ScheduledTask(322, 363, 1), new ScheduledTask(391, 432, 0), new ScheduledTask(324, 356, 2), new ScheduledTask(399, 422, 1), new ScheduledTask(432, 455, 0)};
        int[] expectedProcessorEndTimes = new int[]{455, 422, 356};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot24_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.24_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 455;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 45, 0), new ScheduledTask(45, 72, 0), new ScheduledTask(72, 104, 0), new ScheduledTask(104, 127, 0), new ScheduledTask(0, 41, 1), new ScheduledTask(127, 145, 0), new ScheduledTask(145, 181, 0), new ScheduledTask(181, 213, 0), new ScheduledTask(213, 254, 0), new ScheduledTask(219, 251, 1), new ScheduledTask(254, 277, 0), new ScheduledTask(135, 144, 2), new ScheduledTask(277, 318, 0), new ScheduledTask(258, 267, 1), new ScheduledTask(318, 350, 0), new ScheduledTask(350, 391, 0), new ScheduledTask(322, 363, 1), new ScheduledTask(391, 432, 0), new ScheduledTask(324, 356, 2), new ScheduledTask(399, 422, 1), new ScheduledTask(432, 455, 0)};
        int[] expectedProcessorEndTimes = new int[]{455, 422, 356};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot24_CCR_1dot00_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.24_CCR_1.00_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 56700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(10500, 10527, 0), new ScheduledTask(1400, 1414, 0), new ScheduledTask(13200, 13236, 0), new ScheduledTask(2800, 2832, 0), new ScheduledTask(6000, 6045, 0), new ScheduledTask(16800, 16836, 0), new ScheduledTask(0, 32, 1), new ScheduledTask(24500, 24536, 0), new ScheduledTask(19200, 19218, 1), new ScheduledTask(20400, 20441, 0), new ScheduledTask(31000, 31036, 0), new ScheduledTask(34600, 34627, 0), new ScheduledTask(28100, 28123, 0), new ScheduledTask(39100, 39132, 0), new ScheduledTask(37300, 37318, 0), new ScheduledTask(42300, 42345, 0), new ScheduledTask(38000, 38009, 2), new ScheduledTask(46800, 46836, 0), new ScheduledTask(53100, 53136, 0), new ScheduledTask(50400, 50427, 0)};
        int[] expectedProcessorEndTimes = new int[]{53136, 19218, 38009};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot24_CCR_1dot00_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.24_CCR_1.00_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 44300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(1400, 1427, 0), new ScheduledTask(1600, 1614, 1), new ScheduledTask(4600, 4636, 1), new ScheduledTask(5400, 5432, 0), new ScheduledTask(8600, 8645, 0), new ScheduledTask(13100, 13136, 0), new ScheduledTask(0, 32, 2), new ScheduledTask(16700, 16736, 0), new ScheduledTask(12100, 12118, 3), new ScheduledTask(13700, 13741, 2), new ScheduledTask(20300, 20336, 0), new ScheduledTask(23900, 23927, 0), new ScheduledTask(21900, 21923, 2), new ScheduledTask(26600, 26632, 0), new ScheduledTask(26800, 26818, 2), new ScheduledTask(30600, 30645, 0), new ScheduledTask(27300, 27309, 3), new ScheduledTask(35100, 35136, 0), new ScheduledTask(38700, 38736, 0), new ScheduledTask(38900, 38927, 3)};
        int[] expectedProcessorEndTimes = new int[]{38736, 4636, 26818, 38927};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot24_CCR_1dot00_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.24_CCR_1.00_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 36960;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(1400, 1427, 0), new ScheduledTask(1600, 1614, 1), new ScheduledTask(4100, 4136, 0), new ScheduledTask(3280, 3312, 1), new ScheduledTask(7120, 7165, 1), new ScheduledTask(7700, 7736, 0), new ScheduledTask(0, 32, 3), new ScheduledTask(12720, 12756, 0), new ScheduledTask(8000, 8018, 3), new ScheduledTask(13120, 13161, 2), new ScheduledTask(16320, 16356, 0), new ScheduledTask(19920, 19947, 0), new ScheduledTask(19270, 19293, 2), new ScheduledTask(20920, 20952, 1), new ScheduledTask(23320, 23338, 0), new ScheduledTask(25260, 25305, 0), new ScheduledTask(23320, 23329, 3), new ScheduledTask(29760, 29796, 0), new ScheduledTask(33360, 33396, 0), new ScheduledTask(33560, 33587, 1)};
        int[] expectedProcessorEndTimes = new int[]{33396, 33587, 19293, 23329};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot24_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.24_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 361;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(14, 41, 0), new ScheduledTask(32, 46, 1), new ScheduledTask(52, 88, 0), new ScheduledTask(46, 78, 1), new ScheduledTask(78, 123, 1), new ScheduledTask(88, 124, 0), new ScheduledTask(0, 32, 1), new ScheduledTask(125, 161, 0), new ScheduledTask(123, 141, 1), new ScheduledTask(141, 182, 1), new ScheduledTask(161, 197, 0), new ScheduledTask(197, 224, 0), new ScheduledTask(182, 205, 1), new ScheduledTask(207, 239, 1), new ScheduledTask(224, 242, 0), new ScheduledTask(244, 289, 0), new ScheduledTask(239, 248, 1), new ScheduledTask(289, 325, 0), new ScheduledTask(325, 361, 0), new ScheduledTask(327, 354, 1)};
        int[] expectedProcessorEndTimes = new int[]{361, 354};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot24_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.24_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 349;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(14, 41, 0), new ScheduledTask(16, 30, 1), new ScheduledTask(41, 77, 0), new ScheduledTask(30, 62, 1), new ScheduledTask(62, 107, 1), new ScheduledTask(77, 113, 0), new ScheduledTask(0, 32, 2), new ScheduledTask(113, 149, 0), new ScheduledTask(80, 98, 2), new ScheduledTask(107, 148, 1), new ScheduledTask(149, 185, 0), new ScheduledTask(185, 212, 0), new ScheduledTask(151, 174, 1), new ScheduledTask(195, 227, 1), new ScheduledTask(212, 230, 0), new ScheduledTask(232, 277, 0), new ScheduledTask(219, 228, 2), new ScheduledTask(277, 313, 0), new ScheduledTask(313, 349, 0), new ScheduledTask(315, 342, 1)};
        int[] expectedProcessorEndTimes = new int[]{349, 342, 228};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot24_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.24_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 349;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(14, 41, 0), new ScheduledTask(16, 30, 1), new ScheduledTask(41, 77, 0), new ScheduledTask(30, 62, 1), new ScheduledTask(62, 107, 1), new ScheduledTask(77, 113, 0), new ScheduledTask(0, 32, 2), new ScheduledTask(113, 149, 0), new ScheduledTask(80, 98, 2), new ScheduledTask(107, 148, 1), new ScheduledTask(149, 185, 0), new ScheduledTask(185, 212, 0), new ScheduledTask(151, 174, 1), new ScheduledTask(195, 227, 1), new ScheduledTask(212, 230, 0), new ScheduledTask(232, 277, 0), new ScheduledTask(219, 228, 2), new ScheduledTask(277, 313, 0), new ScheduledTask(313, 349, 0), new ScheduledTask(315, 342, 1)};
        int[] expectedProcessorEndTimes = new int[]{349, 342, 228};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot24_CCR_9dot99_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.24_CCR_9.99_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 13900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(500, 505, 0), new ScheduledTask(1000, 1005, 0), new ScheduledTask(1500, 1507, 0), new ScheduledTask(2200, 2207, 0), new ScheduledTask(2900, 2904, 0), new ScheduledTask(3300, 3308, 0), new ScheduledTask(4100, 4109, 0), new ScheduledTask(5000, 5010, 0), new ScheduledTask(6000, 6010, 0), new ScheduledTask(7000, 7005, 0), new ScheduledTask(7500, 7502, 0), new ScheduledTask(7700, 7708, 0), new ScheduledTask(8500, 8506, 0), new ScheduledTask(9100, 9105, 0), new ScheduledTask(9600, 9610, 0), new ScheduledTask(10600, 10605, 0), new ScheduledTask(11100, 11105, 0), new ScheduledTask(11600, 11609, 0), new ScheduledTask(12500, 12508, 0), new ScheduledTask(13300, 13306, 0)};
        int[] expectedProcessorEndTimes = new int[]{13306};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot24_CCR_9dot99_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.24_CCR_9.99_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 13400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(500, 505, 0), new ScheduledTask(1000, 1005, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(1500, 1507, 0), new ScheduledTask(1400, 1404, 1), new ScheduledTask(3300, 3308, 0), new ScheduledTask(6100, 6109, 0), new ScheduledTask(5100, 5110, 0), new ScheduledTask(4100, 4110, 0), new ScheduledTask(7000, 7005, 0), new ScheduledTask(7500, 7502, 0), new ScheduledTask(7700, 7708, 0), new ScheduledTask(8500, 8506, 0), new ScheduledTask(9100, 9105, 0), new ScheduledTask(9600, 9610, 0), new ScheduledTask(10600, 10605, 0), new ScheduledTask(10600, 10605, 1), new ScheduledTask(11900, 11909, 0), new ScheduledTask(11100, 11108, 0), new ScheduledTask(12800, 12806, 0)};
        int[] expectedProcessorEndTimes = new int[]{12806, 10605};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot24_CCR_9dot99_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.24_CCR_9.99_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 12720;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 1), new ScheduledTask(600, 605, 1), new ScheduledTask(1200, 1205, 1), new ScheduledTask(0, 7, 0), new ScheduledTask(1800, 1807, 1), new ScheduledTask(700, 704, 0), new ScheduledTask(2640, 2648, 1), new ScheduledTask(5500, 5509, 0), new ScheduledTask(3600, 3610, 1), new ScheduledTask(4340, 4350, 0), new ScheduledTask(6400, 6405, 0), new ScheduledTask(6900, 6902, 0), new ScheduledTask(7100, 7108, 0), new ScheduledTask(7900, 7906, 0), new ScheduledTask(8500, 8505, 0), new ScheduledTask(9000, 9010, 0), new ScheduledTask(10000, 10005, 0), new ScheduledTask(10000, 10005, 3), new ScheduledTask(11300, 11309, 0), new ScheduledTask(10500, 10508, 0), new ScheduledTask(12000, 12006, 1)};
        int[] expectedProcessorEndTimes = new int[]{11309, 12006, 0, 10005};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot24_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.24_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 124;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 10, 0), new ScheduledTask(10, 15, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(15, 22, 0), new ScheduledTask(7, 11, 1), new ScheduledTask(26, 34, 0), new ScheduledTask(53, 62, 1), new ScheduledTask(34, 44, 0), new ScheduledTask(39, 49, 1), new ScheduledTask(62, 67, 1), new ScheduledTask(67, 69, 1), new ScheduledTask(69, 77, 1), new ScheduledTask(77, 83, 1), new ScheduledTask(83, 88, 1), new ScheduledTask(88, 98, 1), new ScheduledTask(98, 103, 1), new ScheduledTask(98, 103, 0), new ScheduledTask(111, 120, 1), new ScheduledTask(103, 111, 1), new ScheduledTask(118, 124, 0)};
        int[] expectedProcessorEndTimes = new int[]{124, 120};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot24_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.24_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 124;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 10, 0), new ScheduledTask(10, 15, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(15, 22, 0), new ScheduledTask(7, 11, 1), new ScheduledTask(26, 34, 0), new ScheduledTask(53, 62, 2), new ScheduledTask(34, 44, 0), new ScheduledTask(39, 49, 2), new ScheduledTask(62, 67, 2), new ScheduledTask(67, 69, 2), new ScheduledTask(69, 77, 2), new ScheduledTask(77, 83, 2), new ScheduledTask(83, 88, 2), new ScheduledTask(88, 98, 2), new ScheduledTask(98, 103, 2), new ScheduledTask(98, 103, 3), new ScheduledTask(111, 120, 2), new ScheduledTask(103, 111, 2), new ScheduledTask(118, 124, 3)};
        int[] expectedProcessorEndTimes = new int[]{44, 11, 120, 124};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot24_CCR_9dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.24_CCR_9.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 124;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 10, 0), new ScheduledTask(10, 15, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(15, 22, 0), new ScheduledTask(7, 11, 1), new ScheduledTask(26, 34, 0), new ScheduledTask(53, 62, 1), new ScheduledTask(34, 44, 0), new ScheduledTask(39, 49, 1), new ScheduledTask(62, 67, 1), new ScheduledTask(67, 69, 1), new ScheduledTask(69, 77, 1), new ScheduledTask(77, 83, 1), new ScheduledTask(83, 88, 1), new ScheduledTask(88, 98, 1), new ScheduledTask(98, 103, 1), new ScheduledTask(98, 103, 2), new ScheduledTask(111, 120, 1), new ScheduledTask(103, 111, 1), new ScheduledTask(118, 124, 3)};
        int[] expectedProcessorEndTimes = new int[]{44, 120, 103, 124};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot33_CCR_1dot00_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.33_CCR_1.00_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 58300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 29, 0), new ScheduledTask(4700, 4747, 0), new ScheduledTask(2900, 2918, 0), new ScheduledTask(11200, 11247, 0), new ScheduledTask(5600, 5618, 1), new ScheduledTask(9400, 9418, 0), new ScheduledTask(17100, 17112, 0), new ScheduledTask(18300, 18341, 0), new ScheduledTask(33000, 33047, 0), new ScheduledTask(28300, 28347, 0), new ScheduledTask(22600, 22623, 2), new ScheduledTask(37700, 37718, 0), new ScheduledTask(22400, 22459, 0), new ScheduledTask(39500, 39541, 0), new ScheduledTask(43600, 43653, 0), new ScheduledTask(48900, 48918, 0), new ScheduledTask(50700, 50712, 0), new ScheduledTask(54200, 54241, 0), new ScheduledTask(51900, 51923, 0), new ScheduledTask(39700, 39723, 3), new ScheduledTask(49600, 49612, 2)};
        int[] expectedProcessorEndTimes = new int[]{54241, 5618, 49612, 39723};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot33_CCR_1dot00_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.33_CCR_1.00_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 44500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 29, 0), new ScheduledTask(2900, 2947, 0), new ScheduledTask(3900, 3918, 1), new ScheduledTask(7700, 7747, 0), new ScheduledTask(7500, 7518, 1), new ScheduledTask(7900, 7918, 2), new ScheduledTask(12400, 12412, 0), new ScheduledTask(13600, 13641, 0), new ScheduledTask(17700, 17747, 0), new ScheduledTask(22400, 22447, 0), new ScheduledTask(17900, 17923, 1), new ScheduledTask(27100, 27118, 0), new ScheduledTask(18100, 18159, 2), new ScheduledTask(28900, 28941, 0), new ScheduledTask(33000, 33053, 0), new ScheduledTask(34000, 34018, 1), new ScheduledTask(38300, 38312, 0), new ScheduledTask(39500, 39541, 0), new ScheduledTask(39900, 39923, 1), new ScheduledTask(29100, 29123, 3), new ScheduledTask(39000, 39012, 2)};
        int[] expectedProcessorEndTimes = new int[]{39541, 39923, 39012, 29123};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot33_CCR_1dot00_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.33_CCR_1.00_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 40840;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 29, 0), new ScheduledTask(2900, 2947, 0), new ScheduledTask(3900, 3918, 1), new ScheduledTask(7600, 7647, 0), new ScheduledTask(6060, 6078, 1), new ScheduledTask(8220, 8238, 1), new ScheduledTask(12300, 12312, 0), new ScheduledTask(13500, 13541, 0), new ScheduledTask(17600, 17647, 0), new ScheduledTask(18500, 18547, 1), new ScheduledTask(17800, 17823, 2), new ScheduledTask(24340, 24358, 0), new ScheduledTask(18000, 18059, 3), new ScheduledTask(26140, 26181, 0), new ScheduledTask(30240, 30293, 0), new ScheduledTask(31240, 31258, 1), new ScheduledTask(35540, 35552, 0), new ScheduledTask(36740, 36781, 0), new ScheduledTask(37140, 37163, 1), new ScheduledTask(26340, 26363, 2), new ScheduledTask(36240, 36252, 2)};
        int[] expectedProcessorEndTimes = new int[]{36781, 37163, 36252, 18059};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot33_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.33_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 411;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 29, 0), new ScheduledTask(29, 76, 0), new ScheduledTask(39, 57, 1), new ScheduledTask(76, 123, 0), new ScheduledTask(96, 114, 1), new ScheduledTask(78, 96, 1), new ScheduledTask(123, 135, 0), new ScheduledTask(135, 176, 0), new ScheduledTask(183, 230, 1), new ScheduledTask(176, 223, 0), new ScheduledTask(223, 246, 0), new ScheduledTask(230, 248, 1), new ScheduledTask(246, 305, 0), new ScheduledTask(248, 289, 1), new ScheduledTask(305, 358, 0), new ScheduledTask(312, 330, 1), new ScheduledTask(358, 370, 0), new ScheduledTask(370, 411, 0), new ScheduledTask(377, 400, 1), new ScheduledTask(289, 312, 1), new ScheduledTask(365, 377, 1)};
        int[] expectedProcessorEndTimes = new int[]{411, 400};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot33_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.33_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 395;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 29, 0), new ScheduledTask(29, 76, 0), new ScheduledTask(39, 57, 1), new ScheduledTask(76, 123, 0), new ScheduledTask(66, 84, 2), new ScheduledTask(78, 96, 1), new ScheduledTask(123, 135, 0), new ScheduledTask(135, 176, 0), new ScheduledTask(183, 230, 3), new ScheduledTask(176, 223, 0), new ScheduledTask(178, 201, 2), new ScheduledTask(230, 248, 3), new ScheduledTask(201, 260, 2), new ScheduledTask(248, 289, 3), new ScheduledTask(289, 342, 3), new ScheduledTask(299, 317, 2), new ScheduledTask(342, 354, 3), new ScheduledTask(354, 395, 3), new ScheduledTask(361, 384, 2), new ScheduledTask(260, 283, 2), new ScheduledTask(349, 361, 2)};
        int[] expectedProcessorEndTimes = new int[]{223, 96, 384, 395};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot33_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.33_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 395;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 29, 0), new ScheduledTask(29, 76, 0), new ScheduledTask(39, 57, 1), new ScheduledTask(76, 123, 0), new ScheduledTask(66, 84, 2), new ScheduledTask(78, 96, 3), new ScheduledTask(123, 135, 0), new ScheduledTask(135, 176, 0), new ScheduledTask(183, 230, 2), new ScheduledTask(176, 223, 0), new ScheduledTask(178, 201, 1), new ScheduledTask(230, 248, 2), new ScheduledTask(180, 239, 4), new ScheduledTask(248, 289, 2), new ScheduledTask(289, 342, 2), new ScheduledTask(299, 317, 5), new ScheduledTask(342, 354, 2), new ScheduledTask(354, 395, 2), new ScheduledTask(361, 384, 5), new ScheduledTask(250, 273, 5), new ScheduledTask(349, 361, 5)};
        int[] expectedProcessorEndTimes = new int[]{223, 201, 395, 96, 239, 384};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot38_CCR_0dot10_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.38_CCR_0.10_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 704400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(26900, 27384, 0), new ScheduledTask(0, 161, 0), new ScheduledTask(16100, 16208, 0), new ScheduledTask(75300, 75676, 0), new ScheduledTask(112900, 113330, 0), new ScheduledTask(155900, 156276, 0), new ScheduledTask(193500, 193715, 0), new ScheduledTask(215000, 215484, 0), new ScheduledTask(263400, 263938, 0), new ScheduledTask(317200, 317415, 0), new ScheduledTask(263900, 264115, 1), new ScheduledTask(376300, 376515, 0), new ScheduledTask(338700, 339076, 0), new ScheduledTask(483900, 484384, 0), new ScheduledTask(451600, 451923, 0), new ScheduledTask(532300, 532408, 0), new ScheduledTask(575400, 575938, 0), new ScheduledTask(543100, 543423, 0), new ScheduledTask(629200, 629576, 0), new ScheduledTask(397800, 398338, 0), new ScheduledTask(666800, 667176, 0)};
        int[] expectedProcessorEndTimes = new int[]{667176, 264115};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot38_CCR_0dot10_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.38_CCR_0.10_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 577100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 484, 0), new ScheduledTask(0, 161, 1), new ScheduledTask(32200, 32308, 1), new ScheduledTask(54300, 54676, 0), new ScheduledTask(91900, 92330, 0), new ScheduledTask(134900, 135276, 0), new ScheduledTask(172500, 172715, 0), new ScheduledTask(194000, 194484, 0), new ScheduledTask(242400, 242938, 0), new ScheduledTask(296200, 296415, 0), new ScheduledTask(242900, 243115, 2), new ScheduledTask(317700, 317915, 0), new ScheduledTask(318000, 318376, 3), new ScheduledTask(339200, 339684, 0), new ScheduledTask(393500, 393823, 0), new ScheduledTask(425800, 425908, 0), new ScheduledTask(436600, 437138, 0), new ScheduledTask(436900, 437223, 3), new ScheduledTask(501900, 502276, 0), new ScheduledTask(393500, 394038, 2), new ScheduledTask(539500, 539876, 0)};
        int[] expectedProcessorEndTimes = new int[]{539876, 32308, 394038, 437223};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot38_CCR_0dot10_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.38_CCR_0.10_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 535980;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 484, 0), new ScheduledTask(0, 161, 1), new ScheduledTask(19320, 19428, 1), new ScheduledTask(48400, 48776, 0), new ScheduledTask(86000, 86430, 0), new ScheduledTask(129000, 129376, 0), new ScheduledTask(166600, 166815, 0), new ScheduledTask(188100, 188584, 0), new ScheduledTask(236500, 237038, 0), new ScheduledTask(290300, 290515, 0), new ScheduledTask(237000, 237215, 1), new ScheduledTask(311800, 312015, 0), new ScheduledTask(312100, 312476, 1), new ScheduledTask(333300, 333784, 0), new ScheduledTask(357220, 357543, 1), new ScheduledTask(396180, 396288, 0), new ScheduledTask(406980, 407518, 0), new ScheduledTask(407280, 407603, 1), new ScheduledTask(460780, 461156, 0), new ScheduledTask(357520, 358058, 2), new ScheduledTask(498380, 498756, 0)};
        int[] expectedProcessorEndTimes = new int[]{498756, 407603, 358058};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot38_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.38_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 5220;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 484, 0), new ScheduledTask(0, 161, 1), new ScheduledTask(161, 269, 1), new ScheduledTask(484, 860, 0), new ScheduledTask(860, 1290, 0), new ScheduledTask(1290, 1666, 0), new ScheduledTask(1666, 1881, 0), new ScheduledTask(1881, 2365, 0), new ScheduledTask(2365, 2903, 0), new ScheduledTask(2903, 3118, 0), new ScheduledTask(2370, 2585, 1), new ScheduledTask(3118, 3333, 0), new ScheduledTask(3121, 3497, 1), new ScheduledTask(3333, 3817, 0), new ScheduledTask(3497, 3820, 1), new ScheduledTask(3822, 3930, 0), new ScheduledTask(3930, 4468, 0), new ScheduledTask(3933, 4256, 1), new ScheduledTask(4468, 4844, 0), new ScheduledTask(4256, 4794, 1), new ScheduledTask(4844, 5220, 0)};
        int[] expectedProcessorEndTimes = new int[]{5220, 4794};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot38_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.38_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 5220;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 484, 0), new ScheduledTask(0, 161, 1), new ScheduledTask(161, 269, 1), new ScheduledTask(484, 860, 0), new ScheduledTask(860, 1290, 0), new ScheduledTask(1290, 1666, 0), new ScheduledTask(1666, 1881, 0), new ScheduledTask(1881, 2365, 0), new ScheduledTask(2365, 2903, 0), new ScheduledTask(2903, 3118, 0), new ScheduledTask(2370, 2585, 1), new ScheduledTask(3118, 3333, 0), new ScheduledTask(3121, 3497, 1), new ScheduledTask(3333, 3817, 0), new ScheduledTask(3497, 3820, 1), new ScheduledTask(3822, 3930, 0), new ScheduledTask(3930, 4468, 0), new ScheduledTask(3933, 4256, 1), new ScheduledTask(4468, 4844, 0), new ScheduledTask(3500, 4038, 2), new ScheduledTask(4844, 5220, 0)};
        int[] expectedProcessorEndTimes = new int[]{5220, 4256, 4038};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot38_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.38_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 5220;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 484, 0), new ScheduledTask(0, 161, 1), new ScheduledTask(161, 269, 1), new ScheduledTask(484, 860, 0), new ScheduledTask(860, 1290, 0), new ScheduledTask(1290, 1666, 0), new ScheduledTask(1666, 1881, 0), new ScheduledTask(1881, 2365, 0), new ScheduledTask(2365, 2903, 0), new ScheduledTask(2903, 3118, 0), new ScheduledTask(2370, 2585, 1), new ScheduledTask(3118, 3333, 0), new ScheduledTask(3121, 3497, 1), new ScheduledTask(3333, 3817, 0), new ScheduledTask(3497, 3820, 1), new ScheduledTask(3822, 3930, 0), new ScheduledTask(3930, 4468, 0), new ScheduledTask(3933, 4256, 1), new ScheduledTask(4468, 4844, 0), new ScheduledTask(3500, 4038, 2), new ScheduledTask(4844, 5220, 0)};
        int[] expectedProcessorEndTimes = new int[]{5220, 4256, 4038};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot43_CCR_1dot00_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.43_CCR_1.00_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 70600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(1200, 1235, 0), new ScheduledTask(4700, 4718, 0), new ScheduledTask(6500, 6529, 0), new ScheduledTask(9400, 9453, 0), new ScheduledTask(14700, 14735, 0), new ScheduledTask(18200, 18241, 0), new ScheduledTask(22300, 22359, 0), new ScheduledTask(28200, 28229, 0), new ScheduledTask(31100, 31129, 0), new ScheduledTask(34000, 34024, 0), new ScheduledTask(36400, 36424, 0), new ScheduledTask(38800, 38829, 0), new ScheduledTask(41700, 41724, 0), new ScheduledTask(44100, 44118, 0), new ScheduledTask(45900, 45935, 0), new ScheduledTask(49400, 49429, 0), new ScheduledTask(52300, 52347, 0), new ScheduledTask(57000, 57024, 0), new ScheduledTask(59400, 59459, 0), new ScheduledTask(65300, 65353, 0)};
        int[] expectedProcessorEndTimes = new int[]{65353};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot43_CCR_1dot00_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.43_CCR_1.00_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 59000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(1200, 1235, 0), new ScheduledTask(1800, 1818, 1), new ScheduledTask(6300, 6329, 0), new ScheduledTask(9200, 9253, 0), new ScheduledTask(14500, 14535, 0), new ScheduledTask(18000, 18041, 0), new ScheduledTask(6300, 6359, 2), new ScheduledTask(22100, 22129, 0), new ScheduledTask(25000, 25029, 0), new ScheduledTask(27900, 27924, 0), new ScheduledTask(30300, 30324, 0), new ScheduledTask(32700, 32729, 0), new ScheduledTask(35600, 35624, 0), new ScheduledTask(30800, 30818, 3), new ScheduledTask(38000, 38035, 0), new ScheduledTask(43900, 43929, 0), new ScheduledTask(46800, 46847, 0), new ScheduledTask(41500, 41524, 0), new ScheduledTask(47200, 47259, 3), new ScheduledTask(51500, 51553, 0)};
        int[] expectedProcessorEndTimes = new int[]{51553, 1818, 6359, 47259};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot43_CCR_1dot00_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.43_CCR_1.00_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 52960;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(1200, 1235, 0), new ScheduledTask(1800, 1818, 1), new ScheduledTask(4860, 4889, 0), new ScheduledTask(7760, 7813, 0), new ScheduledTask(13060, 13095, 0), new ScheduledTask(16560, 16601, 0), new ScheduledTask(3960, 4019, 1), new ScheduledTask(20660, 20689, 0), new ScheduledTask(23560, 23589, 0), new ScheduledTask(26460, 26484, 0), new ScheduledTask(28860, 28884, 0), new ScheduledTask(31260, 31289, 0), new ScheduledTask(34160, 34184, 0), new ScheduledTask(29360, 29378, 1), new ScheduledTask(36560, 36595, 0), new ScheduledTask(40060, 40089, 0), new ScheduledTask(42960, 43007, 0), new ScheduledTask(41060, 41084, 1), new ScheduledTask(43940, 43999, 1), new ScheduledTask(47660, 47713, 0)};
        int[] expectedProcessorEndTimes = new int[]{47713, 43999};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot43_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.43_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 528;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(12, 47, 0), new ScheduledTask(18, 36, 1), new ScheduledTask(47, 76, 0), new ScheduledTask(76, 129, 0), new ScheduledTask(129, 164, 0), new ScheduledTask(164, 205, 0), new ScheduledTask(36, 95, 1), new ScheduledTask(205, 234, 0), new ScheduledTask(234, 263, 0), new ScheduledTask(263, 287, 0), new ScheduledTask(287, 311, 0), new ScheduledTask(311, 340, 0), new ScheduledTask(340, 364, 0), new ScheduledTask(292, 310, 1), new ScheduledTask(364, 399, 0), new ScheduledTask(399, 428, 0), new ScheduledTask(428, 475, 0), new ScheduledTask(409, 433, 1), new ScheduledTask(433, 492, 1), new ScheduledTask(475, 528, 0)};
        int[] expectedProcessorEndTimes = new int[]{528, 492};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot43_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.43_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 528;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(12, 47, 0), new ScheduledTask(18, 36, 1), new ScheduledTask(47, 76, 0), new ScheduledTask(76, 129, 0), new ScheduledTask(129, 164, 0), new ScheduledTask(164, 205, 0), new ScheduledTask(36, 95, 1), new ScheduledTask(205, 234, 0), new ScheduledTask(234, 263, 0), new ScheduledTask(263, 287, 0), new ScheduledTask(287, 311, 0), new ScheduledTask(311, 340, 0), new ScheduledTask(340, 364, 0), new ScheduledTask(292, 310, 1), new ScheduledTask(364, 399, 0), new ScheduledTask(399, 428, 0), new ScheduledTask(428, 475, 0), new ScheduledTask(409, 433, 1), new ScheduledTask(433, 492, 1), new ScheduledTask(475, 528, 0)};
        int[] expectedProcessorEndTimes = new int[]{528, 492};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot43_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.43_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 528;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(12, 47, 0), new ScheduledTask(18, 36, 1), new ScheduledTask(47, 76, 0), new ScheduledTask(76, 129, 0), new ScheduledTask(129, 164, 0), new ScheduledTask(164, 205, 0), new ScheduledTask(36, 95, 1), new ScheduledTask(205, 234, 0), new ScheduledTask(234, 263, 0), new ScheduledTask(263, 287, 0), new ScheduledTask(287, 311, 0), new ScheduledTask(311, 340, 0), new ScheduledTask(340, 364, 0), new ScheduledTask(292, 310, 1), new ScheduledTask(364, 399, 0), new ScheduledTask(399, 428, 0), new ScheduledTask(428, 475, 0), new ScheduledTask(409, 433, 1), new ScheduledTask(433, 492, 1), new ScheduledTask(475, 528, 0)};
        int[] expectedProcessorEndTimes = new int[]{528, 492};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot48_CCR_0dot99_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.48_CCR_0.99_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 69400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 36, 0), new ScheduledTask(3600, 3636, 0), new ScheduledTask(7200, 7215, 0), new ScheduledTask(8700, 8736, 0), new ScheduledTask(12300, 12346, 0), new ScheduledTask(16900, 16941, 0), new ScheduledTask(21000, 21041, 0), new ScheduledTask(25100, 25136, 0), new ScheduledTask(28700, 28736, 0), new ScheduledTask(7400, 7410, 1), new ScheduledTask(32300, 32330, 0), new ScheduledTask(35300, 35341, 0), new ScheduledTask(39400, 39451, 0), new ScheduledTask(44500, 44525, 0), new ScheduledTask(47000, 47030, 0), new ScheduledTask(32600, 32610, 1), new ScheduledTask(50000, 50046, 0), new ScheduledTask(54600, 54646, 0), new ScheduledTask(59200, 59246, 0), new ScheduledTask(63800, 63846, 0), new ScheduledTask(68400, 68410, 0)};
        int[] expectedProcessorEndTimes = new int[]{68410, 32610};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot48_CCR_0dot99_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.48_CCR_0.99_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 54500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 36, 0), new ScheduledTask(3600, 3636, 0), new ScheduledTask(4500, 4515, 1), new ScheduledTask(8200, 8236, 0), new ScheduledTask(11800, 11846, 0), new ScheduledTask(0, 41, 2), new ScheduledTask(16400, 16441, 0), new ScheduledTask(17200, 17236, 1), new ScheduledTask(12300, 12336, 3), new ScheduledTask(7400, 7410, 3), new ScheduledTask(25000, 25030, 0), new ScheduledTask(20500, 20541, 0), new ScheduledTask(28000, 28051, 0), new ScheduledTask(27000, 27025, 3), new ScheduledTask(33100, 33130, 0), new ScheduledTask(25000, 25010, 3), new ScheduledTask(36100, 36146, 0), new ScheduledTask(40700, 40746, 0), new ScheduledTask(45300, 45346, 0), new ScheduledTask(49900, 49946, 0), new ScheduledTask(50200, 50210, 3)};
        int[] expectedProcessorEndTimes = new int[]{49946, 17236, 41, 50210};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot48_CCR_0dot99_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.48_CCR_0.99_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 50440;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 36, 0), new ScheduledTask(3600, 3636, 0), new ScheduledTask(4500, 4515, 1), new ScheduledTask(7200, 7236, 0), new ScheduledTask(10800, 10846, 0), new ScheduledTask(0, 41, 2), new ScheduledTask(15800, 15841, 1), new ScheduledTask(15400, 15436, 0), new ScheduledTask(11300, 11336, 2), new ScheduledTask(7400, 7410, 3), new ScheduledTask(20920, 20950, 0), new ScheduledTask(20720, 20761, 1), new ScheduledTask(23920, 23971, 0), new ScheduledTask(25640, 25665, 1), new ScheduledTask(29040, 29070, 0), new ScheduledTask(19600, 19610, 3), new ScheduledTask(32040, 32086, 0), new ScheduledTask(36640, 36686, 0), new ScheduledTask(41240, 41286, 0), new ScheduledTask(45840, 45886, 0), new ScheduledTask(46140, 46150, 3)};
        int[] expectedProcessorEndTimes = new int[]{45886, 25665, 11336, 46150};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot48_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.48_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 493;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 36, 0), new ScheduledTask(36, 72, 0), new ScheduledTask(45, 60, 1), new ScheduledTask(72, 108, 0), new ScheduledTask(108, 154, 0), new ScheduledTask(0, 41, 1), new ScheduledTask(154, 195, 0), new ScheduledTask(162, 198, 1), new ScheduledTask(113, 149, 1), new ScheduledTask(195, 205, 0), new ScheduledTask(198, 228, 1), new ScheduledTask(205, 246, 0), new ScheduledTask(228, 279, 1), new ScheduledTask(246, 271, 0), new ScheduledTask(279, 309, 1), new ScheduledTask(271, 281, 0), new ScheduledTask(309, 355, 1), new ScheduledTask(355, 401, 1), new ScheduledTask(401, 447, 1), new ScheduledTask(447, 493, 1), new ScheduledTask(450, 460, 0)};
        int[] expectedProcessorEndTimes = new int[]{460, 493};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot48_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.48_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 493;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 36, 0), new ScheduledTask(36, 72, 0), new ScheduledTask(45, 60, 1), new ScheduledTask(72, 108, 0), new ScheduledTask(108, 154, 0), new ScheduledTask(0, 41, 2), new ScheduledTask(154, 195, 0), new ScheduledTask(162, 198, 1), new ScheduledTask(113, 149, 2), new ScheduledTask(74, 84, 3), new ScheduledTask(198, 228, 1), new ScheduledTask(195, 236, 0), new ScheduledTask(228, 279, 1), new ScheduledTask(236, 261, 0), new ScheduledTask(279, 309, 1), new ScheduledTask(204, 214, 2), new ScheduledTask(309, 355, 1), new ScheduledTask(355, 401, 1), new ScheduledTask(401, 447, 1), new ScheduledTask(447, 493, 1), new ScheduledTask(450, 460, 0)};
        int[] expectedProcessorEndTimes = new int[]{460, 493, 214, 84};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot48_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.48_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 493;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 36, 0), new ScheduledTask(36, 72, 0), new ScheduledTask(45, 60, 1), new ScheduledTask(72, 108, 0), new ScheduledTask(108, 154, 0), new ScheduledTask(0, 41, 2), new ScheduledTask(154, 195, 0), new ScheduledTask(162, 198, 1), new ScheduledTask(113, 149, 2), new ScheduledTask(74, 84, 3), new ScheduledTask(198, 228, 1), new ScheduledTask(195, 236, 0), new ScheduledTask(228, 279, 1), new ScheduledTask(236, 261, 0), new ScheduledTask(279, 309, 1), new ScheduledTask(204, 214, 2), new ScheduledTask(309, 355, 1), new ScheduledTask(355, 401, 1), new ScheduledTask(401, 447, 1), new ScheduledTask(447, 493, 1), new ScheduledTask(450, 460, 0)};
        int[] expectedProcessorEndTimes = new int[]{460, 493, 214, 84};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot48_CCR_1dot00_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.48_CCR_1.00_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 65700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 17, 0), new ScheduledTask(1700, 1711, 0), new ScheduledTask(2800, 2823, 0), new ScheduledTask(5100, 5157, 0), new ScheduledTask(10800, 10829, 0), new ScheduledTask(13700, 13757, 0), new ScheduledTask(19400, 19446, 0), new ScheduledTask(0, 23, 1), new ScheduledTask(24000, 24057, 0), new ScheduledTask(29700, 29740, 0), new ScheduledTask(33700, 33723, 0), new ScheduledTask(36000, 36011, 0), new ScheduledTask(37100, 37152, 0), new ScheduledTask(42300, 42352, 0), new ScheduledTask(47500, 47517, 0), new ScheduledTask(37500, 37517, 1), new ScheduledTask(49200, 49217, 0), new ScheduledTask(50900, 50957, 0), new ScheduledTask(56600, 56646, 0), new ScheduledTask(61200, 61234, 0), new ScheduledTask(64600, 64611, 0)};
        int[] expectedProcessorEndTimes = new int[]{64611, 37517};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot48_CCR_1dot00_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.48_CCR_1.00_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 48200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 17, 0), new ScheduledTask(1700, 1711, 0), new ScheduledTask(2800, 2823, 0), new ScheduledTask(5100, 5157, 0), new ScheduledTask(5400, 5429, 1), new ScheduledTask(15400, 15457, 0), new ScheduledTask(10800, 10846, 0), new ScheduledTask(0, 23, 2), new ScheduledTask(11200, 11257, 1), new ScheduledTask(11400, 11440, 2), new ScheduledTask(21100, 21123, 0), new ScheduledTask(23400, 23411, 0), new ScheduledTask(24500, 24552, 0), new ScheduledTask(29700, 29752, 0), new ScheduledTask(30300, 30317, 3), new ScheduledTask(24900, 24917, 3), new ScheduledTask(34900, 34917, 0), new ScheduledTask(36600, 36657, 0), new ScheduledTask(37300, 37346, 3), new ScheduledTask(42300, 42334, 0), new ScheduledTask(47100, 47111, 0)};
        int[] expectedProcessorEndTimes = new int[]{47111, 11257, 11440, 37346};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot48_CCR_1dot00_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.48_CCR_1.00_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 43700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 17, 0), new ScheduledTask(1700, 1711, 0), new ScheduledTask(2800, 2823, 0), new ScheduledTask(5100, 5157, 0), new ScheduledTask(5400, 5429, 1), new ScheduledTask(10800, 10857, 0), new ScheduledTask(11300, 11346, 1), new ScheduledTask(0, 23, 2), new ScheduledTask(9380, 9437, 2), new ScheduledTask(11400, 11440, 3), new ScheduledTask(17820, 17843, 0), new ScheduledTask(20300, 20311, 0), new ScheduledTask(21400, 21452, 0), new ScheduledTask(26600, 26652, 0), new ScheduledTask(27200, 27217, 1), new ScheduledTask(21800, 21817, 2), new ScheduledTask(31800, 31817, 0), new ScheduledTask(33500, 33557, 0), new ScheduledTask(34200, 34246, 1), new ScheduledTask(39200, 39234, 0), new ScheduledTask(42600, 42611, 0)};
        int[] expectedProcessorEndTimes = new int[]{42611, 34246, 21817, 11440};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot48_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.48_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 444;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 17, 0), new ScheduledTask(17, 28, 0), new ScheduledTask(28, 51, 0), new ScheduledTask(54, 111, 1), new ScheduledTask(51, 80, 0), new ScheduledTask(111, 168, 1), new ScheduledTask(137, 183, 0), new ScheduledTask(0, 23, 1), new ScheduledTask(80, 137, 0), new ScheduledTask(168, 208, 1), new ScheduledTask(183, 206, 0), new ScheduledTask(210, 221, 1), new ScheduledTask(221, 273, 1), new ScheduledTask(273, 325, 1), new ScheduledTask(279, 296, 0), new ScheduledTask(225, 242, 0), new ScheduledTask(325, 342, 1), new ScheduledTask(342, 399, 1), new ScheduledTask(349, 395, 0), new ScheduledTask(399, 433, 1), new ScheduledTask(433, 444, 1)};
        int[] expectedProcessorEndTimes = new int[]{395, 444};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot48_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.48_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 426;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 17, 0), new ScheduledTask(17, 28, 0), new ScheduledTask(28, 51, 0), new ScheduledTask(51, 108, 0), new ScheduledTask(54, 83, 1), new ScheduledTask(108, 165, 0), new ScheduledTask(113, 159, 1), new ScheduledTask(0, 23, 2), new ScheduledTask(88, 145, 2), new ScheduledTask(114, 154, 3), new ScheduledTask(169, 192, 0), new ScheduledTask(192, 203, 0), new ScheduledTask(203, 255, 0), new ScheduledTask(255, 307, 0), new ScheduledTask(261, 278, 1), new ScheduledTask(207, 224, 2), new ScheduledTask(307, 324, 0), new ScheduledTask(324, 381, 0), new ScheduledTask(331, 377, 1), new ScheduledTask(381, 415, 0), new ScheduledTask(415, 426, 0)};
        int[] expectedProcessorEndTimes = new int[]{426, 377, 224, 154};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot48_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.48_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 426;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 17, 0), new ScheduledTask(17, 28, 0), new ScheduledTask(28, 51, 0), new ScheduledTask(51, 108, 0), new ScheduledTask(54, 83, 1), new ScheduledTask(108, 165, 0), new ScheduledTask(113, 159, 1), new ScheduledTask(0, 23, 2), new ScheduledTask(88, 145, 2), new ScheduledTask(114, 154, 3), new ScheduledTask(169, 192, 0), new ScheduledTask(192, 203, 0), new ScheduledTask(203, 255, 0), new ScheduledTask(255, 307, 0), new ScheduledTask(261, 278, 1), new ScheduledTask(207, 224, 2), new ScheduledTask(307, 324, 0), new ScheduledTask(324, 381, 0), new ScheduledTask(331, 377, 1), new ScheduledTask(381, 415, 0), new ScheduledTask(415, 426, 0)};
        int[] expectedProcessorEndTimes = new int[]{426, 377, 224, 154};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot52_CCR_0dot10_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.52_CCR_0.10_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 739600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(27200, 27309, 0), new ScheduledTask(38100, 38535, 0), new ScheduledTask(0, 163, 1), new ScheduledTask(108800, 109181, 0), new ScheduledTask(81600, 81872, 0), new ScheduledTask(0, 272, 0), new ScheduledTask(146900, 147389, 0), new ScheduledTask(195800, 196181, 0), new ScheduledTask(282800, 282963, 0), new ScheduledTask(331700, 332026, 0), new ScheduledTask(233900, 234389, 0), new ScheduledTask(364300, 364572, 0), new ScheduledTask(299100, 299426, 0), new ScheduledTask(391500, 391772, 0), new ScheduledTask(516600, 517089, 0), new ScheduledTask(418700, 419135, 0), new ScheduledTask(565500, 566044, 0), new ScheduledTask(462200, 462744, 0), new ScheduledTask(663400, 663944, 0), new ScheduledTask(619900, 620335, 0), new ScheduledTask(717800, 718018, 0)};
        int[] expectedProcessorEndTimes = new int[]{718018, 163};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot52_CCR_0dot10_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.52_CCR_0.10_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 575600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 109, 1), new ScheduledTask(22700, 23135, 0), new ScheduledTask(0, 163, 0), new ScheduledTask(16800, 17181, 2), new ScheduledTask(66200, 66472, 0), new ScheduledTask(21800, 22072, 1), new ScheduledTask(93700, 94189, 0), new ScheduledTask(142600, 142981, 0), new ScheduledTask(180700, 180863, 0), new ScheduledTask(197000, 197326, 0), new ScheduledTask(181700, 182189, 3), new ScheduledTask(229600, 229872, 0), new ScheduledTask(280400, 280726, 0), new ScheduledTask(257700, 257972, 2), new ScheduledTask(312100, 312589, 2), new ScheduledTask(313000, 313435, 0), new ScheduledTask(410100, 410644, 0), new ScheduledTask(357000, 357544, 3), new ScheduledTask(466800, 467344, 0), new ScheduledTask(465800, 466235, 3), new ScheduledTask(553800, 554018, 0)};
        int[] expectedProcessorEndTimes = new int[]{554018, 22072, 312589, 466235};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot52_CCR_0dot10_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.52_CCR_0.10_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 467280;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 109, 0), new ScheduledTask(10900, 11335, 0), new ScheduledTask(0, 163, 1), new ScheduledTask(19560, 19941, 1), new ScheduledTask(54400, 54672, 0), new ScheduledTask(0, 272, 2), new ScheduledTask(81600, 82089, 0), new ScheduledTask(130500, 130881, 0), new ScheduledTask(168600, 168763, 0), new ScheduledTask(184900, 185226, 0), new ScheduledTask(169600, 170089, 1), new ScheduledTask(217500, 217772, 0), new ScheduledTask(228280, 228606, 1), new ScheduledTask(244700, 244972, 0), new ScheduledTask(271900, 272389, 0), new ScheduledTask(272600, 273035, 1), new ScheduledTask(325100, 325644, 0), new ScheduledTask(324800, 325344, 1), new ScheduledTask(391080, 391624, 0), new ScheduledTask(390080, 390515, 1), new ScheduledTask(445480, 445698, 0)};
        int[] expectedProcessorEndTimes = new int[]{445698, 390515, 272};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot52_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.52_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4518;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 109, 0), new ScheduledTask(109, 544, 0), new ScheduledTask(0, 163, 1), new ScheduledTask(163, 544, 1), new ScheduledTask(544, 816, 0), new ScheduledTask(544, 816, 1), new ScheduledTask(820, 1309, 0), new ScheduledTask(1309, 1690, 0), new ScheduledTask(1690, 1853, 0), new ScheduledTask(1853, 2179, 0), new ScheduledTask(1700, 2189, 1), new ScheduledTask(2179, 2451, 0), new ScheduledTask(2189, 2515, 1), new ScheduledTask(2451, 2723, 0), new ScheduledTask(2723, 3212, 0), new ScheduledTask(2730, 3165, 1), new ScheduledTask(3212, 3756, 0), new ScheduledTask(3165, 3709, 1), new ScheduledTask(3756, 4300, 0), new ScheduledTask(3766, 4201, 1), new ScheduledTask(4300, 4518, 0)};
        int[] expectedProcessorEndTimes = new int[]{4518, 4201};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot52_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.52_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 4514;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 109, 0), new ScheduledTask(109, 544, 0), new ScheduledTask(0, 163, 1), new ScheduledTask(163, 544, 1), new ScheduledTask(544, 816, 0), new ScheduledTask(0, 272, 2), new ScheduledTask(816, 1305, 0), new ScheduledTask(1305, 1686, 0), new ScheduledTask(1686, 1849, 0), new ScheduledTask(1849, 2175, 0), new ScheduledTask(1696, 2185, 1), new ScheduledTask(2175, 2447, 0), new ScheduledTask(2185, 2511, 1), new ScheduledTask(2447, 2719, 0), new ScheduledTask(2719, 3208, 0), new ScheduledTask(2726, 3161, 1), new ScheduledTask(3208, 3752, 0), new ScheduledTask(3161, 3705, 1), new ScheduledTask(3752, 4296, 0), new ScheduledTask(3762, 4197, 1), new ScheduledTask(4296, 4514, 0)};
        int[] expectedProcessorEndTimes = new int[]{4514, 4197, 272};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot52_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.52_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 4514;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 109, 0), new ScheduledTask(109, 544, 0), new ScheduledTask(0, 163, 1), new ScheduledTask(163, 544, 1), new ScheduledTask(544, 816, 0), new ScheduledTask(0, 272, 2), new ScheduledTask(816, 1305, 0), new ScheduledTask(1305, 1686, 0), new ScheduledTask(1686, 1849, 0), new ScheduledTask(1849, 2175, 0), new ScheduledTask(1696, 2185, 1), new ScheduledTask(2175, 2447, 0), new ScheduledTask(2185, 2511, 1), new ScheduledTask(2447, 2719, 0), new ScheduledTask(2719, 3208, 0), new ScheduledTask(2726, 3161, 1), new ScheduledTask(3208, 3752, 0), new ScheduledTask(3161, 3705, 1), new ScheduledTask(3752, 4296, 0), new ScheduledTask(3762, 4197, 1), new ScheduledTask(4296, 4514, 0)};
        int[] expectedProcessorEndTimes = new int[]{4514, 4197, 272};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot57_CCR_2dot02_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.57_CCR_2.02_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 12;
        int expectedScheduleEndTime = 224;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 15, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(16, 47, 0), new ScheduledTask(25, 37, 2), new ScheduledTask(14, 20, 3), new ScheduledTask(39, 51, 4), new ScheduledTask(47, 56, 0), new ScheduledTask(39, 60, 5), new ScheduledTask(56, 80, 4), new ScheduledTask(58, 79, 6), new ScheduledTask(65, 77, 7), new ScheduledTask(90, 108, 8), new ScheduledTask(84, 96, 4), new ScheduledTask(108, 132, 8), new ScheduledTask(115, 121, 9), new ScheduledTask(104, 113, 10), new ScheduledTask(132, 160, 8), new ScheduledTask(160, 175, 8), new ScheduledTask(175, 196, 8), new ScheduledTask(123, 144, 11), new ScheduledTask(196, 224, 8)};
        int[] expectedProcessorEndTimes = new int[]{56, 9, 37, 20, 96, 60, 79, 77, 224, 121, 113, 144};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot57_CCR_2dot02_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.57_CCR_2.02_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 228;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 15, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(20, 51, 1), new ScheduledTask(15, 27, 0), new ScheduledTask(9, 15, 1), new ScheduledTask(27, 39, 0), new ScheduledTask(51, 60, 1), new ScheduledTask(39, 60, 0), new ScheduledTask(60, 84, 0), new ScheduledTask(60, 81, 1), new ScheduledTask(81, 93, 1), new ScheduledTask(94, 112, 1), new ScheduledTask(86, 98, 0), new ScheduledTask(112, 136, 1), new ScheduledTask(119, 125, 0), new ScheduledTask(98, 107, 0), new ScheduledTask(136, 164, 1), new ScheduledTask(164, 179, 1), new ScheduledTask(179, 200, 1), new ScheduledTask(125, 146, 0), new ScheduledTask(200, 228, 1)};
        int[] expectedProcessorEndTimes = new int[]{146, 228};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot57_CCR_2dot02_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.57_CCR_2.02_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 224;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 15, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(16, 47, 0), new ScheduledTask(25, 37, 2), new ScheduledTask(14, 20, 3), new ScheduledTask(39, 51, 1), new ScheduledTask(47, 56, 0), new ScheduledTask(39, 60, 3), new ScheduledTask(56, 80, 1), new ScheduledTask(60, 81, 3), new ScheduledTask(65, 77, 2), new ScheduledTask(90, 108, 3), new ScheduledTask(86, 98, 1), new ScheduledTask(108, 132, 3), new ScheduledTask(115, 121, 2), new ScheduledTask(106, 115, 2), new ScheduledTask(132, 160, 3), new ScheduledTask(160, 175, 3), new ScheduledTask(175, 196, 3), new ScheduledTask(121, 142, 2), new ScheduledTask(196, 224, 3)};
        int[] expectedProcessorEndTimes = new int[]{56, 98, 142, 224};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot57_CCR_2dot02_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.57_CCR_2.02_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 224;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 15, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(16, 47, 0), new ScheduledTask(25, 37, 2), new ScheduledTask(14, 20, 3), new ScheduledTask(39, 51, 4), new ScheduledTask(47, 56, 0), new ScheduledTask(39, 60, 5), new ScheduledTask(56, 80, 4), new ScheduledTask(58, 79, 6), new ScheduledTask(65, 77, 7), new ScheduledTask(90, 108, 7), new ScheduledTask(84, 96, 4), new ScheduledTask(108, 132, 7), new ScheduledTask(115, 121, 6), new ScheduledTask(104, 113, 6), new ScheduledTask(132, 160, 7), new ScheduledTask(160, 175, 7), new ScheduledTask(175, 196, 7), new ScheduledTask(121, 142, 6), new ScheduledTask(196, 224, 7)};
        int[] expectedProcessorEndTimes = new int[]{56, 9, 37, 20, 96, 60, 142, 224};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot57_CCR_9dot98_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.57_CCR_9.98_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 11700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(400, 405, 0), new ScheduledTask(900, 905, 0), new ScheduledTask(1400, 1403, 0), new ScheduledTask(1700, 1710, 0), new ScheduledTask(2700, 2702, 0), new ScheduledTask(2900, 2908, 0), new ScheduledTask(3700, 3705, 0), new ScheduledTask(4200, 4209, 0), new ScheduledTask(5100, 5106, 0), new ScheduledTask(5700, 5703, 0), new ScheduledTask(6000, 6008, 0), new ScheduledTask(6800, 6806, 0), new ScheduledTask(7400, 7407, 0), new ScheduledTask(8100, 8104, 0), new ScheduledTask(8500, 8505, 0), new ScheduledTask(9000, 9005, 0), new ScheduledTask(9500, 9508, 0), new ScheduledTask(10300, 10305, 0), new ScheduledTask(10800, 10805, 0), new ScheduledTask(11300, 11304, 0)};
        int[] expectedProcessorEndTimes = new int[]{11304};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot57_CCR_9dot98_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.57_CCR_9.98_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 10200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(900, 905, 0), new ScheduledTask(400, 405, 0), new ScheduledTask(2200, 2203, 0), new ScheduledTask(2500, 2510, 0), new ScheduledTask(3500, 3502, 0), new ScheduledTask(1400, 1408, 0), new ScheduledTask(3700, 3705, 0), new ScheduledTask(4200, 4209, 0), new ScheduledTask(5100, 5106, 0), new ScheduledTask(4600, 4603, 1), new ScheduledTask(6300, 6308, 0), new ScheduledTask(5700, 5706, 0), new ScheduledTask(6000, 6007, 1), new ScheduledTask(7100, 7104, 0), new ScheduledTask(8000, 8005, 0), new ScheduledTask(7500, 7505, 0), new ScheduledTask(9000, 9008, 0), new ScheduledTask(8500, 8505, 0), new ScheduledTask(9000, 9005, 2), new ScheduledTask(9800, 9804, 0)};
        int[] expectedProcessorEndTimes = new int[]{9804, 6007, 9005};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot57_CCR_9dot98_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.57_CCR_9.98_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 9840;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(900, 905, 0), new ScheduledTask(400, 405, 0), new ScheduledTask(2200, 2203, 0), new ScheduledTask(2500, 2510, 0), new ScheduledTask(3500, 3502, 0), new ScheduledTask(1400, 1408, 0), new ScheduledTask(3700, 3705, 0), new ScheduledTask(4200, 4209, 0), new ScheduledTask(5100, 5106, 0), new ScheduledTask(4600, 4603, 1), new ScheduledTask(5700, 5708, 0), new ScheduledTask(5300, 5306, 2), new ScheduledTask(6000, 6007, 1), new ScheduledTask(6500, 6504, 0), new ScheduledTask(7140, 7145, 0), new ScheduledTask(7640, 7645, 0), new ScheduledTask(8640, 8648, 0), new ScheduledTask(8140, 8145, 0), new ScheduledTask(8940, 8945, 2), new ScheduledTask(9440, 9444, 0)};
        int[] expectedProcessorEndTimes = new int[]{9444, 6007, 8945};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot57_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.57_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 96;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(9, 14, 0), new ScheduledTask(4, 9, 0), new ScheduledTask(14, 17, 0), new ScheduledTask(17, 27, 0), new ScheduledTask(32, 34, 1), new ScheduledTask(22, 30, 1), new ScheduledTask(34, 39, 1), new ScheduledTask(42, 51, 1), new ScheduledTask(51, 57, 1), new ScheduledTask(39, 42, 1), new ScheduledTask(57, 65, 1), new ScheduledTask(50, 56, 0), new ScheduledTask(60, 67, 0), new ScheduledTask(65, 69, 1), new ScheduledTask(74, 79, 1), new ScheduledTask(69, 74, 1), new ScheduledTask(84, 92, 1), new ScheduledTask(79, 84, 1), new ScheduledTask(84, 89, 0), new ScheduledTask(92, 96, 1)};
        int[] expectedProcessorEndTimes = new int[]{89, 96};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot57_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.57_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 96;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(9, 14, 0), new ScheduledTask(4, 9, 0), new ScheduledTask(14, 17, 0), new ScheduledTask(17, 27, 0), new ScheduledTask(32, 34, 1), new ScheduledTask(22, 30, 1), new ScheduledTask(34, 39, 1), new ScheduledTask(41, 50, 1), new ScheduledTask(50, 56, 1), new ScheduledTask(44, 47, 0), new ScheduledTask(56, 64, 1), new ScheduledTask(50, 56, 2), new ScheduledTask(59, 66, 3), new ScheduledTask(64, 68, 1), new ScheduledTask(74, 79, 1), new ScheduledTask(69, 74, 1), new ScheduledTask(84, 92, 1), new ScheduledTask(79, 84, 1), new ScheduledTask(84, 89, 3), new ScheduledTask(92, 96, 1)};
        int[] expectedProcessorEndTimes = new int[]{47, 96, 56, 89};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot57_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.57_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 96;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(9, 14, 0), new ScheduledTask(4, 9, 0), new ScheduledTask(14, 17, 0), new ScheduledTask(17, 27, 0), new ScheduledTask(32, 34, 1), new ScheduledTask(22, 30, 1), new ScheduledTask(34, 39, 1), new ScheduledTask(41, 50, 1), new ScheduledTask(50, 56, 1), new ScheduledTask(44, 47, 0), new ScheduledTask(56, 64, 1), new ScheduledTask(50, 56, 0), new ScheduledTask(59, 66, 0), new ScheduledTask(64, 68, 1), new ScheduledTask(74, 79, 1), new ScheduledTask(69, 74, 1), new ScheduledTask(84, 92, 1), new ScheduledTask(79, 84, 1), new ScheduledTask(84, 89, 2), new ScheduledTask(92, 96, 1)};
        int[] expectedProcessorEndTimes = new int[]{66, 96, 89};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot62_CCR_10dot05_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.62_CCR_10.05_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 9900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(600, 606, 0), new ScheduledTask(1200, 1203, 0), new ScheduledTask(1500, 1504, 0), new ScheduledTask(1900, 1908, 0), new ScheduledTask(2700, 2703, 0), new ScheduledTask(3000, 3004, 0), new ScheduledTask(3400, 3406, 0), new ScheduledTask(4000, 4005, 0), new ScheduledTask(4500, 4506, 0), new ScheduledTask(5100, 5107, 0), new ScheduledTask(5800, 5802, 0), new ScheduledTask(6000, 6006, 0), new ScheduledTask(6600, 6604, 0), new ScheduledTask(7000, 7006, 0), new ScheduledTask(7600, 7602, 0), new ScheduledTask(7800, 7804, 0), new ScheduledTask(8200, 8202, 0), new ScheduledTask(8400, 8406, 0), new ScheduledTask(9000, 9005, 0), new ScheduledTask(9500, 9504, 0)};
        int[] expectedProcessorEndTimes = new int[]{9504};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot62_CCR_10dot05_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.62_CCR_10.05_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 9600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(600, 606, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(1200, 1204, 0), new ScheduledTask(1900, 1908, 0), new ScheduledTask(1600, 1603, 0), new ScheduledTask(2700, 2704, 0), new ScheduledTask(3600, 3606, 0), new ScheduledTask(3100, 3105, 0), new ScheduledTask(4900, 4906, 0), new ScheduledTask(4200, 4207, 0), new ScheduledTask(5500, 5502, 0), new ScheduledTask(5700, 5706, 0), new ScheduledTask(6300, 6304, 0), new ScheduledTask(6900, 6906, 0), new ScheduledTask(6700, 6702, 0), new ScheduledTask(7700, 7704, 0), new ScheduledTask(7500, 7502, 0), new ScheduledTask(7500, 7506, 2), new ScheduledTask(9100, 9105, 0), new ScheduledTask(8100, 8104, 0)};
        int[] expectedProcessorEndTimes = new int[]{9105, 3, 7506};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot62_CCR_10dot05_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.62_CCR_10.05_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8880;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(600, 606, 0), new ScheduledTask(0, 3, 3), new ScheduledTask(1200, 1204, 0), new ScheduledTask(1900, 1908, 0), new ScheduledTask(1600, 1603, 0), new ScheduledTask(2700, 2704, 0), new ScheduledTask(3100, 3106, 0), new ScheduledTask(3700, 3705, 0), new ScheduledTask(4100, 4106, 1), new ScheduledTask(4200, 4207, 0), new ScheduledTask(4820, 4822, 1), new ScheduledTask(5060, 5066, 1), new ScheduledTask(6000, 6004, 1), new ScheduledTask(6480, 6486, 1), new ScheduledTask(7200, 7202, 1), new ScheduledTask(8000, 8004, 0), new ScheduledTask(7440, 7442, 1), new ScheduledTask(7280, 7286, 0), new ScheduledTask(8280, 8285, 1), new ScheduledTask(8400, 8404, 0)};
        int[] expectedProcessorEndTimes = new int[]{8404, 8285, 0, 3};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot62_CCR_10dot05_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.62_CCR_10.05_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 86;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 12, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(12, 16, 0), new ScheduledTask(19, 27, 0), new ScheduledTask(16, 19, 0), new ScheduledTask(27, 31, 0), new ScheduledTask(36, 42, 0), new ScheduledTask(31, 36, 0), new ScheduledTask(46, 52, 1), new ScheduledTask(42, 49, 0), new ScheduledTask(52, 54, 1), new ScheduledTask(54, 60, 1), new ScheduledTask(60, 64, 1), new ScheduledTask(64, 70, 1), new ScheduledTask(76, 78, 1), new ScheduledTask(78, 82, 0), new ScheduledTask(78, 80, 1), new ScheduledTask(70, 76, 1), new ScheduledTask(80, 85, 1), new ScheduledTask(82, 86, 0)};
        int[] expectedProcessorEndTimes = new int[]{86, 85};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot62_CCR_10dot05_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.62_CCR_10.05_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 86;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 12, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(12, 16, 0), new ScheduledTask(19, 27, 0), new ScheduledTask(16, 19, 0), new ScheduledTask(27, 31, 0), new ScheduledTask(36, 42, 0), new ScheduledTask(31, 36, 0), new ScheduledTask(46, 52, 2), new ScheduledTask(42, 49, 0), new ScheduledTask(52, 54, 2), new ScheduledTask(54, 60, 2), new ScheduledTask(60, 64, 2), new ScheduledTask(64, 70, 2), new ScheduledTask(76, 78, 2), new ScheduledTask(78, 82, 3), new ScheduledTask(78, 80, 2), new ScheduledTask(70, 76, 2), new ScheduledTask(80, 85, 2), new ScheduledTask(82, 86, 3)};
        int[] expectedProcessorEndTimes = new int[]{49, 3, 85, 86};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot62_CCR_10dot05_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.62_CCR_10.05_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 86;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 12, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(12, 16, 0), new ScheduledTask(19, 27, 0), new ScheduledTask(16, 19, 0), new ScheduledTask(27, 31, 0), new ScheduledTask(36, 42, 0), new ScheduledTask(31, 36, 0), new ScheduledTask(46, 52, 1), new ScheduledTask(42, 49, 0), new ScheduledTask(52, 54, 1), new ScheduledTask(54, 60, 1), new ScheduledTask(60, 64, 1), new ScheduledTask(64, 70, 1), new ScheduledTask(76, 78, 1), new ScheduledTask(78, 82, 2), new ScheduledTask(78, 80, 1), new ScheduledTask(70, 76, 1), new ScheduledTask(80, 85, 1), new ScheduledTask(82, 86, 2)};
        int[] expectedProcessorEndTimes = new int[]{49, 85, 86};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot76_CCR_9dot80_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.76_CCR_9.80_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 11200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(200, 205, 0), new ScheduledTask(700, 705, 0), new ScheduledTask(1200, 1203, 0), new ScheduledTask(1500, 1502, 0), new ScheduledTask(1700, 1710, 0), new ScheduledTask(2700, 2706, 0), new ScheduledTask(3300, 3304, 0), new ScheduledTask(3700, 3704, 0), new ScheduledTask(4100, 4105, 0), new ScheduledTask(4600, 4607, 0), new ScheduledTask(5300, 5309, 0), new ScheduledTask(6200, 6205, 0), new ScheduledTask(6700, 6705, 0), new ScheduledTask(7200, 7210, 0), new ScheduledTask(8200, 8207, 0), new ScheduledTask(8900, 8904, 0), new ScheduledTask(9300, 9303, 0), new ScheduledTask(9600, 9605, 0), new ScheduledTask(10100, 10103, 0), new ScheduledTask(10400, 10408, 0)};
        int[] expectedProcessorEndTimes = new int[]{10408};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot76_CCR_9dot80_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.76_CCR_9.80_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 10100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(500, 502, 0), new ScheduledTask(900, 905, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(1400, 1403, 0), new ScheduledTask(700, 702, 0), new ScheduledTask(2300, 2310, 0), new ScheduledTask(1700, 1706, 0), new ScheduledTask(3300, 3304, 0), new ScheduledTask(3700, 3704, 0), new ScheduledTask(4800, 4805, 0), new ScheduledTask(4100, 4107, 0), new ScheduledTask(2400, 2409, 1), new ScheduledTask(5300, 5305, 0), new ScheduledTask(6500, 6505, 0), new ScheduledTask(7000, 7010, 0), new ScheduledTask(5800, 5807, 0), new ScheduledTask(7000, 7004, 2), new ScheduledTask(8700, 8703, 0), new ScheduledTask(8200, 8205, 0), new ScheduledTask(9000, 9003, 0), new ScheduledTask(9300, 9308, 0)};
        int[] expectedProcessorEndTimes = new int[]{9308, 2409, 7004};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot76_CCR_9dot80_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.76_CCR_9.80_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9740;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 1), new ScheduledTask(840, 845, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(1340, 1343, 0), new ScheduledTask(1100, 1102, 1), new ScheduledTask(2240, 2250, 0), new ScheduledTask(1640, 1646, 0), new ScheduledTask(3240, 3244, 0), new ScheduledTask(3640, 3644, 0), new ScheduledTask(4040, 4045, 0), new ScheduledTask(5040, 5047, 0), new ScheduledTask(2640, 2649, 3), new ScheduledTask(5740, 5745, 0), new ScheduledTask(4540, 4545, 0), new ScheduledTask(5740, 5750, 1), new ScheduledTask(6640, 6647, 0), new ScheduledTask(6240, 6244, 0), new ScheduledTask(7340, 7343, 1), new ScheduledTask(8140, 8145, 0), new ScheduledTask(8640, 8643, 0), new ScheduledTask(8940, 8948, 0)};
        int[] expectedProcessorEndTimes = new int[]{8948, 7343, 0, 2649};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot76_CCR_9dot80_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.76_CCR_9.80_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 94;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(8, 13, 1), new ScheduledTask(0, 5, 1), new ScheduledTask(13, 16, 1), new ScheduledTask(11, 13, 0), new ScheduledTask(22, 32, 1), new ScheduledTask(16, 22, 1), new ScheduledTask(32, 36, 1), new ScheduledTask(36, 40, 1), new ScheduledTask(40, 45, 1), new ScheduledTask(52, 59, 0), new ScheduledTask(23, 32, 0), new ScheduledTask(59, 64, 0), new ScheduledTask(45, 50, 1), new ScheduledTask(50, 60, 1), new ScheduledTask(68, 75, 0), new ScheduledTask(64, 68, 0), new ScheduledTask(75, 78, 1), new ScheduledTask(75, 80, 0), new ScheduledTask(83, 86, 1), new ScheduledTask(86, 94, 1)};
        int[] expectedProcessorEndTimes = new int[]{80, 94};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot76_CCR_9dot80_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.76_CCR_9.80_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 94;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 7, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(13, 16, 0), new ScheduledTask(11, 13, 0), new ScheduledTask(22, 32, 0), new ScheduledTask(16, 22, 0), new ScheduledTask(32, 36, 0), new ScheduledTask(36, 40, 0), new ScheduledTask(40, 45, 0), new ScheduledTask(52, 59, 2), new ScheduledTask(26, 35, 3), new ScheduledTask(59, 64, 2), new ScheduledTask(45, 50, 0), new ScheduledTask(50, 60, 0), new ScheduledTask(68, 75, 2), new ScheduledTask(64, 68, 2), new ScheduledTask(75, 78, 3), new ScheduledTask(75, 80, 2), new ScheduledTask(83, 86, 3), new ScheduledTask(86, 94, 3)};
        int[] expectedProcessorEndTimes = new int[]{60, 5, 80, 94};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_21_Density_5dot76_CCR_9dot80_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Random_Nodes_21_Density_5.76_CCR_9.80_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 94;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 7, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(13, 16, 0), new ScheduledTask(11, 13, 0), new ScheduledTask(22, 32, 0), new ScheduledTask(16, 22, 0), new ScheduledTask(32, 36, 0), new ScheduledTask(36, 40, 0), new ScheduledTask(40, 45, 0), new ScheduledTask(52, 59, 2), new ScheduledTask(26, 35, 3), new ScheduledTask(59, 64, 2), new ScheduledTask(45, 50, 0), new ScheduledTask(50, 60, 0), new ScheduledTask(68, 75, 2), new ScheduledTask(64, 68, 2), new ScheduledTask(75, 78, 4), new ScheduledTask(75, 80, 2), new ScheduledTask(83, 86, 4), new ScheduledTask(86, 94, 4)};
        int[] expectedProcessorEndTimes = new int[]{60, 5, 80, 35, 94};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-2_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 63, 0), new ScheduledTask(63, 126, 0), new ScheduledTask(126, 151, 0), new ScheduledTask(151, 278, 0), new ScheduledTask(278, 405, 0), new ScheduledTask(161, 262, 1), new ScheduledTask(405, 468, 0), new ScheduledTask(262, 389, 1), new ScheduledTask(283, 359, 2), new ScheduledTask(412, 437, 1), new ScheduledTask(468, 595, 0), new ScheduledTask(359, 448, 2), new ScheduledTask(394, 508, 3), new ScheduledTask(595, 684, 0), new ScheduledTask(267, 305, 4), new ScheduledTask(508, 597, 3), new ScheduledTask(684, 735, 0), new ScheduledTask(735, 773, 0), new ScheduledTask(773, 862, 0), new ScheduledTask(783, 834, 1), new ScheduledTask(862, 900, 0)};
        int[] expectedProcessorEndTimes = new int[]{900, 834, 448, 597, 305};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-2_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 943;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 63, 0), new ScheduledTask(63, 126, 0), new ScheduledTask(126, 151, 0), new ScheduledTask(156, 283, 1), new ScheduledTask(321, 448, 1), new ScheduledTask(151, 252, 0), new ScheduledTask(448, 511, 1), new ScheduledTask(252, 379, 0), new ScheduledTask(379, 455, 0), new ScheduledTask(455, 480, 0), new ScheduledTask(511, 638, 1), new ScheduledTask(480, 569, 0), new ScheduledTask(569, 683, 0), new ScheduledTask(638, 727, 1), new ScheduledTask(283, 321, 1), new ScheduledTask(683, 772, 0), new ScheduledTask(727, 778, 1), new ScheduledTask(778, 816, 1), new ScheduledTask(816, 905, 1), new ScheduledTask(826, 877, 0), new ScheduledTask(905, 943, 1)};
        int[] expectedProcessorEndTimes = new int[]{877, 943};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-2_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 63, 0), new ScheduledTask(63, 126, 0), new ScheduledTask(126, 151, 0), new ScheduledTask(151, 278, 0), new ScheduledTask(278, 405, 0), new ScheduledTask(161, 262, 1), new ScheduledTask(405, 468, 0), new ScheduledTask(262, 389, 1), new ScheduledTask(283, 359, 2), new ScheduledTask(412, 437, 1), new ScheduledTask(468, 595, 0), new ScheduledTask(359, 448, 2), new ScheduledTask(394, 508, 3), new ScheduledTask(595, 684, 0), new ScheduledTask(437, 475, 1), new ScheduledTask(508, 597, 3), new ScheduledTask(684, 735, 0), new ScheduledTask(735, 773, 0), new ScheduledTask(773, 862, 0), new ScheduledTask(783, 834, 1), new ScheduledTask(862, 900, 0)};
        int[] expectedProcessorEndTimes = new int[]{900, 834, 448, 597};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-2_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 63, 0), new ScheduledTask(63, 126, 0), new ScheduledTask(126, 151, 0), new ScheduledTask(151, 278, 0), new ScheduledTask(278, 405, 0), new ScheduledTask(161, 262, 1), new ScheduledTask(405, 468, 0), new ScheduledTask(262, 389, 1), new ScheduledTask(283, 359, 2), new ScheduledTask(412, 437, 1), new ScheduledTask(468, 595, 0), new ScheduledTask(359, 448, 2), new ScheduledTask(394, 508, 3), new ScheduledTask(595, 684, 0), new ScheduledTask(267, 305, 4), new ScheduledTask(508, 597, 3), new ScheduledTask(684, 735, 0), new ScheduledTask(735, 773, 0), new ScheduledTask(773, 862, 0), new ScheduledTask(783, 834, 1), new ScheduledTask(862, 900, 0)};
        int[] expectedProcessorEndTimes = new int[]{900, 834, 448, 597, 305};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_21_CCR_0dot99_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-2_Nodes_21_CCR_0.99_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 101;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 10, 0), new ScheduledTask(12, 22, 1), new ScheduledTask(10, 23, 0), new ScheduledTask(15, 21, 2), new ScheduledTask(22, 30, 1), new ScheduledTask(23, 36, 3), new ScheduledTask(23, 37, 0), new ScheduledTask(37, 47, 0), new ScheduledTask(39, 46, 4), new ScheduledTask(42, 46, 3), new ScheduledTask(49, 63, 3), new ScheduledTask(51, 65, 0), new ScheduledTask(46, 49, 3), new ScheduledTask(63, 67, 3), new ScheduledTask(69, 72, 0), new ScheduledTask(72, 75, 0), new ScheduledTask(77, 83, 5), new ScheduledTask(75, 81, 0), new ScheduledTask(83, 87, 5), new ScheduledTask(87, 101, 5)};
        int[] expectedProcessorEndTimes = new int[]{81, 30, 21, 67, 46, 101};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_21_CCR_0dot99_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-2_Nodes_21_CCR_0.99_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 106;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(12, 15, 1), new ScheduledTask(7, 17, 0), new ScheduledTask(15, 28, 1), new ScheduledTask(25, 31, 0), new ScheduledTask(17, 25, 0), new ScheduledTask(31, 44, 0), new ScheduledTask(28, 42, 1), new ScheduledTask(49, 59, 1), new ScheduledTask(42, 49, 1), new ScheduledTask(47, 51, 0), new ScheduledTask(54, 68, 0), new ScheduledTask(59, 73, 1), new ScheduledTask(51, 54, 0), new ScheduledTask(68, 72, 0), new ScheduledTask(74, 77, 1), new ScheduledTask(77, 80, 1), new ScheduledTask(82, 88, 0), new ScheduledTask(80, 86, 1), new ScheduledTask(88, 92, 0), new ScheduledTask(92, 106, 0)};
        int[] expectedProcessorEndTimes = new int[]{106, 86};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_21_CCR_0dot99_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-2_Nodes_21_CCR_0.99_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 101;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 10, 0), new ScheduledTask(12, 22, 1), new ScheduledTask(10, 23, 0), new ScheduledTask(15, 21, 2), new ScheduledTask(22, 30, 1), new ScheduledTask(23, 36, 3), new ScheduledTask(23, 37, 0), new ScheduledTask(30, 40, 1), new ScheduledTask(40, 47, 1), new ScheduledTask(42, 46, 3), new ScheduledTask(49, 63, 3), new ScheduledTask(52, 66, 2), new ScheduledTask(46, 49, 3), new ScheduledTask(63, 67, 3), new ScheduledTask(69, 72, 2), new ScheduledTask(72, 75, 2), new ScheduledTask(77, 83, 3), new ScheduledTask(75, 81, 2), new ScheduledTask(83, 87, 3), new ScheduledTask(87, 101, 3)};
        int[] expectedProcessorEndTimes = new int[]{37, 47, 81, 101};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_21_CCR_0dot99_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-2_Nodes_21_CCR_0.99_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 7;
        int expectedScheduleEndTime = 101;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 10, 0), new ScheduledTask(12, 22, 1), new ScheduledTask(10, 23, 0), new ScheduledTask(15, 21, 2), new ScheduledTask(22, 30, 1), new ScheduledTask(23, 36, 3), new ScheduledTask(23, 37, 0), new ScheduledTask(37, 47, 4), new ScheduledTask(39, 46, 5), new ScheduledTask(42, 46, 3), new ScheduledTask(49, 63, 3), new ScheduledTask(51, 65, 4), new ScheduledTask(46, 49, 3), new ScheduledTask(63, 67, 3), new ScheduledTask(69, 72, 4), new ScheduledTask(72, 75, 4), new ScheduledTask(77, 83, 6), new ScheduledTask(75, 81, 4), new ScheduledTask(83, 87, 6), new ScheduledTask(87, 101, 6)};
        int[] expectedProcessorEndTimes = new int[]{37, 30, 21, 67, 81, 46, 101};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_21_CCR_1dot99_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-2_Nodes_21_CCR_1.99_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 5, 0), new ScheduledTask(5, 10, 0), new ScheduledTask(10, 13, 0), new ScheduledTask(13, 22, 0), new ScheduledTask(22, 24, 0), new ScheduledTask(11, 20, 1), new ScheduledTask(24, 33, 0), new ScheduledTask(33, 40, 0), new ScheduledTask(20, 27, 1), new ScheduledTask(26, 34, 2), new ScheduledTask(27, 37, 1), new ScheduledTask(33, 43, 3), new ScheduledTask(40, 42, 0), new ScheduledTask(42, 50, 0), new ScheduledTask(46, 56, 3), new ScheduledTask(50, 58, 0), new ScheduledTask(34, 36, 2), new ScheduledTask(56, 58, 3), new ScheduledTask(62, 68, 0), new ScheduledTask(68, 78, 0)};
        int[] expectedProcessorEndTimes = new int[]{78, 37, 36, 58};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_21_CCR_1dot99_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-2_Nodes_21_CCR_1.99_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 5, 0), new ScheduledTask(5, 10, 0), new ScheduledTask(36, 39, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(39, 41, 0), new ScheduledTask(11, 20, 1), new ScheduledTask(19, 28, 0), new ScheduledTask(41, 48, 0), new ScheduledTask(20, 27, 1), new ScheduledTask(28, 36, 0), new ScheduledTask(37, 47, 1), new ScheduledTask(27, 37, 1), new ScheduledTask(48, 50, 0), new ScheduledTask(50, 58, 0), new ScheduledTask(47, 57, 1), new ScheduledTask(58, 66, 0), new ScheduledTask(57, 59, 1), new ScheduledTask(59, 61, 1), new ScheduledTask(66, 72, 0), new ScheduledTask(72, 82, 0)};
        int[] expectedProcessorEndTimes = new int[]{82, 61};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_21_CCR_1dot99_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-2_Nodes_21_CCR_1.99_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 5, 0), new ScheduledTask(5, 10, 0), new ScheduledTask(10, 13, 0), new ScheduledTask(13, 22, 0), new ScheduledTask(22, 24, 0), new ScheduledTask(11, 20, 1), new ScheduledTask(24, 33, 0), new ScheduledTask(33, 40, 0), new ScheduledTask(20, 27, 1), new ScheduledTask(26, 34, 2), new ScheduledTask(27, 37, 1), new ScheduledTask(33, 43, 3), new ScheduledTask(40, 42, 0), new ScheduledTask(42, 50, 0), new ScheduledTask(46, 56, 3), new ScheduledTask(50, 58, 0), new ScheduledTask(34, 36, 2), new ScheduledTask(56, 58, 3), new ScheduledTask(62, 68, 0), new ScheduledTask(68, 78, 0)};
        int[] expectedProcessorEndTimes = new int[]{78, 37, 36, 58};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_21_CCR_1dot99_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-2_Nodes_21_CCR_1.99_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 5, 0), new ScheduledTask(5, 10, 0), new ScheduledTask(10, 13, 0), new ScheduledTask(13, 22, 0), new ScheduledTask(22, 24, 0), new ScheduledTask(11, 20, 1), new ScheduledTask(24, 33, 0), new ScheduledTask(33, 40, 0), new ScheduledTask(20, 27, 1), new ScheduledTask(26, 34, 2), new ScheduledTask(27, 37, 1), new ScheduledTask(33, 43, 3), new ScheduledTask(40, 42, 0), new ScheduledTask(42, 50, 0), new ScheduledTask(46, 56, 3), new ScheduledTask(50, 58, 0), new ScheduledTask(34, 36, 2), new ScheduledTask(56, 58, 3), new ScheduledTask(62, 68, 0), new ScheduledTask(68, 78, 0)};
        int[] expectedProcessorEndTimes = new int[]{78, 37, 36, 58};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_21_CCR_9dot97_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-2_Nodes_21_CCR_9.97_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 125;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(23, 28, 0), new ScheduledTask(34, 40, 0), new ScheduledTask(42, 50, 0), new ScheduledTask(28, 31, 0), new ScheduledTask(40, 42, 0), new ScheduledTask(50, 54, 0), new ScheduledTask(31, 34, 0), new ScheduledTask(4, 14, 0), new ScheduledTask(54, 57, 0), new ScheduledTask(14, 23, 0), new ScheduledTask(64, 67, 0), new ScheduledTask(41, 50, 1), new ScheduledTask(50, 52, 1), new ScheduledTask(57, 64, 0), new ScheduledTask(79, 89, 0), new ScheduledTask(67, 77, 0), new ScheduledTask(89, 99, 0), new ScheduledTask(99, 108, 0), new ScheduledTask(108, 115, 0), new ScheduledTask(115, 125, 0)};
        int[] expectedProcessorEndTimes = new int[]{125, 52};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_21_CCR_9dot97_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-2_Nodes_21_CCR_9.97_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 125;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(23, 28, 0), new ScheduledTask(34, 40, 0), new ScheduledTask(42, 50, 0), new ScheduledTask(28, 31, 0), new ScheduledTask(40, 42, 0), new ScheduledTask(50, 54, 0), new ScheduledTask(31, 34, 0), new ScheduledTask(4, 14, 0), new ScheduledTask(54, 57, 0), new ScheduledTask(14, 23, 0), new ScheduledTask(64, 67, 0), new ScheduledTask(41, 50, 1), new ScheduledTask(50, 52, 1), new ScheduledTask(57, 64, 0), new ScheduledTask(79, 89, 0), new ScheduledTask(67, 77, 0), new ScheduledTask(89, 99, 0), new ScheduledTask(99, 108, 0), new ScheduledTask(108, 115, 0), new ScheduledTask(115, 125, 0)};
        int[] expectedProcessorEndTimes = new int[]{125, 52};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_21_CCR_9dot97_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-2_Nodes_21_CCR_9.97_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 125;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(23, 28, 0), new ScheduledTask(34, 40, 0), new ScheduledTask(42, 50, 0), new ScheduledTask(28, 31, 0), new ScheduledTask(40, 42, 0), new ScheduledTask(50, 54, 0), new ScheduledTask(31, 34, 0), new ScheduledTask(4, 14, 0), new ScheduledTask(54, 57, 0), new ScheduledTask(14, 23, 0), new ScheduledTask(64, 67, 0), new ScheduledTask(41, 50, 1), new ScheduledTask(50, 52, 1), new ScheduledTask(57, 64, 0), new ScheduledTask(79, 89, 0), new ScheduledTask(67, 77, 0), new ScheduledTask(89, 99, 0), new ScheduledTask(99, 108, 0), new ScheduledTask(108, 115, 0), new ScheduledTask(115, 125, 0)};
        int[] expectedProcessorEndTimes = new int[]{125, 52};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_21_CCR_9dot97_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-2_Nodes_21_CCR_9.97_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 125;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(23, 28, 0), new ScheduledTask(34, 40, 0), new ScheduledTask(42, 50, 0), new ScheduledTask(28, 31, 0), new ScheduledTask(40, 42, 0), new ScheduledTask(50, 54, 0), new ScheduledTask(31, 34, 0), new ScheduledTask(4, 14, 0), new ScheduledTask(54, 57, 0), new ScheduledTask(14, 23, 0), new ScheduledTask(64, 67, 0), new ScheduledTask(41, 50, 1), new ScheduledTask(50, 52, 1), new ScheduledTask(57, 64, 0), new ScheduledTask(79, 89, 0), new ScheduledTask(67, 77, 0), new ScheduledTask(89, 99, 0), new ScheduledTask(99, 108, 0), new ScheduledTask(108, 115, 0), new ScheduledTask(115, 125, 0)};
        int[] expectedProcessorEndTimes = new int[]{125, 52};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 125700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 124, 0), new ScheduledTask(12400, 12511, 0), new ScheduledTask(23500, 23541, 0), new ScheduledTask(27600, 27738, 0), new ScheduledTask(41400, 41441, 0), new ScheduledTask(52400, 52455, 0), new ScheduledTask(70300, 70328, 0), new ScheduledTask(57900, 57983, 0), new ScheduledTask(73100, 73211, 0), new ScheduledTask(45500, 45569, 0), new ScheduledTask(66200, 66241, 0), new ScheduledTask(46100, 46128, 1), new ScheduledTask(66400, 66428, 2), new ScheduledTask(53400, 53455, 3), new ScheduledTask(62900, 62941, 1), new ScheduledTask(84200, 84241, 0), new ScheduledTask(88300, 88383, 0), new ScheduledTask(104900, 104997, 0), new ScheduledTask(114600, 114683, 0), new ScheduledTask(96600, 96683, 0), new ScheduledTask(122900, 122928, 0)};
        int[] expectedProcessorEndTimes = new int[]{122928, 62941, 66428, 53455};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 103300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 124, 0), new ScheduledTask(12400, 12511, 0), new ScheduledTask(23500, 23541, 0), new ScheduledTask(27600, 27738, 0), new ScheduledTask(41400, 41441, 0), new ScheduledTask(45500, 45555, 0), new ScheduledTask(51400, 51428, 1), new ScheduledTask(51000, 51083, 0), new ScheduledTask(59300, 59411, 0), new ScheduledTask(45900, 45969, 2), new ScheduledTask(51700, 51741, 3), new ScheduledTask(46100, 46128, 3), new ScheduledTask(59900, 59928, 3), new ScheduledTask(59700, 59755, 2), new ScheduledTask(65500, 65541, 3), new ScheduledTask(70400, 70441, 0), new ScheduledTask(74500, 74583, 0), new ScheduledTask(82800, 82897, 0), new ScheduledTask(83200, 83283, 3), new ScheduledTask(83400, 83483, 2), new ScheduledTask(100500, 100528, 0)};
        int[] expectedProcessorEndTimes = new int[]{100528, 51428, 83483, 83283};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 94070;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 124, 0), new ScheduledTask(12400, 12511, 0), new ScheduledTask(23500, 23541, 0), new ScheduledTask(27600, 27738, 0), new ScheduledTask(41400, 41441, 0), new ScheduledTask(45500, 45555, 0), new ScheduledTask(51000, 51028, 0), new ScheduledTask(51500, 51583, 1), new ScheduledTask(53800, 53911, 0), new ScheduledTask(45900, 45969, 2), new ScheduledTask(51700, 51741, 3), new ScheduledTask(46100, 46128, 3), new ScheduledTask(61460, 61488, 1), new ScheduledTask(56250, 56305, 2), new ScheduledTask(59900, 59941, 3), new ScheduledTask(65420, 65461, 0), new ScheduledTask(69520, 69603, 0), new ScheduledTask(78320, 78417, 1), new ScheduledTask(77820, 77903, 0), new ScheduledTask(78420, 78503, 2), new ScheduledTask(91270, 91298, 0)};
        int[] expectedProcessorEndTimes = new int[]{91298, 78417, 78503, 59941};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1027;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 124, 0), new ScheduledTask(124, 235, 0), new ScheduledTask(235, 276, 0), new ScheduledTask(276, 414, 0), new ScheduledTask(414, 455, 0), new ScheduledTask(455, 510, 0), new ScheduledTask(510, 538, 0), new ScheduledTask(579, 662, 0), new ScheduledTask(556, 667, 1), new ScheduledTask(459, 528, 1), new ScheduledTask(538, 579, 0), new ScheduledTask(528, 556, 1), new ScheduledTask(667, 695, 1), new ScheduledTask(695, 750, 1), new ScheduledTask(662, 703, 0), new ScheduledTask(703, 744, 0), new ScheduledTask(750, 833, 1), new ScheduledTask(838, 935, 0), new ScheduledTask(833, 916, 1), new ScheduledTask(916, 999, 1), new ScheduledTask(999, 1027, 1)};
        int[] expectedProcessorEndTimes = new int[]{935, 1027};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 898;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 124, 0), new ScheduledTask(124, 235, 0), new ScheduledTask(235, 276, 0), new ScheduledTask(276, 414, 0), new ScheduledTask(414, 455, 0), new ScheduledTask(455, 510, 0), new ScheduledTask(510, 538, 0), new ScheduledTask(515, 598, 1), new ScheduledTask(538, 649, 0), new ScheduledTask(459, 528, 2), new ScheduledTask(513, 554, 3), new ScheduledTask(528, 556, 2), new ScheduledTask(598, 626, 1), new ScheduledTask(554, 609, 3), new ScheduledTask(556, 597, 2), new ScheduledTask(649, 690, 0), new ScheduledTask(690, 773, 0), new ScheduledTask(773, 870, 0), new ScheduledTask(777, 860, 1), new ScheduledTask(779, 862, 2), new ScheduledTask(870, 898, 0)};
        int[] expectedProcessorEndTimes = new int[]{898, 860, 862, 609};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 898;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 124, 0), new ScheduledTask(124, 235, 0), new ScheduledTask(235, 276, 0), new ScheduledTask(276, 414, 0), new ScheduledTask(414, 455, 0), new ScheduledTask(455, 510, 0), new ScheduledTask(510, 538, 0), new ScheduledTask(515, 598, 1), new ScheduledTask(538, 649, 0), new ScheduledTask(459, 528, 2), new ScheduledTask(513, 554, 3), new ScheduledTask(461, 489, 4), new ScheduledTask(598, 626, 1), new ScheduledTask(528, 583, 2), new ScheduledTask(489, 530, 4), new ScheduledTask(649, 690, 0), new ScheduledTask(690, 773, 0), new ScheduledTask(773, 870, 0), new ScheduledTask(777, 860, 1), new ScheduledTask(779, 862, 2), new ScheduledTask(870, 898, 0)};
        int[] expectedProcessorEndTimes = new int[]{898, 860, 862, 554, 530};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random2_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#2_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 143000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 99, 0), new ScheduledTask(9900, 9985, 0), new ScheduledTask(18400, 18471, 0), new ScheduledTask(25500, 25542, 0), new ScheduledTask(29700, 29842, 0), new ScheduledTask(43900, 44042, 0), new ScheduledTask(62300, 62413, 0), new ScheduledTask(58100, 58142, 0), new ScheduledTask(79300, 79385, 0), new ScheduledTask(61000, 61028, 1), new ScheduledTask(44200, 44228, 1), new ScheduledTask(30300, 30413, 2), new ScheduledTask(87800, 87942, 0), new ScheduledTask(30400, 30471, 3), new ScheduledTask(73600, 73657, 0), new ScheduledTask(102000, 102028, 0), new ScheduledTask(104800, 104828, 0), new ScheduledTask(123200, 123299, 0), new ScheduledTask(114700, 114785, 0), new ScheduledTask(107600, 107671, 0), new ScheduledTask(133100, 133199, 0)};
        int[] expectedProcessorEndTimes = new int[]{133199, 61028, 30413, 30471};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random2_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#2_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 123000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 99, 0), new ScheduledTask(9900, 9985, 0), new ScheduledTask(18400, 18471, 0), new ScheduledTask(25500, 25542, 0), new ScheduledTask(29700, 29842, 0), new ScheduledTask(43900, 44042, 0), new ScheduledTask(58100, 58213, 0), new ScheduledTask(58900, 58942, 1), new ScheduledTask(69400, 69485, 0), new ScheduledTask(44500, 44528, 2), new ScheduledTask(44200, 44228, 3), new ScheduledTask(49800, 49913, 3), new ScheduledTask(77900, 78042, 0), new ScheduledTask(50100, 50171, 2), new ScheduledTask(64300, 64357, 2), new ScheduledTask(72400, 72428, 3), new ScheduledTask(92100, 92128, 0), new ScheduledTask(94900, 94999, 0), new ScheduledTask(95200, 95285, 1), new ScheduledTask(95800, 95871, 2), new ScheduledTask(113100, 113199, 0)};
        int[] expectedProcessorEndTimes = new int[]{113199, 95285, 95871, 72428};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random2_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#2_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 116950;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 99, 0), new ScheduledTask(9900, 9985, 0), new ScheduledTask(18400, 18471, 0), new ScheduledTask(25500, 25542, 0), new ScheduledTask(29700, 29842, 0), new ScheduledTask(43900, 44042, 0), new ScheduledTask(58100, 58213, 0), new ScheduledTask(58900, 58942, 1), new ScheduledTask(69400, 69485, 0), new ScheduledTask(44500, 44528, 2), new ScheduledTask(44200, 44228, 3), new ScheduledTask(48700, 48813, 2), new ScheduledTask(77900, 78042, 0), new ScheduledTask(49800, 49871, 3), new ScheduledTask(64600, 64657, 1), new ScheduledTask(65650, 65678, 2), new ScheduledTask(92100, 92128, 0), new ScheduledTask(94900, 94999, 0), new ScheduledTask(95200, 95285, 1), new ScheduledTask(95800, 95871, 2), new ScheduledTask(107050, 107149, 0)};
        int[] expectedProcessorEndTimes = new int[]{107149, 95285, 95871, 49871};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1204;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 99, 0), new ScheduledTask(99, 184, 0), new ScheduledTask(184, 255, 0), new ScheduledTask(255, 297, 0), new ScheduledTask(297, 439, 0), new ScheduledTask(439, 581, 0), new ScheduledTask(581, 694, 0), new ScheduledTask(629, 671, 1), new ScheduledTask(694, 779, 0), new ScheduledTask(601, 629, 1), new ScheduledTask(573, 601, 1), new ScheduledTask(432, 545, 1), new ScheduledTask(779, 921, 0), new ScheduledTask(304, 375, 1), new ScheduledTask(375, 432, 1), new ScheduledTask(545, 573, 1), new ScheduledTask(921, 949, 0), new ScheduledTask(954, 1053, 1), new ScheduledTask(949, 1034, 0), new ScheduledTask(1034, 1105, 0), new ScheduledTask(1105, 1204, 0)};
        int[] expectedProcessorEndTimes = new int[]{1204, 1053};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1147;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 99, 0), new ScheduledTask(99, 184, 0), new ScheduledTask(184, 255, 0), new ScheduledTask(255, 297, 0), new ScheduledTask(297, 439, 0), new ScheduledTask(439, 581, 0), new ScheduledTask(581, 694, 0), new ScheduledTask(589, 631, 1), new ScheduledTask(694, 779, 0), new ScheduledTask(445, 473, 2), new ScheduledTask(442, 470, 3), new ScheduledTask(470, 583, 3), new ScheduledTask(779, 921, 0), new ScheduledTask(473, 544, 2), new ScheduledTask(544, 601, 2), new ScheduledTask(583, 611, 3), new ScheduledTask(921, 949, 0), new ScheduledTask(949, 1048, 0), new ScheduledTask(952, 1037, 1), new ScheduledTask(958, 1029, 2), new ScheduledTask(1048, 1147, 0)};
        int[] expectedProcessorEndTimes = new int[]{1147, 1037, 1029, 611};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 1147;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 99, 0), new ScheduledTask(99, 184, 0), new ScheduledTask(184, 255, 0), new ScheduledTask(255, 297, 0), new ScheduledTask(297, 439, 0), new ScheduledTask(439, 581, 0), new ScheduledTask(581, 694, 0), new ScheduledTask(589, 631, 1), new ScheduledTask(694, 779, 0), new ScheduledTask(445, 473, 2), new ScheduledTask(442, 470, 3), new ScheduledTask(303, 416, 4), new ScheduledTask(779, 921, 0), new ScheduledTask(304, 375, 5), new ScheduledTask(375, 432, 5), new ScheduledTask(416, 444, 4), new ScheduledTask(921, 949, 0), new ScheduledTask(949, 1048, 0), new ScheduledTask(952, 1037, 1), new ScheduledTask(958, 1029, 2), new ScheduledTask(1048, 1147, 0)};
        int[] expectedProcessorEndTimes = new int[]{1147, 1037, 1029, 470, 444, 432};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random3_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#3_Heterogeneous-4-2-strong.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 138500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 32, 0), new ScheduledTask(3200, 3264, 0), new ScheduledTask(9600, 9643, 0), new ScheduledTask(13900, 13932, 0), new ScheduledTask(17100, 17164, 0), new ScheduledTask(23500, 23521, 0), new ScheduledTask(25600, 25654, 0), new ScheduledTask(31600, 31643, 1), new ScheduledTask(42800, 42897, 0), new ScheduledTask(72900, 73007, 0), new ScheduledTask(31000, 31064, 0), new ScheduledTask(63200, 63297, 0), new ScheduledTask(37400, 37454, 0), new ScheduledTask(52500, 52607, 0), new ScheduledTask(83600, 83686, 0), new ScheduledTask(43500, 43554, 2), new ScheduledTask(92200, 92286, 0), new ScheduledTask(110500, 110597, 0), new ScheduledTask(100800, 100897, 0), new ScheduledTask(120200, 120286, 0), new ScheduledTask(128800, 128897, 0)};
        int[] expectedProcessorEndTimes = new int[]{128897, 31643, 43554};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random3_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#3_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 103200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 32, 0), new ScheduledTask(3200, 3264, 0), new ScheduledTask(9600, 9643, 0), new ScheduledTask(13900, 13932, 0), new ScheduledTask(17100, 17164, 0), new ScheduledTask(23500, 23521, 0), new ScheduledTask(25600, 25654, 0), new ScheduledTask(31000, 31043, 0), new ScheduledTask(26400, 26497, 1), new ScheduledTask(35300, 35407, 0), new ScheduledTask(25800, 25864, 2), new ScheduledTask(36300, 36397, 3), new ScheduledTask(38600, 38654, 2), new ScheduledTask(46200, 46307, 0), new ScheduledTask(56900, 56986, 0), new ScheduledTask(49400, 49454, 2), new ScheduledTask(65500, 65586, 0), new ScheduledTask(74100, 74197, 0), new ScheduledTask(83800, 83897, 0), new ScheduledTask(74800, 74886, 3), new ScheduledTask(93500, 93597, 0)};
        int[] expectedProcessorEndTimes = new int[]{93597, 26497, 49454, 74886};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random3_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#3_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 89900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 32, 0), new ScheduledTask(3200, 3264, 0), new ScheduledTask(9600, 9643, 0), new ScheduledTask(13900, 13932, 0), new ScheduledTask(17100, 17164, 0), new ScheduledTask(23500, 23521, 0), new ScheduledTask(25600, 25654, 0), new ScheduledTask(31000, 31043, 0), new ScheduledTask(26400, 26497, 2), new ScheduledTask(35900, 36007, 1), new ScheduledTask(25800, 25864, 3), new ScheduledTask(35300, 35397, 0), new ScheduledTask(38600, 38654, 3), new ScheduledTask(40950, 41057, 2), new ScheduledTask(49040, 49126, 0), new ScheduledTask(50100, 50154, 1), new ScheduledTask(57800, 57886, 0), new ScheduledTask(67300, 67397, 1), new ScheduledTask(66400, 66497, 0), new ScheduledTask(67100, 67186, 2), new ScheduledTask(80200, 80297, 0)};
        int[] expectedProcessorEndTimes = new int[]{80297, 67397, 67186, 38654};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1009;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 32, 0), new ScheduledTask(32, 96, 0), new ScheduledTask(96, 139, 0), new ScheduledTask(139, 171, 0), new ScheduledTask(171, 235, 0), new ScheduledTask(235, 256, 0), new ScheduledTask(256, 310, 0), new ScheduledTask(310, 353, 0), new ScheduledTask(430, 527, 1), new ScheduledTask(450, 557, 0), new ScheduledTask(258, 322, 1), new ScheduledTask(353, 450, 0), new ScheduledTask(322, 376, 1), new ScheduledTask(527, 634, 1), new ScheduledTask(557, 643, 0), new ScheduledTask(376, 430, 1), new ScheduledTask(643, 729, 0), new ScheduledTask(738, 835, 1), new ScheduledTask(729, 826, 0), new ScheduledTask(826, 912, 0), new ScheduledTask(912, 1009, 0)};
        int[] expectedProcessorEndTimes = new int[]{1009, 835};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 838;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 32, 0), new ScheduledTask(32, 96, 0), new ScheduledTask(96, 139, 0), new ScheduledTask(139, 171, 0), new ScheduledTask(171, 235, 0), new ScheduledTask(235, 256, 0), new ScheduledTask(256, 310, 0), new ScheduledTask(310, 353, 0), new ScheduledTask(264, 361, 1), new ScheduledTask(353, 460, 0), new ScheduledTask(258, 322, 2), new ScheduledTask(363, 460, 3), new ScheduledTask(322, 376, 2), new ScheduledTask(361, 468, 1), new ScheduledTask(463, 549, 3), new ScheduledTask(376, 430, 2), new ScheduledTask(549, 635, 3), new ScheduledTask(644, 741, 2), new ScheduledTask(635, 732, 3), new ScheduledTask(642, 728, 1), new ScheduledTask(741, 838, 2)};
        int[] expectedProcessorEndTimes = new int[]{460, 728, 838, 732};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 838;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 32, 0), new ScheduledTask(32, 96, 0), new ScheduledTask(96, 139, 0), new ScheduledTask(139, 171, 0), new ScheduledTask(171, 235, 0), new ScheduledTask(235, 256, 0), new ScheduledTask(256, 310, 0), new ScheduledTask(310, 353, 0), new ScheduledTask(264, 361, 1), new ScheduledTask(353, 460, 0), new ScheduledTask(258, 322, 2), new ScheduledTask(363, 460, 3), new ScheduledTask(327, 381, 4), new ScheduledTask(365, 472, 5), new ScheduledTask(463, 549, 3), new ScheduledTask(472, 526, 5), new ScheduledTask(549, 635, 3), new ScheduledTask(644, 741, 5), new ScheduledTask(635, 732, 3), new ScheduledTask(642, 728, 4), new ScheduledTask(741, 838, 5)};
        int[] expectedProcessorEndTimes = new int[]{460, 361, 322, 732, 728, 838};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random4_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#4_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 131000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 36, 0), new ScheduledTask(3600, 3695, 0), new ScheduledTask(13100, 13160, 0), new ScheduledTask(19100, 19160, 0), new ScheduledTask(20000, 20060, 1), new ScheduledTask(25100, 25136, 0), new ScheduledTask(53700, 53795, 0), new ScheduledTask(25700, 25783, 2), new ScheduledTask(63200, 63271, 0), new ScheduledTask(43000, 43107, 0), new ScheduledTask(25700, 25748, 3), new ScheduledTask(34700, 34783, 0), new ScheduledTask(28700, 28760, 0), new ScheduledTask(70300, 70407, 0), new ScheduledTask(81000, 81107, 0), new ScheduledTask(54500, 54560, 3), new ScheduledTask(91700, 91807, 0), new ScheduledTask(114300, 114419, 0), new ScheduledTask(107200, 107271, 0), new ScheduledTask(102400, 102448, 0), new ScheduledTask(126200, 126248, 0)};
        int[] expectedProcessorEndTimes = new int[]{126248, 20060, 25783, 54560};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random4_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#4_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 93500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 36, 0), new ScheduledTask(3600, 3695, 0), new ScheduledTask(13100, 13160, 0), new ScheduledTask(19600, 19660, 1), new ScheduledTask(22700, 22760, 0), new ScheduledTask(19100, 19136, 0), new ScheduledTask(31600, 31695, 1), new ScheduledTask(35100, 35183, 2), new ScheduledTask(28700, 28771, 0), new ScheduledTask(35800, 35907, 0), new ScheduledTask(46500, 46548, 0), new ScheduledTask(23300, 23383, 3), new ScheduledTask(23100, 23160, 2), new ScheduledTask(39900, 40007, 3), new ScheduledTask(52200, 52307, 0), new ScheduledTask(50600, 50660, 1), new ScheduledTask(62900, 63007, 0), new ScheduledTask(73600, 73719, 0), new ScheduledTask(73900, 73971, 3), new ScheduledTask(73900, 73948, 2), new ScheduledTask(88700, 88748, 0)};
        int[] expectedProcessorEndTimes = new int[]{88748, 50660, 73948, 73971};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random4_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#4_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 82300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 36, 0), new ScheduledTask(3600, 3695, 0), new ScheduledTask(13100, 13160, 0), new ScheduledTask(19100, 19160, 0), new ScheduledTask(20000, 20060, 1), new ScheduledTask(19500, 19536, 2), new ScheduledTask(25100, 25195, 0), new ScheduledTask(25700, 25783, 2), new ScheduledTask(27200, 27271, 1), new ScheduledTask(25100, 25207, 3), new ScheduledTask(35720, 35768, 1), new ScheduledTask(40600, 40683, 0), new ScheduledTask(34600, 34660, 0), new ScheduledTask(38150, 38257, 2), new ScheduledTask(41480, 41587, 1), new ScheduledTask(48900, 48960, 0), new ScheduledTask(54900, 55007, 0), new ScheduledTask(65600, 65719, 0), new ScheduledTask(65900, 65971, 2), new ScheduledTask(65900, 65948, 3), new ScheduledTask(77500, 77548, 0)};
        int[] expectedProcessorEndTimes = new int[]{77548, 41587, 65971, 65948};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 962;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 36, 0), new ScheduledTask(36, 131, 0), new ScheduledTask(131, 191, 0), new ScheduledTask(191, 251, 0), new ScheduledTask(445, 505, 1), new ScheduledTask(195, 231, 1), new ScheduledTask(478, 573, 0), new ScheduledTask(362, 445, 1), new ScheduledTask(505, 576, 1), new ScheduledTask(311, 418, 0), new ScheduledTask(314, 362, 1), new ScheduledTask(231, 314, 1), new ScheduledTask(251, 311, 0), new ScheduledTask(576, 683, 1), new ScheduledTask(573, 680, 0), new ScheduledTask(418, 478, 0), new ScheduledTask(683, 790, 1), new ScheduledTask(790, 909, 1), new ScheduledTask(841, 912, 0), new ScheduledTask(793, 841, 0), new ScheduledTask(914, 962, 0)};
        int[] expectedProcessorEndTimes = new int[]{962, 909};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 753;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 36, 0), new ScheduledTask(36, 131, 0), new ScheduledTask(131, 191, 0), new ScheduledTask(191, 251, 0), new ScheduledTask(200, 260, 1), new ScheduledTask(195, 231, 2), new ScheduledTask(260, 355, 1), new ScheduledTask(251, 334, 0), new ScheduledTask(291, 362, 2), new ScheduledTask(305, 412, 3), new ScheduledTask(257, 305, 3), new ScheduledTask(334, 417, 0), new ScheduledTask(231, 291, 2), new ScheduledTask(362, 469, 2), new ScheduledTask(355, 462, 1), new ScheduledTask(419, 479, 0), new ScheduledTask(479, 586, 0), new ScheduledTask(586, 705, 0), new ScheduledTask(589, 660, 3), new ScheduledTask(589, 637, 2), new ScheduledTask(705, 753, 0)};
        int[] expectedProcessorEndTimes = new int[]{753, 462, 637, 660};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 727;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 36, 0), new ScheduledTask(36, 131, 0), new ScheduledTask(131, 191, 0), new ScheduledTask(191, 251, 0), new ScheduledTask(200, 260, 1), new ScheduledTask(195, 231, 2), new ScheduledTask(251, 346, 0), new ScheduledTask(257, 340, 2), new ScheduledTask(260, 331, 1), new ScheduledTask(233, 340, 3), new ScheduledTask(257, 305, 4), new ScheduledTask(237, 320, 5), new ScheduledTask(305, 365, 4), new ScheduledTask(331, 438, 1), new ScheduledTask(346, 453, 0), new ScheduledTask(365, 425, 4), new ScheduledTask(453, 560, 0), new ScheduledTask(560, 679, 0), new ScheduledTask(563, 634, 1), new ScheduledTask(563, 611, 2), new ScheduledTask(679, 727, 0)};
        int[] expectedProcessorEndTimes = new int[]{727, 634, 611, 340, 425, 320};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random5_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#5_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 141700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 85, 0), new ScheduledTask(8500, 8598, 0), new ScheduledTask(18300, 18398, 0), new ScheduledTask(28100, 28198, 0), new ScheduledTask(37900, 38022, 0), new ScheduledTask(50100, 50173, 0), new ScheduledTask(57400, 57522, 0), new ScheduledTask(69600, 69649, 0), new ScheduledTask(74700, 74761, 1), new ScheduledTask(101400, 101510, 0), new ScheduledTask(80600, 80637, 0), new ScheduledTask(74500, 74561, 0), new ScheduledTask(74800, 74861, 2), new ScheduledTask(112400, 112449, 0), new ScheduledTask(84300, 84398, 0), new ScheduledTask(117300, 117410, 0), new ScheduledTask(94100, 94173, 0), new ScheduledTask(94900, 94949, 3), new ScheduledTask(111300, 111324, 1), new ScheduledTask(128300, 128373, 0), new ScheduledTask(135600, 135661, 0)};
        int[] expectedProcessorEndTimes = new int[]{135661, 111324, 74861, 94949};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random5_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#5_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 121200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 85, 0), new ScheduledTask(8500, 8598, 0), new ScheduledTask(18300, 18398, 0), new ScheduledTask(28100, 28198, 0), new ScheduledTask(37900, 38022, 0), new ScheduledTask(50100, 50173, 0), new ScheduledTask(57400, 57522, 0), new ScheduledTask(69600, 69649, 0), new ScheduledTask(74500, 74561, 0), new ScheduledTask(80600, 80710, 0), new ScheduledTask(70600, 70637, 1), new ScheduledTask(70300, 70361, 2), new ScheduledTask(74800, 74861, 3), new ScheduledTask(81600, 81649, 1), new ScheduledTask(82500, 82598, 2), new ScheduledTask(91600, 91710, 0), new ScheduledTask(87000, 87073, 3), new ScheduledTask(102900, 102949, 0), new ScheduledTask(101600, 101624, 3), new ScheduledTask(107800, 107873, 0), new ScheduledTask(115100, 115161, 0)};
        int[] expectedProcessorEndTimes = new int[]{115161, 81649, 82598, 101624};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random5_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#5_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 114800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 85, 0), new ScheduledTask(8500, 8598, 0), new ScheduledTask(18300, 18398, 0), new ScheduledTask(28100, 28198, 0), new ScheduledTask(37900, 38022, 0), new ScheduledTask(50100, 50173, 0), new ScheduledTask(57400, 57522, 0), new ScheduledTask(69600, 69649, 0), new ScheduledTask(74700, 74761, 1), new ScheduledTask(74500, 74610, 0), new ScheduledTask(70600, 70637, 3), new ScheduledTask(70300, 70361, 2), new ScheduledTask(79450, 79511, 2), new ScheduledTask(85500, 85549, 0), new ScheduledTask(82020, 82118, 1), new ScheduledTask(90400, 90510, 0), new ScheduledTask(80350, 80423, 3), new ScheduledTask(93780, 93829, 1), new ScheduledTask(94950, 94974, 3), new ScheduledTask(101400, 101473, 0), new ScheduledTask(108700, 108761, 0)};
        int[] expectedProcessorEndTimes = new int[]{108761, 93829, 79511, 94974};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1230;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 85, 0), new ScheduledTask(85, 183, 0), new ScheduledTask(183, 281, 0), new ScheduledTask(281, 379, 0), new ScheduledTask(379, 501, 0), new ScheduledTask(501, 574, 0), new ScheduledTask(574, 696, 0), new ScheduledTask(705, 754, 1), new ScheduledTask(791, 852, 1), new ScheduledTask(876, 986, 1), new ScheduledTask(754, 791, 1), new ScheduledTask(696, 757, 0), new ScheduledTask(830, 891, 0), new ScheduledTask(891, 940, 0), new ScheduledTask(940, 1038, 0), new ScheduledTask(986, 1096, 1), new ScheduledTask(757, 830, 0), new ScheduledTask(1038, 1087, 0), new ScheduledTask(852, 876, 1), new ScheduledTask(1096, 1169, 1), new ScheduledTask(1169, 1230, 1)};
        int[] expectedProcessorEndTimes = new int[]{1087, 1230};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1102;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 85, 0), new ScheduledTask(85, 183, 0), new ScheduledTask(183, 281, 0), new ScheduledTask(281, 379, 0), new ScheduledTask(379, 501, 0), new ScheduledTask(501, 574, 0), new ScheduledTask(574, 696, 0), new ScheduledTask(696, 745, 0), new ScheduledTask(747, 808, 1), new ScheduledTask(745, 855, 0), new ScheduledTask(764, 801, 2), new ScheduledTask(703, 764, 2), new ScheduledTask(748, 809, 3), new ScheduledTask(808, 857, 1), new ScheduledTask(801, 899, 2), new ScheduledTask(858, 968, 1), new ScheduledTask(809, 882, 3), new ScheduledTask(907, 956, 3), new ScheduledTask(882, 906, 3), new ScheduledTask(968, 1041, 1), new ScheduledTask(1041, 1102, 1)};
        int[] expectedProcessorEndTimes = new int[]{855, 1102, 899, 956};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 1102;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 85, 0), new ScheduledTask(85, 183, 0), new ScheduledTask(183, 281, 0), new ScheduledTask(281, 379, 0), new ScheduledTask(379, 501, 0), new ScheduledTask(501, 574, 0), new ScheduledTask(574, 696, 0), new ScheduledTask(696, 745, 0), new ScheduledTask(747, 808, 1), new ScheduledTask(745, 855, 0), new ScheduledTask(706, 743, 2), new ScheduledTask(703, 764, 3), new ScheduledTask(748, 809, 4), new ScheduledTask(808, 857, 1), new ScheduledTask(743, 841, 2), new ScheduledTask(858, 968, 1), new ScheduledTask(773, 846, 5), new ScheduledTask(870, 919, 5), new ScheduledTask(846, 870, 5), new ScheduledTask(968, 1041, 1), new ScheduledTask(1041, 1102, 1)};
        int[] expectedProcessorEndTimes = new int[]{855, 1102, 841, 764, 809, 919};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random6_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#6_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 128700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 74, 0), new ScheduledTask(7400, 7425, 0), new ScheduledTask(9900, 9925, 0), new ScheduledTask(40800, 40899, 0), new ScheduledTask(8200, 8287, 1), new ScheduledTask(18600, 18711, 0), new ScheduledTask(10900, 10925, 2), new ScheduledTask(13200, 13287, 3), new ScheduledTask(29700, 29811, 0), new ScheduledTask(12400, 12462, 0), new ScheduledTask(48100, 48137, 2), new ScheduledTask(50700, 50811, 0), new ScheduledTask(61800, 61899, 0), new ScheduledTask(71700, 71750, 0), new ScheduledTask(25900, 25937, 2), new ScheduledTask(76700, 76725, 0), new ScheduledTask(79200, 79311, 0), new ScheduledTask(112600, 112724, 0), new ScheduledTask(100200, 100324, 0), new ScheduledTask(90300, 90399, 0), new ScheduledTask(125000, 125037, 0)};
        int[] expectedProcessorEndTimes = new int[]{125037, 8287, 48137, 13287};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 618;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 74, 0), new ScheduledTask(76, 101, 1), new ScheduledTask(101, 126, 1), new ScheduledTask(79, 178, 2), new ScheduledTask(74, 161, 0), new ScheduledTask(126, 237, 1), new ScheduledTask(161, 186, 0), new ScheduledTask(178, 265, 2), new ScheduledTask(205, 316, 3), new ScheduledTask(106, 168, 3), new ScheduledTask(168, 205, 3), new ScheduledTask(223, 334, 0), new ScheduledTask(237, 336, 1), new ScheduledTask(265, 315, 2), new ScheduledTask(186, 223, 0), new ScheduledTask(318, 343, 3), new ScheduledTask(343, 454, 3), new ScheduledTask(456, 580, 2), new ScheduledTask(454, 578, 3), new ScheduledTask(461, 560, 1), new ScheduledTask(581, 618, 2)};
        int[] expectedProcessorEndTimes = new int[]{334, 560, 618, 578};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 585;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 74, 0), new ScheduledTask(74, 99, 0), new ScheduledTask(99, 124, 0), new ScheduledTask(79, 178, 1), new ScheduledTask(82, 169, 2), new ScheduledTask(124, 235, 0), new ScheduledTask(109, 134, 3), new ScheduledTask(132, 219, 4), new ScheduledTask(164, 275, 5), new ScheduledTask(169, 231, 2), new ScheduledTask(127, 164, 5), new ScheduledTask(182, 293, 3), new ScheduledTask(178, 277, 1), new ScheduledTask(235, 285, 0), new ScheduledTask(234, 271, 4), new ScheduledTask(285, 310, 0), new ScheduledTask(310, 421, 0), new ScheduledTask(423, 547, 5), new ScheduledTask(421, 545, 0), new ScheduledTask(428, 527, 4), new ScheduledTask(548, 585, 5)};
        int[] expectedProcessorEndTimes = new int[]{545, 277, 231, 293, 527, 585};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random7_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#7_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 133500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 49, 0), new ScheduledTask(4900, 5014, 0), new ScheduledTask(17000, 17033, 1), new ScheduledTask(27700, 27781, 0), new ScheduledTask(16500, 16549, 2), new ScheduledTask(16300, 16414, 0), new ScheduledTask(60300, 60446, 0), new ScheduledTask(5100, 5214, 3), new ScheduledTask(50500, 50598, 0), new ScheduledTask(36800, 36881, 1), new ScheduledTask(40700, 40798, 0), new ScheduledTask(74900, 75030, 0), new ScheduledTask(87900, 88014, 0), new ScheduledTask(35800, 35849, 0), new ScheduledTask(45900, 45933, 2), new ScheduledTask(65700, 65749, 2), new ScheduledTask(99300, 99349, 0), new ScheduledTask(107500, 107565, 0), new ScheduledTask(114000, 114049, 0), new ScheduledTask(104200, 104233, 0), new ScheduledTask(118900, 119046, 0)};
        int[] expectedProcessorEndTimes = new int[]{119046, 36881, 65749, 5214};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random7_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#7_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 93800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 49, 0), new ScheduledTask(4900, 5014, 0), new ScheduledTask(26300, 26333, 1), new ScheduledTask(16300, 16381, 0), new ScheduledTask(16500, 16549, 1), new ScheduledTask(5700, 5814, 2), new ScheduledTask(37400, 37546, 0), new ScheduledTask(5100, 5214, 3), new ScheduledTask(27900, 27998, 3), new ScheduledTask(24400, 24481, 0), new ScheduledTask(32900, 32998, 1), new ScheduledTask(35100, 35230, 2), new ScheduledTask(52000, 52114, 0), new ScheduledTask(32500, 32549, 0), new ScheduledTask(28500, 28533, 2), new ScheduledTask(52500, 52549, 1), new ScheduledTask(63400, 63449, 0), new ScheduledTask(68300, 68365, 0), new ScheduledTask(69000, 69049, 3), new ScheduledTask(68800, 68833, 2), new ScheduledTask(79200, 79346, 0)};
        int[] expectedProcessorEndTimes = new int[]{79346, 52549, 68833, 69049};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random7_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#7_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 80180;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 49, 0), new ScheduledTask(4900, 5014, 0), new ScheduledTask(16300, 16333, 0), new ScheduledTask(17200, 17281, 3), new ScheduledTask(18780, 18829, 1), new ScheduledTask(5700, 5814, 2), new ScheduledTask(19600, 19746, 0), new ScheduledTask(5100, 5214, 1), new ScheduledTask(25360, 25458, 2), new ScheduledTask(34200, 34281, 0), new ScheduledTask(24660, 24758, 1), new ScheduledTask(36420, 36550, 1), new ScheduledTask(42300, 42414, 0), new ScheduledTask(33400, 33449, 3), new ScheduledTask(40060, 40093, 2), new ScheduledTask(45010, 45059, 2), new ScheduledTask(53700, 53749, 0), new ScheduledTask(58600, 58665, 0), new ScheduledTask(59300, 59349, 1), new ScheduledTask(59100, 59133, 2), new ScheduledTask(65580, 65726, 0)};
        int[] expectedProcessorEndTimes = new int[]{65726, 59349, 59133, 33449};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 716;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 49, 0), new ScheduledTask(49, 163, 0), new ScheduledTask(163, 196, 0), new ScheduledTask(172, 253, 1), new ScheduledTask(165, 214, 2), new ScheduledTask(57, 171, 3), new ScheduledTask(196, 342, 0), new ScheduledTask(51, 165, 1), new ScheduledTask(214, 312, 2), new ScheduledTask(253, 334, 1), new ScheduledTask(253, 351, 3), new ScheduledTask(312, 442, 2), new ScheduledTask(342, 456, 0), new ScheduledTask(204, 253, 3), new ScheduledTask(171, 204, 3), new ScheduledTask(351, 400, 3), new ScheduledTask(456, 505, 0), new ScheduledTask(505, 570, 0), new ScheduledTask(512, 561, 3), new ScheduledTask(510, 543, 2), new ScheduledTask(570, 716, 0)};
        int[] expectedProcessorEndTimes = new int[]{716, 334, 543, 561};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 716;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 49, 0), new ScheduledTask(49, 163, 0), new ScheduledTask(163, 196, 0), new ScheduledTask(172, 253, 1), new ScheduledTask(165, 214, 2), new ScheduledTask(57, 171, 3), new ScheduledTask(196, 342, 0), new ScheduledTask(51, 165, 4), new ScheduledTask(214, 312, 2), new ScheduledTask(253, 334, 1), new ScheduledTask(171, 269, 3), new ScheduledTask(165, 295, 4), new ScheduledTask(342, 456, 0), new ScheduledTask(174, 223, 5), new ScheduledTask(223, 256, 5), new ScheduledTask(269, 318, 3), new ScheduledTask(456, 505, 0), new ScheduledTask(505, 570, 0), new ScheduledTask(512, 561, 1), new ScheduledTask(510, 543, 2), new ScheduledTask(570, 716, 0)};
        int[] expectedProcessorEndTimes = new int[]{716, 561, 543, 318, 295, 256};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random8_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#8_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 145500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 53, 0), new ScheduledTask(5300, 5335, 0), new ScheduledTask(6000, 6106, 1), new ScheduledTask(8800, 8889, 0), new ScheduledTask(37200, 37377, 0), new ScheduledTask(9700, 9806, 2), new ScheduledTask(24800, 24924, 0), new ScheduledTask(83300, 83460, 0), new ScheduledTask(17700, 17771, 0), new ScheduledTask(17900, 17971, 3), new ScheduledTask(54900, 55060, 0), new ScheduledTask(69600, 69671, 1), new ScheduledTask(76200, 76271, 0), new ScheduledTask(81500, 81553, 3), new ScheduledTask(70900, 70953, 0), new ScheduledTask(60500, 60535, 3), new ScheduledTask(115300, 115460, 0), new ScheduledTask(99300, 99460, 0), new ScheduledTask(73300, 73371, 2), new ScheduledTask(131300, 131371, 0), new ScheduledTask(138400, 138471, 0)};
        int[] expectedProcessorEndTimes = new int[]{138471, 69671, 73371, 81553};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random8_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#8_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 97300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 53, 0), new ScheduledTask(5600, 5635, 1), new ScheduledTask(6000, 6106, 2), new ScheduledTask(21300, 21389, 0), new ScheduledTask(13300, 13477, 3), new ScheduledTask(12600, 12706, 1), new ScheduledTask(46200, 46324, 0), new ScheduledTask(30200, 30360, 0), new ScheduledTask(41400, 41471, 2), new ScheduledTask(44400, 44471, 1), new ScheduledTask(5300, 5460, 0), new ScheduledTask(58600, 58671, 0), new ScheduledTask(27200, 27271, 2), new ScheduledTask(55600, 55653, 2), new ScheduledTask(33800, 33853, 1), new ScheduledTask(59100, 59135, 1), new ScheduledTask(67100, 67260, 0), new ScheduledTask(48700, 48860, 3), new ScheduledTask(66200, 66271, 2), new ScheduledTask(83100, 83171, 0), new ScheduledTask(90200, 90271, 0)};
        int[] expectedProcessorEndTimes = new int[]{90271, 59135, 66271, 48860};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random8_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#8_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 84240;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 53, 0), new ScheduledTask(5300, 5335, 0), new ScheduledTask(6000, 6106, 1), new ScheduledTask(8800, 8889, 0), new ScheduledTask(9500, 9677, 3), new ScheduledTask(9700, 9806, 2), new ScheduledTask(27240, 27364, 1), new ScheduledTask(30100, 30260, 0), new ScheduledTask(18720, 18791, 1), new ScheduledTask(17700, 17771, 0), new ScheduledTask(33550, 33710, 2), new ScheduledTask(46100, 46171, 0), new ScheduledTask(42120, 42191, 1), new ScheduledTask(25600, 25653, 2), new ScheduledTask(24800, 24853, 0), new ScheduledTask(44900, 44935, 3), new ScheduledTask(53200, 53360, 0), new ScheduledTask(50640, 50800, 1), new ScheduledTask(57550, 57621, 2), new ScheduledTask(70040, 70111, 0), new ScheduledTask(77140, 77211, 0)};
        int[] expectedProcessorEndTimes = new int[]{77211, 50800, 57621, 44935};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1084;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 53, 0), new ScheduledTask(56, 91, 1), new ScheduledTask(337, 443, 0), new ScheduledTask(374, 463, 1), new ScheduledTask(197, 374, 1), new ScheduledTask(91, 197, 1), new ScheduledTask(623, 747, 1), new ScheduledTask(463, 623, 1), new ScheduledTask(638, 709, 0), new ScheduledTask(567, 638, 0), new ScheduledTask(53, 213, 0), new ScheduledTask(496, 567, 0), new ScheduledTask(709, 780, 0), new ScheduledTask(284, 337, 0), new ScheduledTask(443, 496, 0), new ScheduledTask(747, 782, 1), new ScheduledTask(782, 942, 1), new ScheduledTask(780, 940, 0), new ScheduledTask(213, 284, 0), new ScheduledTask(942, 1013, 1), new ScheduledTask(1013, 1084, 1)};
        int[] expectedProcessorEndTimes = new int[]{940, 1084};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 645;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 53, 0), new ScheduledTask(53, 88, 0), new ScheduledTask(60, 166, 1), new ScheduledTask(88, 177, 0), new ScheduledTask(95, 272, 2), new ScheduledTask(97, 203, 3), new ScheduledTask(177, 301, 0), new ScheduledTask(173, 333, 4), new ScheduledTask(180, 251, 5), new ScheduledTask(179, 250, 1), new ScheduledTask(250, 410, 1), new ScheduledTask(272, 343, 2), new ScheduledTask(256, 327, 3), new ScheduledTask(251, 304, 5), new ScheduledTask(203, 256, 3), new ScheduledTask(301, 336, 0), new ScheduledTask(343, 503, 2), new ScheduledTask(336, 496, 4), new ScheduledTask(419, 490, 5), new ScheduledTask(503, 574, 2), new ScheduledTask(574, 645, 2)};
        int[] expectedProcessorEndTimes = new int[]{336, 410, 645, 327, 496, 490};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random9_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#9_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 120200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 26, 0), new ScheduledTask(2600, 2703, 0), new ScheduledTask(3100, 3164, 1), new ScheduledTask(12900, 12926, 0), new ScheduledTask(43800, 43864, 0), new ScheduledTask(21900, 22029, 0), new ScheduledTask(13400, 13477, 2), new ScheduledTask(34800, 34890, 0), new ScheduledTask(50200, 50290, 0), new ScheduledTask(2900, 2990, 3), new ScheduledTask(15500, 15564, 0), new ScheduledTask(72100, 72229, 0), new ScheduledTask(56900, 56939, 3), new ScheduledTask(59600, 59639, 2), new ScheduledTask(44100, 44190, 1), new ScheduledTask(85000, 85129, 0), new ScheduledTask(59200, 59329, 0), new ScheduledTask(80300, 80326, 3), new ScheduledTask(98400, 98464, 0), new ScheduledTask(104800, 104903, 0), new ScheduledTask(115100, 115151, 0)};
        int[] expectedProcessorEndTimes = new int[]{115151, 44190, 59639, 80326};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random9_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#9_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 81100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 26, 0), new ScheduledTask(2600, 2703, 0), new ScheduledTask(3100, 3164, 1), new ScheduledTask(15500, 15526, 0), new ScheduledTask(18100, 18164, 0), new ScheduledTask(37400, 37529, 0), new ScheduledTask(15900, 15977, 1), new ScheduledTask(20900, 20990, 2), new ScheduledTask(28400, 28490, 0), new ScheduledTask(2900, 2990, 2), new ScheduledTask(18400, 18464, 3), new ScheduledTask(31300, 31429, 1), new ScheduledTask(31200, 31239, 3), new ScheduledTask(24500, 24539, 0), new ScheduledTask(50300, 50390, 0), new ScheduledTask(39000, 39129, 3), new ScheduledTask(38900, 39029, 2), new ScheduledTask(12900, 12926, 0), new ScheduledTask(59300, 59364, 0), new ScheduledTask(65700, 65803, 0), new ScheduledTask(76000, 76051, 0)};
        int[] expectedProcessorEndTimes = new int[]{76051, 31429, 39029, 39129};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random9_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#9_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 70700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 26, 0), new ScheduledTask(2600, 2703, 0), new ScheduledTask(3100, 3164, 1), new ScheduledTask(17500, 17526, 2), new ScheduledTask(10780, 10844, 1), new ScheduledTask(23140, 23269, 1), new ScheduledTask(12900, 12977, 0), new ScheduledTask(21400, 21490, 2), new ScheduledTask(24500, 24590, 0), new ScheduledTask(2900, 2990, 3), new ScheduledTask(33500, 33564, 0), new ScheduledTask(21100, 21229, 3), new ScheduledTask(18460, 18499, 1), new ScheduledTask(20600, 20639, 0), new ScheduledTask(39900, 39990, 0), new ScheduledTask(34900, 35029, 2), new ScheduledTask(38620, 38749, 1), new ScheduledTask(13600, 13626, 2), new ScheduledTask(48900, 48964, 0), new ScheduledTask(55300, 55403, 0), new ScheduledTask(65600, 65651, 0)};
        int[] expectedProcessorEndTimes = new int[]{65651, 38749, 35029, 21229};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 598;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 26, 0), new ScheduledTask(26, 129, 0), new ScheduledTask(31, 95, 1), new ScheduledTask(129, 155, 0), new ScheduledTask(95, 159, 1), new ScheduledTask(155, 284, 0), new ScheduledTask(134, 211, 2), new ScheduledTask(160, 250, 1), new ScheduledTask(211, 301, 2), new ScheduledTask(29, 119, 3), new ScheduledTask(162, 226, 3), new ScheduledTask(250, 379, 1), new ScheduledTask(226, 265, 3), new ScheduledTask(265, 304, 3), new ScheduledTask(284, 374, 0), new ScheduledTask(306, 435, 2), new ScheduledTask(304, 433, 3), new ScheduledTask(136, 162, 3), new ScheduledTask(379, 443, 1), new ScheduledTask(444, 547, 1), new ScheduledTask(547, 598, 1)};
        int[] expectedProcessorEndTimes = new int[]{374, 598, 435, 433};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 592;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 26, 0), new ScheduledTask(26, 129, 0), new ScheduledTask(31, 95, 1), new ScheduledTask(129, 155, 0), new ScheduledTask(95, 159, 1), new ScheduledTask(155, 284, 0), new ScheduledTask(134, 211, 2), new ScheduledTask(160, 250, 1), new ScheduledTask(168, 258, 3), new ScheduledTask(29, 119, 4), new ScheduledTask(158, 222, 4), new ScheduledTask(211, 340, 2), new ScheduledTask(163, 202, 5), new ScheduledTask(202, 241, 5), new ScheduledTask(284, 374, 0), new ScheduledTask(258, 387, 3), new ScheduledTask(222, 351, 4), new ScheduledTask(241, 267, 5), new ScheduledTask(374, 438, 0), new ScheduledTask(438, 541, 0), new ScheduledTask(541, 592, 0)};
        int[] expectedProcessorEndTimes = new int[]{592, 250, 340, 387, 351, 267};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 9;
        int expectedScheduleEndTime = 678;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 48, 0), new ScheduledTask(48, 133, 0), new ScheduledTask(133, 230, 0), new ScheduledTask(230, 351, 0), new ScheduledTask(237, 310, 1), new ScheduledTask(238, 323, 2), new ScheduledTask(310, 431, 1), new ScheduledTask(351, 424, 0), new ScheduledTask(315, 412, 3), new ScheduledTask(319, 392, 4), new ScheduledTask(323, 420, 2), new ScheduledTask(424, 545, 0), new ScheduledTask(329, 390, 5), new ScheduledTask(326, 387, 6), new ScheduledTask(431, 552, 1), new ScheduledTask(360, 433, 7), new ScheduledTask(357, 405, 8), new ScheduledTask(420, 493, 2), new ScheduledTask(545, 581, 0), new ScheduledTask(581, 605, 0), new ScheduledTask(605, 678, 0)};
        int[] expectedProcessorEndTimes = new int[]{678, 552, 493, 412, 392, 390, 387, 433, 405};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 48, 0), new ScheduledTask(48, 133, 0), new ScheduledTask(133, 230, 0), new ScheduledTask(230, 351, 0), new ScheduledTask(237, 310, 1), new ScheduledTask(351, 436, 0), new ScheduledTask(552, 673, 1), new ScheduledTask(673, 746, 1), new ScheduledTask(310, 407, 1), new ScheduledTask(631, 704, 0), new ScheduledTask(455, 552, 1), new ScheduledTask(746, 867, 1), new ScheduledTask(570, 631, 0), new ScheduledTask(509, 570, 0), new ScheduledTask(704, 825, 0), new ScheduledTask(436, 509, 0), new ScheduledTask(407, 455, 1), new ScheduledTask(825, 898, 0), new ScheduledTask(867, 903, 1), new ScheduledTask(903, 927, 1), new ScheduledTask(927, 1000, 1)};
        int[] expectedProcessorEndTimes = new int[]{898, 1000};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 699;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 48, 0), new ScheduledTask(48, 133, 0), new ScheduledTask(133, 230, 0), new ScheduledTask(240, 361, 1), new ScheduledTask(230, 303, 0), new ScheduledTask(238, 323, 2), new ScheduledTask(307, 428, 3), new ScheduledTask(361, 434, 1), new ScheduledTask(303, 400, 0), new ScheduledTask(384, 457, 2), new ScheduledTask(428, 525, 3), new ScheduledTask(434, 555, 1), new ScheduledTask(457, 518, 2), new ScheduledTask(323, 384, 2), new ScheduledTask(473, 594, 0), new ScheduledTask(400, 473, 0), new ScheduledTask(518, 566, 2), new ScheduledTask(525, 598, 3), new ScheduledTask(566, 602, 2), new ScheduledTask(602, 626, 2), new ScheduledTask(626, 699, 2)};
        int[] expectedProcessorEndTimes = new int[]{594, 555, 699, 598};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 678;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 48, 0), new ScheduledTask(48, 133, 0), new ScheduledTask(133, 230, 0), new ScheduledTask(230, 351, 0), new ScheduledTask(237, 310, 1), new ScheduledTask(238, 323, 2), new ScheduledTask(310, 431, 1), new ScheduledTask(351, 424, 0), new ScheduledTask(315, 412, 3), new ScheduledTask(319, 392, 4), new ScheduledTask(323, 420, 2), new ScheduledTask(424, 545, 0), new ScheduledTask(329, 390, 5), new ScheduledTask(326, 387, 6), new ScheduledTask(431, 552, 1), new ScheduledTask(360, 433, 7), new ScheduledTask(387, 435, 6), new ScheduledTask(420, 493, 2), new ScheduledTask(545, 581, 0), new ScheduledTask(581, 605, 0), new ScheduledTask(605, 678, 0)};
        int[] expectedProcessorEndTimes = new int[]{678, 552, 493, 412, 392, 390, 435, 433};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 115800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 46, 0), new ScheduledTask(9200, 9293, 0), new ScheduledTask(34700, 34816, 0), new ScheduledTask(4600, 4646, 0), new ScheduledTask(18500, 18546, 0), new ScheduledTask(57900, 58005, 0), new ScheduledTask(9800, 9846, 1), new ScheduledTask(23100, 23216, 0), new ScheduledTask(23800, 23881, 2), new ScheduledTask(46300, 46416, 0), new ScheduledTask(23900, 23958, 3), new ScheduledTask(68400, 68505, 0), new ScheduledTask(37400, 37446, 1), new ScheduledTask(78900, 78970, 0), new ScheduledTask(58700, 58723, 3), new ScheduledTask(72500, 72523, 3), new ScheduledTask(86600, 86658, 0), new ScheduledTask(97000, 97093, 0), new ScheduledTask(92400, 92446, 0), new ScheduledTask(93200, 93223, 3), new ScheduledTask(107700, 107781, 0)};
        int[] expectedProcessorEndTimes = new int[]{107781, 37446, 23881, 93223};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 78000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 46, 0), new ScheduledTask(4600, 4693, 0), new ScheduledTask(5100, 5216, 1), new ScheduledTask(4800, 4846, 2), new ScheduledTask(13900, 13946, 0), new ScheduledTask(30100, 30205, 0), new ScheduledTask(14600, 14646, 3), new ScheduledTask(18500, 18616, 0), new ScheduledTask(19200, 19281, 2), new ScheduledTask(23800, 23916, 3), new ScheduledTask(28300, 28358, 1), new ScheduledTask(40600, 40705, 0), new ScheduledTask(40000, 40046, 2), new ScheduledTask(39900, 39970, 1), new ScheduledTask(35400, 35423, 2), new ScheduledTask(49200, 49223, 2), new ScheduledTask(54400, 54458, 0), new ScheduledTask(60200, 60293, 0), new ScheduledTask(60500, 60546, 3), new ScheduledTask(61000, 61023, 2), new ScheduledTask(69900, 69981, 0)};
        int[] expectedProcessorEndTimes = new int[]{69981, 39970, 61023, 60546};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 68400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 46, 0), new ScheduledTask(4600, 4693, 0), new ScheduledTask(5100, 5216, 1), new ScheduledTask(4800, 4846, 2), new ScheduledTask(13900, 13946, 0), new ScheduledTask(19020, 19125, 1), new ScheduledTask(11700, 11746, 2), new ScheduledTask(18500, 18616, 0), new ScheduledTask(30100, 30181, 0), new ScheduledTask(18600, 18716, 2), new ScheduledTask(19300, 19358, 3), new ScheduledTask(31620, 31725, 1), new ScheduledTask(30900, 30946, 3), new ScheduledTask(38200, 38270, 0), new ScheduledTask(36000, 36023, 2), new ScheduledTask(40150, 40173, 3), new ScheduledTask(45200, 45258, 0), new ScheduledTask(51000, 51093, 0), new ScheduledTask(51300, 51346, 2), new ScheduledTask(51800, 51823, 3), new ScheduledTask(60300, 60381, 0)};
        int[] expectedProcessorEndTimes = new int[]{60381, 31725, 51346, 51823};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 826;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 46, 0), new ScheduledTask(186, 279, 1), new ScheduledTask(46, 162, 0), new ScheduledTask(48, 94, 1), new ScheduledTask(301, 347, 0), new ScheduledTask(279, 384, 1), new ScheduledTask(94, 140, 1), new ScheduledTask(347, 463, 0), new ScheduledTask(442, 523, 1), new ScheduledTask(185, 301, 0), new ScheduledTask(384, 442, 1), new ScheduledTask(463, 568, 0), new ScheduledTask(140, 186, 1), new ScheduledTask(523, 593, 1), new ScheduledTask(162, 185, 0), new ScheduledTask(568, 591, 0), new ScheduledTask(594, 652, 1), new ScheduledTask(652, 745, 1), new ScheduledTask(683, 729, 0), new ScheduledTask(660, 683, 0), new ScheduledTask(745, 826, 1)};
        int[] expectedProcessorEndTimes = new int[]{729, 826};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 615;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 46, 0), new ScheduledTask(46, 139, 0), new ScheduledTask(51, 167, 1), new ScheduledTask(48, 94, 2), new ScheduledTask(139, 185, 0), new ScheduledTask(167, 272, 1), new ScheduledTask(100, 146, 3), new ScheduledTask(192, 308, 3), new ScheduledTask(192, 273, 2), new ScheduledTask(243, 359, 0), new ScheduledTask(185, 243, 0), new ScheduledTask(272, 377, 1), new ScheduledTask(146, 192, 3), new ScheduledTask(308, 378, 3), new ScheduledTask(150, 173, 2), new ScheduledTask(359, 382, 0), new ScheduledTask(383, 441, 0), new ScheduledTask(441, 534, 0), new ScheduledTask(472, 518, 3), new ScheduledTask(449, 472, 3), new ScheduledTask(534, 615, 0)};
        int[] expectedProcessorEndTimes = new int[]{615, 377, 273, 518};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 609;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 46, 0), new ScheduledTask(46, 139, 0), new ScheduledTask(51, 167, 1), new ScheduledTask(48, 94, 2), new ScheduledTask(139, 185, 0), new ScheduledTask(167, 272, 1), new ScheduledTask(94, 140, 2), new ScheduledTask(185, 301, 0), new ScheduledTask(192, 273, 2), new ScheduledTask(143, 259, 3), new ScheduledTask(193, 251, 4), new ScheduledTask(272, 377, 1), new ScheduledTask(143, 189, 5), new ScheduledTask(301, 371, 0), new ScheduledTask(189, 212, 5), new ScheduledTask(259, 282, 3), new ScheduledTask(377, 435, 1), new ScheduledTask(435, 528, 1), new ScheduledTask(438, 484, 0), new ScheduledTask(443, 466, 2), new ScheduledTask(528, 609, 1)};
        int[] expectedProcessorEndTimes = new int[]{484, 609, 466, 282, 251, 212};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot98_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.98_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 14200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(3500, 3511, 0), new ScheduledTask(1800, 1813, 0), new ScheduledTask(700, 711, 0), new ScheduledTask(4600, 4611, 0), new ScheduledTask(3100, 3104, 0), new ScheduledTask(9200, 9207, 0), new ScheduledTask(8000, 8012, 0), new ScheduledTask(7700, 7705, 1), new ScheduledTask(6300, 6308, 2), new ScheduledTask(6100, 6108, 0), new ScheduledTask(5700, 5704, 0), new ScheduledTask(2300, 2309, 1), new ScheduledTask(9900, 9908, 0), new ScheduledTask(3900, 3904, 2), new ScheduledTask(2700, 2713, 3), new ScheduledTask(11400, 11413, 0), new ScheduledTask(6900, 6911, 0), new ScheduledTask(10700, 10707, 0), new ScheduledTask(12700, 12711, 0), new ScheduledTask(13800, 13804, 0)};
        int[] expectedProcessorEndTimes = new int[]{13804, 7705, 6308, 2713};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot98_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.98_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(2400, 2411, 0), new ScheduledTask(700, 713, 0), new ScheduledTask(1300, 1311, 1), new ScheduledTask(3500, 3511, 0), new ScheduledTask(2000, 2004, 0), new ScheduledTask(4600, 4607, 0), new ScheduledTask(6100, 6112, 0), new ScheduledTask(4900, 4905, 2), new ScheduledTask(5300, 5308, 1), new ScheduledTask(3300, 3308, 2), new ScheduledTask(3600, 3604, 3), new ScheduledTask(3500, 3509, 1), new ScheduledTask(5300, 5308, 0), new ScheduledTask(2800, 2804, 3), new ScheduledTask(4400, 4413, 3), new ScheduledTask(7300, 7313, 0), new ScheduledTask(5900, 5911, 2), new ScheduledTask(7000, 7007, 3), new ScheduledTask(8600, 8611, 0), new ScheduledTask(9700, 9704, 0)};
        int[] expectedProcessorEndTimes = new int[]{9704, 5308, 5911, 7007};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot98_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.98_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8850;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(700, 711, 0), new ScheduledTask(1500, 1513, 1), new ScheduledTask(1300, 1311, 3), new ScheduledTask(1800, 1811, 0), new ScheduledTask(3060, 3064, 1), new ScheduledTask(4500, 4507, 1), new ScheduledTask(2900, 2912, 0), new ScheduledTask(3200, 3205, 2), new ScheduledTask(5000, 5008, 0), new ScheduledTask(3540, 3548, 1), new ScheduledTask(4550, 4554, 2), new ScheduledTask(4100, 4109, 0), new ScheduledTask(5340, 5348, 1), new ScheduledTask(3950, 3954, 2), new ScheduledTask(3500, 3513, 3), new ScheduledTask(5800, 5813, 0), new ScheduledTask(5300, 5311, 2), new ScheduledTask(6300, 6307, 1), new ScheduledTask(7350, 7361, 0), new ScheduledTask(8450, 8454, 0)};
        int[] expectedProcessorEndTimes = new int[]{8454, 6307, 5311, 3513};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot98_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.98_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 106;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(24, 35, 0), new ScheduledTask(7, 20, 0), new ScheduledTask(13, 24, 1), new ScheduledTask(37, 48, 1), new ScheduledTask(20, 24, 0), new ScheduledTask(35, 42, 0), new ScheduledTask(48, 60, 1), new ScheduledTask(63, 68, 0), new ScheduledTask(55, 63, 0), new ScheduledTask(72, 80, 1), new ScheduledTask(68, 72, 1), new ScheduledTask(24, 33, 1), new ScheduledTask(60, 68, 1), new ScheduledTask(33, 37, 1), new ScheduledTask(42, 55, 0), new ScheduledTask(68, 81, 0), new ScheduledTask(80, 91, 1), new ScheduledTask(81, 88, 0), new ScheduledTask(91, 102, 1), new ScheduledTask(102, 106, 1)};
        int[] expectedProcessorEndTimes = new int[]{88, 106};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot98_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.98_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 18, 0), new ScheduledTask(15, 28, 1), new ScheduledTask(13, 24, 2), new ScheduledTask(18, 29, 0), new ScheduledTask(28, 32, 1), new ScheduledTask(24, 31, 2), new ScheduledTask(29, 41, 0), new ScheduledTask(32, 37, 2), new ScheduledTask(41, 49, 2), new ScheduledTask(36, 44, 1), new ScheduledTask(32, 36, 1), new ScheduledTask(29, 38, 3), new ScheduledTask(41, 49, 0), new ScheduledTask(37, 41, 2), new ScheduledTask(38, 51, 3), new ScheduledTask(49, 62, 2), new ScheduledTask(47, 58, 1), new ScheduledTask(53, 60, 0), new ScheduledTask(62, 73, 2), new ScheduledTask(73, 77, 2)};
        int[] expectedProcessorEndTimes = new int[]{60, 58, 77, 51};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot98_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.98_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 18, 0), new ScheduledTask(15, 28, 1), new ScheduledTask(13, 24, 2), new ScheduledTask(18, 29, 0), new ScheduledTask(28, 32, 1), new ScheduledTask(24, 31, 2), new ScheduledTask(36, 48, 2), new ScheduledTask(32, 37, 3), new ScheduledTask(34, 42, 4), new ScheduledTask(36, 44, 1), new ScheduledTask(32, 36, 1), new ScheduledTask(29, 38, 5), new ScheduledTask(41, 49, 5), new ScheduledTask(36, 40, 0), new ScheduledTask(37, 50, 3), new ScheduledTask(48, 61, 2), new ScheduledTask(46, 57, 1), new ScheduledTask(52, 59, 5), new ScheduledTask(61, 72, 2), new ScheduledTask(72, 76, 2)};
        int[] expectedProcessorEndTimes = new int[]{40, 57, 76, 50, 42, 59};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot98_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.98_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 13100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(700, 712, 0), new ScheduledTask(1900, 1912, 0), new ScheduledTask(2200, 2203, 1), new ScheduledTask(3100, 3112, 0), new ScheduledTask(6100, 6115, 0), new ScheduledTask(3800, 3807, 2), new ScheduledTask(5600, 5605, 0), new ScheduledTask(4000, 4005, 1), new ScheduledTask(4300, 4313, 0), new ScheduledTask(4000, 4007, 3), new ScheduledTask(8800, 8810, 0), new ScheduledTask(7600, 7612, 0), new ScheduledTask(1000, 1005, 3), new ScheduledTask(9800, 9810, 0), new ScheduledTask(8200, 8203, 3), new ScheduledTask(10800, 10805, 0), new ScheduledTask(11300, 11305, 0), new ScheduledTask(11800, 11803, 0), new ScheduledTask(12100, 12105, 0), new ScheduledTask(12600, 12605, 0)};
        int[] expectedProcessorEndTimes = new int[]{12605, 4005, 3807, 8203};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot98_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.98_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(700, 712, 0), new ScheduledTask(1100, 1112, 1), new ScheduledTask(2200, 2203, 2), new ScheduledTask(4600, 4612, 0), new ScheduledTask(3100, 3115, 0), new ScheduledTask(3500, 3507, 1), new ScheduledTask(3800, 3805, 3), new ScheduledTask(2800, 2805, 2), new ScheduledTask(5800, 5813, 0), new ScheduledTask(4100, 4107, 2), new ScheduledTask(4900, 4910, 1), new ScheduledTask(4900, 4912, 3), new ScheduledTask(1000, 1005, 3), new ScheduledTask(7200, 7210, 0), new ScheduledTask(2000, 2003, 3), new ScheduledTask(8200, 8205, 0), new ScheduledTask(8700, 8705, 0), new ScheduledTask(9200, 9203, 0), new ScheduledTask(9500, 9505, 0), new ScheduledTask(10000, 10005, 0)};
        int[] expectedProcessorEndTimes = new int[]{10005, 4910, 4107, 4912};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot98_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.98_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9040;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(700, 712, 0), new ScheduledTask(1100, 1112, 1), new ScheduledTask(1900, 1903, 0), new ScheduledTask(2940, 2952, 0), new ScheduledTask(2500, 2515, 2), new ScheduledTask(2540, 2547, 1), new ScheduledTask(4580, 4585, 1), new ScheduledTask(2200, 2205, 0), new ScheduledTask(4140, 4153, 0), new ScheduledTask(3140, 3147, 3), new ScheduledTask(3380, 3390, 1), new ScheduledTask(5180, 5192, 1), new ScheduledTask(1000, 1005, 3), new ScheduledTask(5440, 5450, 0), new ScheduledTask(2000, 2003, 3), new ScheduledTask(6640, 6645, 1), new ScheduledTask(7600, 7605, 1), new ScheduledTask(7240, 7243, 1), new ScheduledTask(7740, 7745, 0), new ScheduledTask(8440, 8445, 1)};
        int[] expectedProcessorEndTimes = new int[]{7745, 8445, 2515, 3147};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 97;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(18, 30, 1), new ScheduledTask(7, 19, 0), new ScheduledTask(30, 33, 1), new ScheduledTask(26, 38, 0), new ScheduledTask(38, 53, 0), new ScheduledTask(19, 26, 0), new ScheduledTask(58, 63, 1), new ScheduledTask(40, 45, 1), new ScheduledTask(45, 58, 1), new ScheduledTask(33, 40, 1), new ScheduledTask(53, 63, 0), new ScheduledTask(63, 75, 1), new ScheduledTask(10, 15, 1), new ScheduledTask(63, 73, 0), new ScheduledTask(15, 18, 1), new ScheduledTask(75, 80, 1), new ScheduledTask(83, 88, 1), new ScheduledTask(80, 83, 1), new ScheduledTask(85, 90, 0), new ScheduledTask(92, 97, 1)};
        int[] expectedProcessorEndTimes = new int[]{90, 97};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 19, 0), new ScheduledTask(11, 23, 1), new ScheduledTask(19, 22, 0), new ScheduledTask(23, 35, 1), new ScheduledTask(25, 40, 2), new ScheduledTask(30, 37, 3), new ScheduledTask(22, 27, 0), new ScheduledTask(27, 32, 0), new ScheduledTask(35, 48, 1), new ScheduledTask(32, 39, 0), new ScheduledTask(37, 47, 3), new ScheduledTask(40, 52, 2), new ScheduledTask(10, 15, 3), new ScheduledTask(50, 60, 1), new ScheduledTask(15, 18, 3), new ScheduledTask(60, 65, 1), new ScheduledTask(68, 73, 1), new ScheduledTask(65, 68, 1), new ScheduledTask(70, 75, 3), new ScheduledTask(77, 82, 1)};
        int[] expectedProcessorEndTimes = new int[]{39, 82, 52, 75};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 12500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(2900, 2906, 0), new ScheduledTask(5600, 5608, 0), new ScheduledTask(7100, 7111, 0), new ScheduledTask(3500, 3514, 0), new ScheduledTask(1200, 1203, 0), new ScheduledTask(6800, 6803, 0), new ScheduledTask(6400, 6404, 0), new ScheduledTask(1700, 1706, 1), new ScheduledTask(1500, 1514, 0), new ScheduledTask(1900, 1908, 2), new ScheduledTask(4900, 4907, 0), new ScheduledTask(8800, 8812, 0), new ScheduledTask(1900, 1910, 3), new ScheduledTask(6700, 6704, 2), new ScheduledTask(5300, 5303, 1), new ScheduledTask(8200, 8206, 0), new ScheduledTask(10000, 10003, 0), new ScheduledTask(7100, 7104, 1), new ScheduledTask(10300, 10314, 0), new ScheduledTask(11700, 11708, 0)};
        int[] expectedProcessorEndTimes = new int[]{11708, 7104, 6704, 1910};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(1200, 1206, 0), new ScheduledTask(1800, 1808, 0), new ScheduledTask(3000, 3011, 0), new ScheduledTask(2300, 2314, 1), new ScheduledTask(2200, 2203, 2), new ScheduledTask(2900, 2903, 3), new ScheduledTask(2600, 2604, 0), new ScheduledTask(1700, 1706, 3), new ScheduledTask(3500, 3514, 3), new ScheduledTask(2800, 2808, 2), new ScheduledTask(5600, 5607, 0), new ScheduledTask(4400, 4412, 0), new ScheduledTask(4400, 4410, 2), new ScheduledTask(5100, 5104, 1), new ScheduledTask(4100, 4103, 0), new ScheduledTask(6700, 6706, 0), new ScheduledTask(6400, 6403, 0), new ScheduledTask(5900, 5904, 1), new ScheduledTask(7300, 7314, 0), new ScheduledTask(8700, 8708, 0)};
        int[] expectedProcessorEndTimes = new int[]{8708, 5904, 4410, 3514};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8720;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(1500, 1506, 0), new ScheduledTask(2100, 2108, 0), new ScheduledTask(2900, 2911, 0), new ScheduledTask(2600, 2614, 1), new ScheduledTask(1200, 1203, 0), new ScheduledTask(4000, 4003, 0), new ScheduledTask(4300, 4304, 0), new ScheduledTask(1700, 1706, 1), new ScheduledTask(2000, 2014, 3), new ScheduledTask(1900, 1908, 2), new ScheduledTask(4280, 4287, 1), new ScheduledTask(4700, 4712, 0), new ScheduledTask(3100, 3110, 2), new ScheduledTask(4800, 4804, 3), new ScheduledTask(4600, 4603, 2), new ScheduledTask(5200, 5206, 1), new ScheduledTask(6120, 6123, 0), new ScheduledTask(5050, 5054, 2), new ScheduledTask(6520, 6534, 0), new ScheduledTask(7920, 7928, 0)};
        int[] expectedProcessorEndTimes = new int[]{7928, 5206, 5054, 4804};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(12, 18, 0), new ScheduledTask(18, 26, 0), new ScheduledTask(26, 37, 0), new ScheduledTask(23, 37, 1), new ScheduledTask(22, 25, 2), new ScheduledTask(29, 32, 3), new ScheduledTask(37, 41, 0), new ScheduledTask(17, 23, 3), new ScheduledTask(32, 46, 3), new ScheduledTask(25, 33, 2), new ScheduledTask(37, 44, 1), new ScheduledTask(41, 53, 0), new ScheduledTask(33, 43, 2), new ScheduledTask(23, 27, 3), new ScheduledTask(43, 46, 2), new ScheduledTask(46, 52, 3), new ScheduledTask(54, 57, 0), new ScheduledTask(46, 50, 2), new ScheduledTask(58, 72, 0), new ScheduledTask(72, 80, 0)};
        int[] expectedProcessorEndTimes = new int[]{80, 44, 50, 52};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 79;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(12, 18, 0), new ScheduledTask(18, 26, 0), new ScheduledTask(26, 37, 0), new ScheduledTask(23, 37, 1), new ScheduledTask(22, 25, 2), new ScheduledTask(29, 32, 3), new ScheduledTask(37, 41, 0), new ScheduledTask(17, 23, 1), new ScheduledTask(25, 39, 2), new ScheduledTask(29, 37, 4), new ScheduledTask(37, 44, 1), new ScheduledTask(41, 53, 0), new ScheduledTask(29, 39, 5), new ScheduledTask(22, 26, 5), new ScheduledTask(39, 42, 5), new ScheduledTask(45, 51, 5), new ScheduledTask(54, 57, 0), new ScheduledTask(46, 50, 4), new ScheduledTask(57, 71, 0), new ScheduledTask(71, 79, 0)};
        int[] expectedProcessorEndTimes = new int[]{79, 44, 39, 32, 50, 51};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random2_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random#2_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 14900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(2700, 2707, 0), new ScheduledTask(900, 907, 0), new ScheduledTask(6600, 6605, 0), new ScheduledTask(4900, 4905, 0), new ScheduledTask(3400, 3412, 0), new ScheduledTask(2400, 2412, 1), new ScheduledTask(1200, 1212, 2), new ScheduledTask(1800, 1812, 3), new ScheduledTask(5400, 5412, 0), new ScheduledTask(7100, 7112, 0), new ScheduledTask(1600, 1611, 0), new ScheduledTask(4600, 4603, 0), new ScheduledTask(9400, 9412, 0), new ScheduledTask(8300, 8311, 0), new ScheduledTask(10600, 10611, 0), new ScheduledTask(11700, 11704, 0), new ScheduledTask(12100, 12109, 0), new ScheduledTask(13000, 13007, 0), new ScheduledTask(13700, 13704, 0), new ScheduledTask(14100, 14108, 0)};
        int[] expectedProcessorEndTimes = new int[]{14108, 2412, 1212, 1812};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random2_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random#2_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(1100, 1107, 1), new ScheduledTask(900, 907, 0), new ScheduledTask(2500, 2505, 1), new ScheduledTask(3600, 3605, 2), new ScheduledTask(3900, 3912, 0), new ScheduledTask(2700, 2712, 0), new ScheduledTask(1200, 1212, 2), new ScheduledTask(1800, 1812, 3), new ScheduledTask(5400, 5412, 0), new ScheduledTask(3500, 3512, 1), new ScheduledTask(1600, 1611, 0), new ScheduledTask(5100, 5103, 0), new ScheduledTask(4200, 4212, 3), new ScheduledTask(6600, 6611, 0), new ScheduledTask(5000, 5011, 2), new ScheduledTask(7700, 7704, 0), new ScheduledTask(8800, 8809, 0), new ScheduledTask(8100, 8107, 0), new ScheduledTask(8400, 8404, 3), new ScheduledTask(10000, 10008, 0)};
        int[] expectedProcessorEndTimes = new int[]{10008, 3512, 5011, 8404};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random2_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random#2_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9620;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(1100, 1107, 2), new ScheduledTask(900, 907, 0), new ScheduledTask(3900, 3905, 0), new ScheduledTask(2750, 2755, 1), new ScheduledTask(2150, 2162, 2), new ScheduledTask(2700, 2712, 0), new ScheduledTask(1200, 1212, 1), new ScheduledTask(1800, 1812, 3), new ScheduledTask(3350, 3362, 1), new ScheduledTask(4400, 4412, 0), new ScheduledTask(1600, 1611, 0), new ScheduledTask(4200, 4203, 3), new ScheduledTask(3950, 3962, 2), new ScheduledTask(5700, 5711, 0), new ScheduledTask(5000, 5011, 1), new ScheduledTask(6820, 6824, 0), new ScheduledTask(7920, 7929, 0), new ScheduledTask(7220, 7227, 0), new ScheduledTask(7520, 7524, 1), new ScheduledTask(8820, 8828, 0)};
        int[] expectedProcessorEndTimes = new int[]{8828, 7524, 3962, 4203};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(11, 18, 1), new ScheduledTask(9, 16, 0), new ScheduledTask(18, 23, 1), new ScheduledTask(24, 29, 2), new ScheduledTask(30, 42, 3), new ScheduledTask(16, 28, 0), new ScheduledTask(12, 24, 2), new ScheduledTask(18, 30, 3), new ScheduledTask(29, 41, 2), new ScheduledTask(23, 35, 1), new ScheduledTask(28, 39, 0), new ScheduledTask(42, 45, 3), new ScheduledTask(35, 47, 1), new ScheduledTask(45, 56, 3), new ScheduledTask(39, 50, 0), new ScheduledTask(56, 60, 3), new ScheduledTask(67, 76, 3), new ScheduledTask(60, 67, 3), new ScheduledTask(63, 67, 2), new ScheduledTask(76, 84, 3)};
        int[] expectedProcessorEndTimes = new int[]{50, 47, 67, 84};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(11, 18, 1), new ScheduledTask(9, 16, 0), new ScheduledTask(25, 30, 2), new ScheduledTask(24, 29, 3), new ScheduledTask(28, 40, 4), new ScheduledTask(24, 36, 5), new ScheduledTask(12, 24, 5), new ScheduledTask(18, 30, 1), new ScheduledTask(29, 41, 3), new ScheduledTask(30, 42, 2), new ScheduledTask(16, 27, 0), new ScheduledTask(42, 45, 2), new ScheduledTask(30, 42, 1), new ScheduledTask(45, 56, 2), new ScheduledTask(38, 49, 5), new ScheduledTask(56, 60, 2), new ScheduledTask(67, 76, 2), new ScheduledTask(60, 67, 2), new ScheduledTask(63, 67, 5), new ScheduledTask(76, 84, 2)};
        int[] expectedProcessorEndTimes = new int[]{27, 42, 84, 41, 40, 67};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random3_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random#3_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 14800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(700, 709, 0), new ScheduledTask(1600, 1607, 0), new ScheduledTask(3200, 3202, 1), new ScheduledTask(3000, 3012, 0), new ScheduledTask(5900, 5911, 0), new ScheduledTask(4200, 4206, 0), new ScheduledTask(4800, 4811, 0), new ScheduledTask(7400, 7410, 0), new ScheduledTask(2300, 2307, 0), new ScheduledTask(5100, 5104, 1), new ScheduledTask(7000, 7004, 0), new ScheduledTask(5500, 5505, 2), new ScheduledTask(9300, 9310, 0), new ScheduledTask(3800, 3806, 3), new ScheduledTask(8400, 8409, 0), new ScheduledTask(10300, 10312, 0), new ScheduledTask(11500, 11510, 0), new ScheduledTask(12500, 12506, 0), new ScheduledTask(13100, 13107, 0), new ScheduledTask(13800, 13810, 0)};
        int[] expectedProcessorEndTimes = new int[]{13810, 5104, 5505, 3806};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random3_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random#3_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 12900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(700, 709, 0), new ScheduledTask(1600, 1607, 0), new ScheduledTask(2300, 2302, 0), new ScheduledTask(3600, 3612, 0), new ScheduledTask(2500, 2511, 0), new ScheduledTask(4800, 4806, 0), new ScheduledTask(5400, 5411, 0), new ScheduledTask(4300, 4310, 1), new ScheduledTask(2600, 2607, 2), new ScheduledTask(6000, 6004, 3), new ScheduledTask(3900, 3904, 3), new ScheduledTask(6100, 6105, 2), new ScheduledTask(7500, 7510, 0), new ScheduledTask(4800, 4806, 3), new ScheduledTask(6300, 6309, 1), new ScheduledTask(8600, 8612, 0), new ScheduledTask(9800, 9810, 0), new ScheduledTask(10800, 10806, 0), new ScheduledTask(10200, 10207, 3), new ScheduledTask(11900, 11910, 0)};
        int[] expectedProcessorEndTimes = new int[]{11910, 6309, 6105, 10207};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random3_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random#3_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 11160;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(700, 709, 0), new ScheduledTask(1600, 1607, 0), new ScheduledTask(2300, 2302, 0), new ScheduledTask(2700, 2712, 1), new ScheduledTask(2500, 2511, 0), new ScheduledTask(4140, 4146, 1), new ScheduledTask(5260, 5271, 0), new ScheduledTask(3600, 3610, 0), new ScheduledTask(2600, 2607, 3), new ScheduledTask(4860, 4864, 1), new ScheduledTask(3900, 3904, 2), new ScheduledTask(5340, 5345, 1), new ScheduledTask(6360, 6370, 0), new ScheduledTask(4000, 4006, 3), new ScheduledTask(5500, 5509, 2), new ScheduledTask(7360, 7372, 0), new ScheduledTask(8560, 8570, 0), new ScheduledTask(9560, 9566, 0), new ScheduledTask(8960, 8967, 1), new ScheduledTask(10160, 10170, 0)};
        int[] expectedProcessorEndTimes = new int[]{10170, 8967, 5509, 4006};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 114;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 16, 0), new ScheduledTask(16, 23, 0), new ScheduledTask(35, 37, 0), new ScheduledTask(23, 35, 0), new ScheduledTask(37, 48, 0), new ScheduledTask(39, 45, 1), new ScheduledTask(49, 60, 1), new ScheduledTask(52, 62, 0), new ScheduledTask(26, 33, 1), new ScheduledTask(45, 49, 1), new ScheduledTask(48, 52, 0), new ScheduledTask(60, 65, 1), new ScheduledTask(65, 75, 1), new ScheduledTask(33, 39, 1), new ScheduledTask(62, 71, 0), new ScheduledTask(76, 88, 1), new ScheduledTask(88, 98, 1), new ScheduledTask(98, 104, 1), new ScheduledTask(92, 99, 0), new ScheduledTask(104, 114, 1)};
        int[] expectedProcessorEndTimes = new int[]{99, 114};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 107;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 16, 0), new ScheduledTask(16, 23, 0), new ScheduledTask(23, 25, 0), new ScheduledTask(27, 39, 1), new ScheduledTask(25, 36, 0), new ScheduledTask(39, 45, 1), new ScheduledTask(45, 56, 1), new ScheduledTask(43, 53, 2), new ScheduledTask(26, 33, 3), new ScheduledTask(48, 52, 3), new ScheduledTask(39, 43, 3), new ScheduledTask(52, 57, 3), new ScheduledTask(59, 69, 1), new ScheduledTask(33, 39, 3), new ScheduledTask(53, 62, 2), new ScheduledTask(69, 81, 1), new ScheduledTask(81, 91, 1), new ScheduledTask(86, 92, 3), new ScheduledTask(85, 92, 2), new ScheduledTask(97, 107, 1)};
        int[] expectedProcessorEndTimes = new int[]{36, 107, 92, 92};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 107;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 16, 0), new ScheduledTask(16, 23, 0), new ScheduledTask(23, 25, 0), new ScheduledTask(27, 39, 1), new ScheduledTask(25, 36, 0), new ScheduledTask(39, 45, 1), new ScheduledTask(45, 56, 1), new ScheduledTask(43, 53, 2), new ScheduledTask(26, 33, 3), new ScheduledTask(48, 52, 4), new ScheduledTask(39, 43, 5), new ScheduledTask(52, 57, 5), new ScheduledTask(59, 69, 1), new ScheduledTask(43, 49, 5), new ScheduledTask(53, 62, 2), new ScheduledTask(69, 81, 1), new ScheduledTask(81, 91, 1), new ScheduledTask(86, 92, 5), new ScheduledTask(85, 92, 4), new ScheduledTask(97, 107, 1)};
        int[] expectedProcessorEndTimes = new int[]{36, 107, 62, 33, 92, 92};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 103;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 17, 0), new ScheduledTask(17, 30, 0), new ScheduledTask(30, 40, 0), new ScheduledTask(10, 16, 1), new ScheduledTask(52, 60, 0), new ScheduledTask(42, 47, 1), new ScheduledTask(47, 55, 1), new ScheduledTask(16, 29, 1), new ScheduledTask(32, 42, 1), new ScheduledTask(55, 61, 1), new ScheduledTask(29, 32, 1), new ScheduledTask(60, 63, 0), new ScheduledTask(40, 52, 0), new ScheduledTask(63, 71, 0), new ScheduledTask(61, 67, 1), new ScheduledTask(71, 77, 0), new ScheduledTask(77, 86, 0), new ScheduledTask(84, 93, 1), new ScheduledTask(79, 83, 1), new ScheduledTask(93, 103, 1)};
        int[] expectedProcessorEndTimes = new int[]{86, 103};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 89;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 17, 0), new ScheduledTask(17, 30, 0), new ScheduledTask(16, 26, 1), new ScheduledTask(10, 16, 1), new ScheduledTask(33, 41, 1), new ScheduledTask(41, 46, 1), new ScheduledTask(30, 38, 0), new ScheduledTask(20, 33, 2), new ScheduledTask(26, 36, 3), new ScheduledTask(36, 42, 3), new ScheduledTask(23, 26, 3), new ScheduledTask(46, 49, 1), new ScheduledTask(33, 45, 2), new ScheduledTask(49, 57, 1), new ScheduledTask(42, 48, 3), new ScheduledTask(57, 63, 1), new ScheduledTask(63, 72, 1), new ScheduledTask(70, 79, 3), new ScheduledTask(65, 69, 3), new ScheduledTask(79, 89, 3)};
        int[] expectedProcessorEndTimes = new int[]{38, 72, 45, 89};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 13800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(1000, 1007, 0), new ScheduledTask(1700, 1709, 0), new ScheduledTask(2600, 2611, 0), new ScheduledTask(3700, 3707, 0), new ScheduledTask(4400, 4410, 0), new ScheduledTask(4300, 4304, 1), new ScheduledTask(6000, 6009, 0), new ScheduledTask(4400, 4409, 2), new ScheduledTask(5400, 5406, 0), new ScheduledTask(8100, 8111, 0), new ScheduledTask(7500, 7506, 0), new ScheduledTask(7500, 7503, 3), new ScheduledTask(6900, 6906, 0), new ScheduledTask(10700, 10709, 0), new ScheduledTask(4700, 4704, 3), new ScheduledTask(6700, 6702, 1), new ScheduledTask(10000, 10007, 0), new ScheduledTask(9200, 9208, 0), new ScheduledTask(11600, 11611, 0), new ScheduledTask(12700, 12711, 0)};
        int[] expectedProcessorEndTimes = new int[]{12711, 6702, 4409, 7503};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 11200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(1000, 1007, 0), new ScheduledTask(1700, 1709, 0), new ScheduledTask(2600, 2611, 0), new ScheduledTask(3700, 3707, 0), new ScheduledTask(4400, 4410, 0), new ScheduledTask(4300, 4304, 1), new ScheduledTask(6000, 6009, 0), new ScheduledTask(4400, 4409, 2), new ScheduledTask(5400, 5406, 0), new ScheduledTask(5100, 5111, 1), new ScheduledTask(6500, 6506, 3), new ScheduledTask(5900, 5903, 3), new ScheduledTask(6900, 6906, 0), new ScheduledTask(6200, 6209, 2), new ScheduledTask(4700, 4704, 3), new ScheduledTask(5500, 5502, 3), new ScheduledTask(8300, 8307, 0), new ScheduledTask(7500, 7508, 0), new ScheduledTask(9000, 9011, 0), new ScheduledTask(10100, 10111, 0)};
        int[] expectedProcessorEndTimes = new int[]{10111, 5111, 6209, 6506};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10560;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(1000, 1007, 0), new ScheduledTask(1700, 1709, 0), new ScheduledTask(2600, 2611, 0), new ScheduledTask(3700, 3707, 0), new ScheduledTask(4400, 4410, 0), new ScheduledTask(4300, 4304, 1), new ScheduledTask(5400, 5409, 0), new ScheduledTask(4400, 4409, 2), new ScheduledTask(6300, 6306, 0), new ScheduledTask(4780, 4791, 1), new ScheduledTask(6100, 6106, 1), new ScheduledTask(5580, 5583, 3), new ScheduledTask(6900, 6906, 0), new ScheduledTask(5750, 5759, 2), new ScheduledTask(4700, 4704, 3), new ScheduledTask(6180, 6182, 3), new ScheduledTask(6820, 6827, 1), new ScheduledTask(7500, 7508, 0), new ScheduledTask(8360, 8371, 0), new ScheduledTask(9460, 9471, 0)};
        int[] expectedProcessorEndTimes = new int[]{9471, 6827, 5759, 6182};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 112;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 17, 0), new ScheduledTask(17, 26, 0), new ScheduledTask(26, 37, 0), new ScheduledTask(40, 47, 1), new ScheduledTask(53, 63, 1), new ScheduledTask(47, 51, 1), new ScheduledTask(65, 74, 0), new ScheduledTask(37, 46, 0), new ScheduledTask(63, 69, 1), new ScheduledTask(72, 83, 1), new ScheduledTask(59, 65, 0), new ScheduledTask(69, 72, 1), new ScheduledTask(74, 80, 0), new ScheduledTask(46, 55, 0), new ScheduledTask(55, 59, 0), new ScheduledTask(51, 53, 1), new ScheduledTask(83, 90, 1), new ScheduledTask(80, 88, 0), new ScheduledTask(90, 101, 1), new ScheduledTask(101, 112, 1)};
        int[] expectedProcessorEndTimes = new int[]{88, 112};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 101;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 17, 0), new ScheduledTask(17, 26, 0), new ScheduledTask(26, 37, 0), new ScheduledTask(37, 44, 0), new ScheduledTask(44, 54, 0), new ScheduledTask(43, 47, 1), new ScheduledTask(56, 65, 2), new ScheduledTask(44, 53, 3), new ScheduledTask(54, 60, 0), new ScheduledTask(47, 58, 1), new ScheduledTask(54, 60, 3), new ScheduledTask(58, 61, 1), new ScheduledTask(65, 71, 2), new ScheduledTask(60, 69, 3), new ScheduledTask(47, 51, 2), new ScheduledTask(54, 56, 2), new ScheduledTask(64, 71, 1), new ScheduledTask(71, 79, 2), new ScheduledTask(79, 90, 2), new ScheduledTask(90, 101, 2)};
        int[] expectedProcessorEndTimes = new int[]{60, 71, 101, 69};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 101;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 17, 0), new ScheduledTask(17, 26, 0), new ScheduledTask(26, 37, 0), new ScheduledTask(37, 44, 0), new ScheduledTask(44, 54, 0), new ScheduledTask(43, 47, 1), new ScheduledTask(56, 65, 1), new ScheduledTask(44, 53, 2), new ScheduledTask(54, 60, 0), new ScheduledTask(52, 63, 3), new ScheduledTask(54, 60, 4), new ScheduledTask(56, 59, 5), new ScheduledTask(65, 71, 1), new ScheduledTask(53, 62, 2), new ScheduledTask(59, 63, 5), new ScheduledTask(54, 56, 5), new ScheduledTask(64, 71, 3), new ScheduledTask(71, 79, 1), new ScheduledTask(79, 90, 1), new ScheduledTask(90, 101, 1)};
        int[] expectedProcessorEndTimes = new int[]{60, 101, 62, 71, 60, 63};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_1dot00_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_1.00_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 11300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(800, 804, 0), new ScheduledTask(3400, 3403, 0), new ScheduledTask(4400, 4413, 0), new ScheduledTask(2000, 2004, 0), new ScheduledTask(2400, 2410, 0), new ScheduledTask(4100, 4103, 0), new ScheduledTask(3700, 3704, 0), new ScheduledTask(1200, 1208, 0), new ScheduledTask(6000, 6003, 1), new ScheduledTask(5700, 5703, 2), new ScheduledTask(1500, 1507, 2), new ScheduledTask(5700, 5714, 0), new ScheduledTask(8100, 8110, 0), new ScheduledTask(2500, 2510, 3), new ScheduledTask(1200, 1208, 1), new ScheduledTask(7100, 7110, 0), new ScheduledTask(9100, 9111, 0), new ScheduledTask(7500, 7503, 2), new ScheduledTask(10200, 10204, 0), new ScheduledTask(10600, 10607, 0)};
        int[] expectedProcessorEndTimes = new int[]{10607, 6003, 7503, 2510};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_1dot00_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_1.00_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(800, 804, 0), new ScheduledTask(1500, 1503, 1), new ScheduledTask(3300, 3313, 0), new ScheduledTask(1200, 1204, 0), new ScheduledTask(1600, 1610, 0), new ScheduledTask(3000, 3003, 0), new ScheduledTask(2600, 2604, 0), new ScheduledTask(2100, 2108, 1), new ScheduledTask(2500, 2503, 2), new ScheduledTask(1800, 1803, 2), new ScheduledTask(2800, 2807, 3), new ScheduledTask(4600, 4614, 0), new ScheduledTask(3100, 3110, 2), new ScheduledTask(3700, 3710, 1), new ScheduledTask(1200, 1208, 3), new ScheduledTask(4200, 4210, 3), new ScheduledTask(6000, 6011, 0), new ScheduledTask(6200, 6203, 3), new ScheduledTask(7100, 7104, 0), new ScheduledTask(7500, 7507, 0)};
        int[] expectedProcessorEndTimes = new int[]{7507, 3710, 3110, 6203};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_1dot00_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_1.00_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 7540;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(800, 804, 0), new ScheduledTask(1200, 1203, 0), new ScheduledTask(1500, 1513, 0), new ScheduledTask(2160, 2164, 1), new ScheduledTask(2640, 2650, 1), new ScheduledTask(1800, 1803, 1), new ScheduledTask(1800, 1804, 2), new ScheduledTask(1700, 1708, 3), new ScheduledTask(3540, 3543, 2), new ScheduledTask(3300, 3303, 3), new ScheduledTask(2400, 2407, 2), new ScheduledTask(2800, 2814, 0), new ScheduledTask(4290, 4300, 0), new ScheduledTask(3840, 3850, 1), new ScheduledTask(3900, 3908, 3), new ScheduledTask(3990, 4000, 2), new ScheduledTask(5340, 5351, 0), new ScheduledTask(5500, 5503, 3), new ScheduledTask(6440, 6444, 0), new ScheduledTask(6840, 6847, 0)};
        int[] expectedProcessorEndTimes = new int[]{6847, 3850, 4000, 5503};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 87;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(12, 16, 1), new ScheduledTask(25, 28, 0), new ScheduledTask(38, 51, 1), new ScheduledTask(16, 20, 1), new ScheduledTask(20, 30, 1), new ScheduledTask(35, 38, 1), new ScheduledTask(31, 35, 1), new ScheduledTask(44, 52, 0), new ScheduledTask(31, 34, 0), new ScheduledTask(28, 31, 0), new ScheduledTask(8, 15, 0), new ScheduledTask(51, 65, 1), new ScheduledTask(34, 44, 0), new ScheduledTask(52, 62, 0), new ScheduledTask(62, 70, 0), new ScheduledTask(15, 25, 0), new ScheduledTask(65, 76, 1), new ScheduledTask(70, 73, 0), new ScheduledTask(76, 80, 1), new ScheduledTask(80, 87, 1)};
        int[] expectedProcessorEndTimes = new int[]{73, 87};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 12, 0), new ScheduledTask(15, 18, 1), new ScheduledTask(18, 31, 1), new ScheduledTask(12, 16, 0), new ScheduledTask(16, 26, 0), new ScheduledTask(25, 28, 2), new ScheduledTask(26, 30, 0), new ScheduledTask(17, 25, 2), new ScheduledTask(25, 28, 3), new ScheduledTask(22, 25, 3), new ScheduledTask(15, 22, 3), new ScheduledTask(32, 46, 1), new ScheduledTask(29, 39, 3), new ScheduledTask(28, 38, 2), new ScheduledTask(39, 47, 3), new ScheduledTask(38, 48, 2), new ScheduledTask(46, 57, 1), new ScheduledTask(47, 50, 3), new ScheduledTask(57, 61, 1), new ScheduledTask(61, 68, 1)};
        int[] expectedProcessorEndTimes = new int[]{30, 68, 48, 50};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 12, 0), new ScheduledTask(15, 18, 1), new ScheduledTask(18, 31, 1), new ScheduledTask(12, 16, 0), new ScheduledTask(16, 26, 0), new ScheduledTask(26, 29, 0), new ScheduledTask(21, 25, 2), new ScheduledTask(17, 25, 3), new ScheduledTask(25, 28, 4), new ScheduledTask(22, 25, 5), new ScheduledTask(15, 22, 5), new ScheduledTask(32, 46, 1), new ScheduledTask(29, 39, 4), new ScheduledTask(33, 43, 5), new ScheduledTask(25, 33, 5), new ScheduledTask(32, 42, 3), new ScheduledTask(46, 57, 1), new ScheduledTask(43, 46, 5), new ScheduledTask(57, 61, 1), new ScheduledTask(61, 68, 1)};
        int[] expectedProcessorEndTimes = new int[]{29, 68, 25, 42, 39, 46};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_1dot00_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_1.00_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(1200, 1203, 1), new ScheduledTask(1900, 1915, 0), new ScheduledTask(700, 712, 0), new ScheduledTask(7500, 7512, 0), new ScheduledTask(5700, 5712, 0), new ScheduledTask(3000, 3010, 1), new ScheduledTask(3800, 3806, 0), new ScheduledTask(2100, 2112, 2), new ScheduledTask(6900, 6906, 0), new ScheduledTask(5100, 5106, 0), new ScheduledTask(4400, 4407, 0), new ScheduledTask(2300, 2304, 3), new ScheduledTask(8700, 8706, 0), new ScheduledTask(4700, 4704, 3), new ScheduledTask(3400, 3404, 0), new ScheduledTask(9700, 9704, 0), new ScheduledTask(9300, 9304, 0), new ScheduledTask(7100, 7104, 3), new ScheduledTask(10100, 10103, 0), new ScheduledTask(10400, 10404, 0)};
        int[] expectedProcessorEndTimes = new int[]{10404, 3010, 2112, 7104};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_1dot00_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_1.00_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 7500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(1200, 1203, 1), new ScheduledTask(700, 715, 0), new ScheduledTask(1300, 1312, 2), new ScheduledTask(3200, 3212, 0), new ScheduledTask(1800, 1812, 1), new ScheduledTask(5400, 5410, 0), new ScheduledTask(2600, 2606, 0), new ScheduledTask(3700, 3712, 2), new ScheduledTask(4200, 4206, 1), new ScheduledTask(4600, 4606, 3), new ScheduledTask(2400, 2407, 3), new ScheduledTask(5000, 5004, 0), new ScheduledTask(4400, 4406, 0), new ScheduledTask(3800, 3804, 3), new ScheduledTask(2200, 2204, 0), new ScheduledTask(6400, 6404, 0), new ScheduledTask(5400, 5404, 1), new ScheduledTask(5800, 5804, 3), new ScheduledTask(6800, 6803, 0), new ScheduledTask(7100, 7104, 0)};
        int[] expectedProcessorEndTimes = new int[]{7104, 5404, 3712, 5804};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_1dot00_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_1.00_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 6600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(700, 703, 0), new ScheduledTask(1200, 1215, 2), new ScheduledTask(1300, 1312, 1), new ScheduledTask(2200, 2212, 0), new ScheduledTask(1000, 1012, 0), new ScheduledTask(3220, 3230, 1), new ScheduledTask(1700, 1706, 3), new ScheduledTask(3450, 3462, 2), new ScheduledTask(2900, 2906, 3), new ScheduledTask(4420, 4426, 1), new ScheduledTask(3800, 3807, 0), new ScheduledTask(2740, 2744, 1), new ScheduledTask(4500, 4506, 0), new ScheduledTask(3400, 3404, 0), new ScheduledTask(4150, 4154, 3), new ScheduledTask(5500, 5504, 0), new ScheduledTask(5100, 5104, 0), new ScheduledTask(5200, 5204, 1), new ScheduledTask(5900, 5903, 0), new ScheduledTask(6200, 6204, 0)};
        int[] expectedProcessorEndTimes = new int[]{6204, 5204, 3462, 4154};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 10, 0), new ScheduledTask(12, 27, 1), new ScheduledTask(13, 25, 2), new ScheduledTask(16, 28, 3), new ScheduledTask(10, 22, 0), new ScheduledTask(34, 44, 3), new ScheduledTask(25, 31, 2), new ScheduledTask(31, 43, 2), new ScheduledTask(22, 28, 0), new ScheduledTask(36, 42, 0), new ScheduledTask(29, 36, 0), new ScheduledTask(31, 35, 1), new ScheduledTask(28, 34, 3), new ScheduledTask(35, 39, 1), new ScheduledTask(27, 31, 1), new ScheduledTask(45, 49, 3), new ScheduledTask(39, 43, 1), new ScheduledTask(42, 46, 0), new ScheduledTask(49, 52, 3), new ScheduledTask(52, 56, 3)};
        int[] expectedProcessorEndTimes = new int[]{46, 43, 43, 56};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(12, 15, 1), new ScheduledTask(12, 27, 2), new ScheduledTask(7, 19, 0), new ScheduledTask(15, 27, 1), new ScheduledTask(24, 36, 0), new ScheduledTask(21, 31, 3), new ScheduledTask(27, 33, 4), new ScheduledTask(21, 33, 5), new ScheduledTask(36, 42, 0), new ScheduledTask(27, 33, 2), new ScheduledTask(33, 40, 2), new ScheduledTask(23, 27, 4), new ScheduledTask(27, 33, 1), new ScheduledTask(33, 37, 4), new ScheduledTask(34, 38, 5), new ScheduledTask(35, 39, 3), new ScheduledTask(42, 46, 0), new ScheduledTask(40, 44, 2), new ScheduledTask(46, 49, 0), new ScheduledTask(49, 53, 0)};
        int[] expectedProcessorEndTimes = new int[]{53, 33, 44, 39, 37, 38};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_1dot02_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_1.02_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 13000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(1200, 1213, 0), new ScheduledTask(5100, 5107, 0), new ScheduledTask(2500, 2513, 0), new ScheduledTask(7200, 7212, 0), new ScheduledTask(6300, 6309, 0), new ScheduledTask(2800, 2809, 1), new ScheduledTask(5800, 5805, 0), new ScheduledTask(4700, 4708, 2), new ScheduledTask(800, 804, 0), new ScheduledTask(9700, 9705, 0), new ScheduledTask(9300, 9304, 0), new ScheduledTask(3800, 3813, 0), new ScheduledTask(10200, 10203, 0), new ScheduledTask(1800, 1808, 3), new ScheduledTask(10500, 10511, 0), new ScheduledTask(6600, 6604, 3), new ScheduledTask(8400, 8409, 0), new ScheduledTask(9000, 9004, 3), new ScheduledTask(11600, 11609, 0), new ScheduledTask(12500, 12505, 0)};
        int[] expectedProcessorEndTimes = new int[]{12505, 2809, 4708, 9004};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_1dot02_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_1.02_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(800, 813, 0), new ScheduledTask(2100, 2107, 0), new ScheduledTask(4500, 4513, 0), new ScheduledTask(3300, 3312, 0), new ScheduledTask(3300, 3309, 1), new ScheduledTask(2400, 2409, 2), new ScheduledTask(2800, 2805, 0), new ScheduledTask(5800, 5808, 0), new ScheduledTask(1500, 1504, 2), new ScheduledTask(5100, 5105, 1), new ScheduledTask(5100, 5104, 2), new ScheduledTask(1200, 1213, 3), new ScheduledTask(6600, 6603, 0), new ScheduledTask(3800, 3808, 3), new ScheduledTask(6900, 6911, 0), new ScheduledTask(4300, 4304, 2), new ScheduledTask(5400, 5409, 3), new ScheduledTask(5900, 5904, 2), new ScheduledTask(8000, 8009, 0), new ScheduledTask(8900, 8905, 0)};
        int[] expectedProcessorEndTimes = new int[]{8905, 5105, 5904, 5409};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_1dot02_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_1.02_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(800, 813, 0), new ScheduledTask(2100, 2107, 0), new ScheduledTask(4000, 4013, 0), new ScheduledTask(2800, 2812, 0), new ScheduledTask(3300, 3309, 2), new ScheduledTask(2400, 2409, 1), new ScheduledTask(3700, 3705, 1), new ScheduledTask(5300, 5308, 0), new ScheduledTask(1500, 1504, 3), new ScheduledTask(4650, 4655, 2), new ScheduledTask(4900, 4904, 3), new ScheduledTask(2300, 2313, 3), new ScheduledTask(6100, 6103, 0), new ScheduledTask(4300, 4308, 1), new ScheduledTask(6400, 6411, 0), new ScheduledTask(5700, 5704, 3), new ScheduledTask(5260, 5269, 1), new ScheduledTask(6500, 6504, 3), new ScheduledTask(7500, 7509, 0), new ScheduledTask(8400, 8405, 0)};
        int[] expectedProcessorEndTimes = new int[]{8405, 5269, 4655, 6504};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_1dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 96;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 21, 0), new ScheduledTask(21, 28, 0), new ScheduledTask(37, 50, 0), new ScheduledTask(42, 54, 1), new ScheduledTask(28, 37, 0), new ScheduledTask(50, 59, 0), new ScheduledTask(37, 42, 1), new ScheduledTask(59, 67, 1), new ScheduledTask(25, 29, 1), new ScheduledTask(54, 59, 1), new ScheduledTask(59, 63, 0), new ScheduledTask(12, 25, 1), new ScheduledTask(67, 70, 1), new ScheduledTask(29, 37, 1), new ScheduledTask(70, 81, 1), new ScheduledTask(72, 76, 0), new ScheduledTask(63, 72, 0), new ScheduledTask(76, 80, 0), new ScheduledTask(82, 91, 1), new ScheduledTask(91, 96, 1)};
        int[] expectedProcessorEndTimes = new int[]{80, 96};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_1dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_1.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 21, 0), new ScheduledTask(21, 28, 0), new ScheduledTask(31, 44, 1), new ScheduledTask(28, 40, 0), new ScheduledTask(33, 42, 2), new ScheduledTask(24, 33, 2), new ScheduledTask(37, 42, 3), new ScheduledTask(44, 52, 1), new ScheduledTask(33, 37, 3), new ScheduledTask(46, 51, 2), new ScheduledTask(42, 46, 3), new ScheduledTask(12, 25, 3), new ScheduledTask(54, 57, 1), new ScheduledTask(46, 54, 3), new ScheduledTask(57, 68, 1), new ScheduledTask(25, 29, 3), new ScheduledTask(54, 63, 3), new ScheduledTask(29, 33, 3), new ScheduledTask(68, 77, 1), new ScheduledTask(77, 82, 1)};
        int[] expectedProcessorEndTimes = new int[]{40, 82, 51, 63};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_1dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_1.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 21, 0), new ScheduledTask(21, 28, 0), new ScheduledTask(31, 44, 1), new ScheduledTask(28, 40, 0), new ScheduledTask(33, 42, 2), new ScheduledTask(24, 33, 3), new ScheduledTask(37, 42, 4), new ScheduledTask(44, 52, 1), new ScheduledTask(38, 42, 5), new ScheduledTask(46, 51, 2), new ScheduledTask(42, 46, 4), new ScheduledTask(12, 25, 1), new ScheduledTask(54, 57, 1), new ScheduledTask(42, 50, 5), new ScheduledTask(57, 68, 1), new ScheduledTask(30, 34, 5), new ScheduledTask(50, 59, 5), new ScheduledTask(34, 38, 5), new ScheduledTask(68, 77, 1), new ScheduledTask(77, 82, 1)};
        int[] expectedProcessorEndTimes = new int[]{40, 82, 51, 33, 46, 59};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_1dot05_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_1.05_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 12900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(900, 910, 0), new ScheduledTask(1900, 1905, 0), new ScheduledTask(4400, 4408, 0), new ScheduledTask(6000, 6009, 0), new ScheduledTask(2400, 2410, 0), new ScheduledTask(5200, 5208, 0), new ScheduledTask(2100, 2108, 1), new ScheduledTask(3400, 3410, 0), new ScheduledTask(6900, 6908, 0), new ScheduledTask(3100, 3105, 2), new ScheduledTask(6100, 6103, 2), new ScheduledTask(7700, 7704, 0), new ScheduledTask(8600, 8603, 0), new ScheduledTask(8100, 8105, 0), new ScheduledTask(5200, 5205, 3), new ScheduledTask(8900, 8910, 0), new ScheduledTask(10800, 10810, 0), new ScheduledTask(9900, 9909, 0), new ScheduledTask(11800, 11804, 0), new ScheduledTask(12200, 12207, 0)};
        int[] expectedProcessorEndTimes = new int[]{12207, 2108, 6103, 5205};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_1dot05_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_1.05_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(900, 910, 0), new ScheduledTask(2900, 2905, 0), new ScheduledTask(3400, 3408, 0), new ScheduledTask(4200, 4209, 0), new ScheduledTask(1900, 1910, 0), new ScheduledTask(5100, 5108, 0), new ScheduledTask(2100, 2108, 1), new ScheduledTask(3700, 3710, 1), new ScheduledTask(5900, 5908, 0), new ScheduledTask(4100, 4105, 2), new ScheduledTask(4100, 4103, 3), new ScheduledTask(4700, 4704, 3), new ScheduledTask(6700, 6703, 0), new ScheduledTask(5500, 5505, 3), new ScheduledTask(5700, 5705, 1), new ScheduledTask(7000, 7010, 0), new ScheduledTask(8000, 8010, 0), new ScheduledTask(9000, 9009, 0), new ScheduledTask(8900, 8904, 3), new ScheduledTask(10100, 10107, 0)};
        int[] expectedProcessorEndTimes = new int[]{10107, 5705, 4105, 8904};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_1dot05_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_1.05_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(900, 910, 0), new ScheduledTask(1900, 1905, 0), new ScheduledTask(2400, 2408, 0), new ScheduledTask(3200, 3209, 0), new ScheduledTask(2400, 2410, 1), new ScheduledTask(4100, 4108, 0), new ScheduledTask(2100, 2108, 3), new ScheduledTask(3600, 3610, 1), new ScheduledTask(4900, 4908, 0), new ScheduledTask(3100, 3105, 2), new ScheduledTask(4500, 4503, 3), new ScheduledTask(3700, 3704, 3), new ScheduledTask(5700, 5703, 0), new ScheduledTask(4800, 4805, 2), new ScheduledTask(4800, 4805, 1), new ScheduledTask(6000, 6010, 0), new ScheduledTask(7000, 7010, 0), new ScheduledTask(8000, 8009, 0), new ScheduledTask(7900, 7904, 2), new ScheduledTask(8900, 8907, 0)};
        int[] expectedProcessorEndTimes = new int[]{8907, 4805, 7904, 4503};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_1dot05_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_1.05_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 103;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 19, 0), new ScheduledTask(19, 24, 0), new ScheduledTask(24, 32, 0), new ScheduledTask(32, 41, 0), new ScheduledTask(29, 39, 1), new ScheduledTask(47, 55, 1), new ScheduledTask(21, 29, 1), new ScheduledTask(50, 60, 0), new ScheduledTask(55, 63, 1), new ScheduledTask(42, 47, 1), new ScheduledTask(39, 42, 1), new ScheduledTask(41, 45, 0), new ScheduledTask(63, 66, 1), new ScheduledTask(45, 50, 0), new ScheduledTask(60, 65, 0), new ScheduledTask(67, 77, 1), new ScheduledTask(77, 87, 1), new ScheduledTask(87, 96, 1), new ScheduledTask(86, 90, 0), new ScheduledTask(96, 103, 1)};
        int[] expectedProcessorEndTimes = new int[]{90, 103};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_1dot05_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_1.05_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 94;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 19, 0), new ScheduledTask(19, 24, 0), new ScheduledTask(24, 32, 0), new ScheduledTask(38, 47, 1), new ScheduledTask(24, 34, 1), new ScheduledTask(32, 40, 0), new ScheduledTask(21, 29, 2), new ScheduledTask(40, 50, 3), new ScheduledTask(47, 55, 1), new ScheduledTask(34, 39, 3), new ScheduledTask(31, 34, 3), new ScheduledTask(29, 33, 2), new ScheduledTask(55, 58, 1), new ScheduledTask(33, 38, 2), new ScheduledTask(50, 55, 3), new ScheduledTask(58, 68, 1), new ScheduledTask(68, 78, 1), new ScheduledTask(78, 87, 3), new ScheduledTask(77, 81, 2), new ScheduledTask(87, 94, 3)};
        int[] expectedProcessorEndTimes = new int[]{40, 78, 81, 94};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_1dot05_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_1.05_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 94;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 19, 0), new ScheduledTask(19, 24, 0), new ScheduledTask(24, 32, 0), new ScheduledTask(38, 47, 1), new ScheduledTask(24, 34, 2), new ScheduledTask(32, 40, 0), new ScheduledTask(21, 29, 3), new ScheduledTask(40, 50, 4), new ScheduledTask(47, 55, 1), new ScheduledTask(41, 46, 5), new ScheduledTask(46, 49, 5), new ScheduledTask(37, 41, 5), new ScheduledTask(55, 58, 1), new ScheduledTask(49, 54, 5), new ScheduledTask(50, 55, 4), new ScheduledTask(58, 68, 1), new ScheduledTask(68, 78, 1), new ScheduledTask(78, 87, 5), new ScheduledTask(77, 81, 4), new ScheduledTask(87, 94, 5)};
        int[] expectedProcessorEndTimes = new int[]{40, 78, 34, 29, 81, 94};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 14000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(900, 909, 0), new ScheduledTask(1800, 1804, 0), new ScheduledTask(2200, 2210, 0), new ScheduledTask(3200, 3202, 0), new ScheduledTask(3400, 3407, 0), new ScheduledTask(4100, 4105, 0), new ScheduledTask(4600, 4608, 0), new ScheduledTask(5400, 5407, 0), new ScheduledTask(6100, 6109, 0), new ScheduledTask(7000, 7010, 0), new ScheduledTask(8000, 8007, 0), new ScheduledTask(8700, 8709, 0), new ScheduledTask(9600, 9607, 0), new ScheduledTask(10300, 10305, 0), new ScheduledTask(10800, 10802, 0), new ScheduledTask(11000, 11008, 0), new ScheduledTask(11800, 11808, 0), new ScheduledTask(12600, 12608, 0), new ScheduledTask(13400, 13403, 0), new ScheduledTask(13700, 13703, 0)};
        int[] expectedProcessorEndTimes = new int[]{13703};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 11700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(900, 909, 0), new ScheduledTask(1800, 1804, 0), new ScheduledTask(2200, 2210, 0), new ScheduledTask(3200, 3202, 0), new ScheduledTask(3400, 3407, 0), new ScheduledTask(4100, 4105, 0), new ScheduledTask(4600, 4608, 0), new ScheduledTask(5400, 5407, 0), new ScheduledTask(6100, 6109, 0), new ScheduledTask(4000, 4010, 1), new ScheduledTask(7000, 7007, 0), new ScheduledTask(7700, 7709, 0), new ScheduledTask(8600, 8607, 0), new ScheduledTask(6000, 6005, 1), new ScheduledTask(9300, 9302, 0), new ScheduledTask(9500, 9508, 0), new ScheduledTask(10300, 10308, 0), new ScheduledTask(7000, 7008, 1), new ScheduledTask(11100, 11103, 0), new ScheduledTask(11400, 11403, 0)};
        int[] expectedProcessorEndTimes = new int[]{11403, 7008};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 11700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(900, 909, 0), new ScheduledTask(1800, 1804, 0), new ScheduledTask(2200, 2210, 0), new ScheduledTask(3200, 3202, 0), new ScheduledTask(3400, 3407, 0), new ScheduledTask(4100, 4105, 0), new ScheduledTask(4600, 4608, 0), new ScheduledTask(5400, 5407, 0), new ScheduledTask(6100, 6109, 0), new ScheduledTask(4000, 4010, 1), new ScheduledTask(7000, 7007, 0), new ScheduledTask(7700, 7709, 0), new ScheduledTask(8600, 8607, 0), new ScheduledTask(5200, 5205, 1), new ScheduledTask(9300, 9302, 0), new ScheduledTask(9500, 9508, 0), new ScheduledTask(10300, 10308, 0), new ScheduledTask(5800, 5808, 1), new ScheduledTask(11100, 11103, 0), new ScheduledTask(11400, 11403, 0)};
        int[] expectedProcessorEndTimes = new int[]{11403, 5808};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 117;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 18, 0), new ScheduledTask(18, 22, 0), new ScheduledTask(22, 32, 0), new ScheduledTask(32, 34, 0), new ScheduledTask(34, 41, 0), new ScheduledTask(41, 46, 0), new ScheduledTask(46, 54, 0), new ScheduledTask(54, 61, 0), new ScheduledTask(61, 70, 0), new ScheduledTask(40, 50, 1), new ScheduledTask(70, 77, 0), new ScheduledTask(77, 86, 0), new ScheduledTask(86, 93, 0), new ScheduledTask(50, 55, 1), new ScheduledTask(93, 95, 0), new ScheduledTask(95, 103, 0), new ScheduledTask(103, 111, 0), new ScheduledTask(55, 63, 1), new ScheduledTask(111, 114, 0), new ScheduledTask(114, 117, 0)};
        int[] expectedProcessorEndTimes = new int[]{117, 63};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 117;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 18, 0), new ScheduledTask(18, 22, 0), new ScheduledTask(22, 32, 0), new ScheduledTask(32, 34, 0), new ScheduledTask(34, 41, 0), new ScheduledTask(41, 46, 0), new ScheduledTask(46, 54, 0), new ScheduledTask(54, 61, 0), new ScheduledTask(61, 70, 0), new ScheduledTask(40, 50, 1), new ScheduledTask(70, 77, 0), new ScheduledTask(77, 86, 0), new ScheduledTask(86, 93, 0), new ScheduledTask(50, 55, 1), new ScheduledTask(93, 95, 0), new ScheduledTask(95, 103, 0), new ScheduledTask(103, 111, 0), new ScheduledTask(55, 63, 1), new ScheduledTask(111, 114, 0), new ScheduledTask(114, 117, 0)};
        int[] expectedProcessorEndTimes = new int[]{117, 63};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 117;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 18, 0), new ScheduledTask(18, 22, 0), new ScheduledTask(22, 32, 0), new ScheduledTask(32, 34, 0), new ScheduledTask(34, 41, 0), new ScheduledTask(41, 46, 0), new ScheduledTask(46, 54, 0), new ScheduledTask(54, 61, 0), new ScheduledTask(61, 70, 0), new ScheduledTask(40, 50, 1), new ScheduledTask(70, 77, 0), new ScheduledTask(77, 86, 0), new ScheduledTask(86, 93, 0), new ScheduledTask(50, 55, 1), new ScheduledTask(93, 95, 0), new ScheduledTask(95, 103, 0), new ScheduledTask(103, 111, 0), new ScheduledTask(55, 63, 1), new ScheduledTask(111, 114, 0), new ScheduledTask(114, 117, 0)};
        int[] expectedProcessorEndTimes = new int[]{117, 63};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_10dot01_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_10.01_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 13000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(4800, 4805, 0), new ScheduledTask(6300, 6310, 0), new ScheduledTask(8000, 8006, 0), new ScheduledTask(7300, 7307, 0), new ScheduledTask(2400, 2406, 0), new ScheduledTask(1000, 1005, 0), new ScheduledTask(5700, 5706, 0), new ScheduledTask(8600, 8610, 0), new ScheduledTask(3800, 3810, 0), new ScheduledTask(5300, 5304, 0), new ScheduledTask(3000, 3008, 0), new ScheduledTask(5400, 5403, 1), new ScheduledTask(1500, 1509, 0), new ScheduledTask(4600, 4603, 2), new ScheduledTask(9600, 9610, 0), new ScheduledTask(3100, 3107, 3), new ScheduledTask(11200, 11206, 0), new ScheduledTask(10600, 10606, 0), new ScheduledTask(11800, 11803, 0), new ScheduledTask(12100, 12109, 0)};
        int[] expectedProcessorEndTimes = new int[]{12109, 5403, 4603, 3107};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_10dot01_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_10.01_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 12600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(1000, 1005, 0), new ScheduledTask(5900, 5910, 0), new ScheduledTask(7600, 7606, 0), new ScheduledTask(6900, 6907, 0), new ScheduledTask(2000, 2006, 0), new ScheduledTask(1500, 1505, 0), new ScheduledTask(5300, 5306, 0), new ScheduledTask(8800, 8810, 0), new ScheduledTask(4300, 4310, 0), new ScheduledTask(4800, 4804, 1), new ScheduledTask(3500, 3508, 0), new ScheduledTask(5000, 5003, 2), new ScheduledTask(2600, 2609, 0), new ScheduledTask(4200, 4203, 1), new ScheduledTask(10400, 10410, 0), new ScheduledTask(3600, 3607, 3), new ScheduledTask(9800, 9806, 0), new ScheduledTask(8200, 8206, 0), new ScheduledTask(11400, 11403, 0), new ScheduledTask(11700, 11709, 0)};
        int[] expectedProcessorEndTimes = new int[]{11709, 4804, 5003, 3607};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_10dot01_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_10.01_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 11200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(2600, 2605, 0), new ScheduledTask(4100, 4110, 0), new ScheduledTask(5800, 5806, 0), new ScheduledTask(5100, 5107, 0), new ScheduledTask(1000, 1006, 0), new ScheduledTask(4200, 4205, 1), new ScheduledTask(3500, 3506, 0), new ScheduledTask(6400, 6410, 0), new ScheduledTask(1600, 1610, 0), new ScheduledTask(3100, 3104, 0), new ScheduledTask(4800, 4808, 1), new ScheduledTask(4000, 4003, 3), new ScheduledTask(5760, 5769, 1), new ScheduledTask(4600, 4603, 3), new ScheduledTask(7400, 7410, 0), new ScheduledTask(6840, 6847, 1), new ScheduledTask(8600, 8606, 0), new ScheduledTask(7680, 7686, 1), new ScheduledTask(10000, 10003, 0), new ScheduledTask(10300, 10309, 0)};
        int[] expectedProcessorEndTimes = new int[]{10309, 7686, 0, 4603};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_10dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 105;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(29, 34, 0), new ScheduledTask(44, 54, 0), new ScheduledTask(67, 73, 0), new ScheduledTask(54, 61, 0), new ScheduledTask(10, 16, 0), new ScheduledTask(42, 47, 1), new ScheduledTask(38, 44, 0), new ScheduledTask(73, 83, 0), new ScheduledTask(19, 29, 0), new ScheduledTask(34, 38, 0), new ScheduledTask(47, 55, 1), new ScheduledTask(16, 19, 0), new ScheduledTask(55, 64, 1), new ScheduledTask(32, 35, 1), new ScheduledTask(83, 93, 0), new ScheduledTask(64, 71, 1), new ScheduledTask(61, 67, 0), new ScheduledTask(71, 77, 1), new ScheduledTask(93, 96, 0), new ScheduledTask(96, 105, 0)};
        int[] expectedProcessorEndTimes = new int[]{105, 77};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_10dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 105;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(26, 31, 0), new ScheduledTask(41, 51, 0), new ScheduledTask(58, 64, 0), new ScheduledTask(51, 58, 0), new ScheduledTask(10, 16, 0), new ScheduledTask(42, 47, 1), new ScheduledTask(35, 41, 0), new ScheduledTask(64, 74, 0), new ScheduledTask(16, 26, 0), new ScheduledTask(31, 35, 0), new ScheduledTask(47, 55, 1), new ScheduledTask(40, 43, 2), new ScheduledTask(55, 64, 1), new ScheduledTask(32, 35, 3), new ScheduledTask(74, 84, 0), new ScheduledTask(64, 71, 1), new ScheduledTask(84, 90, 0), new ScheduledTask(71, 77, 1), new ScheduledTask(93, 96, 0), new ScheduledTask(96, 105, 0)};
        int[] expectedProcessorEndTimes = new int[]{105, 77, 43, 35};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_10dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_10.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 105;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(29, 34, 0), new ScheduledTask(44, 54, 0), new ScheduledTask(67, 73, 0), new ScheduledTask(54, 61, 0), new ScheduledTask(10, 16, 0), new ScheduledTask(42, 47, 1), new ScheduledTask(38, 44, 0), new ScheduledTask(73, 83, 0), new ScheduledTask(19, 29, 0), new ScheduledTask(34, 38, 0), new ScheduledTask(47, 55, 1), new ScheduledTask(16, 19, 0), new ScheduledTask(55, 64, 1), new ScheduledTask(32, 35, 2), new ScheduledTask(83, 93, 0), new ScheduledTask(64, 71, 1), new ScheduledTask(61, 67, 0), new ScheduledTask(71, 77, 1), new ScheduledTask(93, 96, 0), new ScheduledTask(96, 105, 0)};
        int[] expectedProcessorEndTimes = new int[]{105, 77, 35};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_10dot02_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_10.02_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 13500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(300, 310, 0), new ScheduledTask(1300, 1302, 0), new ScheduledTask(1500, 1510, 0), new ScheduledTask(2500, 2508, 0), new ScheduledTask(3300, 3310, 0), new ScheduledTask(4300, 4305, 0), new ScheduledTask(4800, 4810, 0), new ScheduledTask(5800, 5803, 0), new ScheduledTask(6100, 6106, 0), new ScheduledTask(6700, 6707, 0), new ScheduledTask(7400, 7402, 0), new ScheduledTask(7600, 7604, 0), new ScheduledTask(8000, 8005, 0), new ScheduledTask(8500, 8504, 0), new ScheduledTask(8900, 8910, 0), new ScheduledTask(9900, 9908, 0), new ScheduledTask(10700, 10707, 0), new ScheduledTask(11400, 11408, 0), new ScheduledTask(12200, 12203, 0), new ScheduledTask(12500, 12510, 0)};
        int[] expectedProcessorEndTimes = new int[]{12510};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_10dot02_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_10.02_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 13500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(300, 310, 0), new ScheduledTask(1300, 1302, 0), new ScheduledTask(1500, 1510, 0), new ScheduledTask(2500, 2508, 0), new ScheduledTask(3300, 3310, 0), new ScheduledTask(4300, 4305, 0), new ScheduledTask(4800, 4810, 0), new ScheduledTask(5800, 5803, 0), new ScheduledTask(6100, 6106, 0), new ScheduledTask(6700, 6707, 0), new ScheduledTask(7400, 7402, 0), new ScheduledTask(7600, 7604, 0), new ScheduledTask(8000, 8005, 0), new ScheduledTask(8500, 8504, 0), new ScheduledTask(8900, 8910, 0), new ScheduledTask(9900, 9908, 0), new ScheduledTask(10700, 10707, 0), new ScheduledTask(11400, 11408, 0), new ScheduledTask(12200, 12203, 0), new ScheduledTask(12500, 12510, 0)};
        int[] expectedProcessorEndTimes = new int[]{12510};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_10dot02_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_10.02_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 13500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(300, 310, 0), new ScheduledTask(1300, 1302, 0), new ScheduledTask(1500, 1510, 0), new ScheduledTask(2500, 2508, 0), new ScheduledTask(3300, 3310, 0), new ScheduledTask(4300, 4305, 0), new ScheduledTask(4800, 4810, 0), new ScheduledTask(5800, 5803, 0), new ScheduledTask(6100, 6106, 0), new ScheduledTask(6700, 6707, 0), new ScheduledTask(7400, 7402, 0), new ScheduledTask(7600, 7604, 0), new ScheduledTask(8000, 8005, 0), new ScheduledTask(8500, 8504, 0), new ScheduledTask(8900, 8910, 0), new ScheduledTask(9900, 9908, 0), new ScheduledTask(10700, 10707, 0), new ScheduledTask(11400, 11408, 0), new ScheduledTask(12200, 12203, 0), new ScheduledTask(12500, 12510, 0)};
        int[] expectedProcessorEndTimes = new int[]{12510};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 134;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 13, 0), new ScheduledTask(13, 15, 0), new ScheduledTask(35, 45, 0), new ScheduledTask(15, 23, 0), new ScheduledTask(45, 55, 0), new ScheduledTask(40, 45, 1), new ScheduledTask(60, 70, 0), new ScheduledTask(57, 60, 0), new ScheduledTask(78, 84, 0), new ScheduledTask(23, 30, 0), new ScheduledTask(55, 57, 0), new ScheduledTask(84, 88, 0), new ScheduledTask(30, 35, 0), new ScheduledTask(70, 74, 0), new ScheduledTask(88, 98, 0), new ScheduledTask(109, 117, 0), new ScheduledTask(117, 124, 0), new ScheduledTask(101, 109, 0), new ScheduledTask(98, 101, 0), new ScheduledTask(124, 134, 0)};
        int[] expectedProcessorEndTimes = new int[]{134, 45};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 134;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 13, 0), new ScheduledTask(13, 15, 0), new ScheduledTask(35, 45, 0), new ScheduledTask(15, 23, 0), new ScheduledTask(45, 55, 0), new ScheduledTask(40, 45, 1), new ScheduledTask(60, 70, 0), new ScheduledTask(57, 60, 0), new ScheduledTask(78, 84, 0), new ScheduledTask(23, 30, 0), new ScheduledTask(55, 57, 0), new ScheduledTask(84, 88, 0), new ScheduledTask(30, 35, 0), new ScheduledTask(70, 74, 0), new ScheduledTask(88, 98, 0), new ScheduledTask(109, 117, 0), new ScheduledTask(117, 124, 0), new ScheduledTask(101, 109, 0), new ScheduledTask(98, 101, 0), new ScheduledTask(124, 134, 0)};
        int[] expectedProcessorEndTimes = new int[]{134, 45};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_10dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 134;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 13, 0), new ScheduledTask(13, 15, 0), new ScheduledTask(35, 45, 0), new ScheduledTask(15, 23, 0), new ScheduledTask(45, 55, 0), new ScheduledTask(40, 45, 1), new ScheduledTask(60, 70, 0), new ScheduledTask(57, 60, 0), new ScheduledTask(78, 84, 0), new ScheduledTask(23, 30, 0), new ScheduledTask(55, 57, 0), new ScheduledTask(84, 88, 0), new ScheduledTask(30, 35, 0), new ScheduledTask(70, 74, 0), new ScheduledTask(88, 98, 0), new ScheduledTask(109, 117, 0), new ScheduledTask(117, 124, 0), new ScheduledTask(101, 109, 0), new ScheduledTask(98, 101, 0), new ScheduledTask(124, 134, 0)};
        int[] expectedProcessorEndTimes = new int[]{134, 45};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_10dot03_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_10.03_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 11700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(200, 210, 0), new ScheduledTask(1200, 1205, 0), new ScheduledTask(1700, 1710, 0), new ScheduledTask(2700, 2704, 0), new ScheduledTask(3100, 3103, 0), new ScheduledTask(3400, 3405, 0), new ScheduledTask(3900, 3904, 0), new ScheduledTask(4300, 4305, 0), new ScheduledTask(4800, 4802, 0), new ScheduledTask(5000, 5005, 0), new ScheduledTask(5500, 5510, 0), new ScheduledTask(6500, 6504, 0), new ScheduledTask(6900, 6902, 0), new ScheduledTask(7100, 7109, 0), new ScheduledTask(8000, 8004, 0), new ScheduledTask(8400, 8407, 0), new ScheduledTask(9100, 9108, 0), new ScheduledTask(9900, 9903, 0), new ScheduledTask(10200, 10207, 0), new ScheduledTask(10900, 10908, 0)};
        int[] expectedProcessorEndTimes = new int[]{10908};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_10dot03_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_10.03_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 11200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(600, 610, 0), new ScheduledTask(3800, 3805, 0), new ScheduledTask(2500, 2510, 0), new ScheduledTask(1600, 1604, 0), new ScheduledTask(3500, 3503, 0), new ScheduledTask(2000, 2005, 0), new ScheduledTask(4300, 4304, 0), new ScheduledTask(4700, 4705, 0), new ScheduledTask(200, 202, 0), new ScheduledTask(2400, 2405, 1), new ScheduledTask(5600, 5610, 0), new ScheduledTask(5200, 5204, 0), new ScheduledTask(400, 402, 0), new ScheduledTask(7000, 7009, 0), new ScheduledTask(6600, 6604, 0), new ScheduledTask(7900, 7907, 0), new ScheduledTask(8600, 8608, 0), new ScheduledTask(9400, 9403, 0), new ScheduledTask(9700, 9707, 0), new ScheduledTask(10400, 10408, 0)};
        int[] expectedProcessorEndTimes = new int[]{10408, 2405};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_10dot03_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_10.03_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 11200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(600, 610, 0), new ScheduledTask(3800, 3805, 0), new ScheduledTask(2500, 2510, 0), new ScheduledTask(1600, 1604, 0), new ScheduledTask(3500, 3503, 0), new ScheduledTask(2000, 2005, 0), new ScheduledTask(4300, 4304, 0), new ScheduledTask(4700, 4705, 0), new ScheduledTask(200, 202, 0), new ScheduledTask(2400, 2405, 3), new ScheduledTask(5600, 5610, 0), new ScheduledTask(5200, 5204, 0), new ScheduledTask(400, 402, 0), new ScheduledTask(7000, 7009, 0), new ScheduledTask(6600, 6604, 0), new ScheduledTask(7900, 7907, 0), new ScheduledTask(8600, 8608, 0), new ScheduledTask(9400, 9403, 0), new ScheduledTask(9700, 9707, 0), new ScheduledTask(10400, 10408, 0)};
        int[] expectedProcessorEndTimes = new int[]{10408, 0, 0, 2405};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_10dot03_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_10.03_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 112;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(6, 16, 0), new ScheduledTask(38, 43, 0), new ScheduledTask(25, 35, 0), new ScheduledTask(16, 20, 0), new ScheduledTask(35, 38, 0), new ScheduledTask(20, 25, 0), new ScheduledTask(43, 47, 0), new ScheduledTask(47, 52, 0), new ScheduledTask(2, 4, 0), new ScheduledTask(24, 29, 1), new ScheduledTask(56, 66, 0), new ScheduledTask(52, 56, 0), new ScheduledTask(4, 6, 0), new ScheduledTask(70, 79, 0), new ScheduledTask(66, 70, 0), new ScheduledTask(79, 86, 0), new ScheduledTask(86, 94, 0), new ScheduledTask(94, 97, 0), new ScheduledTask(97, 104, 0), new ScheduledTask(104, 112, 0)};
        int[] expectedProcessorEndTimes = new int[]{112, 29};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_10dot03_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_10.03_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 112;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(6, 16, 0), new ScheduledTask(38, 43, 0), new ScheduledTask(25, 35, 0), new ScheduledTask(16, 20, 0), new ScheduledTask(35, 38, 0), new ScheduledTask(20, 25, 0), new ScheduledTask(43, 47, 0), new ScheduledTask(47, 52, 0), new ScheduledTask(2, 4, 0), new ScheduledTask(24, 29, 1), new ScheduledTask(56, 66, 0), new ScheduledTask(52, 56, 0), new ScheduledTask(4, 6, 0), new ScheduledTask(70, 79, 0), new ScheduledTask(66, 70, 0), new ScheduledTask(79, 86, 0), new ScheduledTask(86, 94, 0), new ScheduledTask(94, 97, 0), new ScheduledTask(97, 104, 0), new ScheduledTask(104, 112, 0)};
        int[] expectedProcessorEndTimes = new int[]{112, 29};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_10dot03_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_10.03_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 112;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(6, 16, 0), new ScheduledTask(38, 43, 0), new ScheduledTask(25, 35, 0), new ScheduledTask(16, 20, 0), new ScheduledTask(35, 38, 0), new ScheduledTask(20, 25, 0), new ScheduledTask(43, 47, 0), new ScheduledTask(47, 52, 0), new ScheduledTask(2, 4, 0), new ScheduledTask(24, 29, 1), new ScheduledTask(56, 66, 0), new ScheduledTask(52, 56, 0), new ScheduledTask(4, 6, 0), new ScheduledTask(70, 79, 0), new ScheduledTask(66, 70, 0), new ScheduledTask(79, 86, 0), new ScheduledTask(86, 94, 0), new ScheduledTask(94, 97, 0), new ScheduledTask(97, 104, 0), new ScheduledTask(104, 112, 0)};
        int[] expectedProcessorEndTimes = new int[]{112, 29};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_2dot02_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_2.02_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 9;
        int expectedScheduleEndTime = 75;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 15, 0), new ScheduledTask(15, 22, 0), new ScheduledTask(24, 34, 1), new ScheduledTask(16, 20, 2), new ScheduledTask(24, 33, 3), new ScheduledTask(31, 41, 4), new ScheduledTask(22, 27, 0), new ScheduledTask(27, 33, 0), new ScheduledTask(27, 37, 5), new ScheduledTask(20, 28, 2), new ScheduledTask(34, 43, 1), new ScheduledTask(29, 36, 6), new ScheduledTask(33, 38, 3), new ScheduledTask(42, 50, 4), new ScheduledTask(11, 17, 7), new ScheduledTask(47, 54, 1), new ScheduledTask(54, 62, 1), new ScheduledTask(26, 29, 8), new ScheduledTask(62, 70, 1), new ScheduledTask(70, 75, 1)};
        int[] expectedProcessorEndTimes = new int[]{33, 75, 28, 38, 50, 37, 36, 17, 29};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_2dot02_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_2.02_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 15, 0), new ScheduledTask(18, 25, 1), new ScheduledTask(15, 25, 0), new ScheduledTask(16, 20, 2), new ScheduledTask(27, 36, 2), new ScheduledTask(34, 44, 0), new ScheduledTask(25, 30, 1), new ScheduledTask(30, 36, 1), new ScheduledTask(27, 37, 3), new ScheduledTask(37, 45, 3), new ScheduledTask(25, 34, 0), new ScheduledTask(20, 27, 2), new ScheduledTask(36, 41, 2), new ScheduledTask(45, 53, 0), new ScheduledTask(11, 17, 3), new ScheduledTask(45, 52, 3), new ScheduledTask(56, 64, 3), new ScheduledTask(17, 20, 3), new ScheduledTask(64, 72, 3), new ScheduledTask(72, 77, 3)};
        int[] expectedProcessorEndTimes = new int[]{53, 36, 41, 77};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_2dot02_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_2.02_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 7;
        int expectedScheduleEndTime = 75;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 15, 0), new ScheduledTask(15, 22, 0), new ScheduledTask(24, 34, 1), new ScheduledTask(16, 20, 2), new ScheduledTask(28, 37, 2), new ScheduledTask(33, 43, 0), new ScheduledTask(22, 27, 0), new ScheduledTask(27, 33, 0), new ScheduledTask(27, 37, 3), new ScheduledTask(20, 28, 2), new ScheduledTask(34, 43, 1), new ScheduledTask(29, 36, 4), new ScheduledTask(37, 42, 2), new ScheduledTask(43, 51, 0), new ScheduledTask(11, 17, 5), new ScheduledTask(47, 54, 1), new ScheduledTask(54, 62, 1), new ScheduledTask(26, 29, 6), new ScheduledTask(62, 70, 1), new ScheduledTask(70, 75, 1)};
        int[] expectedProcessorEndTimes = new int[]{51, 75, 42, 37, 36, 17, 29};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_9dot96_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_9.96_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 11100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(1000, 1004, 0), new ScheduledTask(1400, 1403, 0), new ScheduledTask(1700, 1703, 0), new ScheduledTask(2000, 2007, 0), new ScheduledTask(2700, 2702, 0), new ScheduledTask(2900, 2907, 0), new ScheduledTask(3600, 3608, 0), new ScheduledTask(4400, 4404, 0), new ScheduledTask(4800, 4802, 0), new ScheduledTask(5000, 5007, 0), new ScheduledTask(5700, 5703, 0), new ScheduledTask(6000, 6007, 0), new ScheduledTask(6700, 6710, 0), new ScheduledTask(7700, 7709, 0), new ScheduledTask(8600, 8602, 0), new ScheduledTask(8800, 8810, 0), new ScheduledTask(9800, 9806, 0), new ScheduledTask(10400, 10402, 0), new ScheduledTask(10600, 10603, 0), new ScheduledTask(10900, 10902, 0)};
        int[] expectedProcessorEndTimes = new int[]{10902};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_9dot96_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_9.96_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 10500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(1000, 1004, 0), new ScheduledTask(1400, 1403, 0), new ScheduledTask(3100, 3103, 1), new ScheduledTask(7100, 7107, 0), new ScheduledTask(4100, 4102, 0), new ScheduledTask(2700, 2707, 0), new ScheduledTask(5400, 5408, 0), new ScheduledTask(5000, 5004, 0), new ScheduledTask(7800, 7802, 0), new ScheduledTask(4300, 4307, 0), new ScheduledTask(3700, 3703, 1), new ScheduledTask(3400, 3407, 0), new ScheduledTask(1700, 1710, 0), new ScheduledTask(6200, 6209, 0), new ScheduledTask(8000, 8002, 0), new ScheduledTask(8200, 8210, 0), new ScheduledTask(9200, 9206, 0), new ScheduledTask(9800, 9802, 0), new ScheduledTask(10000, 10003, 0), new ScheduledTask(10300, 10302, 0)};
        int[] expectedProcessorEndTimes = new int[]{10302, 3703};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_9dot96_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_9.96_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 10500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(4600, 4604, 0), new ScheduledTask(1700, 1703, 0), new ScheduledTask(3400, 3403, 1), new ScheduledTask(3700, 3707, 0), new ScheduledTask(5000, 5002, 0), new ScheduledTask(1000, 1007, 0), new ScheduledTask(6300, 6308, 0), new ScheduledTask(5900, 5904, 0), new ScheduledTask(4400, 4402, 0), new ScheduledTask(5200, 5207, 0), new ScheduledTask(3760, 3763, 1), new ScheduledTask(3000, 3007, 0), new ScheduledTask(2000, 2010, 0), new ScheduledTask(7100, 7109, 0), new ScheduledTask(8000, 8002, 0), new ScheduledTask(8200, 8210, 0), new ScheduledTask(9200, 9206, 0), new ScheduledTask(9800, 9802, 0), new ScheduledTask(10000, 10003, 0), new ScheduledTask(10300, 10302, 0)};
        int[] expectedProcessorEndTimes = new int[]{10302, 3763};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_9dot96_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_9.96_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 102;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(17, 21, 0), new ScheduledTask(23, 26, 0), new ScheduledTask(35, 38, 0), new ScheduledTask(26, 33, 0), new ScheduledTask(21, 23, 0), new ScheduledTask(10, 17, 0), new ScheduledTask(51, 59, 1), new ScheduledTask(37, 41, 1), new ScheduledTask(33, 35, 0), new ScheduledTask(44, 51, 1), new ScheduledTask(38, 41, 0), new ScheduledTask(68, 75, 1), new ScheduledTask(41, 51, 0), new ScheduledTask(59, 68, 1), new ScheduledTask(77, 79, 1), new ScheduledTask(79, 89, 1), new ScheduledTask(89, 95, 1), new ScheduledTask(95, 97, 1), new ScheduledTask(97, 100, 1), new ScheduledTask(100, 102, 1)};
        int[] expectedProcessorEndTimes = new int[]{51, 102};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_9dot96_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_9.96_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 102;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(17, 21, 0), new ScheduledTask(23, 26, 0), new ScheduledTask(35, 38, 0), new ScheduledTask(26, 33, 0), new ScheduledTask(21, 23, 0), new ScheduledTask(10, 17, 0), new ScheduledTask(51, 59, 1), new ScheduledTask(37, 41, 1), new ScheduledTask(33, 35, 0), new ScheduledTask(44, 51, 1), new ScheduledTask(38, 41, 0), new ScheduledTask(68, 75, 1), new ScheduledTask(41, 51, 0), new ScheduledTask(59, 68, 1), new ScheduledTask(77, 79, 1), new ScheduledTask(79, 89, 1), new ScheduledTask(89, 95, 1), new ScheduledTask(95, 97, 1), new ScheduledTask(97, 100, 1), new ScheduledTask(100, 102, 1)};
        int[] expectedProcessorEndTimes = new int[]{51, 102};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_9dot96_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_9.96_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 102;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(17, 21, 0), new ScheduledTask(23, 26, 0), new ScheduledTask(35, 38, 0), new ScheduledTask(26, 33, 0), new ScheduledTask(21, 23, 0), new ScheduledTask(10, 17, 0), new ScheduledTask(51, 59, 1), new ScheduledTask(37, 41, 1), new ScheduledTask(33, 35, 0), new ScheduledTask(44, 51, 1), new ScheduledTask(38, 41, 0), new ScheduledTask(68, 75, 1), new ScheduledTask(41, 51, 0), new ScheduledTask(59, 68, 1), new ScheduledTask(77, 79, 1), new ScheduledTask(79, 89, 1), new ScheduledTask(89, 95, 1), new ScheduledTask(95, 97, 1), new ScheduledTask(97, 100, 1), new ScheduledTask(100, 102, 1)};
        int[] expectedProcessorEndTimes = new int[]{51, 102};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_9dot97_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_9.97_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 13000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(800, 809, 0), new ScheduledTask(1700, 1706, 0), new ScheduledTask(2300, 2308, 0), new ScheduledTask(3100, 3107, 0), new ScheduledTask(3800, 3809, 0), new ScheduledTask(4700, 4704, 0), new ScheduledTask(5100, 5102, 0), new ScheduledTask(5300, 5305, 0), new ScheduledTask(5800, 5805, 0), new ScheduledTask(6300, 6306, 0), new ScheduledTask(6900, 6910, 0), new ScheduledTask(7900, 7904, 0), new ScheduledTask(8300, 8308, 0), new ScheduledTask(9100, 9107, 0), new ScheduledTask(9800, 9808, 0), new ScheduledTask(10600, 10603, 0), new ScheduledTask(10900, 10908, 0), new ScheduledTask(11700, 11702, 0), new ScheduledTask(11900, 11907, 0), new ScheduledTask(12600, 12604, 0)};
        int[] expectedProcessorEndTimes = new int[]{12604};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_9dot97_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_9.97_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 13000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(800, 809, 0), new ScheduledTask(1700, 1706, 0), new ScheduledTask(2300, 2308, 0), new ScheduledTask(3100, 3107, 0), new ScheduledTask(3800, 3809, 0), new ScheduledTask(4700, 4704, 0), new ScheduledTask(5100, 5102, 0), new ScheduledTask(5300, 5305, 0), new ScheduledTask(5800, 5805, 0), new ScheduledTask(6300, 6306, 0), new ScheduledTask(6900, 6910, 0), new ScheduledTask(7900, 7904, 0), new ScheduledTask(8300, 8308, 0), new ScheduledTask(9100, 9107, 0), new ScheduledTask(9800, 9808, 0), new ScheduledTask(10600, 10603, 0), new ScheduledTask(10900, 10908, 0), new ScheduledTask(11700, 11702, 0), new ScheduledTask(11900, 11907, 0), new ScheduledTask(12600, 12604, 0)};
        int[] expectedProcessorEndTimes = new int[]{12604};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_9dot97_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_9.97_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 12240;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 1), new ScheduledTask(960, 969, 1), new ScheduledTask(4440, 4446, 0), new ScheduledTask(5040, 5048, 0), new ScheduledTask(2040, 2047, 1), new ScheduledTask(3480, 3489, 1), new ScheduledTask(6540, 6544, 0), new ScheduledTask(6340, 6342, 0), new ScheduledTask(5840, 5845, 0), new ScheduledTask(2880, 2885, 1), new ScheduledTask(4560, 4566, 1), new ScheduledTask(7340, 7350, 0), new ScheduledTask(6940, 6944, 0), new ScheduledTask(5280, 5288, 1), new ScheduledTask(8340, 8347, 0), new ScheduledTask(10840, 10848, 0), new ScheduledTask(9740, 9743, 0), new ScheduledTask(10040, 10048, 0), new ScheduledTask(11640, 11642, 0), new ScheduledTask(9040, 9047, 0), new ScheduledTask(11840, 11844, 0)};
        int[] expectedProcessorEndTimes = new int[]{11844, 5288};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_9dot97_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_9.97_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 118;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 17, 0), new ScheduledTask(41, 47, 1), new ScheduledTask(47, 55, 1), new ScheduledTask(17, 24, 0), new ScheduledTask(39, 48, 0), new ScheduledTask(55, 59, 1), new ScheduledTask(64, 66, 1), new ScheduledTask(59, 64, 1), new ScheduledTask(24, 29, 0), new ScheduledTask(48, 54, 0), new ScheduledTask(29, 39, 0), new ScheduledTask(66, 70, 1), new ScheduledTask(54, 62, 0), new ScheduledTask(79, 86, 1), new ScheduledTask(104, 112, 1), new ScheduledTask(93, 96, 1), new ScheduledTask(96, 104, 1), new ScheduledTask(112, 114, 1), new ScheduledTask(86, 93, 1), new ScheduledTask(114, 118, 1)};
        int[] expectedProcessorEndTimes = new int[]{62, 118};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_9dot97_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_9.97_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 118;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 17, 0), new ScheduledTask(41, 47, 1), new ScheduledTask(47, 55, 1), new ScheduledTask(17, 24, 0), new ScheduledTask(39, 48, 0), new ScheduledTask(55, 59, 1), new ScheduledTask(64, 66, 1), new ScheduledTask(59, 64, 1), new ScheduledTask(24, 29, 0), new ScheduledTask(48, 54, 0), new ScheduledTask(29, 39, 0), new ScheduledTask(66, 70, 1), new ScheduledTask(54, 62, 0), new ScheduledTask(79, 86, 1), new ScheduledTask(104, 112, 1), new ScheduledTask(93, 96, 1), new ScheduledTask(96, 104, 1), new ScheduledTask(112, 114, 1), new ScheduledTask(86, 93, 1), new ScheduledTask(114, 118, 1)};
        int[] expectedProcessorEndTimes = new int[]{62, 118};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_9dot97_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_9.97_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 118;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 17, 0), new ScheduledTask(41, 47, 1), new ScheduledTask(47, 55, 1), new ScheduledTask(17, 24, 0), new ScheduledTask(39, 48, 0), new ScheduledTask(55, 59, 1), new ScheduledTask(64, 66, 1), new ScheduledTask(59, 64, 1), new ScheduledTask(24, 29, 0), new ScheduledTask(48, 54, 0), new ScheduledTask(29, 39, 0), new ScheduledTask(66, 70, 1), new ScheduledTask(54, 62, 0), new ScheduledTask(79, 86, 1), new ScheduledTask(104, 112, 1), new ScheduledTask(93, 96, 1), new ScheduledTask(96, 104, 1), new ScheduledTask(112, 114, 1), new ScheduledTask(86, 93, 1), new ScheduledTask(114, 118, 1)};
        int[] expectedProcessorEndTimes = new int[]{62, 118};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_9dot98_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_9.98_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 11000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(400, 404, 0), new ScheduledTask(800, 808, 0), new ScheduledTask(3600, 3608, 0), new ScheduledTask(1600, 1604, 0), new ScheduledTask(5300, 5309, 0), new ScheduledTask(3000, 3002, 0), new ScheduledTask(4600, 4607, 0), new ScheduledTask(6200, 6208, 0), new ScheduledTask(2600, 2604, 0), new ScheduledTask(3000, 3003, 1), new ScheduledTask(4400, 4402, 0), new ScheduledTask(2000, 2006, 0), new ScheduledTask(7900, 7907, 0), new ScheduledTask(3200, 3204, 0), new ScheduledTask(7000, 7009, 0), new ScheduledTask(8600, 8604, 0), new ScheduledTask(9900, 9902, 0), new ScheduledTask(9000, 9009, 0), new ScheduledTask(10100, 10103, 0), new ScheduledTask(10400, 10406, 0)};
        int[] expectedProcessorEndTimes = new int[]{10406, 3003};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_9dot98_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_9.98_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 10600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(400, 404, 0), new ScheduledTask(800, 808, 0), new ScheduledTask(1600, 1608, 0), new ScheduledTask(3700, 3704, 1), new ScheduledTask(3300, 3309, 0), new ScheduledTask(7400, 7402, 0), new ScheduledTask(2600, 2607, 0), new ScheduledTask(4200, 4208, 0), new ScheduledTask(6600, 6604, 0), new ScheduledTask(3000, 3003, 2), new ScheduledTask(2400, 2402, 0), new ScheduledTask(4500, 4506, 1), new ScheduledTask(5900, 5907, 0), new ScheduledTask(7800, 7804, 0), new ScheduledTask(5000, 5009, 0), new ScheduledTask(8200, 8204, 0), new ScheduledTask(9500, 9502, 0), new ScheduledTask(8600, 8609, 0), new ScheduledTask(9700, 9703, 0), new ScheduledTask(10000, 10006, 0)};
        int[] expectedProcessorEndTimes = new int[]{10006, 4506, 3003};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_9dot98_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_9.98_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10080;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(400, 404, 0), new ScheduledTask(800, 808, 0), new ScheduledTask(1600, 1608, 0), new ScheduledTask(3700, 3704, 1), new ScheduledTask(3300, 3309, 0), new ScheduledTask(7080, 7082, 0), new ScheduledTask(2600, 2607, 0), new ScheduledTask(4200, 4208, 0), new ScheduledTask(6600, 6604, 0), new ScheduledTask(3000, 3003, 3), new ScheduledTask(2400, 2402, 0), new ScheduledTask(4180, 4186, 1), new ScheduledTask(5900, 5907, 0), new ScheduledTask(7280, 7284, 0), new ScheduledTask(5000, 5009, 0), new ScheduledTask(7680, 7684, 0), new ScheduledTask(8980, 8982, 0), new ScheduledTask(8080, 8089, 0), new ScheduledTask(9180, 9183, 0), new ScheduledTask(9480, 9486, 0)};
        int[] expectedProcessorEndTimes = new int[]{9486, 4186, 0, 3003};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_9dot98_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_9.98_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 8, 0), new ScheduledTask(8, 16, 0), new ScheduledTask(16, 24, 0), new ScheduledTask(37, 41, 1), new ScheduledTask(33, 42, 0), new ScheduledTask(70, 72, 0), new ScheduledTask(26, 33, 0), new ScheduledTask(42, 50, 0), new ScheduledTask(66, 70, 0), new ScheduledTask(30, 33, 1), new ScheduledTask(24, 26, 0), new ScheduledTask(41, 47, 1), new ScheduledTask(59, 66, 0), new ScheduledTask(72, 76, 0), new ScheduledTask(50, 59, 0), new ScheduledTask(76, 80, 0), new ScheduledTask(89, 91, 0), new ScheduledTask(80, 89, 0), new ScheduledTask(91, 94, 0), new ScheduledTask(94, 100, 0)};
        int[] expectedProcessorEndTimes = new int[]{100, 47};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_9dot98_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_9.98_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 8, 0), new ScheduledTask(8, 16, 0), new ScheduledTask(16, 24, 0), new ScheduledTask(37, 41, 1), new ScheduledTask(33, 42, 0), new ScheduledTask(70, 72, 0), new ScheduledTask(26, 33, 0), new ScheduledTask(42, 50, 0), new ScheduledTask(66, 70, 0), new ScheduledTask(30, 33, 2), new ScheduledTask(24, 26, 0), new ScheduledTask(41, 47, 1), new ScheduledTask(59, 66, 0), new ScheduledTask(72, 76, 0), new ScheduledTask(50, 59, 0), new ScheduledTask(76, 80, 0), new ScheduledTask(89, 91, 0), new ScheduledTask(80, 89, 0), new ScheduledTask(91, 94, 0), new ScheduledTask(94, 100, 0)};
        int[] expectedProcessorEndTimes = new int[]{100, 47, 33};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_9dot98_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_9.98_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 8, 0), new ScheduledTask(8, 16, 0), new ScheduledTask(16, 24, 0), new ScheduledTask(37, 41, 1), new ScheduledTask(33, 42, 0), new ScheduledTask(70, 72, 0), new ScheduledTask(26, 33, 0), new ScheduledTask(42, 50, 0), new ScheduledTask(66, 70, 0), new ScheduledTask(30, 33, 2), new ScheduledTask(24, 26, 0), new ScheduledTask(41, 47, 1), new ScheduledTask(59, 66, 0), new ScheduledTask(72, 76, 0), new ScheduledTask(50, 59, 0), new ScheduledTask(76, 80, 0), new ScheduledTask(89, 91, 0), new ScheduledTask(80, 89, 0), new ScheduledTask(91, 94, 0), new ScheduledTask(94, 100, 0)};
        int[] expectedProcessorEndTimes = new int[]{100, 47, 33};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_9dot98_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_9.98_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 9400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(1100, 1102, 0), new ScheduledTask(3100, 3108, 0), new ScheduledTask(1800, 1803, 0), new ScheduledTask(6900, 6902, 0), new ScheduledTask(200, 202, 0), new ScheduledTask(6400, 6405, 0), new ScheduledTask(1300, 1303, 1), new ScheduledTask(3900, 3909, 0), new ScheduledTask(2100, 2110, 0), new ScheduledTask(4800, 4810, 0), new ScheduledTask(7100, 7102, 0), new ScheduledTask(1300, 1305, 0), new ScheduledTask(400, 407, 0), new ScheduledTask(5800, 5806, 0), new ScheduledTask(7300, 7305, 0), new ScheduledTask(7800, 7803, 0), new ScheduledTask(8300, 8304, 0), new ScheduledTask(8100, 8102, 0), new ScheduledTask(8700, 8705, 0), new ScheduledTask(9200, 9202, 0)};
        int[] expectedProcessorEndTimes = new int[]{9202, 1303};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_9dot98_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_9.98_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 8400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(1100, 1102, 0), new ScheduledTask(3100, 3108, 0), new ScheduledTask(1800, 1803, 0), new ScheduledTask(5300, 5302, 0), new ScheduledTask(200, 202, 0), new ScheduledTask(4800, 4805, 0), new ScheduledTask(1300, 1303, 1), new ScheduledTask(3900, 3909, 0), new ScheduledTask(2100, 2110, 0), new ScheduledTask(1900, 1910, 1), new ScheduledTask(5500, 5502, 0), new ScheduledTask(1300, 1305, 0), new ScheduledTask(400, 407, 0), new ScheduledTask(6200, 6206, 0), new ScheduledTask(5700, 5705, 0), new ScheduledTask(6800, 6803, 0), new ScheduledTask(7300, 7304, 0), new ScheduledTask(7100, 7102, 0), new ScheduledTask(7700, 7705, 0), new ScheduledTask(8200, 8202, 0)};
        int[] expectedProcessorEndTimes = new int[]{8202, 1910};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_9dot98_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_9.98_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8320;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(200, 202, 0), new ScheduledTask(2200, 2208, 0), new ScheduledTask(900, 903, 0), new ScheduledTask(3000, 3002, 0), new ScheduledTask(1300, 1302, 1), new ScheduledTask(3200, 3205, 0), new ScheduledTask(1300, 1303, 3), new ScheduledTask(3700, 3709, 0), new ScheduledTask(1200, 1210, 0), new ScheduledTask(1900, 1910, 3), new ScheduledTask(4600, 4602, 0), new ScheduledTask(400, 405, 0), new ScheduledTask(1540, 1547, 1), new ScheduledTask(5600, 5606, 1), new ScheduledTask(4800, 4805, 0), new ScheduledTask(6400, 6403, 1), new ScheduledTask(7000, 7004, 1), new ScheduledTask(6760, 6762, 1), new ScheduledTask(7480, 7485, 1), new ScheduledTask(8080, 8082, 1)};
        int[] expectedProcessorEndTimes = new int[]{4805, 8082, 0, 1910};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 4, 0), new ScheduledTask(4, 12, 0), new ScheduledTask(12, 15, 0), new ScheduledTask(15, 17, 0), new ScheduledTask(13, 15, 1), new ScheduledTask(17, 22, 0), new ScheduledTask(15, 18, 1), new ScheduledTask(22, 31, 0), new ScheduledTask(31, 41, 0), new ScheduledTask(18, 28, 1), new ScheduledTask(41, 43, 0), new ScheduledTask(43, 48, 0), new ScheduledTask(28, 35, 1), new ScheduledTask(35, 41, 1), new ScheduledTask(48, 53, 0), new ScheduledTask(64, 67, 1), new ScheduledTask(67, 71, 1), new ScheduledTask(71, 73, 1), new ScheduledTask(73, 78, 1), new ScheduledTask(78, 80, 1)};
        int[] expectedProcessorEndTimes = new int[]{53, 80};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 4, 0), new ScheduledTask(22, 30, 0), new ScheduledTask(9, 12, 0), new ScheduledTask(30, 32, 0), new ScheduledTask(13, 15, 1), new ScheduledTask(32, 37, 0), new ScheduledTask(13, 16, 2), new ScheduledTask(37, 46, 0), new ScheduledTask(12, 22, 0), new ScheduledTask(27, 37, 3), new ScheduledTask(46, 48, 0), new ScheduledTask(4, 9, 0), new ScheduledTask(15, 22, 1), new ScheduledTask(54, 60, 1), new ScheduledTask(48, 53, 0), new ScheduledTask(64, 67, 1), new ScheduledTask(69, 73, 1), new ScheduledTask(67, 69, 1), new ScheduledTask(73, 78, 1), new ScheduledTask(78, 80, 1)};
        int[] expectedProcessorEndTimes = new int[]{53, 80, 16, 37};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 4, 0), new ScheduledTask(22, 30, 0), new ScheduledTask(9, 12, 0), new ScheduledTask(30, 32, 0), new ScheduledTask(16, 18, 1), new ScheduledTask(32, 37, 0), new ScheduledTask(13, 16, 1), new ScheduledTask(37, 46, 0), new ScheduledTask(12, 22, 0), new ScheduledTask(27, 37, 2), new ScheduledTask(46, 48, 0), new ScheduledTask(4, 9, 0), new ScheduledTask(18, 25, 1), new ScheduledTask(54, 60, 1), new ScheduledTask(48, 53, 0), new ScheduledTask(64, 67, 1), new ScheduledTask(69, 73, 1), new ScheduledTask(67, 69, 1), new ScheduledTask(73, 78, 1), new ScheduledTask(78, 80, 1)};
        int[] expectedProcessorEndTimes = new int[]{53, 80, 37};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 13900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(900, 909, 0), new ScheduledTask(1800, 1805, 0), new ScheduledTask(2300, 2303, 0), new ScheduledTask(2600, 2604, 0), new ScheduledTask(3000, 3003, 0), new ScheduledTask(3300, 3309, 0), new ScheduledTask(4200, 4205, 0), new ScheduledTask(4700, 4710, 0), new ScheduledTask(5700, 5706, 0), new ScheduledTask(6300, 6305, 0), new ScheduledTask(6800, 6807, 0), new ScheduledTask(7500, 7505, 0), new ScheduledTask(8000, 8006, 0), new ScheduledTask(8600, 8602, 0), new ScheduledTask(8800, 8810, 0), new ScheduledTask(9800, 9808, 0), new ScheduledTask(10600, 10608, 0), new ScheduledTask(11400, 11409, 0), new ScheduledTask(12300, 12309, 0), new ScheduledTask(13200, 13207, 0)};
        int[] expectedProcessorEndTimes = new int[]{13207};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 13800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(900, 909, 0), new ScheduledTask(1800, 1805, 0), new ScheduledTask(2300, 2303, 0), new ScheduledTask(2600, 2604, 0), new ScheduledTask(3000, 3003, 0), new ScheduledTask(6600, 6609, 0), new ScheduledTask(8600, 8605, 0), new ScheduledTask(3300, 3310, 0), new ScheduledTask(5200, 5206, 0), new ScheduledTask(9100, 9105, 0), new ScheduledTask(4500, 4507, 0), new ScheduledTask(8100, 8105, 0), new ScheduledTask(7500, 7506, 0), new ScheduledTask(4300, 4302, 0), new ScheduledTask(6800, 6810, 1), new ScheduledTask(5800, 5808, 0), new ScheduledTask(9600, 9608, 0), new ScheduledTask(11300, 11309, 0), new ScheduledTask(12200, 12209, 0), new ScheduledTask(13100, 13107, 0)};
        int[] expectedProcessorEndTimes = new int[]{13107, 6810};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 13000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(900, 909, 0), new ScheduledTask(1800, 1805, 0), new ScheduledTask(2300, 2303, 0), new ScheduledTask(2600, 2604, 0), new ScheduledTask(3000, 3003, 0), new ScheduledTask(6600, 6609, 0), new ScheduledTask(8600, 8605, 0), new ScheduledTask(3300, 3310, 0), new ScheduledTask(5200, 5206, 0), new ScheduledTask(9100, 9105, 0), new ScheduledTask(4500, 4507, 0), new ScheduledTask(8100, 8105, 0), new ScheduledTask(7500, 7506, 0), new ScheduledTask(4300, 4302, 0), new ScheduledTask(6800, 6810, 1), new ScheduledTask(5800, 5808, 0), new ScheduledTask(9600, 9608, 0), new ScheduledTask(10500, 10509, 0), new ScheduledTask(11400, 11409, 0), new ScheduledTask(12300, 12307, 0)};
        int[] expectedProcessorEndTimes = new int[]{12307, 6810};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 129;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 18, 0), new ScheduledTask(18, 23, 0), new ScheduledTask(23, 26, 0), new ScheduledTask(26, 30, 0), new ScheduledTask(30, 33, 0), new ScheduledTask(66, 75, 0), new ScheduledTask(86, 91, 0), new ScheduledTask(33, 43, 0), new ScheduledTask(52, 58, 0), new ScheduledTask(91, 96, 0), new ScheduledTask(45, 52, 0), new ScheduledTask(81, 86, 0), new ScheduledTask(75, 81, 0), new ScheduledTask(43, 45, 0), new ScheduledTask(68, 78, 1), new ScheduledTask(58, 66, 0), new ScheduledTask(96, 104, 0), new ScheduledTask(104, 113, 0), new ScheduledTask(113, 122, 0), new ScheduledTask(122, 129, 0)};
        int[] expectedProcessorEndTimes = new int[]{129, 78};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 129;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 18, 0), new ScheduledTask(18, 23, 0), new ScheduledTask(23, 26, 0), new ScheduledTask(26, 30, 0), new ScheduledTask(30, 33, 0), new ScheduledTask(66, 75, 0), new ScheduledTask(86, 91, 0), new ScheduledTask(33, 43, 0), new ScheduledTask(52, 58, 0), new ScheduledTask(91, 96, 0), new ScheduledTask(45, 52, 0), new ScheduledTask(81, 86, 0), new ScheduledTask(75, 81, 0), new ScheduledTask(43, 45, 0), new ScheduledTask(68, 78, 1), new ScheduledTask(58, 66, 0), new ScheduledTask(96, 104, 0), new ScheduledTask(104, 113, 0), new ScheduledTask(113, 122, 0), new ScheduledTask(122, 129, 0)};
        int[] expectedProcessorEndTimes = new int[]{129, 78};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 129;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 18, 0), new ScheduledTask(18, 23, 0), new ScheduledTask(23, 26, 0), new ScheduledTask(26, 30, 0), new ScheduledTask(30, 33, 0), new ScheduledTask(66, 75, 0), new ScheduledTask(86, 91, 0), new ScheduledTask(33, 43, 0), new ScheduledTask(52, 58, 0), new ScheduledTask(91, 96, 0), new ScheduledTask(45, 52, 0), new ScheduledTask(81, 86, 0), new ScheduledTask(75, 81, 0), new ScheduledTask(43, 45, 0), new ScheduledTask(68, 78, 1), new ScheduledTask(58, 66, 0), new ScheduledTask(96, 104, 0), new ScheduledTask(104, 113, 0), new ScheduledTask(113, 122, 0), new ScheduledTask(122, 129, 0)};
        int[] expectedProcessorEndTimes = new int[]{129, 78};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 134;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 15, 0), new ScheduledTask(15, 17, 0), new ScheduledTask(17, 23, 0), new ScheduledTask(23, 30, 0), new ScheduledTask(30, 37, 0), new ScheduledTask(37, 42, 0), new ScheduledTask(42, 45, 0), new ScheduledTask(45, 50, 0), new ScheduledTask(50, 57, 0), new ScheduledTask(57, 62, 0), new ScheduledTask(62, 70, 0), new ScheduledTask(70, 77, 0), new ScheduledTask(77, 86, 0), new ScheduledTask(86, 96, 0), new ScheduledTask(96, 100, 0), new ScheduledTask(100, 109, 0), new ScheduledTask(109, 117, 0), new ScheduledTask(117, 121, 0), new ScheduledTask(121, 129, 0), new ScheduledTask(129, 134, 0)};
        int[] expectedProcessorEndTimes = new int[]{134};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 134;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 15, 0), new ScheduledTask(15, 17, 0), new ScheduledTask(17, 23, 0), new ScheduledTask(23, 30, 0), new ScheduledTask(30, 37, 0), new ScheduledTask(37, 42, 0), new ScheduledTask(42, 45, 0), new ScheduledTask(45, 50, 0), new ScheduledTask(50, 57, 0), new ScheduledTask(57, 62, 0), new ScheduledTask(62, 70, 0), new ScheduledTask(70, 77, 0), new ScheduledTask(77, 86, 0), new ScheduledTask(86, 96, 0), new ScheduledTask(96, 100, 0), new ScheduledTask(100, 109, 0), new ScheduledTask(109, 117, 0), new ScheduledTask(117, 121, 0), new ScheduledTask(121, 129, 0), new ScheduledTask(129, 134, 0)};
        int[] expectedProcessorEndTimes = new int[]{134};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 134;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 15, 0), new ScheduledTask(15, 17, 0), new ScheduledTask(17, 23, 0), new ScheduledTask(23, 30, 0), new ScheduledTask(30, 37, 0), new ScheduledTask(37, 42, 0), new ScheduledTask(42, 45, 0), new ScheduledTask(45, 50, 0), new ScheduledTask(50, 57, 0), new ScheduledTask(57, 62, 0), new ScheduledTask(62, 70, 0), new ScheduledTask(70, 77, 0), new ScheduledTask(77, 86, 0), new ScheduledTask(86, 96, 0), new ScheduledTask(96, 100, 0), new ScheduledTask(100, 109, 0), new ScheduledTask(109, 117, 0), new ScheduledTask(117, 121, 0), new ScheduledTask(121, 129, 0), new ScheduledTask(129, 134, 0)};
        int[] expectedProcessorEndTimes = new int[]{134};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 134;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 15, 0), new ScheduledTask(15, 17, 0), new ScheduledTask(17, 23, 0), new ScheduledTask(23, 30, 0), new ScheduledTask(30, 37, 0), new ScheduledTask(37, 42, 0), new ScheduledTask(42, 45, 0), new ScheduledTask(45, 50, 0), new ScheduledTask(50, 57, 0), new ScheduledTask(57, 62, 0), new ScheduledTask(62, 70, 0), new ScheduledTask(70, 77, 0), new ScheduledTask(77, 86, 0), new ScheduledTask(86, 96, 0), new ScheduledTask(96, 100, 0), new ScheduledTask(100, 109, 0), new ScheduledTask(109, 117, 0), new ScheduledTask(117, 121, 0), new ScheduledTask(121, 129, 0), new ScheduledTask(129, 134, 0)};
        int[] expectedProcessorEndTimes = new int[]{134};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 12700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(200, 206, 0), new ScheduledTask(800, 806, 0), new ScheduledTask(1400, 1406, 0), new ScheduledTask(2000, 2005, 0), new ScheduledTask(2500, 2505, 0), new ScheduledTask(3000, 3009, 0), new ScheduledTask(3900, 3909, 0), new ScheduledTask(4800, 4803, 0), new ScheduledTask(5100, 5104, 0), new ScheduledTask(5500, 5510, 0), new ScheduledTask(6500, 6504, 0), new ScheduledTask(6900, 6905, 0), new ScheduledTask(7400, 7406, 0), new ScheduledTask(8000, 8007, 0), new ScheduledTask(8700, 8706, 0), new ScheduledTask(9300, 9303, 0), new ScheduledTask(9600, 9605, 0), new ScheduledTask(10100, 10108, 0), new ScheduledTask(10900, 10908, 0), new ScheduledTask(11700, 11710, 0)};
        int[] expectedProcessorEndTimes = new int[]{11710};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 12700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(200, 206, 0), new ScheduledTask(800, 806, 0), new ScheduledTask(1400, 1406, 0), new ScheduledTask(2000, 2005, 0), new ScheduledTask(2500, 2505, 0), new ScheduledTask(3000, 3009, 0), new ScheduledTask(3900, 3909, 0), new ScheduledTask(4800, 4803, 0), new ScheduledTask(5100, 5104, 0), new ScheduledTask(5500, 5510, 0), new ScheduledTask(6500, 6504, 0), new ScheduledTask(6900, 6905, 0), new ScheduledTask(7400, 7406, 0), new ScheduledTask(8000, 8007, 0), new ScheduledTask(8700, 8706, 0), new ScheduledTask(9300, 9303, 0), new ScheduledTask(9600, 9605, 0), new ScheduledTask(10100, 10108, 0), new ScheduledTask(10900, 10908, 0), new ScheduledTask(11700, 11710, 0)};
        int[] expectedProcessorEndTimes = new int[]{11710};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 12520;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(200, 206, 0), new ScheduledTask(800, 806, 0), new ScheduledTask(2200, 2206, 0), new ScheduledTask(1400, 1405, 0), new ScheduledTask(2800, 2805, 0), new ScheduledTask(4800, 4809, 1), new ScheduledTask(3300, 3309, 1), new ScheduledTask(1900, 1903, 0), new ScheduledTask(3300, 3304, 0), new ScheduledTask(3700, 3710, 0), new ScheduledTask(4700, 4704, 0), new ScheduledTask(6600, 6605, 1), new ScheduledTask(5880, 5886, 1), new ScheduledTask(7600, 7607, 1), new ScheduledTask(5100, 5106, 0), new ScheduledTask(8440, 8443, 1), new ScheduledTask(9760, 9765, 1), new ScheduledTask(10360, 10368, 1), new ScheduledTask(8800, 8808, 1), new ScheduledTask(11320, 11330, 1)};
        int[] expectedProcessorEndTimes = new int[]{5106, 11330};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 117;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 8, 0), new ScheduledTask(8, 14, 0), new ScheduledTask(22, 28, 0), new ScheduledTask(14, 19, 0), new ScheduledTask(28, 33, 0), new ScheduledTask(48, 57, 1), new ScheduledTask(33, 42, 1), new ScheduledTask(19, 22, 0), new ScheduledTask(33, 37, 0), new ScheduledTask(37, 47, 0), new ScheduledTask(47, 51, 0), new ScheduledTask(63, 68, 1), new ScheduledTask(57, 63, 1), new ScheduledTask(76, 83, 1), new ScheduledTask(51, 57, 0), new ScheduledTask(83, 86, 1), new ScheduledTask(94, 99, 1), new ScheduledTask(99, 107, 1), new ScheduledTask(86, 94, 1), new ScheduledTask(107, 117, 1)};
        int[] expectedProcessorEndTimes = new int[]{57, 117};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 117;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 8, 0), new ScheduledTask(8, 14, 0), new ScheduledTask(22, 28, 0), new ScheduledTask(14, 19, 0), new ScheduledTask(28, 33, 0), new ScheduledTask(48, 57, 1), new ScheduledTask(33, 42, 1), new ScheduledTask(19, 22, 0), new ScheduledTask(33, 37, 0), new ScheduledTask(37, 47, 0), new ScheduledTask(47, 51, 0), new ScheduledTask(63, 68, 1), new ScheduledTask(57, 63, 1), new ScheduledTask(76, 83, 1), new ScheduledTask(51, 57, 0), new ScheduledTask(83, 86, 1), new ScheduledTask(94, 99, 1), new ScheduledTask(99, 107, 1), new ScheduledTask(86, 94, 1), new ScheduledTask(107, 117, 1)};
        int[] expectedProcessorEndTimes = new int[]{57, 117};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_21_CCR_9dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-3_Nodes_21_CCR_9.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 117;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 8, 0), new ScheduledTask(8, 14, 0), new ScheduledTask(14, 20, 0), new ScheduledTask(25, 30, 0), new ScheduledTask(20, 25, 0), new ScheduledTask(59, 68, 1), new ScheduledTask(44, 53, 1), new ScheduledTask(34, 37, 0), new ScheduledTask(30, 34, 0), new ScheduledTask(37, 47, 0), new ScheduledTask(47, 51, 0), new ScheduledTask(54, 59, 1), new ScheduledTask(68, 74, 1), new ScheduledTask(76, 83, 1), new ScheduledTask(51, 57, 0), new ScheduledTask(83, 86, 1), new ScheduledTask(94, 99, 1), new ScheduledTask(99, 107, 1), new ScheduledTask(86, 94, 1), new ScheduledTask(107, 117, 1)};
        int[] expectedProcessorEndTimes = new int[]{57, 117};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_4_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-4_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 1008;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 36, 0), new ScheduledTask(36, 157, 0), new ScheduledTask(157, 206, 0), new ScheduledTask(206, 303, 0), new ScheduledTask(303, 376, 0), new ScheduledTask(376, 425, 0), new ScheduledTask(425, 474, 0), new ScheduledTask(474, 583, 0), new ScheduledTask(583, 692, 0), new ScheduledTask(588, 673, 1), new ScheduledTask(593, 654, 2), new ScheduledTask(483, 544, 3), new ScheduledTask(481, 505, 4), new ScheduledTask(692, 753, 0), new ScheduledTask(505, 566, 4), new ScheduledTask(544, 593, 3), new ScheduledTask(753, 814, 0), new ScheduledTask(814, 923, 0), new ScheduledTask(820, 893, 1), new ScheduledTask(817, 878, 2), new ScheduledTask(923, 1008, 0)};
        int[] expectedProcessorEndTimes = new int[]{1008, 893, 878, 593, 566};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_4_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-4_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1070;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 36, 0), new ScheduledTask(36, 157, 0), new ScheduledTask(157, 206, 0), new ScheduledTask(206, 303, 0), new ScheduledTask(303, 376, 0), new ScheduledTask(376, 425, 0), new ScheduledTask(425, 474, 0), new ScheduledTask(474, 583, 0), new ScheduledTask(593, 702, 1), new ScheduledTask(644, 729, 0), new ScheduledTask(583, 644, 0), new ScheduledTask(483, 544, 1), new ScheduledTask(702, 726, 1), new ScheduledTask(729, 790, 0), new ScheduledTask(726, 787, 1), new ScheduledTask(544, 593, 1), new ScheduledTask(790, 851, 0), new ScheduledTask(857, 966, 1), new ScheduledTask(851, 924, 0), new ScheduledTask(924, 985, 0), new ScheduledTask(985, 1070, 0)};
        int[] expectedProcessorEndTimes = new int[]{1070, 966};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_4_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-4_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1008;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 36, 0), new ScheduledTask(36, 157, 0), new ScheduledTask(157, 206, 0), new ScheduledTask(206, 303, 0), new ScheduledTask(303, 376, 0), new ScheduledTask(376, 425, 0), new ScheduledTask(425, 474, 0), new ScheduledTask(474, 583, 0), new ScheduledTask(583, 692, 0), new ScheduledTask(588, 673, 1), new ScheduledTask(593, 654, 2), new ScheduledTask(483, 544, 3), new ScheduledTask(544, 568, 3), new ScheduledTask(692, 753, 0), new ScheduledTask(568, 629, 3), new ScheduledTask(629, 678, 3), new ScheduledTask(753, 814, 0), new ScheduledTask(814, 923, 0), new ScheduledTask(820, 893, 1), new ScheduledTask(817, 878, 2), new ScheduledTask(923, 1008, 0)};
        int[] expectedProcessorEndTimes = new int[]{1008, 893, 878, 678};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_4_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-4_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 1008;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 36, 0), new ScheduledTask(36, 157, 0), new ScheduledTask(157, 206, 0), new ScheduledTask(206, 303, 0), new ScheduledTask(303, 376, 0), new ScheduledTask(376, 425, 0), new ScheduledTask(425, 474, 0), new ScheduledTask(474, 583, 0), new ScheduledTask(583, 692, 0), new ScheduledTask(588, 673, 1), new ScheduledTask(593, 654, 2), new ScheduledTask(483, 544, 3), new ScheduledTask(481, 505, 4), new ScheduledTask(692, 753, 0), new ScheduledTask(505, 566, 4), new ScheduledTask(544, 593, 3), new ScheduledTask(753, 814, 0), new ScheduledTask(814, 923, 0), new ScheduledTask(820, 893, 1), new ScheduledTask(817, 878, 2), new ScheduledTask(923, 1008, 0)};
        int[] expectedProcessorEndTimes = new int[]{1008, 893, 878, 593, 566};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_4_Nodes_21_CCR_1dot98_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-4_Nodes_21_CCR_1.98_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 16, 0), new ScheduledTask(19, 21, 1), new ScheduledTask(21, 24, 1), new ScheduledTask(27, 30, 2), new ScheduledTask(16, 23, 0), new ScheduledTask(35, 41, 2), new ScheduledTask(24, 28, 1), new ScheduledTask(28, 35, 1), new ScheduledTask(21, 30, 3), new ScheduledTask(41, 49, 2), new ScheduledTask(27, 29, 4), new ScheduledTask(23, 29, 0), new ScheduledTask(30, 37, 3), new ScheduledTask(34, 36, 5), new ScheduledTask(49, 56, 2), new ScheduledTask(59, 68, 6), new ScheduledTask(56, 66, 2), new ScheduledTask(68, 72, 6), new ScheduledTask(59, 63, 7), new ScheduledTask(72, 80, 6)};
        int[] expectedProcessorEndTimes = new int[]{29, 35, 66, 37, 29, 36, 80, 63};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_4_Nodes_21_CCR_1dot98_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-4_Nodes_21_CCR_1.98_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 85;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 16, 0), new ScheduledTask(19, 21, 1), new ScheduledTask(21, 24, 1), new ScheduledTask(29, 32, 0), new ScheduledTask(28, 35, 1), new ScheduledTask(39, 45, 0), new ScheduledTask(24, 28, 1), new ScheduledTask(32, 39, 0), new ScheduledTask(18, 27, 0), new ScheduledTask(45, 53, 0), new ScheduledTask(16, 18, 0), new ScheduledTask(35, 41, 1), new ScheduledTask(41, 48, 1), new ScheduledTask(27, 29, 0), new ScheduledTask(53, 60, 0), new ScheduledTask(63, 72, 1), new ScheduledTask(64, 74, 0), new ScheduledTask(72, 76, 1), new ScheduledTask(60, 64, 0), new ScheduledTask(77, 85, 1)};
        int[] expectedProcessorEndTimes = new int[]{74, 85};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_4_Nodes_21_CCR_1dot98_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-4_Nodes_21_CCR_1.98_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 16, 0), new ScheduledTask(16, 18, 0), new ScheduledTask(18, 21, 0), new ScheduledTask(24, 27, 1), new ScheduledTask(25, 32, 0), new ScheduledTask(32, 38, 1), new ScheduledTask(21, 25, 0), new ScheduledTask(28, 35, 2), new ScheduledTask(21, 30, 3), new ScheduledTask(40, 48, 1), new ScheduledTask(37, 39, 3), new ScheduledTask(32, 38, 0), new ScheduledTask(30, 37, 3), new ScheduledTask(39, 41, 3), new ScheduledTask(49, 56, 1), new ScheduledTask(59, 68, 3), new ScheduledTask(56, 66, 1), new ScheduledTask(68, 72, 3), new ScheduledTask(59, 63, 2), new ScheduledTask(72, 80, 3)};
        int[] expectedProcessorEndTimes = new int[]{38, 66, 63, 80};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_4_Nodes_21_CCR_1dot98_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-4_Nodes_21_CCR_1.98_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 16, 0), new ScheduledTask(16, 18, 0), new ScheduledTask(18, 21, 0), new ScheduledTask(24, 27, 1), new ScheduledTask(25, 32, 0), new ScheduledTask(32, 38, 1), new ScheduledTask(21, 25, 0), new ScheduledTask(28, 35, 2), new ScheduledTask(21, 30, 3), new ScheduledTask(40, 48, 1), new ScheduledTask(27, 29, 4), new ScheduledTask(32, 38, 0), new ScheduledTask(30, 37, 3), new ScheduledTask(34, 36, 5), new ScheduledTask(49, 56, 1), new ScheduledTask(59, 68, 6), new ScheduledTask(56, 66, 1), new ScheduledTask(68, 72, 6), new ScheduledTask(59, 63, 7), new ScheduledTask(72, 80, 6)};
        int[] expectedProcessorEndTimes = new int[]{38, 66, 35, 37, 29, 36, 80, 63};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_4_Nodes_21_CCR_9dot97_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-4_Nodes_21_CCR_9.97_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 113;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 13, 0), new ScheduledTask(13, 17, 0), new ScheduledTask(17, 23, 0), new ScheduledTask(23, 29, 0), new ScheduledTask(73, 83, 0), new ScheduledTask(60, 69, 0), new ScheduledTask(69, 73, 0), new ScheduledTask(91, 96, 0), new ScheduledTask(41, 43, 1), new ScheduledTask(31, 41, 0), new ScheduledTask(41, 51, 0), new ScheduledTask(43, 48, 1), new ScheduledTask(56, 64, 2), new ScheduledTask(29, 31, 0), new ScheduledTask(83, 91, 0), new ScheduledTask(96, 99, 0), new ScheduledTask(51, 60, 0), new ScheduledTask(48, 55, 1), new ScheduledTask(99, 105, 0), new ScheduledTask(105, 113, 0)};
        int[] expectedProcessorEndTimes = new int[]{113, 55, 64};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_4_Nodes_21_CCR_9dot97_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-4_Nodes_21_CCR_9.97_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 113;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 13, 0), new ScheduledTask(13, 17, 0), new ScheduledTask(17, 23, 0), new ScheduledTask(23, 29, 0), new ScheduledTask(73, 83, 0), new ScheduledTask(60, 69, 0), new ScheduledTask(69, 73, 0), new ScheduledTask(91, 96, 0), new ScheduledTask(41, 43, 1), new ScheduledTask(31, 41, 0), new ScheduledTask(41, 51, 0), new ScheduledTask(43, 48, 1), new ScheduledTask(56, 64, 1), new ScheduledTask(29, 31, 0), new ScheduledTask(83, 91, 0), new ScheduledTask(96, 99, 0), new ScheduledTask(51, 60, 0), new ScheduledTask(64, 71, 1), new ScheduledTask(99, 105, 0), new ScheduledTask(105, 113, 0)};
        int[] expectedProcessorEndTimes = new int[]{113, 71};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_4_Nodes_21_CCR_9dot97_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-4_Nodes_21_CCR_9.97_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 113;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 13, 0), new ScheduledTask(13, 17, 0), new ScheduledTask(17, 23, 0), new ScheduledTask(23, 29, 0), new ScheduledTask(73, 83, 0), new ScheduledTask(60, 69, 0), new ScheduledTask(69, 73, 0), new ScheduledTask(91, 96, 0), new ScheduledTask(41, 43, 1), new ScheduledTask(31, 41, 0), new ScheduledTask(41, 51, 0), new ScheduledTask(43, 48, 1), new ScheduledTask(56, 64, 2), new ScheduledTask(29, 31, 0), new ScheduledTask(83, 91, 0), new ScheduledTask(96, 99, 0), new ScheduledTask(51, 60, 0), new ScheduledTask(48, 55, 1), new ScheduledTask(99, 105, 0), new ScheduledTask(105, 113, 0)};
        int[] expectedProcessorEndTimes = new int[]{113, 55, 64};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_4_Nodes_21_CCR_9dot97_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-4_Nodes_21_CCR_9.97_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 113;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 13, 0), new ScheduledTask(13, 17, 0), new ScheduledTask(17, 23, 0), new ScheduledTask(23, 29, 0), new ScheduledTask(73, 83, 0), new ScheduledTask(60, 69, 0), new ScheduledTask(69, 73, 0), new ScheduledTask(91, 96, 0), new ScheduledTask(41, 43, 1), new ScheduledTask(31, 41, 0), new ScheduledTask(41, 51, 0), new ScheduledTask(43, 48, 1), new ScheduledTask(56, 64, 1), new ScheduledTask(29, 31, 0), new ScheduledTask(83, 91, 0), new ScheduledTask(96, 99, 0), new ScheduledTask(51, 60, 0), new ScheduledTask(64, 71, 1), new ScheduledTask(99, 105, 0), new ScheduledTask(105, 113, 0)};
        int[] expectedProcessorEndTimes = new int[]{113, 71};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 142000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 62, 0), new ScheduledTask(18600, 18724, 0), new ScheduledTask(31000, 31078, 0), new ScheduledTask(6200, 6324, 0), new ScheduledTask(7100, 7255, 1), new ScheduledTask(76100, 76255, 0), new ScheduledTask(65200, 65309, 0), new ScheduledTask(55900, 55993, 0), new ScheduledTask(46600, 46693, 0), new ScheduledTask(38800, 38878, 0), new ScheduledTask(19600, 19755, 2), new ScheduledTask(18800, 18909, 3), new ScheduledTask(104000, 104124, 0), new ScheduledTask(91600, 91724, 0), new ScheduledTask(84200, 84231, 3), new ScheduledTask(100100, 100131, 1), new ScheduledTask(102800, 102831, 3), new ScheduledTask(121800, 121847, 0), new ScheduledTask(116400, 116431, 0), new ScheduledTask(126500, 126562, 0), new ScheduledTask(132700, 132793, 0)};
        int[] expectedProcessorEndTimes = new int[]{132793, 100131, 19755, 102831};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 96700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 62, 0), new ScheduledTask(6200, 6324, 0), new ScheduledTask(18600, 18678, 0), new ScheduledTask(6800, 6924, 1), new ScheduledTask(7100, 7255, 2), new ScheduledTask(31600, 31755, 1), new ScheduledTask(27400, 27509, 3), new ScheduledTask(54400, 54493, 0), new ScheduledTask(45100, 45193, 0), new ScheduledTask(26400, 26478, 0), new ScheduledTask(44300, 44455, 2), new ScheduledTask(34200, 34309, 0), new ScheduledTask(49200, 49324, 3), new ScheduledTask(63700, 63824, 0), new ScheduledTask(38100, 38131, 2), new ScheduledTask(68800, 68831, 1), new ScheduledTask(62600, 62631, 1), new ScheduledTask(76100, 76147, 0), new ScheduledTask(74000, 74031, 3), new ScheduledTask(81200, 81262, 0), new ScheduledTask(87400, 87493, 0)};
        int[] expectedProcessorEndTimes = new int[]{87493, 68831, 44455, 74031};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 83800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 62, 0), new ScheduledTask(6200, 6324, 0), new ScheduledTask(18600, 18678, 0), new ScheduledTask(6800, 6924, 1), new ScheduledTask(7100, 7255, 2), new ScheduledTask(30350, 30505, 2), new ScheduledTask(34760, 34869, 1), new ScheduledTask(46600, 46693, 0), new ScheduledTask(34200, 34293, 0), new ScheduledTask(26400, 26478, 0), new ScheduledTask(28880, 29035, 3), new ScheduledTask(21680, 21789, 1), new ScheduledTask(47840, 47964, 1), new ScheduledTask(55900, 56024, 0), new ScheduledTask(22680, 22711, 3), new ScheduledTask(53600, 53631, 2), new ScheduledTask(43500, 43531, 0), new ScheduledTask(60380, 60427, 2), new ScheduledTask(62720, 62751, 1), new ScheduledTask(68300, 68362, 0), new ScheduledTask(74500, 74593, 0)};
        int[] expectedProcessorEndTimes = new int[]{74593, 62751, 60427, 29035};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1070;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 62, 0), new ScheduledTask(62, 186, 0), new ScheduledTask(226, 304, 1), new ScheduledTask(186, 310, 0), new ScheduledTask(71, 226, 1), new ScheduledTask(636, 791, 0), new ScheduledTask(599, 708, 1), new ScheduledTask(506, 599, 1), new ScheduledTask(413, 506, 1), new ScheduledTask(304, 382, 1), new ScheduledTask(708, 863, 1), new ScheduledTask(496, 605, 0), new ScheduledTask(341, 465, 0), new ScheduledTask(791, 915, 0), new ScheduledTask(382, 413, 1), new ScheduledTask(310, 341, 0), new ScheduledTask(605, 636, 0), new ScheduledTask(863, 910, 1), new ScheduledTask(465, 496, 0), new ScheduledTask(915, 977, 0), new ScheduledTask(977, 1070, 0)};
        int[] expectedProcessorEndTimes = new int[]{1070, 910};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 698;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 62, 0), new ScheduledTask(62, 186, 0), new ScheduledTask(186, 264, 0), new ScheduledTask(68, 192, 1), new ScheduledTask(71, 226, 2), new ScheduledTask(264, 419, 0), new ScheduledTask(274, 383, 1), new ScheduledTask(270, 363, 2), new ScheduledTask(274, 367, 3), new ScheduledTask(267, 345, 4), new ScheduledTask(202, 357, 5), new ScheduledTask(345, 454, 4), new ScheduledTask(357, 481, 5), new ScheduledTask(419, 543, 0), new ScheduledTask(363, 394, 2), new ScheduledTask(367, 398, 3), new ScheduledTask(454, 485, 4), new ScheduledTask(485, 532, 4), new ScheduledTask(481, 512, 5), new ScheduledTask(543, 605, 0), new ScheduledTask(605, 698, 0)};
        int[] expectedProcessorEndTimes = new int[]{698, 383, 394, 398, 532, 512};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random2_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#2_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 145100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 146, 0), new ScheduledTask(29200, 29317, 0), new ScheduledTask(15300, 15344, 1), new ScheduledTask(14600, 14746, 0), new ScheduledTask(61400, 61459, 0), new ScheduledTask(40900, 40973, 0), new ScheduledTask(93800, 93917, 0), new ScheduledTask(83500, 83603, 0), new ScheduledTask(73200, 73303, 0), new ScheduledTask(48200, 48332, 0), new ScheduledTask(29500, 29588, 2), new ScheduledTask(73200, 73259, 3), new ScheduledTask(67300, 67359, 0), new ScheduledTask(48400, 48488, 1), new ScheduledTask(46800, 46844, 3), new ScheduledTask(111400, 111488, 0), new ScheduledTask(29400, 29429, 3), new ScheduledTask(82300, 82359, 2), new ScheduledTask(105500, 105559, 0), new ScheduledTask(120200, 120317, 0), new ScheduledTask(131900, 132032, 0)};
        int[] expectedProcessorEndTimes = new int[]{132032, 48488, 82359, 73259};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random2_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#2_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 102600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 146, 0), new ScheduledTask(15300, 15417, 1), new ScheduledTask(14600, 14644, 0), new ScheduledTask(15400, 15546, 2), new ScheduledTask(19000, 19059, 0), new ScheduledTask(38700, 38773, 1), new ScheduledTask(35200, 35317, 0), new ScheduledTask(25600, 25703, 3), new ScheduledTask(24900, 25003, 0), new ScheduledTask(58600, 58732, 0), new ScheduledTask(49800, 49888, 0), new ScheduledTask(46200, 46259, 3), new ScheduledTask(44600, 44659, 2), new ScheduledTask(53300, 53388, 1), new ScheduledTask(56400, 56444, 2), new ScheduledTask(58000, 58088, 3), new ScheduledTask(46900, 46929, 0), new ScheduledTask(65200, 65259, 2), new ScheduledTask(71800, 71859, 0), new ScheduledTask(77700, 77817, 0), new ScheduledTask(89400, 89532, 0)};
        int[] expectedProcessorEndTimes = new int[]{89532, 53388, 65259, 58088};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random2_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#2_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 92300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 146, 0), new ScheduledTask(15300, 15417, 1), new ScheduledTask(14600, 14644, 0), new ScheduledTask(15400, 15546, 2), new ScheduledTask(19000, 19059, 0), new ScheduledTask(36600, 36673, 0), new ScheduledTask(24900, 25017, 0), new ScheduledTask(37300, 37403, 2), new ScheduledTask(36420, 36523, 1), new ScheduledTask(43900, 44032, 0), new ScheduledTask(37600, 37688, 3), new ScheduledTask(25600, 25659, 3), new ScheduledTask(29340, 29399, 1), new ScheduledTask(48780, 48868, 1), new ScheduledTask(57100, 57144, 0), new ScheduledTask(52750, 52838, 2), new ScheduledTask(55200, 55229, 3), new ScheduledTask(61500, 61559, 0), new ScheduledTask(59340, 59399, 1), new ScheduledTask(67400, 67517, 0), new ScheduledTask(79100, 79232, 0)};
        int[] expectedProcessorEndTimes = new int[]{79232, 59399, 52838, 55229};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1134;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 146, 0), new ScheduledTask(153, 270, 1), new ScheduledTask(336, 380, 0), new ScheduledTask(146, 292, 0), new ScheduledTask(380, 439, 0), new ScheduledTask(270, 343, 1), new ScheduledTask(680, 797, 1), new ScheduledTask(660, 763, 0), new ScheduledTask(557, 660, 0), new ScheduledTask(548, 680, 1), new ScheduledTask(460, 548, 1), new ScheduledTask(498, 557, 0), new ScheduledTask(439, 498, 0), new ScheduledTask(372, 460, 1), new ScheduledTask(292, 336, 0), new ScheduledTask(797, 885, 1), new ScheduledTask(343, 372, 1), new ScheduledTask(763, 822, 0), new ScheduledTask(822, 881, 0), new ScheduledTask(885, 1002, 1), new ScheduledTask(1002, 1134, 1)};
        int[] expectedProcessorEndTimes = new int[]{881, 1134};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 814;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 146, 0), new ScheduledTask(153, 270, 1), new ScheduledTask(146, 190, 0), new ScheduledTask(154, 300, 2), new ScheduledTask(190, 249, 0), new ScheduledTask(270, 343, 1), new ScheduledTask(359, 476, 3), new ScheduledTask(256, 359, 3), new ScheduledTask(300, 403, 2), new ScheduledTask(372, 504, 1), new ScheduledTask(403, 491, 2), new ScheduledTask(308, 367, 0), new ScheduledTask(249, 308, 0), new ScheduledTask(367, 455, 0), new ScheduledTask(455, 499, 0), new ScheduledTask(476, 564, 3), new ScheduledTask(343, 372, 1), new ScheduledTask(499, 558, 0), new ScheduledTask(504, 563, 1), new ScheduledTask(565, 682, 3), new ScheduledTask(682, 814, 3)};
        int[] expectedProcessorEndTimes = new int[]{558, 563, 491, 814};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 776;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 146, 0), new ScheduledTask(146, 263, 0), new ScheduledTask(153, 197, 1), new ScheduledTask(154, 300, 2), new ScheduledTask(197, 256, 1), new ScheduledTask(263, 336, 0), new ScheduledTask(256, 373, 1), new ScheduledTask(263, 366, 3), new ScheduledTask(263, 366, 4), new ScheduledTask(336, 468, 0), new ScheduledTask(300, 388, 2), new ScheduledTask(263, 322, 5), new ScheduledTask(322, 381, 5), new ScheduledTask(366, 454, 3), new ScheduledTask(366, 410, 4), new ScheduledTask(381, 469, 5), new ScheduledTask(373, 402, 1), new ScheduledTask(410, 469, 4), new ScheduledTask(468, 527, 0), new ScheduledTask(527, 644, 0), new ScheduledTask(644, 776, 0)};
        int[] expectedProcessorEndTimes = new int[]{776, 402, 388, 454, 469, 469};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random3_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#3_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 127400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 98, 0), new ScheduledTask(9800, 9828, 0), new ScheduledTask(12600, 12642, 0), new ScheduledTask(16800, 16898, 0), new ScheduledTask(32200, 32340, 0), new ScheduledTask(27000, 27084, 1), new ScheduledTask(98000, 98112, 0), new ScheduledTask(86800, 86912, 0), new ScheduledTask(67200, 67312, 0), new ScheduledTask(29400, 29428, 0), new ScheduledTask(47200, 47298, 2), new ScheduledTask(26600, 26628, 0), new ScheduledTask(58800, 58884, 0), new ScheduledTask(33100, 33226, 3), new ScheduledTask(46200, 46326, 0), new ScheduledTask(27400, 27428, 2), new ScheduledTask(78400, 78484, 0), new ScheduledTask(109200, 109256, 0), new ScheduledTask(77400, 77456, 1), new ScheduledTask(114800, 114884, 0), new ScheduledTask(123200, 123242, 0)};
        int[] expectedProcessorEndTimes = new int[]{123242, 77456, 47298, 33226};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random3_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#3_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 93800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 98, 0), new ScheduledTask(9800, 9828, 0), new ScheduledTask(12600, 12642, 0), new ScheduledTask(16800, 16898, 0), new ScheduledTask(29400, 29540, 0), new ScheduledTask(33000, 33084, 1), new ScheduledTask(49800, 49912, 1), new ScheduledTask(64400, 64512, 0), new ScheduledTask(53200, 53312, 0), new ScheduledTask(27400, 27428, 1), new ScheduledTask(43400, 43498, 0), new ScheduledTask(26600, 26628, 0), new ScheduledTask(44200, 44284, 2), new ScheduledTask(54800, 54926, 3), new ScheduledTask(29600, 29726, 3), new ScheduledTask(27400, 27428, 2), new ScheduledTask(61000, 61084, 2), new ScheduledTask(75600, 75656, 0), new ScheduledTask(33000, 33056, 2), new ScheduledTask(81200, 81284, 0), new ScheduledTask(89600, 89642, 0)};
        int[] expectedProcessorEndTimes = new int[]{89642, 49912, 61084, 54926};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random3_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#3_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 84280;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 98, 0), new ScheduledTask(9800, 9828, 0), new ScheduledTask(12600, 12642, 0), new ScheduledTask(16800, 16898, 0), new ScheduledTask(26600, 26740, 0), new ScheduledTask(27000, 27084, 2), new ScheduledTask(41000, 41112, 2), new ScheduledTask(54600, 54712, 0), new ScheduledTask(43400, 43512, 0), new ScheduledTask(27400, 27428, 1), new ScheduledTask(44200, 44298, 3), new ScheduledTask(40600, 40628, 0), new ScheduledTask(45880, 45964, 1), new ScheduledTask(30760, 30886, 1), new ScheduledTask(55960, 56086, 1), new ScheduledTask(27400, 27428, 3), new ScheduledTask(57800, 57884, 2), new ScheduledTask(65800, 65856, 0), new ScheduledTask(33000, 33056, 3), new ScheduledTask(71680, 71764, 0), new ScheduledTask(80080, 80122, 0)};
        int[] expectedProcessorEndTimes = new int[]{80122, 56086, 57884, 44298};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1036;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 98, 0), new ScheduledTask(98, 126, 0), new ScheduledTask(126, 168, 0), new ScheduledTask(168, 266, 0), new ScheduledTask(266, 406, 0), new ScheduledTask(270, 354, 1), new ScheduledTask(732, 844, 1), new ScheduledTask(620, 732, 1), new ScheduledTask(410, 522, 1), new ScheduledTask(382, 410, 1), new ScheduledTask(522, 620, 1), new ScheduledTask(354, 382, 1), new ScheduledTask(700, 784, 0), new ScheduledTask(784, 910, 0), new ScheduledTask(574, 700, 0), new ScheduledTask(490, 518, 0), new ScheduledTask(406, 490, 0), new ScheduledTask(844, 900, 1), new ScheduledTask(518, 574, 0), new ScheduledTask(910, 994, 0), new ScheduledTask(994, 1036, 0)};
        int[] expectedProcessorEndTimes = new int[]{1036, 900};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 770;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 98, 0), new ScheduledTask(98, 126, 0), new ScheduledTask(126, 168, 0), new ScheduledTask(168, 266, 0), new ScheduledTask(266, 406, 0), new ScheduledTask(302, 386, 1), new ScheduledTask(428, 540, 2), new ScheduledTask(410, 522, 1), new ScheduledTask(437, 549, 3), new ScheduledTask(274, 302, 1), new ScheduledTask(490, 588, 0), new ScheduledTask(274, 302, 2), new ScheduledTask(406, 490, 0), new ScheduledTask(311, 437, 3), new ScheduledTask(302, 428, 2), new ScheduledTask(274, 302, 3), new ScheduledTask(549, 633, 3), new ScheduledTask(588, 644, 0), new ScheduledTask(540, 596, 2), new ScheduledTask(644, 728, 0), new ScheduledTask(728, 770, 0)};
        int[] expectedProcessorEndTimes = new int[]{770, 522, 596, 633};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 706;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 98, 0), new ScheduledTask(98, 126, 0), new ScheduledTask(126, 168, 0), new ScheduledTask(168, 266, 0), new ScheduledTask(266, 406, 0), new ScheduledTask(302, 386, 1), new ScheduledTask(406, 518, 0), new ScheduledTask(410, 522, 1), new ScheduledTask(410, 522, 2), new ScheduledTask(274, 302, 1), new ScheduledTask(416, 514, 3), new ScheduledTask(274, 302, 4), new ScheduledTask(437, 521, 5), new ScheduledTask(311, 437, 5), new ScheduledTask(302, 428, 4), new ScheduledTask(274, 302, 5), new ScheduledTask(484, 568, 4), new ScheduledTask(524, 580, 5), new ScheduledTask(428, 484, 4), new ScheduledTask(580, 664, 5), new ScheduledTask(664, 706, 5)};
        int[] expectedProcessorEndTimes = new int[]{518, 522, 522, 514, 568, 706};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random4_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#4_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 133100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 93, 0), new ScheduledTask(9300, 9404, 0), new ScheduledTask(19700, 19746, 0), new ScheduledTask(24300, 24346, 0), new ScheduledTask(28900, 29016, 0), new ScheduledTask(40500, 40558, 0), new ScheduledTask(57900, 57969, 0), new ScheduledTask(46300, 46416, 0), new ScheduledTask(76400, 76516, 0), new ScheduledTask(46900, 46969, 1), new ScheduledTask(47100, 47123, 2), new ScheduledTask(64800, 64916, 0), new ScheduledTask(58200, 58269, 3), new ScheduledTask(93800, 93869, 0), new ScheduledTask(88000, 88058, 0), new ScheduledTask(100700, 100804, 0), new ScheduledTask(119200, 119316, 0), new ScheduledTask(111100, 111181, 0), new ScheduledTask(111300, 111323, 1), new ScheduledTask(111400, 111423, 3), new ScheduledTask(130800, 130823, 0)};
        int[] expectedProcessorEndTimes = new int[]{130823, 111323, 47123, 111423};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random4_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#4_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 107600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 93, 0), new ScheduledTask(9300, 9404, 0), new ScheduledTask(19700, 19746, 0), new ScheduledTask(24300, 24346, 0), new ScheduledTask(28900, 29016, 0), new ScheduledTask(40500, 40558, 0), new ScheduledTask(46300, 46369, 0), new ScheduledTask(46600, 46716, 1), new ScheduledTask(53200, 53316, 0), new ScheduledTask(46900, 46969, 2), new ScheduledTask(47100, 47123, 3), new ScheduledTask(51700, 51816, 3), new ScheduledTask(70600, 70669, 0), new ScheduledTask(60700, 60769, 2), new ScheduledTask(64800, 64858, 0), new ScheduledTask(77500, 77604, 0), new ScheduledTask(87900, 88016, 0), new ScheduledTask(88100, 88181, 3), new ScheduledTask(88100, 88123, 2), new ScheduledTask(92700, 92723, 2), new ScheduledTask(105300, 105323, 0)};
        int[] expectedProcessorEndTimes = new int[]{105323, 46716, 92723, 88181};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random4_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#4_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 97200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 93, 0), new ScheduledTask(9300, 9404, 0), new ScheduledTask(19700, 19746, 0), new ScheduledTask(24300, 24346, 0), new ScheduledTask(28900, 29016, 0), new ScheduledTask(40500, 40558, 0), new ScheduledTask(48600, 48669, 0), new ScheduledTask(46600, 46716, 1), new ScheduledTask(55500, 55616, 0), new ScheduledTask(46900, 46969, 2), new ScheduledTask(46300, 46323, 0), new ScheduledTask(48800, 48916, 3), new ScheduledTask(60520, 60589, 1), new ScheduledTask(57250, 57319, 2), new ScheduledTask(67100, 67158, 0), new ScheduledTask(72900, 73004, 0), new ScheduledTask(83300, 83416, 0), new ScheduledTask(83500, 83581, 1), new ScheduledTask(83500, 83523, 3), new ScheduledTask(88100, 88123, 3), new ScheduledTask(94900, 94923, 0)};
        int[] expectedProcessorEndTimes = new int[]{94923, 83581, 57319, 88123};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1077;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 93, 0), new ScheduledTask(93, 197, 0), new ScheduledTask(197, 243, 0), new ScheduledTask(243, 289, 0), new ScheduledTask(289, 405, 0), new ScheduledTask(405, 463, 0), new ScheduledTask(486, 555, 0), new ScheduledTask(466, 582, 1), new ScheduledTask(582, 698, 1), new ScheduledTask(555, 624, 0), new ScheduledTask(463, 486, 0), new ScheduledTask(698, 814, 1), new ScheduledTask(693, 762, 0), new ScheduledTask(624, 693, 0), new ScheduledTask(762, 820, 0), new ScheduledTask(821, 925, 0), new ScheduledTask(934, 1050, 1), new ScheduledTask(925, 1006, 0), new ScheduledTask(1006, 1029, 0), new ScheduledTask(1029, 1052, 0), new ScheduledTask(1054, 1077, 1)};
        int[] expectedProcessorEndTimes = new int[]{1052, 1077};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 949;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 93, 0), new ScheduledTask(93, 197, 0), new ScheduledTask(197, 243, 0), new ScheduledTask(243, 289, 0), new ScheduledTask(289, 405, 0), new ScheduledTask(405, 463, 0), new ScheduledTask(463, 532, 0), new ScheduledTask(466, 582, 1), new ScheduledTask(532, 648, 0), new ScheduledTask(469, 538, 2), new ScheduledTask(471, 494, 3), new ScheduledTask(494, 610, 3), new ScheduledTask(582, 651, 1), new ScheduledTask(538, 607, 2), new ScheduledTask(648, 706, 0), new ScheduledTask(706, 810, 0), new ScheduledTask(810, 926, 0), new ScheduledTask(812, 893, 1), new ScheduledTask(812, 835, 2), new ScheduledTask(813, 836, 3), new ScheduledTask(926, 949, 0)};
        int[] expectedProcessorEndTimes = new int[]{949, 893, 835, 836};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 949;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 93, 0), new ScheduledTask(93, 197, 0), new ScheduledTask(197, 243, 0), new ScheduledTask(243, 289, 0), new ScheduledTask(289, 405, 0), new ScheduledTask(405, 463, 0), new ScheduledTask(463, 532, 0), new ScheduledTask(466, 582, 1), new ScheduledTask(532, 648, 0), new ScheduledTask(469, 538, 2), new ScheduledTask(471, 494, 3), new ScheduledTask(494, 610, 3), new ScheduledTask(582, 651, 1), new ScheduledTask(538, 607, 2), new ScheduledTask(648, 706, 0), new ScheduledTask(706, 810, 0), new ScheduledTask(810, 926, 0), new ScheduledTask(812, 893, 1), new ScheduledTask(812, 835, 2), new ScheduledTask(813, 836, 3), new ScheduledTask(926, 949, 0)};
        int[] expectedProcessorEndTimes = new int[]{949, 893, 835, 836};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random5_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#5_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 116300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 40, 0), new ScheduledTask(14600, 14653, 0), new ScheduledTask(19900, 19979, 0), new ScheduledTask(5000, 5040, 1), new ScheduledTask(71400, 71479, 0), new ScheduledTask(4000, 4106, 0), new ScheduledTask(48900, 49032, 0), new ScheduledTask(27800, 27932, 0), new ScheduledTask(4700, 4779, 2), new ScheduledTask(38900, 38979, 3), new ScheduledTask(41000, 41079, 0), new ScheduledTask(79300, 79366, 0), new ScheduledTask(14900, 14940, 3), new ScheduledTask(29000, 29026, 1), new ScheduledTask(52100, 52153, 2), new ScheduledTask(62100, 62193, 0), new ScheduledTask(91200, 91279, 0), new ScheduledTask(44600, 44679, 1), new ScheduledTask(85900, 85953, 0), new ScheduledTask(99100, 99206, 0), new ScheduledTask(109700, 109766, 0)};
        int[] expectedProcessorEndTimes = new int[]{109766, 44679, 52153, 38979};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random5_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#5_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 76700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 40, 0), new ScheduledTask(4000, 4053, 0), new ScheduledTask(9300, 9379, 0), new ScheduledTask(5000, 5040, 1), new ScheduledTask(19800, 19879, 0), new ScheduledTask(4700, 4806, 2), new ScheduledTask(20500, 20632, 3), new ScheduledTask(37000, 37132, 0), new ScheduledTask(4700, 4779, 3), new ScheduledTask(25900, 25979, 2), new ScheduledTask(13000, 13079, 1), new ScheduledTask(28800, 28866, 1), new ScheduledTask(33000, 33040, 0), new ScheduledTask(17200, 17226, 0), new ScheduledTask(27700, 27753, 0), new ScheduledTask(50200, 50293, 0), new ScheduledTask(42800, 42879, 2), new ScheduledTask(42000, 42079, 1), new ScheduledTask(46900, 46953, 3), new ScheduledTask(59500, 59606, 0), new ScheduledTask(70100, 70166, 0)};
        int[] expectedProcessorEndTimes = new int[]{70166, 42079, 42879, 46953};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random5_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#5_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 67400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 40, 0), new ScheduledTask(4000, 4053, 0), new ScheduledTask(9300, 9379, 0), new ScheduledTask(5000, 5040, 1), new ScheduledTask(9800, 9879, 1), new ScheduledTask(4700, 4806, 3), new ScheduledTask(17500, 17632, 2), new ScheduledTask(22400, 22532, 1), new ScheduledTask(4700, 4779, 2), new ScheduledTask(34400, 34479, 0), new ScheduledTask(22500, 22579, 0), new ScheduledTask(25900, 25966, 3), new ScheduledTask(30400, 30440, 0), new ScheduledTask(19280, 19306, 1), new ScheduledTask(17200, 17253, 0), new ScheduledTask(38240, 38333, 1), new ScheduledTask(42300, 42379, 0), new ScheduledTask(37300, 37379, 2), new ScheduledTask(39100, 39153, 3), new ScheduledTask(50200, 50306, 0), new ScheduledTask(60800, 60866, 0)};
        int[] expectedProcessorEndTimes = new int[]{60866, 38333, 37379, 39153};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 889;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 40, 0), new ScheduledTask(44, 97, 1), new ScheduledTask(186, 265, 0), new ScheduledTask(146, 186, 0), new ScheduledTask(216, 295, 1), new ScheduledTask(40, 146, 0), new ScheduledTask(427, 559, 1), new ScheduledTask(295, 427, 1), new ScheduledTask(97, 176, 1), new ScheduledTask(559, 638, 1), new ScheduledTask(489, 568, 0), new ScheduledTask(423, 489, 0), new ScheduledTask(176, 216, 1), new ScheduledTask(397, 423, 0), new ScheduledTask(344, 397, 0), new ScheduledTask(568, 661, 0), new ScheduledTask(638, 717, 1), new ScheduledTask(265, 344, 0), new ScheduledTask(661, 714, 0), new ScheduledTask(717, 823, 1), new ScheduledTask(823, 889, 1)};
        int[] expectedProcessorEndTimes = new int[]{714, 889};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 572;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 40, 0), new ScheduledTask(40, 93, 0), new ScheduledTask(93, 172, 0), new ScheduledTask(50, 90, 1), new ScheduledTask(90, 169, 1), new ScheduledTask(47, 153, 2), new ScheduledTask(175, 307, 2), new ScheduledTask(172, 304, 0), new ScheduledTask(47, 126, 3), new ScheduledTask(205, 284, 3), new ScheduledTask(126, 205, 3), new ScheduledTask(235, 301, 1), new ScheduledTask(169, 209, 1), new ScheduledTask(209, 235, 1), new ScheduledTask(284, 337, 3), new ScheduledTask(307, 400, 2), new ScheduledTask(301, 380, 1), new ScheduledTask(304, 383, 0), new ScheduledTask(337, 390, 3), new ScheduledTask(400, 506, 2), new ScheduledTask(506, 572, 2)};
        int[] expectedProcessorEndTimes = new int[]{383, 380, 572, 390};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 572;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 40, 0), new ScheduledTask(40, 93, 0), new ScheduledTask(93, 172, 0), new ScheduledTask(50, 90, 1), new ScheduledTask(153, 232, 2), new ScheduledTask(47, 153, 2), new ScheduledTask(175, 307, 1), new ScheduledTask(172, 304, 0), new ScheduledTask(47, 126, 3), new ScheduledTask(183, 262, 4), new ScheduledTask(99, 178, 5), new ScheduledTask(244, 310, 5), new ScheduledTask(178, 218, 5), new ScheduledTask(218, 244, 5), new ScheduledTask(130, 183, 4), new ScheduledTask(307, 400, 1), new ScheduledTask(310, 389, 5), new ScheduledTask(262, 341, 4), new ScheduledTask(341, 394, 4), new ScheduledTask(400, 506, 1), new ScheduledTask(506, 572, 1)};
        int[] expectedProcessorEndTimes = new int[]{304, 572, 232, 126, 394, 389};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random6_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#6_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 125700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 77, 0), new ScheduledTask(7700, 7787, 0), new ScheduledTask(24100, 24148, 0), new ScheduledTask(28900, 28968, 0), new ScheduledTask(16700, 16748, 1), new ScheduledTask(16400, 16477, 0), new ScheduledTask(35700, 35797, 0), new ScheduledTask(55100, 55177, 0), new ScheduledTask(36000, 36058, 2), new ScheduledTask(36700, 36748, 3), new ScheduledTask(45500, 45539, 1), new ScheduledTask(25100, 25119, 3), new ScheduledTask(71500, 71597, 0), new ScheduledTask(45400, 45497, 0), new ScheduledTask(62800, 62887, 0), new ScheduledTask(81200, 81268, 0), new ScheduledTask(88000, 88077, 0), new ScheduledTask(108300, 108397, 0), new ScheduledTask(95700, 95768, 0), new ScheduledTask(102500, 102558, 0), new ScheduledTask(118000, 118077, 0)};
        int[] expectedProcessorEndTimes = new int[]{118077, 45539, 36058, 36748};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random6_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#6_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 94600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 77, 0), new ScheduledTask(7700, 7787, 0), new ScheduledTask(16400, 16448, 0), new ScheduledTask(21200, 21268, 0), new ScheduledTask(16700, 16748, 1), new ScheduledTask(16700, 16777, 2), new ScheduledTask(35700, 35797, 0), new ScheduledTask(28000, 28077, 0), new ScheduledTask(35900, 35958, 2), new ScheduledTask(29000, 29048, 3), new ScheduledTask(28600, 28639, 1), new ScheduledTask(32100, 32119, 2), new ScheduledTask(47700, 47797, 0), new ScheduledTask(36500, 36597, 1), new ScheduledTask(38600, 38687, 3), new ScheduledTask(57400, 57468, 0), new ScheduledTask(64200, 64277, 0), new ScheduledTask(71900, 71997, 0), new ScheduledTask(72900, 72968, 3), new ScheduledTask(72300, 72358, 2), new ScheduledTask(86900, 86977, 0)};
        int[] expectedProcessorEndTimes = new int[]{86977, 36597, 72358, 72968};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random6_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#6_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 82200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 77, 0), new ScheduledTask(7700, 7787, 0), new ScheduledTask(16400, 16448, 0), new ScheduledTask(21200, 21268, 0), new ScheduledTask(16700, 16748, 1), new ScheduledTask(16700, 16777, 2), new ScheduledTask(28000, 28097, 0), new ScheduledTask(22460, 22537, 1), new ScheduledTask(28300, 28358, 3), new ScheduledTask(31700, 31748, 1), new ScheduledTask(31100, 31139, 2), new ScheduledTask(28250, 28269, 2), new ScheduledTask(40100, 40197, 0), new ScheduledTask(37460, 37557, 1), new ScheduledTask(36950, 37037, 2), new ScheduledTask(50200, 50268, 0), new ScheduledTask(57000, 57077, 0), new ScheduledTask(64700, 64797, 0), new ScheduledTask(65700, 65768, 1), new ScheduledTask(65100, 65158, 2), new ScheduledTask(74500, 74577, 0)};
        int[] expectedProcessorEndTimes = new int[]{74577, 65768, 65158, 28358};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 946;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 77, 0), new ScheduledTask(77, 164, 0), new ScheduledTask(166, 214, 1), new ScheduledTask(214, 282, 1), new ScheduledTask(241, 289, 0), new ScheduledTask(164, 241, 0), new ScheduledTask(398, 495, 1), new ScheduledTask(289, 366, 0), new ScheduledTask(340, 398, 1), new ScheduledTask(366, 414, 0), new ScheduledTask(301, 340, 1), new ScheduledTask(282, 301, 1), new ScheduledTask(495, 592, 1), new ScheduledTask(501, 598, 0), new ScheduledTask(414, 501, 0), new ScheduledTask(598, 666, 0), new ScheduledTask(666, 743, 0), new ScheduledTask(749, 846, 1), new ScheduledTask(801, 869, 0), new ScheduledTask(743, 801, 0), new ScheduledTask(869, 946, 0)};
        int[] expectedProcessorEndTimes = new int[]{946, 846};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 793;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 77, 0), new ScheduledTask(77, 164, 0), new ScheduledTask(164, 212, 0), new ScheduledTask(212, 280, 0), new ScheduledTask(167, 215, 1), new ScheduledTask(167, 244, 2), new ScheduledTask(280, 377, 0), new ScheduledTask(215, 292, 1), new ScheduledTask(283, 341, 2), new ScheduledTask(290, 338, 3), new ScheduledTask(292, 331, 1), new ScheduledTask(331, 350, 1), new ScheduledTask(377, 474, 0), new ScheduledTask(350, 447, 1), new ScheduledTask(338, 425, 3), new ScheduledTask(474, 542, 0), new ScheduledTask(542, 619, 0), new ScheduledTask(619, 716, 0), new ScheduledTask(629, 697, 1), new ScheduledTask(623, 681, 2), new ScheduledTask(716, 793, 0)};
        int[] expectedProcessorEndTimes = new int[]{793, 697, 681, 425};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 793;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 77, 0), new ScheduledTask(77, 164, 0), new ScheduledTask(164, 212, 0), new ScheduledTask(212, 280, 0), new ScheduledTask(167, 215, 1), new ScheduledTask(167, 244, 2), new ScheduledTask(280, 377, 0), new ScheduledTask(215, 292, 1), new ScheduledTask(283, 341, 2), new ScheduledTask(290, 338, 3), new ScheduledTask(286, 325, 4), new ScheduledTask(254, 273, 5), new ScheduledTask(377, 474, 0), new ScheduledTask(273, 370, 5), new ScheduledTask(292, 379, 1), new ScheduledTask(474, 542, 0), new ScheduledTask(542, 619, 0), new ScheduledTask(619, 716, 0), new ScheduledTask(629, 697, 1), new ScheduledTask(623, 681, 2), new ScheduledTask(716, 793, 0)};
        int[] expectedProcessorEndTimes = new int[]{793, 697, 681, 338, 325, 370};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random7_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#7_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 126400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 77, 0), new ScheduledTask(7900, 7952, 1), new ScheduledTask(7700, 7777, 0), new ScheduledTask(48900, 48939, 0), new ScheduledTask(83800, 83929, 0), new ScheduledTask(70900, 71029, 0), new ScheduledTask(59300, 59416, 0), new ScheduledTask(8600, 8729, 2), new ScheduledTask(15400, 15426, 0), new ScheduledTask(52800, 52865, 0), new ScheduledTask(37300, 37416, 0), new ScheduledTask(57800, 57865, 3), new ScheduledTask(25700, 25816, 0), new ScheduledTask(39100, 39190, 1), new ScheduledTask(18000, 18077, 0), new ScheduledTask(18800, 18865, 3), new ScheduledTask(101900, 101977, 0), new ScheduledTask(96700, 96752, 0), new ScheduledTask(93100, 93126, 1), new ScheduledTask(109600, 109665, 0), new ScheduledTask(116100, 116203, 0)};
        int[] expectedProcessorEndTimes = new int[]{116203, 93126, 8729, 57865};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random7_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#7_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 85700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 77, 0), new ScheduledTask(7700, 7752, 0), new ScheduledTask(8700, 8777, 1), new ScheduledTask(12900, 12939, 0), new ScheduledTask(29800, 29929, 0), new ScheduledTask(24100, 24229, 1), new ScheduledTask(17100, 17216, 2), new ScheduledTask(8600, 8729, 3), new ScheduledTask(34400, 34426, 3), new ScheduledTask(23300, 23365, 0), new ScheduledTask(54300, 54416, 0), new ScheduledTask(16800, 16865, 0), new ScheduledTask(42700, 42816, 0), new ScheduledTask(40300, 40390, 2), new ScheduledTask(49900, 49977, 1), new ScheduledTask(39600, 39665, 3), new ScheduledTask(52600, 52677, 3), new ScheduledTask(58300, 58352, 2), new ScheduledTask(66300, 66326, 0), new ScheduledTask(68900, 68965, 0), new ScheduledTask(75400, 75503, 0)};
        int[] expectedProcessorEndTimes = new int[]{75503, 49977, 58352, 52677};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random7_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#7_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 76000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 77, 0), new ScheduledTask(7700, 7752, 0), new ScheduledTask(8700, 8777, 2), new ScheduledTask(12900, 12939, 0), new ScheduledTask(20250, 20379, 2), new ScheduledTask(17400, 17529, 3), new ScheduledTask(24080, 24196, 1), new ScheduledTask(8600, 8729, 1), new ScheduledTask(29800, 29826, 0), new ScheduledTask(23300, 23365, 0), new ScheduledTask(32400, 32516, 0), new ScheduledTask(16800, 16865, 0), new ScheduledTask(44000, 44116, 0), new ScheduledTask(38000, 38090, 1), new ScheduledTask(39600, 39677, 2), new ScheduledTask(43200, 43265, 3), new ScheduledTask(48800, 48877, 1), new ScheduledTask(51150, 51202, 2), new ScheduledTask(56600, 56626, 0), new ScheduledTask(59200, 59265, 0), new ScheduledTask(65700, 65803, 0)};
        int[] expectedProcessorEndTimes = new int[]{65803, 48877, 51202, 43265};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 645;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 77, 0), new ScheduledTask(79, 131, 1), new ScheduledTask(87, 164, 2), new ScheduledTask(131, 170, 1), new ScheduledTask(271, 400, 0), new ScheduledTask(239, 368, 3), new ScheduledTask(190, 306, 2), new ScheduledTask(77, 206, 0), new ScheduledTask(164, 190, 2), new ScheduledTask(174, 239, 3), new ScheduledTask(306, 422, 2), new ScheduledTask(170, 235, 1), new ScheduledTask(325, 441, 1), new ScheduledTask(235, 325, 1), new ScheduledTask(368, 445, 3), new ScheduledTask(206, 271, 0), new ScheduledTask(400, 477, 0), new ScheduledTask(422, 474, 2), new ScheduledTask(445, 471, 3), new ScheduledTask(477, 542, 0), new ScheduledTask(542, 645, 0)};
        int[] expectedProcessorEndTimes = new int[]{645, 441, 474, 471};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 560;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 77, 0), new ScheduledTask(77, 129, 0), new ScheduledTask(87, 164, 1), new ScheduledTask(129, 168, 0), new ScheduledTask(168, 297, 0), new ScheduledTask(174, 303, 2), new ScheduledTask(171, 287, 3), new ScheduledTask(86, 215, 4), new ScheduledTask(173, 199, 5), new ScheduledTask(199, 264, 5), new ScheduledTask(215, 331, 4), new ScheduledTask(174, 239, 1), new ScheduledTask(239, 355, 1), new ScheduledTask(264, 354, 5), new ScheduledTask(287, 364, 3), new ScheduledTask(297, 362, 0), new ScheduledTask(304, 381, 2), new ScheduledTask(331, 383, 4), new ScheduledTask(366, 392, 3), new ScheduledTask(392, 457, 3), new ScheduledTask(457, 560, 3)};
        int[] expectedProcessorEndTimes = new int[]{362, 355, 381, 560, 383, 354};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random8_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#8_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 128200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 45, 0), new ScheduledTask(5000, 5030, 1), new ScheduledTask(25600, 25630, 0), new ScheduledTask(4500, 4575, 0), new ScheduledTask(37700, 37806, 0), new ScheduledTask(28600, 28691, 0), new ScheduledTask(5500, 5560, 2), new ScheduledTask(12000, 12136, 0), new ScheduledTask(29100, 29145, 1), new ScheduledTask(48300, 48451, 0), new ScheduledTask(12400, 12491, 3), new ScheduledTask(63400, 63551, 0), new ScheduledTask(41500, 41560, 2), new ScheduledTask(78500, 78560, 0), new ScheduledTask(84500, 84560, 0), new ScheduledTask(90500, 90636, 0), new ScheduledTask(111600, 111721, 0), new ScheduledTask(104100, 104175, 0), new ScheduledTask(91400, 91430, 3), new ScheduledTask(90800, 90830, 2), new ScheduledTask(123700, 123745, 0)};
        int[] expectedProcessorEndTimes = new int[]{123745, 29145, 90830, 91430};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random8_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#8_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 88900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 45, 0), new ScheduledTask(4500, 4530, 0), new ScheduledTask(7500, 7530, 0), new ScheduledTask(4900, 4975, 1), new ScheduledTask(15000, 15106, 0), new ScheduledTask(11200, 11291, 2), new ScheduledTask(5500, 5560, 3), new ScheduledTask(20400, 20536, 3), new ScheduledTask(10500, 10545, 0), new ScheduledTask(19900, 20051, 1), new ScheduledTask(29400, 29491, 2), new ScheduledTask(31600, 31751, 0), new ScheduledTask(25600, 25660, 0), new ScheduledTask(47800, 47860, 0), new ScheduledTask(53800, 53860, 0), new ScheduledTask(59800, 59936, 0), new ScheduledTask(60000, 60121, 3), new ScheduledTask(66700, 66775, 2), new ScheduledTask(60700, 60730, 2), new ScheduledTask(60100, 60130, 1), new ScheduledTask(84400, 84445, 0)};
        int[] expectedProcessorEndTimes = new int[]{84445, 60130, 66775, 60121};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random8_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#8_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 70420;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 45, 0), new ScheduledTask(4500, 4530, 0), new ScheduledTask(7500, 7530, 0), new ScheduledTask(4900, 4975, 2), new ScheduledTask(12700, 12806, 1), new ScheduledTask(15000, 15091, 0), new ScheduledTask(5500, 5560, 1), new ScheduledTask(24100, 24236, 0), new ScheduledTask(10500, 10545, 0), new ScheduledTask(13600, 13751, 3), new ScheduledTask(25150, 25241, 2), new ScheduledTask(25420, 25571, 1), new ScheduledTask(16150, 16210, 2), new ScheduledTask(39000, 39060, 0), new ScheduledTask(45000, 45060, 0), new ScheduledTask(51000, 51136, 0), new ScheduledTask(51200, 51321, 1), new ScheduledTask(51200, 51275, 2), new ScheduledTask(51900, 51930, 3), new ScheduledTask(57900, 57930, 3), new ScheduledTask(65920, 65965, 0)};
        int[] expectedProcessorEndTimes = new int[]{65965, 51321, 51275, 57930};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 898;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 45, 0), new ScheduledTask(50, 80, 1), new ScheduledTask(80, 110, 1), new ScheduledTask(105, 180, 0), new ScheduledTask(292, 398, 1), new ScheduledTask(110, 201, 1), new ScheduledTask(45, 105, 0), new ScheduledTask(398, 534, 1), new ScheduledTask(391, 436, 0), new ScheduledTask(240, 391, 0), new ScheduledTask(201, 292, 1), new ScheduledTask(436, 587, 0), new ScheduledTask(180, 240, 0), new ScheduledTask(534, 594, 1), new ScheduledTask(594, 654, 1), new ScheduledTask(717, 853, 0), new ScheduledTask(654, 775, 1), new ScheduledTask(775, 850, 1), new ScheduledTask(687, 717, 0), new ScheduledTask(657, 687, 0), new ScheduledTask(853, 898, 0)};
        int[] expectedProcessorEndTimes = new int[]{898, 850};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 605;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 45, 0), new ScheduledTask(45, 75, 0), new ScheduledTask(75, 105, 0), new ScheduledTask(49, 124, 1), new ScheduledTask(105, 211, 0), new ScheduledTask(112, 203, 2), new ScheduledTask(55, 115, 3), new ScheduledTask(160, 296, 3), new ScheduledTask(115, 160, 3), new ScheduledTask(184, 335, 1), new ScheduledTask(203, 294, 2), new ScheduledTask(211, 362, 0), new ScheduledTask(124, 184, 1), new ScheduledTask(296, 356, 3), new ScheduledTask(364, 424, 0), new ScheduledTask(424, 560, 0), new ScheduledTask(426, 547, 3), new ScheduledTask(463, 538, 2), new ScheduledTask(433, 463, 2), new ScheduledTask(427, 457, 1), new ScheduledTask(560, 605, 0)};
        int[] expectedProcessorEndTimes = new int[]{605, 457, 538, 547};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 603;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 45, 0), new ScheduledTask(45, 75, 0), new ScheduledTask(75, 105, 0), new ScheduledTask(49, 124, 1), new ScheduledTask(105, 211, 0), new ScheduledTask(112, 203, 2), new ScheduledTask(55, 115, 3), new ScheduledTask(124, 260, 1), new ScheduledTask(110, 155, 4), new ScheduledTask(115, 266, 3), new ScheduledTask(128, 219, 5), new ScheduledTask(211, 362, 0), new ScheduledTask(155, 215, 4), new ScheduledTask(260, 320, 1), new ScheduledTask(362, 422, 0), new ScheduledTask(422, 558, 0), new ScheduledTask(424, 545, 1), new ScheduledTask(424, 499, 2), new ScheduledTask(431, 461, 3), new ScheduledTask(425, 455, 4), new ScheduledTask(558, 603, 0)};
        int[] expectedProcessorEndTimes = new int[]{603, 545, 499, 461, 455, 219};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random9_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#9_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 135800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 97, 0), new ScheduledTask(9700, 9728, 0), new ScheduledTask(12500, 12555, 0), new ScheduledTask(18000, 18055, 0), new ScheduledTask(23500, 23611, 0), new ScheduledTask(77600, 77697, 0), new ScheduledTask(62300, 62342, 0), new ScheduledTask(51200, 51311, 0), new ScheduledTask(66500, 66611, 0), new ScheduledTask(87300, 87411, 0), new ScheduledTask(35000, 35125, 1), new ScheduledTask(23800, 23897, 2), new ScheduledTask(40100, 40211, 0), new ScheduledTask(34600, 34655, 0), new ScheduledTask(82000, 82042, 2), new ScheduledTask(18900, 18969, 3), new ScheduledTask(98400, 98525, 0), new ScheduledTask(110900, 110997, 0), new ScheduledTask(60300, 60369, 3), new ScheduledTask(120600, 120697, 0), new ScheduledTask(130300, 130355, 0)};
        int[] expectedProcessorEndTimes = new int[]{130355, 35125, 82042, 60369};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random9_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#9_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 95500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 97, 0), new ScheduledTask(9700, 9728, 0), new ScheduledTask(12500, 12555, 0), new ScheduledTask(18000, 18055, 0), new ScheduledTask(18600, 18711, 1), new ScheduledTask(33200, 33297, 0), new ScheduledTask(23800, 23842, 2), new ScheduledTask(24300, 24411, 3), new ScheduledTask(32200, 32311, 2), new ScheduledTask(42900, 43011, 0), new ScheduledTask(40800, 40925, 1), new ScheduledTask(23500, 23597, 0), new ScheduledTask(46500, 46611, 3), new ScheduledTask(65100, 65155, 0), new ScheduledTask(60900, 60942, 0), new ScheduledTask(54000, 54069, 0), new ScheduledTask(54600, 54725, 2), new ScheduledTask(70600, 70697, 0), new ScheduledTask(65800, 65869, 1), new ScheduledTask(80300, 80397, 0), new ScheduledTask(90000, 90055, 0)};
        int[] expectedProcessorEndTimes = new int[]{90055, 65869, 54725, 46611};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random9_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#9_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 84500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 97, 0), new ScheduledTask(9700, 9728, 0), new ScheduledTask(12500, 12555, 0), new ScheduledTask(18000, 18055, 0), new ScheduledTask(18600, 18711, 2), new ScheduledTask(27700, 27797, 0), new ScheduledTask(23500, 23542, 0), new ScheduledTask(24300, 24411, 3), new ScheduledTask(35250, 35361, 2), new ScheduledTask(37400, 37511, 0), new ScheduledTask(38820, 38945, 1), new ScheduledTask(27180, 27277, 1), new ScheduledTask(48500, 48611, 0), new ScheduledTask(46500, 46555, 3), new ScheduledTask(51900, 51942, 2), new ScheduledTask(18900, 18969, 1), new ScheduledTask(53820, 53945, 1), new ScheduledTask(59600, 59697, 0), new ScheduledTask(58200, 58269, 2), new ScheduledTask(69300, 69397, 0), new ScheduledTask(79000, 79055, 0)};
        int[] expectedProcessorEndTimes = new int[]{79055, 53945, 58269, 46555};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1052;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 97, 0), new ScheduledTask(97, 125, 0), new ScheduledTask(125, 180, 0), new ScheduledTask(180, 235, 0), new ScheduledTask(235, 346, 0), new ScheduledTask(564, 661, 1), new ScheduledTask(411, 453, 1), new ScheduledTask(258, 369, 1), new ScheduledTask(453, 564, 1), new ScheduledTask(661, 772, 1), new ScheduledTask(678, 803, 0), new ScheduledTask(581, 678, 0), new ScheduledTask(470, 581, 0), new ScheduledTask(415, 470, 0), new ScheduledTask(369, 411, 1), new ScheduledTask(189, 258, 1), new ScheduledTask(772, 897, 1), new ScheduledTask(803, 900, 0), new ScheduledTask(346, 415, 0), new ScheduledTask(900, 997, 0), new ScheduledTask(997, 1052, 0)};
        int[] expectedProcessorEndTimes = new int[]{1052, 897};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 744;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 97, 0), new ScheduledTask(97, 125, 0), new ScheduledTask(125, 180, 0), new ScheduledTask(180, 235, 0), new ScheduledTask(186, 297, 1), new ScheduledTask(235, 332, 0), new ScheduledTask(238, 280, 2), new ScheduledTask(258, 369, 3), new ScheduledTask(352, 463, 1), new ScheduledTask(332, 443, 0), new ScheduledTask(369, 494, 3), new ScheduledTask(280, 377, 2), new ScheduledTask(377, 488, 2), new ScheduledTask(297, 352, 1), new ScheduledTask(443, 485, 0), new ScheduledTask(189, 258, 3), new ScheduledTask(463, 588, 1), new ScheduledTask(495, 592, 3), new ScheduledTask(488, 557, 2), new ScheduledTask(592, 689, 3), new ScheduledTask(689, 744, 3)};
        int[] expectedProcessorEndTimes = new int[]{485, 588, 557, 744};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 720;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 97, 0), new ScheduledTask(97, 125, 0), new ScheduledTask(125, 180, 0), new ScheduledTask(180, 235, 0), new ScheduledTask(186, 297, 1), new ScheduledTask(235, 332, 0), new ScheduledTask(238, 280, 2), new ScheduledTask(243, 354, 3), new ScheduledTask(280, 391, 2), new ScheduledTask(332, 443, 0), new ScheduledTask(297, 422, 1), new ScheduledTask(238, 335, 4), new ScheduledTask(301, 412, 5), new ScheduledTask(335, 390, 4), new ScheduledTask(354, 396, 3), new ScheduledTask(390, 459, 4), new ScheduledTask(443, 568, 0), new ScheduledTask(422, 519, 1), new ScheduledTask(459, 528, 4), new ScheduledTask(568, 665, 0), new ScheduledTask(665, 720, 0)};
        int[] expectedProcessorEndTimes = new int[]{720, 519, 391, 396, 528, 412};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 796;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 82, 0), new ScheduledTask(82, 123, 0), new ScheduledTask(123, 219, 0), new ScheduledTask(219, 315, 0), new ScheduledTask(315, 397, 0), new ScheduledTask(325, 366, 1), new ScheduledTask(397, 521, 0), new ScheduledTask(320, 416, 2), new ScheduledTask(366, 503, 1), new ScheduledTask(403, 499, 3), new ScheduledTask(368, 437, 4), new ScheduledTask(369, 424, 5), new ScheduledTask(372, 427, 6), new ScheduledTask(406, 433, 7), new ScheduledTask(416, 512, 2), new ScheduledTask(521, 590, 0), new ScheduledTask(503, 544, 1), new ScheduledTask(590, 672, 0), new ScheduledTask(672, 741, 0), new ScheduledTask(682, 709, 1), new ScheduledTask(741, 796, 0)};
        int[] expectedProcessorEndTimes = new int[]{796, 709, 512, 499, 437, 424, 427, 433};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1019;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 82, 0), new ScheduledTask(82, 123, 0), new ScheduledTask(123, 219, 0), new ScheduledTask(219, 315, 0), new ScheduledTask(315, 397, 0), new ScheduledTask(443, 484, 1), new ScheduledTask(397, 521, 0), new ScheduledTask(320, 416, 1), new ScheduledTask(635, 772, 1), new ScheduledTask(539, 635, 1), new ScheduledTask(576, 645, 0), new ScheduledTask(484, 539, 1), new ScheduledTask(521, 576, 0), new ScheduledTask(416, 443, 1), new ScheduledTask(714, 810, 0), new ScheduledTask(645, 714, 0), new ScheduledTask(772, 813, 1), new ScheduledTask(813, 895, 1), new ScheduledTask(895, 964, 1), new ScheduledTask(905, 932, 0), new ScheduledTask(964, 1019, 1)};
        int[] expectedProcessorEndTimes = new int[]{932, 1019};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 805;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 82, 0), new ScheduledTask(82, 123, 0), new ScheduledTask(123, 219, 0), new ScheduledTask(219, 315, 0), new ScheduledTask(321, 403, 1), new ScheduledTask(315, 356, 0), new ScheduledTask(403, 527, 1), new ScheduledTask(320, 416, 2), new ScheduledTask(414, 551, 3), new ScheduledTask(425, 521, 0), new ScheduledTask(356, 425, 0), new ScheduledTask(359, 414, 3), new ScheduledTask(443, 498, 2), new ScheduledTask(416, 443, 2), new ScheduledTask(498, 594, 2), new ScheduledTask(530, 599, 0), new ScheduledTask(551, 592, 3), new ScheduledTask(599, 681, 0), new ScheduledTask(681, 750, 0), new ScheduledTask(691, 718, 3), new ScheduledTask(750, 805, 0)};
        int[] expectedProcessorEndTimes = new int[]{805, 527, 594, 718};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 796;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 82, 0), new ScheduledTask(82, 123, 0), new ScheduledTask(123, 219, 0), new ScheduledTask(219, 315, 0), new ScheduledTask(315, 397, 0), new ScheduledTask(325, 366, 1), new ScheduledTask(397, 521, 0), new ScheduledTask(320, 416, 2), new ScheduledTask(366, 503, 1), new ScheduledTask(403, 499, 3), new ScheduledTask(368, 437, 4), new ScheduledTask(369, 424, 5), new ScheduledTask(372, 427, 6), new ScheduledTask(406, 433, 7), new ScheduledTask(416, 512, 2), new ScheduledTask(521, 590, 0), new ScheduledTask(503, 544, 1), new ScheduledTask(590, 672, 0), new ScheduledTask(672, 741, 0), new ScheduledTask(682, 709, 1), new ScheduledTask(741, 796, 0)};
        int[] expectedProcessorEndTimes = new int[]{796, 709, 512, 499, 437, 424, 427, 433};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 138100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 48, 0), new ScheduledTask(4800, 4911, 0), new ScheduledTask(15900, 16043, 0), new ScheduledTask(30200, 30263, 0), new ScheduledTask(72900, 73043, 0), new ScheduledTask(65000, 65079, 0), new ScheduledTask(36900, 36979, 1), new ScheduledTask(36900, 36948, 2), new ScheduledTask(36500, 36563, 0), new ScheduledTask(87200, 87359, 0), new ScheduledTask(55500, 55595, 0), new ScheduledTask(47600, 47679, 0), new ScheduledTask(42800, 42848, 0), new ScheduledTask(43700, 43732, 3), new ScheduledTask(62900, 62963, 3), new ScheduledTask(65700, 65748, 2), new ScheduledTask(103100, 103195, 0), new ScheduledTask(115800, 115832, 0), new ScheduledTask(112600, 112632, 0), new ScheduledTask(119000, 119032, 0), new ScheduledTask(122200, 122359, 0)};
        int[] expectedProcessorEndTimes = new int[]{122359, 36979, 65748, 62963};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 110100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 48, 0), new ScheduledTask(4800, 4911, 0), new ScheduledTask(15900, 16043, 0), new ScheduledTask(30200, 30263, 0), new ScheduledTask(41300, 41443, 0), new ScheduledTask(36900, 36979, 1), new ScheduledTask(36900, 36979, 2), new ScheduledTask(36500, 36548, 0), new ScheduledTask(31000, 31063, 3), new ScheduledTask(55600, 55759, 0), new ScheduledTask(43600, 43695, 3), new ScheduledTask(52700, 52779, 2), new ScheduledTask(52700, 52748, 1), new ScheduledTask(62600, 62632, 3), new ScheduledTask(71500, 71563, 0), new ScheduledTask(63200, 63248, 1), new ScheduledTask(77800, 77895, 0), new ScheduledTask(87300, 87332, 0), new ScheduledTask(90500, 90532, 0), new ScheduledTask(87500, 87532, 3), new ScheduledTask(94200, 94359, 0)};
        int[] expectedProcessorEndTimes = new int[]{94359, 63248, 52779, 87532};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 99700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 48, 0), new ScheduledTask(4800, 4911, 0), new ScheduledTask(15900, 16043, 0), new ScheduledTask(30200, 30263, 0), new ScheduledTask(36500, 36643, 0), new ScheduledTask(42000, 42079, 1), new ScheduledTask(36900, 36979, 3), new ScheduledTask(40450, 40498, 2), new ScheduledTask(31000, 31063, 2), new ScheduledTask(53100, 53259, 0), new ScheduledTask(30600, 30695, 1), new ScheduledTask(47650, 47729, 2), new ScheduledTask(51480, 51528, 1), new ScheduledTask(52700, 52732, 3), new ScheduledTask(59900, 59963, 1), new ScheduledTask(59100, 59148, 3), new ScheduledTask(69000, 69095, 0), new ScheduledTask(78500, 78532, 0), new ScheduledTask(79500, 79532, 1), new ScheduledTask(78700, 78732, 2), new ScheduledTask(83800, 83959, 0)};
        int[] expectedProcessorEndTimes = new int[]{83959, 79532, 78732, 59148};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 961;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 48, 0), new ScheduledTask(48, 159, 0), new ScheduledTask(159, 302, 0), new ScheduledTask(302, 365, 0), new ScheduledTask(365, 508, 0), new ScheduledTask(373, 452, 1), new ScheduledTask(401, 480, 2), new ScheduledTask(414, 462, 3), new ScheduledTask(310, 373, 1), new ScheduledTask(508, 667, 0), new ScheduledTask(306, 401, 2), new ScheduledTask(510, 589, 3), new ScheduledTask(462, 510, 3), new ScheduledTask(382, 414, 3), new ScheduledTask(589, 652, 3), new ScheduledTask(480, 528, 2), new ScheduledTask(667, 762, 0), new ScheduledTask(770, 802, 3), new ScheduledTask(762, 794, 0), new ScheduledTask(764, 796, 2), new ScheduledTask(802, 961, 3)};
        int[] expectedProcessorEndTimes = new int[]{794, 452, 796, 961};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 961;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 48, 0), new ScheduledTask(48, 159, 0), new ScheduledTask(159, 302, 0), new ScheduledTask(302, 365, 0), new ScheduledTask(365, 508, 0), new ScheduledTask(373, 452, 1), new ScheduledTask(369, 448, 2), new ScheduledTask(369, 417, 3), new ScheduledTask(310, 373, 1), new ScheduledTask(508, 667, 0), new ScheduledTask(306, 401, 4), new ScheduledTask(510, 589, 5), new ScheduledTask(462, 510, 5), new ScheduledTask(382, 414, 5), new ScheduledTask(589, 652, 5), new ScheduledTask(414, 462, 5), new ScheduledTask(667, 762, 0), new ScheduledTask(770, 802, 5), new ScheduledTask(762, 794, 0), new ScheduledTask(764, 796, 4), new ScheduledTask(802, 961, 5)};
        int[] expectedProcessorEndTimes = new int[]{794, 452, 448, 417, 796, 961};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot98_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.98_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 16900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(2300, 2310, 0), new ScheduledTask(1100, 1112, 0), new ScheduledTask(2700, 2704, 1), new ScheduledTask(3300, 3314, 0), new ScheduledTask(6100, 6110, 0), new ScheduledTask(1700, 1703, 2), new ScheduledTask(5100, 5103, 1), new ScheduledTask(4400, 4403, 3), new ScheduledTask(6200, 6203, 3), new ScheduledTask(4700, 4714, 0), new ScheduledTask(8300, 8314, 0), new ScheduledTask(7100, 7112, 0), new ScheduledTask(9700, 9714, 0), new ScheduledTask(11800, 11811, 0), new ScheduledTask(12900, 12912, 0), new ScheduledTask(14100, 14110, 0), new ScheduledTask(15100, 15110, 0), new ScheduledTask(11100, 11107, 0), new ScheduledTask(11700, 11704, 3), new ScheduledTask(16100, 16108, 0)};
        int[] expectedProcessorEndTimes = new int[]{16108, 5103, 1703, 11704};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot98_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.98_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 14400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(2300, 2310, 0), new ScheduledTask(1100, 1112, 0), new ScheduledTask(2700, 2704, 1), new ScheduledTask(3300, 3314, 0), new ScheduledTask(3500, 3510, 1), new ScheduledTask(1700, 1703, 2), new ScheduledTask(5000, 5003, 3), new ScheduledTask(3200, 3203, 3), new ScheduledTask(4400, 4403, 3), new ScheduledTask(4700, 4714, 0), new ScheduledTask(6500, 6514, 0), new ScheduledTask(4300, 4312, 2), new ScheduledTask(7900, 7914, 0), new ScheduledTask(9300, 9311, 0), new ScheduledTask(10400, 10412, 0), new ScheduledTask(11600, 11610, 0), new ScheduledTask(12600, 12610, 0), new ScheduledTask(10700, 10707, 3), new ScheduledTask(9900, 9904, 3), new ScheduledTask(13600, 13608, 0)};
        int[] expectedProcessorEndTimes = new int[]{13608, 3510, 4312, 10707};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot98_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.98_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 12900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(1600, 1610, 1), new ScheduledTask(1100, 1112, 0), new ScheduledTask(2300, 2304, 0), new ScheduledTask(3600, 3614, 0), new ScheduledTask(3000, 3010, 1), new ScheduledTask(1700, 1703, 3), new ScheduledTask(3000, 3003, 0), new ScheduledTask(2300, 2303, 3), new ScheduledTask(2700, 2703, 0), new ScheduledTask(5000, 5014, 0), new ScheduledTask(4200, 4214, 1), new ScheduledTask(2900, 2912, 3), new ScheduledTask(6400, 6414, 0), new ScheduledTask(7800, 7811, 0), new ScheduledTask(8900, 8912, 0), new ScheduledTask(10100, 10110, 0), new ScheduledTask(11100, 11110, 0), new ScheduledTask(9200, 9207, 3), new ScheduledTask(8400, 8404, 3), new ScheduledTask(12100, 12108, 0)};
        int[] expectedProcessorEndTimes = new int[]{12108, 4214, 0, 9207};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 129;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(16, 26, 1), new ScheduledTask(17, 29, 0), new ScheduledTask(29, 33, 0), new ScheduledTask(39, 53, 0), new ScheduledTask(38, 48, 1), new ScheduledTask(11, 14, 0), new ScheduledTask(36, 39, 0), new ScheduledTask(14, 17, 0), new ScheduledTask(33, 36, 0), new ScheduledTask(53, 67, 0), new ScheduledTask(48, 62, 1), new ScheduledTask(26, 38, 1), new ScheduledTask(67, 81, 0), new ScheduledTask(81, 92, 0), new ScheduledTask(98, 110, 1), new ScheduledTask(92, 102, 0), new ScheduledTask(111, 121, 1), new ScheduledTask(91, 98, 1), new ScheduledTask(87, 91, 1), new ScheduledTask(121, 129, 1)};
        int[] expectedProcessorEndTimes = new int[]{102, 129};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 121;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(16, 26, 1), new ScheduledTask(11, 23, 0), new ScheduledTask(23, 27, 0), new ScheduledTask(26, 40, 1), new ScheduledTask(30, 40, 2), new ScheduledTask(17, 20, 3), new ScheduledTask(27, 30, 0), new ScheduledTask(20, 23, 3), new ScheduledTask(30, 33, 0), new ScheduledTask(40, 54, 1), new ScheduledTask(40, 54, 2), new ScheduledTask(23, 35, 3), new ScheduledTask(59, 73, 1), new ScheduledTask(73, 84, 1), new ScheduledTask(90, 102, 3), new ScheduledTask(84, 94, 1), new ScheduledTask(103, 113, 3), new ScheduledTask(83, 90, 3), new ScheduledTask(79, 83, 3), new ScheduledTask(113, 121, 3)};
        int[] expectedProcessorEndTimes = new int[]{33, 94, 54, 121};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 121;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(16, 26, 1), new ScheduledTask(11, 23, 0), new ScheduledTask(23, 27, 0), new ScheduledTask(26, 40, 1), new ScheduledTask(30, 40, 2), new ScheduledTask(17, 20, 3), new ScheduledTask(27, 30, 0), new ScheduledTask(29, 32, 4), new ScheduledTask(30, 33, 0), new ScheduledTask(40, 54, 1), new ScheduledTask(40, 54, 2), new ScheduledTask(37, 49, 5), new ScheduledTask(59, 73, 1), new ScheduledTask(73, 84, 1), new ScheduledTask(90, 102, 5), new ScheduledTask(84, 94, 1), new ScheduledTask(103, 113, 5), new ScheduledTask(83, 90, 5), new ScheduledTask(79, 83, 5), new ScheduledTask(113, 121, 5)};
        int[] expectedProcessorEndTimes = new int[]{33, 94, 54, 20, 32, 121};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot99_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.99_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 13900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(300, 311, 0), new ScheduledTask(5700, 5710, 0), new ScheduledTask(1400, 1410, 0), new ScheduledTask(8700, 8710, 0), new ScheduledTask(7900, 7908, 0), new ScheduledTask(7200, 7207, 0), new ScheduledTask(4200, 4215, 0), new ScheduledTask(6700, 6705, 0), new ScheduledTask(3200, 3210, 0), new ScheduledTask(2600, 2610, 1), new ScheduledTask(2800, 2807, 2), new ScheduledTask(2400, 2408, 0), new ScheduledTask(4600, 4610, 3), new ScheduledTask(9700, 9716, 0), new ScheduledTask(1600, 1605, 3), new ScheduledTask(7000, 7007, 2), new ScheduledTask(11300, 11310, 0), new ScheduledTask(8600, 8603, 1), new ScheduledTask(12300, 12308, 0), new ScheduledTask(13100, 13108, 0)};
        int[] expectedProcessorEndTimes = new int[]{13108, 8603, 7007, 4610};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot99_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.99_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(300, 311, 0), new ScheduledTask(1800, 1810, 1), new ScheduledTask(1400, 1410, 0), new ScheduledTask(5700, 5710, 0), new ScheduledTask(4200, 4208, 0), new ScheduledTask(5000, 5007, 0), new ScheduledTask(1900, 1915, 2), new ScheduledTask(4900, 4905, 2), new ScheduledTask(3200, 3210, 0), new ScheduledTask(2600, 2610, 3), new ScheduledTask(4600, 4607, 3), new ScheduledTask(2400, 2408, 0), new ScheduledTask(3800, 3810, 1), new ScheduledTask(6700, 6716, 0), new ScheduledTask(1600, 1605, 3), new ScheduledTask(5900, 5907, 2), new ScheduledTask(6000, 6010, 3), new ScheduledTask(5800, 5803, 1), new ScheduledTask(8300, 8308, 0), new ScheduledTask(9100, 9108, 0)};
        int[] expectedProcessorEndTimes = new int[]{9108, 5803, 5907, 6010};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot99_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.99_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(300, 311, 0), new ScheduledTask(1800, 1810, 1), new ScheduledTask(1400, 1410, 0), new ScheduledTask(3000, 3010, 1), new ScheduledTask(4800, 4808, 0), new ScheduledTask(4100, 4107, 0), new ScheduledTask(1900, 1915, 3), new ScheduledTask(4200, 4205, 1), new ScheduledTask(3100, 3110, 0), new ScheduledTask(2600, 2610, 2), new ScheduledTask(2400, 2407, 0), new ScheduledTask(4800, 4808, 1), new ScheduledTask(4100, 4110, 2), new ScheduledTask(5600, 5616, 0), new ScheduledTask(1600, 1605, 2), new ScheduledTask(4900, 4907, 3), new ScheduledTask(5800, 5810, 1), new ScheduledTask(5600, 5603, 2), new ScheduledTask(7200, 7208, 0), new ScheduledTask(8000, 8008, 0)};
        int[] expectedProcessorEndTimes = new int[]{8008, 5810, 5603, 4907};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 14, 0), new ScheduledTask(14, 24, 0), new ScheduledTask(21, 31, 1), new ScheduledTask(27, 37, 2), new ScheduledTask(24, 32, 0), new ScheduledTask(41, 48, 3), new ScheduledTask(21, 36, 3), new ScheduledTask(36, 41, 3), new ScheduledTask(42, 52, 0), new ScheduledTask(37, 47, 2), new ScheduledTask(35, 42, 0), new ScheduledTask(31, 39, 1), new ScheduledTask(39, 49, 1), new ScheduledTask(48, 64, 3), new ScheduledTask(16, 21, 3), new ScheduledTask(50, 57, 2), new ScheduledTask(52, 62, 0), new ScheduledTask(47, 50, 2), new ScheduledTask(64, 72, 3), new ScheduledTask(72, 80, 3)};
        int[] expectedProcessorEndTimes = new int[]{62, 49, 57, 80};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 14, 0), new ScheduledTask(14, 24, 0), new ScheduledTask(21, 31, 1), new ScheduledTask(24, 34, 0), new ScheduledTask(28, 36, 2), new ScheduledTask(34, 41, 3), new ScheduledTask(19, 34, 4), new ScheduledTask(34, 39, 5), new ScheduledTask(39, 49, 5), new ScheduledTask(34, 44, 4), new ScheduledTask(36, 43, 2), new ScheduledTask(31, 39, 1), new ScheduledTask(38, 48, 0), new ScheduledTask(46, 62, 3), new ScheduledTask(16, 21, 5), new ScheduledTask(44, 51, 4), new ScheduledTask(50, 60, 5), new ScheduledTask(21, 24, 5), new ScheduledTask(62, 70, 3), new ScheduledTask(70, 78, 3)};
        int[] expectedProcessorEndTimes = new int[]{48, 39, 43, 78, 51, 60};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_1dot00_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_1.00_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 13500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 16, 0), new ScheduledTask(2500, 2503, 1), new ScheduledTask(1600, 1611, 0), new ScheduledTask(5700, 5708, 0), new ScheduledTask(2400, 2405, 2), new ScheduledTask(4100, 4116, 0), new ScheduledTask(1900, 1912, 3), new ScheduledTask(2700, 2714, 0), new ScheduledTask(7100, 7111, 0), new ScheduledTask(9300, 9311, 0), new ScheduledTask(8200, 8211, 0), new ScheduledTask(4300, 4306, 1), new ScheduledTask(6500, 6506, 0), new ScheduledTask(5400, 5403, 2), new ScheduledTask(7200, 7206, 2), new ScheduledTask(10400, 10406, 0), new ScheduledTask(11000, 11006, 0), new ScheduledTask(9100, 9103, 3), new ScheduledTask(8800, 8803, 1), new ScheduledTask(11600, 11611, 0), new ScheduledTask(12700, 12708, 0)};
        int[] expectedProcessorEndTimes = new int[]{12708, 8803, 7206, 9103};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_1dot00_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_1.00_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 16, 0), new ScheduledTask(2500, 2503, 1), new ScheduledTask(1600, 1611, 0), new ScheduledTask(3100, 3108, 1), new ScheduledTask(2400, 2405, 2), new ScheduledTask(4100, 4116, 0), new ScheduledTask(1900, 1912, 3), new ScheduledTask(2700, 2714, 0), new ScheduledTask(4000, 4011, 2), new ScheduledTask(4700, 4711, 1), new ScheduledTask(6300, 6311, 0), new ScheduledTask(5500, 5506, 3), new ScheduledTask(4300, 4306, 3), new ScheduledTask(3400, 3403, 2), new ScheduledTask(5700, 5706, 0), new ScheduledTask(6200, 6206, 2), new ScheduledTask(7400, 7406, 0), new ScheduledTask(6700, 6703, 3), new ScheduledTask(6900, 6903, 1), new ScheduledTask(8000, 8011, 0), new ScheduledTask(9100, 9108, 0)};
        int[] expectedProcessorEndTimes = new int[]{9108, 6903, 6206, 6703};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 16, 0), new ScheduledTask(25, 28, 1), new ScheduledTask(16, 27, 0), new ScheduledTask(28, 36, 1), new ScheduledTask(24, 29, 2), new ScheduledTask(35, 51, 2), new ScheduledTask(19, 31, 3), new ScheduledTask(33, 47, 0), new ScheduledTask(31, 42, 3), new ScheduledTask(39, 50, 1), new ScheduledTask(42, 53, 3), new ScheduledTask(27, 33, 0), new ScheduledTask(29, 35, 2), new ScheduledTask(36, 39, 1), new ScheduledTask(47, 53, 0), new ScheduledTask(50, 56, 1), new ScheduledTask(55, 61, 3), new ScheduledTask(52, 55, 2), new ScheduledTask(53, 56, 0), new ScheduledTask(61, 72, 3), new ScheduledTask(72, 80, 3)};
        int[] expectedProcessorEndTimes = new int[]{56, 56, 55, 80};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_1dot00_WeightType_Random2_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_1.00_WeightType_Random#2_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 15500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(1200, 1208, 1), new ScheduledTask(800, 810, 0), new ScheduledTask(1400, 1403, 2), new ScheduledTask(10800, 10813, 0), new ScheduledTask(6100, 6114, 0), new ScheduledTask(9800, 9810, 0), new ScheduledTask(3500, 3513, 0), new ScheduledTask(2200, 2213, 0), new ScheduledTask(4800, 4813, 0), new ScheduledTask(8800, 8810, 0), new ScheduledTask(2000, 2007, 3), new ScheduledTask(6000, 6010, 1), new ScheduledTask(3200, 3206, 2), new ScheduledTask(6900, 6908, 3), new ScheduledTask(1800, 1804, 0), new ScheduledTask(12200, 12211, 0), new ScheduledTask(7500, 7513, 0), new ScheduledTask(7200, 7208, 2), new ScheduledTask(13300, 13311, 0), new ScheduledTask(14400, 14411, 0)};
        int[] expectedProcessorEndTimes = new int[]{14411, 6010, 7208, 6908};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_1dot00_WeightType_Random2_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_1.00_WeightType_Random#2_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(1200, 1208, 1), new ScheduledTask(1800, 1810, 2), new ScheduledTask(800, 803, 0), new ScheduledTask(2800, 2813, 1), new ScheduledTask(2400, 2414, 0), new ScheduledTask(6600, 6610, 0), new ScheduledTask(1300, 1313, 3), new ScheduledTask(3800, 3813, 2), new ScheduledTask(1100, 1113, 0), new ScheduledTask(5600, 5610, 0), new ScheduledTask(4000, 4007, 3), new ScheduledTask(5400, 5410, 3), new ScheduledTask(4600, 4606, 0), new ScheduledTask(3800, 3808, 0), new ScheduledTask(5200, 5204, 0), new ScheduledTask(7600, 7611, 0), new ScheduledTask(5400, 5413, 1), new ScheduledTask(6400, 6408, 2), new ScheduledTask(8700, 8711, 0), new ScheduledTask(9800, 9811, 0)};
        int[] expectedProcessorEndTimes = new int[]{9811, 5413, 6408, 5410};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_1dot00_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_1.00_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 15000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(1900, 1911, 0), new ScheduledTask(1500, 1507, 1), new ScheduledTask(1100, 1108, 0), new ScheduledTask(3000, 3006, 0), new ScheduledTask(6700, 6714, 0), new ScheduledTask(4400, 4411, 0), new ScheduledTask(5500, 5512, 0), new ScheduledTask(2800, 2811, 2), new ScheduledTask(3600, 3608, 0), new ScheduledTask(1800, 1803, 3), new ScheduledTask(8100, 8112, 0), new ScheduledTask(3600, 3604, 3), new ScheduledTask(9600, 9611, 0), new ScheduledTask(7300, 7304, 3), new ScheduledTask(6500, 6506, 1), new ScheduledTask(10700, 10712, 0), new ScheduledTask(13200, 13214, 0), new ScheduledTask(12200, 12210, 0), new ScheduledTask(11900, 11903, 0), new ScheduledTask(14600, 14604, 0)};
        int[] expectedProcessorEndTimes = new int[]{14604, 6506, 2811, 7304};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_1dot00_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_1.00_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 11700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(1900, 1911, 0), new ScheduledTask(1500, 1507, 1), new ScheduledTask(1100, 1108, 0), new ScheduledTask(3000, 3006, 0), new ScheduledTask(4700, 4714, 0), new ScheduledTask(3600, 3611, 0), new ScheduledTask(4300, 4312, 2), new ScheduledTask(2800, 2811, 3), new ScheduledTask(4400, 4408, 1), new ScheduledTask(1800, 1803, 3), new ScheduledTask(6100, 6112, 0), new ScheduledTask(3000, 3004, 2), new ScheduledTask(5000, 5011, 3), new ScheduledTask(7300, 7304, 0), new ScheduledTask(6000, 6006, 1), new ScheduledTask(7700, 7712, 0), new ScheduledTask(9900, 9914, 0), new ScheduledTask(8900, 8910, 0), new ScheduledTask(9500, 9503, 3), new ScheduledTask(11300, 11304, 0)};
        int[] expectedProcessorEndTimes = new int[]{11304, 6006, 4312, 9503};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 113;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(19, 30, 0), new ScheduledTask(15, 22, 1), new ScheduledTask(11, 19, 0), new ScheduledTask(30, 36, 0), new ScheduledTask(40, 54, 1), new ScheduledTask(48, 59, 0), new ScheduledTask(36, 48, 0), new ScheduledTask(29, 40, 1), new ScheduledTask(66, 74, 1), new ScheduledTask(22, 25, 1), new ScheduledTask(54, 66, 1), new ScheduledTask(25, 29, 1), new ScheduledTask(59, 70, 0), new ScheduledTask(74, 78, 1), new ScheduledTask(70, 76, 0), new ScheduledTask(78, 90, 1), new ScheduledTask(90, 104, 1), new ScheduledTask(99, 109, 0), new ScheduledTask(96, 99, 0), new ScheduledTask(109, 113, 0)};
        int[] expectedProcessorEndTimes = new int[]{113, 104};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 91;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(11, 22, 0), new ScheduledTask(15, 22, 1), new ScheduledTask(21, 29, 2), new ScheduledTask(22, 28, 0), new ScheduledTask(22, 36, 1), new ScheduledTask(28, 39, 0), new ScheduledTask(39, 51, 0), new ScheduledTask(29, 40, 2), new ScheduledTask(36, 44, 3), new ScheduledTask(18, 21, 3), new ScheduledTask(36, 48, 1), new ScheduledTask(21, 25, 3), new ScheduledTask(40, 51, 2), new ScheduledTask(51, 55, 0), new ScheduledTask(25, 31, 3), new ScheduledTask(56, 68, 0), new ScheduledTask(68, 82, 0), new ScheduledTask(77, 87, 3), new ScheduledTask(74, 77, 3), new ScheduledTask(87, 91, 3)};
        int[] expectedProcessorEndTimes = new int[]{82, 48, 51, 91};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_1dot01_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_1.01_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 13700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(1700, 1703, 1), new ScheduledTask(1400, 1412, 0), new ScheduledTask(8700, 8716, 0), new ScheduledTask(1900, 1907, 2), new ScheduledTask(7300, 7314, 0), new ScheduledTask(5700, 5716, 0), new ScheduledTask(4300, 4314, 0), new ScheduledTask(6100, 6105, 2), new ScheduledTask(4000, 4003, 0), new ScheduledTask(6600, 6605, 1), new ScheduledTask(2600, 2614, 0), new ScheduledTask(3300, 3310, 3), new ScheduledTask(9100, 9103, 2), new ScheduledTask(10300, 10317, 0), new ScheduledTask(3600, 3605, 1), new ScheduledTask(12000, 12010, 0), new ScheduledTask(9300, 9305, 3), new ScheduledTask(9600, 9605, 1), new ScheduledTask(10900, 10903, 2), new ScheduledTask(13000, 13007, 0)};
        int[] expectedProcessorEndTimes = new int[]{13007, 9605, 10903, 9305};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_1dot01_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_1.01_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(1700, 1703, 1), new ScheduledTask(1400, 1412, 0), new ScheduledTask(5000, 5016, 0), new ScheduledTask(2300, 2307, 1), new ScheduledTask(3600, 3614, 0), new ScheduledTask(3100, 3116, 2), new ScheduledTask(4100, 4114, 3), new ScheduledTask(3100, 3105, 3), new ScheduledTask(2500, 2503, 3), new ScheduledTask(4300, 4305, 1), new ScheduledTask(5300, 5314, 1), new ScheduledTask(2600, 2610, 0), new ScheduledTask(3700, 3703, 1), new ScheduledTask(6600, 6617, 0), new ScheduledTask(6900, 6905, 3), new ScheduledTask(6300, 6310, 2), new ScheduledTask(8300, 8305, 0), new ScheduledTask(2100, 2105, 2), new ScheduledTask(7900, 7903, 3), new ScheduledTask(8800, 8807, 0)};
        int[] expectedProcessorEndTimes = new int[]{8807, 5314, 6310, 7903};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_1dot01_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_1.01_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8250;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(1700, 1703, 2), new ScheduledTask(1400, 1412, 0), new ScheduledTask(3340, 3356, 1), new ScheduledTask(1900, 1907, 1), new ScheduledTask(2150, 2164, 2), new ScheduledTask(3000, 3016, 3), new ScheduledTask(4600, 4614, 0), new ScheduledTask(3100, 3105, 0), new ScheduledTask(2350, 2353, 3), new ScheduledTask(2740, 2745, 1), new ScheduledTask(4700, 4714, 2), new ScheduledTask(3600, 3610, 0), new ScheduledTask(4250, 4253, 2), new ScheduledTask(5260, 5277, 1), new ScheduledTask(2600, 2605, 0), new ScheduledTask(6000, 6010, 0), new ScheduledTask(7000, 7005, 0), new ScheduledTask(6200, 6205, 3), new ScheduledTask(6800, 6803, 2), new ScheduledTask(7550, 7557, 0)};
        int[] expectedProcessorEndTimes = new int[]{7557, 5277, 6803, 6205};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_1dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_1.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(14, 17, 0), new ScheduledTask(19, 31, 1), new ScheduledTask(17, 33, 0), new ScheduledTask(19, 26, 2), new ScheduledTask(30, 44, 3), new ScheduledTask(35, 51, 0), new ScheduledTask(44, 58, 2), new ScheduledTask(25, 30, 3), new ScheduledTask(19, 22, 3), new ScheduledTask(29, 34, 2), new ScheduledTask(41, 55, 1), new ScheduledTask(31, 41, 1), new ScheduledTask(26, 29, 2), new ScheduledTask(44, 61, 3), new ScheduledTask(51, 56, 0), new ScheduledTask(34, 44, 2), new ScheduledTask(59, 64, 2), new ScheduledTask(55, 60, 1), new ScheduledTask(22, 25, 3), new ScheduledTask(64, 71, 2)};
        int[] expectedProcessorEndTimes = new int[]{56, 60, 71, 61};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_1dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_1.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(14, 17, 0), new ScheduledTask(19, 31, 1), new ScheduledTask(17, 33, 0), new ScheduledTask(19, 26, 2), new ScheduledTask(26, 40, 2), new ScheduledTask(35, 51, 3), new ScheduledTask(36, 50, 4), new ScheduledTask(25, 30, 5), new ScheduledTask(19, 22, 5), new ScheduledTask(31, 36, 5), new ScheduledTask(39, 53, 5), new ScheduledTask(31, 41, 1), new ScheduledTask(36, 39, 5), new ScheduledTask(43, 60, 2), new ScheduledTask(50, 55, 4), new ScheduledTask(45, 55, 1), new ScheduledTask(57, 62, 3), new ScheduledTask(53, 58, 5), new ScheduledTask(22, 25, 5), new ScheduledTask(62, 69, 3)};
        int[] expectedProcessorEndTimes = new int[]{33, 55, 60, 69, 55, 58};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_1dot01_WeightType_Random2_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_1.01_WeightType_Random#2_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 13200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(1600, 1612, 0), new ScheduledTask(1100, 1105, 1), new ScheduledTask(3900, 3911, 0), new ScheduledTask(800, 808, 0), new ScheduledTask(7800, 7808, 0), new ScheduledTask(6700, 6711, 0), new ScheduledTask(2800, 2811, 0), new ScheduledTask(6400, 6403, 0), new ScheduledTask(1400, 1404, 2), new ScheduledTask(3800, 3808, 2), new ScheduledTask(2600, 2611, 3), new ScheduledTask(5000, 5014, 0), new ScheduledTask(4100, 4104, 1), new ScheduledTask(8600, 8612, 0), new ScheduledTask(6500, 6505, 1), new ScheduledTask(9800, 9808, 0), new ScheduledTask(10600, 10604, 0), new ScheduledTask(11000, 11004, 0), new ScheduledTask(11400, 11407, 0), new ScheduledTask(12100, 12111, 0)};
        int[] expectedProcessorEndTimes = new int[]{12111, 6505, 3808, 2611};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_1dot01_WeightType_Random2_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_1.01_WeightType_Random#2_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(800, 812, 0), new ScheduledTask(1100, 1105, 1), new ScheduledTask(1000, 1011, 2), new ScheduledTask(1200, 1208, 3), new ScheduledTask(4700, 4708, 0), new ScheduledTask(3600, 3611, 0), new ScheduledTask(2700, 2711, 1), new ScheduledTask(2100, 2103, 1), new ScheduledTask(3200, 3204, 0), new ScheduledTask(2400, 2408, 0), new ScheduledTask(2800, 2811, 3), new ScheduledTask(3200, 3214, 2), new ScheduledTask(2000, 2004, 0), new ScheduledTask(5500, 5512, 0), new ScheduledTask(5000, 5005, 3), new ScheduledTask(4900, 4908, 1), new ScheduledTask(6700, 6704, 0), new ScheduledTask(7100, 7104, 0), new ScheduledTask(7500, 7507, 0), new ScheduledTask(8200, 8211, 0)};
        int[] expectedProcessorEndTimes = new int[]{8211, 4908, 3214, 5005};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_1dot01_WeightType_Random2_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_1.01_WeightType_Random#2_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8480;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(800, 812, 0), new ScheduledTask(1100, 1105, 1), new ScheduledTask(1000, 1011, 3), new ScheduledTask(1200, 1208, 2), new ScheduledTask(2400, 2408, 2), new ScheduledTask(2060, 2071, 1), new ScheduledTask(2400, 2411, 0), new ScheduledTask(1700, 1703, 1), new ScheduledTask(3200, 3204, 3), new ScheduledTask(3500, 3508, 0), new ScheduledTask(3400, 3411, 1), new ScheduledTask(4300, 4314, 0), new ScheduledTask(2000, 2004, 0), new ScheduledTask(3600, 3612, 2), new ScheduledTask(4000, 4005, 3), new ScheduledTask(4720, 4728, 1), new ScheduledTask(5880, 5884, 0), new ScheduledTask(6280, 6284, 0), new ScheduledTask(6680, 6687, 0), new ScheduledTask(7380, 7391, 0)};
        int[] expectedProcessorEndTimes = new int[]{7391, 4728, 3612, 4005};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_1dot01_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_1.01_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 74;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 20, 0), new ScheduledTask(11, 16, 1), new ScheduledTask(10, 21, 2), new ScheduledTask(12, 20, 3), new ScheduledTask(24, 32, 3), new ScheduledTask(19, 30, 1), new ScheduledTask(20, 31, 0), new ScheduledTask(16, 19, 1), new ScheduledTask(20, 24, 3), new ScheduledTask(30, 38, 1), new ScheduledTask(35, 46, 2), new ScheduledTask(21, 35, 2), new ScheduledTask(31, 35, 0), new ScheduledTask(32, 44, 3), new ScheduledTask(35, 40, 0), new ScheduledTask(38, 46, 1), new ScheduledTask(48, 52, 2), new ScheduledTask(52, 56, 2), new ScheduledTask(56, 63, 2), new ScheduledTask(63, 74, 2)};
        int[] expectedProcessorEndTimes = new int[]{40, 46, 74, 44};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_1dot01_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_1.01_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 20, 0), new ScheduledTask(11, 16, 1), new ScheduledTask(10, 21, 2), new ScheduledTask(12, 20, 3), new ScheduledTask(18, 26, 4), new ScheduledTask(16, 27, 1), new ScheduledTask(20, 31, 0), new ScheduledTask(26, 29, 4), new ScheduledTask(14, 18, 5), new ScheduledTask(29, 37, 5), new ScheduledTask(20, 31, 3), new ScheduledTask(21, 35, 2), new ScheduledTask(23, 27, 5), new ScheduledTask(29, 41, 4), new ScheduledTask(18, 23, 5), new ScheduledTask(37, 45, 5), new ScheduledTask(45, 49, 5), new ScheduledTask(49, 53, 5), new ScheduledTask(53, 60, 5), new ScheduledTask(60, 71, 5)};
        int[] expectedProcessorEndTimes = new int[]{31, 27, 35, 31, 41, 71};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_1dot01_WeightType_Random3_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_1.01_WeightType_Random#3_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 12500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(1300, 1308, 1), new ScheduledTask(8100, 8108, 0), new ScheduledTask(1300, 1311, 0), new ScheduledTask(8900, 8916, 0), new ScheduledTask(800, 805, 0), new ScheduledTask(7100, 7110, 0), new ScheduledTask(1600, 1614, 2), new ScheduledTask(5500, 5516, 0), new ScheduledTask(6400, 6406, 3), new ScheduledTask(6100, 6103, 1), new ScheduledTask(4500, 4510, 0), new ScheduledTask(3700, 3708, 0), new ScheduledTask(2400, 2413, 0), new ScheduledTask(1600, 1603, 3), new ScheduledTask(3400, 3405, 3), new ScheduledTask(10800, 10806, 0), new ScheduledTask(10500, 10503, 0), new ScheduledTask(7900, 7905, 1), new ScheduledTask(11400, 11405, 0), new ScheduledTask(11900, 11906, 0)};
        int[] expectedProcessorEndTimes = new int[]{11906, 7905, 1614, 6406};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_1dot01_WeightType_Random3_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_1.01_WeightType_Random#3_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(1300, 1308, 1), new ScheduledTask(2900, 2908, 1), new ScheduledTask(800, 811, 0), new ScheduledTask(5500, 5516, 0), new ScheduledTask(1000, 1005, 2), new ScheduledTask(4200, 4210, 3), new ScheduledTask(2000, 2014, 2), new ScheduledTask(3500, 3516, 0), new ScheduledTask(5500, 5506, 1), new ScheduledTask(5100, 5103, 0), new ScheduledTask(2200, 2210, 3), new ScheduledTask(4800, 4808, 2), new ScheduledTask(1900, 1913, 0), new ScheduledTask(3200, 3203, 0), new ScheduledTask(4500, 4505, 1), new ScheduledTask(7100, 7106, 0), new ScheduledTask(6200, 6203, 3), new ScheduledTask(6400, 6405, 2), new ScheduledTask(7700, 7705, 0), new ScheduledTask(8200, 8206, 0)};
        int[] expectedProcessorEndTimes = new int[]{8206, 5506, 6405, 6203};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_1dot01_WeightType_Random3_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_1.01_WeightType_Random#3_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 7750;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(1300, 1308, 2), new ScheduledTask(3300, 3308, 0), new ScheduledTask(800, 811, 0), new ScheduledTask(4400, 4416, 0), new ScheduledTask(1000, 1005, 1), new ScheduledTask(3250, 3260, 2), new ScheduledTask(1900, 1914, 0), new ScheduledTask(3760, 3776, 1), new ScheduledTask(4750, 4756, 2), new ScheduledTask(4100, 4103, 0), new ScheduledTask(1600, 1610, 1), new ScheduledTask(2800, 2808, 1), new ScheduledTask(2500, 2513, 3), new ScheduledTask(1900, 1903, 3), new ScheduledTask(2500, 2505, 2), new ScheduledTask(6050, 6056, 0), new ScheduledTask(5100, 5103, 3), new ScheduledTask(5680, 5685, 1), new ScheduledTask(6650, 6655, 0), new ScheduledTask(7150, 7156, 0)};
        int[] expectedProcessorEndTimes = new int[]{7156, 5685, 4756, 5103};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_1dot01_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_1.01_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(13, 21, 1), new ScheduledTask(24, 32, 1), new ScheduledTask(8, 19, 0), new ScheduledTask(32, 48, 1), new ScheduledTask(10, 15, 2), new ScheduledTask(32, 42, 3), new ScheduledTask(18, 32, 3), new ScheduledTask(31, 47, 2), new ScheduledTask(25, 31, 2), new ScheduledTask(21, 24, 1), new ScheduledTask(15, 25, 2), new ScheduledTask(19, 27, 0), new ScheduledTask(32, 45, 0), new ScheduledTask(42, 45, 3), new ScheduledTask(27, 32, 0), new ScheduledTask(48, 54, 1), new ScheduledTask(45, 48, 3), new ScheduledTask(48, 53, 2), new ScheduledTask(56, 61, 1), new ScheduledTask(61, 67, 1)};
        int[] expectedProcessorEndTimes = new int[]{45, 67, 53, 48};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_1dot01_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_1.01_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(13, 21, 1), new ScheduledTask(21, 29, 1), new ScheduledTask(8, 19, 0), new ScheduledTask(29, 45, 1), new ScheduledTask(10, 15, 2), new ScheduledTask(29, 39, 3), new ScheduledTask(18, 32, 4), new ScheduledTask(27, 43, 5), new ScheduledTask(35, 41, 4), new ScheduledTask(32, 35, 4), new ScheduledTask(17, 27, 5), new ScheduledTask(19, 27, 0), new ScheduledTask(24, 37, 2), new ScheduledTask(18, 21, 3), new ScheduledTask(24, 29, 3), new ScheduledTask(45, 51, 1), new ScheduledTask(39, 42, 3), new ScheduledTask(43, 48, 5), new ScheduledTask(51, 56, 1), new ScheduledTask(56, 62, 1)};
        int[] expectedProcessorEndTimes = new int[]{27, 62, 37, 42, 41, 48};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_1dot01_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_1.01_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 16000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(1100, 1112, 0), new ScheduledTask(6300, 6314, 0), new ScheduledTask(3200, 3209, 0), new ScheduledTask(4900, 4914, 0), new ScheduledTask(2300, 2309, 0), new ScheduledTask(7700, 7703, 0), new ScheduledTask(2500, 2505, 1), new ScheduledTask(3200, 3207, 2), new ScheduledTask(4100, 4108, 0), new ScheduledTask(3100, 3107, 3), new ScheduledTask(9100, 9114, 0), new ScheduledTask(8000, 8011, 0), new ScheduledTask(5500, 5507, 1), new ScheduledTask(10600, 10612, 0), new ScheduledTask(11800, 11811, 0), new ScheduledTask(13800, 13809, 0), new ScheduledTask(12900, 12909, 0), new ScheduledTask(14700, 14705, 0), new ScheduledTask(12000, 12005, 3), new ScheduledTask(15200, 15208, 0)};
        int[] expectedProcessorEndTimes = new int[]{15208, 5507, 3207, 12005};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_1dot01_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_1.01_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 12700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(1100, 1112, 0), new ScheduledTask(3200, 3214, 0), new ScheduledTask(2100, 2109, 1), new ScheduledTask(3300, 3314, 2), new ScheduledTask(2300, 2309, 0), new ScheduledTask(4600, 4603, 0), new ScheduledTask(2500, 2505, 3), new ScheduledTask(3500, 3507, 3), new ScheduledTask(3900, 3908, 1), new ScheduledTask(4900, 4907, 3), new ScheduledTask(4900, 4914, 0), new ScheduledTask(6700, 6711, 0), new ScheduledTask(5500, 5507, 1), new ScheduledTask(7800, 7812, 0), new ScheduledTask(9000, 9011, 0), new ScheduledTask(11000, 11009, 0), new ScheduledTask(10100, 10109, 0), new ScheduledTask(9400, 9405, 3), new ScheduledTask(10400, 10405, 3), new ScheduledTask(11900, 11908, 0)};
        int[] expectedProcessorEndTimes = new int[]{11908, 5507, 3314, 10405};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_1dot02_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_1.02_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 14700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(200, 205, 0), new ScheduledTask(700, 704, 0), new ScheduledTask(2200, 2207, 0), new ScheduledTask(4100, 4109, 0), new ScheduledTask(3400, 3407, 0), new ScheduledTask(2900, 2905, 0), new ScheduledTask(1100, 1111, 0), new ScheduledTask(1300, 1310, 1), new ScheduledTask(5000, 5011, 0), new ScheduledTask(1300, 1307, 2), new ScheduledTask(1700, 1706, 3), new ScheduledTask(6100, 6111, 0), new ScheduledTask(8200, 8205, 0), new ScheduledTask(7200, 7209, 0), new ScheduledTask(8700, 8710, 0), new ScheduledTask(12900, 12912, 0), new ScheduledTask(9700, 9710, 0), new ScheduledTask(11700, 11712, 0), new ScheduledTask(10700, 10710, 0), new ScheduledTask(14100, 14106, 0)};
        int[] expectedProcessorEndTimes = new int[]{14106, 1310, 1307, 1706};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_1dot02_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_1.02_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(200, 205, 0), new ScheduledTask(700, 704, 0), new ScheduledTask(1100, 1107, 0), new ScheduledTask(3300, 3309, 0), new ScheduledTask(2700, 2707, 1), new ScheduledTask(2800, 2805, 0), new ScheduledTask(1400, 1411, 2), new ScheduledTask(1800, 1810, 0), new ScheduledTask(4300, 4311, 0), new ScheduledTask(1300, 1307, 1), new ScheduledTask(1700, 1706, 3), new ScheduledTask(2900, 2911, 3), new ScheduledTask(5400, 5405, 0), new ScheduledTask(3600, 3609, 2), new ScheduledTask(5900, 5910, 0), new ScheduledTask(6900, 6912, 0), new ScheduledTask(8100, 8110, 0), new ScheduledTask(7300, 7312, 3), new ScheduledTask(7500, 7510, 2), new ScheduledTask(10200, 10206, 0)};
        int[] expectedProcessorEndTimes = new int[]{10206, 2707, 7510, 7312};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_1dot02_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_1.02_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9340;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(200, 205, 0), new ScheduledTask(700, 704, 0), new ScheduledTask(1100, 1107, 0), new ScheduledTask(1800, 1809, 0), new ScheduledTask(2700, 2707, 0), new ScheduledTask(2350, 2355, 2), new ScheduledTask(1400, 1411, 3), new ScheduledTask(1300, 1310, 1), new ScheduledTask(3400, 3411, 0), new ScheduledTask(1300, 1307, 2), new ScheduledTask(2500, 2506, 1), new ScheduledTask(3220, 3231, 1), new ScheduledTask(4500, 4505, 0), new ScheduledTask(3100, 3109, 2), new ScheduledTask(5040, 5050, 0), new ScheduledTask(6240, 6252, 1), new ScheduledTask(6040, 6050, 0), new ScheduledTask(6440, 6452, 2), new ScheduledTask(7040, 7050, 0), new ScheduledTask(8740, 8746, 0)};
        int[] expectedProcessorEndTimes = new int[]{8746, 6252, 6452, 1411};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_1dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 103;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 7, 0), new ScheduledTask(10, 14, 1), new ScheduledTask(14, 21, 1), new ScheduledTask(36, 45, 1), new ScheduledTask(35, 42, 0), new ScheduledTask(31, 36, 1), new ScheduledTask(24, 35, 0), new ScheduledTask(21, 31, 1), new ScheduledTask(45, 56, 1), new ScheduledTask(42, 49, 0), new ScheduledTask(7, 13, 0), new ScheduledTask(13, 24, 0), new ScheduledTask(56, 61, 1), new ScheduledTask(49, 58, 0), new ScheduledTask(61, 71, 1), new ScheduledTask(73, 85, 0), new ScheduledTask(71, 81, 1), new ScheduledTask(85, 97, 0), new ScheduledTask(81, 91, 1), new ScheduledTask(97, 103, 0)};
        int[] expectedProcessorEndTimes = new int[]{103, 91};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_1dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_1.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 85;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 7, 0), new ScheduledTask(7, 11, 0), new ScheduledTask(11, 18, 0), new ScheduledTask(22, 31, 1), new ScheduledTask(18, 25, 0), new ScheduledTask(23, 28, 2), new ScheduledTask(14, 25, 3), new ScheduledTask(13, 23, 2), new ScheduledTask(31, 42, 1), new ScheduledTask(25, 32, 0), new ScheduledTask(25, 31, 3), new ScheduledTask(31, 42, 3), new ScheduledTask(42, 47, 1), new ScheduledTask(32, 41, 0), new ScheduledTask(47, 57, 1), new ScheduledTask(59, 71, 3), new ScheduledTask(57, 67, 1), new ScheduledTask(61, 73, 2), new ScheduledTask(63, 73, 0), new ScheduledTask(79, 85, 3)};
        int[] expectedProcessorEndTimes = new int[]{73, 67, 73, 85};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_1dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_1.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 85;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 7, 0), new ScheduledTask(7, 11, 0), new ScheduledTask(11, 18, 0), new ScheduledTask(22, 31, 1), new ScheduledTask(18, 25, 0), new ScheduledTask(22, 27, 2), new ScheduledTask(14, 25, 3), new ScheduledTask(13, 23, 4), new ScheduledTask(31, 42, 1), new ScheduledTask(13, 20, 5), new ScheduledTask(20, 26, 5), new ScheduledTask(26, 37, 5), new ScheduledTask(42, 47, 1), new ScheduledTask(29, 38, 4), new ScheduledTask(47, 57, 1), new ScheduledTask(59, 71, 5), new ScheduledTask(57, 67, 1), new ScheduledTask(61, 73, 4), new ScheduledTask(63, 73, 3), new ScheduledTask(79, 85, 5)};
        int[] expectedProcessorEndTimes = new int[]{25, 67, 27, 73, 73, 85};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_1dot96_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_1.96_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 16, 0), new ScheduledTask(22, 31, 1), new ScheduledTask(32, 39, 0), new ScheduledTask(35, 39, 1), new ScheduledTask(26, 32, 0), new ScheduledTask(31, 33, 1), new ScheduledTask(13, 22, 1), new ScheduledTask(16, 26, 0), new ScheduledTask(48, 58, 0), new ScheduledTask(39, 48, 0), new ScheduledTask(39, 47, 1), new ScheduledTask(33, 35, 1), new ScheduledTask(47, 54, 1), new ScheduledTask(58, 68, 0), new ScheduledTask(74, 80, 1), new ScheduledTask(80, 83, 1), new ScheduledTask(68, 73, 0), new ScheduledTask(73, 76, 0), new ScheduledTask(71, 73, 1), new ScheduledTask(83, 92, 1)};
        int[] expectedProcessorEndTimes = new int[]{76, 92};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_1dot96_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_1.96_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 16, 0), new ScheduledTask(18, 27, 1), new ScheduledTask(16, 23, 0), new ScheduledTask(16, 20, 2), new ScheduledTask(23, 29, 0), new ScheduledTask(28, 30, 2), new ScheduledTask(13, 22, 3), new ScheduledTask(22, 32, 3), new ScheduledTask(27, 37, 1), new ScheduledTask(37, 46, 1), new ScheduledTask(20, 28, 2), new ScheduledTask(32, 34, 3), new ScheduledTask(34, 41, 3), new ScheduledTask(46, 56, 1), new ScheduledTask(62, 68, 3), new ScheduledTask(68, 71, 3), new ScheduledTask(56, 61, 1), new ScheduledTask(61, 64, 1), new ScheduledTask(59, 61, 3), new ScheduledTask(71, 80, 3)};
        int[] expectedProcessorEndTimes = new int[]{29, 64, 30, 80};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_10dot02_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_10.02_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 12400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(1000, 1009, 0), new ScheduledTask(1900, 1903, 0), new ScheduledTask(6000, 6009, 0), new ScheduledTask(5800, 5802, 0), new ScheduledTask(4400, 4405, 0), new ScheduledTask(3800, 3806, 0), new ScheduledTask(3500, 3503, 0), new ScheduledTask(4900, 4902, 1), new ScheduledTask(10800, 10806, 0), new ScheduledTask(8900, 8910, 0), new ScheduledTask(2600, 2609, 0), new ScheduledTask(8700, 8702, 0), new ScheduledTask(2200, 2204, 0), new ScheduledTask(7700, 7710, 0), new ScheduledTask(9900, 9909, 0), new ScheduledTask(4900, 4909, 0), new ScheduledTask(6900, 6908, 0), new ScheduledTask(6100, 6104, 1), new ScheduledTask(11400, 11404, 0), new ScheduledTask(11800, 11806, 0)};
        int[] expectedProcessorEndTimes = new int[]{11806, 6104};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_10dot02_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_10.02_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 11500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(1000, 1009, 0), new ScheduledTask(2400, 2403, 0), new ScheduledTask(2700, 2709, 0), new ScheduledTask(9100, 9102, 0), new ScheduledTask(1900, 1905, 0), new ScheduledTask(8500, 8506, 0), new ScheduledTask(8200, 8203, 0), new ScheduledTask(5400, 5402, 1), new ScheduledTask(7600, 7606, 0), new ScheduledTask(6600, 6610, 0), new ScheduledTask(5700, 5709, 0), new ScheduledTask(5500, 5502, 0), new ScheduledTask(7300, 7304, 2), new ScheduledTask(4500, 4510, 0), new ScheduledTask(9300, 9309, 0), new ScheduledTask(3600, 3609, 0), new ScheduledTask(7600, 7608, 3), new ScheduledTask(8100, 8104, 2), new ScheduledTask(10500, 10504, 0), new ScheduledTask(10900, 10906, 0)};
        int[] expectedProcessorEndTimes = new int[]{10906, 5402, 8104, 7608};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_10dot02_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_10.02_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(1000, 1009, 0), new ScheduledTask(5900, 5903, 1), new ScheduledTask(3700, 3709, 0), new ScheduledTask(8420, 8422, 1), new ScheduledTask(2300, 2305, 0), new ScheduledTask(7700, 7706, 1), new ScheduledTask(7340, 7343, 1), new ScheduledTask(8660, 8662, 1), new ScheduledTask(6400, 6406, 0), new ScheduledTask(5400, 5410, 0), new ScheduledTask(6260, 6269, 1), new ScheduledTask(8000, 8002, 0), new ScheduledTask(1900, 1904, 0), new ScheduledTask(7000, 7010, 0), new ScheduledTask(8900, 8909, 1), new ScheduledTask(2800, 2809, 0), new ScheduledTask(4600, 4608, 0), new ScheduledTask(5700, 5704, 3), new ScheduledTask(8200, 8204, 0), new ScheduledTask(9980, 9986, 1)};
        int[] expectedProcessorEndTimes = new int[]{8204, 9986, 0, 5704};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 105;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(61, 64, 1), new ScheduledTask(37, 46, 0), new ScheduledTask(82, 84, 1), new ScheduledTask(23, 28, 0), new ScheduledTask(76, 82, 1), new ScheduledTask(73, 76, 1), new ScheduledTask(84, 86, 1), new ScheduledTask(64, 70, 0), new ScheduledTask(54, 64, 0), new ScheduledTask(64, 73, 1), new ScheduledTask(80, 82, 0), new ScheduledTask(19, 23, 0), new ScheduledTask(70, 80, 0), new ScheduledTask(86, 95, 1), new ScheduledTask(28, 37, 0), new ScheduledTask(46, 54, 0), new ScheduledTask(57, 61, 1), new ScheduledTask(82, 86, 0), new ScheduledTask(99, 105, 1)};
        int[] expectedProcessorEndTimes = new int[]{86, 105};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 105;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(59, 62, 1), new ScheduledTask(37, 46, 0), new ScheduledTask(80, 82, 1), new ScheduledTask(23, 28, 0), new ScheduledTask(74, 80, 1), new ScheduledTask(71, 74, 1), new ScheduledTask(82, 84, 1), new ScheduledTask(64, 70, 0), new ScheduledTask(54, 64, 0), new ScheduledTask(62, 71, 1), new ScheduledTask(80, 82, 0), new ScheduledTask(19, 23, 0), new ScheduledTask(70, 80, 0), new ScheduledTask(84, 93, 1), new ScheduledTask(28, 37, 0), new ScheduledTask(46, 54, 0), new ScheduledTask(57, 61, 2), new ScheduledTask(82, 86, 0), new ScheduledTask(99, 105, 1)};
        int[] expectedProcessorEndTimes = new int[]{86, 105, 61};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_10dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 105;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(59, 62, 1), new ScheduledTask(37, 46, 0), new ScheduledTask(80, 82, 1), new ScheduledTask(23, 28, 0), new ScheduledTask(74, 80, 1), new ScheduledTask(71, 74, 1), new ScheduledTask(82, 84, 1), new ScheduledTask(64, 70, 0), new ScheduledTask(54, 64, 0), new ScheduledTask(62, 71, 1), new ScheduledTask(80, 82, 0), new ScheduledTask(19, 23, 0), new ScheduledTask(70, 80, 0), new ScheduledTask(84, 93, 1), new ScheduledTask(28, 37, 0), new ScheduledTask(46, 54, 0), new ScheduledTask(57, 61, 2), new ScheduledTask(82, 86, 0), new ScheduledTask(99, 105, 1)};
        int[] expectedProcessorEndTimes = new int[]{86, 105, 61};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_10dot03_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_10.03_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 11000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(600, 606, 0), new ScheduledTask(5800, 5802, 0), new ScheduledTask(4500, 4508, 0), new ScheduledTask(3500, 3510, 0), new ScheduledTask(2600, 2604, 0), new ScheduledTask(8500, 8508, 0), new ScheduledTask(7900, 7906, 0), new ScheduledTask(7000, 7005, 0), new ScheduledTask(5300, 5305, 0), new ScheduledTask(2400, 2402, 0), new ScheduledTask(2100, 2103, 0), new ScheduledTask(1200, 1209, 0), new ScheduledTask(4700, 4706, 1), new ScheduledTask(6000, 6010, 0), new ScheduledTask(4000, 4003, 2), new ScheduledTask(3000, 3005, 0), new ScheduledTask(7500, 7504, 0), new ScheduledTask(9700, 9709, 0), new ScheduledTask(9300, 9304, 0), new ScheduledTask(10600, 10604, 0)};
        int[] expectedProcessorEndTimes = new int[]{10604, 4706, 4003};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_10dot03_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_10.03_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(600, 606, 0), new ScheduledTask(1400, 1402, 0), new ScheduledTask(6900, 6908, 0), new ScheduledTask(5900, 5910, 0), new ScheduledTask(5000, 5004, 0), new ScheduledTask(4200, 4208, 0), new ScheduledTask(3600, 3606, 0), new ScheduledTask(3100, 3105, 0), new ScheduledTask(8200, 8205, 0), new ScheduledTask(1200, 1202, 0), new ScheduledTask(6000, 6003, 1), new ScheduledTask(2200, 2209, 0), new ScheduledTask(1600, 1606, 0), new ScheduledTask(3700, 3710, 1), new ScheduledTask(4000, 4003, 2), new ScheduledTask(5400, 5405, 0), new ScheduledTask(8700, 8704, 0), new ScheduledTask(3600, 3609, 3), new ScheduledTask(7800, 7804, 0), new ScheduledTask(9100, 9104, 0)};
        int[] expectedProcessorEndTimes = new int[]{9104, 6003, 4003, 3609};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_10dot03_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_10.03_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 12400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(8300, 8309, 0), new ScheduledTask(900, 903, 0), new ScheduledTask(5600, 5607, 0), new ScheduledTask(2900, 2908, 1), new ScheduledTask(4600, 4610, 0), new ScheduledTask(10200, 10204, 0), new ScheduledTask(3700, 3709, 0), new ScheduledTask(3100, 3106, 0), new ScheduledTask(9200, 9210, 0), new ScheduledTask(7800, 7803, 0), new ScheduledTask(1400, 1408, 0), new ScheduledTask(7200, 7206, 0), new ScheduledTask(6300, 6309, 0), new ScheduledTask(10600, 10602, 0), new ScheduledTask(1200, 1202, 0), new ScheduledTask(2200, 2209, 0), new ScheduledTask(8100, 8102, 0), new ScheduledTask(5600, 5602, 2), new ScheduledTask(10800, 10809, 0), new ScheduledTask(11700, 11707, 0)};
        int[] expectedProcessorEndTimes = new int[]{11707, 2908, 5602};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_10dot03_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_10.03_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 11700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(7700, 7709, 0), new ScheduledTask(900, 903, 0), new ScheduledTask(4600, 4607, 0), new ScheduledTask(2900, 2908, 1), new ScheduledTask(2900, 2910, 2), new ScheduledTask(7300, 7304, 0), new ScheduledTask(3700, 3709, 0), new ScheduledTask(3100, 3106, 0), new ScheduledTask(8600, 8610, 0), new ScheduledTask(6800, 6803, 0), new ScheduledTask(1400, 1408, 0), new ScheduledTask(6200, 6206, 0), new ScheduledTask(5300, 5309, 0), new ScheduledTask(9900, 9902, 0), new ScheduledTask(1200, 1202, 0), new ScheduledTask(2200, 2209, 0), new ScheduledTask(7100, 7102, 0), new ScheduledTask(5600, 5602, 3), new ScheduledTask(10100, 10109, 0), new ScheduledTask(11000, 11007, 0)};
        int[] expectedProcessorEndTimes = new int[]{11007, 2908, 2910, 5602};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_10dot03_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_10.03_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 11000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(7300, 7309, 0), new ScheduledTask(900, 903, 0), new ScheduledTask(4600, 4607, 0), new ScheduledTask(2900, 2908, 2), new ScheduledTask(2900, 2910, 1), new ScheduledTask(4100, 4104, 2), new ScheduledTask(3700, 3709, 0), new ScheduledTask(3100, 3106, 0), new ScheduledTask(8200, 8210, 0), new ScheduledTask(6800, 6803, 0), new ScheduledTask(1400, 1408, 0), new ScheduledTask(6200, 6206, 0), new ScheduledTask(5300, 5309, 0), new ScheduledTask(9200, 9202, 0), new ScheduledTask(1200, 1202, 0), new ScheduledTask(2200, 2209, 0), new ScheduledTask(7100, 7102, 0), new ScheduledTask(5600, 5602, 1), new ScheduledTask(9400, 9409, 0), new ScheduledTask(10300, 10307, 0)};
        int[] expectedProcessorEndTimes = new int[]{10307, 5602, 4104};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_10dot03_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_10.03_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 111;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(73, 82, 0), new ScheduledTask(9, 12, 0), new ScheduledTask(46, 53, 0), new ScheduledTask(39, 47, 1), new ScheduledTask(29, 39, 1), new ScheduledTask(47, 51, 1), new ScheduledTask(37, 46, 0), new ScheduledTask(31, 37, 0), new ScheduledTask(82, 92, 0), new ScheduledTask(68, 71, 0), new ScheduledTask(14, 22, 0), new ScheduledTask(62, 68, 0), new ScheduledTask(53, 62, 0), new ScheduledTask(93, 95, 0), new ScheduledTask(12, 14, 0), new ScheduledTask(22, 31, 0), new ScheduledTask(71, 73, 0), new ScheduledTask(56, 58, 1), new ScheduledTask(95, 104, 0), new ScheduledTask(104, 111, 0)};
        int[] expectedProcessorEndTimes = new int[]{111, 58};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_10dot03_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_10.03_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 110;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(73, 82, 0), new ScheduledTask(11, 14, 0), new ScheduledTask(46, 53, 0), new ScheduledTask(31, 39, 1), new ScheduledTask(31, 41, 2), new ScheduledTask(39, 43, 1), new ScheduledTask(37, 46, 0), new ScheduledTask(31, 37, 0), new ScheduledTask(82, 92, 0), new ScheduledTask(68, 71, 0), new ScheduledTask(14, 22, 0), new ScheduledTask(62, 68, 0), new ScheduledTask(53, 62, 0), new ScheduledTask(92, 94, 0), new ScheduledTask(9, 11, 0), new ScheduledTask(22, 31, 0), new ScheduledTask(71, 73, 0), new ScheduledTask(53, 55, 3), new ScheduledTask(94, 103, 0), new ScheduledTask(103, 110, 0)};
        int[] expectedProcessorEndTimes = new int[]{110, 43, 41, 55};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_10dot03_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_10.03_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 110;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(73, 82, 0), new ScheduledTask(11, 14, 0), new ScheduledTask(46, 53, 0), new ScheduledTask(31, 39, 1), new ScheduledTask(31, 41, 2), new ScheduledTask(39, 43, 1), new ScheduledTask(37, 46, 0), new ScheduledTask(31, 37, 0), new ScheduledTask(82, 92, 0), new ScheduledTask(68, 71, 0), new ScheduledTask(14, 22, 0), new ScheduledTask(62, 68, 0), new ScheduledTask(53, 62, 0), new ScheduledTask(92, 94, 0), new ScheduledTask(9, 11, 0), new ScheduledTask(22, 31, 0), new ScheduledTask(71, 73, 0), new ScheduledTask(53, 55, 3), new ScheduledTask(94, 103, 0), new ScheduledTask(103, 110, 0)};
        int[] expectedProcessorEndTimes = new int[]{110, 43, 41, 55};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_10dot04_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_10.04_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 11100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(500, 510, 0), new ScheduledTask(1500, 1509, 0), new ScheduledTask(2400, 2402, 0), new ScheduledTask(2600, 2604, 0), new ScheduledTask(3000, 3003, 0), new ScheduledTask(3300, 3304, 0), new ScheduledTask(3700, 3703, 0), new ScheduledTask(4000, 4003, 0), new ScheduledTask(4300, 4308, 0), new ScheduledTask(5100, 5105, 0), new ScheduledTask(5600, 5608, 0), new ScheduledTask(6400, 6408, 0), new ScheduledTask(7200, 7207, 0), new ScheduledTask(7900, 7904, 0), new ScheduledTask(8300, 8303, 0), new ScheduledTask(8600, 8605, 0), new ScheduledTask(9100, 9107, 0), new ScheduledTask(9800, 9803, 0), new ScheduledTask(10100, 10103, 0), new ScheduledTask(10400, 10407, 0)};
        int[] expectedProcessorEndTimes = new int[]{10407};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_10dot04_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_10.04_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 10200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(2200, 2210, 0), new ScheduledTask(500, 509, 0), new ScheduledTask(2700, 2702, 1), new ScheduledTask(5000, 5004, 0), new ScheduledTask(5400, 5403, 0), new ScheduledTask(4600, 4604, 0), new ScheduledTask(4300, 4303, 0), new ScheduledTask(4000, 4003, 0), new ScheduledTask(3200, 3208, 0), new ScheduledTask(3100, 3105, 1), new ScheduledTask(1400, 1408, 0), new ScheduledTask(5700, 5708, 0), new ScheduledTask(4100, 4107, 1), new ScheduledTask(7000, 7004, 0), new ScheduledTask(8400, 8403, 0), new ScheduledTask(8700, 8705, 0), new ScheduledTask(7700, 7707, 0), new ScheduledTask(9200, 9203, 0), new ScheduledTask(7400, 7403, 0), new ScheduledTask(9500, 9507, 0)};
        int[] expectedProcessorEndTimes = new int[]{9507, 4107};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_10dot04_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_10.04_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 9700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(2200, 2210, 0), new ScheduledTask(500, 509, 0), new ScheduledTask(2700, 2702, 2), new ScheduledTask(5000, 5004, 0), new ScheduledTask(5400, 5403, 0), new ScheduledTask(4600, 4604, 0), new ScheduledTask(4300, 4303, 0), new ScheduledTask(4000, 4003, 0), new ScheduledTask(3200, 3208, 0), new ScheduledTask(3000, 3005, 2), new ScheduledTask(1400, 1408, 0), new ScheduledTask(5700, 5708, 0), new ScheduledTask(3750, 3757, 2), new ScheduledTask(6500, 6504, 0), new ScheduledTask(7900, 7903, 0), new ScheduledTask(8200, 8205, 0), new ScheduledTask(7200, 7207, 0), new ScheduledTask(8700, 8703, 0), new ScheduledTask(6900, 6903, 0), new ScheduledTask(9000, 9007, 0)};
        int[] expectedProcessorEndTimes = new int[]{9007, 0, 3757};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_10dot04_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_10.04_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 97;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(22, 32, 0), new ScheduledTask(5, 14, 0), new ScheduledTask(27, 29, 1), new ScheduledTask(50, 54, 0), new ScheduledTask(54, 57, 0), new ScheduledTask(46, 50, 0), new ScheduledTask(43, 46, 0), new ScheduledTask(40, 43, 0), new ScheduledTask(32, 40, 0), new ScheduledTask(29, 34, 1), new ScheduledTask(14, 22, 0), new ScheduledTask(57, 65, 0), new ScheduledTask(34, 41, 1), new ScheduledTask(65, 69, 0), new ScheduledTask(79, 82, 0), new ScheduledTask(82, 87, 0), new ScheduledTask(72, 79, 0), new ScheduledTask(87, 90, 0), new ScheduledTask(69, 72, 0), new ScheduledTask(90, 97, 0)};
        int[] expectedProcessorEndTimes = new int[]{97, 41};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_10dot04_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_10.04_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 97;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(22, 32, 0), new ScheduledTask(5, 14, 0), new ScheduledTask(27, 29, 1), new ScheduledTask(50, 54, 0), new ScheduledTask(54, 57, 0), new ScheduledTask(46, 50, 0), new ScheduledTask(43, 46, 0), new ScheduledTask(40, 43, 0), new ScheduledTask(32, 40, 0), new ScheduledTask(29, 34, 1), new ScheduledTask(14, 22, 0), new ScheduledTask(57, 65, 0), new ScheduledTask(34, 41, 1), new ScheduledTask(65, 69, 0), new ScheduledTask(79, 82, 0), new ScheduledTask(82, 87, 0), new ScheduledTask(72, 79, 0), new ScheduledTask(87, 90, 0), new ScheduledTask(69, 72, 0), new ScheduledTask(90, 97, 0)};
        int[] expectedProcessorEndTimes = new int[]{97, 41};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_10dot04_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_10.04_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 97;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(22, 32, 0), new ScheduledTask(5, 14, 0), new ScheduledTask(27, 29, 1), new ScheduledTask(50, 54, 0), new ScheduledTask(54, 57, 0), new ScheduledTask(46, 50, 0), new ScheduledTask(43, 46, 0), new ScheduledTask(40, 43, 0), new ScheduledTask(32, 40, 0), new ScheduledTask(29, 34, 1), new ScheduledTask(14, 22, 0), new ScheduledTask(57, 65, 0), new ScheduledTask(34, 41, 1), new ScheduledTask(65, 69, 0), new ScheduledTask(79, 82, 0), new ScheduledTask(82, 87, 0), new ScheduledTask(72, 79, 0), new ScheduledTask(87, 90, 0), new ScheduledTask(69, 72, 0), new ScheduledTask(90, 97, 0)};
        int[] expectedProcessorEndTimes = new int[]{97, 41};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_10dot06_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_10.06_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 10900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(5700, 5703, 0), new ScheduledTask(1100, 1104, 0), new ScheduledTask(7400, 7407, 0), new ScheduledTask(4200, 4205, 0), new ScheduledTask(6400, 6404, 0), new ScheduledTask(6200, 6202, 0), new ScheduledTask(3400, 3408, 0), new ScheduledTask(2700, 2707, 0), new ScheduledTask(2100, 2106, 0), new ScheduledTask(200, 209, 0), new ScheduledTask(6800, 6806, 0), new ScheduledTask(1500, 1506, 0), new ScheduledTask(6000, 6002, 0), new ScheduledTask(4700, 4710, 0), new ScheduledTask(2900, 2904, 1), new ScheduledTask(8100, 8105, 0), new ScheduledTask(8600, 8608, 0), new ScheduledTask(9400, 9405, 0), new ScheduledTask(9900, 9906, 0), new ScheduledTask(10500, 10504, 0)};
        int[] expectedProcessorEndTimes = new int[]{10504, 2904};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_10dot06_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_10.06_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 10000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(200, 203, 0), new ScheduledTask(2000, 2004, 0), new ScheduledTask(1300, 1307, 0), new ScheduledTask(5100, 5105, 0), new ScheduledTask(900, 904, 0), new ScheduledTask(700, 702, 0), new ScheduledTask(4300, 4308, 0), new ScheduledTask(3600, 3607, 0), new ScheduledTask(3000, 3006, 0), new ScheduledTask(3200, 3209, 1), new ScheduledTask(4100, 4106, 2), new ScheduledTask(2400, 2406, 0), new ScheduledTask(500, 502, 0), new ScheduledTask(5600, 5610, 0), new ScheduledTask(6800, 6804, 0), new ScheduledTask(7200, 7205, 0), new ScheduledTask(7700, 7708, 0), new ScheduledTask(8500, 8505, 0), new ScheduledTask(9000, 9006, 0), new ScheduledTask(9600, 9604, 0)};
        int[] expectedProcessorEndTimes = new int[]{9604, 3209, 4106};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_10dot06_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_10.06_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 9340;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 1), new ScheduledTask(240, 243, 1), new ScheduledTask(2040, 2044, 0), new ScheduledTask(2280, 2287, 1), new ScheduledTask(5140, 5145, 0), new ScheduledTask(1080, 1084, 1), new ScheduledTask(840, 842, 1), new ScheduledTask(4340, 4348, 0), new ScheduledTask(3640, 3647, 0), new ScheduledTask(3040, 3046, 0), new ScheduledTask(3240, 3249, 2), new ScheduledTask(1560, 1566, 1), new ScheduledTask(2440, 2446, 0), new ScheduledTask(600, 602, 1), new ScheduledTask(5640, 5650, 0), new ScheduledTask(6640, 6644, 0), new ScheduledTask(3120, 3125, 1), new ScheduledTask(7040, 7048, 0), new ScheduledTask(7840, 7845, 0), new ScheduledTask(8340, 8346, 0), new ScheduledTask(8940, 8944, 0)};
        int[] expectedProcessorEndTimes = new int[]{8944, 3125, 3249};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_10dot06_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_10.06_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 91;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(15, 18, 0), new ScheduledTask(20, 24, 1), new ScheduledTask(32, 39, 0), new ScheduledTask(45, 50, 1), new ScheduledTask(22, 26, 0), new ScheduledTask(20, 22, 0), new ScheduledTask(24, 32, 1), new ScheduledTask(38, 45, 1), new ScheduledTask(50, 56, 1), new ScheduledTask(2, 11, 0), new ScheduledTask(26, 32, 0), new ScheduledTask(32, 38, 1), new ScheduledTask(18, 20, 0), new ScheduledTask(56, 66, 1), new ScheduledTask(11, 15, 0), new ScheduledTask(39, 44, 0), new ScheduledTask(68, 76, 1), new ScheduledTask(76, 81, 1), new ScheduledTask(81, 87, 1), new ScheduledTask(87, 91, 1)};
        int[] expectedProcessorEndTimes = new int[]{44, 91};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_10dot06_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_10.06_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 89;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(11, 14, 0), new ScheduledTask(20, 24, 1), new ScheduledTask(28, 35, 0), new ScheduledTask(45, 50, 1), new ScheduledTask(18, 22, 0), new ScheduledTask(16, 18, 0), new ScheduledTask(24, 32, 1), new ScheduledTask(38, 45, 1), new ScheduledTask(50, 56, 1), new ScheduledTask(2, 11, 0), new ScheduledTask(22, 28, 0), new ScheduledTask(32, 38, 1), new ScheduledTask(14, 16, 0), new ScheduledTask(56, 66, 1), new ScheduledTask(29, 33, 2), new ScheduledTask(35, 40, 0), new ScheduledTask(66, 74, 1), new ScheduledTask(74, 79, 1), new ScheduledTask(79, 85, 1), new ScheduledTask(85, 89, 1)};
        int[] expectedProcessorEndTimes = new int[]{40, 89, 33};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_10dot06_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_10.06_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 89;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(11, 14, 0), new ScheduledTask(20, 24, 1), new ScheduledTask(28, 35, 0), new ScheduledTask(45, 50, 1), new ScheduledTask(18, 22, 0), new ScheduledTask(16, 18, 0), new ScheduledTask(24, 32, 1), new ScheduledTask(38, 45, 1), new ScheduledTask(50, 56, 1), new ScheduledTask(2, 11, 0), new ScheduledTask(22, 28, 0), new ScheduledTask(32, 38, 1), new ScheduledTask(14, 16, 0), new ScheduledTask(56, 66, 1), new ScheduledTask(29, 33, 2), new ScheduledTask(35, 40, 0), new ScheduledTask(66, 74, 1), new ScheduledTask(74, 79, 1), new ScheduledTask(79, 85, 1), new ScheduledTask(85, 89, 1)};
        int[] expectedProcessorEndTimes = new int[]{40, 89, 33};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_9dot97_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_9.97_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 12000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(1300, 1302, 0), new ScheduledTask(800, 805, 0), new ScheduledTask(7300, 7303, 0), new ScheduledTask(6400, 6409, 0), new ScheduledTask(5900, 5905, 0), new ScheduledTask(5600, 5603, 0), new ScheduledTask(4600, 4610, 0), new ScheduledTask(9200, 9206, 0), new ScheduledTask(4100, 4105, 0), new ScheduledTask(8500, 8507, 0), new ScheduledTask(7600, 7609, 0), new ScheduledTask(5000, 5004, 1), new ScheduledTask(5200, 5202, 2), new ScheduledTask(3400, 3407, 0), new ScheduledTask(10700, 10705, 0), new ScheduledTask(10000, 10007, 0), new ScheduledTask(9800, 9802, 0), new ScheduledTask(2500, 2509, 0), new ScheduledTask(1500, 1510, 0), new ScheduledTask(11200, 11208, 0)};
        int[] expectedProcessorEndTimes = new int[]{11208, 5004, 5202};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_9dot97_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_9.97_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(7400, 7402, 0), new ScheduledTask(800, 805, 0), new ScheduledTask(4200, 4203, 0), new ScheduledTask(3300, 3309, 0), new ScheduledTask(2800, 2805, 0), new ScheduledTask(8500, 8503, 0), new ScheduledTask(1800, 1810, 0), new ScheduledTask(6100, 6106, 0), new ScheduledTask(1300, 1305, 0), new ScheduledTask(5400, 5407, 0), new ScheduledTask(4500, 4509, 0), new ScheduledTask(5000, 5004, 1), new ScheduledTask(8300, 8302, 0), new ScheduledTask(7600, 7607, 0), new ScheduledTask(9000, 9005, 0), new ScheduledTask(6700, 6707, 0), new ScheduledTask(8800, 8802, 0), new ScheduledTask(5100, 5109, 2), new ScheduledTask(6400, 6410, 3), new ScheduledTask(9600, 9608, 0)};
        int[] expectedProcessorEndTimes = new int[]{9608, 5004, 5109, 6410};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_9dot97_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_9.97_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 91;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(11, 13, 0), new ScheduledTask(15, 20, 0), new ScheduledTask(8, 11, 0), new ScheduledTask(46, 55, 1), new ScheduledTask(68, 73, 1), new ScheduledTask(73, 76, 1), new ScheduledTask(25, 35, 0), new ScheduledTask(55, 61, 1), new ScheduledTask(20, 25, 0), new ScheduledTask(39, 46, 1), new ScheduledTask(30, 39, 1), new ScheduledTask(42, 46, 0), new ScheduledTask(13, 15, 0), new ScheduledTask(35, 42, 0), new ScheduledTask(78, 83, 1), new ScheduledTask(61, 68, 1), new ScheduledTask(76, 78, 1), new ScheduledTask(46, 55, 0), new ScheduledTask(55, 65, 0), new ScheduledTask(83, 91, 1)};
        int[] expectedProcessorEndTimes = new int[]{65, 91};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_9dot97_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_9.97_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 91;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(30, 32, 0), new ScheduledTask(11, 16, 0), new ScheduledTask(8, 11, 0), new ScheduledTask(43, 52, 1), new ScheduledTask(65, 70, 1), new ScheduledTask(41, 44, 0), new ScheduledTask(16, 26, 0), new ScheduledTask(54, 60, 1), new ScheduledTask(60, 65, 1), new ScheduledTask(36, 43, 1), new ScheduledTask(30, 39, 2), new ScheduledTask(26, 30, 0), new ScheduledTask(39, 41, 0), new ScheduledTask(32, 39, 0), new ScheduledTask(70, 75, 1), new ScheduledTask(76, 83, 1), new ScheduledTask(44, 46, 0), new ScheduledTask(46, 55, 0), new ScheduledTask(55, 65, 0), new ScheduledTask(83, 91, 1)};
        int[] expectedProcessorEndTimes = new int[]{65, 91, 39};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_9dot97_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_9.97_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 91;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(30, 32, 0), new ScheduledTask(11, 16, 0), new ScheduledTask(8, 11, 0), new ScheduledTask(43, 52, 1), new ScheduledTask(65, 70, 1), new ScheduledTask(41, 44, 0), new ScheduledTask(16, 26, 0), new ScheduledTask(54, 60, 1), new ScheduledTask(60, 65, 1), new ScheduledTask(36, 43, 1), new ScheduledTask(30, 39, 2), new ScheduledTask(26, 30, 0), new ScheduledTask(39, 41, 0), new ScheduledTask(32, 39, 0), new ScheduledTask(70, 75, 1), new ScheduledTask(76, 83, 1), new ScheduledTask(44, 46, 0), new ScheduledTask(46, 55, 0), new ScheduledTask(55, 65, 0), new ScheduledTask(83, 91, 1)};
        int[] expectedProcessorEndTimes = new int[]{65, 91, 39};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_9dot98_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_9.98_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 11900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(900, 905, 0), new ScheduledTask(400, 405, 0), new ScheduledTask(7400, 7403, 0), new ScheduledTask(6400, 6410, 0), new ScheduledTask(5200, 5209, 0), new ScheduledTask(3800, 3807, 0), new ScheduledTask(7700, 7706, 0), new ScheduledTask(3700, 3706, 1), new ScheduledTask(3100, 3107, 0), new ScheduledTask(2800, 2803, 0), new ScheduledTask(1800, 1810, 0), new ScheduledTask(4500, 4507, 0), new ScheduledTask(9700, 9706, 0), new ScheduledTask(6100, 6103, 0), new ScheduledTask(8300, 8307, 0), new ScheduledTask(4000, 4005, 2), new ScheduledTask(1400, 1404, 0), new ScheduledTask(9000, 9007, 0), new ScheduledTask(10300, 10310, 0), new ScheduledTask(11300, 11306, 0)};
        int[] expectedProcessorEndTimes = new int[]{11306, 3706, 4005};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_9dot98_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_9.98_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(400, 405, 0), new ScheduledTask(900, 905, 0), new ScheduledTask(5700, 5703, 0), new ScheduledTask(4700, 4710, 0), new ScheduledTask(3500, 3509, 0), new ScheduledTask(2100, 2107, 0), new ScheduledTask(6000, 6006, 0), new ScheduledTask(3200, 3206, 1), new ScheduledTask(4000, 4007, 2), new ScheduledTask(1800, 1803, 0), new ScheduledTask(3700, 3710, 3), new ScheduledTask(2800, 2807, 0), new ScheduledTask(7300, 7306, 0), new ScheduledTask(4400, 4403, 0), new ScheduledTask(6600, 6607, 0), new ScheduledTask(4500, 4505, 1), new ScheduledTask(1400, 1404, 0), new ScheduledTask(8000, 8007, 0), new ScheduledTask(8700, 8710, 0), new ScheduledTask(9700, 9706, 0)};
        int[] expectedProcessorEndTimes = new int[]{9706, 4505, 4007, 3710};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_9dot98_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_9.98_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(1300, 1305, 0), new ScheduledTask(400, 405, 0), new ScheduledTask(5700, 5703, 0), new ScheduledTask(4700, 4710, 0), new ScheduledTask(3500, 3509, 0), new ScheduledTask(2100, 2107, 0), new ScheduledTask(6000, 6006, 0), new ScheduledTask(4100, 4106, 1), new ScheduledTask(5000, 5007, 3), new ScheduledTask(1800, 1803, 0), new ScheduledTask(3200, 3210, 2), new ScheduledTask(2800, 2807, 0), new ScheduledTask(8000, 8006, 0), new ScheduledTask(4400, 4403, 0), new ScheduledTask(6600, 6607, 0), new ScheduledTask(4000, 4005, 3), new ScheduledTask(900, 904, 0), new ScheduledTask(7300, 7307, 0), new ScheduledTask(8600, 8610, 0), new ScheduledTask(9600, 9606, 0)};
        int[] expectedProcessorEndTimes = new int[]{9606, 4106, 3210, 5007};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_9dot98_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_9.98_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(20, 25, 1), new ScheduledTask(16, 21, 0), new ScheduledTask(68, 71, 1), new ScheduledTask(38, 48, 1), new ScheduledTask(4, 13, 0), new ScheduledTask(54, 61, 1), new ScheduledTask(71, 77, 1), new ScheduledTask(32, 38, 1), new ScheduledTask(25, 32, 1), new ScheduledTask(21, 24, 0), new ScheduledTask(33, 43, 0), new ScheduledTask(61, 68, 1), new ScheduledTask(48, 54, 1), new ScheduledTask(13, 16, 0), new ScheduledTask(77, 84, 1), new ScheduledTask(28, 33, 0), new ScheduledTask(24, 28, 0), new ScheduledTask(43, 50, 0), new ScheduledTask(84, 94, 1), new ScheduledTask(94, 100, 1)};
        int[] expectedProcessorEndTimes = new int[]{50, 100};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_9dot98_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_9.98_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(20, 25, 1), new ScheduledTask(16, 21, 0), new ScheduledTask(68, 71, 1), new ScheduledTask(38, 48, 1), new ScheduledTask(4, 13, 0), new ScheduledTask(54, 61, 1), new ScheduledTask(71, 77, 1), new ScheduledTask(32, 38, 1), new ScheduledTask(25, 32, 1), new ScheduledTask(21, 24, 0), new ScheduledTask(33, 43, 0), new ScheduledTask(61, 68, 1), new ScheduledTask(48, 54, 1), new ScheduledTask(13, 16, 0), new ScheduledTask(77, 84, 1), new ScheduledTask(28, 33, 0), new ScheduledTask(24, 28, 0), new ScheduledTask(43, 50, 0), new ScheduledTask(84, 94, 1), new ScheduledTask(94, 100, 1)};
        int[] expectedProcessorEndTimes = new int[]{50, 100};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_9dot98_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_9.98_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(20, 25, 1), new ScheduledTask(19, 24, 0), new ScheduledTask(16, 19, 0), new ScheduledTask(32, 42, 1), new ScheduledTask(4, 13, 0), new ScheduledTask(51, 58, 1), new ScheduledTask(65, 71, 1), new ScheduledTask(48, 54, 2), new ScheduledTask(25, 32, 1), new ScheduledTask(24, 27, 0), new ScheduledTask(36, 46, 0), new ScheduledTask(58, 65, 1), new ScheduledTask(78, 84, 1), new ScheduledTask(13, 16, 0), new ScheduledTask(71, 78, 1), new ScheduledTask(31, 36, 0), new ScheduledTask(27, 31, 0), new ScheduledTask(46, 53, 0), new ScheduledTask(84, 94, 1), new ScheduledTask(94, 100, 1)};
        int[] expectedProcessorEndTimes = new int[]{53, 100, 54};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_9dot98_WeightType_Random2_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_9.98_WeightType_Random#2_Heterogeneous-4-2-strong.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 12200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(200, 206, 0), new ScheduledTask(800, 804, 0), new ScheduledTask(3600, 3606, 0), new ScheduledTask(6100, 6109, 0), new ScheduledTask(1700, 1708, 0), new ScheduledTask(5600, 5605, 0), new ScheduledTask(7000, 7004, 0), new ScheduledTask(2500, 2503, 0), new ScheduledTask(1200, 1205, 0), new ScheduledTask(4600, 4610, 0), new ScheduledTask(4000, 4004, 1), new ScheduledTask(2800, 2808, 0), new ScheduledTask(4200, 4204, 0), new ScheduledTask(7900, 7906, 0), new ScheduledTask(7400, 7402, 0), new ScheduledTask(8500, 8505, 0), new ScheduledTask(10500, 10509, 0), new ScheduledTask(9600, 9609, 0), new ScheduledTask(9000, 9006, 0), new ScheduledTask(11400, 11408, 0)};
        int[] expectedProcessorEndTimes = new int[]{11408, 4004};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_9dot98_WeightType_Random2_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_9.98_WeightType_Random#2_Heterogeneous-4-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 11400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(200, 206, 0), new ScheduledTask(800, 804, 0), new ScheduledTask(3100, 3106, 0), new ScheduledTask(5600, 5609, 0), new ScheduledTask(1200, 1208, 0), new ScheduledTask(5100, 5105, 0), new ScheduledTask(7100, 7104, 0), new ScheduledTask(2000, 2003, 0), new ScheduledTask(2700, 2705, 1), new ScheduledTask(4100, 4110, 0), new ScheduledTask(3700, 3704, 1), new ScheduledTask(2300, 2308, 0), new ScheduledTask(3700, 3704, 0), new ScheduledTask(6500, 6506, 0), new ScheduledTask(7500, 7502, 0), new ScheduledTask(7700, 7705, 0), new ScheduledTask(9100, 9109, 0), new ScheduledTask(8200, 8209, 0), new ScheduledTask(10000, 10006, 0), new ScheduledTask(10600, 10608, 0)};
        int[] expectedProcessorEndTimes = new int[]{10608, 3704};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_9dot98_WeightType_Random2_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_9.98_WeightType_Random#2_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 11400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(200, 206, 0), new ScheduledTask(800, 804, 0), new ScheduledTask(3100, 3106, 0), new ScheduledTask(5600, 5609, 0), new ScheduledTask(1200, 1208, 0), new ScheduledTask(5100, 5105, 0), new ScheduledTask(7100, 7104, 0), new ScheduledTask(2000, 2003, 0), new ScheduledTask(2700, 2705, 3), new ScheduledTask(4100, 4110, 0), new ScheduledTask(3700, 3704, 3), new ScheduledTask(2300, 2308, 0), new ScheduledTask(3700, 3704, 0), new ScheduledTask(6500, 6506, 0), new ScheduledTask(7500, 7502, 0), new ScheduledTask(7700, 7705, 0), new ScheduledTask(9100, 9109, 0), new ScheduledTask(8200, 8209, 0), new ScheduledTask(10000, 10006, 0), new ScheduledTask(10600, 10608, 0)};
        int[] expectedProcessorEndTimes = new int[]{10608, 0, 0, 3704};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_9dot98_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_9.98_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 114;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 8, 0), new ScheduledTask(8, 12, 0), new ScheduledTask(31, 37, 0), new ScheduledTask(62, 71, 0), new ScheduledTask(12, 20, 0), new ScheduledTask(57, 62, 0), new ScheduledTask(71, 75, 0), new ScheduledTask(20, 23, 0), new ScheduledTask(27, 32, 1), new ScheduledTask(41, 51, 0), new ScheduledTask(32, 36, 1), new ScheduledTask(23, 31, 0), new ScheduledTask(37, 41, 0), new ScheduledTask(51, 57, 0), new ScheduledTask(75, 77, 0), new ScheduledTask(77, 82, 0), new ScheduledTask(91, 100, 0), new ScheduledTask(82, 91, 0), new ScheduledTask(100, 106, 0), new ScheduledTask(106, 114, 0)};
        int[] expectedProcessorEndTimes = new int[]{114, 36};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_9dot98_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_9.98_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 114;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 8, 0), new ScheduledTask(8, 12, 0), new ScheduledTask(31, 37, 0), new ScheduledTask(62, 71, 0), new ScheduledTask(12, 20, 0), new ScheduledTask(57, 62, 0), new ScheduledTask(71, 75, 0), new ScheduledTask(20, 23, 0), new ScheduledTask(27, 32, 1), new ScheduledTask(41, 51, 0), new ScheduledTask(32, 36, 1), new ScheduledTask(23, 31, 0), new ScheduledTask(37, 41, 0), new ScheduledTask(51, 57, 0), new ScheduledTask(75, 77, 0), new ScheduledTask(77, 82, 0), new ScheduledTask(91, 100, 0), new ScheduledTask(82, 91, 0), new ScheduledTask(100, 106, 0), new ScheduledTask(106, 114, 0)};
        int[] expectedProcessorEndTimes = new int[]{114, 36};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_9dot98_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_9.98_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 114;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 8, 0), new ScheduledTask(8, 12, 0), new ScheduledTask(31, 37, 0), new ScheduledTask(62, 71, 0), new ScheduledTask(12, 20, 0), new ScheduledTask(57, 62, 0), new ScheduledTask(71, 75, 0), new ScheduledTask(20, 23, 0), new ScheduledTask(27, 32, 1), new ScheduledTask(41, 51, 0), new ScheduledTask(32, 36, 1), new ScheduledTask(23, 31, 0), new ScheduledTask(37, 41, 0), new ScheduledTask(51, 57, 0), new ScheduledTask(75, 77, 0), new ScheduledTask(77, 82, 0), new ScheduledTask(91, 100, 0), new ScheduledTask(82, 91, 0), new ScheduledTask(100, 106, 0), new ScheduledTask(106, 114, 0)};
        int[] expectedProcessorEndTimes = new int[]{114, 36};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_9dot98_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_9.98_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 112;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 6, 0), new ScheduledTask(6, 15, 0), new ScheduledTask(37, 47, 0), new ScheduledTask(47, 50, 0), new ScheduledTask(25, 28, 0), new ScheduledTask(50, 55, 0), new ScheduledTask(55, 58, 0), new ScheduledTask(18, 22, 0), new ScheduledTask(58, 65, 0), new ScheduledTask(28, 34, 0), new ScheduledTask(65, 75, 0), new ScheduledTask(15, 18, 0), new ScheduledTask(22, 25, 0), new ScheduledTask(34, 37, 0), new ScheduledTask(31, 38, 1), new ScheduledTask(77, 83, 0), new ScheduledTask(102, 107, 0), new ScheduledTask(83, 92, 0), new ScheduledTask(92, 102, 0), new ScheduledTask(107, 112, 0)};
        int[] expectedProcessorEndTimes = new int[]{112, 38};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_9dot98_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_9.98_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 112;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 6, 0), new ScheduledTask(6, 15, 0), new ScheduledTask(37, 47, 0), new ScheduledTask(47, 50, 0), new ScheduledTask(25, 28, 0), new ScheduledTask(50, 55, 0), new ScheduledTask(55, 58, 0), new ScheduledTask(18, 22, 0), new ScheduledTask(58, 65, 0), new ScheduledTask(28, 34, 0), new ScheduledTask(65, 75, 0), new ScheduledTask(15, 18, 0), new ScheduledTask(22, 25, 0), new ScheduledTask(34, 37, 0), new ScheduledTask(31, 38, 1), new ScheduledTask(77, 83, 0), new ScheduledTask(102, 107, 0), new ScheduledTask(83, 92, 0), new ScheduledTask(92, 102, 0), new ScheduledTask(107, 112, 0)};
        int[] expectedProcessorEndTimes = new int[]{112, 38};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_9dot98_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_9.98_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 112;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 6, 0), new ScheduledTask(6, 15, 0), new ScheduledTask(37, 47, 0), new ScheduledTask(47, 50, 0), new ScheduledTask(25, 28, 0), new ScheduledTask(50, 55, 0), new ScheduledTask(55, 58, 0), new ScheduledTask(18, 22, 0), new ScheduledTask(58, 65, 0), new ScheduledTask(28, 34, 0), new ScheduledTask(65, 75, 0), new ScheduledTask(15, 18, 0), new ScheduledTask(22, 25, 0), new ScheduledTask(34, 37, 0), new ScheduledTask(31, 38, 1), new ScheduledTask(77, 83, 0), new ScheduledTask(102, 107, 0), new ScheduledTask(83, 92, 0), new ScheduledTask(92, 102, 0), new ScheduledTask(107, 112, 0)};
        int[] expectedProcessorEndTimes = new int[]{112, 38};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_9dot98_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_9.98_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 112;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 6, 0), new ScheduledTask(6, 15, 0), new ScheduledTask(37, 47, 0), new ScheduledTask(47, 50, 0), new ScheduledTask(25, 28, 0), new ScheduledTask(50, 55, 0), new ScheduledTask(55, 58, 0), new ScheduledTask(18, 22, 0), new ScheduledTask(58, 65, 0), new ScheduledTask(28, 34, 0), new ScheduledTask(65, 75, 0), new ScheduledTask(15, 18, 0), new ScheduledTask(22, 25, 0), new ScheduledTask(34, 37, 0), new ScheduledTask(31, 38, 1), new ScheduledTask(77, 83, 0), new ScheduledTask(102, 107, 0), new ScheduledTask(83, 92, 0), new ScheduledTask(92, 102, 0), new ScheduledTask(107, 112, 0)};
        int[] expectedProcessorEndTimes = new int[]{112, 38};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_9dot98_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_9.98_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 10700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(5000, 5005, 0), new ScheduledTask(5500, 5508, 0), new ScheduledTask(2900, 2906, 0), new ScheduledTask(200, 203, 0), new ScheduledTask(7100, 7104, 0), new ScheduledTask(3500, 3510, 0), new ScheduledTask(1800, 1808, 0), new ScheduledTask(500, 506, 0), new ScheduledTask(6700, 6704, 0), new ScheduledTask(6300, 6304, 0), new ScheduledTask(7500, 7510, 0), new ScheduledTask(3400, 3403, 1), new ScheduledTask(1100, 1107, 0), new ScheduledTask(4100, 4102, 2), new ScheduledTask(4500, 4505, 0), new ScheduledTask(2600, 2603, 0), new ScheduledTask(8500, 8506, 0), new ScheduledTask(5700, 5703, 1), new ScheduledTask(9100, 9109, 0), new ScheduledTask(10000, 10007, 0)};
        int[] expectedProcessorEndTimes = new int[]{10007, 5703, 4102};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_9dot98_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_9.98_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 10100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(5000, 5005, 0), new ScheduledTask(5500, 5508, 0), new ScheduledTask(2900, 2906, 0), new ScheduledTask(200, 203, 0), new ScheduledTask(6700, 6704, 0), new ScheduledTask(3500, 3510, 0), new ScheduledTask(1800, 1808, 0), new ScheduledTask(500, 506, 0), new ScheduledTask(7100, 7104, 0), new ScheduledTask(6300, 6304, 0), new ScheduledTask(7500, 7510, 0), new ScheduledTask(3400, 3403, 1), new ScheduledTask(1100, 1107, 0), new ScheduledTask(4100, 4102, 1), new ScheduledTask(4500, 4505, 0), new ScheduledTask(2600, 2603, 0), new ScheduledTask(4500, 4506, 1), new ScheduledTask(5700, 5703, 1), new ScheduledTask(8500, 8509, 0), new ScheduledTask(9400, 9407, 0)};
        int[] expectedProcessorEndTimes = new int[]{9407, 5703};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_9dot98_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_9.98_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 9320;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(3900, 3905, 0), new ScheduledTask(4400, 4408, 0), new ScheduledTask(1800, 1806, 0), new ScheduledTask(200, 203, 0), new ScheduledTask(5600, 5604, 0), new ScheduledTask(2400, 2410, 0), new ScheduledTask(3300, 3308, 1), new ScheduledTask(500, 506, 0), new ScheduledTask(6000, 6004, 0), new ScheduledTask(5200, 5204, 0), new ScheduledTask(6400, 6410, 0), new ScheduledTask(4620, 4623, 1), new ScheduledTask(1100, 1107, 0), new ScheduledTask(4100, 4102, 2), new ScheduledTask(3400, 3405, 0), new ScheduledTask(4260, 4263, 1), new ScheduledTask(4400, 4406, 2), new ScheduledTask(5700, 5703, 1), new ScheduledTask(7720, 7729, 0), new ScheduledTask(8620, 8627, 0)};
        int[] expectedProcessorEndTimes = new int[]{8627, 5703, 4406};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(23, 28, 0), new ScheduledTask(44, 52, 1), new ScheduledTask(2, 8, 0), new ScheduledTask(36, 39, 0), new ScheduledTask(56, 60, 1), new ScheduledTask(8, 18, 0), new ScheduledTask(33, 41, 1), new ScheduledTask(39, 45, 0), new ScheduledTask(60, 64, 1), new ScheduledTask(52, 56, 1), new ScheduledTask(64, 74, 1), new ScheduledTask(45, 48, 0), new ScheduledTask(48, 55, 0), new ScheduledTask(28, 30, 0), new ScheduledTask(18, 23, 0), new ScheduledTask(41, 44, 1), new ScheduledTask(30, 36, 0), new ScheduledTask(55, 58, 0), new ScheduledTask(74, 83, 1), new ScheduledTask(83, 90, 1)};
        int[] expectedProcessorEndTimes = new int[]{58, 90};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(23, 28, 0), new ScheduledTask(44, 52, 1), new ScheduledTask(2, 8, 0), new ScheduledTask(28, 31, 0), new ScheduledTask(56, 60, 1), new ScheduledTask(8, 18, 0), new ScheduledTask(33, 41, 1), new ScheduledTask(31, 37, 0), new ScheduledTask(60, 64, 1), new ScheduledTask(52, 56, 1), new ScheduledTask(64, 74, 1), new ScheduledTask(37, 40, 0), new ScheduledTask(40, 47, 0), new ScheduledTask(41, 43, 2), new ScheduledTask(18, 23, 0), new ScheduledTask(41, 44, 1), new ScheduledTask(43, 49, 2), new ScheduledTask(47, 50, 0), new ScheduledTask(74, 83, 1), new ScheduledTask(83, 90, 1)};
        int[] expectedProcessorEndTimes = new int[]{50, 90, 49};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(23, 28, 0), new ScheduledTask(44, 52, 1), new ScheduledTask(2, 8, 0), new ScheduledTask(28, 31, 0), new ScheduledTask(56, 60, 1), new ScheduledTask(8, 18, 0), new ScheduledTask(33, 41, 1), new ScheduledTask(31, 37, 0), new ScheduledTask(60, 64, 1), new ScheduledTask(52, 56, 1), new ScheduledTask(64, 74, 1), new ScheduledTask(37, 40, 0), new ScheduledTask(40, 47, 0), new ScheduledTask(41, 43, 2), new ScheduledTask(18, 23, 0), new ScheduledTask(41, 44, 1), new ScheduledTask(43, 49, 2), new ScheduledTask(47, 50, 0), new ScheduledTask(74, 83, 1), new ScheduledTask(83, 90, 1)};
        int[] expectedProcessorEndTimes = new int[]{50, 90, 49};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_9dot99_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_9.99_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 12600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(300, 310, 0), new ScheduledTask(5600, 5608, 0), new ScheduledTask(8300, 8309, 0), new ScheduledTask(6600, 6608, 0), new ScheduledTask(6400, 6402, 0), new ScheduledTask(7400, 7409, 0), new ScheduledTask(3900, 3908, 0), new ScheduledTask(9200, 9210, 0), new ScheduledTask(4700, 4709, 0), new ScheduledTask(1300, 1307, 0), new ScheduledTask(2900, 2907, 0), new ScheduledTask(10200, 10203, 0), new ScheduledTask(2700, 2705, 1), new ScheduledTask(4900, 4903, 2), new ScheduledTask(3600, 3603, 0), new ScheduledTask(2000, 2009, 0), new ScheduledTask(10500, 10506, 0), new ScheduledTask(5700, 5702, 1), new ScheduledTask(11100, 11107, 0), new ScheduledTask(11800, 11808, 0)};
        int[] expectedProcessorEndTimes = new int[]{11808, 5702, 4903};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_9dot99_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_9.99_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 11600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(300, 310, 0), new ScheduledTask(2000, 2008, 0), new ScheduledTask(8300, 8309, 0), new ScheduledTask(7500, 7508, 0), new ScheduledTask(7300, 7302, 0), new ScheduledTask(6400, 6409, 0), new ScheduledTask(4700, 4708, 0), new ScheduledTask(5000, 5010, 1), new ScheduledTask(5500, 5509, 0), new ScheduledTask(4000, 4007, 0), new ScheduledTask(1300, 1307, 0), new ScheduledTask(9200, 9203, 0), new ScheduledTask(2700, 2705, 1), new ScheduledTask(4900, 4903, 2), new ScheduledTask(3700, 3703, 0), new ScheduledTask(2800, 2809, 0), new ScheduledTask(9500, 9506, 0), new ScheduledTask(5100, 5102, 3), new ScheduledTask(10100, 10107, 0), new ScheduledTask(10800, 10808, 0)};
        int[] expectedProcessorEndTimes = new int[]{10808, 5010, 4903, 5102};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_9dot99_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_9.99_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 11540;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(300, 310, 0), new ScheduledTask(2200, 2208, 0), new ScheduledTask(7300, 7309, 0), new ScheduledTask(6500, 6508, 0), new ScheduledTask(6300, 6302, 0), new ScheduledTask(5400, 5409, 0), new ScheduledTask(3700, 3708, 0), new ScheduledTask(5200, 5210, 1), new ScheduledTask(4500, 4509, 0), new ScheduledTask(3000, 3007, 0), new ScheduledTask(7500, 7507, 1), new ScheduledTask(8600, 8603, 0), new ScheduledTask(2700, 2705, 3), new ScheduledTask(4900, 4903, 3), new ScheduledTask(9740, 9743, 0), new ScheduledTask(1300, 1309, 0), new ScheduledTask(9100, 9106, 0), new ScheduledTask(3700, 3702, 3), new ScheduledTask(10040, 10047, 0), new ScheduledTask(10740, 10748, 0)};
        int[] expectedProcessorEndTimes = new int[]{10748, 7507, 0, 4903};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 114;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 13, 0), new ScheduledTask(22, 30, 0), new ScheduledTask(73, 82, 0), new ScheduledTask(65, 73, 0), new ScheduledTask(63, 65, 0), new ScheduledTask(54, 63, 0), new ScheduledTask(37, 45, 0), new ScheduledTask(52, 62, 1), new ScheduledTask(45, 54, 0), new ScheduledTask(30, 37, 0), new ScheduledTask(75, 82, 1), new ScheduledTask(84, 87, 0), new ScheduledTask(38, 43, 1), new ScheduledTask(49, 52, 1), new ScheduledTask(96, 99, 0), new ScheduledTask(13, 22, 0), new ScheduledTask(88, 94, 0), new ScheduledTask(36, 38, 1), new ScheduledTask(99, 106, 0), new ScheduledTask(106, 114, 0)};
        int[] expectedProcessorEndTimes = new int[]{114, 82};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 114;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 13, 0), new ScheduledTask(22, 30, 0), new ScheduledTask(73, 82, 0), new ScheduledTask(65, 73, 0), new ScheduledTask(63, 65, 0), new ScheduledTask(54, 63, 0), new ScheduledTask(37, 45, 0), new ScheduledTask(52, 62, 1), new ScheduledTask(45, 54, 0), new ScheduledTask(30, 37, 0), new ScheduledTask(75, 82, 2), new ScheduledTask(84, 87, 0), new ScheduledTask(38, 43, 3), new ScheduledTask(49, 52, 3), new ScheduledTask(96, 99, 0), new ScheduledTask(13, 22, 0), new ScheduledTask(88, 94, 0), new ScheduledTask(36, 38, 3), new ScheduledTask(99, 106, 0), new ScheduledTask(106, 114, 0)};
        int[] expectedProcessorEndTimes = new int[]{114, 62, 82, 52};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_21_CCR_9dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/SeriesParallel-MaxBf-5_Nodes_21_CCR_9.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 114;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 13, 0), new ScheduledTask(22, 30, 0), new ScheduledTask(73, 82, 0), new ScheduledTask(65, 73, 0), new ScheduledTask(63, 65, 0), new ScheduledTask(54, 63, 0), new ScheduledTask(37, 45, 0), new ScheduledTask(52, 62, 1), new ScheduledTask(45, 54, 0), new ScheduledTask(30, 37, 0), new ScheduledTask(75, 82, 1), new ScheduledTask(84, 87, 0), new ScheduledTask(27, 32, 2), new ScheduledTask(49, 52, 3), new ScheduledTask(96, 99, 0), new ScheduledTask(13, 22, 0), new ScheduledTask(88, 94, 0), new ScheduledTask(36, 38, 4), new ScheduledTask(99, 106, 0), new ScheduledTask(106, 114, 0)};
        int[] expectedProcessorEndTimes = new int[]{114, 82, 32, 52, 38};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 173700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(51500, 51685, 0), new ScheduledTask(30900, 31106, 0), new ScheduledTask(0, 103, 1), new ScheduledTask(0, 103, 2), new ScheduledTask(10300, 10506, 0), new ScheduledTask(0, 103, 0), new ScheduledTask(0, 82, 3), new ScheduledTask(107000, 107185, 0), new ScheduledTask(92600, 92744, 0), new ScheduledTask(82300, 82403, 0), new ScheduledTask(62700, 62803, 2), new ScheduledTask(61800, 61882, 1), new ScheduledTask(49200, 49323, 3), new ScheduledTask(70000, 70123, 0), new ScheduledTask(156300, 156464, 0), new ScheduledTask(139900, 140064, 0), new ScheduledTask(125500, 125644, 0), new ScheduledTask(123000, 123082, 3), new ScheduledTask(124500, 124582, 2), new ScheduledTask(111000, 111062, 1), new ScheduledTask(148200, 148241, 1)};
        int[] expectedProcessorEndTimes = new int[]{156464, 148241, 124582, 123082};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 104700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(8200, 8385, 0), new ScheduledTask(0, 206, 1), new ScheduledTask(0, 103, 2), new ScheduledTask(0, 103, 3), new ScheduledTask(20600, 20806, 3), new ScheduledTask(20600, 20703, 2), new ScheduledTask(0, 82, 0), new ScheduledTask(26700, 26885, 0), new ScheduledTask(41200, 41344, 2), new ScheduledTask(41200, 41303, 1), new ScheduledTask(45200, 45303, 0), new ScheduledTask(55500, 55582, 0), new ScheduledTask(61800, 61923, 3), new ScheduledTask(67800, 67923, 0), new ScheduledTask(70000, 70164, 2), new ScheduledTask(80100, 80264, 0), new ScheduledTask(61800, 61944, 1), new ScheduledTask(86400, 86482, 3), new ScheduledTask(96500, 96582, 0), new ScheduledTask(90600, 90662, 1), new ScheduledTask(63700, 63741, 0)};
        int[] expectedProcessorEndTimes = new int[]{96582, 90662, 70164, 86482};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 86400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(8200, 8385, 0), new ScheduledTask(0, 206, 1), new ScheduledTask(0, 103, 2), new ScheduledTask(0, 103, 3), new ScheduledTask(15450, 15656, 2), new ScheduledTask(20600, 20703, 3), new ScheduledTask(0, 82, 0), new ScheduledTask(24720, 24905, 1), new ScheduledTask(47300, 47444, 0), new ScheduledTask(37000, 37103, 0), new ScheduledTask(26700, 26803, 0), new ScheduledTask(41200, 41282, 3), new ScheduledTask(46350, 46473, 2), new ScheduledTask(46920, 47043, 1), new ScheduledTask(66600, 66764, 1), new ScheduledTask(61700, 61864, 0), new ScheduledTask(57600, 57744, 3), new ScheduledTask(74100, 74182, 2), new ScheduledTask(78100, 78182, 0), new ScheduledTask(64800, 64862, 2), new ScheduledTask(61680, 61721, 1)};
        int[] expectedProcessorEndTimes = new int[]{78182, 66764, 74182, 57744};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1295;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(309, 494, 0), new ScheduledTask(288, 494, 1), new ScheduledTask(206, 309, 0), new ScheduledTask(103, 206, 0), new ScheduledTask(82, 288, 1), new ScheduledTask(0, 103, 0), new ScheduledTask(0, 82, 1), new ScheduledTask(494, 679, 1), new ScheduledTask(987, 1131, 1), new ScheduledTask(884, 987, 1), new ScheduledTask(617, 720, 0), new ScheduledTask(802, 884, 1), new ScheduledTask(679, 802, 1), new ScheduledTask(494, 617, 0), new ScheduledTask(1131, 1295, 1), new ScheduledTask(946, 1110, 0), new ScheduledTask(720, 864, 0), new ScheduledTask(864, 946, 0), new ScheduledTask(1213, 1295, 0), new ScheduledTask(1151, 1213, 0), new ScheduledTask(1110, 1151, 0)};
        int[] expectedProcessorEndTimes = new int[]{1295, 1295};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 657;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 185, 0), new ScheduledTask(103, 309, 1), new ScheduledTask(82, 185, 2), new ScheduledTask(0, 103, 3), new ScheduledTask(103, 309, 3), new ScheduledTask(0, 103, 1), new ScheduledTask(0, 82, 2), new ScheduledTask(185, 370, 2), new ScheduledTask(185, 329, 0), new ScheduledTask(318, 421, 3), new ScheduledTask(309, 412, 1), new ScheduledTask(329, 411, 0), new ScheduledTask(370, 493, 2), new ScheduledTask(411, 534, 0), new ScheduledTask(421, 585, 3), new ScheduledTask(493, 657, 2), new ScheduledTask(412, 556, 1), new ScheduledTask(556, 638, 1), new ScheduledTask(575, 657, 0), new ScheduledTask(585, 647, 3), new ScheduledTask(534, 575, 0)};
        int[] expectedProcessorEndTimes = new int[]{657, 638, 657, 647};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 498;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 185, 0), new ScheduledTask(0, 206, 1), new ScheduledTask(0, 103, 2), new ScheduledTask(0, 103, 3), new ScheduledTask(0, 206, 4), new ScheduledTask(0, 103, 5), new ScheduledTask(103, 185, 2), new ScheduledTask(113, 298, 3), new ScheduledTask(189, 333, 0), new ScheduledTask(215, 318, 4), new ScheduledTask(210, 313, 5), new ScheduledTask(206, 288, 1), new ScheduledTask(212, 335, 2), new ScheduledTask(288, 411, 1), new ScheduledTask(333, 497, 0), new ScheduledTask(313, 477, 5), new ScheduledTask(318, 462, 4), new ScheduledTask(416, 498, 3), new ScheduledTask(411, 493, 1), new ScheduledTask(417, 479, 2), new ScheduledTask(326, 367, 3)};
        int[] expectedProcessorEndTimes = new int[]{497, 493, 479, 498, 462, 477};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random2_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#2_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 147000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 101, 1), new ScheduledTask(22000, 22135, 0), new ScheduledTask(0, 68, 2), new ScheduledTask(10200, 10318, 0), new ScheduledTask(3400, 3468, 0), new ScheduledTask(0, 34, 0), new ScheduledTask(0, 51, 3), new ScheduledTask(84500, 84669, 0), new ScheduledTask(69300, 69452, 0), new ScheduledTask(52400, 52569, 0), new ScheduledTask(35500, 35669, 0), new ScheduledTask(40800, 40918, 2), new ScheduledTask(60600, 60701, 1), new ScheduledTask(35900, 35984, 3), new ScheduledTask(101400, 101569, 0), new ScheduledTask(133500, 133635, 0), new ScheduledTask(86300, 86401, 3), new ScheduledTask(118300, 118384, 0), new ScheduledTask(126700, 126768, 0), new ScheduledTask(111600, 111651, 2), new ScheduledTask(121200, 121234, 1)};
        int[] expectedProcessorEndTimes = new int[]{133635, 121234, 111651, 86401};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random2_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#2_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 87800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 101, 0), new ScheduledTask(10100, 10235, 0), new ScheduledTask(0, 68, 1), new ScheduledTask(10200, 10318, 2), new ScheduledTask(0, 68, 3), new ScheduledTask(13600, 13634, 1), new ScheduledTask(0, 51, 2), new ScheduledTask(14200, 14369, 3), new ScheduledTask(20400, 20552, 1), new ScheduledTask(23600, 23769, 0), new ScheduledTask(40500, 40669, 0), new ScheduledTask(33800, 33918, 2), new ScheduledTask(48000, 48101, 3), new ScheduledTask(50800, 50884, 1), new ScheduledTask(57400, 57569, 0), new ScheduledTask(74300, 74435, 0), new ScheduledTask(67600, 67701, 1), new ScheduledTask(57400, 57484, 2), new ScheduledTask(74200, 74268, 2), new ScheduledTask(75000, 75051, 3), new ScheduledTask(68200, 68234, 3)};
        int[] expectedProcessorEndTimes = new int[]{74435, 67701, 74268, 75051};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random2_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#2_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 73200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(13500, 13601, 0), new ScheduledTask(0, 135, 0), new ScheduledTask(6800, 6868, 3), new ScheduledTask(0, 118, 2), new ScheduledTask(6120, 6188, 1), new ScheduledTask(0, 34, 3), new ScheduledTask(0, 51, 1), new ScheduledTask(34560, 34729, 1), new ScheduledTask(40500, 40652, 0), new ScheduledTask(14280, 14449, 1), new ScheduledTask(23600, 23769, 0), new ScheduledTask(20400, 20518, 3), new ScheduledTask(30300, 30401, 2), new ScheduledTask(17700, 17784, 2), new ScheduledTask(55840, 56009, 0), new ScheduledTask(46050, 46185, 3), new ScheduledTask(45450, 45551, 2), new ScheduledTask(60600, 60684, 2), new ScheduledTask(65040, 65108, 1), new ScheduledTask(58920, 58971, 1), new ScheduledTask(54840, 54874, 1)};
        int[] expectedProcessorEndTimes = new int[]{56009, 65108, 60684, 46185};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1096;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(343, 444, 0), new ScheduledTask(169, 304, 1), new ScheduledTask(102, 170, 0), new ScheduledTask(51, 169, 1), new ScheduledTask(34, 102, 0), new ScheduledTask(0, 34, 0), new ScheduledTask(0, 51, 1), new ScheduledTask(596, 765, 0), new ScheduledTask(444, 596, 0), new ScheduledTask(708, 877, 1), new ScheduledTask(174, 343, 0), new ScheduledTask(590, 708, 1), new ScheduledTask(489, 590, 1), new ScheduledTask(304, 388, 1), new ScheduledTask(833, 1002, 0), new ScheduledTask(961, 1096, 1), new ScheduledTask(388, 489, 1), new ScheduledTask(877, 961, 1), new ScheduledTask(765, 833, 0), new ScheduledTask(1036, 1087, 0), new ScheduledTask(1002, 1036, 0)};
        int[] expectedProcessorEndTimes = new int[]{1087, 1096};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 556;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 101, 0), new ScheduledTask(68, 203, 1), new ScheduledTask(0, 68, 1), new ScheduledTask(0, 118, 2), new ScheduledTask(85, 153, 3), new ScheduledTask(51, 85, 3), new ScheduledTask(0, 51, 3), new ScheduledTask(153, 322, 3), new ScheduledTask(118, 270, 2), new ScheduledTask(203, 372, 1), new ScheduledTask(270, 439, 2), new ScheduledTask(101, 219, 0), new ScheduledTask(219, 320, 0), new ScheduledTask(320, 404, 0), new ScheduledTask(322, 491, 3), new ScheduledTask(372, 507, 1), new ScheduledTask(439, 540, 2), new ScheduledTask(472, 556, 0), new ScheduledTask(404, 472, 0), new ScheduledTask(491, 542, 3), new ScheduledTask(507, 541, 1)};
        int[] expectedProcessorEndTimes = new int[]{556, 541, 540, 542};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 439;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 101, 0), new ScheduledTask(0, 135, 1), new ScheduledTask(0, 68, 2), new ScheduledTask(0, 118, 3), new ScheduledTask(0, 68, 4), new ScheduledTask(0, 34, 5), new ScheduledTask(34, 85, 5), new ScheduledTask(101, 270, 0), new ScheduledTask(109, 261, 2), new ScheduledTask(135, 304, 1), new ScheduledTask(118, 287, 3), new ScheduledTask(85, 203, 5), new ScheduledTask(141, 242, 4), new ScheduledTask(203, 287, 5), new ScheduledTask(270, 439, 0), new ScheduledTask(304, 439, 1), new ScheduledTask(290, 391, 3), new ScheduledTask(273, 357, 2), new ScheduledTask(268, 336, 4), new ScheduledTask(306, 357, 5), new ScheduledTask(336, 370, 4)};
        int[] expectedProcessorEndTimes = new int[]{439, 439, 357, 391, 370, 357};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random3_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#3_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 168600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 151, 0), new ScheduledTask(60400, 60616, 0), new ScheduledTask(15100, 15229, 0), new ScheduledTask(28000, 28108, 0), new ScheduledTask(0, 43, 1), new ScheduledTask(0, 129, 2), new ScheduledTask(0, 65, 3), new ScheduledTask(38800, 39016, 0), new ScheduledTask(25800, 25994, 1), new ScheduledTask(105700, 105851, 0), new ScheduledTask(39000, 39108, 3), new ScheduledTask(90600, 90751, 0), new ScheduledTask(82000, 82086, 0), new ScheduledTask(77400, 77465, 2), new ScheduledTask(153200, 153351, 0), new ScheduledTask(138100, 138251, 0), new ScheduledTask(103800, 103908, 3), new ScheduledTask(127300, 127408, 0), new ScheduledTask(121700, 121765, 2), new ScheduledTask(120800, 120865, 0), new ScheduledTask(142200, 142243, 1)};
        int[] expectedProcessorEndTimes = new int[]{153351, 142243, 121765, 103908};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random3_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#3_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 101300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(12900, 13051, 0), new ScheduledTask(0, 216, 1), new ScheduledTask(0, 129, 0), new ScheduledTask(13000, 13108, 2), new ScheduledTask(0, 43, 3), new ScheduledTask(8600, 8729, 3), new ScheduledTask(0, 65, 2), new ScheduledTask(35500, 35716, 3), new ScheduledTask(28000, 28194, 0), new ScheduledTask(48200, 48351, 2), new ScheduledTask(43200, 43308, 1), new ScheduledTask(47400, 47551, 0), new ScheduledTask(62500, 62586, 0), new ScheduledTask(35200, 35265, 2), new ScheduledTask(71100, 71251, 0), new ScheduledTask(86200, 86351, 0), new ScheduledTask(78700, 78808, 3), new ScheduledTask(64800, 64908, 1), new ScheduledTask(88200, 88265, 2), new ScheduledTask(86400, 86465, 1), new ScheduledTask(79600, 79643, 2)};
        int[] expectedProcessorEndTimes = new int[]{86351, 86465, 88265, 78808};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random3_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#3_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 84100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 151, 0), new ScheduledTask(0, 216, 1), new ScheduledTask(0, 129, 2), new ScheduledTask(25920, 26028, 1), new ScheduledTask(0, 43, 3), new ScheduledTask(15100, 15229, 0), new ScheduledTask(8600, 8665, 3), new ScheduledTask(43100, 43316, 0), new ScheduledTask(19350, 19544, 2), new ScheduledTask(38880, 39031, 1), new ScheduledTask(21600, 21708, 3), new ScheduledTask(28000, 28151, 0), new ScheduledTask(48450, 48536, 2), new ScheduledTask(43200, 43265, 3), new ScheduledTask(61350, 61501, 2), new ScheduledTask(69000, 69151, 0), new ScheduledTask(69960, 70068, 1), new ScheduledTask(57000, 57108, 1), new ScheduledTask(70300, 70365, 3), new ScheduledTask(57300, 57365, 3), new ScheduledTask(64700, 64743, 0)};
        int[] expectedProcessorEndTimes = new int[]{69151, 70068, 61501, 70365};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1252;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(323, 474, 0), new ScheduledTask(216, 432, 1), new ScheduledTask(194, 323, 0), new ScheduledTask(108, 216, 1), new ScheduledTask(65, 108, 1), new ScheduledTask(0, 129, 0), new ScheduledTask(0, 65, 1), new ScheduledTask(691, 907, 1), new ScheduledTask(907, 1101, 1), new ScheduledTask(432, 583, 1), new ScheduledTask(583, 691, 1), new ScheduledTask(560, 711, 0), new ScheduledTask(474, 560, 0), new ScheduledTask(129, 194, 0), new ScheduledTask(1101, 1252, 1), new ScheduledTask(1057, 1208, 0), new ScheduledTask(949, 1057, 0), new ScheduledTask(841, 949, 0), new ScheduledTask(776, 841, 0), new ScheduledTask(711, 776, 0), new ScheduledTask(1208, 1251, 0)};
        int[] expectedProcessorEndTimes = new int[]{1251, 1252};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 626;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 151, 0), new ScheduledTask(0, 216, 1), new ScheduledTask(43, 172, 2), new ScheduledTask(0, 108, 3), new ScheduledTask(0, 43, 2), new ScheduledTask(108, 237, 3), new ScheduledTask(151, 216, 0), new ScheduledTask(216, 432, 0), new ScheduledTask(280, 474, 2), new ScheduledTask(237, 388, 3), new ScheduledTask(172, 280, 2), new ScheduledTask(302, 453, 1), new ScheduledTask(216, 302, 1), new ScheduledTask(388, 453, 3), new ScheduledTask(474, 625, 2), new ScheduledTask(432, 583, 0), new ScheduledTask(453, 561, 3), new ScheduledTask(518, 626, 1), new ScheduledTask(453, 518, 1), new ScheduledTask(561, 626, 3), new ScheduledTask(583, 626, 0)};
        int[] expectedProcessorEndTimes = new int[]{626, 626, 625, 626};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 527;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 151, 0), new ScheduledTask(0, 216, 1), new ScheduledTask(0, 129, 2), new ScheduledTask(0, 108, 3), new ScheduledTask(0, 43, 4), new ScheduledTask(0, 129, 5), new ScheduledTask(43, 108, 4), new ScheduledTask(151, 367, 0), new ScheduledTask(161, 355, 2), new ScheduledTask(216, 367, 1), new ScheduledTask(156, 264, 3), new ScheduledTask(223, 374, 4), new ScheduledTask(226, 312, 5), new ScheduledTask(264, 329, 3), new ScheduledTask(355, 506, 2), new ScheduledTask(376, 527, 0), new ScheduledTask(375, 483, 1), new ScheduledTask(374, 482, 4), new ScheduledTask(383, 448, 3), new ScheduledTask(378, 443, 5), new ScheduledTask(443, 486, 5)};
        int[] expectedProcessorEndTimes = new int[]{527, 483, 506, 448, 482, 486};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random4_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#4_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 165200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(14000, 14140, 0), new ScheduledTask(70100, 70258, 0), new ScheduledTask(0, 123, 1), new ScheduledTask(0, 70, 2), new ScheduledTask(0, 140, 0), new ScheduledTask(28000, 28158, 0), new ScheduledTask(0, 70, 3), new ScheduledTask(52600, 52775, 0), new ScheduledTask(85900, 86023, 0), new ScheduledTask(43800, 43888, 0), new ScheduledTask(42000, 42088, 3), new ScheduledTask(86800, 86853, 1), new ScheduledTask(44600, 44635, 2), new ScheduledTask(94800, 94835, 3), new ScheduledTask(98200, 98375, 0), new ScheduledTask(146300, 146475, 0), new ScheduledTask(70400, 70558, 2), new ScheduledTask(116500, 116658, 0), new ScheduledTask(132300, 132440, 0), new ScheduledTask(118800, 118870, 3), new ScheduledTask(118600, 118653, 1)};
        int[] expectedProcessorEndTimes = new int[]{146475, 118653, 70558, 118870};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random4_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#4_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 96300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(7000, 7140, 0), new ScheduledTask(21000, 21158, 0), new ScheduledTask(0, 123, 1), new ScheduledTask(0, 70, 0), new ScheduledTask(0, 140, 2), new ScheduledTask(14000, 14158, 3), new ScheduledTask(0, 70, 3), new ScheduledTask(36800, 36975, 0), new ScheduledTask(42200, 42323, 1), new ScheduledTask(24600, 24688, 1), new ScheduledTask(28000, 28088, 2), new ScheduledTask(52600, 52653, 3), new ScheduledTask(45600, 45635, 3), new ScheduledTask(46200, 46235, 2), new ScheduledTask(54300, 54475, 0), new ScheduledTask(78800, 78975, 0), new ScheduledTask(63200, 63358, 3), new ScheduledTask(53200, 53358, 2), new ScheduledTask(66800, 66940, 1), new ScheduledTask(71800, 71870, 0), new ScheduledTask(84800, 84853, 2)};
        int[] expectedProcessorEndTimes = new int[]{78975, 66940, 84853, 63358};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1193;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 140, 0), new ScheduledTask(0, 158, 1), new ScheduledTask(140, 263, 0), new ScheduledTask(158, 228, 1), new ScheduledTask(228, 368, 1), new ScheduledTask(263, 421, 0), new ScheduledTask(368, 438, 1), new ScheduledTask(421, 596, 0), new ScheduledTask(438, 561, 1), new ScheduledTask(561, 649, 1), new ScheduledTask(596, 684, 0), new ScheduledTask(649, 702, 1), new ScheduledTask(684, 719, 0), new ScheduledTask(702, 737, 1), new ScheduledTask(719, 894, 0), new ScheduledTask(737, 912, 1), new ScheduledTask(894, 1052, 0), new ScheduledTask(912, 1070, 1), new ScheduledTask(1052, 1192, 0), new ScheduledTask(1070, 1140, 1), new ScheduledTask(1140, 1193, 1)};
        int[] expectedProcessorEndTimes = new int[]{1192, 1193};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 597;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 140, 0), new ScheduledTask(0, 158, 1), new ScheduledTask(0, 123, 2), new ScheduledTask(123, 193, 2), new ScheduledTask(140, 280, 0), new ScheduledTask(0, 158, 3), new ScheduledTask(158, 228, 3), new ScheduledTask(246, 421, 2), new ScheduledTask(158, 281, 1), new ScheduledTask(228, 316, 3), new ScheduledTask(280, 368, 0), new ScheduledTask(193, 246, 2), new ScheduledTask(351, 386, 3), new ScheduledTask(316, 351, 3), new ScheduledTask(421, 596, 2), new ScheduledTask(281, 456, 1), new ScheduledTask(438, 596, 0), new ScheduledTask(386, 544, 3), new ScheduledTask(456, 596, 1), new ScheduledTask(368, 438, 0), new ScheduledTask(544, 597, 3)};
        int[] expectedProcessorEndTimes = new int[]{596, 596, 596, 597};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 473;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 140, 0), new ScheduledTask(0, 158, 1), new ScheduledTask(0, 123, 2), new ScheduledTask(0, 70, 3), new ScheduledTask(0, 140, 4), new ScheduledTask(0, 158, 5), new ScheduledTask(70, 140, 3), new ScheduledTask(140, 315, 0), new ScheduledTask(158, 281, 1), new ScheduledTask(146, 234, 2), new ScheduledTask(150, 238, 3), new ScheduledTask(167, 220, 5), new ScheduledTask(166, 201, 4), new ScheduledTask(201, 236, 4), new ScheduledTask(241, 416, 2), new ScheduledTask(281, 456, 1), new ScheduledTask(315, 473, 0), new ScheduledTask(243, 401, 3), new ScheduledTask(236, 376, 4), new ScheduledTask(283, 353, 5), new ScheduledTask(353, 406, 5)};
        int[] expectedProcessorEndTimes = new int[]{473, 456, 416, 401, 376, 406};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random5_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#5_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 159900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(33800, 33954, 0), new ScheduledTask(20000, 20138, 0), new ScheduledTask(7700, 7823, 0), new ScheduledTask(0, 123, 1), new ScheduledTask(0, 92, 2), new ScheduledTask(0, 123, 3), new ScheduledTask(0, 77, 0), new ScheduledTask(69200, 69338, 0), new ScheduledTask(98400, 98538, 0), new ScheduledTask(55200, 55308, 2), new ScheduledTask(58400, 58508, 0), new ScheduledTask(49200, 49292, 0), new ScheduledTask(83000, 83154, 0), new ScheduledTask(74700, 74792, 3), new ScheduledTask(112200, 112354, 0), new ScheduledTask(127600, 127754, 0), new ScheduledTask(84000, 84123, 1), new ScheduledTask(150700, 150792, 0), new ScheduledTask(143000, 143077, 0), new ScheduledTask(120000, 120061, 2), new ScheduledTask(129900, 129931, 3)};
        int[] expectedProcessorEndTimes = new int[]{150792, 84123, 120061, 129931};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random5_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#5_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 95200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(9200, 9354, 0), new ScheduledTask(0, 138, 1), new ScheduledTask(0, 123, 2), new ScheduledTask(35900, 36023, 0), new ScheduledTask(0, 92, 0), new ScheduledTask(15400, 15523, 3), new ScheduledTask(0, 77, 3), new ScheduledTask(25500, 25638, 2), new ScheduledTask(49200, 49338, 1), new ScheduledTask(27600, 27708, 1), new ScheduledTask(25100, 25208, 0), new ScheduledTask(40000, 40092, 3), new ScheduledTask(48200, 48354, 0), new ScheduledTask(53100, 53192, 2), new ScheduledTask(79000, 79154, 0), new ScheduledTask(63600, 63754, 0), new ScheduledTask(70600, 70723, 3), new ScheduledTask(76800, 76892, 1), new ScheduledTask(71500, 71577, 2), new ScheduledTask(58400, 58461, 3), new ScheduledTask(86900, 86931, 2)};
        int[] expectedProcessorEndTimes = new int[]{79154, 76892, 86931, 70723};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random5_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#5_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 79080;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 154, 0), new ScheduledTask(11040, 11178, 1), new ScheduledTask(0, 123, 3), new ScheduledTask(11550, 11673, 2), new ScheduledTask(0, 92, 1), new ScheduledTask(15400, 15523, 0), new ScheduledTask(0, 77, 2), new ScheduledTask(27600, 27738, 1), new ScheduledTask(44160, 44298, 1), new ScheduledTask(24600, 24708, 3), new ScheduledTask(27700, 27808, 0), new ScheduledTask(30000, 30092, 2), new ScheduledTask(43800, 43954, 2), new ScheduledTask(38500, 38592, 0), new ScheduledTask(63100, 63254, 0), new ScheduledTask(47700, 47854, 0), new ScheduledTask(46200, 46323, 3), new ScheduledTask(68040, 68132, 1), new ScheduledTask(66900, 66977, 2), new ScheduledTask(60720, 60781, 1), new ScheduledTask(70800, 70831, 3)};
        int[] expectedProcessorEndTimes = new int[]{63254, 68132, 66977, 70831};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1182;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(338, 492, 0), new ScheduledTask(200, 338, 0), new ScheduledTask(323, 446, 1), new ScheduledTask(200, 323, 1), new ScheduledTask(0, 92, 1), new ScheduledTask(77, 200, 0), new ScheduledTask(0, 77, 0), new ScheduledTask(860, 998, 1), new ScheduledTask(630, 768, 1), new ScheduledTask(92, 200, 1), new ScheduledTask(723, 831, 0), new ScheduledTask(538, 630, 1), new ScheduledTask(492, 646, 0), new ScheduledTask(446, 538, 1), new ScheduledTask(1016, 1170, 0), new ScheduledTask(862, 1016, 0), new ScheduledTask(1059, 1182, 1), new ScheduledTask(768, 860, 1), new ScheduledTask(646, 723, 0), new ScheduledTask(998, 1059, 1), new ScheduledTask(831, 862, 0)};
        int[] expectedProcessorEndTimes = new int[]{1170, 1182};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 598;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 154, 0), new ScheduledTask(92, 230, 1), new ScheduledTask(0, 123, 2), new ScheduledTask(77, 200, 3), new ScheduledTask(0, 92, 1), new ScheduledTask(154, 277, 0), new ScheduledTask(0, 77, 3), new ScheduledTask(200, 338, 3), new ScheduledTask(230, 368, 1), new ScheduledTask(231, 339, 2), new ScheduledTask(123, 231, 2), new ScheduledTask(338, 430, 3), new ScheduledTask(277, 431, 0), new ScheduledTask(368, 460, 1), new ScheduledTask(430, 584, 3), new ScheduledTask(339, 493, 2), new ScheduledTask(433, 556, 0), new ScheduledTask(493, 585, 2), new ScheduledTask(521, 598, 1), new ScheduledTask(460, 521, 1), new ScheduledTask(556, 587, 0)};
        int[] expectedProcessorEndTimes = new int[]{587, 598, 585, 584};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 451;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 154, 0), new ScheduledTask(0, 138, 1), new ScheduledTask(0, 123, 2), new ScheduledTask(0, 123, 3), new ScheduledTask(0, 92, 4), new ScheduledTask(0, 123, 5), new ScheduledTask(92, 169, 4), new ScheduledTask(154, 292, 0), new ScheduledTask(159, 297, 1), new ScheduledTask(169, 277, 4), new ScheduledTask(174, 282, 2), new ScheduledTask(160, 252, 3), new ScheduledTask(132, 286, 5), new ScheduledTask(252, 344, 3), new ScheduledTask(297, 451, 1), new ScheduledTask(285, 439, 2), new ScheduledTask(292, 415, 0), new ScheduledTask(344, 436, 3), new ScheduledTask(349, 426, 4), new ScheduledTask(296, 357, 5), new ScheduledTask(357, 388, 5)};
        int[] expectedProcessorEndTimes = new int[]{415, 451, 439, 436, 426, 388};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random6_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#6_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 153000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(17000, 17153, 0), new ScheduledTask(0, 170, 0), new ScheduledTask(32300, 32436, 0), new ScheduledTask(0, 68, 1), new ScheduledTask(0, 51, 2), new ScheduledTask(20400, 20434, 3), new ScheduledTask(0, 34, 3), new ScheduledTask(66300, 66436, 0), new ScheduledTask(79900, 80036, 0), new ScheduledTask(54400, 54519, 0), new ScheduledTask(40800, 40902, 3), new ScheduledTask(41100, 41185, 2), new ScheduledTask(45900, 45985, 0), new ScheduledTask(102000, 102051, 3), new ScheduledTask(137700, 137853, 0), new ScheduledTask(93500, 93653, 0), new ScheduledTask(122400, 122553, 0), new ScheduledTask(108800, 108936, 0), new ScheduledTask(80300, 80419, 1), new ScheduledTask(94100, 94168, 2), new ScheduledTask(132600, 132634, 3)};
        int[] expectedProcessorEndTimes = new int[]{137853, 80419, 94168, 132634};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random6_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#6_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 88400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(17000, 17153, 0), new ScheduledTask(0, 170, 0), new ScheduledTask(0, 136, 1), new ScheduledTask(0, 68, 2), new ScheduledTask(13600, 13651, 3), new ScheduledTask(6800, 6834, 3), new ScheduledTask(0, 34, 3), new ScheduledTask(34000, 34136, 3), new ScheduledTask(14600, 14736, 2), new ScheduledTask(27200, 27319, 1), new ScheduledTask(40800, 40902, 0), new ScheduledTask(32300, 32385, 0), new ScheduledTask(41800, 41885, 2), new ScheduledTask(23800, 23851, 3), new ScheduledTask(51000, 51153, 0), new ScheduledTask(73100, 73253, 0), new ScheduledTask(57800, 57953, 1), new ScheduledTask(61200, 61336, 3), new ScheduledTask(61600, 61719, 2), new ScheduledTask(66300, 66368, 0), new ScheduledTask(51000, 51034, 1)};
        int[] expectedProcessorEndTimes = new int[]{73253, 57953, 61719, 61336};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random6_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#6_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 73440;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(5100, 5253, 0), new ScheduledTask(4080, 4250, 1), new ScheduledTask(0, 136, 2), new ScheduledTask(6800, 6868, 3), new ScheduledTask(0, 51, 0), new ScheduledTask(0, 34, 1), new ScheduledTask(0, 34, 3), new ScheduledTask(21100, 21236, 3), new ScheduledTask(20800, 20936, 2), new ScheduledTask(24480, 24599, 1), new ScheduledTask(38760, 38862, 1), new ScheduledTask(34000, 34085, 0), new ScheduledTask(25500, 25585, 0), new ScheduledTask(20400, 20451, 0), new ScheduledTask(42500, 42653, 0), new ScheduledTask(55080, 55233, 1), new ScheduledTask(57800, 57953, 0), new ScheduledTask(53000, 53136, 2), new ScheduledTask(48300, 48419, 3), new ScheduledTask(42800, 42868, 2), new ScheduledTask(51000, 51034, 1)};
        int[] expectedProcessorEndTimes = new int[]{57953, 55233, 53136, 48419};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1088;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(306, 459, 0), new ScheduledTask(204, 374, 1), new ScheduledTask(34, 170, 0), new ScheduledTask(85, 153, 1), new ScheduledTask(34, 85, 1), new ScheduledTask(0, 34, 1), new ScheduledTask(0, 34, 0), new ScheduledTask(459, 595, 0), new ScheduledTask(170, 306, 0), new ScheduledTask(374, 493, 1), new ScheduledTask(663, 765, 1), new ScheduledTask(578, 663, 1), new ScheduledTask(493, 578, 1), new ScheduledTask(153, 204, 1), new ScheduledTask(935, 1088, 1), new ScheduledTask(935, 1088, 0), new ScheduledTask(782, 935, 0), new ScheduledTask(799, 935, 1), new ScheduledTask(595, 714, 0), new ScheduledTask(714, 782, 0), new ScheduledTask(765, 799, 1)};
        int[] expectedProcessorEndTimes = new int[]{1088, 1088};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 544;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(34, 187, 0), new ScheduledTask(51, 221, 1), new ScheduledTask(34, 170, 2), new ScheduledTask(0, 68, 3), new ScheduledTask(0, 51, 1), new ScheduledTask(0, 34, 0), new ScheduledTask(0, 34, 2), new ScheduledTask(255, 391, 2), new ScheduledTask(68, 204, 3), new ScheduledTask(221, 340, 1), new ScheduledTask(289, 391, 3), new ScheduledTask(187, 272, 0), new ScheduledTask(204, 289, 3), new ScheduledTask(170, 221, 2), new ScheduledTask(272, 425, 0), new ScheduledTask(391, 544, 2), new ScheduledTask(391, 544, 3), new ScheduledTask(408, 544, 1), new ScheduledTask(425, 544, 0), new ScheduledTask(340, 408, 1), new ScheduledTask(221, 255, 2)};
        int[] expectedProcessorEndTimes = new int[]{544, 544, 544, 544};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 442;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 153, 0), new ScheduledTask(0, 170, 1), new ScheduledTask(0, 136, 2), new ScheduledTask(0, 68, 3), new ScheduledTask(0, 51, 4), new ScheduledTask(0, 34, 5), new ScheduledTask(34, 68, 5), new ScheduledTask(153, 289, 0), new ScheduledTask(71, 207, 3), new ScheduledTask(170, 289, 1), new ScheduledTask(177, 279, 2), new ScheduledTask(161, 246, 4), new ScheduledTask(155, 240, 5), new ScheduledTask(207, 258, 3), new ScheduledTask(258, 411, 3), new ScheduledTask(289, 442, 0), new ScheduledTask(289, 442, 1), new ScheduledTask(295, 431, 2), new ScheduledTask(294, 413, 4), new ScheduledTask(249, 317, 5), new ScheduledTask(317, 351, 5)};
        int[] expectedProcessorEndTimes = new int[]{442, 442, 431, 411, 413, 351};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random7_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#7_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 151400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(34800, 34993, 0), new ScheduledTask(0, 116, 1), new ScheduledTask(21300, 21435, 0), new ScheduledTask(0, 58, 2), new ScheduledTask(11600, 11697, 0), new ScheduledTask(0, 58, 3), new ScheduledTask(0, 116, 0), new ScheduledTask(96700, 96835, 0), new ScheduledTask(85100, 85216, 0), new ScheduledTask(69600, 69755, 0), new ScheduledTask(54100, 54255, 0), new ScheduledTask(35000, 35116, 3), new ScheduledTask(34800, 34916, 2), new ScheduledTask(69600, 69639, 1), new ScheduledTask(133400, 133574, 0), new ScheduledTask(119900, 120035, 0), new ScheduledTask(93000, 93097, 1), new ScheduledTask(110200, 110297, 0), new ScheduledTask(105200, 105277, 3), new ScheduledTask(104400, 104439, 2), new ScheduledTask(127800, 127839, 2)};
        int[] expectedProcessorEndTimes = new int[]{133574, 93097, 127839, 105277};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random7_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#7_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 92600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(9700, 9893, 0), new ScheduledTask(0, 116, 1), new ScheduledTask(0, 135, 2), new ScheduledTask(11600, 11658, 3), new ScheduledTask(0, 97, 0), new ScheduledTask(0, 58, 3), new ScheduledTask(23200, 23316, 3), new ScheduledTask(27000, 27135, 2), new ScheduledTask(24000, 24116, 1), new ScheduledTask(44500, 44655, 0), new ScheduledTask(29000, 29155, 0), new ScheduledTask(46400, 46516, 3), new ScheduledTask(54000, 54116, 2), new ScheduledTask(47200, 47239, 1), new ScheduledTask(55000, 55174, 1), new ScheduledTask(63900, 64035, 0), new ScheduledTask(69600, 69697, 3), new ScheduledTask(81300, 81397, 0), new ScheduledTask(77200, 77277, 2), new ScheduledTask(60000, 60039, 0), new ScheduledTask(77400, 77439, 0)};
        int[] expectedProcessorEndTimes = new int[]{81397, 55174, 77277, 69697};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random7_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#7_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 76440;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 193, 0), new ScheduledTask(8700, 8816, 2), new ScheduledTask(0, 135, 1), new ScheduledTask(0, 58, 2), new ScheduledTask(11600, 11697, 3), new ScheduledTask(0, 58, 3), new ScheduledTask(16200, 16316, 1), new ScheduledTask(34800, 34935, 1), new ScheduledTask(26100, 26216, 2), new ScheduledTask(34800, 34955, 0), new ScheduledTask(19300, 19455, 0), new ScheduledTask(31120, 31236, 3), new ScheduledTask(43500, 43616, 2), new ScheduledTask(30120, 30159, 1), new ScheduledTask(54200, 54374, 0), new ScheduledTask(51000, 51135, 1), new ScheduledTask(54320, 54417, 3), new ScheduledTask(60900, 60997, 2), new ScheduledTask(67200, 67277, 1), new ScheduledTask(50300, 50339, 0), new ScheduledTask(71600, 71639, 0)};
        int[] expectedProcessorEndTimes = new int[]{71639, 67277, 60997, 54417};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1139;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(135, 328, 0), new ScheduledTask(213, 329, 1), new ScheduledTask(0, 135, 0), new ScheduledTask(155, 213, 1), new ScheduledTask(58, 155, 1), new ScheduledTask(0, 58, 1), new ScheduledTask(328, 444, 0), new ScheduledTask(792, 927, 0), new ScheduledTask(676, 792, 0), new ScheduledTask(530, 685, 1), new ScheduledTask(375, 530, 1), new ScheduledTask(560, 676, 0), new ScheduledTask(444, 560, 0), new ScheduledTask(336, 375, 1), new ScheduledTask(957, 1131, 1), new ScheduledTask(1004, 1139, 0), new ScheduledTask(860, 957, 1), new ScheduledTask(724, 821, 1), new ScheduledTask(927, 1004, 0), new ScheduledTask(821, 860, 1), new ScheduledTask(685, 724, 1)};
        int[] expectedProcessorEndTimes = new int[]{1139, 1131};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 579;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 193, 0), new ScheduledTask(0, 116, 1), new ScheduledTask(58, 193, 2), new ScheduledTask(97, 155, 3), new ScheduledTask(0, 97, 3), new ScheduledTask(0, 58, 2), new ScheduledTask(116, 232, 1), new ScheduledTask(193, 328, 0), new ScheduledTask(155, 271, 3), new ScheduledTask(310, 465, 3), new ScheduledTask(201, 356, 2), new ScheduledTask(356, 472, 2), new ScheduledTask(232, 348, 1), new ScheduledTask(271, 310, 3), new ScheduledTask(348, 522, 1), new ScheduledTask(328, 463, 0), new ScheduledTask(465, 562, 3), new ScheduledTask(475, 572, 2), new ScheduledTask(502, 579, 0), new ScheduledTask(463, 502, 0), new ScheduledTask(522, 561, 1)};
        int[] expectedProcessorEndTimes = new int[]{579, 561, 572, 562};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 457;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 193, 0), new ScheduledTask(0, 116, 1), new ScheduledTask(0, 135, 2), new ScheduledTask(0, 58, 3), new ScheduledTask(0, 97, 4), new ScheduledTask(0, 58, 5), new ScheduledTask(58, 174, 3), new ScheduledTask(116, 251, 1), new ScheduledTask(124, 240, 4), new ScheduledTask(193, 348, 0), new ScheduledTask(201, 356, 2), new ScheduledTask(174, 290, 3), new ScheduledTask(178, 294, 5), new ScheduledTask(240, 279, 4), new ScheduledTask(251, 425, 1), new ScheduledTask(279, 414, 4), new ScheduledTask(356, 453, 2), new ScheduledTask(360, 457, 0), new ScheduledTask(352, 429, 3), new ScheduledTask(360, 399, 5), new ScheduledTask(399, 438, 5)};
        int[] expectedProcessorEndTimes = new int[]{457, 425, 453, 429, 414, 438};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random8_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#8_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 142900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(24000, 24160, 0), new ScheduledTask(9600, 9744, 0), new ScheduledTask(0, 96, 0), new ScheduledTask(19200, 19296, 1), new ScheduledTask(0, 96, 2), new ScheduledTask(0, 80, 3), new ScheduledTask(0, 32, 1), new ScheduledTask(91200, 91360, 0), new ScheduledTask(40000, 40128, 0), new ScheduledTask(52800, 52912, 0), new ScheduledTask(78400, 78528, 0), new ScheduledTask(64000, 64144, 0), new ScheduledTask(48000, 48128, 3), new ScheduledTask(76800, 76832, 1), new ScheduledTask(64200, 64328, 2), new ScheduledTask(115200, 115296, 0), new ScheduledTask(107200, 107280, 0), new ScheduledTask(136500, 136564, 0), new ScheduledTask(125300, 125364, 0), new ScheduledTask(131700, 131748, 0), new ScheduledTask(96000, 96048, 1)};
        int[] expectedProcessorEndTimes = new int[]{136564, 96048, 64328, 48128};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random8_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#8_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 83200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 160, 1), new ScheduledTask(0, 144, 2), new ScheduledTask(0, 96, 3), new ScheduledTask(19200, 19296, 3), new ScheduledTask(11200, 11296, 0), new ScheduledTask(3200, 3280, 0), new ScheduledTask(0, 32, 0), new ScheduledTask(46400, 46560, 0), new ScheduledTask(28800, 28928, 2), new ScheduledTask(20800, 20912, 0), new ScheduledTask(38400, 38528, 3), new ScheduledTask(32000, 32144, 0), new ScheduledTask(32000, 32128, 1), new ScheduledTask(54400, 54432, 2), new ScheduledTask(57600, 57728, 1), new ScheduledTask(64000, 64096, 3), new ScheduledTask(73600, 73680, 0), new ScheduledTask(70400, 70464, 2), new ScheduledTask(62400, 62464, 0), new ScheduledTask(68800, 68848, 0), new ScheduledTask(60800, 60848, 2)};
        int[] expectedProcessorEndTimes = new int[]{73680, 57728, 70464, 64096};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random8_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#8_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 69600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(9600, 9760, 0), new ScheduledTask(4800, 4944, 2), new ScheduledTask(0, 96, 1), new ScheduledTask(16000, 16096, 3), new ScheduledTask(0, 96, 0), new ScheduledTask(0, 80, 3), new ScheduledTask(0, 32, 2), new ScheduledTask(36800, 36960, 0), new ScheduledTask(11520, 11648, 1), new ScheduledTask(25600, 25712, 0), new ScheduledTask(42360, 42488, 1), new ScheduledTask(26400, 26544, 2), new ScheduledTask(27000, 27128, 1), new ScheduledTask(35200, 35232, 3), new ScheduledTask(41600, 41728, 3), new ScheduledTask(57720, 57816, 1), new ScheduledTask(57600, 57680, 2), new ScheduledTask(62920, 62984, 0), new ScheduledTask(48000, 48064, 2), new ScheduledTask(58120, 58168, 0), new ScheduledTask(52800, 52848, 0)};
        int[] expectedProcessorEndTimes = new int[]{62984, 57816, 57680, 41728};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1040;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(208, 368, 0), new ScheduledTask(192, 336, 1), new ScheduledTask(96, 192, 1), new ScheduledTask(0, 96, 1), new ScheduledTask(112, 208, 0), new ScheduledTask(32, 112, 0), new ScheduledTask(0, 32, 0), new ScheduledTask(498, 658, 1), new ScheduledTask(770, 898, 1), new ScheduledTask(658, 770, 1), new ScheduledTask(370, 498, 1), new ScheduledTask(496, 640, 0), new ScheduledTask(368, 496, 0), new ScheduledTask(336, 368, 1), new ScheduledTask(898, 1026, 1), new ScheduledTask(896, 992, 0), new ScheduledTask(752, 832, 0), new ScheduledTask(640, 704, 0), new ScheduledTask(832, 896, 0), new ScheduledTask(704, 752, 0), new ScheduledTask(992, 1040, 0)};
        int[] expectedProcessorEndTimes = new int[]{1040, 1026};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 528;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(32, 192, 0), new ScheduledTask(80, 224, 1), new ScheduledTask(0, 96, 2), new ScheduledTask(0, 96, 3), new ScheduledTask(96, 192, 2), new ScheduledTask(0, 80, 1), new ScheduledTask(0, 32, 0), new ScheduledTask(194, 354, 0), new ScheduledTask(192, 320, 2), new ScheduledTask(106, 218, 3), new ScheduledTask(224, 352, 1), new ScheduledTask(250, 394, 3), new ScheduledTask(320, 448, 2), new ScheduledTask(218, 250, 3), new ScheduledTask(352, 480, 1), new ScheduledTask(355, 451, 0), new ScheduledTask(394, 474, 3), new ScheduledTask(448, 512, 2), new ScheduledTask(453, 517, 0), new ScheduledTask(474, 522, 3), new ScheduledTask(480, 528, 1)};
        int[] expectedProcessorEndTimes = new int[]{517, 528, 512, 522};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 416;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 160, 0), new ScheduledTask(0, 144, 1), new ScheduledTask(0, 96, 2), new ScheduledTask(0, 96, 3), new ScheduledTask(0, 96, 4), new ScheduledTask(0, 80, 5), new ScheduledTask(80, 112, 5), new ScheduledTask(160, 320, 0), new ScheduledTask(112, 240, 5), new ScheduledTask(120, 232, 2), new ScheduledTask(162, 290, 1), new ScheduledTask(150, 294, 3), new ScheduledTask(168, 296, 4), new ScheduledTask(232, 264, 2), new ScheduledTask(240, 368, 5), new ScheduledTask(320, 416, 0), new ScheduledTask(323, 403, 1), new ScheduledTask(302, 366, 4), new ScheduledTask(301, 365, 2), new ScheduledTask(322, 370, 3), new ScheduledTask(365, 413, 2)};
        int[] expectedProcessorEndTimes = new int[]{416, 403, 413, 370, 366, 368};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random9_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#9_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 177600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(38800, 38937, 0), new ScheduledTask(25100, 25237, 0), new ScheduledTask(11400, 11537, 0), new ScheduledTask(0, 114, 0), new ScheduledTask(0, 68, 1), new ScheduledTask(0, 91, 2), new ScheduledTask(70700, 70905, 0), new ScheduledTask(52500, 52682, 0), new ScheduledTask(0, 114, 3), new ScheduledTask(91200, 91405, 0), new ScheduledTask(52700, 52814, 1), new ScheduledTask(111700, 111859, 0), new ScheduledTask(68400, 68514, 3), new ScheduledTask(127600, 127828, 0), new ScheduledTask(54600, 54691, 2), new ScheduledTask(161800, 161937, 0), new ScheduledTask(109200, 109314, 2), new ScheduledTask(150400, 150514, 0), new ScheduledTask(136800, 136868, 3), new ScheduledTask(148700, 148746, 1), new ScheduledTask(121100, 121146, 1)};
        int[] expectedProcessorEndTimes = new int[]{161937, 148746, 109314, 136868};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random9_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#9_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 104900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(11400, 11537, 0), new ScheduledTask(0, 137, 1), new ScheduledTask(0, 137, 2), new ScheduledTask(0, 114, 0), new ScheduledTask(0, 68, 3), new ScheduledTask(13600, 13691, 3), new ScheduledTask(27400, 27605, 1), new ScheduledTask(59300, 59482, 0), new ScheduledTask(25100, 25214, 0), new ScheduledTask(31800, 32005, 3), new ScheduledTask(47900, 48014, 0), new ScheduledTask(45600, 45759, 2), new ScheduledTask(36500, 36614, 0), new ScheduledTask(82100, 82328, 0), new ScheduledTask(27400, 27491, 2), new ScheduledTask(77400, 77537, 2), new ScheduledTask(68400, 68514, 1), new ScheduledTask(82000, 82114, 3), new ScheduledTask(91200, 91268, 1), new ScheduledTask(72800, 72846, 3), new ScheduledTask(77500, 77546, 0)};
        int[] expectedProcessorEndTimes = new int[]{82328, 91268, 77537, 82114};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random9_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#9_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 88650;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 137, 1), new ScheduledTask(0, 137, 0), new ScheduledTask(16440, 16577, 1), new ScheduledTask(0, 114, 3), new ScheduledTask(13650, 13718, 2), new ScheduledTask(0, 91, 2), new ScheduledTask(25100, 25305, 0), new ScheduledTask(45600, 45782, 0), new ScheduledTask(13700, 13814, 0), new ScheduledTask(46560, 46765, 1), new ScheduledTask(22800, 22914, 3), new ScheduledTask(37500, 37659, 2), new ScheduledTask(32880, 32994, 1), new ScheduledTask(63800, 64028, 0), new ScheduledTask(23850, 23941, 2), new ScheduledTask(71160, 71297, 1), new ScheduledTask(55100, 55214, 3), new ScheduledTask(61350, 61464, 2), new ScheduledTask(78450, 78518, 2), new ScheduledTask(45900, 45946, 3), new ScheduledTask(77900, 77946, 3)};
        int[] expectedProcessorEndTimes = new int[]{64028, 71297, 78518, 77946};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1320;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(502, 639, 0), new ScheduledTask(137, 274, 0), new ScheduledTask(0, 137, 0), new ScheduledTask(432, 546, 1), new ScheduledTask(364, 432, 1), new ScheduledTask(114, 205, 1), new ScheduledTask(639, 844, 0), new ScheduledTask(546, 728, 1), new ScheduledTask(0, 114, 1), new ScheduledTask(842, 1047, 1), new ScheduledTask(728, 842, 1), new ScheduledTask(205, 364, 1), new ScheduledTask(274, 388, 0), new ScheduledTask(849, 1077, 0), new ScheduledTask(1115, 1206, 1), new ScheduledTask(1123, 1260, 0), new ScheduledTask(1206, 1320, 1), new ScheduledTask(388, 502, 0), new ScheduledTask(1047, 1115, 1), new ScheduledTask(1260, 1306, 0), new ScheduledTask(1077, 1123, 0)};
        int[] expectedProcessorEndTimes = new int[]{1306, 1320};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 661;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 137, 0), new ScheduledTask(0, 137, 1), new ScheduledTask(0, 137, 2), new ScheduledTask(68, 182, 3), new ScheduledTask(0, 68, 3), new ScheduledTask(137, 228, 0), new ScheduledTask(144, 349, 1), new ScheduledTask(182, 364, 3), new ScheduledTask(137, 251, 2), new ScheduledTask(228, 433, 0), new ScheduledTask(251, 365, 2), new ScheduledTask(364, 523, 3), new ScheduledTask(365, 479, 2), new ScheduledTask(433, 661, 0), new ScheduledTask(349, 440, 1), new ScheduledTask(523, 660, 3), new ScheduledTask(479, 593, 2), new ScheduledTask(532, 646, 1), new ScheduledTask(593, 661, 2), new ScheduledTask(486, 532, 1), new ScheduledTask(440, 486, 1)};
        int[] expectedProcessorEndTimes = new int[]{661, 646, 661, 660};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 576;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 137, 0), new ScheduledTask(0, 137, 1), new ScheduledTask(0, 137, 2), new ScheduledTask(0, 114, 3), new ScheduledTask(0, 68, 4), new ScheduledTask(0, 91, 5), new ScheduledTask(143, 348, 0), new ScheduledTask(140, 322, 1), new ScheduledTask(68, 182, 4), new ScheduledTask(137, 342, 2), new ScheduledTask(144, 258, 3), new ScheduledTask(182, 341, 4), new ScheduledTask(192, 306, 5), new ScheduledTask(348, 576, 0), new ScheduledTask(258, 349, 3), new ScheduledTask(346, 483, 2), new ScheduledTask(358, 472, 1), new ScheduledTask(341, 455, 4), new ScheduledTask(352, 420, 3), new ScheduledTask(359, 405, 5), new ScheduledTask(405, 451, 5)};
        int[] expectedProcessorEndTimes = new int[]{576, 472, 483, 420, 455, 451};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 1267;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 172, 0), new ScheduledTask(0, 64, 1), new ScheduledTask(0, 43, 2), new ScheduledTask(64, 257, 1), new ScheduledTask(172, 322, 0), new ScheduledTask(179, 286, 2), new ScheduledTask(322, 515, 0), new ScheduledTask(329, 415, 1), new ScheduledTask(515, 730, 0), new ScheduledTask(330, 416, 2), new ScheduledTask(521, 607, 1), new ScheduledTask(524, 717, 2), new ScheduledTask(730, 945, 0), new ScheduledTask(717, 781, 2), new ScheduledTask(734, 798, 1), new ScheduledTask(945, 1074, 0), new ScheduledTask(798, 927, 1), new ScheduledTask(954, 1040, 1), new ScheduledTask(1074, 1267, 0), new ScheduledTask(1076, 1205, 1), new ScheduledTask(1047, 1090, 2)};
        int[] expectedProcessorEndTimes = new int[]{1267, 1205, 1090};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1380;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(43, 215, 0), new ScheduledTask(0, 64, 1), new ScheduledTask(0, 43, 0), new ScheduledTask(64, 257, 1), new ScheduledTask(215, 365, 0), new ScheduledTask(257, 364, 1), new ScheduledTask(372, 565, 1), new ScheduledTask(456, 542, 0), new ScheduledTask(567, 782, 0), new ScheduledTask(370, 456, 0), new ScheduledTask(565, 651, 1), new ScheduledTask(651, 844, 1), new ScheduledTask(782, 997, 0), new ScheduledTask(908, 972, 1), new ScheduledTask(844, 908, 1), new ScheduledTask(997, 1126, 0), new ScheduledTask(972, 1101, 1), new ScheduledTask(1101, 1187, 1), new ScheduledTask(1187, 1380, 1), new ScheduledTask(1237, 1366, 0), new ScheduledTask(1194, 1237, 0)};
        int[] expectedProcessorEndTimes = new int[]{1366, 1380};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 1267;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 172, 0), new ScheduledTask(0, 64, 1), new ScheduledTask(0, 43, 2), new ScheduledTask(64, 257, 1), new ScheduledTask(172, 322, 0), new ScheduledTask(179, 286, 2), new ScheduledTask(322, 515, 0), new ScheduledTask(329, 415, 1), new ScheduledTask(515, 730, 0), new ScheduledTask(330, 416, 2), new ScheduledTask(521, 607, 1), new ScheduledTask(524, 717, 2), new ScheduledTask(730, 945, 0), new ScheduledTask(717, 781, 2), new ScheduledTask(734, 798, 1), new ScheduledTask(945, 1074, 0), new ScheduledTask(798, 927, 1), new ScheduledTask(954, 1040, 1), new ScheduledTask(1074, 1267, 0), new ScheduledTask(1076, 1205, 1), new ScheduledTask(1047, 1090, 2)};
        int[] expectedProcessorEndTimes = new int[]{1267, 1205, 1090};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 1267;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 172, 0), new ScheduledTask(0, 64, 1), new ScheduledTask(0, 43, 2), new ScheduledTask(64, 257, 1), new ScheduledTask(172, 322, 0), new ScheduledTask(179, 286, 2), new ScheduledTask(322, 515, 0), new ScheduledTask(329, 415, 1), new ScheduledTask(515, 730, 0), new ScheduledTask(330, 416, 2), new ScheduledTask(521, 607, 1), new ScheduledTask(524, 717, 2), new ScheduledTask(730, 945, 0), new ScheduledTask(717, 781, 2), new ScheduledTask(734, 798, 1), new ScheduledTask(945, 1074, 0), new ScheduledTask(798, 927, 1), new ScheduledTask(954, 1040, 1), new ScheduledTask(1074, 1267, 0), new ScheduledTask(1076, 1205, 1), new ScheduledTask(1047, 1090, 2)};
        int[] expectedProcessorEndTimes = new int[]{1267, 1205, 1090};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 160200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(32400, 32544, 0), new ScheduledTask(18000, 18144, 0), new ScheduledTask(0, 126, 1), new ScheduledTask(0, 108, 2), new ScheduledTask(9000, 9090, 0), new ScheduledTask(0, 90, 0), new ScheduledTask(0, 54, 3), new ScheduledTask(54000, 54162, 0), new ScheduledTask(109800, 109926, 0), new ScheduledTask(70200, 70326, 0), new ScheduledTask(32400, 32544, 3), new ScheduledTask(82800, 82962, 0), new ScheduledTask(75600, 75672, 1), new ScheduledTask(46800, 46872, 0), new ScheduledTask(144000, 144162, 0), new ScheduledTask(70500, 70644, 2), new ScheduledTask(131400, 131526, 0), new ScheduledTask(99000, 99108, 0), new ScheduledTask(122400, 122490, 0), new ScheduledTask(122600, 122654, 3), new ScheduledTask(119100, 119154, 1)};
        int[] expectedProcessorEndTimes = new int[]{144162, 119154, 70644, 122654};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 95400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(10800, 10944, 0), new ScheduledTask(0, 144, 1), new ScheduledTask(0, 126, 2), new ScheduledTask(0, 108, 0), new ScheduledTask(0, 90, 3), new ScheduledTask(25200, 25290, 0), new ScheduledTask(18000, 18054, 3), new ScheduledTask(28800, 28962, 3), new ScheduledTask(39600, 39726, 2), new ScheduledTask(43500, 43626, 1), new ScheduledTask(50400, 50544, 0), new ScheduledTask(34200, 34362, 0), new ScheduledTask(25200, 25272, 2), new ScheduledTask(29100, 29172, 1), new ScheduledTask(79200, 79362, 0), new ScheduledTask(64800, 64944, 0), new ScheduledTask(68700, 68826, 1), new ScheduledTask(61200, 61308, 3), new ScheduledTask(64800, 64890, 2), new ScheduledTask(82800, 82854, 3), new ScheduledTask(82800, 82854, 2)};
        int[] expectedProcessorEndTimes = new int[]{79362, 68826, 82854, 82854};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 79200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 144, 2), new ScheduledTask(0, 144, 3), new ScheduledTask(21600, 21726, 2), new ScheduledTask(10800, 10908, 1), new ScheduledTask(0, 90, 1), new ScheduledTask(5400, 5490, 0), new ScheduledTask(0, 54, 0), new ScheduledTask(23760, 23922, 1), new ScheduledTask(43200, 43326, 1), new ScheduledTask(28800, 28926, 0), new ScheduledTask(14400, 14544, 0), new ScheduledTask(40500, 40662, 2), new ScheduledTask(43200, 43272, 3), new ScheduledTask(28800, 28872, 3), new ScheduledTask(58600, 58762, 1), new ScheduledTask(54000, 54144, 0), new ScheduledTask(41400, 41526, 0), new ScheduledTask(68400, 68508, 0), new ScheduledTask(64800, 64890, 2), new ScheduledTask(68400, 68454, 3), new ScheduledTask(57600, 57654, 3)};
        int[] expectedProcessorEndTimes = new int[]{68508, 58762, 64890, 68454};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1188;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(288, 432, 0), new ScheduledTask(144, 288, 0), new ScheduledTask(468, 594, 1), new ScheduledTask(90, 198, 1), new ScheduledTask(54, 144, 0), new ScheduledTask(0, 90, 1), new ScheduledTask(0, 54, 0), new ScheduledTask(882, 1044, 1), new ScheduledTask(594, 720, 1), new ScheduledTask(342, 468, 1), new ScheduledTask(198, 342, 1), new ScheduledTask(720, 882, 1), new ScheduledTask(630, 702, 0), new ScheduledTask(432, 504, 0), new ScheduledTask(756, 918, 0), new ScheduledTask(1044, 1188, 1), new ScheduledTask(504, 630, 0), new ScheduledTask(1062, 1170, 0), new ScheduledTask(972, 1062, 0), new ScheduledTask(918, 972, 0), new ScheduledTask(702, 756, 0)};
        int[] expectedProcessorEndTimes = new int[]{1170, 1188};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 594;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(54, 198, 0), new ScheduledTask(0, 144, 1), new ScheduledTask(0, 126, 2), new ScheduledTask(90, 198, 3), new ScheduledTask(0, 90, 3), new ScheduledTask(126, 216, 2), new ScheduledTask(0, 54, 0), new ScheduledTask(198, 360, 0), new ScheduledTask(198, 324, 3), new ScheduledTask(288, 414, 2), new ScheduledTask(324, 468, 3), new ScheduledTask(144, 306, 1), new ScheduledTask(306, 378, 1), new ScheduledTask(216, 288, 2), new ScheduledTask(414, 576, 2), new ScheduledTask(450, 594, 0), new ScheduledTask(468, 594, 3), new ScheduledTask(432, 540, 1), new ScheduledTask(360, 450, 0), new ScheduledTask(378, 432, 1), new ScheduledTask(540, 594, 1)};
        int[] expectedProcessorEndTimes = new int[]{594, 594, 576, 594};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 450;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 144, 0), new ScheduledTask(0, 144, 1), new ScheduledTask(0, 126, 2), new ScheduledTask(0, 108, 3), new ScheduledTask(54, 144, 4), new ScheduledTask(0, 90, 5), new ScheduledTask(0, 54, 4), new ScheduledTask(144, 306, 0), new ScheduledTask(154, 280, 5), new ScheduledTask(144, 270, 4), new ScheduledTask(150, 294, 3), new ScheduledTask(152, 314, 2), new ScheduledTask(149, 221, 1), new ScheduledTask(221, 293, 1), new ScheduledTask(280, 442, 5), new ScheduledTask(306, 450, 0), new ScheduledTask(302, 428, 4), new ScheduledTask(319, 427, 3), new ScheduledTask(314, 404, 2), new ScheduledTask(351, 405, 1), new ScheduledTask(297, 351, 1)};
        int[] expectedProcessorEndTimes = new int[]{450, 405, 404, 427, 428, 442};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot99_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.99_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 16400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(5100, 5119, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(0, 9, 2), new ScheduledTask(0, 9, 3), new ScheduledTask(0, 17, 0), new ScheduledTask(3600, 3606, 0), new ScheduledTask(1700, 1719, 0), new ScheduledTask(8700, 8719, 0), new ScheduledTask(7400, 7413, 0), new ScheduledTask(6200, 6209, 3), new ScheduledTask(7000, 7004, 0), new ScheduledTask(5400, 5413, 2), new ScheduledTask(4200, 4209, 0), new ScheduledTask(4200, 4209, 1), new ScheduledTask(10600, 10619, 0), new ScheduledTask(12500, 12519, 0), new ScheduledTask(15100, 15113, 0), new ScheduledTask(9600, 9611, 1), new ScheduledTask(14400, 14407, 0), new ScheduledTask(11600, 11606, 3), new ScheduledTask(13200, 13204, 2)};
        int[] expectedProcessorEndTimes = new int[]{15113, 9611, 13204, 11606};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot99_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.99_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1600, 1619, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(700, 709, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(0, 17, 2), new ScheduledTask(0, 6, 3), new ScheduledTask(1200, 1219, 3), new ScheduledTask(2200, 2219, 1), new ScheduledTask(3500, 3513, 0), new ScheduledTask(4800, 4809, 0), new ScheduledTask(3800, 3804, 2), new ScheduledTask(4600, 4613, 2), new ScheduledTask(5000, 5009, 3), new ScheduledTask(5700, 5709, 0), new ScheduledTask(6000, 6019, 1), new ScheduledTask(7200, 7219, 0), new ScheduledTask(7200, 7213, 2), new ScheduledTask(6800, 6811, 3), new ScheduledTask(9100, 9107, 0), new ScheduledTask(6600, 6606, 0), new ScheduledTask(9000, 9004, 3)};
        int[] expectedProcessorEndTimes = new int[]{9107, 6019, 7213, 9004};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot99_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.99_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(900, 919, 0), new ScheduledTask(0, 7, 2), new ScheduledTask(0, 9, 0), new ScheduledTask(0, 9, 3), new ScheduledTask(1050, 1067, 2), new ScheduledTask(1800, 1806, 3), new ScheduledTask(0, 19, 1), new ScheduledTask(2300, 2319, 1), new ScheduledTask(3200, 3213, 0), new ScheduledTask(3000, 3009, 3), new ScheduledTask(2800, 2804, 0), new ScheduledTask(3600, 3613, 2), new ScheduledTask(4580, 4589, 1), new ScheduledTask(4800, 4809, 3), new ScheduledTask(5100, 5119, 0), new ScheduledTask(5700, 5719, 1), new ScheduledTask(5550, 5563, 2), new ScheduledTask(7000, 7011, 0), new ScheduledTask(6600, 6607, 3), new ScheduledTask(4500, 4506, 0), new ScheduledTask(7500, 7504, 2)};
        int[] expectedProcessorEndTimes = new int[]{7011, 5719, 7504, 6607};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot99_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.99_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 121;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 19, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(7, 16, 1), new ScheduledTask(16, 25, 1), new ScheduledTask(19, 36, 0), new ScheduledTask(25, 31, 1), new ScheduledTask(31, 50, 1), new ScheduledTask(36, 55, 0), new ScheduledTask(50, 63, 1), new ScheduledTask(55, 64, 0), new ScheduledTask(63, 67, 1), new ScheduledTask(64, 77, 0), new ScheduledTask(67, 76, 1), new ScheduledTask(76, 85, 1), new ScheduledTask(77, 96, 0), new ScheduledTask(85, 104, 1), new ScheduledTask(96, 109, 0), new ScheduledTask(104, 115, 1), new ScheduledTask(109, 116, 0), new ScheduledTask(115, 121, 1), new ScheduledTask(116, 120, 0)};
        int[] expectedProcessorEndTimes = new int[]{120, 121};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot99_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.99_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 19, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(0, 9, 2), new ScheduledTask(7, 16, 1), new ScheduledTask(0, 17, 3), new ScheduledTask(9, 15, 2), new ScheduledTask(15, 34, 2), new ScheduledTask(16, 35, 1), new ScheduledTask(19, 32, 0), new ScheduledTask(20, 29, 3), new ScheduledTask(32, 36, 0), new ScheduledTask(29, 42, 3), new ScheduledTask(34, 43, 2), new ScheduledTask(42, 51, 0), new ScheduledTask(43, 62, 2), new ScheduledTask(39, 58, 1), new ScheduledTask(42, 55, 3), new ScheduledTask(51, 62, 0), new ScheduledTask(55, 62, 3), new ScheduledTask(36, 42, 0), new ScheduledTask(58, 62, 1)};
        int[] expectedProcessorEndTimes = new int[]{62, 62, 62, 62};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot99_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.99_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 19, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(0, 9, 2), new ScheduledTask(0, 9, 3), new ScheduledTask(0, 17, 4), new ScheduledTask(0, 6, 5), new ScheduledTask(6, 25, 5), new ScheduledTask(15, 34, 1), new ScheduledTask(19, 32, 0), new ScheduledTask(11, 20, 2), new ScheduledTask(22, 26, 2), new ScheduledTask(17, 30, 4), new ScheduledTask(25, 34, 5), new ScheduledTask(31, 40, 2), new ScheduledTask(36, 55, 0), new ScheduledTask(39, 58, 1), new ScheduledTask(41, 54, 2), new ScheduledTask(42, 53, 3), new ScheduledTask(38, 45, 5), new ScheduledTask(38, 44, 4), new ScheduledTask(45, 49, 4)};
        int[] expectedProcessorEndTimes = new int[]{55, 58, 54, 53, 49, 45};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot99_WeightType_Random2_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.99_WeightType_Random#2_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 16400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1700, 1712, 0), new ScheduledTask(2900, 2917, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(0, 12, 2), new ScheduledTask(1200, 1205, 0), new ScheduledTask(0, 7, 3), new ScheduledTask(0, 12, 0), new ScheduledTask(7700, 7717, 0), new ScheduledTask(9400, 9412, 0), new ScheduledTask(4600, 4619, 0), new ScheduledTask(4400, 4412, 3), new ScheduledTask(6500, 6512, 0), new ScheduledTask(7200, 7210, 2), new ScheduledTask(4800, 4807, 1), new ScheduledTask(12300, 12324, 0), new ScheduledTask(10600, 10617, 0), new ScheduledTask(14700, 14717, 0), new ScheduledTask(9000, 9007, 1), new ScheduledTask(11600, 11605, 3), new ScheduledTask(13200, 13205, 1), new ScheduledTask(13200, 13205, 2)};
        int[] expectedProcessorEndTimes = new int[]{14717, 13205, 13205, 11605};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot99_WeightType_Random2_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.99_WeightType_Random#2_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(1200, 1217, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(0, 12, 2), new ScheduledTask(0, 5, 3), new ScheduledTask(1400, 1407, 1), new ScheduledTask(1000, 1012, 3), new ScheduledTask(2900, 2917, 0), new ScheduledTask(2400, 2412, 2), new ScheduledTask(3700, 3719, 3), new ScheduledTask(4600, 4612, 0), new ScheduledTask(4800, 4812, 2), new ScheduledTask(2800, 2810, 1), new ScheduledTask(4800, 4807, 1), new ScheduledTask(5800, 5824, 0), new ScheduledTask(8200, 8217, 0), new ScheduledTask(6200, 6217, 1), new ScheduledTask(8500, 8507, 3), new ScheduledTask(7500, 7505, 3), new ScheduledTask(8200, 8205, 2), new ScheduledTask(7200, 7205, 2)};
        int[] expectedProcessorEndTimes = new int[]{8217, 6217, 8205, 8507};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot99_WeightType_Random2_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.99_WeightType_Random#2_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(0, 17, 2), new ScheduledTask(0, 7, 3), new ScheduledTask(600, 612, 1), new ScheduledTask(0, 5, 1), new ScheduledTask(1200, 1207, 0), new ScheduledTask(1400, 1412, 3), new ScheduledTask(3100, 3117, 0), new ScheduledTask(2040, 2052, 1), new ScheduledTask(2550, 2569, 2), new ScheduledTask(1900, 1912, 0), new ScheduledTask(4680, 4692, 1), new ScheduledTask(3480, 3490, 1), new ScheduledTask(3800, 3807, 3), new ScheduledTask(4800, 4824, 0), new ScheduledTask(6120, 6137, 1), new ScheduledTask(5600, 5617, 2), new ScheduledTask(6800, 6807, 3), new ScheduledTask(7700, 7705, 0), new ScheduledTask(5800, 5805, 3), new ScheduledTask(7200, 7205, 0)};
        int[] expectedProcessorEndTimes = new int[]{7705, 6137, 5617, 6807};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot99_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.99_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 121;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(19, 31, 0), new ScheduledTask(24, 41, 1), new ScheduledTask(12, 19, 0), new ScheduledTask(12, 24, 1), new ScheduledTask(7, 12, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(0, 12, 1), new ScheduledTask(41, 58, 0), new ScheduledTask(41, 53, 1), new ScheduledTask(84, 103, 1), new ScheduledTask(60, 72, 1), new ScheduledTask(72, 84, 1), new ScheduledTask(31, 41, 0), new ScheduledTask(53, 60, 1), new ScheduledTask(80, 104, 0), new ScheduledTask(103, 120, 1), new ScheduledTask(63, 80, 0), new ScheduledTask(104, 111, 0), new ScheduledTask(116, 121, 0), new ScheduledTask(111, 116, 0), new ScheduledTask(58, 63, 0)};
        int[] expectedProcessorEndTimes = new int[]{121, 120};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot99_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.99_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(5, 22, 1), new ScheduledTask(0, 7, 2), new ScheduledTask(7, 19, 3), new ScheduledTask(0, 5, 1), new ScheduledTask(0, 7, 3), new ScheduledTask(7, 19, 2), new ScheduledTask(21, 38, 2), new ScheduledTask(19, 31, 3), new ScheduledTask(22, 41, 1), new ScheduledTask(12, 24, 0), new ScheduledTask(27, 39, 0), new ScheduledTask(38, 48, 3), new ScheduledTask(31, 38, 3), new ScheduledTask(40, 64, 2), new ScheduledTask(48, 65, 1), new ScheduledTask(48, 65, 3), new ScheduledTask(53, 60, 0), new ScheduledTask(41, 46, 1), new ScheduledTask(48, 53, 0), new ScheduledTask(60, 65, 0)};
        int[] expectedProcessorEndTimes = new int[]{65, 65, 64, 65};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot99_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.99_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(0, 17, 1), new ScheduledTask(0, 7, 2), new ScheduledTask(0, 12, 3), new ScheduledTask(0, 5, 4), new ScheduledTask(0, 7, 5), new ScheduledTask(5, 17, 4), new ScheduledTask(17, 34, 0), new ScheduledTask(17, 29, 3), new ScheduledTask(17, 36, 1), new ScheduledTask(18, 30, 2), new ScheduledTask(22, 34, 4), new ScheduledTask(15, 25, 5), new ScheduledTask(26, 33, 5), new ScheduledTask(38, 62, 0), new ScheduledTask(43, 60, 1), new ScheduledTask(42, 59, 2), new ScheduledTask(38, 45, 5), new ScheduledTask(44, 49, 3), new ScheduledTask(44, 49, 4), new ScheduledTask(45, 50, 5)};
        int[] expectedProcessorEndTimes = new int[]{62, 60, 59, 49, 49, 50};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot99_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.99_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 16100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(2000, 2018, 0), new ScheduledTask(400, 416, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(0, 11, 2), new ScheduledTask(0, 4, 0), new ScheduledTask(0, 7, 3), new ScheduledTask(3800, 3812, 0), new ScheduledTask(5900, 5918, 0), new ScheduledTask(4800, 4811, 3), new ScheduledTask(8200, 8216, 0), new ScheduledTask(6600, 6607, 2), new ScheduledTask(5200, 5207, 1), new ScheduledTask(7700, 7705, 0), new ScheduledTask(5000, 5009, 0), new ScheduledTask(14300, 14318, 0), new ScheduledTask(9800, 9818, 0), new ScheduledTask(12700, 12716, 0), new ScheduledTask(9400, 9411, 1), new ScheduledTask(11600, 11611, 0), new ScheduledTask(10800, 10807, 2), new ScheduledTask(11400, 11407, 3)};
        int[] expectedProcessorEndTimes = new int[]{14318, 9411, 10807, 11407};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot99_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.99_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 18, 1), new ScheduledTask(500, 516, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(0, 11, 2), new ScheduledTask(1400, 1404, 3), new ScheduledTask(0, 7, 3), new ScheduledTask(2100, 2112, 0), new ScheduledTask(2200, 2218, 3), new ScheduledTask(3600, 3611, 1), new ScheduledTask(4200, 4216, 0), new ScheduledTask(4900, 4907, 2), new ScheduledTask(3500, 3507, 2), new ScheduledTask(2400, 2405, 2), new ScheduledTask(3300, 3309, 0), new ScheduledTask(7600, 7618, 0), new ScheduledTask(5800, 5818, 0), new ScheduledTask(6300, 6316, 2), new ScheduledTask(5800, 5811, 3), new ScheduledTask(7200, 7211, 1), new ScheduledTask(5800, 5807, 1), new ScheduledTask(8000, 8007, 3)};
        int[] expectedProcessorEndTimes = new int[]{7618, 7211, 6316, 8007};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot99_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.99_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 7840;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(500, 518, 0), new ScheduledTask(480, 496, 1), new ScheduledTask(0, 5, 0), new ScheduledTask(1050, 1061, 2), new ScheduledTask(0, 4, 1), new ScheduledTask(0, 7, 2), new ScheduledTask(0, 12, 3), new ScheduledTask(2400, 2418, 1), new ScheduledTask(3450, 3461, 2), new ScheduledTask(3700, 3716, 0), new ScheduledTask(2300, 2307, 0), new ScheduledTask(3000, 3007, 0), new ScheduledTask(2700, 2705, 2), new ScheduledTask(2400, 2409, 3), new ScheduledTask(5100, 5118, 2), new ScheduledTask(5300, 5318, 0), new ScheduledTask(5920, 5936, 1), new ScheduledTask(5600, 5611, 3), new ScheduledTask(4600, 4611, 1), new ScheduledTask(4200, 4207, 3), new ScheduledTask(7100, 7107, 0)};
        int[] expectedProcessorEndTimes = new int[]{7107, 5936, 5118, 5611};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 117;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(12, 30, 0), new ScheduledTask(15, 31, 1), new ScheduledTask(46, 51, 0), new ScheduledTask(4, 15, 1), new ScheduledTask(0, 4, 1), new ScheduledTask(30, 37, 0), new ScheduledTask(0, 12, 0), new ScheduledTask(51, 69, 0), new ScheduledTask(52, 63, 1), new ScheduledTask(36, 52, 1), new ScheduledTask(70, 77, 1), new ScheduledTask(63, 70, 1), new ScheduledTask(31, 36, 1), new ScheduledTask(37, 46, 0), new ScheduledTask(99, 117, 1), new ScheduledTask(69, 87, 0), new ScheduledTask(101, 117, 0), new ScheduledTask(88, 99, 1), new ScheduledTask(77, 88, 1), new ScheduledTask(94, 101, 0), new ScheduledTask(87, 94, 0)};
        int[] expectedProcessorEndTimes = new int[]{117, 117};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(7, 25, 0), new ScheduledTask(4, 20, 1), new ScheduledTask(0, 5, 2), new ScheduledTask(5, 16, 2), new ScheduledTask(0, 4, 1), new ScheduledTask(0, 7, 0), new ScheduledTask(0, 12, 3), new ScheduledTask(15, 33, 3), new ScheduledTask(30, 41, 0), new ScheduledTask(27, 43, 1), new ScheduledTask(28, 35, 2), new ScheduledTask(20, 27, 1), new ScheduledTask(25, 30, 0), new ScheduledTask(19, 28, 2), new ScheduledTask(43, 61, 0), new ScheduledTask(43, 61, 1), new ScheduledTask(45, 61, 3), new ScheduledTask(33, 44, 3), new ScheduledTask(42, 53, 2), new ScheduledTask(35, 42, 2), new ScheduledTask(53, 60, 2)};
        int[] expectedProcessorEndTimes = new int[]{61, 61, 60, 61};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 18, 0), new ScheduledTask(0, 16, 1), new ScheduledTask(0, 5, 2), new ScheduledTask(0, 11, 3), new ScheduledTask(0, 4, 4), new ScheduledTask(0, 7, 5), new ScheduledTask(4, 16, 4), new ScheduledTask(12, 30, 2), new ScheduledTask(26, 37, 0), new ScheduledTask(20, 36, 1), new ScheduledTask(20, 27, 3), new ScheduledTask(16, 23, 4), new ScheduledTask(20, 25, 5), new ScheduledTask(23, 32, 4), new ScheduledTask(37, 55, 0), new ScheduledTask(36, 54, 1), new ScheduledTask(41, 57, 2), new ScheduledTask(39, 50, 3), new ScheduledTask(37, 48, 4), new ScheduledTask(37, 44, 5), new ScheduledTask(46, 53, 5)};
        int[] expectedProcessorEndTimes = new int[]{55, 54, 57, 50, 48, 53};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_1dot00_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_1.00_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 16700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(2200, 2217, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(0, 7, 2), new ScheduledTask(3900, 3919, 0), new ScheduledTask(700, 715, 0), new ScheduledTask(0, 4, 3), new ScheduledTask(0, 7, 0), new ScheduledTask(8600, 8619, 0), new ScheduledTask(7500, 7511, 0), new ScheduledTask(2700, 2717, 3), new ScheduledTask(4700, 4711, 2), new ScheduledTask(4700, 4704, 1), new ScheduledTask(5800, 5817, 0), new ScheduledTask(7100, 7109, 1), new ScheduledTask(12400, 12419, 0), new ScheduledTask(10500, 10519, 0), new ScheduledTask(15200, 15213, 0), new ScheduledTask(11300, 11309, 2), new ScheduledTask(14300, 14309, 0), new ScheduledTask(12900, 12906, 3), new ScheduledTask(12500, 12506, 1)};
        int[] expectedProcessorEndTimes = new int[]{15213, 12506, 11309, 12906};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_1dot00_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_1.00_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1500, 1517, 0), new ScheduledTask(800, 807, 1), new ScheduledTask(0, 7, 2), new ScheduledTask(0, 19, 3), new ScheduledTask(0, 15, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(1400, 1407, 2), new ScheduledTask(2200, 2219, 1), new ScheduledTask(5600, 5611, 0), new ScheduledTask(2800, 2817, 2), new ScheduledTask(3600, 3611, 0), new ScheduledTask(3200, 3204, 0), new ScheduledTask(3800, 3817, 3), new ScheduledTask(4700, 4709, 0), new ScheduledTask(6000, 6019, 1), new ScheduledTask(6700, 6719, 0), new ScheduledTask(7200, 7213, 3), new ScheduledTask(6200, 6209, 2), new ScheduledTask(8000, 8009, 2), new ScheduledTask(9200, 9206, 0), new ScheduledTask(8600, 8606, 0)};
        int[] expectedProcessorEndTimes = new int[]{9206, 6019, 8009, 7213};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_1dot00_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_1.00_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8250;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 17, 1), new ScheduledTask(0, 7, 0), new ScheduledTask(0, 7, 3), new ScheduledTask(600, 619, 2), new ScheduledTask(700, 715, 0), new ScheduledTask(0, 4, 2), new ScheduledTask(1400, 1407, 3), new ScheduledTask(2200, 2219, 0), new ScheduledTask(3840, 3851, 1), new ScheduledTask(2800, 2817, 3), new ScheduledTask(2520, 2531, 1), new ScheduledTask(2040, 2044, 1), new ScheduledTask(3450, 3467, 2), new ScheduledTask(4150, 4159, 0), new ScheduledTask(5050, 5069, 0), new ScheduledTask(5160, 5179, 1), new ScheduledTask(6950, 6963, 0), new ScheduledTask(6000, 6009, 2), new ScheduledTask(6200, 6209, 3), new ScheduledTask(7350, 7356, 2), new ScheduledTask(7440, 7446, 1)};
        int[] expectedProcessorEndTimes = new int[]{6963, 7446, 7356, 6209};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 123;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(22, 39, 0), new ScheduledTask(30, 37, 1), new ScheduledTask(23, 30, 1), new ScheduledTask(4, 23, 1), new ScheduledTask(7, 22, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(0, 7, 0), new ScheduledTask(48, 67, 0), new ScheduledTask(54, 65, 1), new ScheduledTask(37, 54, 1), new ScheduledTask(92, 103, 1), new ScheduledTask(65, 69, 1), new ScheduledTask(69, 86, 1), new ScheduledTask(39, 48, 0), new ScheduledTask(103, 122, 1), new ScheduledTask(76, 95, 0), new ScheduledTask(101, 114, 0), new ScheduledTask(114, 123, 0), new ScheduledTask(67, 76, 0), new ScheduledTask(86, 92, 1), new ScheduledTask(95, 101, 0)};
        int[] expectedProcessorEndTimes = new int[]{123, 122};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(11, 28, 0), new ScheduledTask(7, 14, 1), new ScheduledTask(0, 7, 0), new ScheduledTask(0, 19, 2), new ScheduledTask(0, 15, 3), new ScheduledTask(7, 11, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(17, 36, 1), new ScheduledTask(19, 30, 2), new ScheduledTask(15, 32, 3), new ScheduledTask(32, 43, 0), new ScheduledTask(28, 32, 0), new ScheduledTask(30, 47, 2), new ScheduledTask(32, 41, 3), new ScheduledTask(43, 62, 0), new ScheduledTask(38, 57, 1), new ScheduledTask(50, 63, 3), new ScheduledTask(53, 62, 2), new ScheduledTask(41, 50, 3), new ScheduledTask(47, 53, 2), new ScheduledTask(57, 63, 1)};
        int[] expectedProcessorEndTimes = new int[]{62, 63, 62, 63};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 17, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(0, 7, 2), new ScheduledTask(0, 19, 3), new ScheduledTask(0, 15, 4), new ScheduledTask(0, 4, 5), new ScheduledTask(7, 14, 1), new ScheduledTask(16, 35, 2), new ScheduledTask(26, 37, 5), new ScheduledTask(18, 35, 4), new ScheduledTask(17, 28, 0), new ScheduledTask(22, 26, 5), new ScheduledTask(25, 42, 3), new ScheduledTask(26, 35, 1), new ScheduledTask(36, 55, 2), new ScheduledTask(37, 56, 5), new ScheduledTask(44, 57, 4), new ScheduledTask(42, 51, 3), new ScheduledTask(38, 47, 1), new ScheduledTask(51, 57, 3), new ScheduledTask(51, 57, 1)};
        int[] expectedProcessorEndTimes = new int[]{28, 57, 55, 57, 57, 56};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_1dot00_WeightType_Random2_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_1.00_WeightType_Random#2_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 15200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(2400, 2415, 0), new ScheduledTask(0, 15, 1), new ScheduledTask(1000, 1014, 0), new ScheduledTask(0, 10, 0), new ScheduledTask(1800, 1805, 2), new ScheduledTask(0, 9, 3), new ScheduledTask(0, 3, 2), new ScheduledTask(3900, 3917, 0), new ScheduledTask(9700, 9709, 0), new ScheduledTask(7300, 7310, 0), new ScheduledTask(5600, 5617, 0), new ScheduledTask(9000, 9003, 1), new ScheduledTask(5400, 5407, 3), new ScheduledTask(4800, 4803, 2), new ScheduledTask(13500, 13517, 0), new ScheduledTask(10600, 10615, 0), new ScheduledTask(12100, 12114, 0), new ScheduledTask(8300, 8314, 0), new ScheduledTask(7600, 7612, 2), new ScheduledTask(10800, 10807, 1), new ScheduledTask(9600, 9605, 3)};
        int[] expectedProcessorEndTimes = new int[]{13517, 10807, 7612, 9605};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_1dot00_WeightType_Random2_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_1.00_WeightType_Random#2_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 15, 0), new ScheduledTask(0, 15, 1), new ScheduledTask(0, 14, 2), new ScheduledTask(0, 10, 3), new ScheduledTask(1500, 1505, 0), new ScheduledTask(2000, 2009, 0), new ScheduledTask(2000, 2003, 3), new ScheduledTask(2600, 2617, 3), new ScheduledTask(3700, 3709, 1), new ScheduledTask(3000, 3010, 0), new ScheduledTask(2800, 2817, 2), new ScheduledTask(3100, 3103, 1), new ScheduledTask(4300, 4307, 0), new ScheduledTask(4000, 4003, 0), new ScheduledTask(5500, 5517, 1), new ScheduledTask(5700, 5715, 0), new ScheduledTask(6200, 6214, 2), new ScheduledTask(6000, 6014, 3), new ScheduledTask(7700, 7712, 0), new ScheduledTask(5000, 5007, 0), new ScheduledTask(7200, 7205, 0)};
        int[] expectedProcessorEndTimes = new int[]{7712, 5517, 6214, 6014};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_1dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_1.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 111;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(22, 37, 0), new ScheduledTask(39, 54, 1), new ScheduledTask(5, 19, 1), new ScheduledTask(12, 22, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(3, 12, 0), new ScheduledTask(0, 3, 0), new ScheduledTask(37, 54, 0), new ScheduledTask(57, 66, 1), new ScheduledTask(19, 29, 1), new ScheduledTask(66, 83, 1), new ScheduledTask(54, 57, 1), new ScheduledTask(32, 39, 1), new ScheduledTask(29, 32, 1), new ScheduledTask(94, 111, 0), new ScheduledTask(95, 110, 1), new ScheduledTask(75, 89, 0), new ScheduledTask(54, 68, 0), new ScheduledTask(83, 95, 1), new ScheduledTask(68, 75, 0), new ScheduledTask(89, 94, 0)};
        int[] expectedProcessorEndTimes = new int[]{111, 110};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_1dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_1.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(5, 20, 0), new ScheduledTask(0, 15, 1), new ScheduledTask(3, 17, 2), new ScheduledTask(0, 10, 3), new ScheduledTask(0, 5, 0), new ScheduledTask(10, 19, 3), new ScheduledTask(0, 3, 2), new ScheduledTask(20, 37, 0), new ScheduledTask(15, 24, 1), new ScheduledTask(19, 29, 3), new ScheduledTask(29, 46, 3), new ScheduledTask(24, 27, 1), new ScheduledTask(28, 35, 2), new ScheduledTask(17, 20, 2), new ScheduledTask(41, 58, 1), new ScheduledTask(42, 57, 2), new ScheduledTask(27, 41, 1), new ScheduledTask(37, 51, 0), new ScheduledTask(46, 58, 3), new ScheduledTask(35, 42, 2), new ScheduledTask(51, 56, 0)};
        int[] expectedProcessorEndTimes = new int[]{56, 58, 57, 58};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_1dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_1.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 15, 0), new ScheduledTask(0, 15, 1), new ScheduledTask(0, 14, 2), new ScheduledTask(0, 10, 3), new ScheduledTask(0, 5, 4), new ScheduledTask(0, 9, 5), new ScheduledTask(5, 8, 4), new ScheduledTask(15, 32, 0), new ScheduledTask(15, 24, 1), new ScheduledTask(15, 25, 2), new ScheduledTask(24, 41, 1), new ScheduledTask(24, 27, 3), new ScheduledTask(21, 28, 4), new ScheduledTask(17, 20, 5), new ScheduledTask(30, 47, 3), new ScheduledTask(29, 44, 4), new ScheduledTask(36, 50, 0), new ScheduledTask(36, 50, 2), new ScheduledTask(41, 53, 1), new ScheduledTask(34, 41, 5), new ScheduledTask(45, 50, 4)};
        int[] expectedProcessorEndTimes = new int[]{50, 53, 50, 47, 50, 41};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_1dot00_WeightType_Random3_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_1.00_WeightType_Random#3_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 15900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 15, 0), new ScheduledTask(2500, 2515, 0), new ScheduledTask(5000, 5015, 0), new ScheduledTask(0, 13, 1), new ScheduledTask(1500, 1510, 0), new ScheduledTask(0, 7, 2), new ScheduledTask(0, 4, 3), new ScheduledTask(4300, 4313, 2), new ScheduledTask(3000, 3015, 3), new ScheduledTask(10300, 10312, 0), new ScheduledTask(4000, 4010, 0), new ScheduledTask(8000, 8013, 0), new ScheduledTask(6500, 6515, 0), new ScheduledTask(9300, 9310, 0), new ScheduledTask(14400, 14413, 0), new ScheduledTask(12500, 12510, 0), new ScheduledTask(9900, 9910, 1), new ScheduledTask(13500, 13509, 0), new ScheduledTask(11500, 11509, 0), new ScheduledTask(12100, 12106, 2), new ScheduledTask(12000, 12006, 3)};
        int[] expectedProcessorEndTimes = new int[]{14413, 9910, 12106, 12006};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_1dot00_WeightType_Random3_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_1.00_WeightType_Random#3_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1100, 1115, 0), new ScheduledTask(0, 15, 1), new ScheduledTask(0, 15, 2), new ScheduledTask(2000, 2013, 3), new ScheduledTask(0, 10, 3), new ScheduledTask(400, 407, 0), new ScheduledTask(0, 4, 0), new ScheduledTask(4100, 4113, 0), new ScheduledTask(2600, 2615, 0), new ScheduledTask(5000, 5012, 1), new ScheduledTask(3000, 3010, 1), new ScheduledTask(5400, 5413, 0), new ScheduledTask(3000, 3015, 2), new ScheduledTask(4600, 4610, 3), new ScheduledTask(6600, 6613, 3), new ScheduledTask(6000, 6010, 2), new ScheduledTask(6700, 6710, 0), new ScheduledTask(8300, 8309, 0), new ScheduledTask(7400, 7409, 1), new ScheduledTask(8000, 8006, 2), new ScheduledTask(7700, 7706, 0)};
        int[] expectedProcessorEndTimes = new int[]{8309, 7409, 8006, 6613};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_1dot00_WeightType_Random3_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_1.00_WeightType_Random#3_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 7700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 15, 0), new ScheduledTask(0, 15, 1), new ScheduledTask(1500, 1515, 0), new ScheduledTask(0, 13, 3), new ScheduledTask(0, 10, 2), new ScheduledTask(1800, 1807, 1), new ScheduledTask(1500, 1504, 2), new ScheduledTask(2100, 2113, 2), new ScheduledTask(3000, 3015, 0), new ScheduledTask(2600, 2612, 3), new ScheduledTask(2640, 2650, 1), new ScheduledTask(3840, 3853, 1), new ScheduledTask(4050, 4065, 2), new ScheduledTask(4500, 4510, 0), new ScheduledTask(5100, 5113, 3), new ScheduledTask(5400, 5410, 1), new ScheduledTask(6700, 6710, 0), new ScheduledTask(6600, 6609, 1), new ScheduledTask(6300, 6309, 2), new ScheduledTask(5500, 5506, 0), new ScheduledTask(6100, 6106, 0)};
        int[] expectedProcessorEndTimes = new int[]{6710, 6609, 6309, 5113};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_1dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_1.00_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 115;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(13, 28, 0), new ScheduledTask(36, 51, 1), new ScheduledTask(11, 26, 1), new ScheduledTask(0, 13, 0), new ScheduledTask(26, 36, 1), new ScheduledTask(4, 11, 1), new ScheduledTask(0, 4, 1), new ScheduledTask(78, 91, 1), new ScheduledTask(63, 78, 1), new ScheduledTask(51, 63, 1), new ScheduledTask(82, 92, 0), new ScheduledTask(43, 56, 0), new ScheduledTask(28, 43, 0), new ScheduledTask(66, 76, 0), new ScheduledTask(102, 115, 0), new ScheduledTask(92, 102, 0), new ScheduledTask(56, 66, 0), new ScheduledTask(106, 115, 1), new ScheduledTask(91, 100, 1), new ScheduledTask(100, 106, 1), new ScheduledTask(76, 82, 0)};
        int[] expectedProcessorEndTimes = new int[]{115, 115};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_1dot00_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_1.00_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 15, 0), new ScheduledTask(0, 15, 1), new ScheduledTask(0, 15, 2), new ScheduledTask(15, 28, 1), new ScheduledTask(0, 10, 3), new ScheduledTask(14, 21, 3), new ScheduledTask(10, 14, 3), new ScheduledTask(27, 40, 2), new ScheduledTask(15, 30, 0), new ScheduledTask(36, 48, 3), new ScheduledTask(17, 27, 2), new ScheduledTask(30, 43, 0), new ScheduledTask(21, 36, 3), new ScheduledTask(28, 38, 1), new ScheduledTask(40, 53, 2), new ScheduledTask(38, 48, 1), new ScheduledTask(49, 59, 1), new ScheduledTask(49, 58, 3), new ScheduledTask(43, 52, 0), new ScheduledTask(53, 59, 2), new ScheduledTask(52, 58, 0)};
        int[] expectedProcessorEndTimes = new int[]{58, 59, 59, 58};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_1dot00_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_1.00_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 15, 0), new ScheduledTask(0, 15, 1), new ScheduledTask(0, 15, 2), new ScheduledTask(0, 13, 3), new ScheduledTask(0, 10, 4), new ScheduledTask(0, 7, 5), new ScheduledTask(10, 14, 4), new ScheduledTask(19, 32, 1), new ScheduledTask(15, 30, 0), new ScheduledTask(27, 39, 5), new ScheduledTask(17, 27, 5), new ScheduledTask(22, 35, 4), new ScheduledTask(17, 32, 3), new ScheduledTask(23, 33, 2), new ScheduledTask(36, 49, 1), new ScheduledTask(35, 45, 4), new ScheduledTask(41, 51, 3), new ScheduledTask(42, 51, 5), new ScheduledTask(42, 51, 2), new ScheduledTask(45, 51, 4), new ScheduledTask(42, 48, 0)};
        int[] expectedProcessorEndTimes = new int[]{48, 49, 51, 51, 51, 51};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_1dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_1.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 147;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 19, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(10, 14, 1), new ScheduledTask(26, 47, 1), new ScheduledTask(40, 61, 0), new ScheduledTask(19, 40, 0), new ScheduledTask(61, 76, 0), new ScheduledTask(47, 64, 1), new ScheduledTask(70, 74, 1), new ScheduledTask(76, 97, 0), new ScheduledTask(86, 99, 1), new ScheduledTask(79, 85, 1), new ScheduledTask(106, 119, 0), new ScheduledTask(104, 117, 1), new ScheduledTask(97, 101, 0), new ScheduledTask(119, 125, 0), new ScheduledTask(117, 121, 1), new ScheduledTask(128, 132, 1), new ScheduledTask(128, 143, 0), new ScheduledTask(132, 147, 1), new ScheduledTask(143, 147, 0)};
        int[] expectedProcessorEndTimes = new int[]{147, 147};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_1dot00_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_1.00_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 136;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 19, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 4, 2), new ScheduledTask(20, 41, 0), new ScheduledTask(24, 45, 3), new ScheduledTask(24, 45, 1), new ScheduledTask(49, 64, 3), new ScheduledTask(45, 62, 1), new ScheduledTask(45, 49, 3), new ScheduledTask(68, 89, 3), new ScheduledTask(74, 87, 2), new ScheduledTask(67, 73, 2), new ScheduledTask(92, 105, 2), new ScheduledTask(94, 107, 3), new ScheduledTask(89, 93, 3), new ScheduledTask(109, 115, 2), new ScheduledTask(107, 111, 3), new ScheduledTask(114, 118, 3), new ScheduledTask(121, 136, 3), new ScheduledTask(120, 135, 2), new ScheduledTask(121, 125, 1)};
        int[] expectedProcessorEndTimes = new int[]{41, 125, 135, 136};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_1dot00_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_1.00_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 15700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(3200, 3215, 0), new ScheduledTask(0, 17, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(1700, 1715, 0), new ScheduledTask(0, 5, 2), new ScheduledTask(0, 7, 3), new ScheduledTask(4700, 4713, 0), new ScheduledTask(7300, 7313, 0), new ScheduledTask(5500, 5507, 1), new ScheduledTask(4200, 4213, 3), new ScheduledTask(8600, 8613, 0), new ScheduledTask(3500, 3512, 2), new ScheduledTask(6500, 6508, 0), new ScheduledTask(6000, 6005, 0), new ScheduledTask(13900, 13917, 0), new ScheduledTask(10900, 10917, 0), new ScheduledTask(12600, 12613, 0), new ScheduledTask(9700, 9710, 1), new ScheduledTask(9900, 9910, 0), new ScheduledTask(10700, 10708, 2), new ScheduledTask(12000, 12005, 3)};
        int[] expectedProcessorEndTimes = new int[]{13917, 9710, 10708, 12005};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_1dot00_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_1.00_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(700, 715, 0), new ScheduledTask(0, 17, 1), new ScheduledTask(0, 7, 0), new ScheduledTask(0, 15, 2), new ScheduledTask(2200, 2205, 0), new ScheduledTask(0, 7, 3), new ScheduledTask(1400, 1413, 3), new ScheduledTask(2700, 2713, 0), new ScheduledTask(3000, 3007, 2), new ScheduledTask(4000, 4013, 3), new ScheduledTask(4000, 4013, 0), new ScheduledTask(3400, 3412, 1), new ScheduledTask(5300, 5308, 0), new ScheduledTask(4400, 4405, 2), new ScheduledTask(7100, 7117, 0), new ScheduledTask(5800, 5817, 1), new ScheduledTask(6600, 6613, 3), new ScheduledTask(5400, 5410, 2), new ScheduledTask(6100, 6110, 0), new ScheduledTask(7400, 7408, 2), new ScheduledTask(8800, 8805, 0)};
        int[] expectedProcessorEndTimes = new int[]{8805, 5817, 7408, 6613};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_1dot00_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_1.00_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 7800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 15, 0), new ScheduledTask(0, 17, 1), new ScheduledTask(0, 7, 2), new ScheduledTask(1500, 1515, 0), new ScheduledTask(0, 5, 3), new ScheduledTask(1000, 1007, 3), new ScheduledTask(1050, 1063, 2), new ScheduledTask(2040, 2053, 1), new ScheduledTask(2400, 2407, 3), new ScheduledTask(3300, 3313, 2), new ScheduledTask(3000, 3013, 0), new ScheduledTask(4300, 4312, 0), new ScheduledTask(3700, 3708, 1), new ScheduledTask(3800, 3805, 3), new ScheduledTask(5250, 5267, 2), new ScheduledTask(4800, 4817, 1), new ScheduledTask(6500, 6513, 0), new ScheduledTask(4800, 4810, 3), new ScheduledTask(5500, 5510, 0), new ScheduledTask(6840, 6848, 1), new ScheduledTask(6800, 6805, 3)};
        int[] expectedProcessorEndTimes = new int[]{6513, 6848, 5267, 6805};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 115;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(13, 28, 0), new ScheduledTask(28, 45, 0), new ScheduledTask(27, 34, 1), new ScheduledTask(12, 27, 1), new ScheduledTask(7, 12, 1), new ScheduledTask(0, 7, 1), new ScheduledTask(0, 13, 0), new ScheduledTask(45, 58, 0), new ScheduledTask(47, 54, 1), new ScheduledTask(67, 80, 1), new ScheduledTask(54, 67, 1), new ScheduledTask(80, 92, 1), new ScheduledTask(39, 47, 1), new ScheduledTask(34, 39, 1), new ScheduledTask(93, 110, 0), new ScheduledTask(76, 93, 0), new ScheduledTask(102, 115, 1), new ScheduledTask(92, 102, 1), new ScheduledTask(66, 76, 0), new ScheduledTask(58, 66, 0), new ScheduledTask(110, 115, 0)};
        int[] expectedProcessorEndTimes = new int[]{115, 115};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 60;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 15, 0), new ScheduledTask(7, 24, 1), new ScheduledTask(0, 7, 1), new ScheduledTask(7, 22, 2), new ScheduledTask(0, 5, 3), new ScheduledTask(0, 7, 2), new ScheduledTask(5, 18, 3), new ScheduledTask(15, 28, 0), new ScheduledTask(26, 33, 3), new ScheduledTask(27, 40, 2), new ScheduledTask(24, 37, 1), new ScheduledTask(32, 44, 0), new ScheduledTask(18, 26, 3), new ScheduledTask(22, 27, 2), new ScheduledTask(43, 60, 3), new ScheduledTask(43, 60, 2), new ScheduledTask(45, 58, 0), new ScheduledTask(45, 55, 1), new ScheduledTask(33, 43, 3), new ScheduledTask(37, 45, 1), new ScheduledTask(55, 60, 1)};
        int[] expectedProcessorEndTimes = new int[]{58, 60, 60, 60};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 15, 0), new ScheduledTask(0, 17, 1), new ScheduledTask(0, 7, 2), new ScheduledTask(0, 15, 3), new ScheduledTask(0, 5, 4), new ScheduledTask(0, 7, 5), new ScheduledTask(7, 20, 2), new ScheduledTask(15, 28, 0), new ScheduledTask(23, 30, 5), new ScheduledTask(20, 33, 4), new ScheduledTask(22, 35, 1), new ScheduledTask(25, 37, 3), new ScheduledTask(30, 38, 5), new ScheduledTask(33, 38, 4), new ScheduledTask(38, 55, 2), new ScheduledTask(38, 55, 5), new ScheduledTask(38, 51, 3), new ScheduledTask(39, 49, 4), new ScheduledTask(44, 54, 1), new ScheduledTask(45, 53, 0), new ScheduledTask(49, 54, 4)};
        int[] expectedProcessorEndTimes = new int[]{53, 54, 55, 51, 54, 55};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_1dot01_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_1.01_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 16400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(2300, 2308, 0), new ScheduledTask(0, 8, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(3100, 3111, 0), new ScheduledTask(800, 815, 0), new ScheduledTask(0, 4, 2), new ScheduledTask(10400, 10421, 0), new ScheduledTask(0, 6, 3), new ScheduledTask(7000, 7013, 0), new ScheduledTask(3600, 3611, 3), new ScheduledTask(5700, 5713, 0), new ScheduledTask(2600, 2615, 1), new ScheduledTask(3800, 3808, 2), new ScheduledTask(4200, 4215, 0), new ScheduledTask(8300, 8321, 0), new ScheduledTask(14200, 14221, 0), new ScheduledTask(12500, 12517, 0), new ScheduledTask(9100, 9111, 2), new ScheduledTask(11600, 11608, 1), new ScheduledTask(10200, 10206, 3), new ScheduledTask(13800, 13804, 3)};
        int[] expectedProcessorEndTimes = new int[]{14221, 11608, 9111, 13804};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_1dot01_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_1.01_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1100, 1108, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(0, 4, 2), new ScheduledTask(0, 11, 0), new ScheduledTask(0, 15, 3), new ScheduledTask(1600, 1604, 1), new ScheduledTask(1900, 1921, 0), new ScheduledTask(800, 806, 2), new ScheduledTask(3700, 3713, 2), new ScheduledTask(2400, 2411, 1), new ScheduledTask(4600, 4613, 1), new ScheduledTask(4000, 4015, 0), new ScheduledTask(2100, 2108, 2), new ScheduledTask(3000, 3015, 3), new ScheduledTask(7600, 7621, 0), new ScheduledTask(5500, 5521, 0), new ScheduledTask(6300, 6317, 2), new ScheduledTask(7200, 7211, 1), new ScheduledTask(8000, 8008, 3), new ScheduledTask(6000, 6006, 3), new ScheduledTask(7200, 7204, 3)};
        int[] expectedProcessorEndTimes = new int[]{7621, 7211, 6317, 8008};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_1dot01_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_1.01_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(960, 968, 1), new ScheduledTask(0, 4, 1), new ScheduledTask(0, 11, 2), new ScheduledTask(800, 815, 0), new ScheduledTask(480, 484, 1), new ScheduledTask(1920, 1941, 1), new ScheduledTask(0, 6, 3), new ScheduledTask(3600, 3613, 0), new ScheduledTask(1650, 1661, 2), new ScheduledTask(2300, 2313, 0), new ScheduledTask(3300, 3315, 2), new ScheduledTask(1200, 1208, 3), new ScheduledTask(2800, 2815, 3), new ScheduledTask(5500, 5521, 0), new ScheduledTask(4440, 4461, 1), new ScheduledTask(5550, 5567, 2), new ScheduledTask(5800, 5811, 3), new ScheduledTask(6960, 6968, 1), new ScheduledTask(4900, 4906, 0), new ScheduledTask(7600, 7604, 0)};
        int[] expectedProcessorEndTimes = new int[]{7604, 6968, 5567, 5811};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_1dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_1.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 120;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(8, 12, 0), new ScheduledTask(8, 19, 1), new ScheduledTask(12, 27, 0), new ScheduledTask(19, 23, 1), new ScheduledTask(23, 44, 1), new ScheduledTask(27, 33, 0), new ScheduledTask(33, 46, 0), new ScheduledTask(44, 55, 1), new ScheduledTask(46, 59, 0), new ScheduledTask(55, 70, 1), new ScheduledTask(59, 67, 0), new ScheduledTask(67, 82, 0), new ScheduledTask(70, 91, 1), new ScheduledTask(82, 103, 0), new ScheduledTask(91, 108, 1), new ScheduledTask(103, 114, 0), new ScheduledTask(108, 116, 1), new ScheduledTask(114, 120, 0), new ScheduledTask(116, 120, 1)};
        int[] expectedProcessorEndTimes = new int[]{120, 120};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_1dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_1.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(4, 12, 1), new ScheduledTask(0, 4, 2), new ScheduledTask(4, 15, 2), new ScheduledTask(6, 21, 3), new ScheduledTask(0, 4, 1), new ScheduledTask(13, 34, 1), new ScheduledTask(0, 6, 3), new ScheduledTask(15, 28, 2), new ScheduledTask(16, 27, 0), new ScheduledTask(28, 41, 2), new ScheduledTask(22, 37, 3), new ScheduledTask(8, 16, 0), new ScheduledTask(27, 42, 0), new ScheduledTask(41, 62, 2), new ScheduledTask(36, 57, 1), new ScheduledTask(44, 61, 3), new ScheduledTask(51, 62, 0), new ScheduledTask(43, 51, 0), new ScheduledTask(37, 43, 3), new ScheduledTask(57, 61, 1)};
        int[] expectedProcessorEndTimes = new int[]{62, 61, 62, 61};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_1dot01_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_1.01_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 15500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1000, 1014, 0), new ScheduledTask(4100, 4117, 0), new ScheduledTask(2400, 2417, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(0, 10, 0), new ScheduledTask(0, 3, 2), new ScheduledTask(0, 3, 3), new ScheduledTask(8000, 8014, 0), new ScheduledTask(1800, 1814, 3), new ScheduledTask(6200, 6210, 2), new ScheduledTask(2600, 2603, 2), new ScheduledTask(6800, 6812, 0), new ScheduledTask(4400, 4403, 2), new ScheduledTask(5800, 5810, 0), new ScheduledTask(9400, 9417, 0), new ScheduledTask(11100, 11115, 0), new ScheduledTask(12600, 12615, 0), new ScheduledTask(14100, 14114, 0), new ScheduledTask(8200, 8212, 1), new ScheduledTask(10200, 10207, 3), new ScheduledTask(12200, 12203, 2)};
        int[] expectedProcessorEndTimes = new int[]{14114, 8212, 12203, 10207};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_1dot01_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_1.01_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 1), new ScheduledTask(1300, 1317, 0), new ScheduledTask(0, 17, 2), new ScheduledTask(0, 9, 3), new ScheduledTask(300, 310, 0), new ScheduledTask(0, 3, 0), new ScheduledTask(1800, 1803, 3), new ScheduledTask(4000, 4014, 0), new ScheduledTask(2400, 2414, 3), new ScheduledTask(3000, 3010, 0), new ScheduledTask(3400, 3403, 1), new ScheduledTask(3800, 3812, 2), new ScheduledTask(2800, 2803, 1), new ScheduledTask(4000, 4010, 1), new ScheduledTask(5400, 5417, 0), new ScheduledTask(6000, 6015, 1), new ScheduledTask(7400, 7415, 0), new ScheduledTask(6200, 6214, 2), new ScheduledTask(6600, 6612, 3), new ScheduledTask(5200, 5207, 3), new ScheduledTask(7100, 7103, 0)};
        int[] expectedProcessorEndTimes = new int[]{7415, 6015, 6214, 6612};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_1dot01_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_1.01_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 7500;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1000, 1014, 0), new ScheduledTask(0, 17, 1), new ScheduledTask(450, 467, 2), new ScheduledTask(600, 609, 3), new ScheduledTask(0, 10, 0), new ScheduledTask(0, 3, 3), new ScheduledTask(0, 3, 2), new ScheduledTask(3000, 3014, 0), new ScheduledTask(2040, 2054, 1), new ScheduledTask(2400, 2410, 3), new ScheduledTask(2700, 2703, 0), new ScheduledTask(3720, 3732, 1), new ScheduledTask(2400, 2403, 0), new ScheduledTask(3000, 3010, 2), new ScheduledTask(4400, 4417, 0), new ScheduledTask(4400, 4415, 3), new ScheduledTask(5520, 5535, 1), new ScheduledTask(6100, 6114, 0), new ScheduledTask(5550, 5562, 2), new ScheduledTask(4500, 4507, 2), new ScheduledTask(5160, 5163, 1)};
        int[] expectedProcessorEndTimes = new int[]{6114, 5535, 5562, 4415};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 111;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(20, 34, 0), new ScheduledTask(3, 20, 0), new ScheduledTask(22, 39, 1), new ScheduledTask(13, 22, 1), new ScheduledTask(3, 13, 1), new ScheduledTask(0, 3, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(55, 69, 0), new ScheduledTask(34, 48, 0), new ScheduledTask(67, 77, 1), new ScheduledTask(39, 42, 1), new ScheduledTask(55, 67, 1), new ScheduledTask(52, 55, 1), new ScheduledTask(42, 52, 1), new ScheduledTask(94, 111, 1), new ScheduledTask(96, 111, 0), new ScheduledTask(81, 96, 0), new ScheduledTask(80, 94, 1), new ScheduledTask(69, 81, 0), new ScheduledTask(48, 55, 0), new ScheduledTask(77, 80, 1)};
        int[] expectedProcessorEndTimes = new int[]{111, 111};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(0, 17, 1), new ScheduledTask(9, 26, 2), new ScheduledTask(0, 9, 2), new ScheduledTask(0, 10, 3), new ScheduledTask(14, 17, 0), new ScheduledTask(10, 13, 3), new ScheduledTask(17, 31, 0), new ScheduledTask(13, 27, 3), new ScheduledTask(27, 37, 3), new ScheduledTask(18, 21, 1), new ScheduledTask(26, 38, 2), new ScheduledTask(24, 27, 1), new ScheduledTask(28, 38, 1), new ScheduledTask(40, 57, 1), new ScheduledTask(31, 46, 0), new ScheduledTask(39, 54, 2), new ScheduledTask(44, 58, 3), new ScheduledTask(46, 58, 0), new ScheduledTask(37, 44, 3), new ScheduledTask(54, 57, 2)};
        int[] expectedProcessorEndTimes = new int[]{58, 57, 57, 58};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(0, 17, 1), new ScheduledTask(0, 17, 2), new ScheduledTask(0, 9, 3), new ScheduledTask(0, 10, 4), new ScheduledTask(0, 3, 5), new ScheduledTask(3, 6, 5), new ScheduledTask(14, 28, 0), new ScheduledTask(15, 29, 4), new ScheduledTask(17, 27, 1), new ScheduledTask(18, 21, 2), new ScheduledTask(25, 37, 2), new ScheduledTask(24, 27, 3), new ScheduledTask(26, 36, 5), new ScheduledTask(36, 53, 0), new ScheduledTask(30, 45, 4), new ScheduledTask(37, 52, 2), new ScheduledTask(35, 49, 3), new ScheduledTask(39, 51, 5), new ScheduledTask(31, 38, 1), new ScheduledTask(43, 46, 1)};
        int[] expectedProcessorEndTimes = new int[]{53, 46, 52, 49, 45, 51};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_1dot02_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_1.02_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 15600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1600, 1616, 0), new ScheduledTask(5300, 5316, 0), new ScheduledTask(400, 412, 0), new ScheduledTask(0, 12, 1), new ScheduledTask(0, 4, 2), new ScheduledTask(0, 4, 0), new ScheduledTask(0, 4, 3), new ScheduledTask(3200, 3221, 0), new ScheduledTask(8100, 8110, 0), new ScheduledTask(3100, 3110, 3), new ScheduledTask(6900, 6908, 0), new ScheduledTask(3700, 3712, 2), new ScheduledTask(7700, 7704, 0), new ScheduledTask(7200, 7204, 1), new ScheduledTask(9100, 9119, 0), new ScheduledTask(14000, 14016, 0), new ScheduledTask(12400, 12416, 0), new ScheduledTask(11000, 11014, 0), new ScheduledTask(9600, 9610, 1), new ScheduledTask(9100, 9110, 3), new ScheduledTask(10900, 10906, 2)};
        int[] expectedProcessorEndTimes = new int[]{14016, 9610, 10906, 9110};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_1dot02_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_1.02_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1600, 1616, 0), new ScheduledTask(0, 16, 0), new ScheduledTask(800, 812, 1), new ScheduledTask(0, 12, 2), new ScheduledTask(800, 804, 3), new ScheduledTask(0, 4, 3), new ScheduledTask(0, 4, 1), new ScheduledTask(3600, 3621, 0), new ScheduledTask(2500, 2510, 2), new ScheduledTask(4000, 4010, 1), new ScheduledTask(1800, 1808, 3), new ScheduledTask(3700, 3712, 3), new ScheduledTask(3200, 3204, 1), new ScheduledTask(3200, 3204, 0), new ScheduledTask(5700, 5719, 0), new ScheduledTask(6000, 6016, 1), new ScheduledTask(7600, 7616, 0), new ScheduledTask(4500, 4514, 2), new ScheduledTask(6100, 6110, 3), new ScheduledTask(7300, 7310, 2), new ScheduledTask(8100, 8106, 3)};
        int[] expectedProcessorEndTimes = new int[]{7616, 6016, 7310, 8106};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_1dot02_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_1.02_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 7700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1200, 1216, 0), new ScheduledTask(0, 16, 1), new ScheduledTask(0, 12, 3), new ScheduledTask(0, 12, 0), new ScheduledTask(1200, 1204, 2), new ScheduledTask(600, 604, 2), new ScheduledTask(0, 4, 2), new ScheduledTask(2800, 2821, 0), new ScheduledTask(1920, 1930, 1), new ScheduledTask(2500, 2510, 3), new ScheduledTask(3120, 3128, 1), new ScheduledTask(4900, 4912, 0), new ScheduledTask(2500, 2504, 2), new ScheduledTask(1900, 1904, 2), new ScheduledTask(4820, 4839, 2), new ScheduledTask(4500, 4516, 3), new ScheduledTask(6100, 6116, 0), new ScheduledTask(4080, 4094, 1), new ScheduledTask(3320, 3330, 2), new ScheduledTask(5760, 5770, 1), new ScheduledTask(6960, 6966, 1)};
        int[] expectedProcessorEndTimes = new int[]{6116, 6966, 4839, 4516};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_1dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 114;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(20, 36, 0), new ScheduledTask(34, 50, 1), new ScheduledTask(4, 16, 1), new ScheduledTask(8, 20, 0), new ScheduledTask(4, 8, 0), new ScheduledTask(0, 4, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(36, 57, 0), new ScheduledTask(70, 80, 1), new ScheduledTask(16, 26, 1), new ScheduledTask(62, 70, 1), new ScheduledTask(50, 62, 1), new ScheduledTask(26, 30, 1), new ScheduledTask(30, 34, 1), new ScheduledTask(95, 114, 0), new ScheduledTask(57, 73, 0), new ScheduledTask(79, 95, 0), new ScheduledTask(100, 114, 1), new ScheduledTask(90, 100, 1), new ScheduledTask(80, 90, 1), new ScheduledTask(73, 79, 0)};
        int[] expectedProcessorEndTimes = new int[]{114, 114};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_1dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_1.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(4, 20, 0), new ScheduledTask(0, 16, 1), new ScheduledTask(4, 16, 2), new ScheduledTask(4, 16, 3), new ScheduledTask(0, 4, 2), new ScheduledTask(0, 4, 0), new ScheduledTask(0, 4, 3), new ScheduledTask(20, 41, 0), new ScheduledTask(24, 34, 1), new ScheduledTask(16, 26, 2), new ScheduledTask(16, 24, 1), new ScheduledTask(25, 37, 3), new ScheduledTask(16, 20, 3), new ScheduledTask(20, 24, 3), new ScheduledTask(34, 53, 1), new ScheduledTask(27, 43, 2), new ScheduledTask(42, 58, 0), new ScheduledTask(43, 57, 2), new ScheduledTask(37, 47, 3), new ScheduledTask(47, 57, 3), new ScheduledTask(53, 59, 1)};
        int[] expectedProcessorEndTimes = new int[]{58, 59, 57, 57};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_1dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_1.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 16, 0), new ScheduledTask(0, 16, 1), new ScheduledTask(0, 12, 2), new ScheduledTask(0, 12, 3), new ScheduledTask(0, 4, 4), new ScheduledTask(0, 4, 5), new ScheduledTask(4, 8, 4), new ScheduledTask(16, 37, 0), new ScheduledTask(19, 29, 1), new ScheduledTask(14, 24, 2), new ScheduledTask(18, 26, 3), new ScheduledTask(21, 33, 4), new ScheduledTask(15, 19, 5), new ScheduledTask(19, 23, 5), new ScheduledTask(32, 51, 1), new ScheduledTask(26, 42, 2), new ScheduledTask(38, 54, 0), new ScheduledTask(35, 49, 3), new ScheduledTask(31, 41, 5), new ScheduledTask(40, 50, 4), new ScheduledTask(42, 48, 2)};
        int[] expectedProcessorEndTimes = new int[]{54, 51, 48, 49, 50, 41};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_1dot98_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_1.98_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 79;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 13, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(13, 18, 0), new ScheduledTask(18, 20, 0), new ScheduledTask(14, 18, 1), new ScheduledTask(21, 26, 1), new ScheduledTask(26, 35, 1), new ScheduledTask(23, 30, 0), new ScheduledTask(34, 42, 0), new ScheduledTask(40, 46, 1), new ScheduledTask(35, 40, 1), new ScheduledTask(47, 52, 1), new ScheduledTask(51, 60, 0), new ScheduledTask(52, 54, 1), new ScheduledTask(60, 66, 0), new ScheduledTask(54, 63, 1), new ScheduledTask(63, 67, 1), new ScheduledTask(70, 79, 0), new ScheduledTask(67, 72, 1), new ScheduledTask(74, 78, 1)};
        int[] expectedProcessorEndTimes = new int[]{79, 78};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_1dot98_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_1.98_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(5, 13, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(13, 18, 0), new ScheduledTask(10, 12, 1), new ScheduledTask(18, 22, 0), new ScheduledTask(26, 31, 2), new ScheduledTask(26, 35, 3), new ScheduledTask(22, 29, 0), new ScheduledTask(31, 39, 2), new ScheduledTask(35, 41, 3), new ScheduledTask(41, 46, 3), new ScheduledTask(46, 51, 3), new ScheduledTask(48, 57, 2), new ScheduledTask(51, 53, 3), new ScheduledTask(57, 63, 2), new ScheduledTask(53, 62, 3), new ScheduledTask(60, 64, 1), new ScheduledTask(67, 76, 2), new ScheduledTask(66, 71, 1), new ScheduledTask(71, 75, 1)};
        int[] expectedProcessorEndTimes = new int[]{29, 75, 76, 62};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot00_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.00_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(3900, 3906, 0), new ScheduledTask(1300, 1302, 0), new ScheduledTask(1700, 1710, 0), new ScheduledTask(200, 205, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(0, 6, 2), new ScheduledTask(4500, 4510, 0), new ScheduledTask(8100, 8104, 0), new ScheduledTask(2700, 2708, 0), new ScheduledTask(3500, 3504, 0), new ScheduledTask(1500, 1502, 0), new ScheduledTask(700, 706, 0), new ScheduledTask(7200, 7204, 0), new ScheduledTask(8800, 8810, 0), new ScheduledTask(6200, 6210, 0), new ScheduledTask(4500, 4508, 3), new ScheduledTask(5500, 5507, 0), new ScheduledTask(7600, 7605, 0), new ScheduledTask(8500, 8503, 0), new ScheduledTask(8300, 8303, 2)};
        int[] expectedProcessorEndTimes = new int[]{8810, 3, 8303, 4508};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot00_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.00_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(2700, 2706, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(0, 10, 0), new ScheduledTask(800, 805, 1), new ScheduledTask(400, 402, 1), new ScheduledTask(0, 3, 2), new ScheduledTask(0, 6, 3), new ScheduledTask(3300, 3310, 0), new ScheduledTask(5200, 5204, 0), new ScheduledTask(3800, 3808, 1), new ScheduledTask(2300, 2304, 0), new ScheduledTask(1800, 1802, 1), new ScheduledTask(2200, 2206, 1), new ScheduledTask(4300, 4304, 0), new ScheduledTask(5900, 5910, 0), new ScheduledTask(5400, 5410, 1), new ScheduledTask(6200, 6208, 3), new ScheduledTask(6600, 6607, 2), new ScheduledTask(4700, 4705, 0), new ScheduledTask(5600, 5603, 0), new ScheduledTask(7400, 7403, 1)};
        int[] expectedProcessorEndTimes = new int[]{5910, 7403, 6607, 6208};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot00_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.00_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 6640;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1300, 1306, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(0, 10, 0), new ScheduledTask(480, 485, 1), new ScheduledTask(240, 242, 1), new ScheduledTask(1000, 1003, 0), new ScheduledTask(0, 6, 3), new ScheduledTask(2340, 2350, 0), new ScheduledTask(3340, 3344, 0), new ScheduledTask(3800, 3808, 1), new ScheduledTask(1940, 1944, 0), new ScheduledTask(1800, 1802, 1), new ScheduledTask(1080, 1086, 1), new ScheduledTask(3740, 3744, 0), new ScheduledTask(4940, 4950, 0), new ScheduledTask(4760, 4770, 1), new ScheduledTask(4840, 4848, 3), new ScheduledTask(5940, 5947, 0), new ScheduledTask(4440, 4445, 0), new ScheduledTask(4140, 4143, 0), new ScheduledTask(6140, 6143, 1)};
        int[] expectedProcessorEndTimes = new int[]{5947, 6143, 0, 4848};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(13, 19, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(0, 10, 0), new ScheduledTask(10, 15, 1), new ScheduledTask(8, 10, 1), new ScheduledTask(10, 13, 0), new ScheduledTask(2, 8, 1), new ScheduledTask(23, 33, 0), new ScheduledTask(42, 46, 0), new ScheduledTask(38, 46, 1), new ScheduledTask(19, 23, 0), new ScheduledTask(15, 17, 1), new ScheduledTask(17, 23, 1), new ScheduledTask(33, 37, 0), new ScheduledTask(49, 59, 0), new ScheduledTask(46, 56, 1), new ScheduledTask(23, 31, 1), new ScheduledTask(59, 66, 0), new ScheduledTask(37, 42, 0), new ScheduledTask(46, 49, 0), new ScheduledTask(61, 64, 1)};
        int[] expectedProcessorEndTimes = new int[]{66, 64};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(10, 16, 0), new ScheduledTask(2, 4, 1), new ScheduledTask(0, 10, 0), new ScheduledTask(4, 9, 1), new ScheduledTask(0, 2, 1), new ScheduledTask(0, 3, 2), new ScheduledTask(0, 6, 3), new ScheduledTask(25, 35, 0), new ScheduledTask(17, 21, 0), new ScheduledTask(38, 46, 1), new ScheduledTask(21, 25, 0), new ScheduledTask(15, 17, 1), new ScheduledTask(9, 15, 1), new ScheduledTask(37, 41, 0), new ScheduledTask(49, 59, 0), new ScheduledTask(46, 56, 1), new ScheduledTask(45, 53, 3), new ScheduledTask(59, 66, 0), new ScheduledTask(44, 49, 0), new ScheduledTask(41, 44, 0), new ScheduledTask(63, 66, 1)};
        int[] expectedProcessorEndTimes = new int[]{66, 66, 3, 53};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(10, 16, 0), new ScheduledTask(2, 4, 1), new ScheduledTask(0, 10, 0), new ScheduledTask(4, 9, 1), new ScheduledTask(0, 2, 1), new ScheduledTask(0, 3, 2), new ScheduledTask(0, 6, 3), new ScheduledTask(25, 35, 0), new ScheduledTask(17, 21, 0), new ScheduledTask(38, 46, 1), new ScheduledTask(21, 25, 0), new ScheduledTask(15, 17, 1), new ScheduledTask(9, 15, 1), new ScheduledTask(37, 41, 0), new ScheduledTask(49, 59, 0), new ScheduledTask(46, 56, 1), new ScheduledTask(45, 53, 4), new ScheduledTask(59, 66, 0), new ScheduledTask(44, 49, 0), new ScheduledTask(41, 44, 0), new ScheduledTask(63, 66, 1)};
        int[] expectedProcessorEndTimes = new int[]{66, 66, 3, 6, 53};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot00_WeightType_Random2_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.00_WeightType_Random#2_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 11100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(2500, 2509, 0), new ScheduledTask(900, 906, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(4400, 4409, 0), new ScheduledTask(0, 2, 2), new ScheduledTask(0, 9, 0), new ScheduledTask(5900, 5910, 0), new ScheduledTask(9400, 9408, 0), new ScheduledTask(5300, 5306, 0), new ScheduledTask(7800, 7805, 0), new ScheduledTask(7600, 7602, 0), new ScheduledTask(6900, 6907, 0), new ScheduledTask(1500, 1510, 0), new ScheduledTask(3400, 3410, 0), new ScheduledTask(8800, 8806, 0), new ScheduledTask(7200, 7206, 3), new ScheduledTask(8300, 8305, 0), new ScheduledTask(10700, 10703, 0), new ScheduledTask(10400, 10403, 0), new ScheduledTask(10200, 10202, 0), new ScheduledTask(9900, 9902, 2)};
        int[] expectedProcessorEndTimes = new int[]{10703, 8, 9902, 7206};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot00_WeightType_Random2_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.00_WeightType_Random#2_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(2600, 2609, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(900, 908, 0), new ScheduledTask(0, 9, 0), new ScheduledTask(2000, 2002, 2), new ScheduledTask(1700, 1709, 0), new ScheduledTask(0, 10, 2), new ScheduledTask(3500, 3508, 0), new ScheduledTask(6900, 6906, 0), new ScheduledTask(4400, 4405, 2), new ScheduledTask(4000, 4002, 2), new ScheduledTask(2400, 2407, 2), new ScheduledTask(4300, 4310, 0), new ScheduledTask(5300, 5310, 0), new ScheduledTask(6600, 6606, 2), new ScheduledTask(6300, 6306, 0), new ScheduledTask(7100, 7105, 3), new ScheduledTask(6000, 6003, 2), new ScheduledTask(7900, 7903, 0), new ScheduledTask(7700, 7702, 0), new ScheduledTask(7500, 7502, 0)};
        int[] expectedProcessorEndTimes = new int[]{7903, 6, 6606, 7105};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 75;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(15, 24, 0), new ScheduledTask(0, 6, 0), new ScheduledTask(30, 38, 0), new ScheduledTask(6, 15, 0), new ScheduledTask(10, 12, 1), new ScheduledTask(19, 28, 1), new ScheduledTask(0, 10, 1), new ScheduledTask(43, 51, 0), new ScheduledTask(24, 30, 0), new ScheduledTask(38, 43, 0), new ScheduledTask(58, 60, 0), new ScheduledTask(12, 19, 1), new ScheduledTask(34, 44, 1), new ScheduledTask(46, 56, 1), new ScheduledTask(66, 72, 0), new ScheduledTask(65, 71, 1), new ScheduledTask(60, 65, 1), new ScheduledTask(63, 66, 0), new ScheduledTask(60, 63, 0), new ScheduledTask(73, 75, 0), new ScheduledTask(71, 73, 1)};
        int[] expectedProcessorEndTimes = new int[]{75, 73};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(19, 27, 2), new ScheduledTask(0, 9, 3), new ScheduledTask(10, 12, 2), new ScheduledTask(6, 15, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(49, 57, 2), new ScheduledTask(60, 66, 2), new ScheduledTask(34, 39, 2), new ScheduledTask(32, 34, 2), new ScheduledTask(12, 19, 2), new ScheduledTask(15, 25, 1), new ScheduledTask(26, 36, 1), new ScheduledTask(39, 45, 2), new ScheduledTask(64, 70, 3), new ScheduledTask(56, 61, 3), new ScheduledTask(57, 60, 2), new ScheduledTask(68, 71, 2), new ScheduledTask(66, 68, 2), new ScheduledTask(71, 73, 2)};
        int[] expectedProcessorEndTimes = new int[]{9, 36, 73, 70};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(20, 28, 0), new ScheduledTask(11, 20, 0), new ScheduledTask(9, 11, 0), new ScheduledTask(6, 15, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(35, 43, 0), new ScheduledTask(60, 66, 0), new ScheduledTask(30, 35, 0), new ScheduledTask(28, 30, 0), new ScheduledTask(44, 51, 0), new ScheduledTask(15, 25, 1), new ScheduledTask(26, 36, 1), new ScheduledTask(54, 60, 0), new ScheduledTask(64, 70, 3), new ScheduledTask(68, 73, 4), new ScheduledTask(51, 54, 0), new ScheduledTask(68, 71, 0), new ScheduledTask(66, 68, 0), new ScheduledTask(71, 73, 0)};
        int[] expectedProcessorEndTimes = new int[]{73, 36, 10, 70, 73};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot00_WeightType_Random3_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.00_WeightType_Random#3_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1600, 1609, 0), new ScheduledTask(1400, 1402, 0), new ScheduledTask(800, 806, 0), new ScheduledTask(0, 8, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(1200, 1205, 1), new ScheduledTask(0, 2, 2), new ScheduledTask(6800, 6804, 0), new ScheduledTask(3000, 3009, 0), new ScheduledTask(2500, 2505, 0), new ScheduledTask(5700, 5709, 0), new ScheduledTask(5100, 5106, 0), new ScheduledTask(4000, 4004, 0), new ScheduledTask(2900, 2904, 2), new ScheduledTask(8200, 8210, 0), new ScheduledTask(7500, 7507, 0), new ScheduledTask(4400, 4407, 0), new ScheduledTask(9200, 9206, 0), new ScheduledTask(7200, 7203, 0), new ScheduledTask(7900, 7903, 3), new ScheduledTask(6600, 6602, 0)};
        int[] expectedProcessorEndTimes = new int[]{9206, 1205, 2904, 7903};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot00_WeightType_Random3_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.00_WeightType_Random#3_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 7000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1800, 1809, 0), new ScheduledTask(1000, 1002, 0), new ScheduledTask(400, 406, 1), new ScheduledTask(200, 208, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(0, 5, 2), new ScheduledTask(0, 2, 1), new ScheduledTask(5300, 5304, 0), new ScheduledTask(1600, 1609, 1), new ScheduledTask(2700, 2705, 0), new ScheduledTask(4200, 4209, 0), new ScheduledTask(1200, 1206, 0), new ScheduledTask(3400, 3404, 1), new ScheduledTask(3200, 3204, 0), new ScheduledTask(6000, 6010, 0), new ScheduledTask(5600, 5607, 1), new ScheduledTask(4200, 4207, 1), new ScheduledTask(3600, 3606, 0), new ScheduledTask(5700, 5703, 0), new ScheduledTask(5900, 5903, 3), new ScheduledTask(5100, 5102, 0)};
        int[] expectedProcessorEndTimes = new int[]{6010, 5607, 5, 5903};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot00_WeightType_Random3_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.00_WeightType_Random#3_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 6600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1800, 1809, 0), new ScheduledTask(1000, 1002, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(200, 208, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(0, 5, 3), new ScheduledTask(0, 2, 2), new ScheduledTask(4300, 4304, 0), new ScheduledTask(3680, 3689, 1), new ScheduledTask(3600, 3605, 0), new ScheduledTask(2700, 2709, 0), new ScheduledTask(1200, 1206, 0), new ScheduledTask(3200, 3204, 1), new ScheduledTask(2100, 2104, 2), new ScheduledTask(5000, 5010, 0), new ScheduledTask(5600, 5607, 1), new ScheduledTask(4760, 4767, 1), new ScheduledTask(6000, 6006, 0), new ScheduledTask(4700, 4703, 0), new ScheduledTask(5380, 5383, 3), new ScheduledTask(4100, 4102, 0)};
        int[] expectedProcessorEndTimes = new int[]{6006, 5607, 2104, 5383};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.00_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(10, 19, 0), new ScheduledTask(8, 10, 0), new ScheduledTask(23, 29, 1), new ScheduledTask(0, 8, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(4, 9, 1), new ScheduledTask(2, 4, 1), new ScheduledTask(43, 47, 0), new ScheduledTask(34, 43, 1), new ScheduledTask(29, 34, 0), new ScheduledTask(20, 29, 0), new ScheduledTask(35, 41, 0), new ScheduledTask(30, 34, 1), new ScheduledTask(19, 23, 1), new ScheduledTask(50, 60, 0), new ScheduledTask(50, 57, 1), new ScheduledTask(43, 50, 1), new ScheduledTask(60, 66, 0), new ScheduledTask(47, 50, 0), new ScheduledTask(63, 66, 1), new ScheduledTask(41, 43, 0)};
        int[] expectedProcessorEndTimes = new int[]{66, 66};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot00_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.00_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(10, 19, 0), new ScheduledTask(8, 10, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(0, 8, 0), new ScheduledTask(0, 2, 2), new ScheduledTask(2, 7, 3), new ScheduledTask(0, 2, 3), new ScheduledTask(43, 47, 0), new ScheduledTask(34, 43, 1), new ScheduledTask(28, 33, 0), new ScheduledTask(19, 28, 0), new ScheduledTask(35, 41, 0), new ScheduledTask(30, 34, 1), new ScheduledTask(19, 23, 3), new ScheduledTask(50, 60, 0), new ScheduledTask(50, 57, 1), new ScheduledTask(43, 50, 1), new ScheduledTask(60, 66, 0), new ScheduledTask(47, 50, 0), new ScheduledTask(63, 66, 3), new ScheduledTask(41, 43, 0)};
        int[] expectedProcessorEndTimes = new int[]{66, 57, 2, 66};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot00_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.00_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(18, 27, 0), new ScheduledTask(10, 12, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(2, 10, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(0, 5, 2), new ScheduledTask(0, 2, 3), new ScheduledTask(43, 47, 0), new ScheduledTask(36, 45, 1), new ScheduledTask(36, 41, 0), new ScheduledTask(27, 36, 0), new ScheduledTask(12, 18, 0), new ScheduledTask(32, 36, 1), new ScheduledTask(21, 25, 3), new ScheduledTask(50, 60, 0), new ScheduledTask(52, 59, 1), new ScheduledTask(45, 52, 1), new ScheduledTask(60, 66, 0), new ScheduledTask(47, 50, 0), new ScheduledTask(53, 56, 4), new ScheduledTask(41, 43, 0)};
        int[] expectedProcessorEndTimes = new int[]{66, 59, 5, 25, 56};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot00_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.00_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1500, 1509, 0), new ScheduledTask(1000, 1005, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(0, 3, 2), new ScheduledTask(500, 505, 0), new ScheduledTask(4400, 4408, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(6100, 6107, 0), new ScheduledTask(2400, 2403, 0), new ScheduledTask(2700, 2705, 0), new ScheduledTask(7700, 7710, 0), new ScheduledTask(3000, 3005, 1), new ScheduledTask(5200, 5209, 0), new ScheduledTask(3200, 3205, 0), new ScheduledTask(4500, 4510, 3), new ScheduledTask(6800, 6809, 0), new ScheduledTask(9300, 9308, 0), new ScheduledTask(3700, 3707, 0), new ScheduledTask(10100, 10106, 0), new ScheduledTask(8700, 8706, 0), new ScheduledTask(8600, 8603, 2)};
        int[] expectedProcessorEndTimes = new int[]{10106, 3005, 8603, 4510};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot00_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.00_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 8700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1000, 1009, 1), new ScheduledTask(500, 505, 0), new ScheduledTask(2800, 2803, 0), new ScheduledTask(1800, 1803, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(1000, 1008, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(2100, 2107, 0), new ScheduledTask(2800, 2803, 1), new ScheduledTask(4600, 4605, 1), new ScheduledTask(3600, 3610, 0), new ScheduledTask(3100, 3105, 0), new ScheduledTask(5200, 5209, 0), new ScheduledTask(3400, 3405, 1), new ScheduledTask(6800, 6810, 0), new ScheduledTask(7800, 7809, 0), new ScheduledTask(7000, 7008, 2), new ScheduledTask(5600, 5607, 1), new ScheduledTask(4600, 4606, 0), new ScheduledTask(6100, 6106, 0), new ScheduledTask(7900, 7903, 1)};
        int[] expectedProcessorEndTimes = new int[]{7809, 7903, 7008};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot00_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.00_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 7400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1200, 1209, 1), new ScheduledTask(0, 5, 0), new ScheduledTask(2300, 2303, 0), new ScheduledTask(1300, 1303, 0), new ScheduledTask(600, 605, 1), new ScheduledTask(500, 508, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(1600, 1607, 0), new ScheduledTask(2280, 2283, 1), new ScheduledTask(3500, 3505, 1), new ScheduledTask(2600, 2610, 0), new ScheduledTask(4500, 4505, 0), new ScheduledTask(3600, 3609, 0), new ScheduledTask(2900, 2905, 1), new ScheduledTask(5300, 5310, 3), new ScheduledTask(6500, 6509, 0), new ScheduledTask(6200, 6208, 2), new ScheduledTask(4100, 4107, 1), new ScheduledTask(5600, 5606, 0), new ScheduledTask(5000, 5006, 0), new ScheduledTask(6300, 6303, 1)};
        int[] expectedProcessorEndTimes = new int[]{6509, 6303, 6208, 5310};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(10, 19, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(23, 26, 1), new ScheduledTask(13, 16, 1), new ScheduledTask(5, 10, 0), new ScheduledTask(5, 13, 1), new ScheduledTask(0, 5, 0), new ScheduledTask(16, 23, 1), new ScheduledTask(39, 42, 0), new ScheduledTask(34, 39, 0), new ScheduledTask(26, 36, 1), new ScheduledTask(45, 50, 1), new ScheduledTask(36, 45, 1), new ScheduledTask(29, 34, 0), new ScheduledTask(49, 59, 0), new ScheduledTask(64, 73, 1), new ScheduledTask(62, 70, 0), new ScheduledTask(42, 49, 0), new ScheduledTask(56, 62, 1), new ScheduledTask(50, 56, 1), new ScheduledTask(70, 73, 0)};
        int[] expectedProcessorEndTimes = new int[]{73, 73};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(5, 14, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(23, 26, 1), new ScheduledTask(13, 16, 1), new ScheduledTask(0, 5, 2), new ScheduledTask(5, 13, 1), new ScheduledTask(0, 5, 0), new ScheduledTask(16, 23, 1), new ScheduledTask(34, 37, 0), new ScheduledTask(46, 51, 0), new ScheduledTask(26, 36, 1), new ScheduledTask(45, 50, 1), new ScheduledTask(36, 45, 1), new ScheduledTask(29, 34, 0), new ScheduledTask(63, 73, 3), new ScheduledTask(64, 73, 1), new ScheduledTask(62, 70, 2), new ScheduledTask(66, 73, 0), new ScheduledTask(56, 62, 1), new ScheduledTask(50, 56, 1), new ScheduledTask(63, 66, 0)};
        int[] expectedProcessorEndTimes = new int[]{73, 73, 70, 73};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(5, 14, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(23, 26, 1), new ScheduledTask(13, 16, 1), new ScheduledTask(0, 5, 2), new ScheduledTask(5, 13, 1), new ScheduledTask(0, 5, 0), new ScheduledTask(16, 23, 1), new ScheduledTask(34, 37, 0), new ScheduledTask(46, 51, 0), new ScheduledTask(26, 36, 1), new ScheduledTask(45, 50, 1), new ScheduledTask(36, 45, 1), new ScheduledTask(29, 34, 0), new ScheduledTask(63, 73, 3), new ScheduledTask(64, 73, 1), new ScheduledTask(62, 70, 4), new ScheduledTask(66, 73, 0), new ScheduledTask(56, 62, 1), new ScheduledTask(50, 56, 1), new ScheduledTask(63, 66, 0)};
        int[] expectedProcessorEndTimes = new int[]{73, 73, 5, 73, 70};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot01_WeightType_Random1_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.01_WeightType_Random#1_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(3800, 3802, 0), new ScheduledTask(1900, 1906, 0), new ScheduledTask(1500, 1504, 0), new ScheduledTask(5200, 5209, 0), new ScheduledTask(200, 204, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(0, 2, 0), new ScheduledTask(9400, 9404, 0), new ScheduledTask(4000, 4003, 0), new ScheduledTask(7300, 7307, 0), new ScheduledTask(2900, 2909, 0), new ScheduledTask(600, 609, 0), new ScheduledTask(6400, 6409, 0), new ScheduledTask(2500, 2504, 0), new ScheduledTask(8400, 8410, 0), new ScheduledTask(4300, 4309, 0), new ScheduledTask(6100, 6108, 2), new ScheduledTask(6400, 6407, 3), new ScheduledTask(10300, 10306, 0), new ScheduledTask(9800, 9805, 0), new ScheduledTask(8000, 8004, 0)};
        int[] expectedProcessorEndTimes = new int[]{10306, 3, 6108, 6407};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot01_WeightType_Random1_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.01_WeightType_Random#1_Heterogeneous-4-2.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 8400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(2200, 2202, 0), new ScheduledTask(0, 6, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(900, 909, 0), new ScheduledTask(400, 404, 2), new ScheduledTask(600, 603, 0), new ScheduledTask(0, 2, 2), new ScheduledTask(1800, 1804, 0), new ScheduledTask(3900, 3903, 0), new ScheduledTask(4800, 4807, 0), new ScheduledTask(2700, 2709, 1), new ScheduledTask(1200, 1209, 2), new ScheduledTask(2400, 2409, 0), new ScheduledTask(4600, 4604, 2), new ScheduledTask(6400, 6410, 0), new ScheduledTask(6600, 6609, 1), new ScheduledTask(6800, 6808, 2), new ScheduledTask(5400, 5407, 2), new ScheduledTask(3300, 3306, 0), new ScheduledTask(5900, 5905, 0), new ScheduledTask(5500, 5504, 0)};
        int[] expectedProcessorEndTimes = new int[]{6410, 6609, 6808};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot01_WeightType_Random1_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.01_WeightType_Random#1_Heterogeneous-4-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 7480;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(2200, 2202, 0), new ScheduledTask(0, 6, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(900, 909, 0), new ScheduledTask(300, 304, 2), new ScheduledTask(600, 603, 0), new ScheduledTask(0, 2, 2), new ScheduledTask(1800, 1804, 0), new ScheduledTask(3900, 3903, 0), new ScheduledTask(4480, 4487, 0), new ScheduledTask(2600, 2609, 1), new ScheduledTask(900, 909, 2), new ScheduledTask(2400, 2409, 0), new ScheduledTask(4600, 4604, 2), new ScheduledTask(6080, 6090, 0), new ScheduledTask(6400, 6409, 1), new ScheduledTask(6250, 6258, 2), new ScheduledTask(5200, 5207, 2), new ScheduledTask(3300, 3306, 0), new ScheduledTask(5580, 5585, 0), new ScheduledTask(5180, 5184, 0)};
        int[] expectedProcessorEndTimes = new int[]{6090, 6409, 6258};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 74;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(22, 24, 0), new ScheduledTask(0, 6, 0), new ScheduledTask(2, 6, 1), new ScheduledTask(9, 18, 0), new ScheduledTask(27, 31, 1), new ScheduledTask(6, 9, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(18, 22, 0), new ScheduledTask(39, 42, 0), new ScheduledTask(46, 53, 0), new ScheduledTask(18, 27, 1), new ScheduledTask(31, 40, 1), new ScheduledTask(24, 33, 0), new ScheduledTask(46, 50, 1), new ScheduledTask(62, 72, 0), new ScheduledTask(57, 66, 1), new ScheduledTask(66, 74, 1), new ScheduledTask(50, 57, 1), new ScheduledTask(33, 39, 0), new ScheduledTask(57, 62, 0), new ScheduledTask(53, 57, 0)};
        int[] expectedProcessorEndTimes = new int[]{72, 74};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(22, 24, 0), new ScheduledTask(0, 6, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(9, 18, 0), new ScheduledTask(6, 10, 1), new ScheduledTask(6, 9, 0), new ScheduledTask(4, 6, 1), new ScheduledTask(18, 22, 0), new ScheduledTask(33, 36, 0), new ScheduledTask(44, 51, 0), new ScheduledTask(19, 28, 1), new ScheduledTask(10, 19, 1), new ScheduledTask(24, 33, 0), new ScheduledTask(46, 50, 2), new ScheduledTask(60, 70, 0), new ScheduledTask(62, 71, 1), new ScheduledTask(53, 61, 2), new ScheduledTask(61, 68, 2), new ScheduledTask(36, 42, 0), new ScheduledTask(55, 60, 0), new ScheduledTask(51, 55, 0)};
        int[] expectedProcessorEndTimes = new int[]{70, 71, 68};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(22, 24, 0), new ScheduledTask(0, 6, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(9, 18, 0), new ScheduledTask(6, 10, 1), new ScheduledTask(6, 9, 0), new ScheduledTask(4, 6, 1), new ScheduledTask(18, 22, 0), new ScheduledTask(33, 36, 0), new ScheduledTask(44, 51, 0), new ScheduledTask(19, 28, 1), new ScheduledTask(10, 19, 1), new ScheduledTask(24, 33, 0), new ScheduledTask(46, 50, 2), new ScheduledTask(60, 70, 0), new ScheduledTask(62, 71, 1), new ScheduledTask(53, 61, 2), new ScheduledTask(61, 68, 2), new ScheduledTask(36, 42, 0), new ScheduledTask(55, 60, 0), new ScheduledTask(51, 55, 0)};
        int[] expectedProcessorEndTimes = new int[]{70, 71, 68};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot01_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.01_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 9800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(4500, 4510, 0), new ScheduledTask(3600, 3609, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(0, 4, 0), new ScheduledTask(400, 409, 0), new ScheduledTask(2400, 2410, 0), new ScheduledTask(1900, 1905, 0), new ScheduledTask(6400, 6404, 0), new ScheduledTask(6000, 6004, 0), new ScheduledTask(1300, 1306, 0), new ScheduledTask(5800, 5802, 0), new ScheduledTask(5500, 5503, 0), new ScheduledTask(4200, 4203, 1), new ScheduledTask(3400, 3402, 0), new ScheduledTask(8100, 8109, 0), new ScheduledTask(7400, 7407, 0), new ScheduledTask(9000, 9007, 0), new ScheduledTask(6000, 6006, 1), new ScheduledTask(7100, 7103, 0), new ScheduledTask(6800, 6803, 0), new ScheduledTask(8000, 8003, 2)};
        int[] expectedProcessorEndTimes = new int[]{9007, 6006, 8003};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot01_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.01_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 7800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1800, 1810, 0), new ScheduledTask(900, 909, 0), new ScheduledTask(800, 807, 1), new ScheduledTask(0, 4, 1), new ScheduledTask(0, 9, 0), new ScheduledTask(0, 10, 2), new ScheduledTask(2000, 2005, 2), new ScheduledTask(3900, 3904, 0), new ScheduledTask(4300, 4304, 0), new ScheduledTask(4000, 4006, 1), new ScheduledTask(5000, 5002, 0), new ScheduledTask(3200, 3203, 0), new ScheduledTask(2900, 2903, 1), new ScheduledTask(3000, 3002, 2), new ScheduledTask(6900, 6909, 0), new ScheduledTask(5500, 5507, 0), new ScheduledTask(6200, 6207, 0), new ScheduledTask(5900, 5906, 1), new ScheduledTask(5200, 5203, 0), new ScheduledTask(4700, 4703, 0), new ScheduledTask(5300, 5303, 1)};
        int[] expectedProcessorEndTimes = new int[]{6909, 5906, 3002};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot01_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.01_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 6900;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1700, 1710, 0), new ScheduledTask(2900, 2909, 0), new ScheduledTask(1950, 1957, 2), new ScheduledTask(0, 4, 2), new ScheduledTask(600, 609, 2), new ScheduledTask(500, 510, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(4800, 4804, 0), new ScheduledTask(3800, 3804, 0), new ScheduledTask(3450, 3456, 2), new ScheduledTask(2700, 2702, 0), new ScheduledTask(4500, 4503, 0), new ScheduledTask(3000, 3003, 2), new ScheduledTask(1500, 1502, 0), new ScheduledTask(5500, 5509, 1), new ScheduledTask(5500, 5507, 0), new ScheduledTask(6200, 6207, 0), new ScheduledTask(4350, 4356, 2), new ScheduledTask(4200, 4203, 0), new ScheduledTask(5200, 5203, 0), new ScheduledTask(6200, 6203, 2)};
        int[] expectedProcessorEndTimes = new int[]{6207, 5509, 6203};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(17, 27, 0), new ScheduledTask(29, 38, 0), new ScheduledTask(19, 26, 1), new ScheduledTask(9, 13, 1), new ScheduledTask(0, 9, 1), new ScheduledTask(5, 15, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(48, 52, 0), new ScheduledTask(41, 45, 0), new ScheduledTask(13, 19, 1), new ScheduledTask(27, 29, 0), new ScheduledTask(38, 41, 0), new ScheduledTask(26, 29, 1), new ScheduledTask(15, 17, 0), new ScheduledTask(55, 64, 1), new ScheduledTask(62, 69, 0), new ScheduledTask(55, 62, 0), new ScheduledTask(29, 35, 1), new ScheduledTask(45, 48, 0), new ScheduledTask(52, 55, 0), new ScheduledTask(64, 67, 1)};
        int[] expectedProcessorEndTimes = new int[]{69, 67};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(9, 19, 0), new ScheduledTask(0, 9, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(7, 11, 1), new ScheduledTask(0, 9, 2), new ScheduledTask(0, 10, 3), new ScheduledTask(10, 15, 3), new ScheduledTask(42, 46, 3), new ScheduledTask(30, 34, 0), new ScheduledTask(40, 46, 1), new ScheduledTask(35, 37, 0), new ScheduledTask(19, 22, 0), new ScheduledTask(29, 32, 1), new ScheduledTask(15, 17, 3), new ScheduledTask(47, 56, 0), new ScheduledTask(40, 47, 0), new ScheduledTask(58, 65, 3), new ScheduledTask(59, 65, 1), new ScheduledTask(37, 40, 0), new ScheduledTask(65, 68, 3), new ScheduledTask(56, 59, 1)};
        int[] expectedProcessorEndTimes = new int[]{56, 65, 9, 68};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(9, 19, 0), new ScheduledTask(0, 9, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(7, 11, 1), new ScheduledTask(0, 9, 2), new ScheduledTask(0, 10, 3), new ScheduledTask(10, 15, 3), new ScheduledTask(42, 46, 4), new ScheduledTask(30, 34, 0), new ScheduledTask(40, 46, 1), new ScheduledTask(35, 37, 0), new ScheduledTask(19, 22, 0), new ScheduledTask(29, 32, 1), new ScheduledTask(15, 17, 3), new ScheduledTask(47, 56, 0), new ScheduledTask(40, 47, 0), new ScheduledTask(58, 65, 4), new ScheduledTask(59, 65, 1), new ScheduledTask(37, 40, 0), new ScheduledTask(65, 68, 4), new ScheduledTask(56, 59, 1)};
        int[] expectedProcessorEndTimes = new int[]{56, 65, 9, 17, 68};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot02_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.02_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(3800, 3806, 0), new ScheduledTask(1000, 1008, 0), new ScheduledTask(700, 703, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(0, 2, 2), new ScheduledTask(400, 403, 0), new ScheduledTask(0, 4, 0), new ScheduledTask(5400, 5410, 0), new ScheduledTask(6400, 6403, 0), new ScheduledTask(1800, 1803, 0), new ScheduledTask(4400, 4402, 0), new ScheduledTask(3000, 3008, 0), new ScheduledTask(3200, 3204, 2), new ScheduledTask(2100, 2109, 0), new ScheduledTask(4600, 4608, 0), new ScheduledTask(8800, 8808, 0), new ScheduledTask(7400, 7408, 0), new ScheduledTask(5200, 5207, 3), new ScheduledTask(6700, 6707, 0), new ScheduledTask(8200, 8206, 0), new ScheduledTask(6400, 6404, 2)};
        int[] expectedProcessorEndTimes = new int[]{8808, 3, 6404, 5207};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot02_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.02_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(500, 506, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(2700, 2703, 0), new ScheduledTask(200, 203, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(2100, 2103, 0), new ScheduledTask(1600, 1604, 1), new ScheduledTask(1100, 1110, 0), new ScheduledTask(2400, 2403, 0), new ScheduledTask(5900, 5903, 0), new ScheduledTask(3000, 3002, 0), new ScheduledTask(4000, 4008, 0), new ScheduledTask(3600, 3604, 2), new ScheduledTask(2400, 2409, 1), new ScheduledTask(7300, 7308, 0), new ScheduledTask(4800, 4808, 0), new ScheduledTask(6400, 6408, 3), new ScheduledTask(6600, 6607, 0), new ScheduledTask(6400, 6407, 2), new ScheduledTask(6900, 6906, 1), new ScheduledTask(6200, 6204, 0)};
        int[] expectedProcessorEndTimes = new int[]{7308, 6906, 6407, 6408};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot02_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.02_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 6760;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(600, 606, 0), new ScheduledTask(840, 848, 1), new ScheduledTask(480, 483, 1), new ScheduledTask(300, 303, 0), new ScheduledTask(2040, 2042, 0), new ScheduledTask(0, 3, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(2640, 2650, 0), new ScheduledTask(1200, 1203, 0), new ScheduledTask(1800, 1803, 1), new ScheduledTask(1840, 1842, 0), new ScheduledTask(3240, 3248, 1), new ScheduledTask(2240, 2244, 0), new ScheduledTask(2160, 2169, 1), new ScheduledTask(5740, 5748, 0), new ScheduledTask(5800, 5808, 1), new ScheduledTask(4940, 4948, 0), new ScheduledTask(5600, 5607, 2), new ScheduledTask(4240, 4247, 0), new ScheduledTask(3640, 3646, 0), new ScheduledTask(4200, 4204, 1)};
        int[] expectedProcessorEndTimes = new int[]{5748, 5808, 5607};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(6, 12, 0), new ScheduledTask(7, 15, 1), new ScheduledTask(4, 7, 1), new ScheduledTask(3, 6, 0), new ScheduledTask(19, 21, 0), new ScheduledTask(0, 3, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(25, 35, 0), new ScheduledTask(12, 15, 0), new ScheduledTask(15, 18, 1), new ScheduledTask(17, 19, 0), new ScheduledTask(32, 40, 1), new ScheduledTask(21, 25, 0), new ScheduledTask(18, 27, 1), new ScheduledTask(56, 64, 0), new ScheduledTask(58, 66, 1), new ScheduledTask(48, 56, 0), new ScheduledTask(40, 47, 1), new ScheduledTask(41, 48, 0), new ScheduledTask(35, 41, 0), new ScheduledTask(27, 31, 1)};
        int[] expectedProcessorEndTimes = new int[]{64, 66};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(6, 12, 0), new ScheduledTask(9, 17, 1), new ScheduledTask(2, 5, 1), new ScheduledTask(3, 6, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(0, 3, 0), new ScheduledTask(5, 9, 1), new ScheduledTask(31, 41, 0), new ScheduledTask(12, 15, 0), new ScheduledTask(17, 20, 1), new ScheduledTask(15, 17, 0), new ScheduledTask(33, 41, 1), new ScheduledTask(29, 33, 1), new ScheduledTask(20, 29, 1), new ScheduledTask(55, 63, 2), new ScheduledTask(58, 66, 1), new ScheduledTask(48, 56, 0), new ScheduledTask(55, 62, 3), new ScheduledTask(41, 48, 0), new ScheduledTask(57, 63, 0), new ScheduledTask(41, 45, 1)};
        int[] expectedProcessorEndTimes = new int[]{63, 66, 63, 62};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(6, 12, 0), new ScheduledTask(7, 15, 1), new ScheduledTask(4, 7, 1), new ScheduledTask(3, 6, 0), new ScheduledTask(0, 2, 2), new ScheduledTask(0, 3, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(31, 41, 0), new ScheduledTask(12, 15, 0), new ScheduledTask(15, 18, 1), new ScheduledTask(17, 19, 0), new ScheduledTask(32, 40, 1), new ScheduledTask(20, 24, 2), new ScheduledTask(18, 27, 1), new ScheduledTask(57, 65, 3), new ScheduledTask(58, 66, 1), new ScheduledTask(54, 62, 0), new ScheduledTask(54, 61, 4), new ScheduledTask(41, 48, 0), new ScheduledTask(48, 54, 0), new ScheduledTask(61, 65, 5)};
        int[] expectedProcessorEndTimes = new int[]{62, 66, 24, 65, 61, 65};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot03_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.03_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 134;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(22, 31, 0), new ScheduledTask(4, 12, 0), new ScheduledTask(0, 4, 0), new ScheduledTask(38, 46, 0), new ScheduledTask(12, 22, 0), new ScheduledTask(31, 38, 0), new ScheduledTask(64, 71, 0), new ScheduledTask(51, 59, 0), new ScheduledTask(46, 51, 0), new ScheduledTask(83, 88, 0), new ScheduledTask(59, 64, 0), new ScheduledTask(71, 74, 0), new ScheduledTask(91, 96, 0), new ScheduledTask(74, 83, 0), new ScheduledTask(88, 91, 0), new ScheduledTask(101, 106, 0), new ScheduledTask(96, 101, 0), new ScheduledTask(106, 113, 0), new ScheduledTask(124, 134, 1), new ScheduledTask(121, 131, 0), new ScheduledTask(113, 121, 0)};
        int[] expectedProcessorEndTimes = new int[]{131, 134};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot03_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.03_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 134;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(22, 31, 0), new ScheduledTask(4, 12, 0), new ScheduledTask(0, 4, 0), new ScheduledTask(38, 46, 0), new ScheduledTask(12, 22, 0), new ScheduledTask(31, 38, 0), new ScheduledTask(64, 71, 0), new ScheduledTask(51, 59, 0), new ScheduledTask(46, 51, 0), new ScheduledTask(83, 88, 0), new ScheduledTask(59, 64, 0), new ScheduledTask(71, 74, 0), new ScheduledTask(91, 96, 0), new ScheduledTask(74, 83, 0), new ScheduledTask(88, 91, 0), new ScheduledTask(101, 106, 0), new ScheduledTask(96, 101, 0), new ScheduledTask(106, 113, 0), new ScheduledTask(124, 134, 1), new ScheduledTask(121, 131, 0), new ScheduledTask(113, 121, 0)};
        int[] expectedProcessorEndTimes = new int[]{131, 134};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot03_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.03_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 134;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(22, 31, 0), new ScheduledTask(4, 12, 0), new ScheduledTask(0, 4, 0), new ScheduledTask(38, 46, 0), new ScheduledTask(12, 22, 0), new ScheduledTask(31, 38, 0), new ScheduledTask(64, 71, 0), new ScheduledTask(51, 59, 0), new ScheduledTask(46, 51, 0), new ScheduledTask(83, 88, 0), new ScheduledTask(59, 64, 0), new ScheduledTask(71, 74, 0), new ScheduledTask(91, 96, 0), new ScheduledTask(74, 83, 0), new ScheduledTask(88, 91, 0), new ScheduledTask(101, 106, 0), new ScheduledTask(96, 101, 0), new ScheduledTask(106, 113, 0), new ScheduledTask(124, 134, 1), new ScheduledTask(121, 131, 0), new ScheduledTask(113, 121, 0)};
        int[] expectedProcessorEndTimes = new int[]{131, 134};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot03_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.03_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 134;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(22, 31, 0), new ScheduledTask(4, 12, 0), new ScheduledTask(0, 4, 0), new ScheduledTask(38, 46, 0), new ScheduledTask(12, 22, 0), new ScheduledTask(31, 38, 0), new ScheduledTask(64, 71, 0), new ScheduledTask(51, 59, 0), new ScheduledTask(46, 51, 0), new ScheduledTask(83, 88, 0), new ScheduledTask(59, 64, 0), new ScheduledTask(71, 74, 0), new ScheduledTask(91, 96, 0), new ScheduledTask(74, 83, 0), new ScheduledTask(88, 91, 0), new ScheduledTask(101, 106, 0), new ScheduledTask(96, 101, 0), new ScheduledTask(106, 113, 0), new ScheduledTask(124, 134, 1), new ScheduledTask(121, 131, 0), new ScheduledTask(113, 121, 0)};
        int[] expectedProcessorEndTimes = new int[]{131, 134};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot06_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.06_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 10700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1400, 1409, 0), new ScheduledTask(700, 707, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(2300, 2309, 0), new ScheduledTask(0, 3, 2), new ScheduledTask(4600, 4610, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(6200, 6207, 0), new ScheduledTask(3600, 3610, 0), new ScheduledTask(8300, 8304, 0), new ScheduledTask(5600, 5606, 0), new ScheduledTask(3200, 3204, 0), new ScheduledTask(7400, 7402, 0), new ScheduledTask(4000, 4003, 3), new ScheduledTask(5900, 5908, 3), new ScheduledTask(9600, 9608, 0), new ScheduledTask(7600, 7607, 0), new ScheduledTask(9000, 9006, 0), new ScheduledTask(6900, 6905, 0), new ScheduledTask(10400, 10403, 0), new ScheduledTask(8700, 8703, 0)};
        int[] expectedProcessorEndTimes = new int[]{10403, 5, 3, 5908};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot06_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.06_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(700, 709, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(600, 605, 1), new ScheduledTask(1600, 1609, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 7, 3), new ScheduledTask(4700, 4707, 0), new ScheduledTask(2500, 2510, 0), new ScheduledTask(5900, 5904, 0), new ScheduledTask(4100, 4106, 0), new ScheduledTask(3700, 3704, 0), new ScheduledTask(1600, 1602, 1), new ScheduledTask(3300, 3303, 3), new ScheduledTask(6400, 6408, 3), new ScheduledTask(7200, 7208, 0), new ScheduledTask(6000, 6007, 2), new ScheduledTask(6600, 6606, 0), new ScheduledTask(5400, 5405, 0), new ScheduledTask(8000, 8003, 0), new ScheduledTask(6300, 6303, 0)};
        int[] expectedProcessorEndTimes = new int[]{8003, 1602, 6007, 6408};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot06_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.06_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 7800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1600, 1609, 0), new ScheduledTask(900, 907, 0), new ScheduledTask(360, 365, 1), new ScheduledTask(0, 9, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(960, 970, 1), new ScheduledTask(0, 7, 2), new ScheduledTask(4500, 4507, 0), new ScheduledTask(2500, 2510, 0), new ScheduledTask(5700, 5704, 0), new ScheduledTask(2160, 2166, 1), new ScheduledTask(3500, 3504, 0), new ScheduledTask(2880, 2882, 1), new ScheduledTask(3900, 3903, 0), new ScheduledTask(6200, 6208, 3), new ScheduledTask(7000, 7008, 0), new ScheduledTask(3120, 3127, 1), new ScheduledTask(6400, 6406, 0), new ScheduledTask(5200, 5205, 0), new ScheduledTask(4200, 4203, 0), new ScheduledTask(6100, 6103, 0)};
        int[] expectedProcessorEndTimes = new int[]{7008, 3127, 7, 6208};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot06_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.06_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 79;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(7, 16, 0), new ScheduledTask(29, 36, 0), new ScheduledTask(10, 15, 1), new ScheduledTask(16, 25, 0), new ScheduledTask(15, 18, 1), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 7, 0), new ScheduledTask(46, 53, 0), new ScheduledTask(36, 46, 0), new ScheduledTask(55, 59, 0), new ScheduledTask(20, 26, 1), new ScheduledTask(25, 29, 0), new ScheduledTask(18, 20, 1), new ScheduledTask(33, 36, 1), new ScheduledTask(52, 60, 1), new ScheduledTask(68, 76, 0), new ScheduledTask(26, 33, 1), new ScheduledTask(62, 68, 0), new ScheduledTask(74, 79, 1), new ScheduledTask(76, 79, 0), new ScheduledTask(59, 62, 0)};
        int[] expectedProcessorEndTimes = new int[]{79, 79};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot06_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.06_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 75;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(18, 25, 0), new ScheduledTask(3, 8, 1), new ScheduledTask(9, 18, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(8, 18, 1), new ScheduledTask(0, 7, 2), new ScheduledTask(39, 46, 0), new ScheduledTask(25, 35, 0), new ScheduledTask(51, 55, 0), new ScheduledTask(18, 24, 1), new ScheduledTask(35, 39, 0), new ScheduledTask(24, 26, 1), new ScheduledTask(26, 29, 2), new ScheduledTask(62, 70, 3), new ScheduledTask(64, 72, 0), new ScheduledTask(66, 73, 2), new ScheduledTask(58, 64, 0), new ScheduledTask(46, 51, 0), new ScheduledTask(72, 75, 0), new ScheduledTask(55, 58, 0)};
        int[] expectedProcessorEndTimes = new int[]{75, 26, 73, 70};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_10dot06_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_10.06_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 75;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(18, 25, 0), new ScheduledTask(3, 8, 1), new ScheduledTask(9, 18, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(8, 18, 1), new ScheduledTask(0, 7, 2), new ScheduledTask(39, 46, 0), new ScheduledTask(25, 35, 0), new ScheduledTask(51, 55, 0), new ScheduledTask(18, 24, 1), new ScheduledTask(35, 39, 0), new ScheduledTask(24, 26, 1), new ScheduledTask(26, 29, 2), new ScheduledTask(62, 70, 3), new ScheduledTask(64, 72, 0), new ScheduledTask(66, 73, 4), new ScheduledTask(58, 64, 0), new ScheduledTask(46, 51, 0), new ScheduledTask(72, 75, 0), new ScheduledTask(55, 58, 0)};
        int[] expectedProcessorEndTimes = new int[]{75, 26, 29, 70, 73};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_9dot98_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_9.98_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 9000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(3000, 3007, 0), new ScheduledTask(2000, 2004, 0), new ScheduledTask(1400, 1406, 0), new ScheduledTask(700, 707, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(0, 7, 0), new ScheduledTask(0, 4, 2), new ScheduledTask(4300, 4305, 0), new ScheduledTask(3900, 3904, 0), new ScheduledTask(7200, 7203, 0), new ScheduledTask(2400, 2406, 0), new ScheduledTask(3700, 3702, 0), new ScheduledTask(3600, 3602, 1), new ScheduledTask(4800, 4802, 0), new ScheduledTask(6400, 6407, 0), new ScheduledTask(5700, 5707, 0), new ScheduledTask(5000, 5007, 0), new ScheduledTask(7500, 7506, 0), new ScheduledTask(8400, 8406, 0), new ScheduledTask(5900, 5905, 3), new ScheduledTask(8100, 8103, 0)};
        int[] expectedProcessorEndTimes = new int[]{8406, 3602, 4, 5905};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_9dot98_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_9.98_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 7300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(2100, 2107, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(1500, 1506, 0), new ScheduledTask(800, 807, 1), new ScheduledTask(700, 706, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(0, 4, 2), new ScheduledTask(4100, 4105, 0), new ScheduledTask(3100, 3104, 0), new ScheduledTask(2800, 2803, 0), new ScheduledTask(2200, 2206, 1), new ScheduledTask(4800, 4802, 0), new ScheduledTask(1300, 1302, 0), new ScheduledTask(3400, 3402, 1), new ScheduledTask(5900, 5907, 1), new ScheduledTask(6300, 6307, 0), new ScheduledTask(5600, 5607, 0), new ScheduledTask(5000, 5006, 0), new ScheduledTask(3500, 3506, 0), new ScheduledTask(5900, 5905, 3), new ScheduledTask(5300, 5303, 3)};
        int[] expectedProcessorEndTimes = new int[]{6307, 5907, 4, 5905};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_9dot98_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_9.98_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 6450;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(900, 907, 2), new ScheduledTask(0, 4, 0), new ScheduledTask(0, 6, 2), new ScheduledTask(400, 407, 0), new ScheduledTask(1950, 1956, 2), new ScheduledTask(0, 7, 1), new ScheduledTask(0, 4, 3), new ScheduledTask(3250, 3255, 1), new ScheduledTask(3600, 3604, 2), new ScheduledTask(3150, 3153, 2), new ScheduledTask(1100, 1106, 0), new ScheduledTask(4500, 4502, 1), new ScheduledTask(2850, 2852, 2), new ScheduledTask(3000, 3002, 0), new ScheduledTask(5640, 5647, 0), new ScheduledTask(4740, 4747, 1), new ScheduledTask(5580, 5587, 1), new ScheduledTask(5550, 5556, 2), new ScheduledTask(4650, 4656, 2), new ScheduledTask(4100, 4105, 3), new ScheduledTask(4200, 4203, 2)};
        int[] expectedProcessorEndTimes = new int[]{5647, 5587, 5556, 4105};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(17, 24, 0), new ScheduledTask(7, 11, 1), new ScheduledTask(4, 10, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(28, 34, 0), new ScheduledTask(10, 17, 0), new ScheduledTask(0, 4, 0), new ScheduledTask(37, 42, 1), new ScheduledTask(24, 28, 0), new ScheduledTask(36, 39, 0), new ScheduledTask(11, 17, 1), new ScheduledTask(46, 48, 1), new ScheduledTask(34, 36, 0), new ScheduledTask(26, 28, 1), new ScheduledTask(57, 64, 0), new ScheduledTask(55, 62, 1), new ScheduledTask(48, 55, 1), new ScheduledTask(51, 57, 0), new ScheduledTask(42, 48, 0), new ScheduledTask(28, 33, 1), new ScheduledTask(39, 42, 0)};
        int[] expectedProcessorEndTimes = new int[]{64, 62};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(6, 13, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(0, 6, 0), new ScheduledTask(4, 11, 1), new ScheduledTask(0, 6, 2), new ScheduledTask(4, 11, 3), new ScheduledTask(0, 4, 3), new ScheduledTask(26, 31, 3), new ScheduledTask(33, 37, 0), new ScheduledTask(42, 45, 0), new ScheduledTask(11, 17, 1), new ScheduledTask(44, 46, 3), new ScheduledTask(51, 53, 0), new ScheduledTask(26, 28, 1), new ScheduledTask(55, 62, 1), new ScheduledTask(46, 53, 3), new ScheduledTask(53, 60, 3), new ScheduledTask(45, 51, 0), new ScheduledTask(56, 62, 0), new ScheduledTask(37, 42, 3), new ScheduledTask(53, 56, 0)};
        int[] expectedProcessorEndTimes = new int[]{62, 62, 6, 60};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(6, 13, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(0, 6, 0), new ScheduledTask(0, 7, 2), new ScheduledTask(0, 6, 3), new ScheduledTask(0, 7, 4), new ScheduledTask(0, 4, 5), new ScheduledTask(26, 31, 5), new ScheduledTask(29, 33, 0), new ScheduledTask(42, 45, 0), new ScheduledTask(43, 49, 1), new ScheduledTask(44, 46, 5), new ScheduledTask(51, 53, 0), new ScheduledTask(26, 28, 2), new ScheduledTask(55, 62, 1), new ScheduledTask(53, 60, 5), new ScheduledTask(46, 53, 5), new ScheduledTask(45, 51, 0), new ScheduledTask(56, 62, 0), new ScheduledTask(49, 54, 1), new ScheduledTask(53, 56, 0)};
        int[] expectedProcessorEndTimes = new int[]{62, 62, 28, 6, 7, 60};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_9dot99_WeightType_Random_Heterogeneous_4_2_strong(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_9.99_WeightType_Random_Heterogeneous-4-2-strong.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 11100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(2800, 2808, 0), new ScheduledTask(1300, 1310, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(0, 2, 2), new ScheduledTask(700, 706, 0), new ScheduledTask(3800, 3810, 0), new ScheduledTask(2300, 2305, 0), new ScheduledTask(8400, 8406, 0), new ScheduledTask(5300, 5307, 0), new ScheduledTask(3600, 3602, 0), new ScheduledTask(4800, 4805, 0), new ScheduledTask(5800, 5802, 1), new ScheduledTask(7000, 7010, 0), new ScheduledTask(6000, 6010, 0), new ScheduledTask(9000, 9009, 0), new ScheduledTask(9900, 9907, 0), new ScheduledTask(7400, 7406, 3), new ScheduledTask(7400, 7406, 1), new ScheduledTask(10600, 10605, 0), new ScheduledTask(8000, 8004, 0)};
        int[] expectedProcessorEndTimes = new int[]{10605, 7406, 2, 7406};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_9dot99_WeightType_Random_Heterogeneous_4_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_9.99_WeightType_Random_Heterogeneous-4-2.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 8400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1400, 1408, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(200, 207, 0), new ScheduledTask(900, 903, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(2800, 2806, 0), new ScheduledTask(0, 10, 2), new ScheduledTask(4000, 4005, 3), new ScheduledTask(2200, 2206, 0), new ScheduledTask(4900, 4907, 0), new ScheduledTask(4500, 4502, 1), new ScheduledTask(4400, 4405, 0), new ScheduledTask(1200, 1202, 0), new ScheduledTask(3400, 3410, 0), new ScheduledTask(6900, 6910, 0), new ScheduledTask(6000, 6009, 0), new ScheduledTask(7000, 7007, 2), new ScheduledTask(6900, 6906, 3), new ScheduledTask(6000, 6006, 1), new ScheduledTask(7400, 7405, 1), new ScheduledTask(5600, 5604, 0)};
        int[] expectedProcessorEndTimes = new int[]{6910, 7405, 7007, 6906};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_9dot99_WeightType_Random_Heterogeneous_4_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_9.99_WeightType_Random_Heterogeneous-4-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 7800;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(1100, 1108, 0), new ScheduledTask(840, 850, 1), new ScheduledTask(0, 7, 1), new ScheduledTask(0, 3, 0), new ScheduledTask(900, 902, 0), new ScheduledTask(300, 306, 0), new ScheduledTask(0, 10, 3), new ScheduledTask(3340, 3345, 1), new ScheduledTask(1900, 1906, 0), new ScheduledTask(4600, 4607, 0), new ScheduledTask(3100, 3102, 1), new ScheduledTask(4000, 4005, 0), new ScheduledTask(5400, 5402, 1), new ScheduledTask(2500, 2510, 0), new ScheduledTask(6600, 6610, 0), new ScheduledTask(5700, 5709, 0), new ScheduledTask(6360, 6367, 1), new ScheduledTask(3940, 3946, 1), new ScheduledTask(5640, 5646, 1), new ScheduledTask(7200, 7205, 1), new ScheduledTask(5300, 5304, 0)};
        int[] expectedProcessorEndTimes = new int[]{6610, 7205, 0, 10};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 74;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(5, 13, 0), new ScheduledTask(17, 27, 1), new ScheduledTask(10, 17, 1), new ScheduledTask(0, 3, 0), new ScheduledTask(3, 5, 0), new ScheduledTask(19, 25, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(29, 34, 1), new ScheduledTask(13, 19, 0), new ScheduledTask(40, 47, 0), new ScheduledTask(27, 29, 1), new ScheduledTask(35, 40, 0), new ScheduledTask(54, 56, 1), new ScheduledTask(25, 35, 0), new ScheduledTask(60, 70, 0), new ScheduledTask(51, 60, 0), new ScheduledTask(62, 69, 1), new ScheduledTask(34, 40, 1), new ScheduledTask(56, 62, 1), new ScheduledTask(69, 74, 1), new ScheduledTask(47, 51, 0)};
        int[] expectedProcessorEndTimes = new int[]{70, 74};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 74;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(5, 13, 0), new ScheduledTask(7, 17, 1), new ScheduledTask(0, 7, 1), new ScheduledTask(0, 3, 0), new ScheduledTask(3, 5, 0), new ScheduledTask(19, 25, 0), new ScheduledTask(0, 10, 2), new ScheduledTask(38, 43, 3), new ScheduledTask(13, 19, 0), new ScheduledTask(40, 47, 0), new ScheduledTask(25, 27, 1), new ScheduledTask(35, 40, 0), new ScheduledTask(54, 56, 1), new ScheduledTask(25, 35, 0), new ScheduledTask(51, 61, 0), new ScheduledTask(62, 71, 3), new ScheduledTask(62, 69, 1), new ScheduledTask(47, 53, 3), new ScheduledTask(56, 62, 1), new ScheduledTask(69, 74, 1), new ScheduledTask(47, 51, 0)};
        int[] expectedProcessorEndTimes = new int[]{61, 74, 10, 71};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_21_CCR_9dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/21-nodes/Stencil_Nodes_21_CCR_9.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 74;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(5, 13, 0), new ScheduledTask(7, 17, 1), new ScheduledTask(0, 7, 1), new ScheduledTask(0, 3, 0), new ScheduledTask(3, 5, 0), new ScheduledTask(19, 25, 0), new ScheduledTask(0, 10, 2), new ScheduledTask(38, 43, 3), new ScheduledTask(13, 19, 0), new ScheduledTask(40, 47, 0), new ScheduledTask(25, 27, 1), new ScheduledTask(35, 40, 0), new ScheduledTask(54, 56, 1), new ScheduledTask(25, 35, 0), new ScheduledTask(51, 61, 0), new ScheduledTask(62, 71, 4), new ScheduledTask(62, 69, 1), new ScheduledTask(47, 53, 3), new ScheduledTask(56, 62, 1), new ScheduledTask(69, 74, 1), new ScheduledTask(47, 51, 0)};
        int[] expectedProcessorEndTimes = new int[]{61, 74, 10, 53, 71};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 21);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    
}
