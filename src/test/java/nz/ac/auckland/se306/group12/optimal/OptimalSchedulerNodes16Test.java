package nz.ac.auckland.se306.group12.optimal;

import nz.ac.auckland.se306.group12.TestUtil;
import nz.ac.auckland.se306.group12.models.Graph;
import nz.ac.auckland.se306.group12.models.Schedule;
import nz.ac.auckland.se306.group12.models.ScheduledTask;
import nz.ac.auckland.se306.group12.scheduler.Scheduler;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;

/**
 * This class has been automatically generated by the GenerateUnitTests.py script.
 * Do not modify this file directly as it will be overwritten the next time the script is run.
 * <p>
 * The optimal schedules for each test have been sourced from 
 * <a href="https://parallel.auckland.ac.nz/OptimalTaskScheduling/OptimalSchedules.html">the amazing work</a>
 * done by the Parallel and Reconfigurable Computing Lab at the University of Auckland.
 */
public class OptimalSchedulerNodes16Test {

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 996;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 89, 0), new ScheduledTask(516, 676, 0), new ScheduledTask(644, 804, 1), new ScheduledTask(162, 287, 1), new ScheduledTask(231, 356, 0), new ScheduledTask(394, 519, 1), new ScheduledTask(519, 644, 1), new ScheduledTask(287, 394, 1), new ScheduledTask(356, 445, 0), new ScheduledTask(729, 818, 0), new ScheduledTask(89, 178, 0), new ScheduledTask(91, 162, 1), new ScheduledTask(445, 516, 0), new ScheduledTask(676, 729, 0), new ScheduledTask(178, 231, 0), new ScheduledTask(818, 996, 0)};
        int[] expectedProcessorEndTimes = new int[]{996, 804};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 640;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 89, 0), new ScheduledTask(292, 452, 1), new ScheduledTask(287, 447, 2), new ScheduledTask(92, 217, 3), new ScheduledTask(96, 221, 1), new ScheduledTask(324, 449, 3), new ScheduledTask(162, 287, 2), new ScheduledTask(217, 324, 3), new ScheduledTask(231, 320, 0), new ScheduledTask(373, 462, 0), new ScheduledTask(89, 178, 0), new ScheduledTask(91, 162, 2), new ScheduledTask(221, 292, 1), new ScheduledTask(320, 373, 0), new ScheduledTask(178, 231, 0), new ScheduledTask(462, 640, 0)};
        int[] expectedProcessorEndTimes = new int[]{640, 452, 447, 449};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 521;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 89, 0), new ScheduledTask(94, 254, 1), new ScheduledTask(178, 338, 0), new ScheduledTask(92, 217, 2), new ScheduledTask(147, 272, 3), new ScheduledTask(199, 324, 4), new ScheduledTask(217, 342, 2), new ScheduledTask(92, 199, 4), new ScheduledTask(162, 251, 5), new ScheduledTask(89, 178, 0), new ScheduledTask(251, 340, 5), new ScheduledTask(91, 162, 5), new ScheduledTask(254, 325, 1), new ScheduledTask(94, 147, 3), new ScheduledTask(272, 325, 3), new ScheduledTask(343, 521, 2)};
        int[] expectedProcessorEndTimes = new int[]{338, 325, 521, 325, 324, 340};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1074;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 116, 0), new ScheduledTask(645, 810, 0), new ScheduledTask(739, 904, 1), new ScheduledTask(496, 645, 0), new ScheduledTask(590, 739, 1), new ScheduledTask(215, 364, 0), new ScheduledTask(364, 496, 0), new ScheduledTask(358, 474, 1), new ScheduledTask(242, 358, 1), new ScheduledTask(474, 590, 1), new ScheduledTask(810, 909, 0), new ScheduledTask(116, 215, 0), new ScheduledTask(192, 242, 1), new ScheduledTask(159, 192, 1), new ScheduledTask(126, 159, 1), new ScheduledTask(909, 1074, 0)};
        int[] expectedProcessorEndTimes = new int[]{1074, 904};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 682;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 116, 0), new ScheduledTask(232, 397, 0), new ScheduledTask(118, 283, 1), new ScheduledTask(366, 515, 2), new ScheduledTask(121, 270, 3), new ScheduledTask(217, 366, 2), new ScheduledTask(283, 415, 1), new ScheduledTask(270, 386, 3), new ScheduledTask(386, 502, 3), new ScheduledTask(397, 513, 0), new ScheduledTask(118, 217, 2), new ScheduledTask(415, 514, 1), new ScheduledTask(182, 232, 0), new ScheduledTask(149, 182, 0), new ScheduledTask(116, 149, 0), new ScheduledTask(517, 682, 2)};
        int[] expectedProcessorEndTimes = new int[]{513, 514, 682, 502};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 554;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 116, 0), new ScheduledTask(217, 382, 1), new ScheduledTask(118, 283, 2), new ScheduledTask(123, 272, 3), new ScheduledTask(121, 270, 4), new ScheduledTask(232, 381, 0), new ScheduledTask(123, 255, 5), new ScheduledTask(272, 388, 3), new ScheduledTask(255, 371, 5), new ScheduledTask(270, 386, 4), new ScheduledTask(118, 217, 1), new ScheduledTask(283, 382, 2), new ScheduledTask(182, 232, 0), new ScheduledTask(149, 182, 0), new ScheduledTask(116, 149, 0), new ScheduledTask(389, 554, 3)};
        int[] expectedProcessorEndTimes = new int[]{381, 382, 382, 554, 386, 371};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 502;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 36, 0), new ScheduledTask(235, 413, 1), new ScheduledTask(234, 394, 2), new ScheduledTask(278, 438, 3), new ScheduledTask(286, 446, 0), new ScheduledTask(143, 286, 0), new ScheduledTask(92, 235, 1), new ScheduledTask(46, 171, 3), new ScheduledTask(171, 278, 3), new ScheduledTask(36, 143, 0), new ScheduledTask(38, 145, 2), new ScheduledTask(145, 234, 2), new ScheduledTask(39, 92, 1), new ScheduledTask(394, 447, 2), new ScheduledTask(413, 449, 1), new ScheduledTask(449, 502, 1)};
        int[] expectedProcessorEndTimes = new int[]{446, 502, 447, 438};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 373;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 36, 0), new ScheduledTask(89, 267, 0), new ScheduledTask(153, 313, 1), new ScheduledTask(45, 205, 2), new ScheduledTask(151, 311, 3), new ScheduledTask(171, 314, 4), new ScheduledTask(164, 307, 5), new ScheduledTask(46, 171, 4), new ScheduledTask(46, 153, 1), new ScheduledTask(44, 151, 3), new ScheduledTask(205, 312, 2), new ScheduledTask(39, 128, 5), new ScheduledTask(267, 320, 0), new ScheduledTask(36, 89, 0), new ScheduledTask(128, 164, 5), new ScheduledTask(320, 373, 0)};
        int[] expectedProcessorEndTimes = new int[]{373, 313, 312, 311, 314, 307};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 896;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 142, 0), new ScheduledTask(622, 764, 1), new ScheduledTask(512, 640, 0), new ScheduledTask(384, 512, 0), new ScheduledTask(256, 384, 0), new ScheduledTask(640, 754, 0), new ScheduledTask(142, 256, 0), new ScheduledTask(754, 868, 0), new ScheduledTask(522, 622, 1), new ScheduledTask(422, 522, 1), new ScheduledTask(265, 365, 1), new ScheduledTask(764, 864, 1), new ScheduledTask(194, 265, 1), new ScheduledTask(365, 422, 1), new ScheduledTask(151, 194, 1), new ScheduledTask(868, 896, 0)};
        int[] expectedProcessorEndTimes = new int[]{896, 864};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 540;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 142, 0), new ScheduledTask(370, 512, 0), new ScheduledTask(276, 404, 1), new ScheduledTask(148, 276, 2), new ScheduledTask(148, 276, 1), new ScheduledTask(142, 256, 0), new ScheduledTask(388, 502, 3), new ScheduledTask(256, 370, 0), new ScheduledTask(145, 245, 3), new ScheduledTask(245, 345, 3), new ScheduledTask(333, 433, 2), new ScheduledTask(404, 504, 1), new ScheduledTask(433, 504, 2), new ScheduledTask(276, 333, 2), new ScheduledTask(345, 388, 3), new ScheduledTask(512, 540, 0)};
        int[] expectedProcessorEndTimes = new int[]{540, 504, 504, 502};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 420;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 142, 0), new ScheduledTask(142, 284, 0), new ScheduledTask(148, 276, 1), new ScheduledTask(148, 276, 2), new ScheduledTask(148, 276, 3), new ScheduledTask(205, 319, 4), new ScheduledTask(276, 390, 3), new ScheduledTask(276, 390, 2), new ScheduledTask(145, 245, 5), new ScheduledTask(245, 345, 5), new ScheduledTask(276, 376, 1), new ScheduledTask(284, 384, 0), new ScheduledTask(319, 390, 4), new ScheduledTask(148, 205, 4), new ScheduledTask(345, 388, 5), new ScheduledTask(392, 420, 3)};
        int[] expectedProcessorEndTimes = new int[]{384, 376, 390, 420, 390, 388};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 513;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 38, 0), new ScheduledTask(40, 228, 1), new ScheduledTask(40, 209, 2), new ScheduledTask(43, 193, 3), new ScheduledTask(268, 400, 3), new ScheduledTask(76, 208, 0), new ScheduledTask(265, 397, 2), new ScheduledTask(246, 359, 0), new ScheduledTask(303, 397, 1), new ScheduledTask(193, 268, 3), new ScheduledTask(228, 303, 1), new ScheduledTask(209, 265, 2), new ScheduledTask(38, 76, 0), new ScheduledTask(208, 246, 0), new ScheduledTask(359, 397, 0), new ScheduledTask(400, 513, 3)};
        int[] expectedProcessorEndTimes = new int[]{397, 397, 397, 513};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 401;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 38, 0), new ScheduledTask(40, 228, 1), new ScheduledTask(40, 209, 2), new ScheduledTask(119, 269, 3), new ScheduledTask(156, 288, 4), new ScheduledTask(46, 178, 5), new ScheduledTask(151, 283, 0), new ScheduledTask(43, 156, 4), new ScheduledTask(178, 272, 5), new ScheduledTask(44, 119, 3), new ScheduledTask(76, 151, 0), new ScheduledTask(228, 284, 1), new ScheduledTask(209, 247, 2), new ScheduledTask(38, 76, 0), new ScheduledTask(247, 285, 2), new ScheduledTask(288, 401, 4)};
        int[] expectedProcessorEndTimes = new int[]{283, 284, 285, 269, 401, 272};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 656;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 154, 0), new ScheduledTask(346, 538, 0), new ScheduledTask(368, 541, 1), new ScheduledTask(375, 529, 2), new ScheduledTask(221, 375, 2), new ScheduledTask(156, 310, 1), new ScheduledTask(156, 271, 3), new ScheduledTask(271, 386, 3), new ScheduledTask(154, 250, 0), new ScheduledTask(250, 346, 0), new ScheduledTask(424, 501, 3), new ScheduledTask(163, 221, 2), new ScheduledTask(310, 368, 1), new ScheduledTask(386, 424, 3), new ScheduledTask(501, 539, 3), new ScheduledTask(541, 656, 1)};
        int[] expectedProcessorEndTimes = new int[]{538, 656, 529, 539};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 537;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 154, 0), new ScheduledTask(221, 413, 1), new ScheduledTask(238, 411, 2), new ScheduledTask(254, 408, 3), new ScheduledTask(255, 409, 4), new ScheduledTask(259, 413, 5), new ScheduledTask(307, 422, 0), new ScheduledTask(154, 269, 0), new ScheduledTask(158, 254, 3), new ScheduledTask(159, 255, 4), new ScheduledTask(161, 238, 2), new ScheduledTask(163, 221, 5), new ScheduledTask(163, 221, 1), new ScheduledTask(221, 259, 5), new ScheduledTask(269, 307, 0), new ScheduledTask(422, 537, 0)};
        int[] expectedProcessorEndTimes = new int[]{537, 413, 411, 408, 409, 413};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 554;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 73, 0), new ScheduledTask(147, 330, 0), new ScheduledTask(334, 517, 1), new ScheduledTask(151, 334, 1), new ScheduledTask(330, 513, 0), new ScheduledTask(80, 245, 2), new ScheduledTask(245, 410, 2), new ScheduledTask(240, 387, 3), new ScheduledTask(112, 240, 3), new ScheduledTask(387, 515, 3), new ScheduledTask(410, 502, 2), new ScheduledTask(78, 151, 1), new ScheduledTask(110, 147, 0), new ScheduledTask(73, 110, 0), new ScheduledTask(75, 112, 3), new ScheduledTask(517, 554, 1)};
        int[] expectedProcessorEndTimes = new int[]{513, 554, 502, 515};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 428;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 73, 0), new ScheduledTask(73, 256, 0), new ScheduledTask(80, 263, 1), new ScheduledTask(81, 264, 2), new ScheduledTask(79, 262, 3), new ScheduledTask(80, 245, 4), new ScheduledTask(79, 244, 5), new ScheduledTask(244, 391, 5), new ScheduledTask(245, 373, 4), new ScheduledTask(256, 384, 0), new ScheduledTask(262, 354, 3), new ScheduledTask(263, 336, 1), new ScheduledTask(264, 301, 2), new ScheduledTask(301, 338, 2), new ScheduledTask(336, 373, 1), new ScheduledTask(391, 428, 5)};
        int[] expectedProcessorEndTimes = new int[]{384, 373, 338, 354, 373, 428};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 382;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 29, 0), new ScheduledTask(206, 353, 1), new ScheduledTask(33, 180, 2), new ScheduledTask(170, 302, 3), new ScheduledTask(190, 322, 0), new ScheduledTask(58, 190, 0), new ScheduledTask(38, 170, 3), new ScheduledTask(180, 283, 2), new ScheduledTask(31, 104, 1), new ScheduledTask(133, 206, 1), new ScheduledTask(283, 342, 2), new ScheduledTask(302, 346, 3), new ScheduledTask(104, 133, 1), new ScheduledTask(29, 58, 0), new ScheduledTask(322, 351, 0), new ScheduledTask(353, 382, 1)};
        int[] expectedProcessorEndTimes = new int[]{351, 382, 342, 346};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 293;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 29, 0), new ScheduledTask(104, 251, 1), new ScheduledTask(105, 252, 2), new ScheduledTask(29, 161, 0), new ScheduledTask(32, 164, 3), new ScheduledTask(107, 239, 4), new ScheduledTask(38, 170, 5), new ScheduledTask(161, 264, 0), new ScheduledTask(31, 104, 1), new ScheduledTask(32, 105, 2), new ScheduledTask(193, 252, 3), new ScheduledTask(34, 78, 4), new ScheduledTask(164, 193, 3), new ScheduledTask(78, 107, 4), new ScheduledTask(170, 199, 5), new ScheduledTask(264, 293, 0)};
        int[] expectedProcessorEndTimes = new int[]{293, 251, 252, 252, 239, 199};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 540;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 93, 0), new ScheduledTask(100, 286, 1), new ScheduledTask(315, 482, 0), new ScheduledTask(95, 243, 2), new ScheduledTask(336, 484, 3), new ScheduledTask(206, 336, 3), new ScheduledTask(336, 466, 2), new ScheduledTask(95, 206, 3), new ScheduledTask(243, 336, 2), new ScheduledTask(379, 472, 1), new ScheduledTask(286, 379, 1), new ScheduledTask(93, 167, 0), new ScheduledTask(167, 241, 0), new ScheduledTask(241, 278, 0), new ScheduledTask(278, 315, 0), new ScheduledTask(484, 540, 3)};
        int[] expectedProcessorEndTimes = new int[]{482, 472, 466, 540};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 414;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 93, 0), new ScheduledTask(93, 279, 0), new ScheduledTask(189, 356, 1), new ScheduledTask(95, 243, 2), new ScheduledTask(99, 247, 3), new ScheduledTask(95, 225, 4), new ScheduledTask(225, 355, 4), new ScheduledTask(233, 344, 5), new ScheduledTask(103, 196, 5), new ScheduledTask(96, 189, 1), new ScheduledTask(247, 340, 3), new ScheduledTask(243, 317, 2), new ScheduledTask(279, 353, 0), new ScheduledTask(196, 233, 5), new ScheduledTask(317, 354, 2), new ScheduledTask(358, 414, 4)};
        int[] expectedProcessorEndTimes = new int[]{353, 356, 354, 340, 414, 344};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 918;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 120, 0), new ScheduledTask(513, 663, 1), new ScheduledTask(123, 258, 1), new ScheduledTask(258, 393, 1), new ScheduledTask(663, 798, 1), new ScheduledTask(393, 513, 1), new ScheduledTask(645, 750, 0), new ScheduledTask(120, 225, 0), new ScheduledTask(315, 420, 0), new ScheduledTask(225, 315, 0), new ScheduledTask(525, 600, 0), new ScheduledTask(420, 480, 0), new ScheduledTask(480, 525, 0), new ScheduledTask(600, 645, 0), new ScheduledTask(750, 795, 0), new ScheduledTask(798, 918, 1)};
        int[] expectedProcessorEndTimes = new int[]{795, 918};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 588;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 120, 0), new ScheduledTask(180, 330, 0), new ScheduledTask(321, 456, 1), new ScheduledTask(220, 355, 2), new ScheduledTask(228, 363, 3), new ScheduledTask(126, 246, 1), new ScheduledTask(123, 228, 3), new ScheduledTask(363, 468, 3), new ScheduledTask(355, 460, 2), new ScheduledTask(130, 220, 2), new ScheduledTask(246, 321, 1), new ScheduledTask(120, 180, 0), new ScheduledTask(330, 375, 0), new ScheduledTask(375, 420, 0), new ScheduledTask(420, 465, 0), new ScheduledTask(468, 588, 3)};
        int[] expectedProcessorEndTimes = new int[]{465, 456, 460, 588};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 480;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 120, 0), new ScheduledTask(126, 276, 1), new ScheduledTask(123, 258, 2), new ScheduledTask(120, 255, 0), new ScheduledTask(126, 261, 3), new ScheduledTask(171, 291, 4), new ScheduledTask(255, 360, 0), new ScheduledTask(232, 337, 5), new ScheduledTask(127, 232, 5), new ScheduledTask(261, 351, 3), new ScheduledTask(276, 351, 1), new ScheduledTask(291, 351, 4), new ScheduledTask(126, 171, 4), new ScheduledTask(258, 303, 2), new ScheduledTask(303, 348, 2), new ScheduledTask(360, 480, 0)};
        int[] expectedProcessorEndTimes = new int[]{480, 351, 348, 351, 351, 337};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot99_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.99_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(6, 27, 1), new ScheduledTask(6, 19, 2), new ScheduledTask(33, 46, 3), new ScheduledTask(4, 17, 0), new ScheduledTask(17, 30, 0), new ScheduledTask(11, 22, 3), new ScheduledTask(22, 33, 3), new ScheduledTask(23, 32, 2), new ScheduledTask(27, 40, 1), new ScheduledTask(30, 43, 0), new ScheduledTask(32, 43, 2), new ScheduledTask(7, 11, 3), new ScheduledTask(19, 23, 2), new ScheduledTask(40, 44, 1), new ScheduledTask(46, 57, 3)};
        int[] expectedProcessorEndTimes = new int[]{43, 44, 43, 57};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot99_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.99_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(6, 27, 1), new ScheduledTask(6, 19, 2), new ScheduledTask(9, 22, 3), new ScheduledTask(4, 17, 0), new ScheduledTask(23, 36, 4), new ScheduledTask(12, 23, 4), new ScheduledTask(17, 28, 0), new ScheduledTask(11, 20, 5), new ScheduledTask(19, 32, 2), new ScheduledTask(20, 33, 5), new ScheduledTask(22, 33, 3), new ScheduledTask(7, 11, 5), new ScheduledTask(8, 12, 4), new ScheduledTask(27, 31, 1), new ScheduledTask(36, 47, 4)};
        int[] expectedProcessorEndTimes = new int[]{28, 31, 32, 33, 47, 33};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot99_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.99_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 16, 0), new ScheduledTask(20, 38, 1), new ScheduledTask(25, 41, 0), new ScheduledTask(30, 46, 2), new ScheduledTask(23, 37, 3), new ScheduledTask(16, 25, 0), new ScheduledTask(37, 51, 3), new ScheduledTask(38, 47, 1), new ScheduledTask(19, 26, 2), new ScheduledTask(47, 54, 1), new ScheduledTask(18, 23, 3), new ScheduledTask(26, 30, 2), new ScheduledTask(41, 45, 0), new ScheduledTask(45, 52, 0), new ScheduledTask(46, 51, 2), new ScheduledTask(54, 70, 1)};
        int[] expectedProcessorEndTimes = new int[]{52, 70, 51, 51};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot99_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.99_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 16, 0), new ScheduledTask(20, 38, 1), new ScheduledTask(16, 32, 0), new ScheduledTask(23, 39, 2), new ScheduledTask(23, 37, 3), new ScheduledTask(26, 35, 4), new ScheduledTask(26, 40, 5), new ScheduledTask(35, 44, 4), new ScheduledTask(19, 26, 4), new ScheduledTask(19, 26, 5), new ScheduledTask(18, 23, 3), new ScheduledTask(19, 23, 2), new ScheduledTask(32, 36, 0), new ScheduledTask(36, 43, 0), new ScheduledTask(37, 42, 3), new ScheduledTask(45, 61, 4)};
        int[] expectedProcessorEndTimes = new int[]{43, 38, 39, 42, 61, 40};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot99_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.99_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 13, 0), new ScheduledTask(13, 26, 0), new ScheduledTask(15, 25, 1), new ScheduledTask(15, 28, 2), new ScheduledTask(26, 41, 0), new ScheduledTask(39, 49, 3), new ScheduledTask(19, 32, 3), new ScheduledTask(32, 39, 3), new ScheduledTask(35, 48, 2), new ScheduledTask(28, 35, 2), new ScheduledTask(25, 36, 1), new ScheduledTask(39, 46, 1), new ScheduledTask(36, 39, 1), new ScheduledTask(41, 48, 0), new ScheduledTask(16, 19, 3), new ScheduledTask(50, 55, 3)};
        int[] expectedProcessorEndTimes = new int[]{48, 46, 48, 55};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot99_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.99_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 13, 0), new ScheduledTask(13, 26, 0), new ScheduledTask(15, 25, 1), new ScheduledTask(15, 28, 2), new ScheduledTask(15, 30, 3), new ScheduledTask(30, 40, 3), new ScheduledTask(22, 35, 4), new ScheduledTask(23, 30, 5), new ScheduledTask(25, 38, 1), new ScheduledTask(16, 23, 5), new ScheduledTask(26, 37, 0), new ScheduledTask(30, 37, 5), new ScheduledTask(19, 22, 4), new ScheduledTask(28, 35, 2), new ScheduledTask(35, 38, 4), new ScheduledTask(41, 46, 3)};
        int[] expectedProcessorEndTimes = new int[]{37, 38, 35, 46, 38, 37};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot99_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.99_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 13, 0), new ScheduledTask(16, 32, 1), new ScheduledTask(13, 28, 0), new ScheduledTask(15, 31, 2), new ScheduledTask(29, 44, 3), new ScheduledTask(20, 31, 4), new ScheduledTask(19, 29, 5), new ScheduledTask(28, 41, 0), new ScheduledTask(29, 44, 5), new ScheduledTask(31, 38, 4), new ScheduledTask(19, 29, 3), new ScheduledTask(15, 18, 5), new ScheduledTask(32, 39, 1), new ScheduledTask(31, 36, 2), new ScheduledTask(36, 41, 2), new ScheduledTask(46, 59, 3)};
        int[] expectedProcessorEndTimes = new int[]{41, 39, 41, 59, 38, 44};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(20, 36, 0), new ScheduledTask(25, 37, 1), new ScheduledTask(31, 47, 2), new ScheduledTask(35, 49, 3), new ScheduledTask(16, 25, 1), new ScheduledTask(14, 20, 0), new ScheduledTask(16, 21, 3), new ScheduledTask(19, 31, 2), new ScheduledTask(27, 35, 3), new ScheduledTask(21, 27, 3), new ScheduledTask(36, 47, 0), new ScheduledTask(37, 42, 1), new ScheduledTask(16, 19, 2), new ScheduledTask(42, 45, 1), new ScheduledTask(49, 65, 3)};
        int[] expectedProcessorEndTimes = new int[]{47, 45, 47, 65};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(20, 36, 0), new ScheduledTask(29, 41, 1), new ScheduledTask(22, 38, 2), new ScheduledTask(23, 37, 3), new ScheduledTask(16, 25, 4), new ScheduledTask(14, 20, 0), new ScheduledTask(16, 21, 5), new ScheduledTask(26, 38, 5), new ScheduledTask(21, 29, 1), new ScheduledTask(17, 23, 3), new ScheduledTask(28, 39, 4), new ScheduledTask(21, 26, 5), new ScheduledTask(25, 28, 4), new ScheduledTask(16, 19, 2), new ScheduledTask(41, 57, 1)};
        int[] expectedProcessorEndTimes = new int[]{36, 57, 38, 37, 39, 38};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(21, 32, 1), new ScheduledTask(18, 31, 2), new ScheduledTask(36, 47, 3), new ScheduledTask(5, 16, 0), new ScheduledTask(16, 31, 0), new ScheduledTask(25, 36, 3), new ScheduledTask(8, 18, 2), new ScheduledTask(31, 46, 2), new ScheduledTask(31, 46, 0), new ScheduledTask(10, 25, 3), new ScheduledTask(32, 45, 1), new ScheduledTask(9, 14, 1), new ScheduledTask(14, 21, 1), new ScheduledTask(7, 10, 3), new ScheduledTask(48, 59, 3)};
        int[] expectedProcessorEndTimes = new int[]{46, 45, 46, 59};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(10, 21, 1), new ScheduledTask(16, 29, 0), new ScheduledTask(12, 23, 2), new ScheduledTask(28, 39, 3), new ScheduledTask(14, 29, 4), new ScheduledTask(5, 16, 0), new ScheduledTask(8, 18, 5), new ScheduledTask(21, 36, 5), new ScheduledTask(13, 28, 3), new ScheduledTask(21, 36, 1), new ScheduledTask(23, 36, 2), new ScheduledTask(9, 14, 4), new ScheduledTask(29, 36, 4), new ScheduledTask(18, 21, 5), new ScheduledTask(39, 50, 3)};
        int[] expectedProcessorEndTimes = new int[]{29, 36, 36, 50, 36, 36};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_1dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_1.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 48;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 15, 0), new ScheduledTask(18, 33, 1), new ScheduledTask(15, 30, 0), new ScheduledTask(23, 40, 2), new ScheduledTask(33, 44, 1), new ScheduledTask(25, 38, 3), new ScheduledTask(25, 36, 4), new ScheduledTask(18, 27, 5), new ScheduledTask(18, 25, 4), new ScheduledTask(30, 39, 0), new ScheduledTask(27, 33, 5), new ScheduledTask(19, 23, 2), new ScheduledTask(18, 25, 3), new ScheduledTask(33, 40, 5), new ScheduledTask(36, 42, 4), new ScheduledTask(44, 48, 1)};
        int[] expectedProcessorEndTimes = new int[]{39, 48, 40, 38, 42, 40};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 25, 0), new ScheduledTask(19, 35, 1), new ScheduledTask(19, 28, 2), new ScheduledTask(10, 19, 2), new ScheduledTask(20, 33, 3), new ScheduledTask(9, 20, 3), new ScheduledTask(28, 35, 2), new ScheduledTask(10, 19, 1), new ScheduledTask(30, 39, 0), new ScheduledTask(25, 30, 0), new ScheduledTask(33, 37, 3), new ScheduledTask(35, 39, 2), new ScheduledTask(37, 41, 3), new ScheduledTask(35, 39, 1), new ScheduledTask(41, 59, 3)};
        int[] expectedProcessorEndTimes = new int[]{39, 39, 39, 59};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 25, 0), new ScheduledTask(18, 34, 1), new ScheduledTask(12, 21, 2), new ScheduledTask(10, 19, 3), new ScheduledTask(10, 23, 4), new ScheduledTask(9, 20, 5), new ScheduledTask(21, 28, 2), new ScheduledTask(19, 28, 3), new ScheduledTask(23, 32, 4), new ScheduledTask(24, 29, 5), new ScheduledTask(20, 24, 5), new ScheduledTask(28, 32, 2), new ScheduledTask(28, 32, 3), new ScheduledTask(14, 18, 1), new ScheduledTask(34, 52, 1)};
        int[] expectedProcessorEndTimes = new int[]{25, 52, 32, 32, 32, 29};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_1dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_1.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(30, 45, 1), new ScheduledTask(21, 36, 2), new ScheduledTask(20, 30, 1), new ScheduledTask(24, 41, 0), new ScheduledTask(26, 40, 3), new ScheduledTask(24, 34, 4), new ScheduledTask(14, 24, 0), new ScheduledTask(28, 42, 5), new ScheduledTask(17, 24, 4), new ScheduledTask(20, 28, 5), new ScheduledTask(18, 26, 3), new ScheduledTask(16, 19, 5), new ScheduledTask(34, 39, 4), new ScheduledTask(39, 42, 4), new ScheduledTask(45, 59, 1)};
        int[] expectedProcessorEndTimes = new int[]{41, 59, 36, 40, 42, 42};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 18, 0), new ScheduledTask(22, 38, 0), new ScheduledTask(31, 44, 1), new ScheduledTask(36, 52, 2), new ScheduledTask(43, 56, 3), new ScheduledTask(20, 34, 3), new ScheduledTask(25, 36, 2), new ScheduledTask(38, 54, 0), new ScheduledTask(34, 43, 3), new ScheduledTask(26, 31, 1), new ScheduledTask(21, 26, 1), new ScheduledTask(20, 25, 2), new ScheduledTask(44, 49, 1), new ScheduledTask(49, 54, 1), new ScheduledTask(18, 22, 0), new ScheduledTask(56, 63, 3)};
        int[] expectedProcessorEndTimes = new int[]{54, 54, 52, 63};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 18, 0), new ScheduledTask(25, 41, 1), new ScheduledTask(34, 47, 2), new ScheduledTask(27, 43, 0), new ScheduledTask(27, 40, 3), new ScheduledTask(20, 34, 2), new ScheduledTask(21, 32, 4), new ScheduledTask(26, 42, 5), new ScheduledTask(18, 27, 0), new ScheduledTask(32, 37, 4), new ScheduledTask(21, 26, 5), new ScheduledTask(20, 25, 1), new ScheduledTask(22, 27, 3), new ScheduledTask(37, 42, 4), new ScheduledTask(40, 44, 3), new ScheduledTask(47, 54, 2)};
        int[] expectedProcessorEndTimes = new int[]{43, 41, 54, 44, 42, 42};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(55, 63, 1), new ScheduledTask(49, 55, 1), new ScheduledTask(25, 29, 1), new ScheduledTask(7, 9, 0), new ScheduledTask(29, 35, 1), new ScheduledTask(16, 26, 0), new ScheduledTask(42, 49, 1), new ScheduledTask(9, 16, 0), new ScheduledTask(26, 32, 0), new ScheduledTask(35, 41, 1), new ScheduledTask(19, 25, 1), new ScheduledTask(32, 36, 0), new ScheduledTask(36, 39, 0), new ScheduledTask(39, 46, 0), new ScheduledTask(63, 69, 1)};
        int[] expectedProcessorEndTimes = new int[]{46, 69};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(55, 63, 1), new ScheduledTask(49, 55, 1), new ScheduledTask(25, 29, 1), new ScheduledTask(7, 9, 0), new ScheduledTask(29, 35, 1), new ScheduledTask(16, 26, 0), new ScheduledTask(42, 49, 1), new ScheduledTask(9, 16, 0), new ScheduledTask(26, 32, 0), new ScheduledTask(35, 41, 1), new ScheduledTask(19, 25, 2), new ScheduledTask(32, 36, 0), new ScheduledTask(19, 22, 3), new ScheduledTask(42, 49, 3), new ScheduledTask(63, 69, 1)};
        int[] expectedProcessorEndTimes = new int[]{36, 69, 25, 49};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(54, 61, 1), new ScheduledTask(2, 7, 0), new ScheduledTask(19, 23, 1), new ScheduledTask(30, 39, 1), new ScheduledTask(42, 52, 1), new ScheduledTask(52, 54, 1), new ScheduledTask(15, 23, 0), new ScheduledTask(23, 29, 1), new ScheduledTask(23, 32, 0), new ScheduledTask(39, 42, 1), new ScheduledTask(32, 37, 0), new ScheduledTask(37, 46, 0), new ScheduledTask(9, 15, 0), new ScheduledTask(7, 9, 0), new ScheduledTask(62, 69, 1)};
        int[] expectedProcessorEndTimes = new int[]{46, 69};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(54, 61, 1), new ScheduledTask(2, 7, 0), new ScheduledTask(19, 23, 1), new ScheduledTask(30, 39, 1), new ScheduledTask(42, 52, 1), new ScheduledTask(52, 54, 1), new ScheduledTask(15, 23, 0), new ScheduledTask(13, 19, 2), new ScheduledTask(23, 32, 0), new ScheduledTask(39, 42, 1), new ScheduledTask(30, 35, 3), new ScheduledTask(35, 44, 3), new ScheduledTask(9, 15, 0), new ScheduledTask(7, 9, 0), new ScheduledTask(62, 69, 1)};
        int[] expectedProcessorEndTimes = new int[]{32, 69, 19, 44};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(43, 47, 0), new ScheduledTask(8, 11, 0), new ScheduledTask(47, 54, 0), new ScheduledTask(3, 8, 0), new ScheduledTask(11, 21, 0), new ScheduledTask(32, 35, 0), new ScheduledTask(21, 24, 0), new ScheduledTask(35, 43, 0), new ScheduledTask(14, 20, 1), new ScheduledTask(20, 29, 1), new ScheduledTask(24, 32, 0), new ScheduledTask(32, 37, 1), new ScheduledTask(29, 32, 1), new ScheduledTask(37, 39, 1), new ScheduledTask(56, 65, 0)};
        int[] expectedProcessorEndTimes = new int[]{65, 39};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(35, 39, 0), new ScheduledTask(8, 11, 0), new ScheduledTask(39, 46, 0), new ScheduledTask(3, 8, 0), new ScheduledTask(11, 21, 0), new ScheduledTask(32, 35, 0), new ScheduledTask(21, 24, 0), new ScheduledTask(25, 33, 1), new ScheduledTask(14, 20, 2), new ScheduledTask(14, 23, 3), new ScheduledTask(24, 32, 0), new ScheduledTask(26, 31, 3), new ScheduledTask(23, 26, 3), new ScheduledTask(36, 38, 3), new ScheduledTask(55, 64, 0)};
        int[] expectedProcessorEndTimes = new int[]{64, 33, 20, 38};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(31, 39, 1), new ScheduledTask(50, 54, 1), new ScheduledTask(17, 22, 1), new ScheduledTask(13, 17, 1), new ScheduledTask(22, 31, 1), new ScheduledTask(48, 50, 1), new ScheduledTask(2, 11, 0), new ScheduledTask(39, 48, 1), new ScheduledTask(11, 19, 0), new ScheduledTask(21, 24, 0), new ScheduledTask(19, 21, 0), new ScheduledTask(28, 38, 0), new ScheduledTask(24, 28, 0), new ScheduledTask(38, 43, 0), new ScheduledTask(54, 57, 1)};
        int[] expectedProcessorEndTimes = new int[]{43, 57};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(24, 32, 1), new ScheduledTask(48, 52, 1), new ScheduledTask(32, 37, 1), new ScheduledTask(13, 17, 1), new ScheduledTask(4, 13, 0), new ScheduledTask(46, 48, 1), new ScheduledTask(13, 22, 0), new ScheduledTask(37, 46, 1), new ScheduledTask(22, 30, 0), new ScheduledTask(13, 16, 2), new ScheduledTask(2, 4, 0), new ScheduledTask(30, 40, 0), new ScheduledTask(29, 33, 3), new ScheduledTask(34, 39, 3), new ScheduledTask(52, 55, 1)};
        int[] expectedProcessorEndTimes = new int[]{40, 55, 16, 39};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_10dot03_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_10.03_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(57, 62, 1), new ScheduledTask(33, 43, 1), new ScheduledTask(8, 11, 0), new ScheduledTask(50, 57, 1), new ScheduledTask(46, 50, 1), new ScheduledTask(43, 46, 1), new ScheduledTask(19, 25, 1), new ScheduledTask(25, 29, 1), new ScheduledTask(19, 29, 0), new ScheduledTask(29, 34, 0), new ScheduledTask(11, 19, 0), new ScheduledTask(34, 40, 0), new ScheduledTask(31, 33, 1), new ScheduledTask(40, 44, 0), new ScheduledTask(62, 68, 1)};
        int[] expectedProcessorEndTimes = new int[]{44, 68};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_10dot03_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_10.03_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(56, 61, 1), new ScheduledTask(29, 39, 1), new ScheduledTask(8, 11, 0), new ScheduledTask(49, 56, 1), new ScheduledTask(45, 49, 1), new ScheduledTask(42, 45, 1), new ScheduledTask(19, 25, 2), new ScheduledTask(25, 29, 1), new ScheduledTask(19, 29, 0), new ScheduledTask(29, 34, 0), new ScheduledTask(11, 19, 0), new ScheduledTask(34, 40, 0), new ScheduledTask(31, 33, 3), new ScheduledTask(33, 37, 3), new ScheduledTask(62, 68, 1)};
        int[] expectedProcessorEndTimes = new int[]{40, 68, 25, 37};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_10dot03_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_10.03_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(56, 61, 1), new ScheduledTask(29, 39, 1), new ScheduledTask(8, 11, 0), new ScheduledTask(49, 56, 1), new ScheduledTask(45, 49, 1), new ScheduledTask(42, 45, 1), new ScheduledTask(19, 25, 2), new ScheduledTask(25, 29, 1), new ScheduledTask(19, 29, 0), new ScheduledTask(29, 34, 0), new ScheduledTask(11, 19, 0), new ScheduledTask(34, 40, 0), new ScheduledTask(31, 33, 3), new ScheduledTask(19, 23, 4), new ScheduledTask(62, 68, 1)};
        int[] expectedProcessorEndTimes = new int[]{40, 68, 25, 33, 23};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_10dot03_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_10.03_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 74;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(54, 64, 1), new ScheduledTask(19, 28, 1), new ScheduledTask(28, 32, 1), new ScheduledTask(49, 54, 1), new ScheduledTask(6, 10, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(43, 49, 1), new ScheduledTask(40, 43, 1), new ScheduledTask(19, 24, 0), new ScheduledTask(24, 32, 0), new ScheduledTask(32, 40, 1), new ScheduledTask(32, 37, 0), new ScheduledTask(40, 48, 0), new ScheduledTask(37, 40, 0), new ScheduledTask(64, 74, 1)};
        int[] expectedProcessorEndTimes = new int[]{48, 74};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_10dot03_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_10.03_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 74;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(54, 64, 1), new ScheduledTask(19, 28, 1), new ScheduledTask(28, 32, 1), new ScheduledTask(49, 54, 1), new ScheduledTask(6, 10, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(43, 49, 1), new ScheduledTask(40, 43, 1), new ScheduledTask(19, 24, 0), new ScheduledTask(24, 32, 0), new ScheduledTask(32, 40, 1), new ScheduledTask(32, 37, 0), new ScheduledTask(37, 45, 0), new ScheduledTask(32, 35, 2), new ScheduledTask(64, 74, 1)};
        int[] expectedProcessorEndTimes = new int[]{45, 74, 35};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_10dot06_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_10.06_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(23, 29, 1), new ScheduledTask(8, 11, 0), new ScheduledTask(53, 61, 1), new ScheduledTask(13, 23, 0), new ScheduledTask(47, 53, 1), new ScheduledTask(29, 38, 1), new ScheduledTask(23, 29, 0), new ScheduledTask(38, 47, 1), new ScheduledTask(28, 36, 2), new ScheduledTask(11, 13, 0), new ScheduledTask(23, 25, 3), new ScheduledTask(32, 36, 0), new ScheduledTask(29, 32, 0), new ScheduledTask(36, 38, 0), new ScheduledTask(61, 63, 1)};
        int[] expectedProcessorEndTimes = new int[]{38, 63, 36, 25};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_10dot06_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_10.06_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(52, 58, 1), new ScheduledTask(8, 11, 0), new ScheduledTask(11, 19, 0), new ScheduledTask(23, 33, 1), new ScheduledTask(33, 39, 1), new ScheduledTask(43, 52, 1), new ScheduledTask(19, 25, 0), new ScheduledTask(27, 36, 0), new ScheduledTask(28, 36, 2), new ScheduledTask(25, 27, 0), new ScheduledTask(23, 25, 3), new ScheduledTask(39, 43, 1), new ScheduledTask(58, 61, 1), new ScheduledTask(36, 38, 0), new ScheduledTask(61, 63, 1)};
        int[] expectedProcessorEndTimes = new int[]{38, 63, 36, 25};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_9dot97_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_9.97_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(35, 42, 1), new ScheduledTask(42, 44, 1), new ScheduledTask(44, 49, 1), new ScheduledTask(6, 9, 0), new ScheduledTask(19, 25, 1), new ScheduledTask(9, 13, 0), new ScheduledTask(13, 20, 0), new ScheduledTask(24, 28, 0), new ScheduledTask(22, 24, 0), new ScheduledTask(28, 34, 0), new ScheduledTask(25, 35, 1), new ScheduledTask(15, 19, 1), new ScheduledTask(34, 39, 0), new ScheduledTask(20, 22, 0), new ScheduledTask(49, 52, 1)};
        int[] expectedProcessorEndTimes = new int[]{39, 52};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_9dot97_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_9.97_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(34, 41, 1), new ScheduledTask(20, 22, 1), new ScheduledTask(43, 48, 1), new ScheduledTask(29, 32, 1), new ScheduledTask(22, 28, 1), new ScheduledTask(6, 10, 0), new ScheduledTask(10, 17, 0), new ScheduledTask(21, 25, 0), new ScheduledTask(19, 21, 0), new ScheduledTask(25, 31, 0), new ScheduledTask(25, 35, 2), new ScheduledTask(15, 19, 3), new ScheduledTask(31, 36, 0), new ScheduledTask(17, 19, 0), new ScheduledTask(48, 51, 1)};
        int[] expectedProcessorEndTimes = new int[]{36, 51, 35, 19};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_9dot97_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_9.97_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(34, 41, 1), new ScheduledTask(20, 22, 1), new ScheduledTask(43, 48, 1), new ScheduledTask(29, 32, 1), new ScheduledTask(22, 28, 1), new ScheduledTask(6, 10, 0), new ScheduledTask(10, 17, 0), new ScheduledTask(21, 25, 0), new ScheduledTask(19, 21, 0), new ScheduledTask(25, 31, 0), new ScheduledTask(25, 35, 2), new ScheduledTask(15, 19, 3), new ScheduledTask(31, 36, 0), new ScheduledTask(17, 19, 0), new ScheduledTask(48, 51, 1)};
        int[] expectedProcessorEndTimes = new int[]{36, 51, 35, 19};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_9dot99_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_9.99_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(48, 54, 0), new ScheduledTask(24, 32, 0), new ScheduledTask(38, 48, 0), new ScheduledTask(54, 60, 0), new ScheduledTask(32, 36, 0), new ScheduledTask(20, 25, 1), new ScheduledTask(16, 24, 0), new ScheduledTask(12, 16, 0), new ScheduledTask(32, 35, 1), new ScheduledTask(37, 45, 1), new ScheduledTask(25, 32, 1), new ScheduledTask(45, 50, 1), new ScheduledTask(8, 12, 0), new ScheduledTask(36, 38, 0), new ScheduledTask(62, 66, 0)};
        int[] expectedProcessorEndTimes = new int[]{66, 50};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_9dot99_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_9.99_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(48, 54, 0), new ScheduledTask(24, 32, 0), new ScheduledTask(38, 48, 0), new ScheduledTask(54, 60, 0), new ScheduledTask(32, 36, 0), new ScheduledTask(20, 25, 1), new ScheduledTask(16, 24, 0), new ScheduledTask(12, 16, 0), new ScheduledTask(31, 34, 2), new ScheduledTask(37, 45, 3), new ScheduledTask(25, 32, 3), new ScheduledTask(45, 50, 3), new ScheduledTask(8, 12, 0), new ScheduledTask(36, 38, 0), new ScheduledTask(62, 66, 0)};
        int[] expectedProcessorEndTimes = new int[]{66, 25, 34, 50};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_9dot99_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_9.99_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(48, 54, 0), new ScheduledTask(24, 32, 0), new ScheduledTask(38, 48, 0), new ScheduledTask(54, 60, 0), new ScheduledTask(32, 36, 0), new ScheduledTask(20, 25, 1), new ScheduledTask(16, 24, 0), new ScheduledTask(12, 16, 0), new ScheduledTask(31, 34, 2), new ScheduledTask(37, 45, 3), new ScheduledTask(25, 32, 4), new ScheduledTask(43, 48, 5), new ScheduledTask(8, 12, 0), new ScheduledTask(36, 38, 0), new ScheduledTask(62, 66, 0)};
        int[] expectedProcessorEndTimes = new int[]{66, 25, 34, 45, 32, 48};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(13, 22, 0), new ScheduledTask(22, 32, 0), new ScheduledTask(32, 35, 0), new ScheduledTask(37, 45, 0), new ScheduledTask(35, 37, 0), new ScheduledTask(7, 13, 0), new ScheduledTask(12, 20, 1), new ScheduledTask(20, 27, 1), new ScheduledTask(49, 58, 0), new ScheduledTask(45, 49, 0), new ScheduledTask(5, 7, 0), new ScheduledTask(27, 29, 1), new ScheduledTask(29, 34, 1), new ScheduledTask(3, 5, 0), new ScheduledTask(58, 63, 0)};
        int[] expectedProcessorEndTimes = new int[]{63, 34};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(13, 22, 0), new ScheduledTask(22, 32, 0), new ScheduledTask(32, 35, 0), new ScheduledTask(37, 45, 0), new ScheduledTask(35, 37, 0), new ScheduledTask(7, 13, 0), new ScheduledTask(12, 20, 1), new ScheduledTask(20, 27, 1), new ScheduledTask(49, 58, 0), new ScheduledTask(45, 49, 0), new ScheduledTask(5, 7, 0), new ScheduledTask(17, 19, 2), new ScheduledTask(26, 31, 3), new ScheduledTask(3, 5, 0), new ScheduledTask(58, 63, 0)};
        int[] expectedProcessorEndTimes = new int[]{63, 27, 19, 31};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 377;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 29, 0), new ScheduledTask(192, 265, 1), new ScheduledTask(29, 102, 0), new ScheduledTask(287, 360, 1), new ScheduledTask(31, 104, 1), new ScheduledTask(131, 196, 0), new ScheduledTask(196, 247, 0), new ScheduledTask(104, 148, 1), new ScheduledTask(148, 192, 1), new ScheduledTask(247, 283, 0), new ScheduledTask(283, 319, 0), new ScheduledTask(319, 348, 0), new ScheduledTask(102, 131, 0), new ScheduledTask(348, 377, 0), new ScheduledTask(265, 287, 1), new ScheduledTask(360, 375, 1)};
        int[] expectedProcessorEndTimes = new int[]{377, 375};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 205;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 29, 0), new ScheduledTask(117, 190, 0), new ScheduledTask(31, 104, 1), new ScheduledTask(126, 199, 2), new ScheduledTask(31, 104, 2), new ScheduledTask(60, 125, 3), new ScheduledTask(125, 176, 3), new ScheduledTask(29, 73, 0), new ScheduledTask(73, 117, 0), new ScheduledTask(104, 140, 1), new ScheduledTask(140, 176, 1), new ScheduledTask(176, 205, 1), new ScheduledTask(31, 60, 3), new ScheduledTask(176, 205, 3), new ScheduledTask(104, 126, 2), new ScheduledTask(190, 205, 0)};
        int[] expectedProcessorEndTimes = new int[]{205, 205, 199, 205};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 148;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 29, 0), new ScheduledTask(75, 148, 1), new ScheduledTask(31, 104, 2), new ScheduledTask(73, 146, 0), new ScheduledTask(31, 104, 3), new ScheduledTask(32, 97, 4), new ScheduledTask(32, 83, 5), new ScheduledTask(29, 73, 0), new ScheduledTask(31, 75, 1), new ScheduledTask(83, 119, 5), new ScheduledTask(104, 140, 3), new ScheduledTask(119, 148, 4), new ScheduledTask(104, 133, 2), new ScheduledTask(119, 148, 5), new ScheduledTask(97, 119, 4), new ScheduledTask(133, 148, 2)};
        int[] expectedProcessorEndTimes = new int[]{146, 148, 148, 140, 148, 148};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 416;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 42, 0), new ScheduledTask(152, 237, 0), new ScheduledTask(44, 120, 1), new ScheduledTask(247, 323, 1), new ScheduledTask(237, 305, 0), new ScheduledTask(137, 196, 1), new ScheduledTask(365, 416, 1), new ScheduledTask(305, 356, 0), new ScheduledTask(196, 247, 1), new ScheduledTask(42, 93, 0), new ScheduledTask(323, 365, 1), new ScheduledTask(93, 127, 0), new ScheduledTask(356, 390, 0), new ScheduledTask(127, 152, 0), new ScheduledTask(390, 415, 0), new ScheduledTask(120, 137, 1)};
        int[] expectedProcessorEndTimes = new int[]{415, 416};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 231;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 42, 0), new ScheduledTask(95, 180, 1), new ScheduledTask(44, 120, 2), new ScheduledTask(155, 231, 3), new ScheduledTask(87, 155, 3), new ScheduledTask(120, 179, 2), new ScheduledTask(179, 230, 2), new ScheduledTask(76, 127, 0), new ScheduledTask(180, 231, 1), new ScheduledTask(44, 95, 1), new ScheduledTask(161, 203, 0), new ScheduledTask(42, 76, 0), new ScheduledTask(127, 161, 0), new ScheduledTask(62, 87, 3), new ScheduledTask(203, 228, 0), new ScheduledTask(45, 62, 3)};
        int[] expectedProcessorEndTimes = new int[]{228, 231, 230, 231};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 171;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 42, 0), new ScheduledTask(80, 165, 1), new ScheduledTask(44, 120, 2), new ScheduledTask(95, 171, 3), new ScheduledTask(47, 115, 4), new ScheduledTask(62, 121, 5), new ScheduledTask(120, 171, 2), new ScheduledTask(42, 93, 0), new ScheduledTask(115, 166, 4), new ScheduledTask(44, 95, 3), new ScheduledTask(127, 169, 0), new ScheduledTask(46, 80, 1), new ScheduledTask(93, 127, 0), new ScheduledTask(121, 146, 5), new ScheduledTask(146, 171, 5), new ScheduledTask(45, 62, 5)};
        int[] expectedProcessorEndTimes = new int[]{169, 165, 171, 171, 166, 171};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 582;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 105, 0), new ScheduledTask(263, 380, 1), new ScheduledTask(380, 462, 1), new ScheduledTask(111, 193, 1), new ScheduledTask(509, 579, 1), new ScheduledTask(193, 263, 1), new ScheduledTask(198, 268, 0), new ScheduledTask(349, 419, 0), new ScheduledTask(419, 489, 0), new ScheduledTask(489, 547, 0), new ScheduledTask(105, 163, 0), new ScheduledTask(268, 326, 0), new ScheduledTask(462, 509, 1), new ScheduledTask(547, 582, 0), new ScheduledTask(163, 198, 0), new ScheduledTask(326, 349, 0)};
        int[] expectedProcessorEndTimes = new int[]{582, 579};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 349;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 105, 0), new ScheduledTask(114, 231, 1), new ScheduledTask(263, 345, 2), new ScheduledTask(111, 193, 2), new ScheduledTask(272, 342, 3), new ScheduledTask(202, 272, 3), new ScheduledTask(109, 179, 3), new ScheduledTask(193, 263, 2), new ScheduledTask(231, 301, 1), new ScheduledTask(256, 314, 0), new ScheduledTask(105, 163, 0), new ScheduledTask(198, 256, 0), new ScheduledTask(301, 348, 1), new ScheduledTask(314, 349, 0), new ScheduledTask(163, 198, 0), new ScheduledTask(179, 202, 3)};
        int[] expectedProcessorEndTimes = new int[]{349, 348, 345, 342};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 271;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 105, 0), new ScheduledTask(105, 222, 0), new ScheduledTask(182, 264, 1), new ScheduledTask(111, 193, 2), new ScheduledTask(191, 261, 3), new ScheduledTask(112, 182, 1), new ScheduledTask(165, 235, 4), new ScheduledTask(143, 213, 5), new ScheduledTask(193, 263, 2), new ScheduledTask(213, 271, 5), new ScheduledTask(107, 165, 4), new ScheduledTask(110, 168, 3), new ScheduledTask(222, 269, 0), new ScheduledTask(235, 270, 4), new ScheduledTask(108, 143, 5), new ScheduledTask(168, 191, 3)};
        int[] expectedProcessorEndTimes = new int[]{269, 264, 263, 261, 270, 271};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 471;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 86, 0), new ScheduledTask(141, 227, 1), new ScheduledTask(305, 391, 1), new ScheduledTask(103, 180, 0), new ScheduledTask(394, 471, 0), new ScheduledTask(180, 240, 0), new ScheduledTask(89, 141, 1), new ScheduledTask(253, 305, 1), new ScheduledTask(417, 469, 1), new ScheduledTask(308, 351, 0), new ScheduledTask(351, 394, 0), new ScheduledTask(274, 308, 0), new ScheduledTask(240, 274, 0), new ScheduledTask(227, 253, 1), new ScheduledTask(391, 417, 1), new ScheduledTask(86, 103, 0)};
        int[] expectedProcessorEndTimes = new int[]{471, 469};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 283;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 86, 0), new ScheduledTask(105, 191, 1), new ScheduledTask(144, 230, 2), new ScheduledTask(89, 166, 3), new ScheduledTask(206, 283, 0), new ScheduledTask(166, 226, 3), new ScheduledTask(226, 278, 3), new ScheduledTask(92, 144, 2), new ScheduledTask(230, 282, 2), new ScheduledTask(191, 234, 1), new ScheduledTask(234, 277, 1), new ScheduledTask(146, 180, 0), new ScheduledTask(86, 120, 0), new ScheduledTask(120, 146, 0), new ScheduledTask(180, 206, 0), new ScheduledTask(88, 105, 1)};
        int[] expectedProcessorEndTimes = new int[]{283, 277, 282, 278};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 218;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 86, 0), new ScheduledTask(105, 191, 1), new ScheduledTask(126, 212, 2), new ScheduledTask(89, 166, 3), new ScheduledTask(141, 218, 4), new ScheduledTask(89, 149, 5), new ScheduledTask(89, 141, 4), new ScheduledTask(120, 172, 0), new ScheduledTask(166, 218, 3), new ScheduledTask(172, 215, 0), new ScheduledTask(175, 218, 5), new ScheduledTask(92, 126, 2), new ScheduledTask(86, 120, 0), new ScheduledTask(149, 175, 5), new ScheduledTask(191, 217, 1), new ScheduledTask(88, 105, 1)};
        int[] expectedProcessorEndTimes = new int[]{215, 217, 212, 218, 218, 218};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 552;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 120, 0), new ScheduledTask(288, 408, 0), new ScheduledTask(194, 278, 1), new ScheduledTask(122, 194, 1), new ScheduledTask(444, 516, 0), new ScheduledTask(144, 216, 0), new ScheduledTask(326, 386, 1), new ScheduledTask(434, 494, 1), new ScheduledTask(386, 434, 1), new ScheduledTask(494, 542, 1), new ScheduledTask(278, 326, 1), new ScheduledTask(240, 288, 0), new ScheduledTask(516, 552, 0), new ScheduledTask(408, 444, 0), new ScheduledTask(120, 144, 0), new ScheduledTask(216, 240, 0)};
        int[] expectedProcessorEndTimes = new int[]{552, 542};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 338;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 120, 0), new ScheduledTask(216, 336, 0), new ScheduledTask(125, 209, 1), new ScheduledTask(122, 194, 2), new ScheduledTask(266, 338, 3), new ScheduledTask(120, 192, 0), new ScheduledTask(146, 206, 3), new ScheduledTask(206, 266, 3), new ScheduledTask(242, 290, 2), new ScheduledTask(290, 338, 2), new ScheduledTask(194, 242, 2), new ScheduledTask(209, 257, 1), new ScheduledTask(293, 329, 1), new ScheduledTask(257, 293, 1), new ScheduledTask(122, 146, 3), new ScheduledTask(192, 216, 0)};
        int[] expectedProcessorEndTimes = new int[]{336, 329, 338, 338};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 268;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 120, 0), new ScheduledTask(148, 268, 1), new ScheduledTask(125, 209, 2), new ScheduledTask(122, 194, 3), new ScheduledTask(194, 266, 3), new ScheduledTask(123, 195, 4), new ScheduledTask(146, 206, 5), new ScheduledTask(206, 266, 5), new ScheduledTask(209, 257, 2), new ScheduledTask(216, 264, 0), new ScheduledTask(168, 216, 0), new ScheduledTask(120, 168, 0), new ScheduledTask(231, 267, 4), new ScheduledTask(195, 231, 4), new ScheduledTask(122, 146, 5), new ScheduledTask(124, 148, 1)};
        int[] expectedProcessorEndTimes = new int[]{264, 268, 257, 266, 267, 266};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 477;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 49, 0), new ScheduledTask(49, 148, 0), new ScheduledTask(148, 247, 0), new ScheduledTask(161, 250, 1), new ScheduledTask(250, 329, 1), new ScheduledTask(52, 131, 1), new ScheduledTask(329, 408, 1), new ScheduledTask(408, 477, 1), new ScheduledTask(407, 476, 0), new ScheduledTask(297, 327, 0), new ScheduledTask(131, 161, 1), new ScheduledTask(327, 357, 0), new ScheduledTask(247, 277, 0), new ScheduledTask(377, 407, 0), new ScheduledTask(357, 377, 0), new ScheduledTask(277, 297, 0)};
        int[] expectedProcessorEndTimes = new int[]{476, 477};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 269;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 49, 0), new ScheduledTask(49, 148, 0), new ScheduledTask(54, 153, 1), new ScheduledTask(173, 262, 1), new ScheduledTask(103, 182, 2), new ScheduledTask(52, 131, 3), new ScheduledTask(182, 261, 2), new ScheduledTask(200, 269, 3), new ScheduledTask(131, 200, 3), new ScheduledTask(178, 208, 0), new ScheduledTask(53, 83, 2), new ScheduledTask(208, 238, 0), new ScheduledTask(148, 178, 0), new ScheduledTask(238, 268, 0), new ScheduledTask(83, 103, 2), new ScheduledTask(153, 173, 1)};
        int[] expectedProcessorEndTimes = new int[]{268, 262, 261, 269};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 202;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 49, 0), new ScheduledTask(54, 153, 1), new ScheduledTask(83, 182, 2), new ScheduledTask(74, 163, 3), new ScheduledTask(49, 128, 0), new ScheduledTask(52, 131, 4), new ScheduledTask(114, 193, 5), new ScheduledTask(128, 197, 0), new ScheduledTask(131, 200, 4), new ScheduledTask(153, 183, 1), new ScheduledTask(53, 83, 2), new ScheduledTask(84, 114, 5), new ScheduledTask(54, 84, 5), new ScheduledTask(163, 193, 3), new ScheduledTask(182, 202, 2), new ScheduledTask(54, 74, 3)};
        int[] expectedProcessorEndTimes = new int[]{197, 183, 202, 193, 200, 193};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 479;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 21, 0), new ScheduledTask(276, 383, 0), new ScheduledTask(23, 130, 1), new ScheduledTask(21, 117, 0), new ScheduledTask(258, 344, 1), new ScheduledTask(344, 430, 1), new ScheduledTask(130, 194, 1), new ScheduledTask(194, 258, 1), new ScheduledTask(383, 447, 0), new ScheduledTask(191, 244, 0), new ScheduledTask(430, 473, 1), new ScheduledTask(244, 276, 0), new ScheduledTask(447, 479, 0), new ScheduledTask(138, 170, 0), new ScheduledTask(117, 138, 0), new ScheduledTask(170, 191, 0)};
        int[] expectedProcessorEndTimes = new int[]{479, 473};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 255;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 21, 0), new ScheduledTask(140, 247, 1), new ScheduledTask(23, 130, 2), new ScheduledTask(23, 119, 3), new ScheduledTask(119, 205, 3), new ScheduledTask(162, 248, 2), new ScheduledTask(23, 87, 1), new ScheduledTask(21, 85, 0), new ScheduledTask(159, 223, 0), new ScheduledTask(87, 140, 1), new ScheduledTask(205, 248, 3), new ScheduledTask(130, 162, 2), new ScheduledTask(223, 255, 0), new ScheduledTask(106, 138, 0), new ScheduledTask(85, 106, 0), new ScheduledTask(138, 159, 0)};
        int[] expectedProcessorEndTimes = new int[]{255, 247, 248, 248};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 181;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 21, 0), new ScheduledTask(74, 181, 0), new ScheduledTask(23, 130, 1), new ScheduledTask(23, 119, 2), new ScheduledTask(28, 114, 3), new ScheduledTask(30, 116, 4), new ScheduledTask(23, 87, 5), new ScheduledTask(87, 151, 5), new ScheduledTask(116, 180, 4), new ScheduledTask(119, 172, 2), new ScheduledTask(130, 173, 1), new ScheduledTask(114, 146, 3), new ScheduledTask(146, 178, 3), new ScheduledTask(21, 53, 0), new ScheduledTask(151, 172, 5), new ScheduledTask(53, 74, 0)};
        int[] expectedProcessorEndTimes = new int[]{181, 173, 172, 178, 180, 172};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 532;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 23, 0), new ScheduledTask(23, 125, 0), new ScheduledTask(125, 227, 0), new ScheduledTask(184, 275, 1), new ScheduledTask(93, 184, 1), new ScheduledTask(227, 306, 0), new ScheduledTask(332, 411, 1), new ScheduledTask(306, 374, 0), new ScheduledTask(25, 93, 1), new ScheduledTask(374, 442, 0), new ScheduledTask(275, 332, 1), new ScheduledTask(434, 491, 1), new ScheduledTask(442, 487, 0), new ScheduledTask(487, 532, 0), new ScheduledTask(491, 525, 1), new ScheduledTask(411, 434, 1)};
        int[] expectedProcessorEndTimes = new int[]{532, 525};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 283;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 23, 0), new ScheduledTask(117, 219, 1), new ScheduledTask(91, 193, 0), new ScheduledTask(27, 118, 2), new ScheduledTask(26, 117, 1), new ScheduledTask(130, 209, 3), new ScheduledTask(28, 107, 3), new ScheduledTask(175, 243, 2), new ScheduledTask(23, 91, 0), new ScheduledTask(209, 277, 3), new ScheduledTask(118, 175, 2), new ScheduledTask(219, 276, 1), new ScheduledTask(193, 238, 0), new ScheduledTask(238, 283, 0), new ScheduledTask(243, 277, 2), new ScheduledTask(107, 130, 3)};
        int[] expectedProcessorEndTimes = new int[]{283, 276, 277, 277};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 197;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 23, 0), new ScheduledTask(27, 129, 1), new ScheduledTask(31, 133, 2), new ScheduledTask(27, 118, 3), new ScheduledTask(23, 114, 0), new ScheduledTask(114, 193, 0), new ScheduledTask(118, 197, 3), new ScheduledTask(84, 152, 4), new ScheduledTask(25, 93, 5), new ScheduledTask(93, 161, 5), new ScheduledTask(27, 84, 4), new ScheduledTask(133, 190, 2), new ScheduledTask(152, 197, 1), new ScheduledTask(152, 197, 4), new ScheduledTask(161, 195, 5), new ScheduledTask(129, 152, 1)};
        int[] expectedProcessorEndTimes = new int[]{193, 197, 190, 197, 197, 195};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 563;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 73, 0), new ScheduledTask(159, 269, 0), new ScheduledTask(379, 477, 1), new ScheduledTask(269, 367, 0), new ScheduledTask(294, 379, 1), new ScheduledTask(136, 221, 1), new ScheduledTask(477, 562, 1), new ScheduledTask(221, 294, 1), new ScheduledTask(75, 136, 1), new ScheduledTask(514, 563, 0), new ScheduledTask(441, 490, 0), new ScheduledTask(110, 159, 0), new ScheduledTask(367, 404, 0), new ScheduledTask(73, 110, 0), new ScheduledTask(404, 441, 0), new ScheduledTask(490, 514, 0)};
        int[] expectedProcessorEndTimes = new int[]{563, 562};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 321;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 73, 0), new ScheduledTask(113, 223, 1), new ScheduledTask(136, 234, 2), new ScheduledTask(223, 321, 1), new ScheduledTask(212, 297, 3), new ScheduledTask(127, 212, 3), new ScheduledTask(234, 319, 2), new ScheduledTask(73, 146, 0), new ScheduledTask(75, 136, 2), new ScheduledTask(269, 318, 0), new ScheduledTask(220, 269, 0), new ScheduledTask(78, 127, 3), new ScheduledTask(146, 183, 0), new ScheduledTask(76, 113, 1), new ScheduledTask(183, 220, 0), new ScheduledTask(297, 321, 3)};
        int[] expectedProcessorEndTimes = new int[]{318, 321, 319, 321};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 247;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 73, 0), new ScheduledTask(127, 237, 1), new ScheduledTask(130, 228, 2), new ScheduledTask(73, 171, 0), new ScheduledTask(113, 198, 3), new ScheduledTask(136, 221, 4), new ScheduledTask(153, 238, 5), new ScheduledTask(80, 153, 5), new ScheduledTask(75, 136, 4), new ScheduledTask(198, 247, 3), new ScheduledTask(81, 130, 2), new ScheduledTask(78, 127, 1), new ScheduledTask(171, 208, 0), new ScheduledTask(76, 113, 3), new ScheduledTask(208, 245, 0), new ScheduledTask(221, 245, 4)};
        int[] expectedProcessorEndTimes = new int[]{245, 237, 228, 247, 245, 238};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 490;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 61, 0), new ScheduledTask(221, 309, 1), new ScheduledTask(327, 415, 1), new ScheduledTask(142, 221, 1), new ScheduledTask(63, 142, 1), new ScheduledTask(415, 485, 1), new ScheduledTask(140, 210, 0), new ScheduledTask(210, 271, 0), new ScheduledTask(271, 332, 0), new ScheduledTask(87, 140, 0), new ScheduledTask(332, 376, 0), new ScheduledTask(446, 490, 0), new ScheduledTask(411, 446, 0), new ScheduledTask(376, 411, 0), new ScheduledTask(61, 87, 0), new ScheduledTask(309, 327, 1)};
        int[] expectedProcessorEndTimes = new int[]{490, 485};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 279;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 61, 0), new ScheduledTask(142, 230, 1), new ScheduledTask(187, 275, 2), new ScheduledTask(65, 144, 3), new ScheduledTask(63, 142, 1), new ScheduledTask(206, 276, 3), new ScheduledTask(117, 187, 2), new ScheduledTask(87, 148, 0), new ScheduledTask(148, 209, 0), new ScheduledTask(64, 117, 2), new ScheduledTask(162, 206, 3), new ScheduledTask(230, 274, 1), new ScheduledTask(244, 279, 0), new ScheduledTask(209, 244, 0), new ScheduledTask(61, 87, 0), new ScheduledTask(144, 162, 3)};
        int[] expectedProcessorEndTimes = new int[]{279, 274, 275, 276};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 210;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 61, 0), new ScheduledTask(67, 155, 1), new ScheduledTask(117, 205, 2), new ScheduledTask(65, 144, 3), new ScheduledTask(63, 142, 4), new ScheduledTask(135, 205, 5), new ScheduledTask(65, 135, 5), new ScheduledTask(142, 203, 4), new ScheduledTask(144, 205, 3), new ScheduledTask(64, 117, 2), new ScheduledTask(87, 131, 0), new ScheduledTask(166, 210, 0), new ScheduledTask(173, 208, 1), new ScheduledTask(131, 166, 0), new ScheduledTask(61, 87, 0), new ScheduledTask(155, 173, 1)};
        int[] expectedProcessorEndTimes = new int[]{210, 208, 205, 205, 203, 205};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot97_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.97_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 60;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(31, 41, 0), new ScheduledTask(5, 15, 0), new ScheduledTask(44, 54, 1), new ScheduledTask(13, 23, 1), new ScheduledTask(18, 27, 0), new ScheduledTask(41, 50, 0), new ScheduledTask(30, 38, 1), new ScheduledTask(23, 30, 1), new ScheduledTask(7, 13, 1), new ScheduledTask(38, 44, 1), new ScheduledTask(54, 60, 1), new ScheduledTask(50, 55, 0), new ScheduledTask(55, 60, 0), new ScheduledTask(27, 31, 0), new ScheduledTask(15, 18, 0)};
        int[] expectedProcessorEndTimes = new int[]{60, 60};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot97_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.97_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 34;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(14, 24, 0), new ScheduledTask(8, 18, 1), new ScheduledTask(24, 34, 0), new ScheduledTask(8, 18, 2), new ScheduledTask(5, 14, 0), new ScheduledTask(17, 26, 3), new ScheduledTask(26, 34, 3), new ScheduledTask(21, 28, 2), new ScheduledTask(7, 13, 3), new ScheduledTask(28, 34, 2), new ScheduledTask(28, 34, 1), new ScheduledTask(18, 23, 1), new ScheduledTask(23, 28, 1), new ScheduledTask(13, 17, 3), new ScheduledTask(18, 21, 2)};
        int[] expectedProcessorEndTimes = new int[]{34, 34, 34, 34};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot97_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.97_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 27;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(17, 27, 1), new ScheduledTask(8, 18, 2), new ScheduledTask(10, 20, 0), new ScheduledTask(8, 18, 3), new ScheduledTask(13, 22, 4), new ScheduledTask(18, 27, 3), new ScheduledTask(19, 27, 5), new ScheduledTask(12, 19, 5), new ScheduledTask(7, 13, 4), new ScheduledTask(18, 24, 2), new ScheduledTask(20, 26, 0), new ScheduledTask(5, 10, 0), new ScheduledTask(22, 27, 4), new ScheduledTask(13, 17, 1), new ScheduledTask(8, 11, 5)};
        int[] expectedProcessorEndTimes = new int[]{26, 27, 24, 27, 27, 27};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot98_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.98_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 49;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 11, 0), new ScheduledTask(4, 13, 1), new ScheduledTask(11, 20, 0), new ScheduledTask(13, 22, 1), new ScheduledTask(20, 29, 0), new ScheduledTask(22, 30, 1), new ScheduledTask(29, 36, 0), new ScheduledTask(30, 36, 1), new ScheduledTask(36, 42, 0), new ScheduledTask(36, 41, 1), new ScheduledTask(41, 45, 1), new ScheduledTask(42, 45, 0), new ScheduledTask(45, 48, 0), new ScheduledTask(45, 47, 1), new ScheduledTask(47, 49, 1)};
        int[] expectedProcessorEndTimes = new int[]{48, 49};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot98_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.98_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 27;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(6, 15, 1), new ScheduledTask(4, 13, 2), new ScheduledTask(7, 16, 3), new ScheduledTask(13, 22, 2), new ScheduledTask(16, 25, 3), new ScheduledTask(15, 23, 1), new ScheduledTask(5, 12, 0), new ScheduledTask(21, 27, 0), new ScheduledTask(12, 18, 0), new ScheduledTask(22, 27, 2), new ScheduledTask(23, 27, 1), new ScheduledTask(2, 5, 0), new ScheduledTask(18, 21, 0), new ScheduledTask(5, 7, 3), new ScheduledTask(25, 27, 3)};
        int[] expectedProcessorEndTimes = new int[]{27, 27, 27, 27};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot98_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.98_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 20;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(6, 15, 1), new ScheduledTask(4, 13, 2), new ScheduledTask(6, 15, 3), new ScheduledTask(2, 11, 0), new ScheduledTask(7, 16, 4), new ScheduledTask(6, 14, 5), new ScheduledTask(13, 20, 2), new ScheduledTask(14, 20, 5), new ScheduledTask(11, 17, 0), new ScheduledTask(15, 20, 3), new ScheduledTask(16, 20, 4), new ScheduledTask(15, 18, 1), new ScheduledTask(17, 20, 0), new ScheduledTask(5, 7, 4), new ScheduledTask(18, 20, 1)};
        int[] expectedProcessorEndTimes = new int[]{20, 20, 20, 20, 20, 20};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(12, 22, 0), new ScheduledTask(39, 49, 0), new ScheduledTask(30, 39, 0), new ScheduledTask(10, 18, 1), new ScheduledTask(32, 40, 1), new ScheduledTask(25, 32, 1), new ScheduledTask(18, 25, 1), new ScheduledTask(48, 54, 1), new ScheduledTask(40, 45, 1), new ScheduledTask(49, 53, 0), new ScheduledTask(8, 12, 0), new ScheduledTask(45, 48, 1), new ScheduledTask(22, 25, 0), new ScheduledTask(25, 28, 0), new ScheduledTask(28, 30, 0)};
        int[] expectedProcessorEndTimes = new int[]{53, 54};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(14, 24, 1), new ScheduledTask(22, 32, 0), new ScheduledTask(13, 22, 0), new ScheduledTask(10, 18, 2), new ScheduledTask(24, 32, 3), new ScheduledTask(17, 24, 3), new ScheduledTask(10, 17, 3), new ScheduledTask(26, 32, 2), new ScheduledTask(18, 23, 2), new ScheduledTask(27, 31, 1), new ScheduledTask(10, 14, 1), new ScheduledTask(23, 26, 2), new ScheduledTask(8, 11, 0), new ScheduledTask(24, 27, 1), new ScheduledTask(11, 13, 0)};
        int[] expectedProcessorEndTimes = new int[]{32, 31, 32, 32};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 26;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(12, 22, 1), new ScheduledTask(15, 25, 0), new ScheduledTask(16, 25, 2), new ScheduledTask(10, 18, 3), new ScheduledTask(14, 22, 4), new ScheduledTask(8, 15, 0), new ScheduledTask(10, 17, 5), new ScheduledTask(20, 26, 5), new ScheduledTask(18, 23, 3), new ScheduledTask(22, 26, 4), new ScheduledTask(10, 14, 4), new ScheduledTask(23, 26, 3), new ScheduledTask(13, 16, 2), new ScheduledTask(17, 20, 5), new ScheduledTask(22, 24, 1)};
        int[] expectedProcessorEndTimes = new int[]{25, 24, 25, 26, 26, 26};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(25, 36, 0), new ScheduledTask(9, 20, 0), new ScheduledTask(26, 35, 1), new ScheduledTask(35, 44, 1), new ScheduledTask(44, 53, 1), new ScheduledTask(53, 61, 1), new ScheduledTask(14, 20, 1), new ScheduledTask(44, 50, 0), new ScheduledTask(20, 26, 1), new ScheduledTask(50, 55, 0), new ScheduledTask(55, 60, 0), new ScheduledTask(20, 25, 0), new ScheduledTask(36, 40, 0), new ScheduledTask(40, 44, 0), new ScheduledTask(12, 14, 1)};
        int[] expectedProcessorEndTimes = new int[]{60, 61};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(26, 37, 1), new ScheduledTask(15, 26, 1), new ScheduledTask(23, 32, 2), new ScheduledTask(19, 28, 3), new ScheduledTask(28, 37, 3), new ScheduledTask(18, 26, 0), new ScheduledTask(13, 19, 2), new ScheduledTask(26, 32, 0), new ScheduledTask(13, 19, 3), new ScheduledTask(32, 37, 0), new ScheduledTask(32, 37, 2), new ScheduledTask(9, 14, 0), new ScheduledTask(14, 18, 0), new ScheduledTask(19, 23, 2), new ScheduledTask(12, 14, 1)};
        int[] expectedProcessorEndTimes = new int[]{37, 37, 37, 37};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 20, 0), new ScheduledTask(15, 26, 1), new ScheduledTask(17, 26, 2), new ScheduledTask(20, 29, 3), new ScheduledTask(20, 29, 4), new ScheduledTask(23, 31, 5), new ScheduledTask(14, 20, 4), new ScheduledTask(24, 30, 0), new ScheduledTask(13, 19, 5), new ScheduledTask(26, 31, 1), new ScheduledTask(26, 31, 2), new ScheduledTask(15, 20, 3), new ScheduledTask(20, 24, 0), new ScheduledTask(19, 23, 5), new ScheduledTask(12, 14, 4)};
        int[] expectedProcessorEndTimes = new int[]{30, 31, 31, 29, 29, 31};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(42, 52, 0), new ScheduledTask(27, 36, 1), new ScheduledTask(12, 21, 1), new ScheduledTask(24, 31, 0), new ScheduledTask(43, 50, 1), new ScheduledTask(36, 43, 1), new ScheduledTask(50, 57, 1), new ScheduledTask(21, 27, 1), new ScheduledTask(13, 19, 0), new ScheduledTask(19, 24, 0), new ScheduledTask(31, 36, 0), new ScheduledTask(52, 57, 0), new ScheduledTask(38, 42, 0), new ScheduledTask(10, 13, 0), new ScheduledTask(36, 38, 0)};
        int[] expectedProcessorEndTimes = new int[]{57, 57};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(20, 30, 0), new ScheduledTask(21, 30, 1), new ScheduledTask(12, 21, 1), new ScheduledTask(24, 31, 2), new ScheduledTask(21, 28, 3), new ScheduledTask(14, 21, 3), new ScheduledTask(28, 35, 3), new ScheduledTask(12, 18, 2), new ScheduledTask(18, 24, 2), new ScheduledTask(30, 35, 1), new ScheduledTask(13, 18, 0), new ScheduledTask(30, 35, 0), new ScheduledTask(31, 35, 2), new ScheduledTask(10, 13, 0), new ScheduledTask(18, 20, 0)};
        int[] expectedProcessorEndTimes = new int[]{35, 35, 35, 35};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 28;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 20, 0), new ScheduledTask(14, 23, 1), new ScheduledTask(12, 21, 2), new ScheduledTask(21, 28, 3), new ScheduledTask(15, 22, 4), new ScheduledTask(14, 21, 3), new ScheduledTask(20, 27, 0), new ScheduledTask(12, 18, 5), new ScheduledTask(18, 24, 5), new ScheduledTask(22, 27, 4), new ScheduledTask(21, 26, 2), new ScheduledTask(23, 28, 1), new ScheduledTask(24, 28, 5), new ScheduledTask(12, 15, 4), new ScheduledTask(26, 28, 2)};
        int[] expectedProcessorEndTimes = new int[]{27, 28, 28, 28, 27, 28};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(41, 51, 1), new ScheduledTask(22, 31, 0), new ScheduledTask(3, 12, 0), new ScheduledTask(26, 34, 1), new ScheduledTask(5, 12, 1), new ScheduledTask(12, 19, 1), new ScheduledTask(19, 26, 1), new ScheduledTask(34, 41, 1), new ScheduledTask(31, 37, 0), new ScheduledTask(12, 17, 0), new ScheduledTask(17, 22, 0), new ScheduledTask(39, 43, 0), new ScheduledTask(46, 50, 0), new ScheduledTask(43, 46, 0), new ScheduledTask(37, 39, 0)};
        int[] expectedProcessorEndTimes = new int[]{50, 51};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 28;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(14, 24, 0), new ScheduledTask(10, 19, 1), new ScheduledTask(5, 14, 2), new ScheduledTask(19, 27, 3), new ScheduledTask(5, 12, 3), new ScheduledTask(12, 19, 3), new ScheduledTask(14, 21, 2), new ScheduledTask(21, 28, 2), new ScheduledTask(19, 25, 1), new ScheduledTask(5, 10, 1), new ScheduledTask(3, 8, 0), new ScheduledTask(10, 14, 0), new ScheduledTask(24, 28, 0), new ScheduledTask(25, 28, 1), new ScheduledTask(8, 10, 0)};
        int[] expectedProcessorEndTimes = new int[]{28, 28, 28, 27};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 21;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(6, 16, 0), new ScheduledTask(12, 21, 1), new ScheduledTask(5, 14, 2), new ScheduledTask(13, 21, 3), new ScheduledTask(5, 12, 4), new ScheduledTask(6, 13, 3), new ScheduledTask(10, 17, 5), new ScheduledTask(14, 21, 4), new ScheduledTask(14, 20, 2), new ScheduledTask(5, 10, 5), new ScheduledTask(7, 12, 1), new ScheduledTask(17, 21, 5), new ScheduledTask(16, 20, 0), new ScheduledTask(3, 6, 0), new ScheduledTask(12, 14, 4)};
        int[] expectedProcessorEndTimes = new int[]{20, 21, 20, 21, 21, 21};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot02_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.02_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(35, 44, 0), new ScheduledTask(41, 50, 1), new ScheduledTask(5, 13, 0), new ScheduledTask(21, 29, 1), new ScheduledTask(44, 52, 0), new ScheduledTask(23, 31, 0), new ScheduledTask(29, 36, 1), new ScheduledTask(9, 15, 1), new ScheduledTask(50, 56, 1), new ScheduledTask(15, 21, 1), new ScheduledTask(36, 41, 1), new ScheduledTask(13, 18, 0), new ScheduledTask(18, 23, 0), new ScheduledTask(52, 56, 0), new ScheduledTask(31, 35, 0)};
        int[] expectedProcessorEndTimes = new int[]{56, 56};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot02_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.02_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 33;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(24, 33, 0), new ScheduledTask(15, 24, 1), new ScheduledTask(9, 17, 2), new ScheduledTask(10, 18, 3), new ScheduledTask(24, 32, 1), new ScheduledTask(25, 33, 3), new ScheduledTask(18, 25, 3), new ScheduledTask(9, 15, 1), new ScheduledTask(27, 33, 2), new ScheduledTask(17, 23, 2), new ScheduledTask(15, 20, 0), new ScheduledTask(5, 10, 0), new ScheduledTask(10, 15, 0), new ScheduledTask(23, 27, 2), new ScheduledTask(20, 24, 0)};
        int[] expectedProcessorEndTimes = new int[]{33, 32, 33, 33};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot02_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.02_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 26;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 14, 0), new ScheduledTask(14, 23, 0), new ScheduledTask(9, 17, 1), new ScheduledTask(10, 18, 2), new ScheduledTask(18, 26, 2), new ScheduledTask(17, 25, 1), new ScheduledTask(10, 17, 3), new ScheduledTask(9, 15, 4), new ScheduledTask(20, 26, 5), new ScheduledTask(9, 15, 5), new ScheduledTask(15, 20, 5), new ScheduledTask(15, 20, 4), new ScheduledTask(20, 25, 4), new ScheduledTask(21, 25, 3), new ScheduledTask(17, 21, 3)};
        int[] expectedProcessorEndTimes = new int[]{23, 25, 26, 25, 25, 26};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(37, 47, 0), new ScheduledTask(25, 34, 1), new ScheduledTask(49, 58, 1), new ScheduledTask(34, 42, 1), new ScheduledTask(17, 25, 1), new ScheduledTask(42, 49, 1), new ScheduledTask(13, 19, 0), new ScheduledTask(19, 25, 0), new ScheduledTask(47, 53, 0), new ScheduledTask(53, 58, 0), new ScheduledTask(12, 17, 1), new ScheduledTask(25, 30, 0), new ScheduledTask(30, 35, 0), new ScheduledTask(9, 13, 0), new ScheduledTask(35, 37, 0)};
        int[] expectedProcessorEndTimes = new int[]{58, 58};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(19, 29, 0), new ScheduledTask(21, 30, 1), new ScheduledTask(26, 35, 2), new ScheduledTask(27, 35, 3), new ScheduledTask(19, 27, 3), new ScheduledTask(19, 26, 2), new ScheduledTask(13, 19, 3), new ScheduledTask(15, 21, 1), new ScheduledTask(29, 35, 0), new ScheduledTask(30, 35, 1), new ScheduledTask(12, 17, 2), new ScheduledTask(9, 14, 0), new ScheduledTask(14, 19, 0), new ScheduledTask(11, 15, 1), new ScheduledTask(17, 19, 2)};
        int[] expectedProcessorEndTimes = new int[]{35, 35, 35, 35};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(11, 21, 0), new ScheduledTask(19, 28, 1), new ScheduledTask(20, 29, 2), new ScheduledTask(21, 29, 3), new ScheduledTask(16, 24, 4), new ScheduledTask(21, 28, 0), new ScheduledTask(13, 19, 1), new ScheduledTask(14, 20, 2), new ScheduledTask(18, 24, 5), new ScheduledTask(24, 29, 5), new ScheduledTask(12, 17, 5), new ScheduledTask(16, 21, 3), new ScheduledTask(24, 29, 4), new ScheduledTask(11, 15, 4), new ScheduledTask(9, 11, 0)};
        int[] expectedProcessorEndTimes = new int[]{28, 28, 29, 29, 29, 29};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot03_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.03_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 20, 0), new ScheduledTask(14, 23, 1), new ScheduledTask(20, 29, 0), new ScheduledTask(23, 31, 1), new ScheduledTask(29, 37, 0), new ScheduledTask(31, 38, 1), new ScheduledTask(37, 44, 0), new ScheduledTask(38, 45, 1), new ScheduledTask(44, 50, 0), new ScheduledTask(45, 51, 1), new ScheduledTask(50, 55, 0), new ScheduledTask(51, 56, 1), new ScheduledTask(55, 57, 0), new ScheduledTask(56, 58, 1), new ScheduledTask(57, 59, 0)};
        int[] expectedProcessorEndTimes = new int[]{59, 58};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot03_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.03_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(26, 36, 0), new ScheduledTask(14, 23, 1), new ScheduledTask(17, 26, 0), new ScheduledTask(14, 22, 2), new ScheduledTask(14, 22, 3), new ScheduledTask(24, 31, 2), new ScheduledTask(10, 17, 0), new ScheduledTask(30, 37, 3), new ScheduledTask(24, 30, 3), new ScheduledTask(31, 37, 2), new ScheduledTask(23, 28, 1), new ScheduledTask(30, 35, 1), new ScheduledTask(22, 24, 3), new ScheduledTask(28, 30, 1), new ScheduledTask(22, 24, 2)};
        int[] expectedProcessorEndTimes = new int[]{36, 35, 37, 37};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot03_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.03_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(19, 29, 0), new ScheduledTask(14, 23, 1), new ScheduledTask(10, 19, 0), new ScheduledTask(14, 22, 2), new ScheduledTask(14, 22, 3), new ScheduledTask(22, 29, 4), new ScheduledTask(15, 22, 5), new ScheduledTask(22, 29, 5), new ScheduledTask(16, 22, 4), new ScheduledTask(23, 29, 1), new ScheduledTask(22, 27, 3), new ScheduledTask(24, 29, 2), new ScheduledTask(14, 16, 4), new ScheduledTask(22, 24, 2), new ScheduledTask(27, 29, 3)};
        int[] expectedProcessorEndTimes = new int[]{29, 29, 29, 29, 29, 29};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot06_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.06_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 16, 0), new ScheduledTask(16, 25, 0), new ScheduledTask(24, 32, 1), new ScheduledTask(9, 17, 1), new ScheduledTask(17, 24, 1), new ScheduledTask(38, 45, 1), new ScheduledTask(45, 51, 1), new ScheduledTask(32, 38, 1), new ScheduledTask(37, 43, 0), new ScheduledTask(27, 32, 0), new ScheduledTask(43, 47, 0), new ScheduledTask(47, 51, 0), new ScheduledTask(32, 35, 0), new ScheduledTask(25, 27, 0), new ScheduledTask(35, 37, 0)};
        int[] expectedProcessorEndTimes = new int[]{51, 51};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot06_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.06_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(10, 19, 1), new ScheduledTask(12, 21, 2), new ScheduledTask(23, 31, 2), new ScheduledTask(9, 17, 3), new ScheduledTask(17, 24, 3), new ScheduledTask(24, 31, 3), new ScheduledTask(25, 31, 1), new ScheduledTask(19, 25, 1), new ScheduledTask(17, 23, 0), new ScheduledTask(7, 12, 0), new ScheduledTask(23, 27, 0), new ScheduledTask(27, 31, 0), new ScheduledTask(12, 15, 0), new ScheduledTask(21, 23, 2), new ScheduledTask(15, 17, 0)};
        int[] expectedProcessorEndTimes = new int[]{31, 31, 31, 31};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot06_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.06_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 25;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(10, 19, 1), new ScheduledTask(12, 21, 2), new ScheduledTask(17, 25, 3), new ScheduledTask(9, 17, 3), new ScheduledTask(12, 19, 4), new ScheduledTask(18, 25, 5), new ScheduledTask(19, 25, 4), new ScheduledTask(19, 25, 1), new ScheduledTask(14, 20, 0), new ScheduledTask(13, 18, 5), new ScheduledTask(20, 24, 0), new ScheduledTask(21, 25, 2), new ScheduledTask(9, 12, 0), new ScheduledTask(7, 9, 0), new ScheduledTask(12, 14, 0)};
        int[] expectedProcessorEndTimes = new int[]{24, 25, 25, 25, 25, 25};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(25, 35, 1), new ScheduledTask(16, 25, 0), new ScheduledTask(50, 58, 0), new ScheduledTask(5, 13, 0), new ScheduledTask(56, 64, 1), new ScheduledTask(31, 39, 0), new ScheduledTask(36, 43, 1), new ScheduledTask(39, 46, 0), new ScheduledTask(58, 63, 0), new ScheduledTask(43, 48, 1), new ScheduledTask(63, 67, 0), new ScheduledTask(46, 50, 0), new ScheduledTask(28, 31, 0), new ScheduledTask(13, 16, 0), new ScheduledTask(25, 28, 0)};
        int[] expectedProcessorEndTimes = new int[]{67, 64};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(25, 35, 1), new ScheduledTask(5, 14, 0), new ScheduledTask(39, 47, 0), new ScheduledTask(56, 64, 1), new ScheduledTask(56, 64, 2), new ScheduledTask(20, 28, 0), new ScheduledTask(36, 43, 3), new ScheduledTask(28, 35, 0), new ScheduledTask(47, 52, 0), new ScheduledTask(43, 48, 3), new ScheduledTask(52, 56, 0), new ScheduledTask(35, 39, 0), new ScheduledTask(17, 20, 0), new ScheduledTask(56, 59, 3), new ScheduledTask(14, 17, 0)};
        int[] expectedProcessorEndTimes = new int[]{56, 64, 64, 59};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(25, 35, 1), new ScheduledTask(5, 14, 0), new ScheduledTask(39, 47, 0), new ScheduledTask(56, 64, 1), new ScheduledTask(56, 64, 2), new ScheduledTask(20, 28, 0), new ScheduledTask(36, 43, 3), new ScheduledTask(28, 35, 0), new ScheduledTask(47, 52, 0), new ScheduledTask(36, 41, 4), new ScheduledTask(52, 56, 0), new ScheduledTask(35, 39, 0), new ScheduledTask(17, 20, 0), new ScheduledTask(56, 59, 5), new ScheduledTask(14, 17, 0)};
        int[] expectedProcessorEndTimes = new int[]{56, 64, 64, 43, 41, 59};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(30, 40, 1), new ScheduledTask(6, 15, 0), new ScheduledTask(47, 56, 1), new ScheduledTask(35, 42, 0), new ScheduledTask(21, 28, 1), new ScheduledTask(46, 53, 0), new ScheduledTask(19, 25, 0), new ScheduledTask(25, 30, 0), new ScheduledTask(42, 46, 0), new ScheduledTask(15, 19, 0), new ScheduledTask(30, 33, 0), new ScheduledTask(53, 56, 0), new ScheduledTask(3, 6, 0), new ScheduledTask(40, 43, 1), new ScheduledTask(33, 35, 0)};
        int[] expectedProcessorEndTimes = new int[]{56, 56};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(30, 40, 1), new ScheduledTask(3, 12, 0), new ScheduledTask(47, 56, 2), new ScheduledTask(32, 39, 0), new ScheduledTask(21, 28, 3), new ScheduledTask(43, 50, 0), new ScheduledTask(16, 22, 0), new ScheduledTask(22, 27, 0), new ScheduledTask(39, 43, 0), new ScheduledTask(12, 16, 0), new ScheduledTask(27, 30, 0), new ScheduledTask(50, 53, 0), new ScheduledTask(38, 41, 2), new ScheduledTask(38, 41, 3), new ScheduledTask(30, 32, 0)};
        int[] expectedProcessorEndTimes = new int[]{53, 40, 56, 41};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(30, 40, 1), new ScheduledTask(3, 12, 0), new ScheduledTask(47, 56, 2), new ScheduledTask(32, 39, 0), new ScheduledTask(21, 28, 3), new ScheduledTask(43, 50, 0), new ScheduledTask(16, 22, 0), new ScheduledTask(22, 27, 0), new ScheduledTask(39, 43, 0), new ScheduledTask(12, 16, 0), new ScheduledTask(27, 30, 0), new ScheduledTask(50, 53, 0), new ScheduledTask(40, 43, 1), new ScheduledTask(38, 41, 4), new ScheduledTask(30, 32, 0)};
        int[] expectedProcessorEndTimes = new int[]{53, 43, 56, 28, 41};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(30, 39, 0), new ScheduledTask(21, 30, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(38, 46, 1), new ScheduledTask(46, 53, 1), new ScheduledTask(50, 57, 0), new ScheduledTask(61, 67, 1), new ScheduledTask(62, 67, 0), new ScheduledTask(45, 50, 0), new ScheduledTask(53, 58, 1), new ScheduledTask(57, 62, 0), new ScheduledTask(39, 43, 0), new ScheduledTask(58, 61, 1), new ScheduledTask(19, 21, 0), new ScheduledTask(43, 45, 0)};
        int[] expectedProcessorEndTimes = new int[]{67, 67};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(19, 28, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(38, 47, 1), new ScheduledTask(38, 46, 2), new ScheduledTask(46, 53, 2), new ScheduledTask(39, 46, 0), new ScheduledTask(52, 58, 3), new ScheduledTask(51, 56, 0), new ScheduledTask(34, 39, 0), new ScheduledTask(38, 43, 3), new ScheduledTask(46, 51, 0), new ScheduledTask(28, 32, 0), new ScheduledTask(43, 46, 3), new ScheduledTask(46, 48, 3), new ScheduledTask(32, 34, 0)};
        int[] expectedProcessorEndTimes = new int[]{56, 47, 53, 58};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(19, 28, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(38, 47, 1), new ScheduledTask(38, 46, 2), new ScheduledTask(38, 45, 3), new ScheduledTask(39, 46, 0), new ScheduledTask(52, 58, 2), new ScheduledTask(51, 56, 0), new ScheduledTask(34, 39, 0), new ScheduledTask(38, 43, 4), new ScheduledTask(46, 51, 0), new ScheduledTask(28, 32, 0), new ScheduledTask(38, 41, 5), new ScheduledTask(41, 43, 5), new ScheduledTask(32, 34, 0)};
        int[] expectedProcessorEndTimes = new int[]{56, 47, 58, 45, 43, 43};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot95_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.95_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(49, 59, 1), new ScheduledTask(42, 52, 0), new ScheduledTask(10, 18, 0), new ScheduledTask(22, 29, 1), new ScheduledTask(52, 58, 0), new ScheduledTask(31, 37, 0), new ScheduledTask(29, 35, 1), new ScheduledTask(20, 25, 0), new ScheduledTask(37, 42, 0), new ScheduledTask(40, 44, 1), new ScheduledTask(6, 10, 0), new ScheduledTask(25, 29, 0), new ScheduledTask(4, 6, 0), new ScheduledTask(18, 20, 0), new ScheduledTask(29, 31, 0)};
        int[] expectedProcessorEndTimes = new int[]{58, 59};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot95_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.95_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(49, 59, 1), new ScheduledTask(36, 46, 0), new ScheduledTask(4, 12, 0), new ScheduledTask(22, 29, 2), new ScheduledTask(46, 52, 0), new ScheduledTask(25, 31, 0), new ScheduledTask(22, 28, 3), new ScheduledTask(14, 19, 0), new ScheduledTask(31, 36, 0), new ScheduledTask(40, 44, 3), new ScheduledTask(49, 53, 3), new ScheduledTask(19, 23, 0), new ScheduledTask(28, 30, 3), new ScheduledTask(12, 14, 0), new ScheduledTask(23, 25, 0)};
        int[] expectedProcessorEndTimes = new int[]{52, 59, 29, 53};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot95_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.95_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(49, 59, 1), new ScheduledTask(43, 53, 0), new ScheduledTask(11, 19, 0), new ScheduledTask(4, 11, 0), new ScheduledTask(53, 59, 0), new ScheduledTask(32, 38, 0), new ScheduledTask(22, 28, 2), new ScheduledTask(21, 26, 0), new ScheduledTask(38, 43, 0), new ScheduledTask(40, 44, 3), new ScheduledTask(49, 53, 4), new ScheduledTask(26, 30, 0), new ScheduledTask(22, 24, 5), new ScheduledTask(19, 21, 0), new ScheduledTask(30, 32, 0)};
        int[] expectedProcessorEndTimes = new int[]{59, 59, 28, 44, 53, 24};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(55, 65, 0), new ScheduledTask(31, 41, 1), new ScheduledTask(13, 23, 0), new ScheduledTask(41, 51, 1), new ScheduledTask(23, 32, 0), new ScheduledTask(51, 60, 1), new ScheduledTask(60, 68, 1), new ScheduledTask(65, 73, 0), new ScheduledTask(45, 52, 0), new ScheduledTask(32, 39, 0), new ScheduledTask(39, 45, 0), new ScheduledTask(5, 11, 0), new ScheduledTask(52, 55, 0), new ScheduledTask(11, 13, 0), new ScheduledTask(71, 73, 1)};
        int[] expectedProcessorEndTimes = new int[]{73, 73};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(51, 61, 0), new ScheduledTask(31, 41, 1), new ScheduledTask(9, 19, 0), new ScheduledTask(31, 41, 2), new ScheduledTask(19, 28, 0), new ScheduledTask(41, 50, 1), new ScheduledTask(58, 66, 1), new ScheduledTask(61, 69, 0), new ScheduledTask(41, 48, 0), new ScheduledTask(28, 35, 0), new ScheduledTask(35, 41, 0), new ScheduledTask(50, 56, 1), new ScheduledTask(48, 51, 0), new ScheduledTask(5, 7, 0), new ScheduledTask(7, 9, 0)};
        int[] expectedProcessorEndTimes = new int[]{69, 66, 41};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(51, 61, 0), new ScheduledTask(31, 41, 1), new ScheduledTask(9, 19, 0), new ScheduledTask(31, 41, 2), new ScheduledTask(19, 28, 0), new ScheduledTask(41, 50, 1), new ScheduledTask(58, 66, 1), new ScheduledTask(61, 69, 0), new ScheduledTask(41, 48, 0), new ScheduledTask(28, 35, 0), new ScheduledTask(35, 41, 0), new ScheduledTask(31, 37, 3), new ScheduledTask(48, 51, 0), new ScheduledTask(5, 7, 0), new ScheduledTask(7, 9, 0)};
        int[] expectedProcessorEndTimes = new int[]{69, 66, 41, 37};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot99_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.99_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(36, 46, 1), new ScheduledTask(20, 28, 0), new ScheduledTask(46, 54, 1), new ScheduledTask(41, 48, 0), new ScheduledTask(28, 35, 0), new ScheduledTask(54, 60, 1), new ScheduledTask(48, 54, 0), new ScheduledTask(10, 16, 0), new ScheduledTask(54, 60, 0), new ScheduledTask(35, 41, 0), new ScheduledTask(60, 65, 0), new ScheduledTask(60, 65, 1), new ScheduledTask(16, 20, 0), new ScheduledTask(65, 69, 1), new ScheduledTask(65, 67, 0)};
        int[] expectedProcessorEndTimes = new int[]{67, 69};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot99_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.99_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(36, 46, 1), new ScheduledTask(18, 26, 0), new ScheduledTask(36, 44, 2), new ScheduledTask(39, 46, 0), new ScheduledTask(26, 33, 0), new ScheduledTask(36, 42, 3), new ScheduledTask(46, 52, 0), new ScheduledTask(49, 55, 3), new ScheduledTask(52, 58, 0), new ScheduledTask(33, 39, 0), new ScheduledTask(58, 63, 0), new ScheduledTask(46, 51, 1), new ScheduledTask(10, 14, 0), new ScheduledTask(14, 18, 0), new ScheduledTask(63, 65, 0)};
        int[] expectedProcessorEndTimes = new int[]{65, 51, 44, 55};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot99_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.99_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(36, 46, 1), new ScheduledTask(18, 26, 0), new ScheduledTask(36, 44, 2), new ScheduledTask(39, 46, 0), new ScheduledTask(26, 33, 0), new ScheduledTask(36, 42, 3), new ScheduledTask(46, 52, 0), new ScheduledTask(49, 55, 4), new ScheduledTask(52, 58, 0), new ScheduledTask(33, 39, 0), new ScheduledTask(58, 63, 0), new ScheduledTask(36, 41, 5), new ScheduledTask(10, 14, 0), new ScheduledTask(14, 18, 0), new ScheduledTask(63, 65, 0)};
        int[] expectedProcessorEndTimes = new int[]{65, 46, 44, 42, 55, 41};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot99_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.99_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(28, 38, 0), new ScheduledTask(28, 37, 1), new ScheduledTask(11, 20, 0), new ScheduledTask(20, 28, 0), new ScheduledTask(40, 48, 1), new ScheduledTask(62, 69, 1), new ScheduledTask(47, 54, 0), new ScheduledTask(38, 44, 0), new ScheduledTask(54, 60, 0), new ScheduledTask(60, 65, 0), new ScheduledTask(6, 11, 0), new ScheduledTask(52, 57, 1), new ScheduledTask(65, 69, 0), new ScheduledTask(48, 52, 1), new ScheduledTask(44, 47, 0)};
        int[] expectedProcessorEndTimes = new int[]{69, 69};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot99_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.99_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(23, 33, 0), new ScheduledTask(28, 37, 1), new ScheduledTask(6, 15, 0), new ScheduledTask(15, 23, 0), new ScheduledTask(40, 48, 1), new ScheduledTask(62, 69, 1), new ScheduledTask(42, 49, 0), new ScheduledTask(33, 39, 0), new ScheduledTask(49, 55, 0), new ScheduledTask(55, 60, 0), new ScheduledTask(40, 45, 2), new ScheduledTask(51, 56, 3), new ScheduledTask(60, 64, 0), new ScheduledTask(40, 44, 3), new ScheduledTask(39, 42, 0)};
        int[] expectedProcessorEndTimes = new int[]{64, 69, 45, 56};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot99_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.99_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(23, 33, 0), new ScheduledTask(28, 37, 1), new ScheduledTask(6, 15, 0), new ScheduledTask(15, 23, 0), new ScheduledTask(40, 48, 2), new ScheduledTask(62, 69, 1), new ScheduledTask(42, 49, 0), new ScheduledTask(33, 39, 0), new ScheduledTask(49, 55, 0), new ScheduledTask(55, 60, 0), new ScheduledTask(40, 45, 3), new ScheduledTask(51, 56, 4), new ScheduledTask(60, 64, 0), new ScheduledTask(40, 44, 5), new ScheduledTask(39, 42, 0)};
        int[] expectedProcessorEndTimes = new int[]{64, 69, 48, 45, 56, 44};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot99_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.99_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(11, 21, 0), new ScheduledTask(47, 57, 1), new ScheduledTask(37, 46, 1), new ScheduledTask(23, 31, 0), new ScheduledTask(39, 45, 0), new ScheduledTask(55, 61, 0), new ScheduledTask(5, 11, 0), new ScheduledTask(45, 51, 0), new ScheduledTask(57, 62, 1), new ScheduledTask(51, 55, 0), new ScheduledTask(31, 35, 0), new ScheduledTask(35, 39, 0), new ScheduledTask(61, 65, 0), new ScheduledTask(62, 66, 1), new ScheduledTask(21, 23, 0)};
        int[] expectedProcessorEndTimes = new int[]{65, 66};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot99_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.99_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 15, 0), new ScheduledTask(47, 57, 1), new ScheduledTask(37, 46, 1), new ScheduledTask(17, 25, 0), new ScheduledTask(33, 39, 0), new ScheduledTask(49, 55, 0), new ScheduledTask(47, 53, 2), new ScheduledTask(39, 45, 0), new ScheduledTask(47, 52, 3), new ScheduledTask(45, 49, 0), new ScheduledTask(25, 29, 0), new ScheduledTask(29, 33, 0), new ScheduledTask(55, 59, 0), new ScheduledTask(52, 56, 3), new ScheduledTask(15, 17, 0)};
        int[] expectedProcessorEndTimes = new int[]{59, 57, 53, 56};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot99_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.99_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 15, 0), new ScheduledTask(47, 57, 1), new ScheduledTask(37, 46, 2), new ScheduledTask(17, 25, 0), new ScheduledTask(33, 39, 0), new ScheduledTask(49, 55, 0), new ScheduledTask(47, 53, 3), new ScheduledTask(39, 45, 0), new ScheduledTask(47, 52, 4), new ScheduledTask(45, 49, 0), new ScheduledTask(25, 29, 0), new ScheduledTask(29, 33, 0), new ScheduledTask(55, 59, 0), new ScheduledTask(47, 51, 5), new ScheduledTask(15, 17, 0)};
        int[] expectedProcessorEndTimes = new int[]{59, 57, 46, 53, 52, 51};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot99_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.99_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(42, 52, 0), new ScheduledTask(3, 13, 0), new ScheduledTask(54, 64, 0), new ScheduledTask(29, 37, 0), new ScheduledTask(41, 49, 1), new ScheduledTask(13, 21, 0), new ScheduledTask(21, 29, 0), new ScheduledTask(22, 27, 1), new ScheduledTask(37, 42, 0), new ScheduledTask(59, 63, 1), new ScheduledTask(63, 67, 1), new ScheduledTask(64, 67, 0), new ScheduledTask(31, 33, 1), new ScheduledTask(52, 54, 0), new ScheduledTask(49, 51, 1)};
        int[] expectedProcessorEndTimes = new int[]{67, 67};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot99_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.99_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(34, 44, 0), new ScheduledTask(3, 13, 0), new ScheduledTask(46, 56, 0), new ScheduledTask(21, 29, 0), new ScheduledTask(41, 49, 1), new ScheduledTask(59, 67, 2), new ScheduledTask(13, 21, 0), new ScheduledTask(22, 27, 3), new ScheduledTask(29, 34, 0), new ScheduledTask(59, 63, 3), new ScheduledTask(63, 67, 3), new ScheduledTask(56, 59, 0), new ScheduledTask(31, 33, 3), new ScheduledTask(44, 46, 0), new ScheduledTask(41, 43, 3)};
        int[] expectedProcessorEndTimes = new int[]{59, 49, 67, 67};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot99_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.99_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(34, 44, 0), new ScheduledTask(3, 13, 0), new ScheduledTask(46, 56, 0), new ScheduledTask(21, 29, 0), new ScheduledTask(41, 49, 1), new ScheduledTask(59, 67, 1), new ScheduledTask(13, 21, 0), new ScheduledTask(22, 27, 2), new ScheduledTask(29, 34, 0), new ScheduledTask(59, 63, 3), new ScheduledTask(59, 63, 4), new ScheduledTask(56, 59, 0), new ScheduledTask(31, 33, 5), new ScheduledTask(44, 46, 0), new ScheduledTask(41, 43, 5)};
        int[] expectedProcessorEndTimes = new int[]{59, 67, 27, 63, 63, 43};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(15, 23, 0), new ScheduledTask(23, 31, 0), new ScheduledTask(39, 47, 1), new ScheduledTask(3, 11, 0), new ScheduledTask(39, 46, 0), new ScheduledTask(21, 28, 1), new ScheduledTask(49, 55, 0), new ScheduledTask(30, 35, 1), new ScheduledTask(49, 54, 1), new ScheduledTask(34, 39, 0), new ScheduledTask(31, 34, 0), new ScheduledTask(46, 49, 0), new ScheduledTask(11, 13, 0), new ScheduledTask(47, 49, 1), new ScheduledTask(13, 15, 0)};
        int[] expectedProcessorEndTimes = new int[]{55, 54};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(13, 21, 0), new ScheduledTask(21, 29, 0), new ScheduledTask(39, 47, 1), new ScheduledTask(3, 11, 0), new ScheduledTask(37, 44, 0), new ScheduledTask(21, 28, 2), new ScheduledTask(47, 53, 0), new ScheduledTask(30, 35, 3), new ScheduledTask(48, 53, 1), new ScheduledTask(32, 37, 0), new ScheduledTask(29, 32, 0), new ScheduledTask(44, 47, 0), new ScheduledTask(48, 50, 3), new ScheduledTask(39, 41, 3), new ScheduledTask(11, 13, 0)};
        int[] expectedProcessorEndTimes = new int[]{53, 53, 28, 50};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(13, 21, 0), new ScheduledTask(21, 29, 0), new ScheduledTask(39, 47, 1), new ScheduledTask(3, 11, 0), new ScheduledTask(37, 44, 0), new ScheduledTask(21, 28, 2), new ScheduledTask(47, 53, 0), new ScheduledTask(30, 35, 3), new ScheduledTask(48, 53, 1), new ScheduledTask(32, 37, 0), new ScheduledTask(29, 32, 0), new ScheduledTask(44, 47, 0), new ScheduledTask(48, 50, 4), new ScheduledTask(39, 41, 5), new ScheduledTask(11, 13, 0)};
        int[] expectedProcessorEndTimes = new int[]{53, 53, 28, 35, 50, 41};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 44;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(9, 18, 0), new ScheduledTask(9, 17, 1), new ScheduledTask(17, 25, 1), new ScheduledTask(18, 26, 0), new ScheduledTask(25, 31, 1), new ScheduledTask(26, 32, 0), new ScheduledTask(31, 36, 1), new ScheduledTask(32, 36, 0), new ScheduledTask(36, 40, 0), new ScheduledTask(36, 39, 1), new ScheduledTask(39, 42, 1), new ScheduledTask(40, 42, 0), new ScheduledTask(42, 44, 0), new ScheduledTask(42, 44, 1)};
        int[] expectedProcessorEndTimes = new int[]{44, 44};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 22;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(0, 9, 2), new ScheduledTask(0, 8, 3), new ScheduledTask(8, 16, 3), new ScheduledTask(9, 17, 0), new ScheduledTask(9, 15, 1), new ScheduledTask(9, 15, 2), new ScheduledTask(15, 20, 1), new ScheduledTask(15, 19, 2), new ScheduledTask(16, 20, 3), new ScheduledTask(17, 20, 0), new ScheduledTask(19, 22, 2), new ScheduledTask(20, 22, 0), new ScheduledTask(20, 22, 1), new ScheduledTask(20, 22, 3)};
        int[] expectedProcessorEndTimes = new int[]{22, 22, 22, 22};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 15;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(0, 9, 2), new ScheduledTask(0, 8, 3), new ScheduledTask(0, 8, 4), new ScheduledTask(0, 8, 5), new ScheduledTask(8, 14, 3), new ScheduledTask(8, 14, 4), new ScheduledTask(8, 13, 5), new ScheduledTask(9, 13, 0), new ScheduledTask(9, 13, 1), new ScheduledTask(9, 12, 2), new ScheduledTask(12, 15, 2), new ScheduledTask(13, 15, 0), new ScheduledTask(13, 15, 1), new ScheduledTask(13, 15, 5)};
        int[] expectedProcessorEndTimes = new int[]{15, 15, 15, 14, 14, 15};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 44;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(9, 17, 1), new ScheduledTask(10, 18, 0), new ScheduledTask(17, 25, 1), new ScheduledTask(18, 26, 0), new ScheduledTask(25, 31, 1), new ScheduledTask(26, 32, 0), new ScheduledTask(31, 36, 1), new ScheduledTask(32, 36, 0), new ScheduledTask(36, 40, 0), new ScheduledTask(36, 39, 1), new ScheduledTask(39, 42, 1), new ScheduledTask(40, 42, 0), new ScheduledTask(42, 44, 0), new ScheduledTask(42, 44, 1)};
        int[] expectedProcessorEndTimes = new int[]{44, 44};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 22;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(0, 8, 2), new ScheduledTask(0, 8, 3), new ScheduledTask(8, 16, 2), new ScheduledTask(8, 16, 3), new ScheduledTask(9, 15, 1), new ScheduledTask(10, 16, 0), new ScheduledTask(15, 20, 1), new ScheduledTask(16, 20, 0), new ScheduledTask(16, 20, 2), new ScheduledTask(16, 19, 3), new ScheduledTask(19, 22, 3), new ScheduledTask(20, 22, 0), new ScheduledTask(20, 22, 1), new ScheduledTask(20, 22, 2)};
        int[] expectedProcessorEndTimes = new int[]{22, 22, 22, 22};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 15;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(0, 8, 2), new ScheduledTask(0, 8, 3), new ScheduledTask(0, 8, 4), new ScheduledTask(0, 8, 5), new ScheduledTask(8, 14, 2), new ScheduledTask(8, 14, 3), new ScheduledTask(8, 13, 4), new ScheduledTask(8, 12, 5), new ScheduledTask(9, 13, 1), new ScheduledTask(10, 13, 0), new ScheduledTask(12, 15, 5), new ScheduledTask(13, 15, 0), new ScheduledTask(13, 15, 1), new ScheduledTask(13, 15, 4)};
        int[] expectedProcessorEndTimes = new int[]{15, 15, 14, 14, 15, 15};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 38;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(9, 18, 1), new ScheduledTask(10, 17, 0), new ScheduledTask(17, 23, 0), new ScheduledTask(18, 23, 1), new ScheduledTask(23, 27, 0), new ScheduledTask(23, 27, 1), new ScheduledTask(27, 30, 0), new ScheduledTask(27, 30, 1), new ScheduledTask(30, 33, 0), new ScheduledTask(30, 33, 1), new ScheduledTask(33, 36, 0), new ScheduledTask(33, 36, 1), new ScheduledTask(36, 38, 0), new ScheduledTask(36, 38, 1)};
        int[] expectedProcessorEndTimes = new int[]{38, 38};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 19;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(0, 9, 2), new ScheduledTask(0, 7, 3), new ScheduledTask(7, 13, 3), new ScheduledTask(9, 14, 1), new ScheduledTask(9, 13, 2), new ScheduledTask(10, 14, 0), new ScheduledTask(13, 16, 2), new ScheduledTask(13, 16, 3), new ScheduledTask(14, 17, 0), new ScheduledTask(14, 17, 1), new ScheduledTask(16, 19, 2), new ScheduledTask(16, 19, 3), new ScheduledTask(17, 19, 0), new ScheduledTask(17, 19, 1)};
        int[] expectedProcessorEndTimes = new int[]{19, 19, 19, 19};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 13;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(0, 9, 2), new ScheduledTask(0, 7, 3), new ScheduledTask(0, 6, 4), new ScheduledTask(0, 5, 5), new ScheduledTask(6, 10, 4), new ScheduledTask(5, 9, 5), new ScheduledTask(10, 13, 0), new ScheduledTask(9, 12, 2), new ScheduledTask(7, 10, 3), new ScheduledTask(10, 13, 3), new ScheduledTask(10, 13, 4), new ScheduledTask(9, 12, 5), new ScheduledTask(9, 11, 1), new ScheduledTask(11, 13, 1)};
        int[] expectedProcessorEndTimes = new int[]{13, 13, 12, 13, 13, 12};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(9, 15, 1), new ScheduledTask(10, 16, 0), new ScheduledTask(15, 21, 1), new ScheduledTask(16, 22, 0), new ScheduledTask(21, 27, 1), new ScheduledTask(22, 26, 0), new ScheduledTask(26, 30, 0), new ScheduledTask(27, 30, 1), new ScheduledTask(30, 33, 0), new ScheduledTask(30, 33, 1), new ScheduledTask(33, 35, 0), new ScheduledTask(33, 35, 1), new ScheduledTask(35, 37, 0), new ScheduledTask(35, 37, 1)};
        int[] expectedProcessorEndTimes = new int[]{37, 37};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 19;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(0, 6, 2), new ScheduledTask(0, 6, 3), new ScheduledTask(6, 12, 2), new ScheduledTask(6, 12, 3), new ScheduledTask(9, 15, 1), new ScheduledTask(10, 14, 0), new ScheduledTask(12, 16, 2), new ScheduledTask(12, 15, 3), new ScheduledTask(14, 17, 0), new ScheduledTask(15, 18, 1), new ScheduledTask(15, 17, 3), new ScheduledTask(16, 18, 2), new ScheduledTask(17, 19, 0), new ScheduledTask(17, 19, 3)};
        int[] expectedProcessorEndTimes = new int[]{19, 18, 18, 19};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 13;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(0, 6, 2), new ScheduledTask(0, 6, 3), new ScheduledTask(0, 6, 4), new ScheduledTask(0, 6, 5), new ScheduledTask(6, 12, 5), new ScheduledTask(6, 10, 3), new ScheduledTask(6, 10, 4), new ScheduledTask(9, 12, 1), new ScheduledTask(6, 9, 2), new ScheduledTask(10, 13, 4), new ScheduledTask(10, 12, 0), new ScheduledTask(9, 11, 2), new ScheduledTask(11, 13, 2), new ScheduledTask(10, 12, 3)};
        int[] expectedProcessorEndTimes = new int[]{12, 12, 13, 12, 13, 12};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(10, 20, 0), new ScheduledTask(10, 20, 1), new ScheduledTask(20, 29, 0), new ScheduledTask(20, 29, 1), new ScheduledTask(29, 37, 0), new ScheduledTask(29, 37, 1), new ScheduledTask(37, 43, 0), new ScheduledTask(37, 41, 1), new ScheduledTask(41, 44, 1), new ScheduledTask(43, 46, 0), new ScheduledTask(44, 47, 1), new ScheduledTask(46, 49, 0), new ScheduledTask(47, 50, 1), new ScheduledTask(49, 51, 0)};
        int[] expectedProcessorEndTimes = new int[]{51, 50};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 26;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 10, 3), new ScheduledTask(10, 19, 0), new ScheduledTask(10, 19, 1), new ScheduledTask(10, 18, 2), new ScheduledTask(10, 18, 3), new ScheduledTask(18, 24, 2), new ScheduledTask(18, 22, 3), new ScheduledTask(19, 22, 0), new ScheduledTask(19, 22, 1), new ScheduledTask(22, 25, 0), new ScheduledTask(22, 25, 1), new ScheduledTask(22, 25, 3), new ScheduledTask(24, 26, 2)};
        int[] expectedProcessorEndTimes = new int[]{25, 25, 26, 25};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 18;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 10, 3), new ScheduledTask(0, 9, 4), new ScheduledTask(0, 9, 5), new ScheduledTask(9, 17, 4), new ScheduledTask(9, 17, 5), new ScheduledTask(10, 16, 0), new ScheduledTask(10, 14, 1), new ScheduledTask(10, 13, 2), new ScheduledTask(10, 13, 3), new ScheduledTask(13, 16, 2), new ScheduledTask(13, 16, 3), new ScheduledTask(14, 17, 1), new ScheduledTask(16, 18, 0)};
        int[] expectedProcessorEndTimes = new int[]{18, 17, 16, 16, 17, 17};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(9, 18, 0), new ScheduledTask(9, 18, 1), new ScheduledTask(18, 27, 0), new ScheduledTask(18, 27, 1), new ScheduledTask(27, 35, 0), new ScheduledTask(27, 35, 1), new ScheduledTask(35, 42, 0), new ScheduledTask(35, 41, 1), new ScheduledTask(41, 46, 1), new ScheduledTask(42, 47, 0), new ScheduledTask(46, 51, 1), new ScheduledTask(47, 50, 0), new ScheduledTask(50, 52, 0), new ScheduledTask(51, 53, 1)};
        int[] expectedProcessorEndTimes = new int[]{52, 53};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 27;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(0, 9, 2), new ScheduledTask(0, 9, 3), new ScheduledTask(9, 18, 3), new ScheduledTask(18, 27, 3), new ScheduledTask(9, 17, 2), new ScheduledTask(17, 25, 2), new ScheduledTask(9, 16, 1), new ScheduledTask(16, 22, 1), new ScheduledTask(9, 14, 0), new ScheduledTask(14, 19, 0), new ScheduledTask(22, 27, 1), new ScheduledTask(19, 22, 0), new ScheduledTask(22, 24, 0), new ScheduledTask(25, 27, 2)};
        int[] expectedProcessorEndTimes = new int[]{24, 27, 27, 27};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 18;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(0, 9, 2), new ScheduledTask(0, 9, 3), new ScheduledTask(0, 9, 4), new ScheduledTask(9, 18, 4), new ScheduledTask(9, 17, 0), new ScheduledTask(0, 8, 5), new ScheduledTask(9, 16, 1), new ScheduledTask(9, 15, 2), new ScheduledTask(9, 14, 3), new ScheduledTask(8, 13, 5), new ScheduledTask(13, 18, 5), new ScheduledTask(15, 18, 2), new ScheduledTask(16, 18, 1), new ScheduledTask(14, 16, 3)};
        int[] expectedProcessorEndTimes = new int[]{17, 18, 18, 16, 18, 18};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(10, 17, 0), new ScheduledTask(10, 17, 1), new ScheduledTask(17, 24, 0), new ScheduledTask(17, 24, 1), new ScheduledTask(24, 30, 0), new ScheduledTask(24, 30, 1), new ScheduledTask(30, 35, 0), new ScheduledTask(30, 35, 1), new ScheduledTask(35, 40, 0), new ScheduledTask(35, 39, 1), new ScheduledTask(39, 43, 1), new ScheduledTask(40, 43, 0), new ScheduledTask(43, 46, 0), new ScheduledTask(43, 45, 1)};
        int[] expectedProcessorEndTimes = new int[]{46, 45};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 23;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 7, 2), new ScheduledTask(0, 7, 3), new ScheduledTask(7, 14, 2), new ScheduledTask(7, 14, 3), new ScheduledTask(10, 16, 0), new ScheduledTask(10, 16, 1), new ScheduledTask(14, 19, 2), new ScheduledTask(14, 19, 3), new ScheduledTask(16, 21, 0), new ScheduledTask(16, 20, 1), new ScheduledTask(19, 23, 2), new ScheduledTask(19, 22, 3), new ScheduledTask(20, 23, 1), new ScheduledTask(21, 23, 0)};
        int[] expectedProcessorEndTimes = new int[]{23, 23, 23, 22};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 16;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 7, 2), new ScheduledTask(0, 7, 3), new ScheduledTask(0, 7, 4), new ScheduledTask(0, 7, 5), new ScheduledTask(7, 13, 2), new ScheduledTask(7, 13, 3), new ScheduledTask(7, 12, 4), new ScheduledTask(7, 12, 5), new ScheduledTask(10, 15, 0), new ScheduledTask(10, 14, 1), new ScheduledTask(12, 16, 4), new ScheduledTask(12, 15, 5), new ScheduledTask(13, 16, 2), new ScheduledTask(13, 15, 3)};
        int[] expectedProcessorEndTimes = new int[]{15, 14, 16, 15, 16, 15};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(10, 20, 0), new ScheduledTask(10, 20, 1), new ScheduledTask(20, 29, 0), new ScheduledTask(20, 28, 1), new ScheduledTask(28, 36, 1), new ScheduledTask(29, 36, 0), new ScheduledTask(36, 43, 0), new ScheduledTask(36, 42, 1), new ScheduledTask(42, 48, 1), new ScheduledTask(43, 48, 0), new ScheduledTask(48, 52, 0), new ScheduledTask(48, 52, 1), new ScheduledTask(52, 54, 0), new ScheduledTask(52, 54, 1)};
        int[] expectedProcessorEndTimes = new int[]{54, 54};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 27;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 10, 3), new ScheduledTask(10, 19, 0), new ScheduledTask(19, 27, 0), new ScheduledTask(10, 18, 3), new ScheduledTask(10, 17, 2), new ScheduledTask(18, 25, 3), new ScheduledTask(10, 16, 1), new ScheduledTask(17, 23, 2), new ScheduledTask(16, 21, 1), new ScheduledTask(21, 25, 1), new ScheduledTask(23, 27, 2), new ScheduledTask(25, 27, 1), new ScheduledTask(25, 27, 3)};
        int[] expectedProcessorEndTimes = new int[]{27, 27, 27, 27};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 18;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 10, 3), new ScheduledTask(0, 9, 4), new ScheduledTask(10, 18, 0), new ScheduledTask(10, 18, 2), new ScheduledTask(0, 7, 5), new ScheduledTask(7, 14, 5), new ScheduledTask(10, 16, 1), new ScheduledTask(10, 16, 3), new ScheduledTask(9, 14, 4), new ScheduledTask(14, 18, 4), new ScheduledTask(14, 18, 5), new ScheduledTask(16, 18, 1), new ScheduledTask(16, 18, 3)};
        int[] expectedProcessorEndTimes = new int[]{18, 18, 18, 18, 18, 18};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 41;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(9, 17, 0), new ScheduledTask(9, 17, 1), new ScheduledTask(17, 23, 0), new ScheduledTask(17, 23, 1), new ScheduledTask(23, 29, 0), new ScheduledTask(23, 28, 1), new ScheduledTask(28, 32, 1), new ScheduledTask(29, 33, 0), new ScheduledTask(32, 35, 1), new ScheduledTask(33, 36, 0), new ScheduledTask(35, 38, 1), new ScheduledTask(36, 39, 0), new ScheduledTask(38, 41, 1), new ScheduledTask(39, 41, 0)};
        int[] expectedProcessorEndTimes = new int[]{41, 41};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 21;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(0, 8, 2), new ScheduledTask(0, 8, 3), new ScheduledTask(8, 14, 2), new ScheduledTask(8, 14, 3), new ScheduledTask(9, 15, 0), new ScheduledTask(9, 14, 1), new ScheduledTask(14, 18, 1), new ScheduledTask(14, 18, 2), new ScheduledTask(14, 17, 3), new ScheduledTask(15, 18, 0), new ScheduledTask(17, 20, 3), new ScheduledTask(18, 21, 0), new ScheduledTask(18, 21, 1), new ScheduledTask(18, 20, 2)};
        int[] expectedProcessorEndTimes = new int[]{21, 21, 20, 20};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 14;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(0, 8, 2), new ScheduledTask(0, 8, 3), new ScheduledTask(8, 14, 3), new ScheduledTask(0, 6, 4), new ScheduledTask(0, 6, 5), new ScheduledTask(9, 14, 0), new ScheduledTask(9, 13, 1), new ScheduledTask(6, 10, 4), new ScheduledTask(8, 11, 2), new ScheduledTask(11, 14, 2), new ScheduledTask(10, 13, 4), new ScheduledTask(6, 9, 5), new ScheduledTask(9, 12, 5), new ScheduledTask(12, 14, 5)};
        int[] expectedProcessorEndTimes = new int[]{14, 13, 14, 14, 13, 14};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(9, 18, 1), new ScheduledTask(10, 18, 0), new ScheduledTask(18, 26, 0), new ScheduledTask(18, 25, 1), new ScheduledTask(25, 30, 1), new ScheduledTask(26, 31, 0), new ScheduledTask(30, 35, 1), new ScheduledTask(31, 35, 0), new ScheduledTask(35, 39, 0), new ScheduledTask(35, 39, 1), new ScheduledTask(39, 43, 0), new ScheduledTask(39, 42, 1), new ScheduledTask(42, 44, 1), new ScheduledTask(43, 45, 0)};
        int[] expectedProcessorEndTimes = new int[]{45, 44};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 23;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(0, 9, 2), new ScheduledTask(0, 8, 3), new ScheduledTask(8, 16, 3), new ScheduledTask(9, 16, 1), new ScheduledTask(9, 14, 2), new ScheduledTask(10, 15, 0), new ScheduledTask(14, 19, 2), new ScheduledTask(15, 19, 0), new ScheduledTask(16, 20, 1), new ScheduledTask(16, 20, 3), new ScheduledTask(19, 23, 0), new ScheduledTask(19, 22, 2), new ScheduledTask(20, 22, 1), new ScheduledTask(20, 22, 3)};
        int[] expectedProcessorEndTimes = new int[]{23, 22, 22, 22};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 15;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(0, 9, 2), new ScheduledTask(0, 8, 3), new ScheduledTask(0, 8, 4), new ScheduledTask(0, 7, 5), new ScheduledTask(10, 15, 0), new ScheduledTask(9, 14, 2), new ScheduledTask(8, 13, 4), new ScheduledTask(9, 13, 1), new ScheduledTask(8, 12, 3), new ScheduledTask(7, 11, 5), new ScheduledTask(11, 15, 5), new ScheduledTask(12, 15, 3), new ScheduledTask(13, 15, 1), new ScheduledTask(13, 15, 4)};
        int[] expectedProcessorEndTimes = new int[]{15, 15, 14, 15, 15, 15};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 454;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(414, 454, 0), new ScheduledTask(335, 414, 0), new ScheduledTask(376, 406, 1), new ScheduledTask(228, 287, 1), new ScheduledTask(109, 168, 0), new ScheduledTask(168, 227, 0), new ScheduledTask(227, 286, 0), new ScheduledTask(286, 335, 0), new ScheduledTask(356, 376, 1), new ScheduledTask(287, 356, 1), new ScheduledTask(129, 198, 1), new ScheduledTask(30, 129, 1), new ScheduledTask(198, 228, 1), new ScheduledTask(0, 30, 1), new ScheduledTask(20, 109, 0), new ScheduledTask(0, 20, 0)};
        int[] expectedProcessorEndTimes = new int[]{454, 406};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 267;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(227, 267, 0), new ScheduledTask(148, 227, 0), new ScheduledTask(187, 217, 2), new ScheduledTask(164, 223, 1), new ScheduledTask(89, 148, 0), new ScheduledTask(0, 59, 2), new ScheduledTask(79, 138, 2), new ScheduledTask(138, 187, 2), new ScheduledTask(138, 158, 1), new ScheduledTask(0, 69, 1), new ScheduledTask(69, 138, 1), new ScheduledTask(30, 129, 3), new ScheduledTask(129, 159, 3), new ScheduledTask(0, 30, 3), new ScheduledTask(0, 89, 0), new ScheduledTask(59, 79, 2)};
        int[] expectedProcessorEndTimes = new int[]{267, 223, 217, 159};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 267;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(227, 267, 0), new ScheduledTask(148, 227, 0), new ScheduledTask(138, 168, 2), new ScheduledTask(108, 167, 1), new ScheduledTask(89, 148, 0), new ScheduledTask(30, 89, 4), new ScheduledTask(20, 79, 5), new ScheduledTask(20, 69, 2), new ScheduledTask(0, 20, 5), new ScheduledTask(69, 138, 2), new ScheduledTask(30, 99, 3), new ScheduledTask(0, 99, 1), new ScheduledTask(0, 30, 3), new ScheduledTask(0, 30, 4), new ScheduledTask(0, 89, 0), new ScheduledTask(0, 20, 2)};
        int[] expectedProcessorEndTimes = new int[]{267, 167, 168, 99, 89, 79};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 482;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(412, 482, 0), new ScheduledTask(185, 229, 1), new ScheduledTask(353, 406, 1), new ScheduledTask(342, 412, 0), new ScheduledTask(105, 175, 0), new ScheduledTask(53, 132, 1), new ScheduledTask(0, 79, 0), new ScheduledTask(175, 263, 0), new ScheduledTask(263, 342, 0), new ScheduledTask(300, 353, 1), new ScheduledTask(132, 185, 1), new ScheduledTask(229, 282, 1), new ScheduledTask(282, 300, 1), new ScheduledTask(0, 35, 1), new ScheduledTask(79, 105, 0), new ScheduledTask(35, 53, 1)};
        int[] expectedProcessorEndTimes = new int[]{482, 406};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 292;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(222, 292, 0), new ScheduledTask(178, 222, 0), new ScheduledTask(158, 211, 1), new ScheduledTask(141, 211, 2), new ScheduledTask(106, 176, 0), new ScheduledTask(0, 79, 3), new ScheduledTask(97, 176, 3), new ScheduledTask(0, 88, 2), new ScheduledTask(79, 158, 1), new ScheduledTask(88, 141, 2), new ScheduledTask(0, 53, 0), new ScheduledTask(0, 53, 1), new ScheduledTask(79, 97, 3), new ScheduledTask(53, 88, 0), new ScheduledTask(53, 79, 1), new ScheduledTask(88, 106, 0)};
        int[] expectedProcessorEndTimes = new int[]{292, 211, 211, 176};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 239;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(169, 239, 0), new ScheduledTask(123, 167, 0), new ScheduledTask(111, 164, 1), new ScheduledTask(88, 158, 2), new ScheduledTask(53, 123, 0), new ScheduledTask(36, 115, 3), new ScheduledTask(35, 114, 4), new ScheduledTask(0, 88, 2), new ScheduledTask(26, 105, 5), new ScheduledTask(53, 106, 1), new ScheduledTask(0, 53, 0), new ScheduledTask(0, 53, 1), new ScheduledTask(0, 18, 3), new ScheduledTask(0, 35, 4), new ScheduledTask(0, 26, 5), new ScheduledTask(18, 36, 3)};
        int[] expectedProcessorEndTimes = new int[]{239, 164, 158, 115, 114, 105};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 457;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(428, 457, 0), new ScheduledTask(216, 236, 1), new ScheduledTask(374, 423, 1), new ScheduledTask(360, 428, 0), new ScheduledTask(117, 185, 0), new ScheduledTask(196, 216, 1), new ScheduledTask(98, 196, 1), new ScheduledTask(334, 354, 1), new ScheduledTask(354, 374, 1), new ScheduledTask(263, 331, 0), new ScheduledTask(185, 263, 0), new ScheduledTask(331, 360, 0), new ScheduledTask(236, 334, 1), new ScheduledTask(0, 98, 1), new ScheduledTask(78, 117, 0), new ScheduledTask(0, 78, 0)};
        int[] expectedProcessorEndTimes = new int[]{457, 423};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 253;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(224, 253, 0), new ScheduledTask(197, 217, 1), new ScheduledTask(166, 215, 3), new ScheduledTask(156, 224, 0), new ScheduledTask(127, 195, 2), new ScheduledTask(177, 197, 1), new ScheduledTask(79, 177, 1), new ScheduledTask(39, 59, 1), new ScheduledTask(59, 79, 1), new ScheduledTask(98, 166, 3), new ScheduledTask(78, 156, 0), new ScheduledTask(98, 127, 2), new ScheduledTask(0, 98, 3), new ScheduledTask(0, 98, 2), new ScheduledTask(0, 39, 1), new ScheduledTask(0, 78, 0)};
        int[] expectedProcessorEndTimes = new int[]{253, 217, 195, 215};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 215;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(186, 215, 0), new ScheduledTask(166, 186, 0), new ScheduledTask(124, 173, 2), new ScheduledTask(103, 171, 1), new ScheduledTask(98, 166, 0), new ScheduledTask(0, 20, 5), new ScheduledTask(59, 157, 3), new ScheduledTask(0, 20, 2), new ScheduledTask(0, 20, 3), new ScheduledTask(49, 117, 5), new ScheduledTask(20, 98, 2), new ScheduledTask(20, 49, 5), new ScheduledTask(0, 98, 1), new ScheduledTask(0, 98, 0), new ScheduledTask(20, 59, 3), new ScheduledTask(0, 78, 4)};
        int[] expectedProcessorEndTimes = new int[]{215, 171, 173, 157, 78, 117};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 495;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(442, 495, 0), new ScheduledTask(203, 235, 0), new ScheduledTask(416, 437, 1), new ScheduledTask(396, 439, 0), new ScheduledTask(150, 203, 0), new ScheduledTask(53, 160, 1), new ScheduledTask(160, 192, 1), new ScheduledTask(395, 416, 1), new ScheduledTask(321, 396, 0), new ScheduledTask(363, 395, 1), new ScheduledTask(235, 321, 0), new ScheduledTask(192, 299, 1), new ScheduledTask(299, 363, 1), new ScheduledTask(75, 150, 0), new ScheduledTask(0, 75, 0), new ScheduledTask(0, 53, 1)};
        int[] expectedProcessorEndTimes = new int[]{495, 437};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 284;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(231, 284, 0), new ScheduledTask(193, 225, 1), new ScheduledTask(205, 226, 3), new ScheduledTask(181, 224, 0), new ScheduledTask(128, 181, 0), new ScheduledTask(0, 107, 2), new ScheduledTask(161, 193, 1), new ScheduledTask(182, 203, 2), new ScheduledTask(107, 182, 2), new ScheduledTask(171, 203, 3), new ScheduledTask(75, 161, 1), new ScheduledTask(0, 107, 3), new ScheduledTask(107, 171, 3), new ScheduledTask(53, 128, 0), new ScheduledTask(0, 75, 1), new ScheduledTask(0, 53, 0)};
        int[] expectedProcessorEndTimes = new int[]{284, 225, 203, 226};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 226;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(173, 226, 0), new ScheduledTask(135, 167, 1), new ScheduledTask(150, 171, 0), new ScheduledTask(117, 160, 2), new ScheduledTask(82, 135, 1), new ScheduledTask(0, 107, 3), new ScheduledTask(86, 118, 5), new ScheduledTask(118, 139, 5), new ScheduledTask(75, 150, 0), new ScheduledTask(107, 139, 4), new ScheduledTask(0, 86, 5), new ScheduledTask(0, 107, 4), new ScheduledTask(53, 117, 2), new ScheduledTask(0, 75, 0), new ScheduledTask(0, 75, 1), new ScheduledTask(0, 53, 2)};
        int[] expectedProcessorEndTimes = new int[]{226, 167, 160, 107, 139, 139};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 487;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(459, 487, 0), new ScheduledTask(253, 309, 0), new ScheduledTask(387, 453, 1), new ScheduledTask(365, 459, 0), new ScheduledTask(197, 253, 0), new ScheduledTask(85, 151, 1), new ScheduledTask(141, 197, 0), new ScheduledTask(0, 85, 1), new ScheduledTask(309, 337, 0), new ScheduledTask(302, 387, 1), new ScheduledTask(170, 236, 1), new ScheduledTask(337, 365, 0), new ScheduledTask(236, 302, 1), new ScheduledTask(151, 170, 1), new ScheduledTask(0, 75, 0), new ScheduledTask(75, 141, 0)};
        int[] expectedProcessorEndTimes = new int[]{487, 453};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 277;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(249, 277, 0), new ScheduledTask(190, 246, 0), new ScheduledTask(179, 245, 2), new ScheduledTask(141, 235, 1), new ScheduledTask(132, 188, 0), new ScheduledTask(0, 66, 0), new ScheduledTask(132, 188, 3), new ScheduledTask(0, 85, 3), new ScheduledTask(104, 132, 3), new ScheduledTask(94, 179, 2), new ScheduledTask(0, 66, 2), new ScheduledTask(66, 94, 2), new ScheduledTask(75, 141, 1), new ScheduledTask(85, 104, 3), new ScheduledTask(0, 75, 1), new ScheduledTask(66, 132, 0)};
        int[] expectedProcessorEndTimes = new int[]{277, 235, 245, 188};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 221;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(193, 221, 0), new ScheduledTask(137, 193, 0), new ScheduledTask(120, 186, 2), new ScheduledTask(85, 179, 1), new ScheduledTask(75, 131, 3), new ScheduledTask(66, 132, 0), new ScheduledTask(66, 122, 5), new ScheduledTask(28, 113, 2), new ScheduledTask(85, 113, 4), new ScheduledTask(0, 85, 4), new ScheduledTask(0, 66, 5), new ScheduledTask(0, 28, 2), new ScheduledTask(19, 85, 1), new ScheduledTask(0, 19, 1), new ScheduledTask(0, 75, 3), new ScheduledTask(0, 66, 0)};
        int[] expectedProcessorEndTimes = new int[]{221, 179, 186, 131, 113, 122};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 433;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(391, 433, 0), new ScheduledTask(363, 388, 1), new ScheduledTask(323, 391, 0), new ScheduledTask(295, 363, 1), new ScheduledTask(153, 238, 0), new ScheduledTask(306, 323, 0), new ScheduledTask(272, 306, 0), new ScheduledTask(0, 51, 0), new ScheduledTask(51, 102, 0), new ScheduledTask(211, 253, 1), new ScheduledTask(135, 211, 1), new ScheduledTask(253, 295, 1), new ScheduledTask(238, 272, 0), new ScheduledTask(102, 153, 0), new ScheduledTask(0, 76, 1), new ScheduledTask(76, 135, 1)};
        int[] expectedProcessorEndTimes = new int[]{433, 388};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 250;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(208, 250, 0), new ScheduledTask(180, 205, 1), new ScheduledTask(132, 200, 2), new ScheduledTask(135, 203, 0), new ScheduledTask(93, 178, 1), new ScheduledTask(127, 144, 3), new ScheduledTask(144, 178, 3), new ScheduledTask(76, 127, 3), new ScheduledTask(76, 127, 2), new ScheduledTask(51, 93, 0), new ScheduledTask(0, 76, 3), new ScheduledTask(93, 135, 0), new ScheduledTask(59, 93, 1), new ScheduledTask(0, 51, 0), new ScheduledTask(0, 76, 2), new ScheduledTask(0, 59, 1)};
        int[] expectedProcessorEndTimes = new int[]{250, 205, 200, 178};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 228;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(186, 228, 0), new ScheduledTask(161, 186, 0), new ScheduledTask(108, 176, 2), new ScheduledTask(102, 170, 1), new ScheduledTask(76, 161, 0), new ScheduledTask(127, 144, 5), new ScheduledTask(93, 127, 5), new ScheduledTask(0, 51, 5), new ScheduledTask(51, 102, 1), new ScheduledTask(0, 42, 2), new ScheduledTask(0, 76, 3), new ScheduledTask(51, 93, 5), new ScheduledTask(59, 93, 4), new ScheduledTask(0, 51, 1), new ScheduledTask(0, 76, 0), new ScheduledTask(0, 59, 4)};
        int[] expectedProcessorEndTimes = new int[]{228, 170, 176, 76, 93, 144};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 504;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(451, 504, 0), new ScheduledTask(422, 448, 1), new ScheduledTask(221, 265, 0), new ScheduledTask(415, 450, 0), new ScheduledTask(167, 246, 1), new ScheduledTask(246, 334, 1), new ScheduledTask(360, 422, 1), new ScheduledTask(203, 221, 0), new ScheduledTask(141, 203, 0), new ScheduledTask(0, 88, 0), new ScheduledTask(334, 360, 1), new ScheduledTask(265, 353, 0), new ScheduledTask(353, 415, 0), new ScheduledTask(88, 141, 0), new ScheduledTask(88, 167, 1), new ScheduledTask(0, 88, 1)};
        int[] expectedProcessorEndTimes = new int[]{504, 448};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 290;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(237, 290, 0), new ScheduledTask(207, 233, 1), new ScheduledTask(193, 237, 0), new ScheduledTask(194, 229, 2), new ScheduledTask(114, 193, 0), new ScheduledTask(115, 203, 3), new ScheduledTask(141, 203, 1), new ScheduledTask(88, 106, 2), new ScheduledTask(53, 115, 3), new ScheduledTask(0, 88, 2), new ScheduledTask(88, 114, 0), new ScheduledTask(106, 194, 2), new ScheduledTask(79, 141, 1), new ScheduledTask(0, 53, 3), new ScheduledTask(0, 79, 1), new ScheduledTask(0, 88, 0)};
        int[] expectedProcessorEndTimes = new int[]{290, 233, 229, 203};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 246;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(193, 246, 0), new ScheduledTask(167, 193, 0), new ScheduledTask(114, 158, 1), new ScheduledTask(141, 176, 2), new ScheduledTask(88, 167, 0), new ScheduledTask(62, 150, 3), new ScheduledTask(80, 142, 5), new ScheduledTask(0, 18, 5), new ScheduledTask(18, 80, 5), new ScheduledTask(26, 114, 1), new ScheduledTask(0, 26, 1), new ScheduledTask(53, 141, 2), new ScheduledTask(0, 62, 3), new ScheduledTask(0, 53, 2), new ScheduledTask(0, 79, 4), new ScheduledTask(0, 88, 0)};
        int[] expectedProcessorEndTimes = new int[]{246, 158, 176, 150, 79, 142};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 486;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(443, 486, 0), new ScheduledTask(247, 298, 0), new ScheduledTask(376, 436, 1), new ScheduledTask(366, 443, 0), new ScheduledTask(128, 162, 1), new ScheduledTask(43, 128, 0), new ScheduledTask(162, 239, 1), new ScheduledTask(299, 376, 1), new ScheduledTask(213, 247, 0), new ScheduledTask(298, 332, 0), new ScheduledTask(332, 366, 0), new ScheduledTask(239, 299, 1), new ScheduledTask(128, 213, 0), new ScheduledTask(0, 43, 0), new ScheduledTask(51, 128, 1), new ScheduledTask(0, 51, 1)};
        int[] expectedProcessorEndTimes = new int[]{486, 436};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 281;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(238, 281, 0), new ScheduledTask(187, 238, 0), new ScheduledTask(171, 231, 2), new ScheduledTask(154, 231, 1), new ScheduledTask(153, 187, 0), new ScheduledTask(94, 179, 3), new ScheduledTask(77, 154, 1), new ScheduledTask(94, 171, 2), new ScheduledTask(60, 94, 3), new ScheduledTask(119, 153, 0), new ScheduledTask(85, 119, 0), new ScheduledTask(0, 60, 3), new ScheduledTask(0, 85, 0), new ScheduledTask(51, 94, 2), new ScheduledTask(0, 77, 1), new ScheduledTask(0, 51, 2)};
        int[] expectedProcessorEndTimes = new int[]{281, 231, 231, 179};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 227;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(184, 227, 0), new ScheduledTask(133, 184, 0), new ScheduledTask(113, 173, 2), new ScheduledTask(94, 171, 1), new ScheduledTask(85, 119, 3), new ScheduledTask(43, 128, 4), new ScheduledTask(51, 128, 0), new ScheduledTask(0, 77, 5), new ScheduledTask(77, 111, 2), new ScheduledTask(77, 111, 5), new ScheduledTask(0, 34, 1), new ScheduledTask(34, 94, 1), new ScheduledTask(0, 85, 3), new ScheduledTask(0, 43, 4), new ScheduledTask(0, 77, 2), new ScheduledTask(0, 51, 0)};
        int[] expectedProcessorEndTimes = new int[]{227, 171, 173, 119, 128, 111};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 378;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(314, 378, 0), new ScheduledTask(296, 312, 1), new ScheduledTask(248, 312, 0), new ScheduledTask(240, 296, 1), new ScheduledTask(88, 112, 0), new ScheduledTask(184, 208, 0), new ScheduledTask(232, 248, 0), new ScheduledTask(120, 160, 1), new ScheduledTask(160, 200, 1), new ScheduledTask(200, 240, 1), new ScheduledTask(48, 120, 1), new ScheduledTask(112, 184, 0), new ScheduledTask(208, 232, 0), new ScheduledTask(0, 40, 0), new ScheduledTask(0, 48, 1), new ScheduledTask(40, 88, 0)};
        int[] expectedProcessorEndTimes = new int[]{378, 312};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 230;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(166, 230, 0), new ScheduledTask(148, 164, 2), new ScheduledTask(96, 160, 0), new ScheduledTask(104, 160, 1), new ScheduledTask(124, 148, 2), new ScheduledTask(120, 144, 3), new ScheduledTask(80, 96, 0), new ScheduledTask(0, 40, 1), new ScheduledTask(0, 40, 0), new ScheduledTask(40, 80, 1), new ScheduledTask(0, 72, 3), new ScheduledTask(0, 72, 2), new ScheduledTask(80, 104, 1), new ScheduledTask(40, 80, 0), new ScheduledTask(72, 120, 2), new ScheduledTask(72, 120, 3)};
        int[] expectedProcessorEndTimes = new int[]{230, 160, 164, 144};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 194;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(130, 194, 0), new ScheduledTask(112, 128, 2), new ScheduledTask(42, 106, 1), new ScheduledTask(74, 130, 0), new ScheduledTask(88, 112, 2), new ScheduledTask(80, 104, 5), new ScheduledTask(72, 88, 4), new ScheduledTask(0, 40, 2), new ScheduledTask(0, 40, 1), new ScheduledTask(0, 40, 5), new ScheduledTask(0, 72, 0), new ScheduledTask(0, 72, 3), new ScheduledTask(0, 24, 4), new ScheduledTask(40, 80, 5), new ScheduledTask(24, 72, 4), new ScheduledTask(40, 88, 2)};
        int[] expectedProcessorEndTimes = new int[]{194, 106, 128, 72, 88, 104};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 461;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(441, 461, 0), new ScheduledTask(253, 324, 0), new ScheduledTask(382, 433, 1), new ScheduledTask(386, 437, 0), new ScheduledTask(131, 151, 1), new ScheduledTask(71, 172, 0), new ScheduledTask(151, 181, 1), new ScheduledTask(181, 282, 1), new ScheduledTask(322, 352, 1), new ScheduledTask(282, 322, 1), new ScheduledTask(172, 253, 0), new ScheduledTask(352, 382, 1), new ScheduledTask(324, 385, 0), new ScheduledTask(0, 71, 0), new ScheduledTask(0, 30, 1), new ScheduledTask(30, 131, 1)};
        int[] expectedProcessorEndTimes = new int[]{461, 433};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 261;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(241, 261, 0), new ScheduledTask(160, 231, 1), new ScheduledTask(172, 223, 2), new ScheduledTask(189, 240, 0), new ScheduledTask(106, 126, 3), new ScheduledTask(0, 101, 3), new ScheduledTask(40, 70, 1), new ScheduledTask(71, 172, 2), new ScheduledTask(100, 130, 1), new ScheduledTask(0, 40, 1), new ScheduledTask(101, 182, 0), new ScheduledTask(130, 160, 1), new ScheduledTask(126, 187, 3), new ScheduledTask(0, 71, 2), new ScheduledTask(70, 100, 1), new ScheduledTask(0, 101, 0)};
        int[] expectedProcessorEndTimes = new int[]{261, 231, 223, 187};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 212;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(192, 212, 0), new ScheduledTask(121, 192, 0), new ScheduledTask(133, 184, 1), new ScheduledTask(121, 172, 2), new ScheduledTask(101, 121, 0), new ScheduledTask(0, 101, 3), new ScheduledTask(61, 91, 2), new ScheduledTask(30, 131, 4), new ScheduledTask(91, 121, 2), new ScheduledTask(71, 111, 1), new ScheduledTask(30, 111, 5), new ScheduledTask(0, 30, 4), new ScheduledTask(0, 61, 2), new ScheduledTask(0, 71, 1), new ScheduledTask(0, 30, 5), new ScheduledTask(0, 101, 0)};
        int[] expectedProcessorEndTimes = new int[]{212, 184, 172, 101, 131, 111};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot96_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.96_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(46, 52, 0), new ScheduledTask(38, 41, 1), new ScheduledTask(41, 46, 0), new ScheduledTask(28, 36, 0), new ScheduledTask(25, 27, 1), new ScheduledTask(16, 25, 0), new ScheduledTask(30, 38, 1), new ScheduledTask(27, 30, 1), new ScheduledTask(39, 41, 0), new ScheduledTask(36, 39, 0), new ScheduledTask(10, 18, 1), new ScheduledTask(25, 28, 0), new ScheduledTask(0, 10, 0), new ScheduledTask(10, 16, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(18, 25, 1)};
        int[] expectedProcessorEndTimes = new int[]{52, 41};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot96_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.96_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 33;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(27, 33, 0), new ScheduledTask(24, 27, 0), new ScheduledTask(15, 20, 2), new ScheduledTask(13, 21, 1), new ScheduledTask(21, 23, 0), new ScheduledTask(0, 9, 2), new ScheduledTask(12, 20, 3), new ScheduledTask(9, 12, 2), new ScheduledTask(10, 12, 3), new ScheduledTask(12, 15, 2), new ScheduledTask(0, 8, 0), new ScheduledTask(10, 13, 1), new ScheduledTask(0, 10, 1), new ScheduledTask(15, 21, 0), new ScheduledTask(0, 10, 3), new ScheduledTask(8, 15, 0)};
        int[] expectedProcessorEndTimes = new int[]{33, 21, 20, 20};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot96_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.96_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(25, 31, 0), new ScheduledTask(17, 20, 1), new ScheduledTask(12, 17, 2), new ScheduledTask(17, 25, 0), new ScheduledTask(15, 17, 1), new ScheduledTask(0, 9, 3), new ScheduledTask(5, 13, 4), new ScheduledTask(0, 3, 5), new ScheduledTask(3, 5, 4), new ScheduledTask(0, 3, 4), new ScheduledTask(3, 11, 5), new ScheduledTask(11, 14, 5), new ScheduledTask(6, 16, 0), new ScheduledTask(0, 6, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 7, 2)};
        int[] expectedProcessorEndTimes = new int[]{31, 20, 17, 9, 13, 14};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot96_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.96_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(45, 51, 0), new ScheduledTask(35, 38, 0), new ScheduledTask(43, 45, 0), new ScheduledTask(35, 41, 1), new ScheduledTask(21, 31, 0), new ScheduledTask(17, 25, 1), new ScheduledTask(25, 27, 1), new ScheduledTask(38, 41, 0), new ScheduledTask(41, 43, 0), new ScheduledTask(31, 35, 0), new ScheduledTask(10, 16, 0), new ScheduledTask(27, 35, 1), new ScheduledTask(7, 17, 1), new ScheduledTask(0, 10, 0), new ScheduledTask(16, 21, 0), new ScheduledTask(0, 7, 1)};
        int[] expectedProcessorEndTimes = new int[]{51, 41};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot96_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.96_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(29, 35, 0), new ScheduledTask(26, 29, 0), new ScheduledTask(19, 21, 2), new ScheduledTask(19, 25, 1), new ScheduledTask(16, 26, 0), new ScheduledTask(11, 19, 2), new ScheduledTask(0, 2, 3), new ScheduledTask(0, 3, 2), new ScheduledTask(0, 2, 0), new ScheduledTask(2, 6, 0), new ScheduledTask(7, 13, 3), new ScheduledTask(3, 11, 2), new ScheduledTask(7, 17, 1), new ScheduledTask(6, 16, 0), new ScheduledTask(2, 7, 3), new ScheduledTask(0, 7, 1)};
        int[] expectedProcessorEndTimes = new int[]{35, 25, 21, 13};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot96_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.96_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(29, 35, 0), new ScheduledTask(26, 29, 0), new ScheduledTask(16, 18, 2), new ScheduledTask(17, 23, 1), new ScheduledTask(16, 26, 0), new ScheduledTask(8, 16, 2), new ScheduledTask(0, 2, 4), new ScheduledTask(0, 3, 3), new ScheduledTask(0, 2, 0), new ScheduledTask(0, 4, 5), new ScheduledTask(3, 9, 3), new ScheduledTask(0, 8, 2), new ScheduledTask(7, 17, 1), new ScheduledTask(2, 12, 0), new ScheduledTask(2, 7, 4), new ScheduledTask(0, 7, 1)};
        int[] expectedProcessorEndTimes = new int[]{35, 23, 18, 9, 7, 4};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot98_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.98_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(49, 58, 0), new ScheduledTask(32, 40, 0), new ScheduledTask(40, 46, 1), new ScheduledTask(44, 49, 0), new ScheduledTask(23, 28, 0), new ScheduledTask(28, 32, 0), new ScheduledTask(13, 16, 1), new ScheduledTask(34, 37, 1), new ScheduledTask(37, 40, 1), new ScheduledTask(26, 34, 1), new ScheduledTask(16, 26, 1), new ScheduledTask(40, 44, 0), new ScheduledTask(0, 13, 1), new ScheduledTask(11, 23, 0), new ScheduledTask(0, 3, 0), new ScheduledTask(3, 11, 0)};
        int[] expectedProcessorEndTimes = new int[]{58, 46};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot98_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.98_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 38;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(29, 38, 0), new ScheduledTask(21, 29, 0), new ScheduledTask(19, 25, 2), new ScheduledTask(19, 24, 1), new ScheduledTask(16, 21, 0), new ScheduledTask(14, 18, 3), new ScheduledTask(8, 11, 2), new ScheduledTask(0, 3, 1), new ScheduledTask(3, 6, 1), new ScheduledTask(11, 19, 2), new ScheduledTask(4, 14, 3), new ScheduledTask(0, 4, 3), new ScheduledTask(6, 19, 1), new ScheduledTask(3, 15, 0), new ScheduledTask(0, 3, 0), new ScheduledTask(0, 8, 2)};
        int[] expectedProcessorEndTimes = new int[]{38, 24, 25, 18};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot98_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.98_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 38;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(29, 38, 0), new ScheduledTask(21, 29, 0), new ScheduledTask(17, 23, 2), new ScheduledTask(17, 22, 1), new ScheduledTask(16, 21, 0), new ScheduledTask(7, 11, 5), new ScheduledTask(0, 3, 1), new ScheduledTask(0, 3, 5), new ScheduledTask(0, 3, 2), new ScheduledTask(3, 11, 3), new ScheduledTask(3, 13, 2), new ScheduledTask(3, 7, 5), new ScheduledTask(3, 16, 1), new ScheduledTask(0, 12, 0), new ScheduledTask(0, 3, 3), new ScheduledTask(0, 8, 4)};
        int[] expectedProcessorEndTimes = new int[]{38, 22, 23, 11, 8, 11};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 48;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(40, 48, 0), new ScheduledTask(28, 35, 0), new ScheduledTask(35, 38, 1), new ScheduledTask(37, 39, 0), new ScheduledTask(10, 16, 0), new ScheduledTask(26, 28, 0), new ScheduledTask(16, 26, 0), new ScheduledTask(28, 32, 1), new ScheduledTask(7, 17, 1), new ScheduledTask(32, 35, 1), new ScheduledTask(17, 24, 1), new ScheduledTask(24, 28, 1), new ScheduledTask(35, 37, 0), new ScheduledTask(2, 10, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(0, 7, 1)};
        int[] expectedProcessorEndTimes = new int[]{48, 38};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(24, 32, 0), new ScheduledTask(17, 24, 0), new ScheduledTask(19, 22, 1), new ScheduledTask(15, 17, 2), new ScheduledTask(11, 17, 0), new ScheduledTask(7, 9, 2), new ScheduledTask(0, 10, 3), new ScheduledTask(13, 17, 3), new ScheduledTask(9, 19, 1), new ScheduledTask(10, 13, 3), new ScheduledTask(0, 7, 2), new ScheduledTask(9, 13, 2), new ScheduledTask(13, 15, 2), new ScheduledTask(0, 8, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(2, 9, 1)};
        int[] expectedProcessorEndTimes = new int[]{32, 22, 17, 17};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 30;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(22, 30, 0), new ScheduledTask(15, 22, 0), new ScheduledTask(16, 19, 1), new ScheduledTask(12, 14, 2), new ScheduledTask(9, 15, 0), new ScheduledTask(2, 4, 5), new ScheduledTask(0, 10, 3), new ScheduledTask(6, 10, 5), new ScheduledTask(4, 14, 1), new ScheduledTask(7, 10, 4), new ScheduledTask(0, 7, 2), new ScheduledTask(0, 4, 1), new ScheduledTask(4, 6, 5), new ScheduledTask(0, 8, 0), new ScheduledTask(0, 2, 5), new ScheduledTask(0, 7, 4)};
        int[] expectedProcessorEndTimes = new int[]{30, 19, 14, 10, 10, 10};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(54, 61, 0), new ScheduledTask(40, 49, 1), new ScheduledTask(17, 26, 1), new ScheduledTask(47, 53, 0), new ScheduledTask(22, 30, 0), new ScheduledTask(30, 37, 0), new ScheduledTask(34, 40, 1), new ScheduledTask(9, 17, 1), new ScheduledTask(5, 10, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(37, 43, 0), new ScheduledTask(26, 34, 1), new ScheduledTask(43, 47, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(20, 22, 0), new ScheduledTask(10, 20, 0)};
        int[] expectedProcessorEndTimes = new int[]{61, 49};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 41;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(34, 41, 0), new ScheduledTask(25, 34, 0), new ScheduledTask(16, 25, 1), new ScheduledTask(17, 23, 2), new ScheduledTask(16, 24, 0), new ScheduledTask(15, 22, 3), new ScheduledTask(9, 15, 3), new ScheduledTask(2, 10, 1), new ScheduledTask(8, 13, 2), new ScheduledTask(10, 15, 1), new ScheduledTask(0, 6, 0), new ScheduledTask(0, 8, 2), new ScheduledTask(13, 17, 2), new ScheduledTask(0, 9, 3), new ScheduledTask(0, 2, 1), new ScheduledTask(6, 16, 0)};
        int[] expectedProcessorEndTimes = new int[]{41, 25, 23, 22};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 38;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(31, 38, 0), new ScheduledTask(22, 31, 0), new ScheduledTask(13, 22, 1), new ScheduledTask(14, 20, 2), new ScheduledTask(14, 22, 0), new ScheduledTask(12, 19, 5), new ScheduledTask(6, 12, 5), new ScheduledTask(5, 13, 1), new ScheduledTask(2, 7, 2), new ScheduledTask(0, 5, 1), new ScheduledTask(0, 6, 5), new ScheduledTask(0, 8, 4), new ScheduledTask(7, 11, 2), new ScheduledTask(0, 9, 3), new ScheduledTask(0, 2, 2), new ScheduledTask(0, 10, 0)};
        int[] expectedProcessorEndTimes = new int[]{38, 22, 20, 9, 8, 19};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(51, 58, 0), new ScheduledTask(46, 51, 0), new ScheduledTask(45, 49, 1), new ScheduledTask(23, 35, 1), new ScheduledTask(18, 25, 0), new ScheduledTask(38, 45, 0), new ScheduledTask(35, 39, 1), new ScheduledTask(25, 29, 0), new ScheduledTask(39, 45, 1), new ScheduledTask(29, 38, 0), new ScheduledTask(16, 23, 1), new ScheduledTask(6, 16, 1), new ScheduledTask(0, 4, 0), new ScheduledTask(4, 14, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(14, 18, 0)};
        int[] expectedProcessorEndTimes = new int[]{58, 49};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 39;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(32, 39, 0), new ScheduledTask(27, 32, 0), new ScheduledTask(26, 30, 1), new ScheduledTask(14, 26, 0), new ScheduledTask(14, 21, 1), new ScheduledTask(7, 14, 3), new ScheduledTask(14, 18, 3), new ScheduledTask(6, 10, 2), new ScheduledTask(18, 24, 3), new ScheduledTask(10, 19, 2), new ScheduledTask(0, 7, 3), new ScheduledTask(4, 14, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(4, 14, 1), new ScheduledTask(0, 6, 2), new ScheduledTask(0, 4, 0)};
        int[] expectedProcessorEndTimes = new int[]{39, 30, 19, 24};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 39;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(32, 39, 0), new ScheduledTask(27, 32, 0), new ScheduledTask(18, 22, 2), new ScheduledTask(14, 26, 0), new ScheduledTask(14, 21, 1), new ScheduledTask(6, 13, 3), new ScheduledTask(0, 4, 5), new ScheduledTask(4, 8, 4), new ScheduledTask(8, 14, 4), new ScheduledTask(7, 16, 2), new ScheduledTask(0, 7, 2), new ScheduledTask(4, 14, 0), new ScheduledTask(0, 4, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 6, 3), new ScheduledTask(0, 4, 4)};
        int[] expectedProcessorEndTimes = new int[]{39, 21, 22, 13, 14, 4};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(44, 51, 0), new ScheduledTask(24, 33, 0), new ScheduledTask(31, 38, 1), new ScheduledTask(37, 43, 0), new ScheduledTask(16, 20, 0), new ScheduledTask(0, 10, 0), new ScheduledTask(6, 13, 1), new ScheduledTask(29, 31, 1), new ScheduledTask(19, 24, 1), new ScheduledTask(20, 24, 0), new ScheduledTask(13, 19, 1), new ScheduledTask(24, 29, 1), new ScheduledTask(33, 37, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(14, 16, 0), new ScheduledTask(10, 14, 0)};
        int[] expectedProcessorEndTimes = new int[]{51, 38};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 34;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(27, 34, 0), new ScheduledTask(18, 27, 0), new ScheduledTask(14, 21, 2), new ScheduledTask(13, 19, 1), new ScheduledTask(12, 16, 3), new ScheduledTask(7, 17, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(6, 8, 1), new ScheduledTask(5, 10, 2), new ScheduledTask(10, 14, 2), new ScheduledTask(0, 6, 3), new ScheduledTask(0, 5, 2), new ScheduledTask(8, 12, 1), new ScheduledTask(6, 12, 3), new ScheduledTask(0, 2, 1), new ScheduledTask(2, 6, 1)};
        int[] expectedProcessorEndTimes = new int[]{34, 19, 21, 16};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(25, 32, 0), new ScheduledTask(16, 25, 0), new ScheduledTask(12, 19, 2), new ScheduledTask(11, 17, 1), new ScheduledTask(12, 16, 0), new ScheduledTask(0, 10, 3), new ScheduledTask(0, 7, 0), new ScheduledTask(6, 8, 4), new ScheduledTask(0, 5, 5), new ScheduledTask(5, 9, 2), new ScheduledTask(4, 10, 1), new ScheduledTask(0, 5, 2), new ScheduledTask(0, 4, 1), new ScheduledTask(0, 6, 4), new ScheduledTask(7, 9, 0), new ScheduledTask(5, 9, 5)};
        int[] expectedProcessorEndTimes = new int[]{32, 17, 19, 10, 8, 9};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot04_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.04_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(42, 45, 0), new ScheduledTask(36, 42, 0), new ScheduledTask(16, 19, 1), new ScheduledTask(30, 40, 1), new ScheduledTask(34, 36, 0), new ScheduledTask(32, 34, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(2, 7, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(7, 9, 0), new ScheduledTask(8, 16, 1), new ScheduledTask(9, 16, 0), new ScheduledTask(19, 27, 1), new ScheduledTask(26, 32, 0), new ScheduledTask(27, 30, 1), new ScheduledTask(16, 26, 0)};
        int[] expectedProcessorEndTimes = new int[]{45, 40};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot04_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.04_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(26, 29, 0), new ScheduledTask(20, 26, 0), new ScheduledTask(13, 16, 3), new ScheduledTask(14, 24, 1), new ScheduledTask(16, 18, 2), new ScheduledTask(17, 19, 0), new ScheduledTask(9, 17, 0), new ScheduledTask(8, 13, 3), new ScheduledTask(0, 2, 1), new ScheduledTask(0, 2, 0), new ScheduledTask(0, 8, 3), new ScheduledTask(2, 9, 0), new ScheduledTask(2, 10, 1), new ScheduledTask(0, 6, 2), new ScheduledTask(10, 13, 1), new ScheduledTask(6, 16, 2)};
        int[] expectedProcessorEndTimes = new int[]{29, 24, 18, 16};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot04_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.04_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(26, 29, 0), new ScheduledTask(20, 26, 0), new ScheduledTask(13, 16, 3), new ScheduledTask(14, 24, 1), new ScheduledTask(15, 17, 2), new ScheduledTask(12, 14, 5), new ScheduledTask(0, 8, 0), new ScheduledTask(6, 11, 3), new ScheduledTask(0, 2, 5), new ScheduledTask(11, 13, 3), new ScheduledTask(0, 8, 4), new ScheduledTask(2, 9, 5), new ScheduledTask(0, 8, 1), new ScheduledTask(0, 6, 3), new ScheduledTask(9, 12, 5), new ScheduledTask(0, 10, 2)};
        int[] expectedProcessorEndTimes = new int[]{29, 24, 17, 16, 8, 14};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot08_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.08_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 48;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(43, 48, 0), new ScheduledTask(39, 43, 0), new ScheduledTask(29, 34, 1), new ScheduledTask(34, 39, 1), new ScheduledTask(33, 39, 0), new ScheduledTask(25, 33, 0), new ScheduledTask(6, 10, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(2, 6, 1), new ScheduledTask(0, 2, 0), new ScheduledTask(6, 12, 1), new ScheduledTask(20, 29, 1), new ScheduledTask(2, 6, 0), new ScheduledTask(10, 17, 0), new ScheduledTask(17, 25, 0), new ScheduledTask(12, 20, 1)};
        int[] expectedProcessorEndTimes = new int[]{48, 39};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot08_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.08_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(26, 31, 0), new ScheduledTask(22, 26, 0), new ScheduledTask(15, 20, 2), new ScheduledTask(18, 23, 1), new ScheduledTask(16, 22, 0), new ScheduledTask(6, 14, 3), new ScheduledTask(0, 4, 3), new ScheduledTask(4, 6, 3), new ScheduledTask(7, 11, 2), new ScheduledTask(6, 8, 0), new ScheduledTask(0, 6, 0), new ScheduledTask(8, 17, 1), new ScheduledTask(11, 15, 2), new ScheduledTask(0, 7, 2), new ScheduledTask(8, 16, 0), new ScheduledTask(0, 8, 1)};
        int[] expectedProcessorEndTimes = new int[]{31, 23, 20, 14};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot08_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.08_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 27;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(22, 27, 0), new ScheduledTask(18, 22, 0), new ScheduledTask(10, 15, 2), new ScheduledTask(14, 19, 1), new ScheduledTask(12, 18, 0), new ScheduledTask(2, 10, 3), new ScheduledTask(0, 4, 1), new ScheduledTask(0, 2, 5), new ScheduledTask(0, 4, 0), new ScheduledTask(0, 2, 3), new ScheduledTask(0, 6, 2), new ScheduledTask(4, 13, 1), new ScheduledTask(6, 10, 2), new ScheduledTask(2, 9, 5), new ScheduledTask(4, 12, 0), new ScheduledTask(0, 8, 4)};
        int[] expectedProcessorEndTimes = new int[]{27, 19, 15, 10, 8, 9};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot11_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.11_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(48, 50, 0), new ScheduledTask(41, 47, 0), new ScheduledTask(31, 41, 0), new ScheduledTask(35, 43, 1), new ScheduledTask(32, 35, 1), new ScheduledTask(0, 3, 0), new ScheduledTask(14, 21, 0), new ScheduledTask(2, 4, 1), new ScheduledTask(21, 31, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(3, 8, 0), new ScheduledTask(10, 16, 1), new ScheduledTask(24, 32, 1), new ScheduledTask(8, 14, 0), new ScheduledTask(16, 24, 1), new ScheduledTask(4, 10, 1)};
        int[] expectedProcessorEndTimes = new int[]{50, 43};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot11_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.11_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(29, 31, 0), new ScheduledTask(23, 29, 0), new ScheduledTask(10, 20, 1), new ScheduledTask(16, 24, 2), new ScheduledTask(20, 23, 0), new ScheduledTask(14, 17, 3), new ScheduledTask(7, 14, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 2, 2), new ScheduledTask(2, 7, 0), new ScheduledTask(10, 16, 2), new ScheduledTask(2, 10, 2), new ScheduledTask(14, 20, 0), new ScheduledTask(0, 8, 3), new ScheduledTask(8, 14, 3)};
        int[] expectedProcessorEndTimes = new int[]{31, 20, 24, 17};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot11_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.11_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 30;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(28, 30, 0), new ScheduledTask(22, 28, 0), new ScheduledTask(10, 20, 0), new ScheduledTask(13, 21, 1), new ScheduledTask(14, 17, 2), new ScheduledTask(4, 7, 5), new ScheduledTask(6, 13, 3), new ScheduledTask(2, 4, 5), new ScheduledTask(0, 10, 0), new ScheduledTask(0, 2, 5), new ScheduledTask(0, 5, 1), new ScheduledTask(0, 6, 3), new ScheduledTask(5, 13, 1), new ScheduledTask(0, 6, 2), new ScheduledTask(6, 14, 2), new ScheduledTask(0, 6, 4)};
        int[] expectedProcessorEndTimes = new int[]{30, 21, 17, 13, 6, 7};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(61, 71, 0), new ScheduledTask(42, 48, 0), new ScheduledTask(14, 16, 1), new ScheduledTask(56, 59, 0), new ScheduledTask(18, 27, 0), new ScheduledTask(37, 40, 0), new ScheduledTask(16, 24, 1), new ScheduledTask(4, 11, 1), new ScheduledTask(0, 4, 1), new ScheduledTask(11, 14, 1), new ScheduledTask(54, 56, 0), new ScheduledTask(48, 54, 0), new ScheduledTask(27, 37, 0), new ScheduledTask(10, 18, 0), new ScheduledTask(4, 10, 0), new ScheduledTask(0, 4, 0)};
        int[] expectedProcessorEndTimes = new int[]{71, 24};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(61, 71, 0), new ScheduledTask(30, 36, 0), new ScheduledTask(14, 16, 1), new ScheduledTask(56, 59, 0), new ScheduledTask(18, 27, 0), new ScheduledTask(27, 30, 0), new ScheduledTask(0, 8, 2), new ScheduledTask(4, 11, 1), new ScheduledTask(0, 4, 1), new ScheduledTask(11, 14, 1), new ScheduledTask(0, 2, 3), new ScheduledTask(46, 52, 0), new ScheduledTask(36, 46, 0), new ScheduledTask(10, 18, 0), new ScheduledTask(4, 10, 0), new ScheduledTask(0, 4, 0)};
        int[] expectedProcessorEndTimes = new int[]{71, 16, 8, 2};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(61, 71, 0), new ScheduledTask(30, 36, 0), new ScheduledTask(14, 16, 1), new ScheduledTask(56, 59, 0), new ScheduledTask(18, 27, 0), new ScheduledTask(27, 30, 0), new ScheduledTask(0, 8, 2), new ScheduledTask(4, 11, 1), new ScheduledTask(0, 4, 1), new ScheduledTask(11, 14, 1), new ScheduledTask(0, 2, 3), new ScheduledTask(46, 52, 0), new ScheduledTask(36, 46, 0), new ScheduledTask(10, 18, 0), new ScheduledTask(4, 10, 0), new ScheduledTask(0, 4, 0)};
        int[] expectedProcessorEndTimes = new int[]{71, 16, 8, 2};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(56, 66, 0), new ScheduledTask(54, 56, 0), new ScheduledTask(46, 54, 0), new ScheduledTask(36, 38, 0), new ScheduledTask(10, 15, 0), new ScheduledTask(42, 45, 0), new ScheduledTask(17, 27, 1), new ScheduledTask(38, 42, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(10, 17, 1), new ScheduledTask(15, 24, 0), new ScheduledTask(24, 33, 0), new ScheduledTask(33, 36, 0), new ScheduledTask(6, 10, 0), new ScheduledTask(2, 6, 0), new ScheduledTask(0, 2, 0)};
        int[] expectedProcessorEndTimes = new int[]{66, 27};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(54, 64, 0), new ScheduledTask(34, 36, 0), new ScheduledTask(46, 54, 0), new ScheduledTask(39, 41, 0), new ScheduledTask(28, 33, 0), new ScheduledTask(22, 25, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(41, 45, 0), new ScheduledTask(0, 10, 2), new ScheduledTask(10, 17, 2), new ScheduledTask(0, 9, 0), new ScheduledTask(9, 18, 0), new ScheduledTask(36, 39, 0), new ScheduledTask(0, 4, 3), new ScheduledTask(18, 22, 0), new ScheduledTask(25, 27, 0)};
        int[] expectedProcessorEndTimes = new int[]{64, 10, 17, 4};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(54, 64, 0), new ScheduledTask(34, 36, 0), new ScheduledTask(46, 54, 0), new ScheduledTask(39, 41, 0), new ScheduledTask(28, 33, 0), new ScheduledTask(22, 25, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(41, 45, 0), new ScheduledTask(0, 10, 2), new ScheduledTask(10, 17, 1), new ScheduledTask(0, 9, 0), new ScheduledTask(9, 18, 0), new ScheduledTask(36, 39, 0), new ScheduledTask(0, 4, 3), new ScheduledTask(18, 22, 0), new ScheduledTask(25, 27, 0)};
        int[] expectedProcessorEndTimes = new int[]{64, 17, 10, 4};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(74, 82, 0), new ScheduledTask(57, 67, 0), new ScheduledTask(16, 26, 0), new ScheduledTask(68, 74, 0), new ScheduledTask(49, 52, 0), new ScheduledTask(52, 57, 0), new ScheduledTask(2, 6, 1), new ScheduledTask(5, 10, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(10, 16, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(26, 35, 0), new ScheduledTask(16, 26, 1), new ScheduledTask(35, 44, 0), new ScheduledTask(6, 16, 1), new ScheduledTask(44, 49, 0)};
        int[] expectedProcessorEndTimes = new int[]{82, 26};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(74, 82, 0), new ScheduledTask(58, 68, 0), new ScheduledTask(16, 26, 0), new ScheduledTask(68, 74, 0), new ScheduledTask(49, 52, 0), new ScheduledTask(52, 57, 0), new ScheduledTask(10, 14, 1), new ScheduledTask(5, 10, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(10, 16, 0), new ScheduledTask(0, 2, 3), new ScheduledTask(26, 35, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(35, 44, 0), new ScheduledTask(0, 10, 2), new ScheduledTask(44, 49, 0)};
        int[] expectedProcessorEndTimes = new int[]{82, 14, 10, 2};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(74, 82, 0), new ScheduledTask(48, 58, 0), new ScheduledTask(16, 26, 0), new ScheduledTask(68, 74, 0), new ScheduledTask(45, 48, 0), new ScheduledTask(35, 40, 0), new ScheduledTask(0, 4, 3), new ScheduledTask(5, 10, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(10, 16, 0), new ScheduledTask(0, 2, 4), new ScheduledTask(58, 67, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(26, 35, 0), new ScheduledTask(0, 10, 2), new ScheduledTask(40, 45, 0)};
        int[] expectedProcessorEndTimes = new int[]{82, 10, 10, 4, 2};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(73, 77, 0), new ScheduledTask(38, 43, 0), new ScheduledTask(69, 73, 0), new ScheduledTask(60, 69, 0), new ScheduledTask(28, 38, 0), new ScheduledTask(0, 10, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(17, 25, 1), new ScheduledTask(7, 13, 1), new ScheduledTask(52, 56, 0), new ScheduledTask(56, 60, 0), new ScheduledTask(13, 17, 1), new ScheduledTask(43, 52, 0), new ScheduledTask(26, 28, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(19, 26, 0)};
        int[] expectedProcessorEndTimes = new int[]{77, 25};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(73, 77, 0), new ScheduledTask(38, 43, 0), new ScheduledTask(69, 73, 0), new ScheduledTask(56, 65, 0), new ScheduledTask(28, 38, 0), new ScheduledTask(0, 10, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(6, 14, 1), new ScheduledTask(0, 6, 1), new ScheduledTask(65, 69, 0), new ScheduledTask(52, 56, 0), new ScheduledTask(0, 4, 3), new ScheduledTask(43, 52, 0), new ScheduledTask(26, 28, 0), new ScheduledTask(0, 7, 2), new ScheduledTask(19, 26, 0)};
        int[] expectedProcessorEndTimes = new int[]{77, 14, 7, 4};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(73, 77, 0), new ScheduledTask(38, 43, 0), new ScheduledTask(69, 73, 0), new ScheduledTask(56, 65, 0), new ScheduledTask(28, 38, 0), new ScheduledTask(0, 10, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(0, 6, 3), new ScheduledTask(65, 69, 0), new ScheduledTask(52, 56, 0), new ScheduledTask(0, 4, 4), new ScheduledTask(43, 52, 0), new ScheduledTask(26, 28, 0), new ScheduledTask(0, 7, 2), new ScheduledTask(19, 26, 0)};
        int[] expectedProcessorEndTimes = new int[]{77, 8, 7, 6, 4};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 83;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(76, 83, 0), new ScheduledTask(60, 70, 0), new ScheduledTask(12, 16, 0), new ScheduledTask(70, 76, 0), new ScheduledTask(52, 60, 0), new ScheduledTask(43, 48, 0), new ScheduledTask(36, 43, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(2, 4, 0), new ScheduledTask(4, 12, 0), new ScheduledTask(11, 20, 1), new ScheduledTask(16, 26, 0), new ScheduledTask(8, 11, 1), new ScheduledTask(48, 52, 0), new ScheduledTask(26, 36, 0), new ScheduledTask(0, 8, 1)};
        int[] expectedProcessorEndTimes = new int[]{83, 20};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(74, 81, 0), new ScheduledTask(64, 74, 0), new ScheduledTask(12, 16, 0), new ScheduledTask(50, 56, 0), new ScheduledTask(56, 64, 0), new ScheduledTask(45, 50, 0), new ScheduledTask(0, 7, 2), new ScheduledTask(0, 2, 0), new ScheduledTask(2, 4, 0), new ScheduledTask(4, 12, 0), new ScheduledTask(36, 45, 0), new ScheduledTask(16, 26, 0), new ScheduledTask(4, 7, 3), new ScheduledTask(0, 4, 3), new ScheduledTask(26, 36, 0), new ScheduledTask(0, 8, 1)};
        int[] expectedProcessorEndTimes = new int[]{81, 8, 7, 7};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(74, 81, 0), new ScheduledTask(64, 74, 0), new ScheduledTask(12, 16, 0), new ScheduledTask(45, 51, 0), new ScheduledTask(56, 64, 0), new ScheduledTask(51, 56, 0), new ScheduledTask(0, 7, 2), new ScheduledTask(0, 2, 0), new ScheduledTask(2, 4, 0), new ScheduledTask(4, 12, 0), new ScheduledTask(36, 45, 0), new ScheduledTask(16, 26, 0), new ScheduledTask(0, 3, 4), new ScheduledTask(0, 4, 3), new ScheduledTask(26, 36, 0), new ScheduledTask(0, 8, 1)};
        int[] expectedProcessorEndTimes = new int[]{81, 8, 7, 4, 3};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot04_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.04_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(67, 77, 0), new ScheduledTask(64, 67, 0), new ScheduledTask(19, 26, 0), new ScheduledTask(58, 62, 0), new ScheduledTask(44, 52, 0), new ScheduledTask(52, 57, 0), new ScheduledTask(7, 14, 1), new ScheduledTask(16, 19, 0), new ScheduledTask(0, 9, 0), new ScheduledTask(9, 16, 0), new ScheduledTask(20, 26, 1), new ScheduledTask(14, 20, 1), new ScheduledTask(0, 7, 1), new ScheduledTask(41, 44, 0), new ScheduledTask(35, 41, 0), new ScheduledTask(26, 35, 0)};
        int[] expectedProcessorEndTimes = new int[]{77, 26};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot04_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.04_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(62, 72, 0), new ScheduledTask(55, 58, 0), new ScheduledTask(19, 26, 0), new ScheduledTask(58, 62, 0), new ScheduledTask(47, 55, 0), new ScheduledTask(39, 44, 0), new ScheduledTask(26, 33, 0), new ScheduledTask(16, 19, 0), new ScheduledTask(0, 9, 0), new ScheduledTask(9, 16, 0), new ScheduledTask(6, 12, 3), new ScheduledTask(0, 6, 3), new ScheduledTask(0, 7, 2), new ScheduledTask(44, 47, 0), new ScheduledTask(33, 39, 0), new ScheduledTask(0, 9, 1)};
        int[] expectedProcessorEndTimes = new int[]{72, 9, 7, 12};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot04_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.04_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(62, 72, 0), new ScheduledTask(59, 62, 0), new ScheduledTask(19, 26, 0), new ScheduledTask(55, 59, 0), new ScheduledTask(47, 55, 0), new ScheduledTask(39, 44, 0), new ScheduledTask(0, 7, 2), new ScheduledTask(16, 19, 0), new ScheduledTask(0, 9, 0), new ScheduledTask(9, 16, 0), new ScheduledTask(0, 6, 3), new ScheduledTask(9, 15, 1), new ScheduledTask(26, 33, 0), new ScheduledTask(44, 47, 0), new ScheduledTask(33, 39, 0), new ScheduledTask(0, 9, 1)};
        int[] expectedProcessorEndTimes = new int[]{72, 15, 7, 6};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_9dot97_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_9.97_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(64, 72, 0), new ScheduledTask(47, 54, 0), new ScheduledTask(57, 64, 0), new ScheduledTask(54, 57, 0), new ScheduledTask(43, 47, 0), new ScheduledTask(3, 5, 1), new ScheduledTask(33, 37, 0), new ScheduledTask(5, 15, 1), new ScheduledTask(15, 17, 1), new ScheduledTask(9, 17, 0), new ScheduledTask(37, 41, 0), new ScheduledTask(0, 9, 0), new ScheduledTask(17, 25, 0), new ScheduledTask(41, 43, 0), new ScheduledTask(25, 33, 0), new ScheduledTask(0, 3, 1)};
        int[] expectedProcessorEndTimes = new int[]{72, 17};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_9dot97_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_9.97_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(64, 72, 0), new ScheduledTask(47, 54, 0), new ScheduledTask(57, 64, 0), new ScheduledTask(54, 57, 0), new ScheduledTask(43, 47, 0), new ScheduledTask(0, 2, 3), new ScheduledTask(33, 37, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(2, 4, 3), new ScheduledTask(9, 17, 0), new ScheduledTask(37, 41, 0), new ScheduledTask(0, 9, 0), new ScheduledTask(17, 25, 0), new ScheduledTask(41, 43, 0), new ScheduledTask(25, 33, 0), new ScheduledTask(0, 3, 2)};
        int[] expectedProcessorEndTimes = new int[]{72, 10, 3, 4};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_9dot97_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_9.97_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(64, 72, 0), new ScheduledTask(47, 54, 0), new ScheduledTask(57, 64, 0), new ScheduledTask(54, 57, 0), new ScheduledTask(43, 47, 0), new ScheduledTask(0, 2, 3), new ScheduledTask(33, 37, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 2, 4), new ScheduledTask(9, 17, 0), new ScheduledTask(37, 41, 0), new ScheduledTask(0, 9, 0), new ScheduledTask(17, 25, 0), new ScheduledTask(41, 43, 0), new ScheduledTask(25, 33, 0), new ScheduledTask(0, 3, 2)};
        int[] expectedProcessorEndTimes = new int[]{72, 10, 3, 2, 2};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_9dot98_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_9.98_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(59, 68, 0), new ScheduledTask(27, 35, 1), new ScheduledTask(34, 41, 0), new ScheduledTask(12, 21, 0), new ScheduledTask(14, 19, 1), new ScheduledTask(19, 23, 1), new ScheduledTask(23, 27, 1), new ScheduledTask(21, 27, 0), new ScheduledTask(27, 32, 0), new ScheduledTask(32, 34, 0), new ScheduledTask(0, 6, 0), new ScheduledTask(6, 8, 0), new ScheduledTask(8, 12, 0), new ScheduledTask(8, 14, 1), new ScheduledTask(2, 8, 1), new ScheduledTask(0, 2, 1)};
        int[] expectedProcessorEndTimes = new int[]{68, 35};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_9dot98_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_9.98_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(59, 68, 0), new ScheduledTask(27, 35, 1), new ScheduledTask(34, 41, 0), new ScheduledTask(12, 21, 0), new ScheduledTask(14, 19, 1), new ScheduledTask(19, 23, 1), new ScheduledTask(23, 27, 1), new ScheduledTask(21, 27, 0), new ScheduledTask(27, 32, 0), new ScheduledTask(32, 34, 0), new ScheduledTask(0, 6, 0), new ScheduledTask(6, 8, 0), new ScheduledTask(8, 12, 0), new ScheduledTask(8, 14, 1), new ScheduledTask(2, 8, 1), new ScheduledTask(0, 2, 1)};
        int[] expectedProcessorEndTimes = new int[]{68, 35};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_9dot98_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_9.98_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(59, 68, 0), new ScheduledTask(27, 35, 1), new ScheduledTask(34, 41, 0), new ScheduledTask(12, 21, 0), new ScheduledTask(14, 19, 1), new ScheduledTask(19, 23, 1), new ScheduledTask(23, 27, 1), new ScheduledTask(21, 27, 0), new ScheduledTask(27, 32, 0), new ScheduledTask(32, 34, 0), new ScheduledTask(0, 6, 0), new ScheduledTask(6, 8, 0), new ScheduledTask(8, 12, 0), new ScheduledTask(8, 14, 1), new ScheduledTask(2, 8, 1), new ScheduledTask(0, 2, 1)};
        int[] expectedProcessorEndTimes = new int[]{68, 35};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(58, 65, 0), new ScheduledTask(36, 39, 0), new ScheduledTask(51, 55, 0), new ScheduledTask(21, 31, 1), new ScheduledTask(18, 27, 0), new ScheduledTask(34, 36, 0), new ScheduledTask(27, 34, 0), new ScheduledTask(45, 48, 0), new ScheduledTask(48, 51, 0), new ScheduledTask(39, 45, 0), new ScheduledTask(13, 21, 1), new ScheduledTask(0, 9, 1), new ScheduledTask(9, 13, 1), new ScheduledTask(11, 18, 0), new ScheduledTask(2, 11, 0), new ScheduledTask(0, 2, 0)};
        int[] expectedProcessorEndTimes = new int[]{65, 31};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(58, 65, 0), new ScheduledTask(45, 48, 0), new ScheduledTask(54, 58, 0), new ScheduledTask(21, 31, 1), new ScheduledTask(34, 43, 0), new ScheduledTask(43, 45, 0), new ScheduledTask(9, 16, 0), new ScheduledTask(48, 51, 0), new ScheduledTask(51, 54, 0), new ScheduledTask(0, 6, 3), new ScheduledTask(13, 21, 1), new ScheduledTask(0, 9, 1), new ScheduledTask(9, 13, 1), new ScheduledTask(0, 7, 2), new ScheduledTask(0, 9, 0), new ScheduledTask(16, 18, 0)};
        int[] expectedProcessorEndTimes = new int[]{65, 31, 7, 6};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(58, 65, 0), new ScheduledTask(45, 48, 0), new ScheduledTask(51, 55, 0), new ScheduledTask(21, 31, 1), new ScheduledTask(34, 43, 0), new ScheduledTask(43, 45, 0), new ScheduledTask(11, 18, 0), new ScheduledTask(48, 51, 0), new ScheduledTask(0, 3, 4), new ScheduledTask(0, 6, 3), new ScheduledTask(13, 21, 1), new ScheduledTask(0, 9, 1), new ScheduledTask(9, 13, 1), new ScheduledTask(0, 7, 2), new ScheduledTask(0, 9, 0), new ScheduledTask(9, 11, 0)};
        int[] expectedProcessorEndTimes = new int[]{65, 31, 7, 6, 3};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 75;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(69, 75, 0), new ScheduledTask(61, 69, 0), new ScheduledTask(16, 25, 0), new ScheduledTask(53, 61, 0), new ScheduledTask(15, 20, 1), new ScheduledTask(40, 46, 0), new ScheduledTask(25, 33, 0), new ScheduledTask(7, 11, 0), new ScheduledTask(11, 16, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(46, 51, 0), new ScheduledTask(20, 28, 1), new ScheduledTask(33, 40, 0), new ScheduledTask(12, 15, 1), new ScheduledTask(0, 2, 1), new ScheduledTask(2, 12, 1)};
        int[] expectedProcessorEndTimes = new int[]{75, 28};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(65, 71, 0), new ScheduledTask(57, 65, 0), new ScheduledTask(35, 44, 0), new ScheduledTask(20, 28, 0), new ScheduledTask(15, 20, 1), new ScheduledTask(0, 6, 2), new ScheduledTask(44, 52, 0), new ScheduledTask(0, 4, 3), new ScheduledTask(4, 9, 3), new ScheduledTask(28, 35, 0), new ScheduledTask(7, 12, 0), new ScheduledTask(12, 20, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(12, 15, 1), new ScheduledTask(0, 2, 1), new ScheduledTask(2, 12, 1)};
        int[] expectedProcessorEndTimes = new int[]{71, 20, 6, 9};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_9dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_9.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(65, 71, 0), new ScheduledTask(57, 65, 0), new ScheduledTask(35, 44, 0), new ScheduledTask(20, 28, 0), new ScheduledTask(15, 20, 1), new ScheduledTask(0, 6, 2), new ScheduledTask(44, 52, 0), new ScheduledTask(0, 4, 4), new ScheduledTask(0, 5, 3), new ScheduledTask(28, 35, 0), new ScheduledTask(7, 12, 0), new ScheduledTask(12, 20, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(12, 15, 1), new ScheduledTask(0, 2, 1), new ScheduledTask(2, 12, 1)};
        int[] expectedProcessorEndTimes = new int[]{71, 20, 6, 5, 4};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 511;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(453, 511, 0), new ScheduledTask(375, 452, 0), new ScheduledTask(288, 365, 1), new ScheduledTask(77, 115, 1), new ScheduledTask(365, 451, 1), new ScheduledTask(0, 77, 1), new ScheduledTask(269, 317, 0), new ScheduledTask(115, 211, 1), new ScheduledTask(240, 269, 0), new ScheduledTask(182, 240, 0), new ScheduledTask(317, 375, 0), new ScheduledTask(211, 288, 1), new ScheduledTask(0, 29, 0), new ScheduledTask(96, 182, 0), new ScheduledTask(67, 96, 0), new ScheduledTask(29, 67, 0)};
        int[] expectedProcessorEndTimes = new int[]{511, 451};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 290;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(232, 290, 0), new ScheduledTask(154, 231, 0), new ScheduledTask(144, 221, 1), new ScheduledTask(0, 38, 2), new ScheduledTask(144, 230, 2), new ScheduledTask(0, 77, 3), new ScheduledTask(96, 144, 1), new ScheduledTask(0, 96, 1), new ScheduledTask(115, 144, 2), new ScheduledTask(163, 221, 3), new ScheduledTask(96, 154, 0), new ScheduledTask(38, 115, 2), new ScheduledTask(0, 29, 0), new ScheduledTask(77, 163, 3), new ScheduledTask(67, 96, 0), new ScheduledTask(29, 67, 0)};
        int[] expectedProcessorEndTimes = new int[]{290, 221, 230, 221};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 216;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(158, 216, 0), new ScheduledTask(77, 154, 4), new ScheduledTask(77, 154, 5), new ScheduledTask(0, 38, 2), new ScheduledTask(67, 153, 2), new ScheduledTask(0, 77, 4), new ScheduledTask(96, 144, 0), new ScheduledTask(0, 96, 1), new ScheduledTask(38, 67, 2), new ScheduledTask(86, 144, 3), new ScheduledTask(96, 154, 1), new ScheduledTask(0, 77, 5), new ScheduledTask(0, 29, 0), new ScheduledTask(0, 86, 3), new ScheduledTask(67, 96, 0), new ScheduledTask(29, 67, 0)};
        int[] expectedProcessorEndTimes = new int[]{216, 154, 153, 144, 154, 154};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 391;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(313, 391, 0), new ScheduledTask(117, 140, 0), new ScheduledTask(86, 117, 0), new ScheduledTask(0, 70, 1), new ScheduledTask(70, 109, 1), new ScheduledTask(109, 171, 1), new ScheduledTask(171, 249, 1), new ScheduledTask(258, 312, 0), new ScheduledTask(23, 70, 0), new ScheduledTask(156, 195, 0), new ScheduledTask(195, 242, 0), new ScheduledTask(0, 23, 0), new ScheduledTask(70, 86, 0), new ScheduledTask(140, 156, 0), new ScheduledTask(242, 258, 0), new ScheduledTask(249, 311, 1)};
        int[] expectedProcessorEndTimes = new int[]{391, 311};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 236;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(158, 236, 0), new ScheduledTask(39, 62, 0), new ScheduledTask(70, 101, 1), new ScheduledTask(0, 70, 1), new ScheduledTask(0, 39, 2), new ScheduledTask(39, 101, 2), new ScheduledTask(78, 156, 0), new ScheduledTask(101, 155, 1), new ScheduledTask(0, 47, 3), new ScheduledTask(101, 140, 2), new ScheduledTask(47, 94, 3), new ScheduledTask(0, 23, 0), new ScheduledTask(23, 39, 0), new ScheduledTask(62, 78, 0), new ScheduledTask(140, 156, 2), new ScheduledTask(94, 156, 3)};
        int[] expectedProcessorEndTimes = new int[]{236, 155, 156, 156};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 188;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(110, 188, 0), new ScheduledTask(31, 54, 4), new ScheduledTask(0, 31, 4), new ScheduledTask(0, 70, 2), new ScheduledTask(0, 39, 5), new ScheduledTask(47, 109, 0), new ScheduledTask(23, 101, 1), new ScheduledTask(54, 108, 4), new ScheduledTask(0, 47, 0), new ScheduledTask(0, 39, 3), new ScheduledTask(55, 102, 5), new ScheduledTask(0, 23, 1), new ScheduledTask(39, 55, 5), new ScheduledTask(70, 86, 2), new ScheduledTask(86, 102, 2), new ScheduledTask(39, 101, 3)};
        int[] expectedProcessorEndTimes = new int[]{188, 101, 102, 101, 108, 102};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 513;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(466, 513, 0), new ScheduledTask(401, 466, 0), new ScheduledTask(65, 149, 0), new ScheduledTask(187, 215, 1), new ScheduledTask(280, 336, 0), new ScheduledTask(205, 261, 0), new ScheduledTask(168, 187, 1), new ScheduledTask(215, 290, 1), new ScheduledTask(0, 65, 0), new ScheduledTask(374, 458, 1), new ScheduledTask(149, 205, 0), new ScheduledTask(336, 401, 0), new ScheduledTask(290, 374, 1), new ScheduledTask(84, 168, 1), new ScheduledTask(261, 280, 0), new ScheduledTask(0, 84, 1)};
        int[] expectedProcessorEndTimes = new int[]{513, 458};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 283;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(236, 283, 0), new ScheduledTask(84, 149, 2), new ScheduledTask(65, 149, 1), new ScheduledTask(75, 103, 0), new ScheduledTask(178, 234, 0), new ScheduledTask(103, 159, 0), new ScheduledTask(56, 75, 0), new ScheduledTask(149, 224, 1), new ScheduledTask(0, 65, 1), new ScheduledTask(149, 233, 2), new ScheduledTask(0, 56, 0), new ScheduledTask(84, 149, 3), new ScheduledTask(149, 233, 3), new ScheduledTask(0, 84, 3), new ScheduledTask(159, 178, 0), new ScheduledTask(0, 84, 2)};
        int[] expectedProcessorEndTimes = new int[]{283, 224, 233, 233};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 209;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(162, 209, 0), new ScheduledTask(84, 149, 1), new ScheduledTask(0, 84, 1), new ScheduledTask(56, 84, 0), new ScheduledTask(19, 75, 3), new ScheduledTask(0, 56, 2), new ScheduledTask(0, 19, 3), new ScheduledTask(84, 159, 0), new ScheduledTask(0, 65, 5), new ScheduledTask(75, 159, 2), new ScheduledTask(0, 56, 0), new ScheduledTask(84, 149, 4), new ScheduledTask(75, 159, 3), new ScheduledTask(0, 84, 4), new ScheduledTask(56, 75, 2), new ScheduledTask(65, 149, 5)};
        int[] expectedProcessorEndTimes = new int[]{209, 149, 159, 159, 149, 149};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 453;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(422, 453, 0), new ScheduledTask(230, 268, 0), new ScheduledTask(293, 355, 1), new ScheduledTask(138, 176, 0), new ScheduledTask(38, 92, 0), new ScheduledTask(355, 417, 1), new ScheduledTask(92, 138, 0), new ScheduledTask(216, 293, 1), new ScheduledTask(85, 147, 1), new ScheduledTask(268, 345, 0), new ScheduledTask(0, 38, 0), new ScheduledTask(147, 216, 1), new ScheduledTask(0, 23, 1), new ScheduledTask(176, 230, 0), new ScheduledTask(23, 85, 1), new ScheduledTask(345, 422, 0)};
        int[] expectedProcessorEndTimes = new int[]{453, 417};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 245;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(214, 245, 0), new ScheduledTask(176, 214, 0), new ScheduledTask(85, 147, 3), new ScheduledTask(84, 122, 0), new ScheduledTask(0, 54, 1), new ScheduledTask(147, 209, 3), new ScheduledTask(38, 84, 0), new ScheduledTask(54, 131, 1), new ScheduledTask(23, 85, 3), new ScheduledTask(131, 208, 1), new ScheduledTask(0, 38, 0), new ScheduledTask(62, 131, 2), new ScheduledTask(0, 23, 3), new ScheduledTask(122, 176, 0), new ScheduledTask(0, 62, 2), new ScheduledTask(131, 208, 2)};
        int[] expectedProcessorEndTimes = new int[]{245, 208, 208, 209};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 176;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(145, 176, 0), new ScheduledTask(100, 138, 5), new ScheduledTask(77, 139, 1), new ScheduledTask(107, 145, 0), new ScheduledTask(0, 54, 5), new ScheduledTask(0, 62, 2), new ScheduledTask(54, 100, 5), new ScheduledTask(0, 77, 1), new ScheduledTask(23, 85, 4), new ScheduledTask(62, 139, 2), new ScheduledTask(0, 38, 0), new ScheduledTask(38, 107, 0), new ScheduledTask(0, 23, 4), new ScheduledTask(85, 139, 4), new ScheduledTask(0, 62, 3), new ScheduledTask(62, 139, 3)};
        int[] expectedProcessorEndTimes = new int[]{176, 139, 139, 139, 139, 138};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 491;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(403, 491, 0), new ScheduledTask(166, 201, 0), new ScheduledTask(201, 289, 0), new ScheduledTask(140, 166, 0), new ScheduledTask(70, 140, 0), new ScheduledTask(0, 18, 1), new ScheduledTask(324, 403, 0), new ScheduledTask(35, 70, 0), new ScheduledTask(309, 397, 1), new ScheduledTask(142, 230, 1), new ScheduledTask(124, 142, 1), new ScheduledTask(71, 124, 1), new ScheduledTask(18, 71, 1), new ScheduledTask(0, 35, 0), new ScheduledTask(230, 309, 1), new ScheduledTask(289, 324, 0)};
        int[] expectedProcessorEndTimes = new int[]{491, 397};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 292;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(204, 292, 0), new ScheduledTask(88, 123, 3), new ScheduledTask(105, 193, 1), new ScheduledTask(71, 97, 0), new ScheduledTask(35, 105, 1), new ScheduledTask(0, 18, 0), new ScheduledTask(35, 114, 2), new ScheduledTask(0, 35, 1), new ScheduledTask(114, 202, 2), new ScheduledTask(0, 88, 3), new ScheduledTask(150, 168, 0), new ScheduledTask(97, 150, 0), new ScheduledTask(18, 71, 0), new ScheduledTask(0, 35, 2), new ScheduledTask(123, 202, 3), new ScheduledTask(168, 203, 0)};
        int[] expectedProcessorEndTimes = new int[]{292, 193, 202, 202};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 230;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(142, 230, 0), new ScheduledTask(70, 105, 5), new ScheduledTask(44, 132, 1), new ScheduledTask(18, 44, 1), new ScheduledTask(0, 70, 5), new ScheduledTask(0, 18, 1), new ScheduledTask(53, 132, 3), new ScheduledTask(0, 35, 0), new ScheduledTask(35, 123, 2), new ScheduledTask(53, 141, 0), new ScheduledTask(35, 53, 0), new ScheduledTask(0, 53, 4), new ScheduledTask(0, 53, 3), new ScheduledTask(0, 35, 2), new ScheduledTask(53, 132, 4), new ScheduledTask(105, 140, 5)};
        int[] expectedProcessorEndTimes = new int[]{230, 132, 123, 132, 132, 140};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 528;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(450, 528, 0), new ScheduledTask(186, 274, 0), new ScheduledTask(373, 442, 1), new ScheduledTask(275, 373, 1), new ScheduledTask(39, 78, 0), new ScheduledTask(216, 275, 1), new ScheduledTask(166, 186, 0), new ScheduledTask(78, 137, 0), new ScheduledTask(421, 450, 0), new ScheduledTask(59, 128, 1), new ScheduledTask(137, 166, 0), new ScheduledTask(372, 421, 0), new ScheduledTask(0, 39, 0), new ScheduledTask(0, 59, 1), new ScheduledTask(274, 372, 0), new ScheduledTask(128, 216, 1)};
        int[] expectedProcessorEndTimes = new int[]{528, 442};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 305;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(227, 305, 0), new ScheduledTask(68, 156, 2), new ScheduledTask(156, 225, 2), new ScheduledTask(98, 196, 1), new ScheduledTask(0, 39, 1), new ScheduledTask(157, 216, 3), new ScheduledTask(59, 79, 0), new ScheduledTask(0, 59, 0), new ScheduledTask(196, 225, 1), new ScheduledTask(0, 69, 3), new ScheduledTask(39, 68, 2), new ScheduledTask(177, 226, 0), new ScheduledTask(0, 39, 2), new ScheduledTask(39, 98, 1), new ScheduledTask(79, 177, 0), new ScheduledTask(69, 157, 3)};
        int[] expectedProcessorEndTimes = new int[]{305, 225, 225, 216};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 234;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(156, 234, 0), new ScheduledTask(59, 147, 2), new ScheduledTask(78, 147, 4), new ScheduledTask(29, 127, 0), new ScheduledTask(39, 78, 4), new ScheduledTask(89, 148, 5), new ScheduledTask(69, 89, 5), new ScheduledTask(0, 59, 2), new ScheduledTask(127, 156, 0), new ScheduledTask(0, 69, 5), new ScheduledTask(0, 29, 0), new ScheduledTask(98, 147, 1), new ScheduledTask(0, 39, 4), new ScheduledTask(0, 59, 3), new ScheduledTask(0, 98, 1), new ScheduledTask(59, 147, 3)};
        int[] expectedProcessorEndTimes = new int[]{234, 147, 147, 147, 147, 148};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 536;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(454, 536, 0), new ScheduledTask(82, 129, 0), new ScheduledTask(396, 454, 0), new ScheduledTask(222, 304, 1), new ScheduledTask(0, 82, 0), new ScheduledTask(245, 303, 0), new ScheduledTask(152, 222, 1), new ScheduledTask(304, 409, 1), new ScheduledTask(0, 70, 1), new ScheduledTask(361, 396, 0), new ScheduledTask(409, 444, 1), new ScheduledTask(70, 152, 1), new ScheduledTask(303, 361, 0), new ScheduledTask(222, 245, 0), new ScheduledTask(152, 222, 0), new ScheduledTask(129, 152, 0)};
        int[] expectedProcessorEndTimes = new int[]{536, 444};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 314;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(232, 314, 0), new ScheduledTask(0, 47, 1), new ScheduledTask(164, 222, 2), new ScheduledTask(82, 164, 2), new ScheduledTask(0, 82, 2), new ScheduledTask(46, 104, 0), new ScheduledTask(152, 222, 3), new ScheduledTask(117, 222, 1), new ScheduledTask(0, 70, 3), new ScheduledTask(197, 232, 0), new ScheduledTask(162, 197, 0), new ScheduledTask(70, 152, 3), new ScheduledTask(104, 162, 0), new ScheduledTask(23, 46, 0), new ScheduledTask(47, 117, 1), new ScheduledTask(0, 23, 0)};
        int[] expectedProcessorEndTimes = new int[]{314, 222, 222, 222};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 239;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(157, 239, 0), new ScheduledTask(0, 47, 1), new ScheduledTask(93, 151, 5), new ScheduledTask(0, 82, 2), new ScheduledTask(0, 82, 3), new ScheduledTask(93, 151, 4), new ScheduledTask(82, 152, 0), new ScheduledTask(47, 152, 1), new ScheduledTask(0, 70, 4), new ScheduledTask(117, 152, 2), new ScheduledTask(82, 117, 2), new ScheduledTask(0, 82, 0), new ScheduledTask(82, 140, 3), new ScheduledTask(70, 93, 5), new ScheduledTask(0, 70, 5), new ScheduledTask(70, 93, 4)};
        int[] expectedProcessorEndTimes = new int[]{239, 152, 152, 140, 151, 151};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 492;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(442, 492, 0), new ScheduledTask(190, 250, 1), new ScheduledTask(20, 80, 1), new ScheduledTask(0, 50, 0), new ScheduledTask(0, 20, 1), new ScheduledTask(320, 340, 0), new ScheduledTask(180, 210, 0), new ScheduledTask(340, 440, 0), new ScheduledTask(150, 190, 1), new ScheduledTask(350, 440, 1), new ScheduledTask(150, 180, 0), new ScheduledTask(210, 280, 0), new ScheduledTask(280, 320, 0), new ScheduledTask(80, 150, 1), new ScheduledTask(50, 150, 0), new ScheduledTask(250, 350, 1)};
        int[] expectedProcessorEndTimes = new int[]{492, 440};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 274;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(224, 274, 0), new ScheduledTask(100, 160, 0), new ScheduledTask(0, 60, 0), new ScheduledTask(0, 50, 3), new ScheduledTask(0, 20, 1), new ScheduledTask(200, 220, 0), new ScheduledTask(20, 50, 1), new ScheduledTask(120, 220, 1), new ScheduledTask(60, 100, 0), new ScheduledTask(130, 220, 2), new ScheduledTask(100, 130, 2), new ScheduledTask(50, 120, 3), new ScheduledTask(160, 200, 0), new ScheduledTask(50, 120, 1), new ScheduledTask(0, 100, 2), new ScheduledTask(120, 220, 3)};
        int[] expectedProcessorEndTimes = new int[]{274, 220, 220, 220};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 204;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(154, 204, 0), new ScheduledTask(0, 60, 4), new ScheduledTask(0, 60, 5), new ScheduledTask(0, 50, 3), new ScheduledTask(0, 20, 0), new ScheduledTask(130, 150, 5), new ScheduledTask(50, 80, 0), new ScheduledTask(40, 140, 1), new ScheduledTask(100, 140, 2), new ScheduledTask(60, 150, 4), new ScheduledTask(20, 50, 0), new ScheduledTask(60, 130, 5), new ScheduledTask(0, 40, 1), new ScheduledTask(80, 150, 0), new ScheduledTask(0, 100, 2), new ScheduledTask(50, 150, 3)};
        int[] expectedProcessorEndTimes = new int[]{204, 140, 140, 150, 150, 150};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 352;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(291, 352, 0), new ScheduledTask(109, 123, 1), new ScheduledTask(171, 185, 1), new ScheduledTask(189, 250, 0), new ScheduledTask(239, 287, 1), new ScheduledTask(250, 291, 0), new ScheduledTask(185, 239, 1), new ScheduledTask(157, 171, 1), new ScheduledTask(27, 81, 0), new ScheduledTask(123, 157, 1), new ScheduledTask(0, 48, 1), new ScheduledTask(81, 101, 0), new ScheduledTask(128, 189, 0), new ScheduledTask(0, 27, 0), new ScheduledTask(48, 109, 1), new ScheduledTask(101, 128, 0)};
        int[] expectedProcessorEndTimes = new int[]{352, 287};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 210;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(149, 210, 0), new ScheduledTask(0, 14, 1), new ScheduledTask(68, 82, 1), new ScheduledTask(82, 143, 1), new ScheduledTask(95, 143, 3), new ScheduledTask(54, 95, 3), new ScheduledTask(95, 149, 0), new ScheduledTask(61, 75, 0), new ScheduledTask(0, 54, 3), new ScheduledTask(48, 82, 2), new ScheduledTask(0, 48, 2), new ScheduledTask(75, 95, 0), new ScheduledTask(82, 143, 2), new ScheduledTask(14, 41, 1), new ScheduledTask(0, 61, 0), new ScheduledTask(41, 68, 1)};
        int[] expectedProcessorEndTimes = new int[]{210, 143, 143, 143};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 163;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(102, 163, 0), new ScheduledTask(0, 14, 3), new ScheduledTask(20, 34, 1), new ScheduledTask(34, 95, 1), new ScheduledTask(48, 96, 5), new ScheduledTask(54, 95, 4), new ScheduledTask(41, 95, 3), new ScheduledTask(61, 75, 0), new ScheduledTask(0, 54, 4), new ScheduledTask(0, 34, 2), new ScheduledTask(0, 48, 5), new ScheduledTask(0, 20, 1), new ScheduledTask(34, 95, 2), new ScheduledTask(14, 41, 3), new ScheduledTask(0, 61, 0), new ScheduledTask(75, 102, 0)};
        int[] expectedProcessorEndTimes = new int[]{163, 95, 95, 95, 95, 96};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 577;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(501, 577, 0), new ScheduledTask(87, 163, 0), new ScheduledTask(461, 494, 1), new ScheduledTask(428, 461, 1), new ScheduledTask(132, 198, 1), new ScheduledTask(392, 501, 0), new ScheduledTask(0, 33, 1), new ScheduledTask(33, 77, 1), new ScheduledTask(359, 392, 0), new ScheduledTask(163, 261, 0), new ScheduledTask(307, 373, 1), new ScheduledTask(77, 132, 1), new ScheduledTask(0, 87, 0), new ScheduledTask(373, 428, 1), new ScheduledTask(261, 359, 0), new ScheduledTask(198, 307, 1)};
        int[] expectedProcessorEndTimes = new int[]{577, 494};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 330;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(254, 330, 0), new ScheduledTask(66, 142, 2), new ScheduledTask(218, 251, 1), new ScheduledTask(218, 251, 3), new ScheduledTask(0, 66, 2), new ScheduledTask(109, 218, 1), new ScheduledTask(0, 33, 3), new ScheduledTask(0, 44, 0), new ScheduledTask(165, 198, 0), new ScheduledTask(142, 240, 2), new ScheduledTask(99, 165, 0), new ScheduledTask(44, 99, 0), new ScheduledTask(33, 120, 3), new ScheduledTask(198, 253, 0), new ScheduledTask(120, 218, 3), new ScheduledTask(0, 109, 1)};
        int[] expectedProcessorEndTimes = new int[]{330, 251, 240, 251};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 250;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(174, 250, 0), new ScheduledTask(0, 76, 0), new ScheduledTask(131, 164, 4), new ScheduledTask(132, 165, 5), new ScheduledTask(0, 66, 5), new ScheduledTask(55, 164, 1), new ScheduledTask(0, 33, 3), new ScheduledTask(0, 44, 4), new ScheduledTask(131, 164, 3), new ScheduledTask(76, 174, 0), new ScheduledTask(66, 132, 5), new ScheduledTask(0, 55, 2), new ScheduledTask(44, 131, 4), new ScheduledTask(0, 55, 1), new ScheduledTask(33, 131, 3), new ScheduledTask(55, 164, 2)};
        int[] expectedProcessorEndTimes = new int[]{250, 164, 164, 164, 164, 165};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(45, 50, 0), new ScheduledTask(37, 45, 0), new ScheduledTask(20, 29, 0), new ScheduledTask(29, 32, 0), new ScheduledTask(34, 37, 0), new ScheduledTask(16, 20, 0), new ScheduledTask(3, 13, 0), new ScheduledTask(34, 43, 1), new ScheduledTask(21, 28, 1), new ScheduledTask(13, 21, 1), new ScheduledTask(32, 34, 0), new ScheduledTask(6, 13, 1), new ScheduledTask(0, 6, 1), new ScheduledTask(28, 34, 1), new ScheduledTask(0, 3, 0), new ScheduledTask(13, 16, 0)};
        int[] expectedProcessorEndTimes = new int[]{50, 43};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(24, 29, 0), new ScheduledTask(13, 21, 2), new ScheduledTask(13, 22, 0), new ScheduledTask(7, 10, 1), new ScheduledTask(10, 13, 1), new ScheduledTask(3, 7, 1), new ScheduledTask(0, 10, 0), new ScheduledTask(13, 22, 1), new ScheduledTask(8, 15, 3), new ScheduledTask(0, 8, 3), new ScheduledTask(22, 24, 0), new ScheduledTask(6, 13, 2), new ScheduledTask(0, 6, 2), new ScheduledTask(15, 21, 3), new ScheduledTask(0, 3, 1), new ScheduledTask(10, 13, 0)};
        int[] expectedProcessorEndTimes = new int[]{29, 22, 21, 21};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 23;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(18, 23, 0), new ScheduledTask(7, 15, 3), new ScheduledTask(3, 12, 1), new ScheduledTask(4, 7, 3), new ScheduledTask(3, 6, 2), new ScheduledTask(0, 4, 3), new ScheduledTask(0, 10, 0), new ScheduledTask(6, 15, 2), new ScheduledTask(6, 13, 4), new ScheduledTask(10, 18, 0), new ScheduledTask(7, 9, 5), new ScheduledTask(0, 7, 5), new ScheduledTask(0, 6, 4), new ScheduledTask(9, 15, 5), new ScheduledTask(0, 3, 2), new ScheduledTask(0, 3, 1)};
        int[] expectedProcessorEndTimes = new int[]{23, 12, 15, 15, 13, 15};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(48, 51, 0), new ScheduledTask(33, 43, 1), new ScheduledTask(0, 7, 1), new ScheduledTask(37, 44, 0), new ScheduledTask(15, 23, 1), new ScheduledTask(23, 33, 1), new ScheduledTask(0, 3, 0), new ScheduledTask(11, 16, 0), new ScheduledTask(16, 20, 0), new ScheduledTask(7, 15, 1), new ScheduledTask(3, 11, 0), new ScheduledTask(43, 45, 1), new ScheduledTask(44, 48, 0), new ScheduledTask(32, 37, 0), new ScheduledTask(20, 22, 0), new ScheduledTask(22, 32, 0)};
        int[] expectedProcessorEndTimes = new int[]{51, 45};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(26, 29, 0), new ScheduledTask(12, 22, 0), new ScheduledTask(0, 7, 2), new ScheduledTask(5, 12, 0), new ScheduledTask(4, 12, 1), new ScheduledTask(12, 22, 1), new ScheduledTask(0, 3, 0), new ScheduledTask(8, 13, 3), new ScheduledTask(0, 4, 1), new ScheduledTask(13, 21, 3), new ScheduledTask(0, 8, 3), new ScheduledTask(21, 23, 3), new ScheduledTask(22, 26, 0), new ScheduledTask(17, 22, 2), new ScheduledTask(3, 5, 0), new ScheduledTask(7, 17, 2)};
        int[] expectedProcessorEndTimes = new int[]{29, 22, 22, 23};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 22;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(19, 22, 0), new ScheduledTask(5, 15, 1), new ScheduledTask(0, 7, 5), new ScheduledTask(7, 14, 5), new ScheduledTask(11, 19, 0), new ScheduledTask(2, 12, 2), new ScheduledTask(0, 3, 0), new ScheduledTask(0, 5, 4), new ScheduledTask(0, 4, 3), new ScheduledTask(5, 13, 4), new ScheduledTask(3, 11, 0), new ScheduledTask(14, 16, 5), new ScheduledTask(12, 16, 2), new ScheduledTask(0, 5, 1), new ScheduledTask(0, 2, 2), new ScheduledTask(4, 14, 3)};
        int[] expectedProcessorEndTimes = new int[]{22, 15, 16, 14, 13, 16};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(51, 58, 0), new ScheduledTask(27, 37, 0), new ScheduledTask(29, 38, 1), new ScheduledTask(17, 20, 1), new ScheduledTask(6, 12, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(0, 6, 0), new ScheduledTask(37, 39, 0), new ScheduledTask(12, 20, 0), new ScheduledTask(8, 17, 1), new ScheduledTask(22, 27, 0), new ScheduledTask(44, 51, 0), new ScheduledTask(20, 22, 0), new ScheduledTask(39, 44, 0), new ScheduledTask(38, 48, 1), new ScheduledTask(20, 29, 1)};
        int[] expectedProcessorEndTimes = new int[]{58, 48};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(28, 35, 0), new ScheduledTask(18, 28, 0), new ScheduledTask(9, 18, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(6, 12, 2), new ScheduledTask(0, 8, 3), new ScheduledTask(0, 6, 2), new ScheduledTask(21, 23, 2), new ScheduledTask(8, 16, 3), new ScheduledTask(0, 9, 0), new ScheduledTask(5, 10, 1), new ScheduledTask(16, 23, 3), new ScheduledTask(3, 5, 1), new ScheduledTask(10, 15, 1), new ScheduledTask(15, 25, 1), new ScheduledTask(12, 21, 2)};
        int[] expectedProcessorEndTimes = new int[]{35, 25, 23, 23};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 28;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(21, 28, 0), new ScheduledTask(3, 13, 1), new ScheduledTask(0, 9, 3), new ScheduledTask(0, 3, 1), new ScheduledTask(15, 21, 0), new ScheduledTask(0, 8, 5), new ScheduledTask(0, 6, 0), new ScheduledTask(14, 16, 4), new ScheduledTask(0, 8, 2), new ScheduledTask(6, 15, 0), new ScheduledTask(9, 14, 4), new ScheduledTask(8, 15, 5), new ScheduledTask(9, 11, 3), new ScheduledTask(11, 16, 3), new ScheduledTask(8, 18, 2), new ScheduledTask(0, 9, 4)};
        int[] expectedProcessorEndTimes = new int[]{28, 13, 18, 16, 16, 15};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(50, 54, 0), new ScheduledTask(5, 11, 0), new ScheduledTask(35, 42, 1), new ScheduledTask(27, 36, 0), new ScheduledTask(40, 49, 0), new ScheduledTask(26, 35, 1), new ScheduledTask(18, 27, 0), new ScheduledTask(20, 26, 1), new ScheduledTask(0, 5, 0), new ScheduledTask(44, 48, 1), new ScheduledTask(42, 44, 1), new ScheduledTask(13, 18, 0), new ScheduledTask(8, 20, 1), new ScheduledTask(11, 13, 0), new ScheduledTask(36, 40, 0), new ScheduledTask(0, 8, 1)};
        int[] expectedProcessorEndTimes = new int[]{54, 48};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(27, 31, 0), new ScheduledTask(18, 24, 0), new ScheduledTask(14, 21, 2), new ScheduledTask(5, 14, 1), new ScheduledTask(14, 23, 1), new ScheduledTask(5, 14, 2), new ScheduledTask(8, 17, 3), new ScheduledTask(12, 18, 0), new ScheduledTask(0, 5, 2), new ScheduledTask(21, 25, 3), new ScheduledTask(21, 23, 2), new ScheduledTask(0, 5, 1), new ScheduledTask(0, 12, 0), new ScheduledTask(24, 26, 0), new ScheduledTask(17, 21, 3), new ScheduledTask(0, 8, 3)};
        int[] expectedProcessorEndTimes = new int[]{31, 23, 23, 25};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 24;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(20, 24, 0), new ScheduledTask(0, 6, 2), new ScheduledTask(6, 13, 5), new ScheduledTask(5, 14, 1), new ScheduledTask(6, 15, 2), new ScheduledTask(2, 11, 3), new ScheduledTask(5, 14, 4), new ScheduledTask(0, 6, 5), new ScheduledTask(0, 5, 4), new ScheduledTask(13, 17, 5), new ScheduledTask(14, 16, 4), new ScheduledTask(0, 5, 1), new ScheduledTask(8, 20, 0), new ScheduledTask(0, 2, 3), new ScheduledTask(11, 15, 3), new ScheduledTask(0, 8, 0)};
        int[] expectedProcessorEndTimes = new int[]{24, 14, 15, 15, 16, 17};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(48, 52, 0), new ScheduledTask(27, 29, 0), new ScheduledTask(23, 32, 1), new ScheduledTask(17, 27, 0), new ScheduledTask(32, 36, 1), new ScheduledTask(35, 39, 0), new ScheduledTask(29, 32, 0), new ScheduledTask(10, 16, 1), new ScheduledTask(7, 17, 0), new ScheduledTask(32, 35, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(36, 46, 1), new ScheduledTask(5, 10, 1), new ScheduledTask(0, 5, 1), new ScheduledTask(39, 48, 0), new ScheduledTask(16, 23, 1)};
        int[] expectedProcessorEndTimes = new int[]{52, 46};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 30;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(26, 30, 0), new ScheduledTask(13, 15, 0), new ScheduledTask(5, 14, 3), new ScheduledTask(7, 17, 1), new ScheduledTask(17, 21, 1), new ScheduledTask(21, 25, 0), new ScheduledTask(15, 18, 0), new ScheduledTask(0, 6, 0), new ScheduledTask(5, 15, 2), new ScheduledTask(18, 21, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(14, 24, 3), new ScheduledTask(0, 5, 3), new ScheduledTask(0, 5, 2), new ScheduledTask(15, 24, 2), new ScheduledTask(6, 13, 0)};
        int[] expectedProcessorEndTimes = new int[]{30, 21, 24, 24};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 23;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(19, 23, 0), new ScheduledTask(0, 2, 3), new ScheduledTask(2, 11, 3), new ScheduledTask(5, 15, 0), new ScheduledTask(10, 14, 1), new ScheduledTask(11, 15, 5), new ScheduledTask(15, 18, 0), new ScheduledTask(5, 11, 5), new ScheduledTask(0, 10, 1), new ScheduledTask(11, 14, 3), new ScheduledTask(0, 7, 2), new ScheduledTask(7, 17, 2), new ScheduledTask(0, 5, 5), new ScheduledTask(0, 5, 0), new ScheduledTask(7, 16, 4), new ScheduledTask(0, 7, 4)};
        int[] expectedProcessorEndTimes = new int[]{23, 14, 17, 14, 16, 15};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(43, 47, 0), new ScheduledTask(24, 29, 1), new ScheduledTask(27, 37, 0), new ScheduledTask(11, 18, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(29, 40, 1), new ScheduledTask(37, 39, 0), new ScheduledTask(2, 6, 0), new ScheduledTask(18, 27, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(39, 41, 0), new ScheduledTask(19, 24, 1), new ScheduledTask(41, 43, 0), new ScheduledTask(5, 12, 1), new ScheduledTask(6, 11, 0), new ScheduledTask(12, 19, 1)};
        int[] expectedProcessorEndTimes = new int[]{47, 40};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 27;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(23, 27, 0), new ScheduledTask(4, 9, 1), new ScheduledTask(12, 22, 0), new ScheduledTask(7, 14, 3), new ScheduledTask(0, 5, 0), new ScheduledTask(9, 20, 1), new ScheduledTask(16, 18, 2), new ScheduledTask(0, 4, 1), new ScheduledTask(7, 16, 2), new ScheduledTask(5, 7, 0), new ScheduledTask(18, 20, 2), new ScheduledTask(14, 19, 3), new ScheduledTask(19, 21, 3), new ScheduledTask(0, 7, 3), new ScheduledTask(7, 12, 0), new ScheduledTask(0, 7, 2)};
        int[] expectedProcessorEndTimes = new int[]{27, 20, 20, 21};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 22;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(18, 22, 0), new ScheduledTask(10, 15, 2), new ScheduledTask(0, 10, 2), new ScheduledTask(4, 11, 4), new ScheduledTask(0, 5, 0), new ScheduledTask(0, 11, 1), new ScheduledTask(7, 9, 5), new ScheduledTask(0, 4, 4), new ScheduledTask(2, 11, 3), new ScheduledTask(0, 2, 3), new ScheduledTask(11, 13, 4), new ScheduledTask(9, 14, 5), new ScheduledTask(14, 16, 5), new ScheduledTask(5, 12, 0), new ScheduledTask(12, 17, 0), new ScheduledTask(0, 7, 5)};
        int[] expectedProcessorEndTimes = new int[]{22, 11, 15, 11, 13, 16};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(54, 57, 0), new ScheduledTask(50, 53, 0), new ScheduledTask(43, 47, 0), new ScheduledTask(37, 46, 1), new ScheduledTask(0, 5, 1), new ScheduledTask(10, 20, 0), new ScheduledTask(46, 51, 1), new ScheduledTask(11, 18, 1), new ScheduledTask(30, 40, 0), new ScheduledTask(20, 30, 0), new ScheduledTask(40, 43, 0), new ScheduledTask(28, 37, 1), new ScheduledTask(47, 50, 0), new ScheduledTask(0, 10, 0), new ScheduledTask(18, 28, 1), new ScheduledTask(5, 11, 1)};
        int[] expectedProcessorEndTimes = new int[]{57, 51};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(29, 32, 0), new ScheduledTask(26, 29, 0), new ScheduledTask(20, 24, 1), new ScheduledTask(16, 25, 3), new ScheduledTask(0, 5, 2), new ScheduledTask(10, 20, 0), new ScheduledTask(21, 26, 2), new ScheduledTask(0, 7, 3), new ScheduledTask(10, 20, 1), new ScheduledTask(11, 21, 2), new ScheduledTask(20, 23, 0), new ScheduledTask(7, 16, 3), new ScheduledTask(23, 26, 0), new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(5, 11, 2)};
        int[] expectedProcessorEndTimes = new int[]{32, 24, 26, 25};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 25;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(22, 25, 0), new ScheduledTask(15, 18, 2), new ScheduledTask(10, 14, 3), new ScheduledTask(9, 18, 4), new ScheduledTask(0, 5, 2), new ScheduledTask(10, 20, 0), new ScheduledTask(13, 18, 5), new ScheduledTask(6, 13, 5), new ScheduledTask(0, 10, 1), new ScheduledTask(5, 15, 2), new ScheduledTask(10, 13, 1), new ScheduledTask(0, 9, 4), new ScheduledTask(14, 17, 3), new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 3), new ScheduledTask(0, 6, 5)};
        int[] expectedProcessorEndTimes = new int[]{25, 13, 18, 17, 18, 18};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot03_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.03_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(53, 63, 0), new ScheduledTask(39, 43, 0), new ScheduledTask(13, 17, 0), new ScheduledTask(43, 53, 0), new ScheduledTask(34, 40, 1), new ScheduledTask(20, 29, 0), new ScheduledTask(19, 26, 1), new ScheduledTask(9, 19, 1), new ScheduledTask(40, 50, 1), new ScheduledTask(4, 6, 0), new ScheduledTask(29, 39, 0), new ScheduledTask(26, 34, 1), new ScheduledTask(0, 9, 1), new ScheduledTask(17, 20, 0), new ScheduledTask(0, 4, 0), new ScheduledTask(6, 13, 0)};
        int[] expectedProcessorEndTimes = new int[]{63, 50};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot03_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.03_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 39;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(29, 39, 0), new ScheduledTask(12, 16, 1), new ScheduledTask(4, 8, 0), new ScheduledTask(16, 26, 1), new ScheduledTask(18, 24, 3), new ScheduledTask(18, 27, 0), new ScheduledTask(9, 16, 2), new ScheduledTask(8, 18, 0), new ScheduledTask(16, 26, 2), new ScheduledTask(0, 2, 2), new ScheduledTask(0, 10, 3), new ScheduledTask(10, 18, 3), new ScheduledTask(0, 9, 1), new ScheduledTask(9, 12, 1), new ScheduledTask(0, 4, 0), new ScheduledTask(2, 9, 2)};
        int[] expectedProcessorEndTimes = new int[]{39, 26, 26, 24};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot03_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.03_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(22, 32, 0), new ScheduledTask(10, 14, 2), new ScheduledTask(11, 15, 0), new ScheduledTask(7, 17, 1), new ScheduledTask(12, 18, 4), new ScheduledTask(0, 9, 3), new ScheduledTask(0, 7, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(9, 19, 3), new ScheduledTask(0, 2, 4), new ScheduledTask(2, 12, 4), new ScheduledTask(9, 17, 5), new ScheduledTask(0, 9, 5), new ScheduledTask(15, 18, 0), new ScheduledTask(0, 4, 0), new ScheduledTask(4, 11, 0)};
        int[] expectedProcessorEndTimes = new int[]{32, 17, 14, 19, 18, 17};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot03_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.03_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(47, 52, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(43, 45, 1), new ScheduledTask(3, 13, 0), new ScheduledTask(29, 31, 0), new ScheduledTask(35, 43, 1), new ScheduledTask(41, 43, 0), new ScheduledTask(13, 17, 0), new ScheduledTask(25, 29, 0), new ScheduledTask(31, 41, 0), new ScheduledTask(17, 25, 0), new ScheduledTask(8, 17, 1), new ScheduledTask(17, 26, 1), new ScheduledTask(0, 3, 0), new ScheduledTask(43, 47, 0), new ScheduledTask(26, 35, 1)};
        int[] expectedProcessorEndTimes = new int[]{52, 45};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot03_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.03_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(26, 31, 0), new ScheduledTask(0, 8, 3), new ScheduledTask(22, 24, 3), new ScheduledTask(12, 22, 0), new ScheduledTask(12, 14, 3), new ScheduledTask(14, 22, 3), new ScheduledTask(18, 20, 1), new ScheduledTask(8, 12, 3), new ScheduledTask(22, 26, 0), new ScheduledTask(8, 18, 1), new ScheduledTask(0, 8, 1), new ScheduledTask(3, 12, 0), new ScheduledTask(0, 9, 2), new ScheduledTask(0, 3, 0), new ScheduledTask(18, 22, 2), new ScheduledTask(9, 18, 2)};
        int[] expectedProcessorEndTimes = new int[]{31, 20, 22, 24};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot03_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.03_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 25;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(20, 25, 0), new ScheduledTask(0, 8, 0), new ScheduledTask(16, 18, 5), new ScheduledTask(8, 18, 0), new ScheduledTask(9, 11, 2), new ScheduledTask(8, 16, 5), new ScheduledTask(13, 15, 3), new ScheduledTask(0, 4, 4), new ScheduledTask(9, 13, 3), new ScheduledTask(3, 13, 1), new ScheduledTask(0, 8, 5), new ScheduledTask(0, 9, 2), new ScheduledTask(0, 9, 3), new ScheduledTask(0, 3, 1), new ScheduledTask(13, 17, 4), new ScheduledTask(4, 13, 4)};
        int[] expectedProcessorEndTimes = new int[]{25, 13, 11, 15, 17, 18};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot07_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.07_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 44;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(42, 44, 0), new ScheduledTask(29, 33, 0), new ScheduledTask(6, 11, 1), new ScheduledTask(19, 27, 0), new ScheduledTask(9, 19, 0), new ScheduledTask(11, 16, 1), new ScheduledTask(5, 9, 0), new ScheduledTask(24, 30, 1), new ScheduledTask(0, 6, 1), new ScheduledTask(16, 21, 1), new ScheduledTask(27, 29, 0), new ScheduledTask(33, 42, 0), new ScheduledTask(30, 40, 1), new ScheduledTask(21, 24, 1), new ScheduledTask(2, 5, 0), new ScheduledTask(0, 2, 0)};
        int[] expectedProcessorEndTimes = new int[]{44, 40};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot07_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.07_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 24;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(22, 24, 0), new ScheduledTask(16, 20, 3), new ScheduledTask(0, 5, 2), new ScheduledTask(6, 14, 3), new ScheduledTask(9, 19, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(5, 9, 0), new ScheduledTask(5, 11, 2), new ScheduledTask(0, 6, 3), new ScheduledTask(5, 10, 1), new ScheduledTask(14, 16, 3), new ScheduledTask(11, 20, 2), new ScheduledTask(10, 20, 1), new ScheduledTask(19, 22, 0), new ScheduledTask(2, 5, 0), new ScheduledTask(0, 2, 0)};
        int[] expectedProcessorEndTimes = new int[]{24, 20, 20, 20};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot07_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.07_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 18;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(16, 18, 0), new ScheduledTask(10, 14, 5), new ScheduledTask(0, 5, 5), new ScheduledTask(0, 8, 3), new ScheduledTask(5, 15, 0), new ScheduledTask(0, 5, 2), new ScheduledTask(0, 4, 1), new ScheduledTask(6, 12, 4), new ScheduledTask(0, 6, 4), new ScheduledTask(5, 10, 5), new ScheduledTask(8, 10, 3), new ScheduledTask(5, 14, 2), new ScheduledTask(4, 14, 1), new ScheduledTask(10, 13, 3), new ScheduledTask(2, 5, 0), new ScheduledTask(0, 2, 0)};
        int[] expectedProcessorEndTimes = new int[]{18, 14, 14, 13, 12, 14};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(59, 63, 0), new ScheduledTask(45, 49, 0), new ScheduledTask(49, 58, 0), new ScheduledTask(2, 6, 0), new ScheduledTask(6, 11, 0), new ScheduledTask(10, 19, 1), new ScheduledTask(31, 37, 0), new ScheduledTask(37, 45, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(7, 10, 1), new ScheduledTask(0, 7, 1), new ScheduledTask(19, 21, 1), new ScheduledTask(17, 19, 0), new ScheduledTask(22, 31, 0), new ScheduledTask(11, 17, 0), new ScheduledTask(19, 22, 0)};
        int[] expectedProcessorEndTimes = new int[]{63, 21};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(52, 56, 0), new ScheduledTask(3, 7, 3), new ScheduledTask(0, 9, 1), new ScheduledTask(2, 6, 0), new ScheduledTask(6, 11, 0), new ScheduledTask(0, 9, 2), new ScheduledTask(31, 37, 0), new ScheduledTask(44, 52, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(0, 3, 3), new ScheduledTask(37, 44, 0), new ScheduledTask(7, 9, 3), new ScheduledTask(17, 19, 0), new ScheduledTask(22, 31, 0), new ScheduledTask(11, 17, 0), new ScheduledTask(19, 22, 0)};
        int[] expectedProcessorEndTimes = new int[]{56, 9, 9, 9};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(52, 56, 0), new ScheduledTask(0, 4, 3), new ScheduledTask(0, 9, 1), new ScheduledTask(2, 6, 0), new ScheduledTask(6, 11, 0), new ScheduledTask(0, 9, 2), new ScheduledTask(31, 37, 0), new ScheduledTask(44, 52, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(0, 3, 4), new ScheduledTask(37, 44, 0), new ScheduledTask(0, 2, 5), new ScheduledTask(17, 19, 0), new ScheduledTask(22, 31, 0), new ScheduledTask(11, 17, 0), new ScheduledTask(19, 22, 0)};
        int[] expectedProcessorEndTimes = new int[]{56, 9, 9, 4, 3, 2};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(55, 58, 0), new ScheduledTask(22, 24, 1), new ScheduledTask(14, 22, 1), new ScheduledTask(7, 12, 0), new ScheduledTask(16, 20, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(20, 28, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(14, 16, 0), new ScheduledTask(4, 14, 1), new ScheduledTask(24, 30, 1), new ScheduledTask(12, 14, 0), new ScheduledTask(2, 7, 0), new ScheduledTask(28, 37, 0), new ScheduledTask(37, 47, 0), new ScheduledTask(47, 55, 0)};
        int[] expectedProcessorEndTimes = new int[]{58, 30};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(51, 54, 0), new ScheduledTask(8, 10, 3), new ScheduledTask(0, 8, 2), new ScheduledTask(7, 12, 0), new ScheduledTask(16, 20, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(20, 28, 0), new ScheduledTask(28, 32, 0), new ScheduledTask(14, 16, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(10, 16, 3), new ScheduledTask(12, 14, 0), new ScheduledTask(2, 7, 0), new ScheduledTask(32, 41, 0), new ScheduledTask(41, 51, 0), new ScheduledTask(0, 8, 3)};
        int[] expectedProcessorEndTimes = new int[]{54, 10, 8, 16};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(51, 54, 0), new ScheduledTask(0, 2, 5), new ScheduledTask(0, 8, 2), new ScheduledTask(7, 12, 0), new ScheduledTask(16, 20, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(20, 28, 0), new ScheduledTask(28, 32, 0), new ScheduledTask(14, 16, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 6, 4), new ScheduledTask(12, 14, 0), new ScheduledTask(2, 7, 0), new ScheduledTask(32, 41, 0), new ScheduledTask(41, 51, 0), new ScheduledTask(0, 8, 3)};
        int[] expectedProcessorEndTimes = new int[]{54, 10, 8, 8, 6, 2};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.00_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(67, 72, 0), new ScheduledTask(16, 26, 0), new ScheduledTask(47, 54, 0), new ScheduledTask(0, 6, 0), new ScheduledTask(35, 43, 0), new ScheduledTask(30, 35, 0), new ScheduledTask(54, 63, 0), new ScheduledTask(7, 13, 1), new ScheduledTask(0, 7, 1), new ScheduledTask(63, 67, 0), new ScheduledTask(26, 30, 0), new ScheduledTask(13, 22, 1), new ScheduledTask(6, 10, 0), new ScheduledTask(43, 47, 0), new ScheduledTask(22, 25, 1), new ScheduledTask(10, 16, 0)};
        int[] expectedProcessorEndTimes = new int[]{72, 25};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot00_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.00_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(63, 68, 0), new ScheduledTask(16, 26, 0), new ScheduledTask(47, 54, 0), new ScheduledTask(0, 6, 0), new ScheduledTask(35, 43, 0), new ScheduledTask(30, 35, 0), new ScheduledTask(54, 63, 0), new ScheduledTask(4, 10, 3), new ScheduledTask(0, 7, 2), new ScheduledTask(0, 4, 3), new ScheduledTask(26, 30, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(6, 10, 0), new ScheduledTask(43, 47, 0), new ScheduledTask(10, 13, 3), new ScheduledTask(10, 16, 0)};
        int[] expectedProcessorEndTimes = new int[]{68, 9, 7, 13};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot00_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.00_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(63, 68, 0), new ScheduledTask(16, 26, 0), new ScheduledTask(47, 54, 0), new ScheduledTask(0, 6, 0), new ScheduledTask(35, 43, 0), new ScheduledTask(30, 35, 0), new ScheduledTask(54, 63, 0), new ScheduledTask(0, 6, 3), new ScheduledTask(0, 7, 2), new ScheduledTask(0, 4, 1), new ScheduledTask(26, 30, 0), new ScheduledTask(4, 13, 1), new ScheduledTask(6, 10, 0), new ScheduledTask(43, 47, 0), new ScheduledTask(0, 3, 4), new ScheduledTask(10, 16, 0)};
        int[] expectedProcessorEndTimes = new int[]{68, 13, 7, 6, 3};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot00_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.00_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(64, 69, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(22, 31, 1), new ScheduledTask(0, 3, 0), new ScheduledTask(38, 41, 0), new ScheduledTask(30, 38, 0), new ScheduledTask(3, 10, 1), new ScheduledTask(41, 47, 0), new ScheduledTask(47, 57, 0), new ScheduledTask(11, 16, 0), new ScheduledTask(3, 11, 0), new ScheduledTask(22, 30, 0), new ScheduledTask(57, 63, 0), new ScheduledTask(16, 22, 0), new ScheduledTask(19, 22, 1), new ScheduledTask(10, 19, 1)};
        int[] expectedProcessorEndTimes = new int[]{69, 31};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot00_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.00_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(62, 67, 0), new ScheduledTask(0, 3, 3), new ScheduledTask(7, 16, 1), new ScheduledTask(0, 3, 0), new ScheduledTask(38, 41, 0), new ScheduledTask(30, 38, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(41, 47, 0), new ScheduledTask(47, 57, 0), new ScheduledTask(11, 16, 0), new ScheduledTask(3, 11, 0), new ScheduledTask(22, 30, 0), new ScheduledTask(0, 6, 2), new ScheduledTask(16, 22, 0), new ScheduledTask(3, 6, 3), new ScheduledTask(6, 15, 2)};
        int[] expectedProcessorEndTimes = new int[]{67, 16, 15, 6};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot00_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.00_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(62, 67, 0), new ScheduledTask(0, 3, 4), new ScheduledTask(9, 18, 1), new ScheduledTask(0, 3, 0), new ScheduledTask(38, 41, 0), new ScheduledTask(30, 38, 0), new ScheduledTask(0, 7, 2), new ScheduledTask(41, 47, 0), new ScheduledTask(47, 57, 0), new ScheduledTask(11, 16, 0), new ScheduledTask(3, 11, 0), new ScheduledTask(22, 30, 0), new ScheduledTask(0, 6, 3), new ScheduledTask(16, 22, 0), new ScheduledTask(0, 3, 5), new ScheduledTask(0, 9, 1)};
        int[] expectedProcessorEndTimes = new int[]{67, 18, 7, 6, 3, 3};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 60;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(53, 60, 0), new ScheduledTask(16, 19, 0), new ScheduledTask(3, 6, 1), new ScheduledTask(35, 43, 0), new ScheduledTask(15, 20, 1), new ScheduledTask(43, 53, 0), new ScheduledTask(20, 26, 1), new ScheduledTask(0, 3, 1), new ScheduledTask(29, 33, 0), new ScheduledTask(12, 16, 0), new ScheduledTask(10, 15, 1), new ScheduledTask(6, 10, 1), new ScheduledTask(2, 12, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(33, 35, 0), new ScheduledTask(19, 29, 0)};
        int[] expectedProcessorEndTimes = new int[]{60, 26};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(43, 50, 0), new ScheduledTask(16, 19, 0), new ScheduledTask(36, 39, 0), new ScheduledTask(2, 10, 2), new ScheduledTask(5, 10, 3), new ScheduledTask(0, 10, 1), new ScheduledTask(10, 16, 3), new ScheduledTask(33, 36, 0), new ScheduledTask(29, 33, 0), new ScheduledTask(12, 16, 0), new ScheduledTask(0, 5, 3), new ScheduledTask(39, 43, 0), new ScheduledTask(2, 12, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(0, 2, 2), new ScheduledTask(19, 29, 0)};
        int[] expectedProcessorEndTimes = new int[]{50, 10, 10, 16};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(43, 50, 0), new ScheduledTask(16, 19, 0), new ScheduledTask(36, 39, 0), new ScheduledTask(5, 13, 2), new ScheduledTask(0, 5, 1), new ScheduledTask(5, 15, 1), new ScheduledTask(0, 6, 3), new ScheduledTask(33, 36, 0), new ScheduledTask(29, 33, 0), new ScheduledTask(12, 16, 0), new ScheduledTask(0, 5, 2), new ScheduledTask(39, 43, 0), new ScheduledTask(2, 12, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(0, 2, 4), new ScheduledTask(19, 29, 0)};
        int[] expectedProcessorEndTimes = new int[]{50, 15, 13, 6, 2};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(66, 76, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(15, 21, 0), new ScheduledTask(28, 34, 0), new ScheduledTask(15, 25, 1), new ScheduledTask(49, 55, 0), new ScheduledTask(34, 43, 0), new ScheduledTask(55, 62, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(25, 27, 1), new ScheduledTask(46, 49, 0), new ScheduledTask(43, 46, 0), new ScheduledTask(62, 65, 0), new ScheduledTask(5, 15, 1), new ScheduledTask(21, 28, 0), new ScheduledTask(5, 15, 0)};
        int[] expectedProcessorEndTimes = new int[]{76, 27};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(66, 76, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(15, 21, 0), new ScheduledTask(28, 34, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(49, 55, 0), new ScheduledTask(34, 43, 0), new ScheduledTask(55, 62, 0), new ScheduledTask(0, 5, 2), new ScheduledTask(3, 5, 3), new ScheduledTask(46, 49, 0), new ScheduledTask(43, 46, 0), new ScheduledTask(0, 3, 3), new ScheduledTask(5, 15, 2), new ScheduledTask(21, 28, 0), new ScheduledTask(5, 15, 0)};
        int[] expectedProcessorEndTimes = new int[]{76, 10, 15, 5};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(66, 76, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(15, 21, 0), new ScheduledTask(28, 34, 0), new ScheduledTask(5, 15, 1), new ScheduledTask(49, 55, 0), new ScheduledTask(34, 43, 0), new ScheduledTask(55, 62, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(0, 2, 4), new ScheduledTask(46, 49, 0), new ScheduledTask(43, 46, 0), new ScheduledTask(0, 3, 3), new ScheduledTask(0, 10, 2), new ScheduledTask(21, 28, 0), new ScheduledTask(5, 15, 0)};
        int[] expectedProcessorEndTimes = new int[]{76, 15, 10, 3, 2};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(68, 71, 0), new ScheduledTask(36, 41, 0), new ScheduledTask(51, 60, 0), new ScheduledTask(20, 26, 1), new ScheduledTask(6, 16, 0), new ScheduledTask(4, 11, 1), new ScheduledTask(18, 20, 0), new ScheduledTask(26, 36, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(0, 6, 0), new ScheduledTask(60, 68, 0), new ScheduledTask(20, 26, 0), new ScheduledTask(13, 20, 1), new ScheduledTask(41, 51, 0), new ScheduledTask(11, 13, 1), new ScheduledTask(16, 18, 0)};
        int[] expectedProcessorEndTimes = new int[]{71, 26};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(64, 67, 0), new ScheduledTask(36, 41, 0), new ScheduledTask(51, 60, 0), new ScheduledTask(13, 19, 3), new ScheduledTask(6, 16, 0), new ScheduledTask(0, 7, 2), new ScheduledTask(18, 20, 0), new ScheduledTask(26, 36, 0), new ScheduledTask(0, 4, 3), new ScheduledTask(0, 6, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(20, 26, 0), new ScheduledTask(6, 13, 3), new ScheduledTask(41, 51, 0), new ScheduledTask(4, 6, 3), new ScheduledTask(16, 18, 0)};
        int[] expectedProcessorEndTimes = new int[]{67, 8, 7, 19};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(64, 67, 0), new ScheduledTask(36, 41, 0), new ScheduledTask(51, 60, 0), new ScheduledTask(0, 6, 3), new ScheduledTask(6, 16, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(18, 20, 0), new ScheduledTask(26, 36, 0), new ScheduledTask(0, 4, 4), new ScheduledTask(0, 6, 0), new ScheduledTask(7, 15, 1), new ScheduledTask(20, 26, 0), new ScheduledTask(0, 7, 2), new ScheduledTask(41, 51, 0), new ScheduledTask(0, 2, 5), new ScheduledTask(16, 18, 0)};
        int[] expectedProcessorEndTimes = new int[]{67, 15, 7, 6, 4, 2};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(60, 68, 0), new ScheduledTask(9, 16, 1), new ScheduledTask(2, 9, 1), new ScheduledTask(14, 24, 0), new ScheduledTask(52, 60, 0), new ScheduledTask(18, 22, 1), new ScheduledTask(41, 48, 0), new ScheduledTask(34, 37, 0), new ScheduledTask(22, 30, 1), new ScheduledTask(0, 2, 1), new ScheduledTask(5, 14, 0), new ScheduledTask(37, 41, 0), new ScheduledTask(16, 18, 1), new ScheduledTask(48, 52, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(24, 34, 0)};
        int[] expectedProcessorEndTimes = new int[]{68, 30};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(60, 68, 0), new ScheduledTask(2, 9, 1), new ScheduledTask(0, 7, 2), new ScheduledTask(50, 60, 0), new ScheduledTask(23, 31, 0), new ScheduledTask(2, 6, 3), new ScheduledTask(16, 23, 0), new ScheduledTask(0, 3, 0), new ScheduledTask(9, 17, 1), new ScheduledTask(0, 2, 1), new ScheduledTask(31, 40, 0), new ScheduledTask(7, 11, 0), new ScheduledTask(0, 2, 3), new ScheduledTask(3, 7, 0), new ScheduledTask(11, 16, 0), new ScheduledTask(40, 50, 0)};
        int[] expectedProcessorEndTimes = new int[]{68, 17, 7, 6};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(60, 68, 0), new ScheduledTask(2, 9, 1), new ScheduledTask(0, 7, 2), new ScheduledTask(50, 60, 0), new ScheduledTask(23, 31, 0), new ScheduledTask(0, 4, 3), new ScheduledTask(16, 23, 0), new ScheduledTask(0, 3, 0), new ScheduledTask(9, 17, 1), new ScheduledTask(0, 2, 1), new ScheduledTask(31, 40, 0), new ScheduledTask(7, 11, 0), new ScheduledTask(0, 2, 4), new ScheduledTask(3, 7, 0), new ScheduledTask(11, 16, 0), new ScheduledTask(40, 50, 0)};
        int[] expectedProcessorEndTimes = new int[]{68, 17, 7, 4, 2};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(62, 67, 0), new ScheduledTask(37, 42, 0), new ScheduledTask(7, 15, 0), new ScheduledTask(7, 16, 1), new ScheduledTask(50, 60, 0), new ScheduledTask(25, 32, 0), new ScheduledTask(28, 30, 1), new ScheduledTask(22, 28, 1), new ScheduledTask(0, 7, 1), new ScheduledTask(60, 62, 0), new ScheduledTask(15, 18, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(16, 22, 1), new ScheduledTask(32, 37, 0), new ScheduledTask(42, 50, 0), new ScheduledTask(18, 25, 0)};
        int[] expectedProcessorEndTimes = new int[]{67, 30};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(62, 67, 0), new ScheduledTask(37, 42, 0), new ScheduledTask(7, 15, 0), new ScheduledTask(7, 16, 1), new ScheduledTask(50, 60, 0), new ScheduledTask(25, 32, 0), new ScheduledTask(8, 10, 3), new ScheduledTask(0, 6, 2), new ScheduledTask(0, 7, 1), new ScheduledTask(0, 2, 3), new ScheduledTask(15, 18, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(2, 8, 3), new ScheduledTask(32, 37, 0), new ScheduledTask(42, 50, 0), new ScheduledTask(18, 25, 0)};
        int[] expectedProcessorEndTimes = new int[]{67, 16, 6, 10};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(62, 67, 0), new ScheduledTask(37, 42, 0), new ScheduledTask(7, 15, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(50, 60, 0), new ScheduledTask(25, 32, 0), new ScheduledTask(7, 9, 2), new ScheduledTask(0, 6, 3), new ScheduledTask(0, 7, 2), new ScheduledTask(0, 2, 5), new ScheduledTask(15, 18, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(0, 6, 4), new ScheduledTask(32, 37, 0), new ScheduledTask(42, 50, 0), new ScheduledTask(18, 25, 0)};
        int[] expectedProcessorEndTimes = new int[]{67, 9, 9, 6, 6, 2};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(61, 64, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(34, 38, 0), new ScheduledTask(26, 34, 0), new ScheduledTask(54, 59, 0), new ScheduledTask(46, 49, 0), new ScheduledTask(10, 14, 1), new ScheduledTask(59, 61, 0), new ScheduledTask(3, 10, 1), new ScheduledTask(49, 54, 0), new ScheduledTask(7, 16, 0), new ScheduledTask(38, 46, 0), new ScheduledTask(23, 27, 1), new ScheduledTask(16, 26, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(14, 23, 1)};
        int[] expectedProcessorEndTimes = new int[]{64, 27};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(56, 59, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(34, 38, 0), new ScheduledTask(26, 34, 0), new ScheduledTask(0, 5, 2), new ScheduledTask(46, 49, 0), new ScheduledTask(3, 7, 1), new ScheduledTask(16, 18, 1), new ScheduledTask(49, 56, 0), new ScheduledTask(0, 5, 3), new ScheduledTask(7, 16, 0), new ScheduledTask(38, 46, 0), new ScheduledTask(18, 22, 1), new ScheduledTask(16, 26, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(7, 16, 1)};
        int[] expectedProcessorEndTimes = new int[]{59, 22, 5, 5};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_9dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_9.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(56, 59, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(34, 38, 0), new ScheduledTask(26, 34, 0), new ScheduledTask(0, 5, 2), new ScheduledTask(46, 49, 0), new ScheduledTask(0, 4, 4), new ScheduledTask(0, 2, 5), new ScheduledTask(49, 56, 0), new ScheduledTask(0, 5, 3), new ScheduledTask(7, 16, 0), new ScheduledTask(38, 46, 0), new ScheduledTask(2, 6, 5), new ScheduledTask(16, 26, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(3, 12, 1)};
        int[] expectedProcessorEndTimes = new int[]{59, 12, 5, 5, 4, 6};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 565;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 71, 0), new ScheduledTask(71, 189, 0), new ScheduledTask(305, 388, 1), new ScheduledTask(105, 164, 1), new ScheduledTask(81, 105, 1), new ScheduledTask(164, 270, 1), new ScheduledTask(459, 565, 1), new ScheduledTask(471, 565, 0), new ScheduledTask(388, 459, 1), new ScheduledTask(365, 424, 0), new ScheduledTask(318, 365, 0), new ScheduledTask(271, 318, 0), new ScheduledTask(224, 271, 0), new ScheduledTask(424, 471, 0), new ScheduledTask(270, 305, 1), new ScheduledTask(189, 224, 0)};
        int[] expectedProcessorEndTimes = new int[]{565, 565};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 378;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 71, 0), new ScheduledTask(71, 189, 0), new ScheduledTask(189, 272, 0), new ScheduledTask(75, 134, 1), new ScheduledTask(81, 105, 2), new ScheduledTask(134, 240, 1), new ScheduledTask(272, 378, 0), new ScheduledTask(105, 199, 2), new ScheduledTask(276, 347, 1), new ScheduledTask(112, 171, 3), new ScheduledTask(199, 246, 2), new ScheduledTask(171, 218, 3), new ScheduledTask(218, 265, 3), new ScheduledTask(281, 328, 2), new ScheduledTask(265, 300, 3), new ScheduledTask(300, 335, 3)};
        int[] expectedProcessorEndTimes = new int[]{378, 347, 328, 335};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 378;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 71, 0), new ScheduledTask(71, 189, 0), new ScheduledTask(189, 272, 0), new ScheduledTask(75, 134, 1), new ScheduledTask(81, 105, 2), new ScheduledTask(134, 240, 1), new ScheduledTask(272, 378, 0), new ScheduledTask(105, 199, 2), new ScheduledTask(276, 347, 1), new ScheduledTask(112, 171, 3), new ScheduledTask(199, 246, 2), new ScheduledTask(139, 186, 4), new ScheduledTask(137, 184, 5), new ScheduledTask(281, 328, 2), new ScheduledTask(197, 232, 3), new ScheduledTask(184, 219, 5)};
        int[] expectedProcessorEndTimes = new int[]{378, 347, 328, 232, 186, 219};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 532;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 83, 0), new ScheduledTask(135, 218, 0), new ScheduledTask(88, 140, 1), new ScheduledTask(83, 114, 0), new ScheduledTask(363, 404, 0), new ScheduledTask(429, 532, 1), new ScheduledTask(326, 429, 1), new ScheduledTask(233, 326, 1), new ScheduledTask(280, 363, 0), new ScheduledTask(404, 487, 0), new ScheduledTask(161, 233, 1), new ScheduledTask(218, 280, 0), new ScheduledTask(140, 161, 1), new ScheduledTask(114, 135, 0), new ScheduledTask(487, 508, 0), new ScheduledTask(508, 529, 0)};
        int[] expectedProcessorEndTimes = new int[]{529, 532};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 321;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 83, 0), new ScheduledTask(91, 174, 1), new ScheduledTask(83, 135, 0), new ScheduledTask(89, 120, 2), new ScheduledTask(195, 236, 3), new ScheduledTask(213, 316, 2), new ScheduledTask(197, 300, 0), new ScheduledTask(120, 213, 2), new ScheduledTask(216, 299, 1), new ScheduledTask(236, 319, 3), new ScheduledTask(123, 195, 3), new ScheduledTask(135, 197, 0), new ScheduledTask(195, 216, 1), new ScheduledTask(174, 195, 1), new ScheduledTask(300, 321, 0), new ScheduledTask(299, 320, 1)};
        int[] expectedProcessorEndTimes = new int[]{321, 320, 316, 319};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 290;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 83, 0), new ScheduledTask(83, 166, 0), new ScheduledTask(88, 140, 1), new ScheduledTask(89, 120, 2), new ScheduledTask(166, 207, 0), new ScheduledTask(171, 274, 1), new ScheduledTask(144, 247, 2), new ScheduledTask(130, 223, 3), new ScheduledTask(172, 255, 4), new ScheduledTask(207, 290, 0), new ScheduledTask(123, 195, 5), new ScheduledTask(195, 257, 5), new ScheduledTask(223, 244, 3), new ScheduledTask(244, 265, 3), new ScheduledTask(247, 268, 2), new ScheduledTask(255, 276, 4)};
        int[] expectedProcessorEndTimes = new int[]{290, 274, 268, 265, 276, 257};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 386;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 35, 0), new ScheduledTask(52, 87, 0), new ScheduledTask(218, 288, 0), new ScheduledTask(39, 74, 1), new ScheduledTask(35, 52, 0), new ScheduledTask(230, 308, 1), new ScheduledTask(308, 386, 1), new ScheduledTask(160, 230, 1), new ScheduledTask(148, 218, 0), new ScheduledTask(288, 358, 0), new ScheduledTask(87, 148, 0), new ScheduledTask(134, 160, 1), new ScheduledTask(108, 134, 1), new ScheduledTask(358, 384, 0), new ScheduledTask(91, 108, 1), new ScheduledTask(74, 91, 1)};
        int[] expectedProcessorEndTimes = new int[]{384, 386};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 221;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 35, 0), new ScheduledTask(35, 70, 0), new ScheduledTask(70, 140, 0), new ScheduledTask(39, 74, 1), new ScheduledTask(43, 60, 2), new ScheduledTask(117, 195, 1), new ScheduledTask(140, 218, 0), new ScheduledTask(63, 133, 3), new ScheduledTask(77, 147, 2), new ScheduledTask(149, 219, 2), new ScheduledTask(159, 220, 3), new ScheduledTask(133, 159, 3), new ScheduledTask(91, 117, 1), new ScheduledTask(195, 221, 1), new ScheduledTask(60, 77, 2), new ScheduledTask(74, 91, 1)};
        int[] expectedProcessorEndTimes = new int[]{218, 221, 219, 220};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 219;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 35, 0), new ScheduledTask(35, 70, 0), new ScheduledTask(70, 140, 0), new ScheduledTask(39, 74, 1), new ScheduledTask(43, 60, 2), new ScheduledTask(74, 152, 1), new ScheduledTask(140, 218, 0), new ScheduledTask(60, 130, 2), new ScheduledTask(77, 147, 3), new ScheduledTask(149, 219, 2), new ScheduledTask(72, 133, 4), new ScheduledTask(72, 98, 5), new ScheduledTask(98, 124, 5), new ScheduledTask(149, 175, 3), new ScheduledTask(124, 141, 5), new ScheduledTask(133, 150, 4)};
        int[] expectedProcessorEndTimes = new int[]{218, 152, 219, 175, 150, 141};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 559;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 107, 0), new ScheduledTask(107, 200, 0), new ScheduledTask(170, 237, 1), new ScheduledTask(413, 466, 0), new ScheduledTask(371, 491, 1), new ScheduledTask(116, 143, 1), new ScheduledTask(320, 413, 0), new ScheduledTask(240, 320, 0), new ScheduledTask(304, 371, 1), new ScheduledTask(491, 558, 1), new ScheduledTask(466, 519, 0), new ScheduledTask(200, 240, 0), new ScheduledTask(264, 304, 1), new ScheduledTask(519, 559, 0), new ScheduledTask(143, 170, 1), new ScheduledTask(237, 264, 1)};
        int[] expectedProcessorEndTimes = new int[]{559, 558};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 346;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 107, 0), new ScheduledTask(107, 200, 0), new ScheduledTask(114, 181, 1), new ScheduledTask(213, 266, 2), new ScheduledTask(223, 343, 3), new ScheduledTask(116, 143, 3), new ScheduledTask(200, 293, 0), new ScheduledTask(143, 223, 3), new ScheduledTask(209, 276, 1), new ScheduledTask(276, 343, 1), new ScheduledTask(293, 346, 0), new ScheduledTask(173, 213, 2), new ScheduledTask(306, 346, 2), new ScheduledTask(266, 306, 2), new ScheduledTask(146, 173, 2), new ScheduledTask(181, 208, 1)};
        int[] expectedProcessorEndTimes = new int[]{346, 343, 346, 343};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 323;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 107, 0), new ScheduledTask(107, 200, 0), new ScheduledTask(114, 181, 1), new ScheduledTask(203, 256, 2), new ScheduledTask(200, 320, 0), new ScheduledTask(116, 143, 3), new ScheduledTask(188, 281, 4), new ScheduledTask(173, 253, 5), new ScheduledTask(221, 288, 1), new ScheduledTask(256, 323, 2), new ScheduledTask(261, 314, 3), new ScheduledTask(143, 183, 3), new ScheduledTask(181, 221, 1), new ScheduledTask(280, 320, 5), new ScheduledTask(146, 173, 5), new ScheduledTask(253, 280, 5)};
        int[] expectedProcessorEndTimes = new int[]{320, 288, 323, 314, 281, 320};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 565;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 47, 0), new ScheduledTask(84, 154, 1), new ScheduledTask(47, 141, 0), new ScheduledTask(377, 471, 1), new ScheduledTask(260, 377, 1), new ScheduledTask(154, 260, 1), new ScheduledTask(49, 84, 1), new ScheduledTask(471, 565, 1), new ScheduledTask(412, 494, 0), new ScheduledTask(353, 412, 0), new ScheduledTask(294, 353, 0), new ScheduledTask(235, 294, 0), new ScheduledTask(176, 235, 0), new ScheduledTask(141, 176, 0), new ScheduledTask(529, 564, 0), new ScheduledTask(494, 529, 0)};
        int[] expectedProcessorEndTimes = new int[]{564, 565};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 324;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 47, 0), new ScheduledTask(55, 125, 1), new ScheduledTask(47, 141, 0), new ScheduledTask(125, 219, 1), new ScheduledTask(202, 319, 2), new ScheduledTask(212, 318, 3), new ScheduledTask(49, 84, 2), new ScheduledTask(228, 322, 0), new ScheduledTask(141, 223, 0), new ScheduledTask(143, 202, 2), new ScheduledTask(94, 153, 3), new ScheduledTask(84, 143, 2), new ScheduledTask(153, 212, 3), new ScheduledTask(289, 324, 1), new ScheduledTask(254, 289, 1), new ScheduledTask(219, 254, 1)};
        int[] expectedProcessorEndTimes = new int[]{322, 324, 319, 318};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 305;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 47, 0), new ScheduledTask(47, 117, 0), new ScheduledTask(55, 149, 1), new ScheduledTask(117, 211, 0), new ScheduledTask(149, 266, 1), new ScheduledTask(120, 226, 2), new ScheduledTask(49, 84, 3), new ScheduledTask(211, 305, 0), new ScheduledTask(159, 241, 3), new ScheduledTask(122, 181, 4), new ScheduledTask(94, 153, 5), new ScheduledTask(153, 212, 5), new ScheduledTask(181, 240, 4), new ScheduledTask(212, 247, 5), new ScheduledTask(226, 261, 2), new ScheduledTask(240, 275, 4)};
        int[] expectedProcessorEndTimes = new int[]{305, 266, 261, 241, 275, 247};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 467;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 53, 0), new ScheduledTask(53, 106, 0), new ScheduledTask(106, 201, 0), new ScheduledTask(55, 97, 1), new ScheduledTask(97, 118, 1), new ScheduledTask(118, 224, 1), new ScheduledTask(201, 296, 0), new ScheduledTask(224, 319, 1), new ScheduledTask(296, 381, 0), new ScheduledTask(319, 372, 1), new ScheduledTask(372, 414, 1), new ScheduledTask(381, 413, 0), new ScheduledTask(413, 445, 0), new ScheduledTask(414, 446, 1), new ScheduledTask(445, 466, 0), new ScheduledTask(446, 467, 1)};
        int[] expectedProcessorEndTimes = new int[]{466, 467};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 270;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 53, 0), new ScheduledTask(53, 106, 0), new ScheduledTask(106, 201, 0), new ScheduledTask(55, 97, 1), new ScheduledTask(56, 77, 2), new ScheduledTask(79, 185, 3), new ScheduledTask(150, 245, 1), new ScheduledTask(130, 225, 2), new ScheduledTask(185, 270, 3), new ScheduledTask(77, 130, 2), new ScheduledTask(225, 267, 2), new ScheduledTask(118, 150, 1), new ScheduledTask(233, 265, 0), new ScheduledTask(201, 233, 0), new ScheduledTask(97, 118, 1), new ScheduledTask(245, 266, 1)};
        int[] expectedProcessorEndTimes = new int[]{265, 266, 267, 270};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 243;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 53, 0), new ScheduledTask(53, 106, 0), new ScheduledTask(106, 201, 0), new ScheduledTask(55, 97, 1), new ScheduledTask(56, 77, 2), new ScheduledTask(77, 183, 2), new ScheduledTask(116, 211, 1), new ScheduledTask(103, 198, 3), new ScheduledTask(81, 166, 4), new ScheduledTask(85, 138, 5), new ScheduledTask(201, 243, 0), new ScheduledTask(138, 170, 5), new ScheduledTask(166, 198, 4), new ScheduledTask(207, 239, 2), new ScheduledTask(170, 191, 5), new ScheduledTask(205, 226, 3)};
        int[] expectedProcessorEndTimes = new int[]{243, 211, 239, 226, 198, 191};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 421;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 57, 0), new ScheduledTask(60, 134, 1), new ScheduledTask(57, 139, 0), new ScheduledTask(248, 273, 1), new ScheduledTask(189, 222, 0), new ScheduledTask(150, 232, 1), new ScheduledTask(339, 421, 1), new ScheduledTask(346, 420, 0), new ScheduledTask(273, 339, 1), new ScheduledTask(255, 321, 0), new ScheduledTask(222, 255, 0), new ScheduledTask(164, 189, 0), new ScheduledTask(139, 164, 0), new ScheduledTask(321, 346, 0), new ScheduledTask(134, 150, 1), new ScheduledTask(232, 248, 1)};
        int[] expectedProcessorEndTimes = new int[]{420, 421};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 249;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 57, 0), new ScheduledTask(60, 134, 1), new ScheduledTask(60, 142, 2), new ScheduledTask(57, 82, 0), new ScheduledTask(134, 167, 1), new ScheduledTask(166, 248, 3), new ScheduledTask(107, 189, 0), new ScheduledTask(142, 216, 2), new ScheduledTask(84, 150, 3), new ScheduledTask(183, 249, 1), new ScheduledTask(216, 249, 2), new ScheduledTask(214, 239, 0), new ScheduledTask(189, 214, 0), new ScheduledTask(82, 107, 0), new ScheduledTask(150, 166, 3), new ScheduledTask(167, 183, 1)};
        int[] expectedProcessorEndTimes = new int[]{239, 249, 249, 248};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 230;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 57, 0), new ScheduledTask(57, 131, 0), new ScheduledTask(60, 142, 1), new ScheduledTask(63, 88, 2), new ScheduledTask(131, 164, 0), new ScheduledTask(142, 224, 1), new ScheduledTask(88, 170, 2), new ScheduledTask(151, 225, 3), new ScheduledTask(90, 156, 4), new ScheduledTask(164, 230, 0), new ScheduledTask(167, 200, 4), new ScheduledTask(140, 165, 5), new ScheduledTask(165, 190, 5), new ScheduledTask(170, 195, 2), new ScheduledTask(190, 206, 5), new ScheduledTask(195, 211, 2)};
        int[] expectedProcessorEndTimes = new int[]{230, 224, 211, 225, 200, 206};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 466;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 24, 0), new ScheduledTask(24, 72, 0), new ScheduledTask(264, 328, 0), new ScheduledTask(130, 202, 1), new ScheduledTask(26, 58, 1), new ScheduledTask(384, 465, 0), new ScheduledTask(322, 394, 1), new ScheduledTask(58, 130, 1), new ScheduledTask(394, 466, 1), new ScheduledTask(258, 322, 1), new ScheduledTask(200, 264, 0), new ScheduledTask(136, 200, 0), new ScheduledTask(202, 258, 1), new ScheduledTask(328, 384, 0), new ScheduledTask(88, 136, 0), new ScheduledTask(72, 88, 0)};
        int[] expectedProcessorEndTimes = new int[]{465, 466};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 258;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 24, 0), new ScheduledTask(24, 72, 0), new ScheduledTask(72, 136, 0), new ScheduledTask(33, 105, 1), new ScheduledTask(26, 58, 2), new ScheduledTask(177, 258, 1), new ScheduledTask(182, 254, 3), new ScheduledTask(62, 134, 3), new ScheduledTask(186, 258, 2), new ScheduledTask(122, 186, 2), new ScheduledTask(58, 122, 2), new ScheduledTask(192, 256, 0), new ScheduledTask(121, 177, 1), new ScheduledTask(136, 192, 0), new ScheduledTask(134, 182, 3), new ScheduledTask(105, 121, 1)};
        int[] expectedProcessorEndTimes = new int[]{256, 258, 258, 254};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 217;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 24, 0), new ScheduledTask(24, 72, 0), new ScheduledTask(72, 136, 0), new ScheduledTask(33, 105, 1), new ScheduledTask(26, 58, 2), new ScheduledTask(136, 217, 0), new ScheduledTask(128, 200, 3), new ScheduledTask(62, 134, 4), new ScheduledTask(143, 215, 5), new ScheduledTask(153, 217, 1), new ScheduledTask(96, 160, 2), new ScheduledTask(64, 128, 3), new ScheduledTask(160, 216, 2), new ScheduledTask(142, 198, 4), new ScheduledTask(105, 153, 1), new ScheduledTask(80, 96, 2)};
        int[] expectedProcessorEndTimes = new int[]{217, 217, 216, 200, 198, 215};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 539;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 23, 0), new ScheduledTask(23, 58, 0), new ScheduledTask(26, 131, 1), new ScheduledTask(163, 268, 0), new ScheduledTask(422, 539, 1), new ScheduledTask(224, 247, 1), new ScheduledTask(58, 163, 0), new ScheduledTask(432, 537, 0), new ScheduledTask(350, 432, 0), new ScheduledTask(268, 350, 0), new ScheduledTask(352, 422, 1), new ScheduledTask(282, 352, 1), new ScheduledTask(189, 224, 1), new ScheduledTask(247, 282, 1), new ScheduledTask(154, 189, 1), new ScheduledTask(131, 154, 1)};
        int[] expectedProcessorEndTimes = new int[]{537, 539};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 293;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 23, 0), new ScheduledTask(33, 68, 1), new ScheduledTask(26, 131, 2), new ScheduledTask(83, 188, 3), new ScheduledTask(174, 291, 0), new ScheduledTask(23, 46, 0), new ScheduledTask(68, 173, 1), new ScheduledTask(188, 293, 3), new ScheduledTask(131, 213, 2), new ScheduledTask(208, 290, 1), new ScheduledTask(46, 116, 0), new ScheduledTask(213, 283, 2), new ScheduledTask(116, 151, 0), new ScheduledTask(48, 83, 3), new ScheduledTask(173, 208, 1), new ScheduledTask(151, 174, 0)};
        int[] expectedProcessorEndTimes = new int[]{291, 290, 283, 293};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 268;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 23, 0), new ScheduledTask(23, 58, 0), new ScheduledTask(26, 131, 1), new ScheduledTask(58, 163, 0), new ScheduledTask(131, 248, 1), new ScheduledTask(32, 55, 2), new ScheduledTask(64, 169, 2), new ScheduledTask(163, 268, 0), new ScheduledTask(65, 147, 3), new ScheduledTask(173, 255, 2), new ScheduledTask(65, 135, 4), new ScheduledTask(165, 235, 3), new ScheduledTask(68, 103, 5), new ScheduledTask(103, 138, 5), new ScheduledTask(136, 171, 4), new ScheduledTask(138, 161, 5)};
        int[] expectedProcessorEndTimes = new int[]{268, 248, 255, 235, 171, 161};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 482;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 55, 0), new ScheduledTask(200, 282, 0), new ScheduledTask(300, 373, 1), new ScheduledTask(63, 136, 1), new ScheduledTask(55, 100, 0), new ScheduledTask(364, 455, 0), new ScheduledTask(282, 364, 0), new ScheduledTask(236, 300, 1), new ScheduledTask(418, 482, 1), new ScheduledTask(181, 236, 1), new ScheduledTask(145, 200, 0), new ScheduledTask(136, 181, 1), new ScheduledTask(373, 418, 1), new ScheduledTask(118, 145, 0), new ScheduledTask(455, 482, 0), new ScheduledTask(100, 118, 0)};
        int[] expectedProcessorEndTimes = new int[]{482, 482};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 283;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 55, 0), new ScheduledTask(64, 146, 1), new ScheduledTask(146, 219, 1), new ScheduledTask(63, 136, 2), new ScheduledTask(55, 100, 0), new ScheduledTask(192, 283, 3), new ScheduledTask(155, 237, 0), new ScheduledTask(191, 255, 2), new ScheduledTask(219, 283, 1), new ScheduledTask(100, 155, 0), new ScheduledTask(136, 191, 2), new ScheduledTask(147, 192, 3), new ScheduledTask(237, 282, 0), new ScheduledTask(102, 129, 3), new ScheduledTask(255, 282, 2), new ScheduledTask(129, 147, 3)};
        int[] expectedProcessorEndTimes = new int[]{282, 283, 282, 283};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 274;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 55, 0), new ScheduledTask(55, 137, 0), new ScheduledTask(137, 210, 0), new ScheduledTask(63, 136, 1), new ScheduledTask(61, 106, 2), new ScheduledTask(145, 236, 1), new ScheduledTask(143, 225, 2), new ScheduledTask(143, 207, 3), new ScheduledTask(210, 274, 0), new ScheduledTask(108, 163, 4), new ScheduledTask(143, 198, 5), new ScheduledTask(163, 208, 4), new ScheduledTask(216, 261, 3), new ScheduledTask(198, 225, 5), new ScheduledTask(213, 240, 4), new ScheduledTask(225, 243, 2)};
        int[] expectedProcessorEndTimes = new int[]{274, 236, 243, 261, 240, 225};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot94_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.94_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(9, 17, 1), new ScheduledTask(14, 24, 0), new ScheduledTask(2, 8, 0), new ScheduledTask(37, 46, 0), new ScheduledTask(27, 37, 0), new ScheduledTask(44, 53, 1), new ScheduledTask(28, 37, 1), new ScheduledTask(21, 28, 1), new ScheduledTask(37, 44, 1), new ScheduledTask(8, 14, 0), new ScheduledTask(17, 21, 1), new ScheduledTask(24, 27, 0), new ScheduledTask(46, 49, 0), new ScheduledTask(49, 52, 0), new ScheduledTask(52, 54, 0)};
        int[] expectedProcessorEndTimes = new int[]{54, 53};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot94_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.94_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 34;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(9, 17, 1), new ScheduledTask(8, 18, 0), new ScheduledTask(2, 8, 0), new ScheduledTask(17, 26, 1), new ScheduledTask(21, 31, 0), new ScheduledTask(21, 30, 2), new ScheduledTask(16, 25, 3), new ScheduledTask(25, 32, 3), new ScheduledTask(27, 34, 1), new ScheduledTask(14, 20, 2), new ScheduledTask(11, 15, 3), new ScheduledTask(18, 21, 0), new ScheduledTask(30, 33, 2), new ScheduledTask(31, 34, 0), new ScheduledTask(32, 34, 3)};
        int[] expectedProcessorEndTimes = new int[]{34, 34, 33, 34};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot94_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.94_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(9, 17, 1), new ScheduledTask(2, 12, 0), new ScheduledTask(12, 18, 2), new ScheduledTask(17, 26, 1), new ScheduledTask(12, 22, 0), new ScheduledTask(22, 31, 0), new ScheduledTask(18, 27, 2), new ScheduledTask(25, 32, 3), new ScheduledTask(23, 30, 4), new ScheduledTask(25, 31, 5), new ScheduledTask(21, 25, 5), new ScheduledTask(20, 23, 4), new ScheduledTask(29, 32, 2), new ScheduledTask(26, 29, 1), new ScheduledTask(30, 32, 4)};
        int[] expectedProcessorEndTimes = new int[]{31, 29, 32, 32, 32, 31};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot95_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.95_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 11, 0), new ScheduledTask(31, 40, 1), new ScheduledTask(25, 35, 0), new ScheduledTask(11, 20, 1), new ScheduledTask(40, 50, 1), new ScheduledTask(16, 25, 0), new ScheduledTask(50, 59, 1), new ScheduledTask(23, 31, 1), new ScheduledTask(48, 56, 0), new ScheduledTask(39, 46, 0), new ScheduledTask(11, 16, 0), new ScheduledTask(35, 39, 0), new ScheduledTask(20, 23, 1), new ScheduledTask(56, 59, 0), new ScheduledTask(46, 48, 0)};
        int[] expectedProcessorEndTimes = new int[]{59, 59};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot95_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.95_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 39;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 11, 0), new ScheduledTask(17, 26, 1), new ScheduledTask(11, 21, 0), new ScheduledTask(11, 20, 2), new ScheduledTask(29, 39, 1), new ScheduledTask(30, 39, 0), new ScheduledTask(30, 39, 3), new ScheduledTask(23, 31, 2), new ScheduledTask(31, 39, 2), new ScheduledTask(21, 28, 0), new ScheduledTask(18, 23, 3), new ScheduledTask(26, 30, 3), new ScheduledTask(20, 23, 2), new ScheduledTask(26, 29, 1), new ScheduledTask(28, 30, 0)};
        int[] expectedProcessorEndTimes = new int[]{39, 39, 39, 39};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot95_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.95_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 38;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 11, 0), new ScheduledTask(17, 26, 1), new ScheduledTask(11, 21, 0), new ScheduledTask(11, 20, 2), new ScheduledTask(26, 36, 1), new ScheduledTask(18, 27, 3), new ScheduledTask(29, 38, 4), new ScheduledTask(24, 32, 5), new ScheduledTask(27, 35, 3), new ScheduledTask(28, 35, 2), new ScheduledTask(18, 23, 5), new ScheduledTask(34, 38, 5), new ScheduledTask(35, 38, 3), new ScheduledTask(35, 38, 2), new ScheduledTask(32, 34, 5)};
        int[] expectedProcessorEndTimes = new int[]{21, 36, 38, 38, 38, 38};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot97_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.97_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(16, 25, 1), new ScheduledTask(21, 31, 0), new ScheduledTask(39, 47, 1), new ScheduledTask(9, 17, 0), new ScheduledTask(44, 54, 0), new ScheduledTask(56, 66, 1), new ScheduledTask(35, 44, 0), new ScheduledTask(47, 56, 1), new ScheduledTask(25, 33, 1), new ScheduledTask(59, 66, 0), new ScheduledTask(54, 59, 0), new ScheduledTask(31, 35, 0), new ScheduledTask(17, 21, 0), new ScheduledTask(36, 39, 1), new ScheduledTask(33, 36, 1)};
        int[] expectedProcessorEndTimes = new int[]{66, 66};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot97_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.97_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 18, 0), new ScheduledTask(19, 29, 1), new ScheduledTask(18, 26, 0), new ScheduledTask(19, 27, 2), new ScheduledTask(25, 35, 3), new ScheduledTask(34, 44, 0), new ScheduledTask(29, 38, 1), new ScheduledTask(27, 36, 2), new ScheduledTask(26, 34, 0), new ScheduledTask(38, 45, 3), new ScheduledTask(36, 41, 2), new ScheduledTask(41, 45, 2), new ScheduledTask(38, 42, 1), new ScheduledTask(35, 38, 3), new ScheduledTask(42, 45, 1)};
        int[] expectedProcessorEndTimes = new int[]{44, 45, 45, 45};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot97_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.97_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 42;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 18, 0), new ScheduledTask(19, 29, 1), new ScheduledTask(18, 26, 0), new ScheduledTask(19, 27, 2), new ScheduledTask(25, 35, 3), new ScheduledTask(32, 42, 2), new ScheduledTask(29, 38, 1), new ScheduledTask(29, 38, 0), new ScheduledTask(23, 31, 4), new ScheduledTask(32, 39, 5), new ScheduledTask(31, 36, 4), new ScheduledTask(38, 42, 1), new ScheduledTask(36, 40, 4), new ScheduledTask(39, 42, 5), new ScheduledTask(39, 42, 3)};
        int[] expectedProcessorEndTimes = new int[]{38, 42, 42, 42, 40, 42};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(16, 21, 1), new ScheduledTask(21, 31, 1), new ScheduledTask(31, 41, 0), new ScheduledTask(10, 16, 0), new ScheduledTask(18, 29, 0), new ScheduledTask(43, 54, 1), new ScheduledTask(53, 60, 0), new ScheduledTask(54, 61, 1), new ScheduledTask(37, 43, 1), new ScheduledTask(31, 37, 1), new ScheduledTask(49, 53, 0), new ScheduledTask(45, 49, 0), new ScheduledTask(41, 45, 0), new ScheduledTask(29, 31, 0), new ScheduledTask(16, 18, 0)};
        int[] expectedProcessorEndTimes = new int[]{60, 61};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 42;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 15, 0), new ScheduledTask(15, 25, 0), new ScheduledTask(18, 28, 1), new ScheduledTask(20, 26, 2), new ScheduledTask(26, 37, 2), new ScheduledTask(25, 36, 0), new ScheduledTask(20, 27, 3), new ScheduledTask(28, 35, 1), new ScheduledTask(36, 42, 3), new ScheduledTask(28, 34, 3), new ScheduledTask(35, 39, 1), new ScheduledTask(38, 42, 2), new ScheduledTask(36, 40, 0), new ScheduledTask(18, 20, 3), new ScheduledTask(34, 36, 3)};
        int[] expectedProcessorEndTimes = new int[]{40, 39, 42, 42};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 42;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 15, 0), new ScheduledTask(15, 25, 0), new ScheduledTask(18, 28, 1), new ScheduledTask(20, 26, 2), new ScheduledTask(26, 37, 2), new ScheduledTask(25, 36, 0), new ScheduledTask(20, 27, 3), new ScheduledTask(28, 35, 1), new ScheduledTask(34, 40, 3), new ScheduledTask(28, 34, 4), new ScheduledTask(35, 39, 1), new ScheduledTask(38, 42, 0), new ScheduledTask(31, 35, 5), new ScheduledTask(34, 36, 4), new ScheduledTask(35, 37, 5)};
        int[] expectedProcessorEndTimes = new int[]{42, 39, 37, 40, 36, 37};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(7, 11, 1), new ScheduledTask(27, 34, 0), new ScheduledTask(27, 34, 1), new ScheduledTask(5, 16, 0), new ScheduledTask(36, 48, 0), new ScheduledTask(11, 21, 1), new ScheduledTask(41, 51, 1), new ScheduledTask(34, 41, 1), new ScheduledTask(21, 27, 1), new ScheduledTask(48, 54, 0), new ScheduledTask(22, 27, 0), new ScheduledTask(51, 55, 1), new ScheduledTask(18, 22, 0), new ScheduledTask(34, 36, 0), new ScheduledTask(16, 18, 0)};
        int[] expectedProcessorEndTimes = new int[]{54, 55};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 34;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(7, 11, 1), new ScheduledTask(5, 12, 0), new ScheduledTask(11, 18, 1), new ScheduledTask(11, 22, 2), new ScheduledTask(12, 24, 0), new ScheduledTask(20, 30, 3), new ScheduledTask(18, 28, 1), new ScheduledTask(24, 31, 0), new ScheduledTask(28, 34, 2), new ScheduledTask(22, 28, 2), new ScheduledTask(15, 20, 3), new ScheduledTask(30, 34, 3), new ScheduledTask(30, 34, 1), new ScheduledTask(28, 30, 1), new ScheduledTask(31, 33, 0)};
        int[] expectedProcessorEndTimes = new int[]{33, 34, 34, 34};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(7, 11, 1), new ScheduledTask(5, 12, 0), new ScheduledTask(11, 18, 1), new ScheduledTask(11, 22, 2), new ScheduledTask(12, 24, 0), new ScheduledTask(20, 30, 3), new ScheduledTask(18, 28, 1), new ScheduledTask(24, 31, 0), new ScheduledTask(25, 31, 4), new ScheduledTask(25, 31, 5), new ScheduledTask(15, 20, 5), new ScheduledTask(21, 25, 5), new ScheduledTask(22, 26, 2), new ScheduledTask(22, 24, 4), new ScheduledTask(26, 28, 2)};
        int[] expectedProcessorEndTimes = new int[]{31, 28, 28, 30, 31, 31};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(6, 9, 1), new ScheduledTask(9, 19, 1), new ScheduledTask(29, 39, 0), new ScheduledTask(4, 9, 0), new ScheduledTask(20, 29, 0), new ScheduledTask(39, 47, 0), new ScheduledTask(38, 45, 1), new ScheduledTask(31, 38, 1), new ScheduledTask(45, 51, 1), new ScheduledTask(25, 31, 1), new ScheduledTask(19, 25, 1), new ScheduledTask(13, 18, 0), new ScheduledTask(47, 51, 0), new ScheduledTask(9, 13, 0), new ScheduledTask(18, 20, 0)};
        int[] expectedProcessorEndTimes = new int[]{51, 51};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 33;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(6, 9, 1), new ScheduledTask(9, 19, 1), new ScheduledTask(4, 14, 0), new ScheduledTask(11, 16, 2), new ScheduledTask(17, 26, 3), new ScheduledTask(24, 32, 0), new ScheduledTask(19, 26, 1), new ScheduledTask(26, 33, 1), new ScheduledTask(26, 32, 3), new ScheduledTask(21, 27, 2), new ScheduledTask(27, 33, 2), new ScheduledTask(16, 21, 2), new ScheduledTask(14, 18, 0), new ScheduledTask(20, 24, 0), new ScheduledTask(18, 20, 0)};
        int[] expectedProcessorEndTimes = new int[]{32, 33, 33, 32};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 7, 0), new ScheduledTask(7, 17, 0), new ScheduledTask(10, 20, 1), new ScheduledTask(11, 16, 2), new ScheduledTask(22, 31, 2), new ScheduledTask(23, 31, 3), new ScheduledTask(17, 24, 0), new ScheduledTask(24, 31, 0), new ScheduledTask(20, 26, 1), new ScheduledTask(16, 22, 2), new ScheduledTask(20, 26, 4), new ScheduledTask(26, 31, 5), new ScheduledTask(26, 30, 1), new ScheduledTask(19, 23, 5), new ScheduledTask(15, 17, 5)};
        int[] expectedProcessorEndTimes = new int[]{31, 30, 31, 31, 26, 31};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot02_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.02_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(7, 10, 1), new ScheduledTask(15, 19, 1), new ScheduledTask(23, 32, 0), new ScheduledTask(4, 7, 0), new ScheduledTask(30, 39, 1), new ScheduledTask(39, 47, 1), new ScheduledTask(22, 30, 1), new ScheduledTask(40, 47, 0), new ScheduledTask(16, 23, 0), new ScheduledTask(10, 15, 1), new ScheduledTask(11, 16, 0), new ScheduledTask(7, 11, 0), new ScheduledTask(36, 40, 0), new ScheduledTask(32, 36, 0), new ScheduledTask(19, 22, 1)};
        int[] expectedProcessorEndTimes = new int[]{47, 47};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot02_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.02_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(7, 10, 1), new ScheduledTask(10, 14, 1), new ScheduledTask(4, 13, 0), new ScheduledTask(14, 17, 2), new ScheduledTask(14, 23, 1), new ScheduledTask(17, 25, 0), new ScheduledTask(23, 31, 2), new ScheduledTask(12, 19, 3), new ScheduledTask(24, 31, 3), new ScheduledTask(19, 24, 3), new ScheduledTask(17, 22, 2), new ScheduledTask(27, 31, 1), new ScheduledTask(23, 27, 1), new ScheduledTask(13, 17, 0), new ScheduledTask(25, 28, 0)};
        int[] expectedProcessorEndTimes = new int[]{28, 31, 31, 31};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot02_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.02_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(7, 10, 1), new ScheduledTask(10, 14, 1), new ScheduledTask(4, 13, 0), new ScheduledTask(14, 17, 2), new ScheduledTask(14, 23, 1), new ScheduledTask(17, 25, 3), new ScheduledTask(23, 31, 4), new ScheduledTask(12, 19, 5), new ScheduledTask(24, 31, 5), new ScheduledTask(19, 24, 5), new ScheduledTask(25, 30, 3), new ScheduledTask(17, 21, 2), new ScheduledTask(15, 19, 4), new ScheduledTask(26, 30, 2), new ScheduledTask(23, 26, 2)};
        int[] expectedProcessorEndTimes = new int[]{13, 23, 30, 30, 31, 31};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(14, 23, 1), new ScheduledTask(29, 37, 0), new ScheduledTask(9, 12, 0), new ScheduledTask(15, 21, 0), new ScheduledTask(47, 57, 0), new ScheduledTask(38, 48, 1), new ScheduledTask(29, 38, 1), new ScheduledTask(48, 57, 1), new ScheduledTask(23, 29, 1), new ScheduledTask(43, 47, 0), new ScheduledTask(25, 29, 0), new ScheduledTask(21, 25, 0), new ScheduledTask(12, 15, 0), new ScheduledTask(40, 43, 0), new ScheduledTask(37, 40, 0)};
        int[] expectedProcessorEndTimes = new int[]{57, 57};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 38;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(14, 23, 1), new ScheduledTask(12, 20, 0), new ScheduledTask(9, 12, 0), new ScheduledTask(16, 22, 2), new ScheduledTask(23, 33, 1), new ScheduledTask(22, 32, 2), new ScheduledTask(22, 31, 3), new ScheduledTask(20, 29, 0), new ScheduledTask(29, 35, 0), new ScheduledTask(34, 38, 3), new ScheduledTask(32, 36, 2), new ScheduledTask(33, 37, 1), new ScheduledTask(17, 20, 3), new ScheduledTask(31, 34, 3), new ScheduledTask(35, 38, 0)};
        int[] expectedProcessorEndTimes = new int[]{38, 37, 36, 38};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(14, 23, 1), new ScheduledTask(12, 20, 0), new ScheduledTask(9, 12, 0), new ScheduledTask(16, 22, 2), new ScheduledTask(23, 33, 1), new ScheduledTask(22, 32, 2), new ScheduledTask(22, 31, 3), new ScheduledTask(20, 29, 0), new ScheduledTask(29, 35, 0), new ScheduledTask(26, 30, 4), new ScheduledTask(25, 29, 5), new ScheduledTask(31, 35, 5), new ScheduledTask(17, 20, 5), new ScheduledTask(30, 33, 4), new ScheduledTask(31, 34, 3)};
        int[] expectedProcessorEndTimes = new int[]{35, 33, 32, 34, 33, 35};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot03_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.03_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 60;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(11, 21, 1), new ScheduledTask(28, 38, 0), new ScheduledTask(28, 33, 1), new ScheduledTask(8, 13, 0), new ScheduledTask(18, 28, 0), new ScheduledTask(41, 51, 1), new ScheduledTask(51, 60, 0), new ScheduledTask(51, 60, 1), new ScheduledTask(33, 41, 1), new ScheduledTask(23, 28, 1), new ScheduledTask(46, 51, 0), new ScheduledTask(41, 46, 0), new ScheduledTask(13, 18, 0), new ScheduledTask(38, 41, 0), new ScheduledTask(21, 23, 1)};
        int[] expectedProcessorEndTimes = new int[]{60, 60};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot03_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.03_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 42;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(11, 21, 1), new ScheduledTask(17, 27, 2), new ScheduledTask(21, 26, 1), new ScheduledTask(8, 13, 0), new ScheduledTask(13, 23, 0), new ScheduledTask(32, 42, 0), new ScheduledTask(27, 36, 2), new ScheduledTask(31, 40, 1), new ScheduledTask(31, 39, 3), new ScheduledTask(24, 29, 3), new ScheduledTask(26, 31, 1), new ScheduledTask(36, 41, 2), new ScheduledTask(19, 24, 3), new ScheduledTask(39, 42, 3), new ScheduledTask(17, 19, 3)};
        int[] expectedProcessorEndTimes = new int[]{42, 40, 41, 42};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot03_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.03_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 41;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 18, 0), new ScheduledTask(17, 27, 1), new ScheduledTask(18, 23, 0), new ScheduledTask(21, 26, 2), new ScheduledTask(26, 36, 2), new ScheduledTask(29, 39, 3), new ScheduledTask(27, 36, 1), new ScheduledTask(23, 32, 0), new ScheduledTask(28, 36, 4), new ScheduledTask(21, 26, 5), new ScheduledTask(36, 41, 5), new ScheduledTask(36, 41, 1), new ScheduledTask(29, 34, 5), new ScheduledTask(36, 39, 4), new ScheduledTask(34, 36, 5)};
        int[] expectedProcessorEndTimes = new int[]{32, 41, 36, 39, 39, 41};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot06_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.06_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 18, 0), new ScheduledTask(18, 26, 0), new ScheduledTask(15, 24, 1), new ScheduledTask(43, 45, 1), new ScheduledTask(45, 55, 1), new ScheduledTask(46, 55, 0), new ScheduledTask(29, 37, 0), new ScheduledTask(35, 43, 1), new ScheduledTask(29, 35, 1), new ScheduledTask(40, 46, 0), new ScheduledTask(24, 29, 1), new ScheduledTask(55, 58, 1), new ScheduledTask(55, 58, 0), new ScheduledTask(37, 40, 0), new ScheduledTask(26, 29, 0)};
        int[] expectedProcessorEndTimes = new int[]{58, 58};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot06_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.06_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 42;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 18, 0), new ScheduledTask(18, 26, 0), new ScheduledTask(15, 24, 1), new ScheduledTask(19, 21, 2), new ScheduledTask(21, 31, 2), new ScheduledTask(26, 35, 0), new ScheduledTask(24, 32, 1), new ScheduledTask(34, 42, 1), new ScheduledTask(28, 34, 3), new ScheduledTask(31, 37, 2), new ScheduledTask(34, 39, 3), new ScheduledTask(35, 38, 0), new ScheduledTask(37, 40, 2), new ScheduledTask(38, 41, 0), new ScheduledTask(39, 42, 3)};
        int[] expectedProcessorEndTimes = new int[]{41, 42, 40, 42};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot06_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.06_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 42;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 18, 0), new ScheduledTask(18, 26, 0), new ScheduledTask(15, 24, 1), new ScheduledTask(19, 21, 2), new ScheduledTask(21, 31, 2), new ScheduledTask(26, 35, 0), new ScheduledTask(24, 32, 1), new ScheduledTask(34, 42, 1), new ScheduledTask(28, 34, 3), new ScheduledTask(31, 37, 2), new ScheduledTask(20, 25, 4), new ScheduledTask(30, 33, 4), new ScheduledTask(31, 34, 5), new ScheduledTask(33, 36, 4), new ScheduledTask(34, 37, 3)};
        int[] expectedProcessorEndTimes = new int[]{35, 42, 37, 37, 36, 34};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 14, 0), new ScheduledTask(40, 47, 0), new ScheduledTask(19, 22, 0), new ScheduledTask(42, 44, 1), new ScheduledTask(54, 64, 0), new ScheduledTask(55, 65, 1), new ScheduledTask(32, 40, 0), new ScheduledTask(48, 55, 1), new ScheduledTask(25, 32, 0), new ScheduledTask(35, 40, 1), new ScheduledTask(14, 19, 0), new ScheduledTask(49, 54, 0), new ScheduledTask(44, 48, 1), new ScheduledTask(22, 25, 0), new ScheduledTask(47, 49, 0)};
        int[] expectedProcessorEndTimes = new int[]{64, 65};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(32, 36, 0), new ScheduledTask(10, 17, 0), new ScheduledTask(41, 44, 0), new ScheduledTask(42, 44, 1), new ScheduledTask(22, 32, 0), new ScheduledTask(55, 65, 1), new ScheduledTask(54, 62, 0), new ScheduledTask(48, 55, 1), new ScheduledTask(44, 51, 0), new ScheduledTask(57, 62, 2), new ScheduledTask(36, 41, 0), new ScheduledTask(17, 22, 0), new ScheduledTask(44, 48, 1), new ScheduledTask(51, 54, 0), new ScheduledTask(60, 62, 3)};
        int[] expectedProcessorEndTimes = new int[]{62, 65, 62, 62};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(32, 36, 0), new ScheduledTask(10, 17, 0), new ScheduledTask(41, 44, 0), new ScheduledTask(42, 44, 1), new ScheduledTask(22, 32, 0), new ScheduledTask(55, 65, 1), new ScheduledTask(54, 62, 0), new ScheduledTask(48, 55, 1), new ScheduledTask(44, 51, 0), new ScheduledTask(57, 62, 2), new ScheduledTask(36, 41, 0), new ScheduledTask(17, 22, 0), new ScheduledTask(44, 48, 1), new ScheduledTask(51, 54, 0), new ScheduledTask(60, 62, 3)};
        int[] expectedProcessorEndTimes = new int[]{62, 65, 62, 62};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 15, 0), new ScheduledTask(51, 55, 0), new ScheduledTask(41, 48, 1), new ScheduledTask(15, 20, 0), new ScheduledTask(41, 51, 0), new ScheduledTask(32, 41, 0), new ScheduledTask(63, 72, 1), new ScheduledTask(64, 72, 0), new ScheduledTask(55, 62, 0), new ScheduledTask(55, 62, 1), new ScheduledTask(25, 32, 0), new ScheduledTask(20, 25, 0), new ScheduledTask(48, 52, 1), new ScheduledTask(52, 55, 1), new ScheduledTask(62, 64, 0)};
        int[] expectedProcessorEndTimes = new int[]{72, 72};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 15, 0), new ScheduledTask(51, 55, 0), new ScheduledTask(41, 48, 1), new ScheduledTask(15, 20, 0), new ScheduledTask(41, 51, 0), new ScheduledTask(32, 41, 0), new ScheduledTask(63, 72, 1), new ScheduledTask(64, 72, 0), new ScheduledTask(55, 62, 0), new ScheduledTask(48, 55, 1), new ScheduledTask(25, 32, 0), new ScheduledTask(20, 25, 0), new ScheduledTask(58, 62, 1), new ScheduledTask(55, 58, 1), new ScheduledTask(62, 64, 0)};
        int[] expectedProcessorEndTimes = new int[]{72, 72};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 15, 0), new ScheduledTask(51, 55, 0), new ScheduledTask(41, 48, 1), new ScheduledTask(15, 20, 0), new ScheduledTask(41, 51, 0), new ScheduledTask(32, 41, 0), new ScheduledTask(63, 72, 1), new ScheduledTask(64, 72, 0), new ScheduledTask(55, 62, 0), new ScheduledTask(48, 55, 1), new ScheduledTask(25, 32, 0), new ScheduledTask(20, 25, 0), new ScheduledTask(58, 62, 1), new ScheduledTask(55, 58, 1), new ScheduledTask(62, 64, 0)};
        int[] expectedProcessorEndTimes = new int[]{72, 72};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 10, 0), new ScheduledTask(37, 47, 0), new ScheduledTask(37, 39, 1), new ScheduledTask(10, 13, 0), new ScheduledTask(57, 67, 1), new ScheduledTask(47, 57, 1), new ScheduledTask(27, 37, 0), new ScheduledTask(55, 64, 0), new ScheduledTask(39, 47, 1), new ScheduledTask(20, 27, 0), new ScheduledTask(32, 37, 1), new ScheduledTask(51, 55, 0), new ScheduledTask(47, 51, 0), new ScheduledTask(16, 20, 0), new ScheduledTask(13, 16, 0)};
        int[] expectedProcessorEndTimes = new int[]{64, 67};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(32, 37, 0), new ScheduledTask(5, 15, 0), new ScheduledTask(34, 36, 1), new ScheduledTask(37, 40, 0), new ScheduledTask(54, 64, 1), new ScheduledTask(44, 54, 1), new ScheduledTask(54, 64, 0), new ScheduledTask(23, 32, 0), new ScheduledTask(36, 44, 1), new ScheduledTask(47, 54, 0), new ScheduledTask(59, 64, 2), new ScheduledTask(19, 23, 0), new ScheduledTask(15, 19, 0), new ScheduledTask(43, 47, 0), new ScheduledTask(40, 43, 0)};
        int[] expectedProcessorEndTimes = new int[]{64, 64, 64};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(32, 37, 0), new ScheduledTask(5, 15, 0), new ScheduledTask(34, 36, 1), new ScheduledTask(37, 40, 0), new ScheduledTask(54, 64, 1), new ScheduledTask(44, 54, 1), new ScheduledTask(54, 64, 0), new ScheduledTask(23, 32, 0), new ScheduledTask(36, 44, 1), new ScheduledTask(47, 54, 0), new ScheduledTask(59, 64, 2), new ScheduledTask(19, 23, 0), new ScheduledTask(15, 19, 0), new ScheduledTask(43, 47, 0), new ScheduledTask(40, 43, 0)};
        int[] expectedProcessorEndTimes = new int[]{64, 64, 64};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 87;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 17, 0), new ScheduledTask(59, 68, 0), new ScheduledTask(29, 37, 0), new ScheduledTask(61, 68, 1), new ScheduledTask(50, 59, 0), new ScheduledTask(71, 79, 1), new ScheduledTask(79, 87, 1), new ScheduledTask(22, 29, 0), new ScheduledTask(43, 50, 0), new ScheduledTask(68, 75, 0), new ScheduledTask(79, 86, 0), new ScheduledTask(37, 43, 0), new ScheduledTask(17, 22, 0), new ScheduledTask(75, 79, 0), new ScheduledTask(68, 71, 1)};
        int[] expectedProcessorEndTimes = new int[]{86, 87};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 87;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 17, 0), new ScheduledTask(17, 26, 0), new ScheduledTask(40, 48, 0), new ScheduledTask(61, 68, 1), new ScheduledTask(48, 57, 0), new ScheduledTask(71, 79, 1), new ScheduledTask(79, 87, 1), new ScheduledTask(33, 40, 0), new ScheduledTask(57, 64, 0), new ScheduledTask(77, 84, 2), new ScheduledTask(26, 33, 0), new ScheduledTask(64, 70, 0), new ScheduledTask(72, 77, 2), new ScheduledTask(81, 85, 3), new ScheduledTask(68, 71, 1)};
        int[] expectedProcessorEndTimes = new int[]{70, 87, 84, 85};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 87;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 17, 0), new ScheduledTask(17, 26, 0), new ScheduledTask(40, 48, 0), new ScheduledTask(61, 68, 1), new ScheduledTask(48, 57, 0), new ScheduledTask(71, 79, 1), new ScheduledTask(79, 87, 1), new ScheduledTask(33, 40, 0), new ScheduledTask(57, 64, 0), new ScheduledTask(48, 55, 2), new ScheduledTask(26, 33, 0), new ScheduledTask(64, 70, 0), new ScheduledTask(72, 77, 3), new ScheduledTask(81, 85, 4), new ScheduledTask(68, 71, 1)};
        int[] expectedProcessorEndTimes = new int[]{70, 87, 55, 77, 85};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(12, 22, 0), new ScheduledTask(46, 49, 0), new ScheduledTask(2, 9, 0), new ScheduledTask(25, 30, 0), new ScheduledTask(38, 48, 1), new ScheduledTask(48, 58, 1), new ScheduledTask(61, 70, 1), new ScheduledTask(62, 70, 0), new ScheduledTask(38, 46, 0), new ScheduledTask(55, 62, 0), new ScheduledTask(49, 55, 0), new ScheduledTask(32, 38, 0), new ScheduledTask(22, 25, 0), new ScheduledTask(9, 12, 0), new ScheduledTask(30, 32, 0)};
        int[] expectedProcessorEndTimes = new int[]{70, 70};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(23, 33, 0), new ScheduledTask(2, 5, 0), new ScheduledTask(5, 12, 0), new ScheduledTask(45, 50, 0), new ScheduledTask(41, 51, 1), new ScheduledTask(51, 61, 1), new ScheduledTask(36, 45, 0), new ScheduledTask(15, 23, 0), new ScheduledTask(52, 60, 0), new ScheduledTask(54, 61, 2), new ScheduledTask(44, 50, 3), new ScheduledTask(60, 66, 0), new ScheduledTask(33, 36, 0), new ScheduledTask(12, 15, 0), new ScheduledTask(50, 52, 0)};
        int[] expectedProcessorEndTimes = new int[]{66, 61, 61, 50};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(23, 33, 0), new ScheduledTask(2, 5, 0), new ScheduledTask(5, 12, 0), new ScheduledTask(45, 50, 0), new ScheduledTask(41, 51, 1), new ScheduledTask(51, 61, 1), new ScheduledTask(36, 45, 0), new ScheduledTask(15, 23, 0), new ScheduledTask(52, 60, 0), new ScheduledTask(54, 61, 2), new ScheduledTask(44, 50, 3), new ScheduledTask(60, 66, 0), new ScheduledTask(33, 36, 0), new ScheduledTask(12, 15, 0), new ScheduledTask(50, 52, 0)};
        int[] expectedProcessorEndTimes = new int[]{66, 61, 61, 50};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 12, 0), new ScheduledTask(14, 22, 0), new ScheduledTask(47, 51, 0), new ScheduledTask(12, 14, 0), new ScheduledTask(37, 47, 0), new ScheduledTask(29, 37, 0), new ScheduledTask(44, 51, 1), new ScheduledTask(51, 57, 1), new ScheduledTask(51, 56, 0), new ScheduledTask(57, 62, 1), new ScheduledTask(25, 29, 0), new ScheduledTask(41, 44, 1), new ScheduledTask(22, 25, 0), new ScheduledTask(56, 58, 0), new ScheduledTask(58, 60, 0)};
        int[] expectedProcessorEndTimes = new int[]{60, 62};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 12, 0), new ScheduledTask(14, 22, 0), new ScheduledTask(44, 48, 0), new ScheduledTask(12, 14, 0), new ScheduledTask(34, 44, 0), new ScheduledTask(43, 51, 1), new ScheduledTask(43, 50, 2), new ScheduledTask(51, 57, 3), new ScheduledTask(48, 53, 0), new ScheduledTask(29, 34, 0), new ScheduledTask(25, 29, 0), new ScheduledTask(41, 44, 3), new ScheduledTask(22, 25, 0), new ScheduledTask(53, 55, 0), new ScheduledTask(55, 57, 0)};
        int[] expectedProcessorEndTimes = new int[]{57, 51, 50, 57};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 12, 0), new ScheduledTask(14, 22, 0), new ScheduledTask(44, 48, 0), new ScheduledTask(12, 14, 0), new ScheduledTask(34, 44, 0), new ScheduledTask(43, 51, 1), new ScheduledTask(43, 50, 2), new ScheduledTask(51, 57, 1), new ScheduledTask(48, 53, 0), new ScheduledTask(29, 34, 0), new ScheduledTask(25, 29, 0), new ScheduledTask(41, 44, 3), new ScheduledTask(22, 25, 0), new ScheduledTask(53, 55, 0), new ScheduledTask(55, 57, 0)};
        int[] expectedProcessorEndTimes = new int[]{57, 57, 50, 44};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot03_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.03_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 5, 0), new ScheduledTask(13, 23, 0), new ScheduledTask(5, 13, 0), new ScheduledTask(23, 31, 0), new ScheduledTask(60, 70, 0), new ScheduledTask(50, 60, 0), new ScheduledTask(27, 35, 1), new ScheduledTask(42, 50, 0), new ScheduledTask(61, 68, 1), new ScheduledTask(37, 42, 0), new ScheduledTask(57, 61, 1), new ScheduledTask(34, 37, 0), new ScheduledTask(31, 34, 0), new ScheduledTask(55, 57, 1), new ScheduledTask(53, 55, 1)};
        int[] expectedProcessorEndTimes = new int[]{70, 68};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot03_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.03_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(13, 16, 0), new ScheduledTask(16, 26, 0), new ScheduledTask(2, 10, 0), new ScheduledTask(26, 34, 0), new ScheduledTask(60, 70, 0), new ScheduledTask(50, 60, 0), new ScheduledTask(60, 68, 1), new ScheduledTask(42, 50, 0), new ScheduledTask(59, 66, 2), new ScheduledTask(37, 42, 0), new ScheduledTask(54, 58, 3), new ScheduledTask(34, 37, 0), new ScheduledTask(10, 13, 0), new ScheduledTask(58, 60, 1), new ScheduledTask(56, 58, 1)};
        int[] expectedProcessorEndTimes = new int[]{70, 68, 66, 58};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot03_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.03_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(10, 13, 0), new ScheduledTask(16, 26, 0), new ScheduledTask(2, 10, 0), new ScheduledTask(31, 39, 0), new ScheduledTask(60, 70, 0), new ScheduledTask(50, 60, 0), new ScheduledTask(35, 43, 1), new ScheduledTask(42, 50, 0), new ScheduledTask(59, 66, 2), new ScheduledTask(26, 31, 0), new ScheduledTask(54, 58, 3), new ScheduledTask(39, 42, 0), new ScheduledTask(13, 16, 0), new ScheduledTask(61, 63, 4), new ScheduledTask(61, 63, 5)};
        int[] expectedProcessorEndTimes = new int[]{70, 43, 66, 58, 63, 63};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot04_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.04_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 16, 0), new ScheduledTask(44, 46, 0), new ScheduledTask(49, 51, 1), new ScheduledTask(18, 25, 0), new ScheduledTask(34, 44, 0), new ScheduledTask(56, 64, 0), new ScheduledTask(28, 34, 0), new ScheduledTask(42, 48, 1), new ScheduledTask(51, 56, 0), new ScheduledTask(46, 51, 0), new ScheduledTask(51, 56, 1), new ScheduledTask(56, 61, 1), new ScheduledTask(25, 28, 0), new ScheduledTask(61, 64, 1), new ScheduledTask(16, 18, 0)};
        int[] expectedProcessorEndTimes = new int[]{64, 64};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot04_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.04_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 16, 0), new ScheduledTask(24, 26, 0), new ScheduledTask(49, 51, 1), new ScheduledTask(31, 38, 0), new ScheduledTask(49, 59, 0), new ScheduledTask(41, 49, 0), new ScheduledTask(18, 24, 0), new ScheduledTask(55, 61, 2), new ScheduledTask(26, 31, 0), new ScheduledTask(43, 48, 1), new ScheduledTask(51, 56, 1), new ScheduledTask(56, 61, 1), new ScheduledTask(38, 41, 0), new ScheduledTask(61, 64, 1), new ScheduledTask(16, 18, 0)};
        int[] expectedProcessorEndTimes = new int[]{59, 64, 61};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot04_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.04_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 16, 0), new ScheduledTask(24, 26, 0), new ScheduledTask(49, 51, 1), new ScheduledTask(31, 38, 0), new ScheduledTask(49, 59, 0), new ScheduledTask(41, 49, 0), new ScheduledTask(18, 24, 0), new ScheduledTask(55, 61, 2), new ScheduledTask(26, 31, 0), new ScheduledTask(43, 48, 1), new ScheduledTask(51, 56, 1), new ScheduledTask(56, 61, 1), new ScheduledTask(38, 41, 0), new ScheduledTask(61, 64, 1), new ScheduledTask(16, 18, 0)};
        int[] expectedProcessorEndTimes = new int[]{59, 64, 61};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot05_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.05_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(12, 22, 0), new ScheduledTask(25, 30, 1), new ScheduledTask(22, 26, 0), new ScheduledTask(8, 10, 0), new ScheduledTask(46, 54, 0), new ScheduledTask(44, 52, 1), new ScheduledTask(36, 44, 1), new ScheduledTask(30, 36, 1), new ScheduledTask(40, 46, 0), new ScheduledTask(35, 40, 0), new ScheduledTask(31, 35, 0), new ScheduledTask(52, 56, 1), new ScheduledTask(28, 31, 0), new ScheduledTask(26, 28, 0), new ScheduledTask(10, 12, 0)};
        int[] expectedProcessorEndTimes = new int[]{54, 56};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot05_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.05_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 18, 0), new ScheduledTask(25, 30, 1), new ScheduledTask(18, 22, 0), new ScheduledTask(27, 29, 0), new ScheduledTask(40, 48, 0), new ScheduledTask(30, 38, 1), new ScheduledTask(38, 46, 1), new ScheduledTask(46, 52, 1), new ScheduledTask(46, 52, 2), new ScheduledTask(35, 40, 0), new ScheduledTask(31, 35, 0), new ScheduledTask(47, 51, 3), new ScheduledTask(24, 27, 0), new ScheduledTask(22, 24, 0), new ScheduledTask(29, 31, 0)};
        int[] expectedProcessorEndTimes = new int[]{48, 52, 52, 51};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot05_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.05_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 18, 0), new ScheduledTask(25, 30, 1), new ScheduledTask(18, 22, 0), new ScheduledTask(27, 29, 0), new ScheduledTask(40, 48, 0), new ScheduledTask(30, 38, 1), new ScheduledTask(38, 46, 1), new ScheduledTask(46, 52, 1), new ScheduledTask(46, 52, 2), new ScheduledTask(35, 40, 0), new ScheduledTask(31, 35, 0), new ScheduledTask(47, 51, 3), new ScheduledTask(24, 27, 0), new ScheduledTask(22, 24, 0), new ScheduledTask(29, 31, 0)};
        int[] expectedProcessorEndTimes = new int[]{48, 52, 52, 51};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(9, 15, 0), new ScheduledTask(3, 9, 0), new ScheduledTask(20, 23, 0), new ScheduledTask(23, 31, 0), new ScheduledTask(34, 44, 1), new ScheduledTask(63, 72, 0), new ScheduledTask(63, 71, 1), new ScheduledTask(55, 63, 0), new ScheduledTask(48, 55, 0), new ScheduledTask(56, 63, 1), new ScheduledTask(48, 55, 1), new ScheduledTask(42, 48, 0), new ScheduledTask(36, 42, 0), new ScheduledTask(15, 20, 0), new ScheduledTask(31, 36, 0)};
        int[] expectedProcessorEndTimes = new int[]{72, 71};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(24, 30, 0), new ScheduledTask(3, 9, 0), new ScheduledTask(41, 44, 0), new ScheduledTask(41, 49, 1), new ScheduledTask(34, 44, 2), new ScheduledTask(56, 65, 0), new ScheduledTask(16, 24, 0), new ScheduledTask(56, 64, 1), new ScheduledTask(9, 16, 0), new ScheduledTask(49, 56, 1), new ScheduledTask(44, 51, 0), new ScheduledTask(35, 41, 0), new ScheduledTask(64, 70, 1), new ScheduledTask(30, 35, 0), new ScheduledTask(51, 56, 0)};
        int[] expectedProcessorEndTimes = new int[]{65, 70, 44};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(16, 22, 0), new ScheduledTask(3, 9, 0), new ScheduledTask(33, 36, 0), new ScheduledTask(41, 49, 1), new ScheduledTask(34, 44, 2), new ScheduledTask(41, 50, 0), new ScheduledTask(60, 68, 2), new ScheduledTask(56, 64, 1), new ScheduledTask(9, 16, 0), new ScheduledTask(49, 56, 1), new ScheduledTask(61, 68, 3), new ScheduledTask(27, 33, 0), new ScheduledTask(64, 70, 1), new ScheduledTask(22, 27, 0), new ScheduledTask(36, 41, 0)};
        int[] expectedProcessorEndTimes = new int[]{50, 70, 68, 68};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 765;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 41, 0), new ScheduledTask(41, 109, 0), new ScheduledTask(50, 118, 1), new ScheduledTask(109, 232, 0), new ScheduledTask(118, 200, 1), new ScheduledTask(200, 268, 1), new ScheduledTask(232, 355, 0), new ScheduledTask(268, 350, 1), new ScheduledTask(350, 418, 1), new ScheduledTask(355, 382, 0), new ScheduledTask(418, 541, 1), new ScheduledTask(382, 464, 0), new ScheduledTask(464, 519, 0), new ScheduledTask(519, 628, 0), new ScheduledTask(541, 623, 1), new ScheduledTask(628, 765, 0)};
        int[] expectedProcessorEndTimes = new int[]{765, 623};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 656;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 41, 0), new ScheduledTask(41, 109, 0), new ScheduledTask(50, 118, 1), new ScheduledTask(109, 232, 0), new ScheduledTask(118, 200, 1), new ScheduledTask(125, 193, 2), new ScheduledTask(232, 355, 0), new ScheduledTask(238, 320, 1), new ScheduledTask(193, 261, 2), new ScheduledTask(206, 233, 3), new ScheduledTask(261, 384, 2), new ScheduledTask(320, 402, 1), new ScheduledTask(355, 410, 0), new ScheduledTask(410, 519, 0), new ScheduledTask(402, 484, 1), new ScheduledTask(519, 656, 0)};
        int[] expectedProcessorEndTimes = new int[]{656, 484, 384, 233};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 656;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 41, 0), new ScheduledTask(41, 109, 0), new ScheduledTask(50, 118, 1), new ScheduledTask(109, 232, 0), new ScheduledTask(118, 200, 1), new ScheduledTask(125, 193, 2), new ScheduledTask(232, 355, 0), new ScheduledTask(238, 320, 1), new ScheduledTask(193, 261, 2), new ScheduledTask(206, 233, 3), new ScheduledTask(261, 384, 2), new ScheduledTask(320, 402, 1), new ScheduledTask(355, 410, 0), new ScheduledTask(410, 519, 0), new ScheduledTask(402, 484, 1), new ScheduledTask(519, 656, 0)};
        int[] expectedProcessorEndTimes = new int[]{656, 484, 384, 233};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 761;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 90, 0), new ScheduledTask(90, 203, 0), new ScheduledTask(96, 186, 1), new ScheduledTask(220, 310, 1), new ScheduledTask(203, 259, 0), new ScheduledTask(186, 220, 1), new ScheduledTask(349, 462, 0), new ScheduledTask(259, 349, 0), new ScheduledTask(411, 524, 1), new ScheduledTask(310, 411, 1), new ScheduledTask(485, 564, 0), new ScheduledTask(524, 603, 1), new ScheduledTask(462, 485, 0), new ScheduledTask(564, 677, 0), new ScheduledTask(603, 682, 1), new ScheduledTask(682, 761, 1)};
        int[] expectedProcessorEndTimes = new int[]{677, 761};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 677;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 90, 0), new ScheduledTask(90, 203, 0), new ScheduledTask(96, 186, 1), new ScheduledTask(203, 293, 0), new ScheduledTask(206, 262, 1), new ScheduledTask(196, 230, 2), new ScheduledTask(293, 406, 0), new ScheduledTask(262, 352, 1), new ScheduledTask(300, 413, 2), new ScheduledTask(238, 339, 3), new ScheduledTask(406, 485, 0), new ScheduledTask(413, 492, 2), new ScheduledTask(352, 375, 1), new ScheduledTask(485, 598, 0), new ScheduledTask(492, 571, 2), new ScheduledTask(598, 677, 0)};
        int[] expectedProcessorEndTimes = new int[]{677, 375, 571, 339};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 677;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 90, 0), new ScheduledTask(90, 203, 0), new ScheduledTask(96, 186, 1), new ScheduledTask(203, 293, 0), new ScheduledTask(206, 262, 1), new ScheduledTask(196, 230, 2), new ScheduledTask(293, 406, 0), new ScheduledTask(262, 352, 1), new ScheduledTask(300, 413, 2), new ScheduledTask(238, 339, 3), new ScheduledTask(406, 485, 0), new ScheduledTask(413, 492, 2), new ScheduledTask(352, 375, 1), new ScheduledTask(485, 598, 0), new ScheduledTask(492, 571, 2), new ScheduledTask(598, 677, 0)};
        int[] expectedProcessorEndTimes = new int[]{677, 375, 571, 339};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 775;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 139, 0), new ScheduledTask(141, 203, 1), new ScheduledTask(139, 170, 0), new ScheduledTask(216, 293, 0), new ScheduledTask(170, 216, 0), new ScheduledTask(203, 265, 1), new ScheduledTask(339, 493, 0), new ScheduledTask(265, 404, 1), new ScheduledTask(293, 339, 0), new ScheduledTask(493, 632, 0), new ScheduledTask(404, 543, 1), new ScheduledTask(543, 651, 1), new ScheduledTask(632, 709, 0), new ScheduledTask(651, 682, 1), new ScheduledTask(682, 713, 1), new ScheduledTask(713, 775, 1)};
        int[] expectedProcessorEndTimes = new int[]{709, 775};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 710;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 139, 0), new ScheduledTask(139, 201, 0), new ScheduledTask(149, 180, 1), new ScheduledTask(201, 278, 0), new ScheduledTask(180, 226, 1), new ScheduledTask(207, 269, 2), new ScheduledTask(278, 432, 0), new ScheduledTask(269, 408, 2), new ScheduledTask(288, 334, 1), new ScheduledTask(432, 571, 0), new ScheduledTask(408, 547, 2), new ScheduledTask(234, 342, 3), new ScheduledTask(571, 648, 0), new ScheduledTask(436, 467, 1), new ScheduledTask(573, 604, 1), new ScheduledTask(648, 710, 0)};
        int[] expectedProcessorEndTimes = new int[]{710, 604, 547, 342};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 710;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 139, 0), new ScheduledTask(139, 201, 0), new ScheduledTask(149, 180, 1), new ScheduledTask(201, 278, 0), new ScheduledTask(180, 226, 1), new ScheduledTask(207, 269, 2), new ScheduledTask(278, 432, 0), new ScheduledTask(269, 408, 2), new ScheduledTask(288, 334, 1), new ScheduledTask(432, 571, 0), new ScheduledTask(408, 547, 2), new ScheduledTask(234, 342, 3), new ScheduledTask(571, 648, 0), new ScheduledTask(436, 467, 1), new ScheduledTask(573, 604, 1), new ScheduledTask(648, 710, 0)};
        int[] expectedProcessorEndTimes = new int[]{710, 604, 547, 342};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 683;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 38, 0), new ScheduledTask(42, 132, 1), new ScheduledTask(38, 102, 0), new ScheduledTask(132, 247, 1), new ScheduledTask(179, 230, 0), new ScheduledTask(102, 179, 0), new ScheduledTask(230, 358, 0), new ScheduledTask(337, 427, 1), new ScheduledTask(247, 337, 1), new ScheduledTask(427, 504, 1), new ScheduledTask(436, 513, 0), new ScheduledTask(358, 435, 0), new ScheduledTask(504, 581, 1), new ScheduledTask(513, 641, 0), new ScheduledTask(581, 645, 1), new ScheduledTask(645, 683, 1)};
        int[] expectedProcessorEndTimes = new int[]{641, 683};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 581;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 38, 0), new ScheduledTask(38, 128, 0), new ScheduledTask(44, 108, 1), new ScheduledTask(128, 243, 0), new ScheduledTask(131, 182, 2), new ScheduledTask(118, 195, 3), new ScheduledTask(182, 310, 2), new ScheduledTask(248, 338, 3), new ScheduledTask(243, 333, 0), new ScheduledTask(310, 387, 2), new ScheduledTask(338, 415, 3), new ScheduledTask(333, 410, 0), new ScheduledTask(387, 464, 2), new ScheduledTask(415, 543, 3), new ScheduledTask(464, 528, 2), new ScheduledTask(543, 581, 3)};
        int[] expectedProcessorEndTimes = new int[]{410, 108, 528, 581};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 581;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 38, 0), new ScheduledTask(38, 128, 0), new ScheduledTask(44, 108, 1), new ScheduledTask(128, 243, 0), new ScheduledTask(131, 182, 2), new ScheduledTask(118, 195, 3), new ScheduledTask(182, 310, 2), new ScheduledTask(248, 338, 3), new ScheduledTask(243, 333, 0), new ScheduledTask(198, 275, 4), new ScheduledTask(338, 415, 3), new ScheduledTask(333, 410, 0), new ScheduledTask(344, 421, 5), new ScheduledTask(415, 543, 3), new ScheduledTask(421, 485, 5), new ScheduledTask(543, 581, 3)};
        int[] expectedProcessorEndTimes = new int[]{410, 108, 310, 581, 275, 485};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 778;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 46, 0), new ScheduledTask(46, 183, 0), new ScheduledTask(48, 139, 1), new ScheduledTask(139, 261, 1), new ScheduledTask(289, 335, 0), new ScheduledTask(183, 213, 0), new ScheduledTask(335, 426, 0), new ScheduledTask(213, 289, 0), new ScheduledTask(413, 459, 1), new ScheduledTask(261, 413, 1), new ScheduledTask(426, 578, 0), new ScheduledTask(459, 596, 1), new ScheduledTask(578, 669, 0), new ScheduledTask(596, 702, 1), new ScheduledTask(669, 699, 0), new ScheduledTask(702, 778, 1)};
        int[] expectedProcessorEndTimes = new int[]{699, 778};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 654;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 46, 0), new ScheduledTask(46, 183, 0), new ScheduledTask(48, 139, 1), new ScheduledTask(139, 261, 1), new ScheduledTask(183, 229, 0), new ScheduledTask(186, 216, 2), new ScheduledTask(229, 320, 0), new ScheduledTask(216, 292, 2), new ScheduledTask(261, 307, 1), new ScheduledTask(266, 418, 3), new ScheduledTask(320, 472, 0), new ScheduledTask(322, 459, 1), new ScheduledTask(418, 509, 3), new ScheduledTask(472, 578, 0), new ScheduledTask(509, 539, 3), new ScheduledTask(578, 654, 0)};
        int[] expectedProcessorEndTimes = new int[]{654, 459, 292, 539};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 654;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 46, 0), new ScheduledTask(46, 183, 0), new ScheduledTask(48, 139, 1), new ScheduledTask(139, 261, 1), new ScheduledTask(183, 229, 0), new ScheduledTask(186, 216, 2), new ScheduledTask(229, 320, 0), new ScheduledTask(216, 292, 2), new ScheduledTask(261, 307, 1), new ScheduledTask(266, 418, 3), new ScheduledTask(320, 472, 0), new ScheduledTask(322, 459, 1), new ScheduledTask(418, 509, 3), new ScheduledTask(472, 578, 0), new ScheduledTask(509, 539, 3), new ScheduledTask(578, 654, 0)};
        int[] expectedProcessorEndTimes = new int[]{654, 459, 292, 539};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 914;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 134, 0), new ScheduledTask(134, 285, 0), new ScheduledTask(143, 260, 1), new ScheduledTask(294, 428, 1), new ScheduledTask(285, 369, 0), new ScheduledTask(436, 570, 0), new ScheduledTask(260, 294, 1), new ScheduledTask(369, 436, 0), new ScheduledTask(528, 645, 1), new ScheduledTask(428, 478, 1), new ScheduledTask(570, 620, 0), new ScheduledTask(478, 528, 1), new ScheduledTask(620, 737, 0), new ScheduledTask(645, 679, 1), new ScheduledTask(679, 746, 1), new ScheduledTask(746, 914, 1)};
        int[] expectedProcessorEndTimes = new int[]{737, 914};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 888;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 134, 0), new ScheduledTask(134, 285, 0), new ScheduledTask(143, 260, 1), new ScheduledTask(285, 419, 0), new ScheduledTask(295, 379, 1), new ScheduledTask(419, 553, 0), new ScheduledTask(264, 298, 2), new ScheduledTask(379, 446, 1), new ScheduledTask(422, 539, 2), new ScheduledTask(306, 356, 3), new ScheduledTask(553, 603, 0), new ScheduledTask(446, 496, 1), new ScheduledTask(603, 720, 0), new ScheduledTask(558, 592, 1), new ScheduledTask(605, 672, 1), new ScheduledTask(720, 888, 0)};
        int[] expectedProcessorEndTimes = new int[]{888, 672, 539, 356};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 888;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 134, 0), new ScheduledTask(134, 285, 0), new ScheduledTask(143, 260, 1), new ScheduledTask(285, 419, 0), new ScheduledTask(295, 379, 1), new ScheduledTask(419, 553, 0), new ScheduledTask(264, 298, 2), new ScheduledTask(379, 446, 1), new ScheduledTask(422, 539, 2), new ScheduledTask(306, 356, 3), new ScheduledTask(553, 603, 0), new ScheduledTask(446, 496, 1), new ScheduledTask(603, 720, 0), new ScheduledTask(558, 592, 1), new ScheduledTask(605, 672, 1), new ScheduledTask(720, 888, 0)};
        int[] expectedProcessorEndTimes = new int[]{888, 672, 539, 356};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 816;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 85, 0), new ScheduledTask(87, 200, 1), new ScheduledTask(85, 184, 0), new ScheduledTask(200, 342, 1), new ScheduledTask(212, 283, 0), new ScheduledTask(368, 453, 0), new ScheduledTask(184, 212, 0), new ScheduledTask(399, 470, 1), new ScheduledTask(342, 399, 1), new ScheduledTask(283, 368, 0), new ScheduledTask(470, 527, 1), new ScheduledTask(453, 510, 0), new ScheduledTask(510, 553, 0), new ScheduledTask(527, 669, 1), new ScheduledTask(553, 666, 0), new ScheduledTask(674, 816, 1)};
        int[] expectedProcessorEndTimes = new int[]{666, 816};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 772;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 85, 0), new ScheduledTask(85, 198, 0), new ScheduledTask(88, 187, 1), new ScheduledTask(198, 340, 0), new ScheduledTask(207, 278, 1), new ScheduledTask(340, 425, 0), new ScheduledTask(190, 218, 2), new ScheduledTask(345, 416, 1), new ScheduledTask(285, 342, 2), new ScheduledTask(221, 306, 3), new ScheduledTask(425, 482, 0), new ScheduledTask(427, 484, 1), new ScheduledTask(342, 385, 2), new ScheduledTask(488, 630, 0), new ScheduledTask(484, 597, 1), new ScheduledTask(630, 772, 0)};
        int[] expectedProcessorEndTimes = new int[]{772, 597, 385, 306};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 772;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 85, 0), new ScheduledTask(85, 198, 0), new ScheduledTask(88, 187, 1), new ScheduledTask(198, 340, 0), new ScheduledTask(207, 278, 1), new ScheduledTask(340, 425, 0), new ScheduledTask(190, 218, 2), new ScheduledTask(345, 416, 1), new ScheduledTask(285, 342, 2), new ScheduledTask(221, 306, 3), new ScheduledTask(425, 482, 0), new ScheduledTask(427, 484, 1), new ScheduledTask(342, 385, 2), new ScheduledTask(488, 630, 0), new ScheduledTask(484, 597, 1), new ScheduledTask(630, 772, 0)};
        int[] expectedProcessorEndTimes = new int[]{772, 597, 385, 306};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 882;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 38, 0), new ScheduledTask(38, 132, 0), new ScheduledTask(42, 98, 1), new ScheduledTask(188, 319, 0), new ScheduledTask(98, 286, 1), new ScheduledTask(132, 188, 0), new ScheduledTask(342, 455, 1), new ScheduledTask(319, 394, 0), new ScheduledTask(286, 342, 1), new ScheduledTask(455, 624, 1), new ScheduledTask(525, 694, 0), new ScheduledTask(394, 525, 0), new ScheduledTask(624, 812, 1), new ScheduledTask(694, 769, 0), new ScheduledTask(769, 844, 0), new ScheduledTask(844, 882, 0)};
        int[] expectedProcessorEndTimes = new int[]{882, 812};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 771;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 38, 0), new ScheduledTask(38, 132, 0), new ScheduledTask(42, 98, 1), new ScheduledTask(132, 263, 0), new ScheduledTask(98, 286, 1), new ScheduledTask(140, 196, 2), new ScheduledTask(263, 376, 0), new ScheduledTask(273, 348, 2), new ScheduledTask(286, 342, 1), new ScheduledTask(376, 545, 0), new ScheduledTask(289, 458, 3), new ScheduledTask(348, 479, 2), new ScheduledTask(545, 733, 0), new ScheduledTask(458, 533, 3), new ScheduledTask(533, 608, 3), new ScheduledTask(733, 771, 0)};
        int[] expectedProcessorEndTimes = new int[]{771, 342, 479, 608};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 771;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 38, 0), new ScheduledTask(38, 132, 0), new ScheduledTask(42, 98, 1), new ScheduledTask(132, 263, 0), new ScheduledTask(98, 286, 1), new ScheduledTask(140, 196, 2), new ScheduledTask(263, 376, 0), new ScheduledTask(273, 348, 2), new ScheduledTask(286, 342, 1), new ScheduledTask(376, 545, 0), new ScheduledTask(289, 458, 3), new ScheduledTask(348, 479, 2), new ScheduledTask(545, 733, 0), new ScheduledTask(458, 533, 3), new ScheduledTask(533, 608, 3), new ScheduledTask(733, 771, 0)};
        int[] expectedProcessorEndTimes = new int[]{771, 342, 479, 608};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 699;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 55, 0), new ScheduledTask(58, 113, 1), new ScheduledTask(55, 92, 0), new ScheduledTask(147, 220, 0), new ScheduledTask(113, 168, 1), new ScheduledTask(92, 147, 0), new ScheduledTask(312, 458, 0), new ScheduledTask(241, 387, 1), new ScheduledTask(220, 312, 0), new ScheduledTask(168, 241, 1), new ScheduledTask(387, 497, 1), new ScheduledTask(458, 623, 0), new ScheduledTask(497, 552, 1), new ScheduledTask(552, 662, 1), new ScheduledTask(623, 660, 0), new ScheduledTask(662, 699, 1)};
        int[] expectedProcessorEndTimes = new int[]{660, 699};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 568;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 55, 0), new ScheduledTask(55, 110, 0), new ScheduledTask(61, 98, 1), new ScheduledTask(110, 183, 0), new ScheduledTask(120, 175, 1), new ScheduledTask(101, 156, 2), new ScheduledTask(183, 329, 0), new ScheduledTask(175, 321, 1), new ScheduledTask(188, 280, 2), new ScheduledTask(159, 232, 3), new ScheduledTask(280, 390, 2), new ScheduledTask(329, 494, 0), new ScheduledTask(333, 388, 1), new ScheduledTask(396, 506, 2), new ScheduledTask(494, 531, 0), new ScheduledTask(531, 568, 0)};
        int[] expectedProcessorEndTimes = new int[]{568, 388, 506, 232};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 568;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 55, 0), new ScheduledTask(55, 110, 0), new ScheduledTask(61, 98, 1), new ScheduledTask(110, 183, 0), new ScheduledTask(120, 175, 1), new ScheduledTask(101, 156, 2), new ScheduledTask(183, 329, 0), new ScheduledTask(175, 321, 1), new ScheduledTask(188, 280, 2), new ScheduledTask(159, 232, 3), new ScheduledTask(280, 390, 2), new ScheduledTask(329, 494, 0), new ScheduledTask(333, 388, 1), new ScheduledTask(396, 506, 2), new ScheduledTask(494, 531, 0), new ScheduledTask(531, 568, 0)};
        int[] expectedProcessorEndTimes = new int[]{568, 388, 506, 232};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1020;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 148, 0), new ScheduledTask(152, 316, 1), new ScheduledTask(148, 263, 0), new ScheduledTask(316, 447, 1), new ScheduledTask(378, 477, 0), new ScheduledTask(477, 625, 0), new ScheduledTask(263, 378, 0), new ScheduledTask(496, 562, 1), new ScheduledTask(625, 789, 0), new ScheduledTask(562, 628, 1), new ScheduledTask(447, 496, 1), new ScheduledTask(701, 832, 1), new ScheduledTask(635, 701, 1), new ScheduledTask(789, 937, 0), new ScheduledTask(832, 931, 1), new ScheduledTask(938, 1020, 0)};
        int[] expectedProcessorEndTimes = new int[]{1020, 931};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 985;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 148, 0), new ScheduledTask(148, 312, 0), new ScheduledTask(155, 270, 1), new ScheduledTask(312, 443, 0), new ScheduledTask(321, 420, 1), new ScheduledTask(443, 591, 0), new ScheduledTask(277, 392, 2), new ScheduledTask(420, 486, 1), new ScheduledTask(591, 755, 0), new ScheduledTask(453, 519, 2), new ScheduledTask(399, 448, 3), new ScheduledTask(519, 650, 2), new ScheduledTask(601, 667, 1), new ScheduledTask(755, 903, 0), new ScheduledTask(667, 766, 1), new ScheduledTask(903, 985, 0)};
        int[] expectedProcessorEndTimes = new int[]{985, 766, 650, 448};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 985;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 148, 0), new ScheduledTask(148, 312, 0), new ScheduledTask(155, 270, 1), new ScheduledTask(312, 443, 0), new ScheduledTask(321, 420, 1), new ScheduledTask(443, 591, 0), new ScheduledTask(277, 392, 2), new ScheduledTask(420, 486, 1), new ScheduledTask(591, 755, 0), new ScheduledTask(453, 519, 2), new ScheduledTask(399, 448, 3), new ScheduledTask(519, 650, 2), new ScheduledTask(601, 667, 1), new ScheduledTask(755, 903, 0), new ScheduledTask(667, 766, 1), new ScheduledTask(903, 985, 0)};
        int[] expectedProcessorEndTimes = new int[]{985, 766, 650, 448};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot97_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.97_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(12, 24, 0), new ScheduledTask(14, 17, 1), new ScheduledTask(24, 29, 0), new ScheduledTask(29, 32, 0), new ScheduledTask(17, 20, 1), new ScheduledTask(38, 50, 0), new ScheduledTask(36, 44, 1), new ScheduledTask(32, 38, 0), new ScheduledTask(50, 62, 0), new ScheduledTask(20, 23, 1), new ScheduledTask(44, 49, 1), new ScheduledTask(49, 53, 1), new ScheduledTask(53, 65, 1), new ScheduledTask(62, 71, 0), new ScheduledTask(71, 84, 0)};
        int[] expectedProcessorEndTimes = new int[]{84, 65};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot97_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.97_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 83;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(12, 24, 0), new ScheduledTask(14, 17, 1), new ScheduledTask(24, 29, 0), new ScheduledTask(29, 32, 0), new ScheduledTask(17, 20, 1), new ScheduledTask(33, 45, 1), new ScheduledTask(32, 40, 0), new ScheduledTask(40, 46, 2), new ScheduledTask(47, 59, 3), new ScheduledTask(22, 25, 3), new ScheduledTask(48, 53, 1), new ScheduledTask(46, 50, 2), new ScheduledTask(53, 65, 1), new ScheduledTask(59, 68, 3), new ScheduledTask(70, 83, 3)};
        int[] expectedProcessorEndTimes = new int[]{40, 65, 50, 83};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot97_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.97_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 83;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(12, 24, 0), new ScheduledTask(14, 17, 1), new ScheduledTask(24, 29, 0), new ScheduledTask(29, 32, 0), new ScheduledTask(17, 20, 1), new ScheduledTask(33, 45, 2), new ScheduledTask(36, 44, 3), new ScheduledTask(40, 46, 4), new ScheduledTask(49, 61, 5), new ScheduledTask(22, 25, 5), new ScheduledTask(48, 53, 3), new ScheduledTask(46, 50, 4), new ScheduledTask(53, 65, 3), new ScheduledTask(61, 70, 5), new ScheduledTask(70, 83, 5)};
        int[] expectedProcessorEndTimes = new int[]{32, 20, 45, 65, 50, 83};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot99_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.99_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 95;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(14, 27, 0), new ScheduledTask(19, 24, 1), new ScheduledTask(33, 44, 1), new ScheduledTask(24, 32, 1), new ScheduledTask(27, 32, 0), new ScheduledTask(32, 45, 0), new ScheduledTask(51, 62, 0), new ScheduledTask(45, 51, 0), new ScheduledTask(44, 53, 1), new ScheduledTask(62, 73, 0), new ScheduledTask(54, 62, 1), new ScheduledTask(64, 67, 1), new ScheduledTask(67, 83, 1), new ScheduledTask(74, 87, 0), new ScheduledTask(89, 95, 0)};
        int[] expectedProcessorEndTimes = new int[]{95, 83};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot99_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.99_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(14, 27, 0), new ScheduledTask(19, 24, 1), new ScheduledTask(27, 38, 0), new ScheduledTask(24, 32, 1), new ScheduledTask(33, 38, 1), new ScheduledTask(38, 51, 1), new ScheduledTask(38, 49, 0), new ScheduledTask(42, 48, 2), new ScheduledTask(45, 54, 3), new ScheduledTask(53, 64, 0), new ScheduledTask(59, 67, 1), new ScheduledTask(54, 57, 3), new ScheduledTask(67, 83, 1), new ScheduledTask(64, 77, 0), new ScheduledTask(86, 92, 1)};
        int[] expectedProcessorEndTimes = new int[]{77, 92, 48, 57};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot99_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.99_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(14, 27, 0), new ScheduledTask(19, 24, 1), new ScheduledTask(27, 38, 0), new ScheduledTask(24, 32, 1), new ScheduledTask(33, 38, 1), new ScheduledTask(38, 51, 1), new ScheduledTask(38, 49, 0), new ScheduledTask(42, 48, 2), new ScheduledTask(45, 54, 3), new ScheduledTask(53, 64, 0), new ScheduledTask(59, 67, 1), new ScheduledTask(54, 57, 3), new ScheduledTask(67, 83, 1), new ScheduledTask(64, 77, 0), new ScheduledTask(86, 92, 1)};
        int[] expectedProcessorEndTimes = new int[]{77, 92, 48, 57};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot99_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.99_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 75;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 16, 0), new ScheduledTask(8, 13, 1), new ScheduledTask(16, 28, 0), new ScheduledTask(13, 25, 1), new ScheduledTask(25, 31, 1), new ScheduledTask(34, 48, 0), new ScheduledTask(40, 46, 1), new ScheduledTask(31, 40, 1), new ScheduledTask(28, 34, 0), new ScheduledTask(48, 62, 0), new ScheduledTask(46, 61, 1), new ScheduledTask(61, 64, 1), new ScheduledTask(67, 70, 1), new ScheduledTask(64, 67, 1), new ScheduledTask(70, 75, 1)};
        int[] expectedProcessorEndTimes = new int[]{62, 75};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot99_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.99_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 16, 0), new ScheduledTask(8, 13, 1), new ScheduledTask(16, 28, 0), new ScheduledTask(13, 25, 1), new ScheduledTask(21, 27, 2), new ScheduledTask(29, 43, 0), new ScheduledTask(36, 42, 3), new ScheduledTask(27, 36, 2), new ScheduledTask(28, 34, 3), new ScheduledTask(43, 57, 0), new ScheduledTask(42, 57, 3), new ScheduledTask(57, 60, 3), new ScheduledTask(63, 66, 3), new ScheduledTask(60, 63, 3), new ScheduledTask(66, 71, 3)};
        int[] expectedProcessorEndTimes = new int[]{57, 25, 36, 71};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot99_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.99_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 16, 0), new ScheduledTask(8, 13, 1), new ScheduledTask(16, 28, 0), new ScheduledTask(13, 25, 1), new ScheduledTask(21, 27, 2), new ScheduledTask(29, 43, 0), new ScheduledTask(36, 42, 3), new ScheduledTask(27, 36, 2), new ScheduledTask(28, 34, 3), new ScheduledTask(43, 57, 0), new ScheduledTask(42, 57, 3), new ScheduledTask(57, 60, 3), new ScheduledTask(63, 66, 3), new ScheduledTask(60, 63, 3), new ScheduledTask(66, 71, 3)};
        int[] expectedProcessorEndTimes = new int[]{57, 25, 36, 71};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot99_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.99_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 87;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 8, 0), new ScheduledTask(7, 10, 1), new ScheduledTask(20, 35, 0), new ScheduledTask(10, 21, 1), new ScheduledTask(8, 20, 0), new ScheduledTask(41, 56, 1), new ScheduledTask(35, 50, 0), new ScheduledTask(50, 64, 0), new ScheduledTask(24, 38, 1), new ScheduledTask(56, 65, 1), new ScheduledTask(65, 70, 1), new ScheduledTask(64, 69, 0), new ScheduledTask(70, 79, 1), new ScheduledTask(69, 74, 0), new ScheduledTask(81, 87, 1)};
        int[] expectedProcessorEndTimes = new int[]{74, 87};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot99_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.99_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 8, 0), new ScheduledTask(8, 11, 0), new ScheduledTask(11, 26, 0), new ScheduledTask(19, 30, 1), new ScheduledTask(15, 27, 2), new ScheduledTask(33, 48, 3), new ScheduledTask(29, 44, 0), new ScheduledTask(30, 44, 1), new ScheduledTask(27, 41, 2), new ScheduledTask(49, 58, 3), new ScheduledTask(58, 63, 3), new ScheduledTask(52, 57, 2), new ScheduledTask(63, 72, 3), new ScheduledTask(60, 65, 2), new ScheduledTask(72, 78, 3)};
        int[] expectedProcessorEndTimes = new int[]{44, 44, 65, 78};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot99_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.99_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 8, 0), new ScheduledTask(8, 11, 0), new ScheduledTask(11, 26, 0), new ScheduledTask(19, 30, 1), new ScheduledTask(15, 27, 2), new ScheduledTask(33, 48, 2), new ScheduledTask(29, 44, 0), new ScheduledTask(34, 48, 3), new ScheduledTask(31, 45, 4), new ScheduledTask(49, 58, 2), new ScheduledTask(53, 58, 5), new ScheduledTask(50, 55, 3), new ScheduledTask(63, 72, 2), new ScheduledTask(60, 65, 3), new ScheduledTask(72, 78, 2)};
        int[] expectedProcessorEndTimes = new int[]{44, 30, 78, 65, 45, 58};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot99_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.99_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 96;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(19, 32, 1), new ScheduledTask(12, 18, 0), new ScheduledTask(18, 30, 0), new ScheduledTask(32, 44, 1), new ScheduledTask(39, 46, 0), new ScheduledTask(30, 39, 0), new ScheduledTask(44, 50, 1), new ScheduledTask(46, 59, 0), new ScheduledTask(50, 56, 1), new ScheduledTask(56, 70, 1), new ScheduledTask(60, 74, 0), new ScheduledTask(70, 82, 1), new ScheduledTask(78, 87, 0), new ScheduledTask(82, 89, 1), new ScheduledTask(92, 96, 0)};
        int[] expectedProcessorEndTimes = new int[]{96, 89};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot99_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.99_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(18, 31, 0), new ScheduledTask(12, 18, 0), new ScheduledTask(28, 40, 1), new ScheduledTask(31, 43, 0), new ScheduledTask(36, 43, 2), new ScheduledTask(45, 54, 3), new ScheduledTask(50, 56, 1), new ScheduledTask(43, 56, 2), new ScheduledTask(46, 52, 0), new ScheduledTask(63, 77, 3), new ScheduledTask(56, 70, 1), new ScheduledTask(57, 69, 2), new ScheduledTask(77, 86, 3), new ScheduledTask(74, 81, 1), new ScheduledTask(86, 90, 3)};
        int[] expectedProcessorEndTimes = new int[]{52, 81, 69, 90};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot99_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.99_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(18, 31, 0), new ScheduledTask(12, 18, 0), new ScheduledTask(28, 40, 1), new ScheduledTask(31, 43, 0), new ScheduledTask(36, 43, 2), new ScheduledTask(40, 49, 1), new ScheduledTask(50, 56, 2), new ScheduledTask(46, 59, 3), new ScheduledTask(46, 52, 0), new ScheduledTask(63, 77, 4), new ScheduledTask(56, 70, 2), new ScheduledTask(59, 71, 3), new ScheduledTask(77, 86, 4), new ScheduledTask(76, 83, 2), new ScheduledTask(86, 90, 4)};
        int[] expectedProcessorEndTimes = new int[]{52, 49, 83, 71, 90};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 99;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(10, 14, 1), new ScheduledTask(6, 18, 0), new ScheduledTask(14, 33, 1), new ScheduledTask(18, 24, 0), new ScheduledTask(24, 28, 0), new ScheduledTask(28, 43, 0), new ScheduledTask(39, 54, 1), new ScheduledTask(33, 39, 1), new ScheduledTask(43, 51, 0), new ScheduledTask(63, 73, 0), new ScheduledTask(51, 63, 0), new ScheduledTask(54, 71, 1), new ScheduledTask(73, 85, 0), new ScheduledTask(71, 77, 1), new ScheduledTask(85, 99, 0)};
        int[] expectedProcessorEndTimes = new int[]{99, 77};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 96;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 10, 0), new ScheduledTask(10, 22, 1), new ScheduledTask(10, 29, 0), new ScheduledTask(26, 32, 2), new ScheduledTask(22, 26, 1), new ScheduledTask(32, 47, 2), new ScheduledTask(39, 54, 3), new ScheduledTask(29, 35, 0), new ScheduledTask(32, 40, 1), new ScheduledTask(43, 53, 1), new ScheduledTask(48, 60, 2), new ScheduledTask(54, 71, 3), new ScheduledTask(62, 74, 2), new ScheduledTask(71, 77, 3), new ScheduledTask(82, 96, 3)};
        int[] expectedProcessorEndTimes = new int[]{35, 53, 74, 96};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 96;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 10, 0), new ScheduledTask(10, 22, 1), new ScheduledTask(10, 29, 0), new ScheduledTask(26, 32, 2), new ScheduledTask(22, 26, 1), new ScheduledTask(32, 47, 2), new ScheduledTask(39, 54, 3), new ScheduledTask(37, 43, 4), new ScheduledTask(32, 40, 1), new ScheduledTask(44, 54, 4), new ScheduledTask(48, 60, 2), new ScheduledTask(54, 71, 3), new ScheduledTask(63, 75, 2), new ScheduledTask(76, 82, 2), new ScheduledTask(82, 96, 2)};
        int[] expectedProcessorEndTimes = new int[]{29, 40, 96, 71, 54};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 86;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 21, 0), new ScheduledTask(9, 12, 1), new ScheduledTask(23, 33, 1), new ScheduledTask(12, 16, 1), new ScheduledTask(37, 44, 1), new ScheduledTask(21, 28, 0), new ScheduledTask(35, 47, 0), new ScheduledTask(28, 35, 0), new ScheduledTask(33, 37, 1), new ScheduledTask(44, 54, 1), new ScheduledTask(54, 65, 1), new ScheduledTask(47, 57, 0), new ScheduledTask(57, 65, 0), new ScheduledTask(65, 72, 1), new ScheduledTask(74, 86, 1)};
        int[] expectedProcessorEndTimes = new int[]{65, 86};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 21, 0), new ScheduledTask(9, 12, 1), new ScheduledTask(21, 31, 0), new ScheduledTask(17, 21, 2), new ScheduledTask(31, 38, 0), new ScheduledTask(24, 31, 3), new ScheduledTask(21, 33, 2), new ScheduledTask(31, 38, 3), new ScheduledTask(40, 44, 1), new ScheduledTask(47, 57, 0), new ScheduledTask(47, 58, 3), new ScheduledTask(44, 54, 1), new ScheduledTask(57, 65, 0), new ScheduledTask(65, 72, 0), new ScheduledTask(72, 84, 0)};
        int[] expectedProcessorEndTimes = new int[]{84, 54, 33, 58};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 21, 0), new ScheduledTask(9, 12, 1), new ScheduledTask(21, 31, 0), new ScheduledTask(17, 21, 2), new ScheduledTask(31, 38, 0), new ScheduledTask(24, 31, 3), new ScheduledTask(21, 33, 2), new ScheduledTask(31, 38, 3), new ScheduledTask(40, 44, 3), new ScheduledTask(47, 57, 0), new ScheduledTask(47, 58, 4), new ScheduledTask(44, 54, 3), new ScheduledTask(57, 65, 0), new ScheduledTask(65, 72, 0), new ScheduledTask(72, 84, 0)};
        int[] expectedProcessorEndTimes = new int[]{84, 12, 33, 54, 58};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(14, 29, 0), new ScheduledTask(18, 30, 1), new ScheduledTask(30, 42, 1), new ScheduledTask(39, 50, 0), new ScheduledTask(29, 37, 0), new ScheduledTask(50, 58, 0), new ScheduledTask(53, 58, 1), new ScheduledTask(48, 53, 1), new ScheduledTask(42, 48, 1), new ScheduledTask(58, 64, 0), new ScheduledTask(58, 67, 1), new ScheduledTask(64, 72, 0), new ScheduledTask(75, 81, 0), new ScheduledTask(72, 75, 0), new ScheduledTask(81, 90, 0)};
        int[] expectedProcessorEndTimes = new int[]{90, 67};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 89;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(20, 35, 1), new ScheduledTask(14, 26, 0), new ScheduledTask(26, 38, 0), new ScheduledTask(35, 46, 1), new ScheduledTask(45, 53, 2), new ScheduledTask(46, 54, 1), new ScheduledTask(53, 58, 2), new ScheduledTask(40, 45, 3), new ScheduledTask(57, 63, 3), new ScheduledTask(54, 60, 1), new ScheduledTask(65, 74, 3), new ScheduledTask(61, 69, 2), new ScheduledTask(74, 80, 3), new ScheduledTask(70, 73, 2), new ScheduledTask(80, 89, 3)};
        int[] expectedProcessorEndTimes = new int[]{38, 60, 73, 89};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 89;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(20, 35, 1), new ScheduledTask(14, 26, 0), new ScheduledTask(26, 38, 0), new ScheduledTask(35, 46, 1), new ScheduledTask(45, 53, 0), new ScheduledTask(46, 54, 1), new ScheduledTask(53, 58, 0), new ScheduledTask(40, 45, 2), new ScheduledTask(57, 63, 3), new ScheduledTask(54, 60, 1), new ScheduledTask(65, 74, 3), new ScheduledTask(61, 69, 0), new ScheduledTask(74, 80, 3), new ScheduledTask(70, 73, 0), new ScheduledTask(80, 89, 3)};
        int[] expectedProcessorEndTimes = new int[]{73, 60, 45, 89};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_1dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_1.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 89;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 10, 0), new ScheduledTask(11, 14, 1), new ScheduledTask(10, 24, 0), new ScheduledTask(14, 26, 1), new ScheduledTask(24, 27, 0), new ScheduledTask(29, 36, 1), new ScheduledTask(26, 29, 1), new ScheduledTask(33, 43, 0), new ScheduledTask(30, 33, 0), new ScheduledTask(48, 63, 1), new ScheduledTask(36, 48, 1), new ScheduledTask(43, 60, 0), new ScheduledTask(63, 72, 1), new ScheduledTask(60, 65, 0), new ScheduledTask(72, 89, 1)};
        int[] expectedProcessorEndTimes = new int[]{65, 89};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_1dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_1.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 10, 0), new ScheduledTask(11, 14, 1), new ScheduledTask(10, 24, 0), new ScheduledTask(16, 28, 2), new ScheduledTask(14, 17, 1), new ScheduledTask(27, 34, 1), new ScheduledTask(35, 38, 3), new ScheduledTask(24, 34, 0), new ScheduledTask(28, 31, 2), new ScheduledTask(38, 53, 3), new ScheduledTask(34, 46, 1), new ScheduledTask(38, 55, 2), new ScheduledTask(56, 65, 3), new ScheduledTask(55, 60, 2), new ScheduledTask(65, 82, 3)};
        int[] expectedProcessorEndTimes = new int[]{34, 46, 60, 82};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_1dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_1.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 10, 0), new ScheduledTask(11, 14, 1), new ScheduledTask(10, 24, 0), new ScheduledTask(16, 28, 2), new ScheduledTask(14, 17, 1), new ScheduledTask(27, 34, 3), new ScheduledTask(35, 38, 4), new ScheduledTask(24, 34, 0), new ScheduledTask(28, 31, 2), new ScheduledTask(38, 53, 4), new ScheduledTask(34, 46, 3), new ScheduledTask(38, 55, 5), new ScheduledTask(56, 65, 4), new ScheduledTask(55, 60, 5), new ScheduledTask(65, 82, 4)};
        int[] expectedProcessorEndTimes = new int[]{34, 17, 31, 46, 82, 60};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 14, 0), new ScheduledTask(8, 13, 1), new ScheduledTask(17, 26, 0), new ScheduledTask(22, 31, 1), new ScheduledTask(13, 22, 1), new ScheduledTask(26, 41, 0), new ScheduledTask(34, 49, 1), new ScheduledTask(44, 52, 0), new ScheduledTask(52, 55, 0), new ScheduledTask(41, 44, 0), new ScheduledTask(49, 54, 1), new ScheduledTask(54, 69, 1), new ScheduledTask(56, 71, 0), new ScheduledTask(71, 74, 0), new ScheduledTask(74, 80, 0)};
        int[] expectedProcessorEndTimes = new int[]{80, 69};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(8, 17, 1), new ScheduledTask(8, 13, 2), new ScheduledTask(17, 26, 1), new ScheduledTask(23, 32, 2), new ScheduledTask(13, 22, 2), new ScheduledTask(26, 41, 1), new ScheduledTask(34, 49, 2), new ScheduledTask(40, 48, 3), new ScheduledTask(48, 51, 3), new ScheduledTask(37, 40, 3), new ScheduledTask(49, 54, 2), new ScheduledTask(54, 69, 2), new ScheduledTask(56, 71, 3), new ScheduledTask(71, 74, 3), new ScheduledTask(74, 80, 3)};
        int[] expectedProcessorEndTimes = new int[]{5, 41, 69, 80};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(8, 17, 1), new ScheduledTask(5, 10, 0), new ScheduledTask(17, 26, 1), new ScheduledTask(23, 32, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(26, 41, 1), new ScheduledTask(34, 49, 0), new ScheduledTask(26, 34, 2), new ScheduledTask(47, 50, 3), new ScheduledTask(37, 40, 4), new ScheduledTask(49, 54, 0), new ScheduledTask(54, 69, 0), new ScheduledTask(56, 71, 3), new ScheduledTask(71, 74, 3), new ScheduledTask(74, 80, 3)};
        int[] expectedProcessorEndTimes = new int[]{69, 41, 34, 80, 40};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 93;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 14, 0), new ScheduledTask(14, 18, 0), new ScheduledTask(18, 26, 0), new ScheduledTask(26, 35, 0), new ScheduledTask(35, 43, 0), new ScheduledTask(43, 45, 0), new ScheduledTask(45, 50, 0), new ScheduledTask(50, 60, 0), new ScheduledTask(60, 69, 0), new ScheduledTask(69, 73, 0), new ScheduledTask(73, 80, 0), new ScheduledTask(80, 82, 0), new ScheduledTask(82, 86, 0), new ScheduledTask(86, 91, 0), new ScheduledTask(91, 93, 0)};
        int[] expectedProcessorEndTimes = new int[]{93};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 93;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 14, 0), new ScheduledTask(14, 18, 0), new ScheduledTask(18, 26, 0), new ScheduledTask(26, 35, 0), new ScheduledTask(35, 43, 0), new ScheduledTask(43, 45, 0), new ScheduledTask(45, 50, 0), new ScheduledTask(50, 60, 0), new ScheduledTask(60, 69, 0), new ScheduledTask(69, 73, 0), new ScheduledTask(73, 80, 0), new ScheduledTask(80, 82, 0), new ScheduledTask(82, 86, 0), new ScheduledTask(86, 91, 0), new ScheduledTask(91, 93, 0)};
        int[] expectedProcessorEndTimes = new int[]{93};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 93;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 14, 0), new ScheduledTask(14, 18, 0), new ScheduledTask(18, 26, 0), new ScheduledTask(26, 35, 0), new ScheduledTask(35, 43, 0), new ScheduledTask(43, 45, 0), new ScheduledTask(45, 50, 0), new ScheduledTask(50, 60, 0), new ScheduledTask(60, 69, 0), new ScheduledTask(69, 73, 0), new ScheduledTask(73, 80, 0), new ScheduledTask(80, 82, 0), new ScheduledTask(82, 86, 0), new ScheduledTask(86, 91, 0), new ScheduledTask(91, 93, 0)};
        int[] expectedProcessorEndTimes = new int[]{93};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 98;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 9, 0), new ScheduledTask(9, 17, 0), new ScheduledTask(17, 25, 0), new ScheduledTask(25, 30, 0), new ScheduledTask(30, 34, 0), new ScheduledTask(34, 43, 0), new ScheduledTask(43, 49, 0), new ScheduledTask(49, 54, 0), new ScheduledTask(54, 63, 0), new ScheduledTask(63, 66, 0), new ScheduledTask(66, 69, 0), new ScheduledTask(69, 78, 0), new ScheduledTask(78, 87, 0), new ScheduledTask(87, 93, 0), new ScheduledTask(93, 98, 0)};
        int[] expectedProcessorEndTimes = new int[]{98};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 98;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 9, 0), new ScheduledTask(9, 17, 0), new ScheduledTask(17, 25, 0), new ScheduledTask(25, 30, 0), new ScheduledTask(30, 34, 0), new ScheduledTask(34, 43, 0), new ScheduledTask(43, 49, 0), new ScheduledTask(49, 54, 0), new ScheduledTask(54, 63, 0), new ScheduledTask(63, 66, 0), new ScheduledTask(66, 69, 0), new ScheduledTask(69, 78, 0), new ScheduledTask(78, 87, 0), new ScheduledTask(87, 93, 0), new ScheduledTask(93, 98, 0)};
        int[] expectedProcessorEndTimes = new int[]{98};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 98;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 9, 0), new ScheduledTask(9, 17, 0), new ScheduledTask(17, 25, 0), new ScheduledTask(25, 30, 0), new ScheduledTask(30, 34, 0), new ScheduledTask(34, 43, 0), new ScheduledTask(43, 49, 0), new ScheduledTask(49, 54, 0), new ScheduledTask(54, 63, 0), new ScheduledTask(63, 66, 0), new ScheduledTask(66, 69, 0), new ScheduledTask(69, 78, 0), new ScheduledTask(78, 87, 0), new ScheduledTask(87, 93, 0), new ScheduledTask(93, 98, 0)};
        int[] expectedProcessorEndTimes = new int[]{98};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.00_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 105;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 18, 0), new ScheduledTask(18, 20, 0), new ScheduledTask(20, 26, 0), new ScheduledTask(26, 32, 0), new ScheduledTask(32, 41, 0), new ScheduledTask(41, 44, 0), new ScheduledTask(44, 54, 0), new ScheduledTask(54, 60, 0), new ScheduledTask(60, 67, 0), new ScheduledTask(67, 77, 0), new ScheduledTask(77, 82, 0), new ScheduledTask(82, 92, 0), new ScheduledTask(92, 96, 0), new ScheduledTask(96, 103, 0), new ScheduledTask(103, 105, 0)};
        int[] expectedProcessorEndTimes = new int[]{105};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot00_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.00_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 105;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 18, 0), new ScheduledTask(18, 20, 0), new ScheduledTask(20, 26, 0), new ScheduledTask(26, 32, 0), new ScheduledTask(32, 41, 0), new ScheduledTask(41, 44, 0), new ScheduledTask(44, 54, 0), new ScheduledTask(54, 60, 0), new ScheduledTask(60, 67, 0), new ScheduledTask(67, 77, 0), new ScheduledTask(77, 82, 0), new ScheduledTask(82, 92, 0), new ScheduledTask(92, 96, 0), new ScheduledTask(96, 103, 0), new ScheduledTask(103, 105, 0)};
        int[] expectedProcessorEndTimes = new int[]{105};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot00_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.00_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 105;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 18, 0), new ScheduledTask(18, 20, 0), new ScheduledTask(20, 26, 0), new ScheduledTask(26, 32, 0), new ScheduledTask(32, 41, 0), new ScheduledTask(41, 44, 0), new ScheduledTask(44, 54, 0), new ScheduledTask(54, 60, 0), new ScheduledTask(60, 67, 0), new ScheduledTask(67, 77, 0), new ScheduledTask(77, 82, 0), new ScheduledTask(82, 92, 0), new ScheduledTask(92, 96, 0), new ScheduledTask(96, 103, 0), new ScheduledTask(103, 105, 0)};
        int[] expectedProcessorEndTimes = new int[]{105};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 93;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 9, 0), new ScheduledTask(9, 13, 0), new ScheduledTask(13, 22, 0), new ScheduledTask(22, 26, 0), new ScheduledTask(26, 36, 0), new ScheduledTask(36, 38, 0), new ScheduledTask(38, 42, 0), new ScheduledTask(42, 48, 0), new ScheduledTask(48, 54, 0), new ScheduledTask(54, 64, 0), new ScheduledTask(64, 66, 0), new ScheduledTask(66, 69, 0), new ScheduledTask(69, 74, 0), new ScheduledTask(74, 83, 0), new ScheduledTask(83, 93, 0)};
        int[] expectedProcessorEndTimes = new int[]{93};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 93;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 9, 0), new ScheduledTask(9, 13, 0), new ScheduledTask(13, 22, 0), new ScheduledTask(22, 26, 0), new ScheduledTask(26, 36, 0), new ScheduledTask(36, 38, 0), new ScheduledTask(38, 42, 0), new ScheduledTask(42, 48, 0), new ScheduledTask(48, 54, 0), new ScheduledTask(54, 64, 0), new ScheduledTask(64, 66, 0), new ScheduledTask(66, 69, 0), new ScheduledTask(69, 74, 0), new ScheduledTask(74, 83, 0), new ScheduledTask(83, 93, 0)};
        int[] expectedProcessorEndTimes = new int[]{93};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 93;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 9, 0), new ScheduledTask(9, 13, 0), new ScheduledTask(13, 22, 0), new ScheduledTask(22, 26, 0), new ScheduledTask(26, 36, 0), new ScheduledTask(36, 38, 0), new ScheduledTask(38, 42, 0), new ScheduledTask(42, 48, 0), new ScheduledTask(48, 54, 0), new ScheduledTask(54, 64, 0), new ScheduledTask(64, 66, 0), new ScheduledTask(66, 69, 0), new ScheduledTask(69, 74, 0), new ScheduledTask(74, 83, 0), new ScheduledTask(83, 93, 0)};
        int[] expectedProcessorEndTimes = new int[]{93};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(19, 23, 0), new ScheduledTask(9, 19, 0), new ScheduledTask(23, 33, 0), new ScheduledTask(33, 37, 0), new ScheduledTask(41, 44, 1), new ScheduledTask(37, 43, 0), new ScheduledTask(50, 55, 1), new ScheduledTask(44, 50, 1), new ScheduledTask(43, 49, 0), new ScheduledTask(62, 69, 1), new ScheduledTask(55, 62, 1), new ScheduledTask(49, 51, 0), new ScheduledTask(69, 76, 1), new ScheduledTask(76, 82, 1), new ScheduledTask(82, 84, 1)};
        int[] expectedProcessorEndTimes = new int[]{51, 84};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(19, 23, 0), new ScheduledTask(9, 19, 0), new ScheduledTask(23, 33, 0), new ScheduledTask(33, 37, 0), new ScheduledTask(41, 44, 1), new ScheduledTask(37, 43, 0), new ScheduledTask(50, 55, 1), new ScheduledTask(44, 50, 1), new ScheduledTask(43, 49, 0), new ScheduledTask(62, 69, 1), new ScheduledTask(55, 62, 1), new ScheduledTask(49, 51, 0), new ScheduledTask(69, 76, 1), new ScheduledTask(76, 82, 1), new ScheduledTask(82, 84, 1)};
        int[] expectedProcessorEndTimes = new int[]{51, 84};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(19, 23, 0), new ScheduledTask(9, 19, 0), new ScheduledTask(23, 33, 0), new ScheduledTask(33, 37, 0), new ScheduledTask(41, 44, 1), new ScheduledTask(37, 43, 0), new ScheduledTask(50, 55, 1), new ScheduledTask(44, 50, 1), new ScheduledTask(43, 49, 0), new ScheduledTask(62, 69, 1), new ScheduledTask(55, 62, 1), new ScheduledTask(49, 51, 0), new ScheduledTask(69, 76, 1), new ScheduledTask(76, 82, 1), new ScheduledTask(82, 84, 1)};
        int[] expectedProcessorEndTimes = new int[]{51, 84};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot03_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.03_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 9, 0), new ScheduledTask(15, 20, 0), new ScheduledTask(29, 37, 0), new ScheduledTask(20, 26, 0), new ScheduledTask(9, 15, 0), new ScheduledTask(49, 59, 0), new ScheduledTask(26, 29, 0), new ScheduledTask(37, 47, 0), new ScheduledTask(59, 67, 0), new ScheduledTask(40, 47, 1), new ScheduledTask(47, 49, 0), new ScheduledTask(47, 54, 1), new ScheduledTask(67, 76, 0), new ScheduledTask(76, 79, 0), new ScheduledTask(79, 82, 0)};
        int[] expectedProcessorEndTimes = new int[]{82, 54};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot03_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.03_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 9, 0), new ScheduledTask(15, 20, 0), new ScheduledTask(29, 37, 0), new ScheduledTask(20, 26, 0), new ScheduledTask(9, 15, 0), new ScheduledTask(49, 59, 0), new ScheduledTask(26, 29, 0), new ScheduledTask(37, 47, 0), new ScheduledTask(59, 67, 0), new ScheduledTask(40, 47, 1), new ScheduledTask(47, 49, 0), new ScheduledTask(47, 54, 1), new ScheduledTask(67, 76, 0), new ScheduledTask(76, 79, 0), new ScheduledTask(79, 82, 0)};
        int[] expectedProcessorEndTimes = new int[]{82, 54};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot03_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.03_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 9, 0), new ScheduledTask(15, 20, 0), new ScheduledTask(29, 37, 0), new ScheduledTask(20, 26, 0), new ScheduledTask(9, 15, 0), new ScheduledTask(49, 59, 0), new ScheduledTask(26, 29, 0), new ScheduledTask(37, 47, 0), new ScheduledTask(59, 67, 0), new ScheduledTask(40, 47, 1), new ScheduledTask(47, 49, 0), new ScheduledTask(47, 54, 1), new ScheduledTask(67, 76, 0), new ScheduledTask(76, 79, 0), new ScheduledTask(79, 82, 0)};
        int[] expectedProcessorEndTimes = new int[]{82, 54};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot03_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.03_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 104;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 15, 0), new ScheduledTask(15, 23, 0), new ScheduledTask(23, 32, 0), new ScheduledTask(32, 37, 0), new ScheduledTask(37, 43, 0), new ScheduledTask(43, 46, 0), new ScheduledTask(46, 54, 0), new ScheduledTask(54, 64, 0), new ScheduledTask(64, 70, 0), new ScheduledTask(70, 73, 0), new ScheduledTask(73, 76, 0), new ScheduledTask(76, 81, 0), new ScheduledTask(81, 87, 0), new ScheduledTask(87, 96, 0), new ScheduledTask(96, 104, 0)};
        int[] expectedProcessorEndTimes = new int[]{104};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot03_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.03_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 104;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 15, 0), new ScheduledTask(15, 23, 0), new ScheduledTask(23, 32, 0), new ScheduledTask(32, 37, 0), new ScheduledTask(37, 43, 0), new ScheduledTask(43, 46, 0), new ScheduledTask(46, 54, 0), new ScheduledTask(54, 64, 0), new ScheduledTask(64, 70, 0), new ScheduledTask(70, 73, 0), new ScheduledTask(73, 76, 0), new ScheduledTask(76, 81, 0), new ScheduledTask(81, 87, 0), new ScheduledTask(87, 96, 0), new ScheduledTask(96, 104, 0)};
        int[] expectedProcessorEndTimes = new int[]{104};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot03_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.03_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 104;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 15, 0), new ScheduledTask(15, 23, 0), new ScheduledTask(23, 32, 0), new ScheduledTask(32, 37, 0), new ScheduledTask(37, 43, 0), new ScheduledTask(43, 46, 0), new ScheduledTask(46, 54, 0), new ScheduledTask(54, 64, 0), new ScheduledTask(64, 70, 0), new ScheduledTask(70, 73, 0), new ScheduledTask(73, 76, 0), new ScheduledTask(76, 81, 0), new ScheduledTask(81, 87, 0), new ScheduledTask(87, 96, 0), new ScheduledTask(96, 104, 0)};
        int[] expectedProcessorEndTimes = new int[]{104};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_9dot98_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_9.98_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 95;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 13, 0), new ScheduledTask(13, 15, 0), new ScheduledTask(15, 22, 0), new ScheduledTask(22, 24, 0), new ScheduledTask(24, 28, 0), new ScheduledTask(28, 36, 0), new ScheduledTask(36, 43, 0), new ScheduledTask(43, 51, 0), new ScheduledTask(51, 55, 0), new ScheduledTask(55, 59, 0), new ScheduledTask(59, 61, 0), new ScheduledTask(61, 69, 0), new ScheduledTask(69, 77, 0), new ScheduledTask(77, 86, 0), new ScheduledTask(86, 95, 0)};
        int[] expectedProcessorEndTimes = new int[]{95};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_9dot98_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_9.98_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 95;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 13, 0), new ScheduledTask(13, 15, 0), new ScheduledTask(15, 22, 0), new ScheduledTask(22, 24, 0), new ScheduledTask(24, 28, 0), new ScheduledTask(28, 36, 0), new ScheduledTask(36, 43, 0), new ScheduledTask(43, 51, 0), new ScheduledTask(51, 55, 0), new ScheduledTask(55, 59, 0), new ScheduledTask(59, 61, 0), new ScheduledTask(61, 69, 0), new ScheduledTask(69, 77, 0), new ScheduledTask(77, 86, 0), new ScheduledTask(86, 95, 0)};
        int[] expectedProcessorEndTimes = new int[]{95};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_9dot98_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_9.98_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 95;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 13, 0), new ScheduledTask(13, 15, 0), new ScheduledTask(15, 22, 0), new ScheduledTask(22, 24, 0), new ScheduledTask(24, 28, 0), new ScheduledTask(28, 36, 0), new ScheduledTask(36, 43, 0), new ScheduledTask(43, 51, 0), new ScheduledTask(51, 55, 0), new ScheduledTask(55, 59, 0), new ScheduledTask(59, 61, 0), new ScheduledTask(61, 69, 0), new ScheduledTask(69, 77, 0), new ScheduledTask(77, 86, 0), new ScheduledTask(86, 95, 0)};
        int[] expectedProcessorEndTimes = new int[]{95};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_9dot98_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_9.98_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 97;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 10, 0), new ScheduledTask(10, 13, 0), new ScheduledTask(46, 50, 1), new ScheduledTask(22, 31, 0), new ScheduledTask(13, 22, 0), new ScheduledTask(70, 74, 1), new ScheduledTask(50, 60, 1), new ScheduledTask(31, 39, 0), new ScheduledTask(39, 46, 0), new ScheduledTask(76, 83, 1), new ScheduledTask(60, 70, 1), new ScheduledTask(46, 53, 0), new ScheduledTask(83, 88, 1), new ScheduledTask(74, 76, 1), new ScheduledTask(88, 97, 1)};
        int[] expectedProcessorEndTimes = new int[]{53, 97};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_9dot98_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_9.98_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 97;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 10, 0), new ScheduledTask(10, 13, 0), new ScheduledTask(46, 50, 1), new ScheduledTask(22, 31, 0), new ScheduledTask(13, 22, 0), new ScheduledTask(70, 74, 1), new ScheduledTask(50, 60, 1), new ScheduledTask(31, 39, 0), new ScheduledTask(39, 46, 0), new ScheduledTask(76, 83, 1), new ScheduledTask(60, 70, 1), new ScheduledTask(46, 53, 0), new ScheduledTask(83, 88, 1), new ScheduledTask(74, 76, 1), new ScheduledTask(88, 97, 1)};
        int[] expectedProcessorEndTimes = new int[]{53, 97};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_9dot98_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_9.98_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 97;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 10, 0), new ScheduledTask(10, 13, 0), new ScheduledTask(46, 50, 1), new ScheduledTask(22, 31, 0), new ScheduledTask(13, 22, 0), new ScheduledTask(70, 74, 1), new ScheduledTask(50, 60, 1), new ScheduledTask(31, 39, 0), new ScheduledTask(39, 46, 0), new ScheduledTask(76, 83, 1), new ScheduledTask(60, 70, 1), new ScheduledTask(46, 53, 0), new ScheduledTask(83, 88, 1), new ScheduledTask(74, 76, 1), new ScheduledTask(88, 97, 1)};
        int[] expectedProcessorEndTimes = new int[]{53, 97};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 106;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 18, 0), new ScheduledTask(18, 24, 0), new ScheduledTask(24, 31, 0), new ScheduledTask(31, 36, 0), new ScheduledTask(36, 44, 0), new ScheduledTask(44, 50, 0), new ScheduledTask(50, 60, 0), new ScheduledTask(60, 68, 0), new ScheduledTask(68, 73, 0), new ScheduledTask(73, 76, 0), new ScheduledTask(76, 81, 0), new ScheduledTask(81, 88, 0), new ScheduledTask(88, 96, 0), new ScheduledTask(96, 98, 0), new ScheduledTask(98, 106, 0)};
        int[] expectedProcessorEndTimes = new int[]{106};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 106;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 18, 0), new ScheduledTask(18, 24, 0), new ScheduledTask(24, 31, 0), new ScheduledTask(31, 36, 0), new ScheduledTask(36, 44, 0), new ScheduledTask(44, 50, 0), new ScheduledTask(50, 60, 0), new ScheduledTask(60, 68, 0), new ScheduledTask(68, 73, 0), new ScheduledTask(73, 76, 0), new ScheduledTask(76, 81, 0), new ScheduledTask(81, 88, 0), new ScheduledTask(88, 96, 0), new ScheduledTask(96, 98, 0), new ScheduledTask(98, 106, 0)};
        int[] expectedProcessorEndTimes = new int[]{106};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 106;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 18, 0), new ScheduledTask(18, 24, 0), new ScheduledTask(24, 31, 0), new ScheduledTask(31, 36, 0), new ScheduledTask(36, 44, 0), new ScheduledTask(44, 50, 0), new ScheduledTask(50, 60, 0), new ScheduledTask(60, 68, 0), new ScheduledTask(68, 73, 0), new ScheduledTask(73, 76, 0), new ScheduledTask(76, 81, 0), new ScheduledTask(81, 88, 0), new ScheduledTask(88, 96, 0), new ScheduledTask(96, 98, 0), new ScheduledTask(98, 106, 0)};
        int[] expectedProcessorEndTimes = new int[]{106};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot38_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.38_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 540;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 76, 0), new ScheduledTask(76, 98, 0), new ScheduledTask(0, 76, 1), new ScheduledTask(98, 152, 0), new ScheduledTask(76, 108, 1), new ScheduledTask(152, 228, 0), new ScheduledTask(228, 336, 0), new ScheduledTask(108, 194, 1), new ScheduledTask(336, 433, 0), new ScheduledTask(194, 302, 1), new ScheduledTask(302, 410, 1), new ScheduledTask(410, 486, 1), new ScheduledTask(433, 498, 0), new ScheduledTask(486, 518, 1), new ScheduledTask(498, 530, 0), new ScheduledTask(518, 540, 1)};
        int[] expectedProcessorEndTimes = new int[]{530, 540};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot38_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.38_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 520;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 76, 0), new ScheduledTask(76, 98, 0), new ScheduledTask(0, 76, 1), new ScheduledTask(98, 152, 0), new ScheduledTask(0, 32, 2), new ScheduledTask(152, 228, 0), new ScheduledTask(228, 336, 0), new ScheduledTask(86, 172, 1), new ScheduledTask(336, 433, 0), new ScheduledTask(0, 108, 3), new ScheduledTask(157, 265, 2), new ScheduledTask(154, 230, 3), new ScheduledTask(433, 498, 0), new ScheduledTask(230, 262, 3), new ScheduledTask(339, 371, 1), new ScheduledTask(498, 520, 0)};
        int[] expectedProcessorEndTimes = new int[]{520, 371, 265, 262};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot38_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.38_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 520;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 76, 0), new ScheduledTask(76, 98, 0), new ScheduledTask(0, 76, 1), new ScheduledTask(98, 152, 0), new ScheduledTask(0, 32, 2), new ScheduledTask(152, 228, 0), new ScheduledTask(228, 336, 0), new ScheduledTask(86, 172, 1), new ScheduledTask(336, 433, 0), new ScheduledTask(0, 108, 3), new ScheduledTask(157, 265, 2), new ScheduledTask(154, 230, 3), new ScheduledTask(433, 498, 0), new ScheduledTask(230, 262, 3), new ScheduledTask(339, 371, 1), new ScheduledTask(498, 520, 0)};
        int[] expectedProcessorEndTimes = new int[]{520, 371, 265, 262};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot56_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.56_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 754;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 135, 0), new ScheduledTask(0, 81, 1), new ScheduledTask(81, 108, 1), new ScheduledTask(135, 256, 0), new ScheduledTask(108, 175, 1), new ScheduledTask(175, 283, 1), new ScheduledTask(256, 337, 0), new ScheduledTask(283, 391, 1), new ScheduledTask(337, 458, 0), new ScheduledTask(391, 512, 1), new ScheduledTask(458, 566, 0), new ScheduledTask(512, 606, 1), new ScheduledTask(566, 687, 0), new ScheduledTask(606, 700, 1), new ScheduledTask(687, 754, 0), new ScheduledTask(700, 754, 1)};
        int[] expectedProcessorEndTimes = new int[]{754, 754};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot56_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.56_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 593;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 135, 0), new ScheduledTask(0, 81, 1), new ScheduledTask(0, 27, 2), new ScheduledTask(135, 256, 0), new ScheduledTask(0, 67, 3), new ScheduledTask(27, 135, 2), new ScheduledTask(67, 148, 3), new ScheduledTask(256, 364, 0), new ScheduledTask(135, 256, 2), new ScheduledTask(148, 269, 3), new ScheduledTask(364, 472, 0), new ScheduledTask(269, 363, 3), new ScheduledTask(472, 593, 0), new ScheduledTask(482, 576, 1), new ScheduledTask(363, 430, 3), new ScheduledTask(256, 310, 2)};
        int[] expectedProcessorEndTimes = new int[]{593, 576, 310, 430};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot56_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.56_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 593;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 135, 0), new ScheduledTask(0, 81, 1), new ScheduledTask(0, 27, 2), new ScheduledTask(135, 256, 0), new ScheduledTask(0, 67, 3), new ScheduledTask(0, 108, 4), new ScheduledTask(0, 81, 5), new ScheduledTask(256, 364, 0), new ScheduledTask(108, 229, 4), new ScheduledTask(114, 235, 1), new ScheduledTask(364, 472, 0), new ScheduledTask(239, 333, 1), new ScheduledTask(472, 593, 0), new ScheduledTask(482, 576, 1), new ScheduledTask(337, 404, 2), new ScheduledTask(113, 167, 3)};
        int[] expectedProcessorEndTimes = new int[]{593, 576, 404, 167, 229, 81};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot62_CCR_10dot03_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.62_CCR_10.03_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(12, 16, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(16, 24, 0), new ScheduledTask(24, 27, 0), new ScheduledTask(5, 9, 0), new ScheduledTask(5, 14, 1), new ScheduledTask(36, 38, 0), new ScheduledTask(9, 12, 0), new ScheduledTask(46, 53, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(14, 17, 1), new ScheduledTask(27, 36, 0), new ScheduledTask(38, 46, 0), new ScheduledTask(17, 21, 1), new ScheduledTask(53, 56, 0), new ScheduledTask(56, 58, 0)};
        int[] expectedProcessorEndTimes = new int[]{58, 21};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot62_CCR_10dot03_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.62_CCR_10.03_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(4, 12, 0), new ScheduledTask(32, 35, 0), new ScheduledTask(5, 9, 1), new ScheduledTask(0, 9, 2), new ScheduledTask(35, 37, 0), new ScheduledTask(20, 23, 0), new ScheduledTask(45, 52, 0), new ScheduledTask(0, 5, 3), new ScheduledTask(20, 23, 3), new ScheduledTask(23, 32, 0), new ScheduledTask(37, 45, 0), new ScheduledTask(23, 27, 3), new ScheduledTask(54, 57, 0), new ScheduledTask(52, 54, 0)};
        int[] expectedProcessorEndTimes = new int[]{57, 9, 9, 27};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot62_CCR_10dot03_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.62_CCR_10.03_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(4, 12, 0), new ScheduledTask(32, 35, 0), new ScheduledTask(5, 9, 1), new ScheduledTask(0, 9, 2), new ScheduledTask(35, 37, 0), new ScheduledTask(20, 23, 0), new ScheduledTask(45, 52, 0), new ScheduledTask(0, 5, 3), new ScheduledTask(20, 23, 4), new ScheduledTask(23, 32, 0), new ScheduledTask(37, 45, 0), new ScheduledTask(23, 27, 4), new ScheduledTask(54, 57, 0), new ScheduledTask(52, 54, 0)};
        int[] expectedProcessorEndTimes = new int[]{57, 9, 9, 5, 27};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot75_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.75_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 83;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(0, 11, 1), new ScheduledTask(16, 27, 1), new ScheduledTask(14, 19, 0), new ScheduledTask(27, 33, 1), new ScheduledTask(33, 48, 1), new ScheduledTask(31, 43, 0), new ScheduledTask(19, 31, 0), new ScheduledTask(54, 68, 0), new ScheduledTask(48, 57, 1), new ScheduledTask(51, 54, 0), new ScheduledTask(43, 51, 0), new ScheduledTask(57, 62, 1), new ScheduledTask(68, 83, 0), new ScheduledTask(68, 83, 1), new ScheduledTask(62, 68, 1)};
        int[] expectedProcessorEndTimes = new int[]{83, 83};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot75_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.75_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(0, 11, 1), new ScheduledTask(16, 27, 2), new ScheduledTask(14, 19, 0), new ScheduledTask(27, 33, 2), new ScheduledTask(33, 48, 2), new ScheduledTask(0, 12, 3), new ScheduledTask(0, 12, 2), new ScheduledTask(50, 64, 3), new ScheduledTask(53, 62, 2), new ScheduledTask(38, 41, 3), new ScheduledTask(30, 38, 3), new ScheduledTask(48, 53, 2), new ScheduledTask(67, 82, 3), new ScheduledTask(62, 77, 2), new ScheduledTask(41, 47, 3)};
        int[] expectedProcessorEndTimes = new int[]{19, 11, 77, 82};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot75_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.75_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(0, 11, 1), new ScheduledTask(16, 27, 2), new ScheduledTask(14, 19, 0), new ScheduledTask(27, 33, 2), new ScheduledTask(33, 48, 2), new ScheduledTask(12, 24, 3), new ScheduledTask(0, 12, 3), new ScheduledTask(50, 64, 0), new ScheduledTask(48, 57, 2), new ScheduledTask(34, 37, 4), new ScheduledTask(48, 56, 5), new ScheduledTask(57, 62, 5), new ScheduledTask(67, 82, 0), new ScheduledTask(62, 77, 5), new ScheduledTask(42, 48, 5)};
        int[] expectedProcessorEndTimes = new int[]{82, 11, 57, 24, 37, 77};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot81_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.81_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(22, 32, 0), new ScheduledTask(4, 9, 1), new ScheduledTask(9, 12, 0), new ScheduledTask(32, 39, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(55, 58, 0), new ScheduledTask(12, 22, 0), new ScheduledTask(39, 46, 0), new ScheduledTask(9, 14, 1), new ScheduledTask(62, 71, 0), new ScheduledTask(46, 55, 0), new ScheduledTask(68, 73, 1), new ScheduledTask(58, 62, 0), new ScheduledTask(64, 67, 1), new ScheduledTask(71, 73, 0)};
        int[] expectedProcessorEndTimes = new int[]{73, 73};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot81_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.81_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(22, 32, 0), new ScheduledTask(4, 9, 1), new ScheduledTask(9, 12, 0), new ScheduledTask(32, 39, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(55, 58, 0), new ScheduledTask(12, 22, 0), new ScheduledTask(39, 46, 0), new ScheduledTask(46, 51, 2), new ScheduledTask(62, 71, 0), new ScheduledTask(46, 55, 0), new ScheduledTask(68, 73, 2), new ScheduledTask(58, 62, 0), new ScheduledTask(64, 67, 3), new ScheduledTask(71, 73, 0)};
        int[] expectedProcessorEndTimes = new int[]{73, 9, 73, 67};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot81_CCR_10dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.81_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(22, 32, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(9, 12, 0), new ScheduledTask(32, 39, 0), new ScheduledTask(0, 4, 2), new ScheduledTask(55, 58, 0), new ScheduledTask(12, 22, 0), new ScheduledTask(39, 46, 0), new ScheduledTask(46, 51, 3), new ScheduledTask(62, 71, 0), new ScheduledTask(46, 55, 0), new ScheduledTask(68, 73, 3), new ScheduledTask(58, 62, 0), new ScheduledTask(64, 67, 4), new ScheduledTask(71, 73, 0)};
        int[] expectedProcessorEndTimes = new int[]{73, 5, 4, 73, 67};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot88_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.88_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1083;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 221, 0), new ScheduledTask(0, 88, 1), new ScheduledTask(221, 398, 0), new ScheduledTask(132, 286, 1), new ScheduledTask(88, 132, 1), new ScheduledTask(286, 485, 1), new ScheduledTask(398, 575, 0), new ScheduledTask(575, 774, 0), new ScheduledTask(485, 529, 1), new ScheduledTask(617, 749, 1), new ScheduledTask(529, 573, 1), new ScheduledTask(749, 837, 1), new ScheduledTask(774, 840, 0), new ScheduledTask(573, 617, 1), new ScheduledTask(840, 1039, 0), new ScheduledTask(1039, 1083, 0)};
        int[] expectedProcessorEndTimes = new int[]{1083, 837};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot88_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.88_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1083;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 221, 0), new ScheduledTask(0, 88, 1), new ScheduledTask(221, 398, 0), new ScheduledTask(88, 242, 1), new ScheduledTask(97, 141, 2), new ScheduledTask(242, 441, 1), new ScheduledTask(398, 575, 0), new ScheduledTask(575, 774, 0), new ScheduledTask(441, 485, 1), new ScheduledTask(485, 617, 1), new ScheduledTask(491, 535, 2), new ScheduledTask(0, 88, 3), new ScheduledTask(774, 840, 0), new ScheduledTask(535, 579, 2), new ScheduledTask(840, 1039, 0), new ScheduledTask(1039, 1083, 0)};
        int[] expectedProcessorEndTimes = new int[]{1083, 617, 579, 88};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot88_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.88_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1083;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 221, 0), new ScheduledTask(0, 88, 1), new ScheduledTask(221, 398, 0), new ScheduledTask(88, 242, 1), new ScheduledTask(97, 141, 2), new ScheduledTask(242, 441, 1), new ScheduledTask(398, 575, 0), new ScheduledTask(575, 774, 0), new ScheduledTask(441, 485, 1), new ScheduledTask(485, 617, 1), new ScheduledTask(491, 535, 2), new ScheduledTask(0, 88, 3), new ScheduledTask(774, 840, 0), new ScheduledTask(535, 579, 2), new ScheduledTask(840, 1039, 0), new ScheduledTask(1039, 1083, 0)};
        int[] expectedProcessorEndTimes = new int[]{1083, 617, 579, 88};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot94_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.94_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 965;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(80, 221, 0), new ScheduledTask(0, 101, 1), new ScheduledTask(342, 443, 0), new ScheduledTask(0, 80, 0), new ScheduledTask(362, 463, 1), new ScheduledTask(543, 744, 1), new ScheduledTask(101, 302, 1), new ScheduledTask(302, 362, 1), new ScheduledTask(463, 543, 1), new ScheduledTask(503, 583, 0), new ScheduledTask(583, 784, 0), new ScheduledTask(784, 965, 0), new ScheduledTask(804, 965, 1), new ScheduledTask(221, 342, 0), new ScheduledTask(744, 804, 1), new ScheduledTask(443, 503, 0)};
        int[] expectedProcessorEndTimes = new int[]{965, 965};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot94_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.94_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 624;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 141, 0), new ScheduledTask(0, 101, 1), new ScheduledTask(141, 242, 0), new ScheduledTask(0, 80, 2), new ScheduledTask(80, 181, 2), new ScheduledTask(242, 443, 0), new ScheduledTask(90, 291, 3), new ScheduledTask(150, 210, 1), new ScheduledTask(181, 261, 2), new ScheduledTask(210, 290, 1), new ScheduledTask(290, 491, 1), new ScheduledTask(443, 624, 0), new ScheduledTask(291, 452, 3), new ScheduledTask(261, 382, 2), new ScheduledTask(446, 506, 2), new ScheduledTask(452, 512, 3)};
        int[] expectedProcessorEndTimes = new int[]{624, 491, 506, 512};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot94_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.94_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 624;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 141, 0), new ScheduledTask(0, 101, 1), new ScheduledTask(141, 242, 0), new ScheduledTask(0, 80, 2), new ScheduledTask(80, 181, 2), new ScheduledTask(242, 443, 0), new ScheduledTask(90, 291, 3), new ScheduledTask(150, 210, 1), new ScheduledTask(181, 261, 2), new ScheduledTask(210, 290, 1), new ScheduledTask(290, 491, 1), new ScheduledTask(443, 624, 0), new ScheduledTask(291, 452, 3), new ScheduledTask(146, 267, 4), new ScheduledTask(446, 506, 2), new ScheduledTask(294, 354, 4)};
        int[] expectedProcessorEndTimes = new int[]{624, 491, 506, 452, 354};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot94_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.94_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 107;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(14, 26, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(29, 35, 1), new ScheduledTask(35, 41, 1), new ScheduledTask(51, 59, 0), new ScheduledTask(41, 59, 1), new ScheduledTask(59, 79, 0), new ScheduledTask(59, 73, 1), new ScheduledTask(79, 83, 0), new ScheduledTask(83, 95, 0), new ScheduledTask(73, 85, 1), new ScheduledTask(85, 101, 1), new ScheduledTask(36, 50, 0), new ScheduledTask(95, 107, 0), new ScheduledTask(26, 36, 0)};
        int[] expectedProcessorEndTimes = new int[]{107, 101};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot94_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.94_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 104;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(14, 26, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(26, 32, 0), new ScheduledTask(32, 38, 0), new ScheduledTask(38, 46, 0), new ScheduledTask(46, 64, 0), new ScheduledTask(54, 74, 1), new ScheduledTask(64, 78, 0), new ScheduledTask(74, 78, 1), new ScheduledTask(80, 92, 1), new ScheduledTask(70, 82, 2), new ScheduledTask(48, 64, 3), new ScheduledTask(64, 78, 3), new ScheduledTask(92, 104, 1), new ScheduledTask(78, 88, 0)};
        int[] expectedProcessorEndTimes = new int[]{88, 104, 82, 78};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot94_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.94_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 104;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(14, 26, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(26, 32, 0), new ScheduledTask(32, 38, 0), new ScheduledTask(38, 46, 0), new ScheduledTask(46, 64, 0), new ScheduledTask(54, 74, 1), new ScheduledTask(64, 78, 0), new ScheduledTask(74, 78, 1), new ScheduledTask(80, 92, 1), new ScheduledTask(70, 82, 2), new ScheduledTask(48, 64, 3), new ScheduledTask(34, 48, 4), new ScheduledTask(92, 104, 1), new ScheduledTask(32, 42, 5)};
        int[] expectedProcessorEndTimes = new int[]{78, 104, 82, 64, 48, 42};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot94_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.94_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(2, 12, 0), new ScheduledTask(12, 14, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(16, 21, 0), new ScheduledTask(21, 26, 0), new ScheduledTask(2, 9, 1), new ScheduledTask(14, 16, 0), new ScheduledTask(26, 31, 0), new ScheduledTask(43, 48, 0), new ScheduledTask(31, 36, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(48, 50, 0), new ScheduledTask(36, 43, 0), new ScheduledTask(36, 42, 1), new ScheduledTask(50, 55, 0), new ScheduledTask(31, 34, 1)};
        int[] expectedProcessorEndTimes = new int[]{55, 42};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot94_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.94_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(2, 12, 0), new ScheduledTask(12, 14, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(16, 21, 0), new ScheduledTask(21, 26, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(14, 16, 0), new ScheduledTask(26, 31, 0), new ScheduledTask(43, 48, 0), new ScheduledTask(31, 36, 0), new ScheduledTask(0, 2, 2), new ScheduledTask(48, 50, 0), new ScheduledTask(36, 43, 0), new ScheduledTask(39, 45, 3), new ScheduledTask(50, 55, 0), new ScheduledTask(36, 39, 3)};
        int[] expectedProcessorEndTimes = new int[]{55, 7, 2, 45};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot94_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.94_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(2, 12, 0), new ScheduledTask(12, 14, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(16, 21, 0), new ScheduledTask(21, 26, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(14, 16, 0), new ScheduledTask(26, 31, 0), new ScheduledTask(43, 48, 0), new ScheduledTask(31, 36, 0), new ScheduledTask(0, 2, 2), new ScheduledTask(48, 50, 0), new ScheduledTask(36, 43, 0), new ScheduledTask(36, 42, 3), new ScheduledTask(50, 55, 0), new ScheduledTask(36, 39, 4)};
        int[] expectedProcessorEndTimes = new int[]{55, 7, 2, 42, 39};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot00_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.00_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 108;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 24, 0), new ScheduledTask(6, 13, 1), new ScheduledTask(0, 6, 1), new ScheduledTask(30, 47, 1), new ScheduledTask(24, 30, 0), new ScheduledTask(30, 45, 0), new ScheduledTask(47, 60, 1), new ScheduledTask(45, 58, 0), new ScheduledTask(13, 30, 1), new ScheduledTask(60, 71, 1), new ScheduledTask(58, 73, 0), new ScheduledTask(71, 82, 1), new ScheduledTask(82, 89, 1), new ScheduledTask(89, 108, 1), new ScheduledTask(73, 92, 0)};
        int[] expectedProcessorEndTimes = new int[]{92, 108};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot00_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.00_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 97;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 24, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(0, 6, 2), new ScheduledTask(0, 17, 3), new ScheduledTask(24, 30, 0), new ScheduledTask(30, 45, 0), new ScheduledTask(34, 47, 1), new ScheduledTask(34, 47, 2), new ScheduledTask(17, 34, 3), new ScheduledTask(49, 60, 1), new ScheduledTask(34, 49, 3), new ScheduledTask(60, 71, 1), new ScheduledTask(71, 78, 1), new ScheduledTask(78, 97, 1), new ScheduledTask(45, 64, 0)};
        int[] expectedProcessorEndTimes = new int[]{64, 97, 47, 49};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot00_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.00_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 97;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 24, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(0, 6, 2), new ScheduledTask(0, 17, 3), new ScheduledTask(24, 30, 0), new ScheduledTask(30, 45, 0), new ScheduledTask(34, 47, 1), new ScheduledTask(34, 47, 2), new ScheduledTask(0, 17, 4), new ScheduledTask(49, 60, 1), new ScheduledTask(0, 15, 5), new ScheduledTask(60, 71, 1), new ScheduledTask(71, 78, 1), new ScheduledTask(78, 97, 1), new ScheduledTask(17, 36, 4)};
        int[] expectedProcessorEndTimes = new int[]{45, 97, 47, 17, 36, 15};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot00_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.00_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 20, 0), new ScheduledTask(20, 24, 0), new ScheduledTask(31, 41, 0), new ScheduledTask(27, 31, 0), new ScheduledTask(41, 50, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(24, 27, 0), new ScheduledTask(50, 54, 0), new ScheduledTask(10, 14, 1), new ScheduledTask(14, 21, 1), new ScheduledTask(61, 67, 0), new ScheduledTask(40, 43, 1), new ScheduledTask(67, 77, 0), new ScheduledTask(54, 61, 0), new ScheduledTask(72, 74, 1)};
        int[] expectedProcessorEndTimes = new int[]{77, 74};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot00_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.00_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 20, 0), new ScheduledTask(23, 27, 0), new ScheduledTask(31, 41, 0), new ScheduledTask(27, 31, 0), new ScheduledTask(41, 50, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(20, 23, 0), new ScheduledTask(50, 54, 0), new ScheduledTask(10, 14, 1), new ScheduledTask(14, 21, 1), new ScheduledTask(61, 67, 0), new ScheduledTask(43, 46, 2), new ScheduledTask(67, 77, 0), new ScheduledTask(54, 61, 0), new ScheduledTask(75, 77, 3)};
        int[] expectedProcessorEndTimes = new int[]{77, 21, 46, 77};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot00_CCR_10dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.00_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 20, 0), new ScheduledTask(23, 27, 0), new ScheduledTask(31, 41, 0), new ScheduledTask(27, 31, 0), new ScheduledTask(41, 50, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(20, 23, 0), new ScheduledTask(50, 54, 0), new ScheduledTask(10, 14, 1), new ScheduledTask(14, 21, 1), new ScheduledTask(61, 67, 0), new ScheduledTask(43, 46, 2), new ScheduledTask(67, 77, 0), new ScheduledTask(54, 61, 0), new ScheduledTask(75, 77, 3)};
        int[] expectedProcessorEndTimes = new int[]{77, 21, 46, 77};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot00_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.00_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(17, 20, 0), new ScheduledTask(6, 11, 0), new ScheduledTask(20, 24, 0), new ScheduledTask(28, 34, 0), new ScheduledTask(24, 28, 0), new ScheduledTask(40, 49, 0), new ScheduledTask(34, 40, 0), new ScheduledTask(11, 17, 0), new ScheduledTask(49, 54, 0), new ScheduledTask(51, 61, 1), new ScheduledTask(54, 59, 0), new ScheduledTask(59, 66, 0), new ScheduledTask(37, 44, 1), new ScheduledTask(61, 65, 1), new ScheduledTask(44, 47, 1)};
        int[] expectedProcessorEndTimes = new int[]{66, 65};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot00_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.00_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(14, 20, 0), new ScheduledTask(5, 8, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(20, 24, 0), new ScheduledTask(8, 14, 0), new ScheduledTask(36, 40, 0), new ScheduledTask(40, 49, 0), new ScheduledTask(30, 36, 0), new ScheduledTask(24, 30, 0), new ScheduledTask(49, 54, 0), new ScheduledTask(51, 61, 1), new ScheduledTask(54, 59, 0), new ScheduledTask(59, 66, 0), new ScheduledTask(37, 44, 2), new ScheduledTask(61, 65, 1), new ScheduledTask(57, 60, 3)};
        int[] expectedProcessorEndTimes = new int[]{66, 65, 44, 60};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot00_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.00_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(14, 20, 0), new ScheduledTask(5, 8, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(20, 24, 0), new ScheduledTask(8, 14, 0), new ScheduledTask(36, 40, 0), new ScheduledTask(40, 49, 0), new ScheduledTask(30, 36, 0), new ScheduledTask(24, 30, 0), new ScheduledTask(49, 54, 0), new ScheduledTask(51, 61, 1), new ScheduledTask(54, 59, 0), new ScheduledTask(59, 66, 0), new ScheduledTask(37, 44, 2), new ScheduledTask(61, 65, 1), new ScheduledTask(57, 60, 3)};
        int[] expectedProcessorEndTimes = new int[]{66, 65, 44, 60};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot06_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.06_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1051;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(112, 313, 0), new ScheduledTask(134, 313, 1), new ScheduledTask(402, 536, 0), new ScheduledTask(313, 447, 1), new ScheduledTask(0, 134, 1), new ScheduledTask(0, 112, 0), new ScheduledTask(447, 559, 1), new ScheduledTask(536, 692, 0), new ScheduledTask(313, 402, 0), new ScheduledTask(738, 805, 1), new ScheduledTask(805, 939, 1), new ScheduledTask(604, 738, 1), new ScheduledTask(559, 604, 1), new ScheduledTask(871, 1050, 0), new ScheduledTask(692, 871, 0), new ScheduledTask(939, 1051, 1)};
        int[] expectedProcessorEndTimes = new int[]{1050, 1051};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot06_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.06_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 670;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 201, 0), new ScheduledTask(0, 179, 1), new ScheduledTask(201, 335, 0), new ScheduledTask(179, 313, 1), new ScheduledTask(0, 134, 2), new ScheduledTask(0, 112, 3), new ScheduledTask(313, 425, 1), new ScheduledTask(335, 491, 0), new ScheduledTask(134, 223, 2), new ScheduledTask(342, 409, 2), new ScheduledTask(409, 543, 2), new ScheduledTask(189, 323, 3), new ScheduledTask(425, 470, 1), new ScheduledTask(470, 649, 1), new ScheduledTask(491, 670, 0), new ScheduledTask(543, 655, 2)};
        int[] expectedProcessorEndTimes = new int[]{670, 649, 655, 323};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot06_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.06_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 670;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 201, 0), new ScheduledTask(0, 179, 1), new ScheduledTask(201, 335, 0), new ScheduledTask(179, 313, 1), new ScheduledTask(0, 134, 2), new ScheduledTask(0, 112, 3), new ScheduledTask(313, 425, 1), new ScheduledTask(335, 491, 0), new ScheduledTask(134, 223, 2), new ScheduledTask(342, 409, 2), new ScheduledTask(409, 543, 2), new ScheduledTask(189, 323, 3), new ScheduledTask(425, 470, 1), new ScheduledTask(470, 649, 1), new ScheduledTask(491, 670, 0), new ScheduledTask(543, 655, 2)};
        int[] expectedProcessorEndTimes = new int[]{670, 649, 655, 323};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot06_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.06_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 930;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 67, 0), new ScheduledTask(67, 151, 0), new ScheduledTask(0, 34, 1), new ScheduledTask(151, 320, 0), new ScheduledTask(239, 391, 1), new ScheduledTask(70, 239, 1), new ScheduledTask(489, 658, 0), new ScheduledTask(576, 677, 1), new ScheduledTask(391, 458, 1), new ScheduledTask(744, 896, 1), new ScheduledTask(320, 489, 0), new ScheduledTask(658, 793, 0), new ScheduledTask(793, 928, 0), new ScheduledTask(458, 576, 1), new ScheduledTask(677, 744, 1), new ScheduledTask(896, 930, 1)};
        int[] expectedProcessorEndTimes = new int[]{928, 930};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot06_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.06_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 675;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 67, 0), new ScheduledTask(67, 151, 0), new ScheduledTask(0, 34, 1), new ScheduledTask(151, 320, 0), new ScheduledTask(76, 228, 2), new ScheduledTask(70, 239, 3), new ScheduledTask(320, 489, 0), new ScheduledTask(157, 258, 1), new ScheduledTask(325, 392, 1), new ScheduledTask(489, 641, 0), new ScheduledTask(392, 561, 1), new ScheduledTask(520, 655, 2), new ScheduledTask(491, 626, 3), new ScheduledTask(402, 520, 2), new ScheduledTask(258, 325, 1), new ScheduledTask(641, 675, 0)};
        int[] expectedProcessorEndTimes = new int[]{675, 561, 655, 626};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot06_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.06_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 675;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 67, 0), new ScheduledTask(67, 151, 0), new ScheduledTask(0, 34, 1), new ScheduledTask(151, 320, 0), new ScheduledTask(76, 228, 1), new ScheduledTask(70, 239, 2), new ScheduledTask(320, 489, 0), new ScheduledTask(157, 258, 3), new ScheduledTask(322, 389, 1), new ScheduledTask(489, 641, 0), new ScheduledTask(327, 496, 2), new ScheduledTask(497, 632, 1), new ScheduledTask(491, 626, 3), new ScheduledTask(399, 517, 4), new ScheduledTask(263, 330, 5), new ScheduledTask(641, 675, 0)};
        int[] expectedProcessorEndTimes = new int[]{675, 632, 496, 626, 517, 330};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot06_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.06_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 109;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(12, 30, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(9, 25, 1), new ScheduledTask(30, 46, 0), new ScheduledTask(46, 51, 0), new ScheduledTask(54, 75, 1), new ScheduledTask(25, 32, 1), new ScheduledTask(56, 72, 0), new ScheduledTask(32, 46, 1), new ScheduledTask(75, 91, 1), new ScheduledTask(72, 81, 0), new ScheduledTask(51, 56, 0), new ScheduledTask(81, 99, 0), new ScheduledTask(91, 109, 1), new ScheduledTask(99, 106, 0)};
        int[] expectedProcessorEndTimes = new int[]{106, 109};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot06_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.06_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 106;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(12, 30, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(0, 16, 2), new ScheduledTask(30, 46, 0), new ScheduledTask(46, 51, 0), new ScheduledTask(51, 72, 0), new ScheduledTask(22, 29, 1), new ScheduledTask(61, 77, 1), new ScheduledTask(36, 50, 2), new ScheduledTask(72, 88, 0), new ScheduledTask(77, 86, 1), new ScheduledTask(51, 56, 2), new ScheduledTask(86, 104, 1), new ScheduledTask(88, 106, 0), new ScheduledTask(92, 99, 2)};
        int[] expectedProcessorEndTimes = new int[]{106, 104, 99};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot06_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.06_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 106;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(12, 30, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(0, 16, 2), new ScheduledTask(30, 46, 0), new ScheduledTask(46, 51, 0), new ScheduledTask(51, 72, 0), new ScheduledTask(22, 29, 1), new ScheduledTask(61, 77, 1), new ScheduledTask(36, 50, 2), new ScheduledTask(72, 88, 0), new ScheduledTask(77, 86, 1), new ScheduledTask(51, 56, 2), new ScheduledTask(86, 104, 1), new ScheduledTask(88, 106, 0), new ScheduledTask(92, 99, 2)};
        int[] expectedProcessorEndTimes = new int[]{106, 104, 99};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot06_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.06_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(2, 10, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(10, 20, 0), new ScheduledTask(30, 35, 0), new ScheduledTask(8, 13, 1), new ScheduledTask(20, 30, 0), new ScheduledTask(56, 63, 0), new ScheduledTask(35, 40, 0), new ScheduledTask(40, 44, 0), new ScheduledTask(63, 70, 0), new ScheduledTask(53, 58, 1), new ScheduledTask(44, 46, 0), new ScheduledTask(46, 56, 0), new ScheduledTask(58, 61, 1), new ScheduledTask(70, 73, 0)};
        int[] expectedProcessorEndTimes = new int[]{73, 61};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot06_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.06_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(2, 10, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(10, 20, 0), new ScheduledTask(30, 35, 0), new ScheduledTask(0, 5, 2), new ScheduledTask(20, 30, 0), new ScheduledTask(56, 63, 0), new ScheduledTask(35, 40, 0), new ScheduledTask(52, 56, 0), new ScheduledTask(63, 70, 0), new ScheduledTask(65, 70, 3), new ScheduledTask(40, 42, 0), new ScheduledTask(42, 52, 0), new ScheduledTask(70, 73, 3), new ScheduledTask(70, 73, 0)};
        int[] expectedProcessorEndTimes = new int[]{73, 8, 5, 73};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot06_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.06_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(2, 10, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(10, 20, 0), new ScheduledTask(30, 35, 0), new ScheduledTask(8, 13, 1), new ScheduledTask(20, 30, 0), new ScheduledTask(56, 63, 0), new ScheduledTask(35, 40, 0), new ScheduledTask(40, 44, 0), new ScheduledTask(63, 70, 0), new ScheduledTask(53, 58, 2), new ScheduledTask(44, 46, 0), new ScheduledTask(46, 56, 0), new ScheduledTask(58, 61, 2), new ScheduledTask(70, 73, 0)};
        int[] expectedProcessorEndTimes = new int[]{73, 13, 61};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot06_CCR_10dot05_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.06_CCR_10.05_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(8, 11, 0), new ScheduledTask(0, 8, 0), new ScheduledTask(9, 11, 1), new ScheduledTask(11, 17, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(19, 25, 1), new ScheduledTask(31, 35, 0), new ScheduledTask(13, 19, 1), new ScheduledTask(38, 41, 1), new ScheduledTask(45, 51, 0), new ScheduledTask(41, 48, 1), new ScheduledTask(34, 38, 1), new ScheduledTask(51, 57, 0), new ScheduledTask(52, 57, 1), new ScheduledTask(48, 50, 1), new ScheduledTask(11, 13, 1)};
        int[] expectedProcessorEndTimes = new int[]{57, 57};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot06_CCR_10dot05_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.06_CCR_10.05_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(8, 11, 0), new ScheduledTask(0, 8, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(11, 17, 0), new ScheduledTask(2, 11, 1), new ScheduledTask(28, 34, 2), new ScheduledTask(33, 37, 0), new ScheduledTask(11, 17, 1), new ScheduledTask(42, 45, 2), new ScheduledTask(43, 49, 0), new ScheduledTask(45, 52, 2), new ScheduledTask(34, 38, 3), new ScheduledTask(49, 55, 0), new ScheduledTask(52, 57, 2), new ScheduledTask(48, 50, 3), new ScheduledTask(46, 48, 3)};
        int[] expectedProcessorEndTimes = new int[]{55, 17, 57, 50};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot06_CCR_10dot05_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.06_CCR_10.05_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(8, 11, 0), new ScheduledTask(0, 8, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(11, 17, 0), new ScheduledTask(2, 11, 1), new ScheduledTask(28, 34, 2), new ScheduledTask(33, 37, 0), new ScheduledTask(11, 17, 1), new ScheduledTask(42, 45, 2), new ScheduledTask(43, 49, 0), new ScheduledTask(45, 52, 2), new ScheduledTask(34, 38, 3), new ScheduledTask(49, 55, 0), new ScheduledTask(52, 57, 2), new ScheduledTask(46, 48, 4), new ScheduledTask(46, 48, 5)};
        int[] expectedProcessorEndTimes = new int[]{55, 17, 57, 38, 48, 48};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot12_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.12_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 113;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(23, 28, 1), new ScheduledTask(28, 49, 1), new ScheduledTask(26, 47, 0), new ScheduledTask(12, 26, 0), new ScheduledTask(0, 16, 1), new ScheduledTask(18, 23, 1), new ScheduledTask(49, 61, 1), new ScheduledTask(47, 70, 0), new ScheduledTask(66, 75, 1), new ScheduledTask(61, 66, 1), new ScheduledTask(75, 94, 1), new ScheduledTask(94, 113, 1), new ScheduledTask(70, 89, 0), new ScheduledTask(101, 113, 0), new ScheduledTask(89, 101, 0)};
        int[] expectedProcessorEndTimes = new int[]{113, 113};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot12_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.12_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 97;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(12, 17, 0), new ScheduledTask(17, 38, 0), new ScheduledTask(0, 21, 1), new ScheduledTask(0, 14, 2), new ScheduledTask(0, 16, 3), new ScheduledTask(18, 23, 2), new ScheduledTask(38, 50, 0), new ScheduledTask(26, 49, 1), new ScheduledTask(41, 50, 2), new ScheduledTask(50, 55, 0), new ScheduledTask(59, 78, 0), new ScheduledTask(78, 97, 0), new ScheduledTask(31, 50, 3), new ScheduledTask(50, 62, 2), new ScheduledTask(62, 74, 1)};
        int[] expectedProcessorEndTimes = new int[]{97, 74, 62, 50};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot12_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.12_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 97;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(12, 17, 0), new ScheduledTask(17, 38, 0), new ScheduledTask(0, 21, 1), new ScheduledTask(0, 14, 2), new ScheduledTask(0, 16, 3), new ScheduledTask(18, 23, 2), new ScheduledTask(38, 50, 0), new ScheduledTask(26, 49, 1), new ScheduledTask(41, 50, 2), new ScheduledTask(50, 55, 0), new ScheduledTask(59, 78, 0), new ScheduledTask(78, 97, 0), new ScheduledTask(31, 50, 3), new ScheduledTask(50, 62, 2), new ScheduledTask(62, 74, 1)};
        int[] expectedProcessorEndTimes = new int[]{97, 74, 62, 50};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot12_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.12_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 12, 0), new ScheduledTask(21, 24, 1), new ScheduledTask(6, 12, 1), new ScheduledTask(12, 17, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(35, 41, 1), new ScheduledTask(12, 19, 1), new ScheduledTask(31, 33, 1), new ScheduledTask(41, 46, 1), new ScheduledTask(19, 21, 1), new ScheduledTask(26, 31, 1), new ScheduledTask(46, 52, 1), new ScheduledTask(52, 54, 1), new ScheduledTask(54, 57, 1), new ScheduledTask(57, 66, 1)};
        int[] expectedProcessorEndTimes = new int[]{17, 66};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot12_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.12_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 12, 0), new ScheduledTask(21, 24, 1), new ScheduledTask(6, 12, 1), new ScheduledTask(12, 17, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(35, 41, 1), new ScheduledTask(12, 19, 1), new ScheduledTask(31, 33, 1), new ScheduledTask(41, 46, 1), new ScheduledTask(19, 21, 1), new ScheduledTask(26, 31, 1), new ScheduledTask(46, 52, 1), new ScheduledTask(52, 54, 1), new ScheduledTask(54, 57, 1), new ScheduledTask(57, 66, 1)};
        int[] expectedProcessorEndTimes = new int[]{17, 66};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot12_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.12_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 12, 0), new ScheduledTask(21, 24, 1), new ScheduledTask(6, 12, 1), new ScheduledTask(12, 17, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(35, 41, 1), new ScheduledTask(12, 19, 1), new ScheduledTask(31, 33, 1), new ScheduledTask(41, 46, 1), new ScheduledTask(19, 21, 1), new ScheduledTask(26, 31, 1), new ScheduledTask(46, 52, 1), new ScheduledTask(52, 54, 1), new ScheduledTask(54, 57, 1), new ScheduledTask(57, 66, 1)};
        int[] expectedProcessorEndTimes = new int[]{17, 66};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot19_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.19_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1179;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 215, 0), new ScheduledTask(107, 257, 1), new ScheduledTask(215, 430, 0), new ScheduledTask(0, 107, 1), new ScheduledTask(257, 472, 1), new ScheduledTask(430, 645, 0), new ScheduledTask(579, 772, 1), new ScheduledTask(645, 817, 0), new ScheduledTask(772, 879, 1), new ScheduledTask(472, 579, 1), new ScheduledTask(943, 1115, 1), new ScheduledTask(879, 943, 1), new ScheduledTask(989, 1161, 0), new ScheduledTask(903, 989, 0), new ScheduledTask(817, 903, 0), new ScheduledTask(1115, 1179, 1)};
        int[] expectedProcessorEndTimes = new int[]{1161, 1179};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot19_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.19_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 970;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 215, 0), new ScheduledTask(0, 150, 1), new ScheduledTask(215, 430, 0), new ScheduledTask(0, 107, 2), new ScheduledTask(195, 410, 3), new ScheduledTask(225, 440, 1), new ScheduledTask(430, 623, 0), new ScheduledTask(547, 719, 1), new ScheduledTask(623, 730, 0), new ScheduledTask(440, 547, 1), new ScheduledTask(734, 906, 1), new ScheduledTask(730, 794, 0), new ScheduledTask(794, 966, 0), new ScheduledTask(109, 195, 3), new ScheduledTask(440, 526, 3), new ScheduledTask(906, 970, 1)};
        int[] expectedProcessorEndTimes = new int[]{966, 970, 107, 526};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot19_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.19_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 970;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 215, 0), new ScheduledTask(0, 150, 1), new ScheduledTask(215, 430, 0), new ScheduledTask(0, 107, 2), new ScheduledTask(160, 375, 3), new ScheduledTask(225, 440, 4), new ScheduledTask(430, 623, 0), new ScheduledTask(526, 698, 5), new ScheduledTask(623, 730, 0), new ScheduledTask(433, 540, 3), new ScheduledTask(734, 906, 5), new ScheduledTask(730, 794, 0), new ScheduledTask(794, 966, 0), new ScheduledTask(109, 195, 5), new ScheduledTask(440, 526, 5), new ScheduledTask(906, 970, 5)};
        int[] expectedProcessorEndTimes = new int[]{966, 150, 107, 540, 440, 970};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot19_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.19_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 106;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 16, 0), new ScheduledTask(0, 18, 1), new ScheduledTask(18, 38, 1), new ScheduledTask(16, 20, 0), new ScheduledTask(22, 38, 0), new ScheduledTask(38, 58, 0), new ScheduledTask(38, 48, 1), new ScheduledTask(48, 54, 1), new ScheduledTask(72, 78, 0), new ScheduledTask(58, 72, 0), new ScheduledTask(78, 82, 0), new ScheduledTask(82, 102, 0), new ScheduledTask(70, 90, 1), new ScheduledTask(90, 106, 1), new ScheduledTask(54, 70, 1), new ScheduledTask(102, 106, 0)};
        int[] expectedProcessorEndTimes = new int[]{106, 106};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot19_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.19_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 86;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 16, 0), new ScheduledTask(0, 18, 1), new ScheduledTask(0, 20, 2), new ScheduledTask(16, 20, 0), new ScheduledTask(22, 38, 0), new ScheduledTask(25, 45, 1), new ScheduledTask(26, 36, 2), new ScheduledTask(38, 44, 0), new ScheduledTask(36, 42, 2), new ScheduledTask(48, 62, 1), new ScheduledTask(42, 46, 2), new ScheduledTask(62, 82, 1), new ScheduledTask(23, 43, 3), new ScheduledTask(48, 64, 0), new ScheduledTask(43, 59, 3), new ScheduledTask(82, 86, 1)};
        int[] expectedProcessorEndTimes = new int[]{64, 86, 46, 59};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot19_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.19_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 86;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 16, 0), new ScheduledTask(0, 18, 1), new ScheduledTask(0, 20, 2), new ScheduledTask(16, 20, 0), new ScheduledTask(22, 38, 0), new ScheduledTask(25, 45, 1), new ScheduledTask(26, 36, 2), new ScheduledTask(38, 44, 0), new ScheduledTask(36, 42, 2), new ScheduledTask(48, 62, 1), new ScheduledTask(42, 46, 2), new ScheduledTask(62, 82, 1), new ScheduledTask(23, 43, 3), new ScheduledTask(48, 64, 0), new ScheduledTask(0, 16, 4), new ScheduledTask(82, 86, 1)};
        int[] expectedProcessorEndTimes = new int[]{64, 86, 46, 43, 16};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot19_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.19_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(4, 14, 0), new ScheduledTask(0, 4, 0), new ScheduledTask(21, 31, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(31, 33, 0), new ScheduledTask(33, 36, 0), new ScheduledTask(14, 21, 0), new ScheduledTask(36, 46, 0), new ScheduledTask(24, 27, 1), new ScheduledTask(52, 56, 0), new ScheduledTask(46, 48, 0), new ScheduledTask(56, 62, 0), new ScheduledTask(21, 24, 1), new ScheduledTask(48, 52, 0), new ScheduledTask(62, 66, 0), new ScheduledTask(61, 65, 1)};
        int[] expectedProcessorEndTimes = new int[]{66, 65};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot19_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.19_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(4, 14, 0), new ScheduledTask(0, 4, 0), new ScheduledTask(21, 31, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(7, 9, 1), new ScheduledTask(33, 36, 0), new ScheduledTask(14, 21, 0), new ScheduledTask(36, 46, 0), new ScheduledTask(0, 3, 2), new ScheduledTask(52, 56, 0), new ScheduledTask(46, 48, 0), new ScheduledTask(56, 62, 0), new ScheduledTask(21, 24, 3), new ScheduledTask(48, 52, 0), new ScheduledTask(62, 66, 0), new ScheduledTask(61, 65, 3)};
        int[] expectedProcessorEndTimes = new int[]{66, 9, 3, 65};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot19_CCR_9dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.19_CCR_9.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(4, 14, 0), new ScheduledTask(0, 4, 0), new ScheduledTask(21, 31, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(7, 9, 1), new ScheduledTask(33, 36, 0), new ScheduledTask(14, 21, 0), new ScheduledTask(36, 46, 0), new ScheduledTask(0, 3, 2), new ScheduledTask(52, 56, 0), new ScheduledTask(46, 48, 0), new ScheduledTask(56, 62, 0), new ScheduledTask(21, 24, 3), new ScheduledTask(48, 52, 0), new ScheduledTask(62, 66, 0), new ScheduledTask(61, 65, 4)};
        int[] expectedProcessorEndTimes = new int[]{66, 9, 3, 24, 65};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot25_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.25_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 973;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 75, 0), new ScheduledTask(75, 299, 0), new ScheduledTask(304, 454, 1), new ScheduledTask(299, 399, 0), new ScheduledTask(175, 300, 1), new ScheduledTask(0, 125, 1), new ScheduledTask(454, 554, 1), new ScheduledTask(574, 649, 0), new ScheduledTask(125, 175, 1), new ScheduledTask(649, 749, 0), new ScheduledTask(654, 779, 1), new ScheduledTask(399, 574, 0), new ScheduledTask(749, 973, 0), new ScheduledTask(779, 879, 1), new ScheduledTask(554, 654, 1), new ScheduledTask(879, 954, 1)};
        int[] expectedProcessorEndTimes = new int[]{973, 954};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot25_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.25_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 948;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 75, 0), new ScheduledTask(75, 299, 0), new ScheduledTask(299, 449, 0), new ScheduledTask(0, 100, 1), new ScheduledTask(0, 125, 2), new ScheduledTask(0, 125, 3), new ScheduledTask(449, 549, 0), new ScheduledTask(549, 624, 0), new ScheduledTask(100, 150, 1), new ScheduledTask(624, 724, 0), new ScheduledTask(150, 275, 1), new ScheduledTask(305, 480, 1), new ScheduledTask(724, 948, 0), new ScheduledTask(727, 827, 1), new ScheduledTask(456, 556, 2), new ScheduledTask(827, 902, 1)};
        int[] expectedProcessorEndTimes = new int[]{948, 902, 556, 125};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot25_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.25_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 948;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 75, 0), new ScheduledTask(75, 299, 0), new ScheduledTask(299, 449, 0), new ScheduledTask(0, 100, 1), new ScheduledTask(0, 125, 2), new ScheduledTask(0, 125, 3), new ScheduledTask(449, 549, 0), new ScheduledTask(549, 624, 0), new ScheduledTask(77, 127, 4), new ScheduledTask(624, 724, 0), new ScheduledTask(127, 252, 4), new ScheduledTask(305, 480, 1), new ScheduledTask(724, 948, 0), new ScheduledTask(727, 827, 1), new ScheduledTask(456, 556, 2), new ScheduledTask(827, 902, 1)};
        int[] expectedProcessorEndTimes = new int[]{948, 902, 556, 125, 252};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot25_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.25_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 122;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 15, 0), new ScheduledTask(15, 30, 0), new ScheduledTask(20, 42, 1), new ScheduledTask(9, 20, 1), new ScheduledTask(30, 41, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(41, 59, 0), new ScheduledTask(43, 63, 1), new ScheduledTask(69, 76, 1), new ScheduledTask(76, 96, 1), new ScheduledTask(59, 74, 0), new ScheduledTask(96, 109, 1), new ScheduledTask(85, 107, 0), new ScheduledTask(107, 122, 0), new ScheduledTask(74, 85, 0), new ScheduledTask(109, 113, 1)};
        int[] expectedProcessorEndTimes = new int[]{122, 113};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot25_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.25_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 117;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 15, 0), new ScheduledTask(15, 30, 0), new ScheduledTask(0, 22, 1), new ScheduledTask(0, 11, 2), new ScheduledTask(30, 41, 0), new ScheduledTask(0, 9, 3), new ScheduledTask(41, 59, 0), new ScheduledTask(43, 63, 1), new ScheduledTask(69, 76, 1), new ScheduledTask(76, 96, 1), new ScheduledTask(14, 29, 2), new ScheduledTask(96, 109, 1), new ScheduledTask(85, 107, 0), new ScheduledTask(102, 117, 2), new ScheduledTask(72, 83, 3), new ScheduledTask(109, 113, 1)};
        int[] expectedProcessorEndTimes = new int[]{107, 113, 117, 83};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot25_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.25_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 117;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 15, 0), new ScheduledTask(15, 30, 0), new ScheduledTask(0, 22, 1), new ScheduledTask(0, 11, 2), new ScheduledTask(30, 41, 0), new ScheduledTask(0, 9, 3), new ScheduledTask(41, 59, 0), new ScheduledTask(43, 63, 1), new ScheduledTask(69, 76, 1), new ScheduledTask(76, 96, 1), new ScheduledTask(14, 29, 2), new ScheduledTask(96, 109, 1), new ScheduledTask(85, 107, 0), new ScheduledTask(102, 117, 2), new ScheduledTask(72, 83, 3), new ScheduledTask(109, 113, 1)};
        int[] expectedProcessorEndTimes = new int[]{107, 113, 117, 83};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot25_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.25_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 129;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 35, 0), new ScheduledTask(10, 20, 1), new ScheduledTask(20, 30, 1), new ScheduledTask(35, 48, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(48, 73, 0), new ScheduledTask(30, 53, 1), new ScheduledTask(73, 86, 0), new ScheduledTask(53, 66, 1), new ScheduledTask(86, 106, 0), new ScheduledTask(90, 95, 1), new ScheduledTask(95, 108, 1), new ScheduledTask(106, 129, 0), new ScheduledTask(113, 126, 1), new ScheduledTask(77, 90, 1)};
        int[] expectedProcessorEndTimes = new int[]{129, 126};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot25_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.25_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 129;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 35, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(10, 20, 1), new ScheduledTask(35, 48, 0), new ScheduledTask(0, 10, 2), new ScheduledTask(48, 73, 0), new ScheduledTask(18, 41, 2), new ScheduledTask(73, 86, 0), new ScheduledTask(41, 54, 2), new ScheduledTask(86, 106, 0), new ScheduledTask(54, 59, 2), new ScheduledTask(59, 72, 2), new ScheduledTask(106, 129, 0), new ScheduledTask(113, 126, 1), new ScheduledTask(77, 90, 2)};
        int[] expectedProcessorEndTimes = new int[]{129, 126, 90};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot25_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.25_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 129;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 35, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(10, 20, 1), new ScheduledTask(35, 48, 0), new ScheduledTask(0, 10, 2), new ScheduledTask(48, 73, 0), new ScheduledTask(18, 41, 2), new ScheduledTask(73, 86, 0), new ScheduledTask(41, 54, 2), new ScheduledTask(86, 106, 0), new ScheduledTask(54, 59, 2), new ScheduledTask(59, 72, 2), new ScheduledTask(106, 129, 0), new ScheduledTask(113, 126, 1), new ScheduledTask(77, 90, 2)};
        int[] expectedProcessorEndTimes = new int[]{129, 126, 90};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot25_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.25_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 105;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(4, 11, 0), new ScheduledTask(11, 33, 0), new ScheduledTask(0, 17, 1), new ScheduledTask(0, 4, 0), new ScheduledTask(53, 75, 1), new ScheduledTask(34, 38, 1), new ScheduledTask(38, 49, 1), new ScheduledTask(33, 55, 0), new ScheduledTask(17, 34, 1), new ScheduledTask(75, 88, 1), new ScheduledTask(81, 92, 0), new ScheduledTask(49, 53, 1), new ScheduledTask(88, 105, 1), new ScheduledTask(64, 81, 0), new ScheduledTask(92, 105, 0), new ScheduledTask(55, 64, 0)};
        int[] expectedProcessorEndTimes = new int[]{105, 105};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot25_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.25_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(0, 22, 1), new ScheduledTask(0, 17, 2), new ScheduledTask(0, 4, 3), new ScheduledTask(7, 29, 0), new ScheduledTask(13, 17, 3), new ScheduledTask(17, 28, 3), new ScheduledTask(23, 45, 1), new ScheduledTask(17, 34, 2), new ScheduledTask(37, 50, 0), new ScheduledTask(45, 56, 1), new ScheduledTask(30, 34, 3), new ScheduledTask(50, 67, 0), new ScheduledTask(38, 55, 2), new ScheduledTask(56, 69, 1), new ScheduledTask(34, 43, 3)};
        int[] expectedProcessorEndTimes = new int[]{67, 69, 55, 43};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot25_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.25_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(0, 22, 1), new ScheduledTask(0, 17, 2), new ScheduledTask(0, 4, 3), new ScheduledTask(7, 29, 0), new ScheduledTask(13, 17, 3), new ScheduledTask(17, 28, 3), new ScheduledTask(23, 45, 1), new ScheduledTask(17, 34, 2), new ScheduledTask(37, 50, 0), new ScheduledTask(45, 56, 1), new ScheduledTask(30, 34, 3), new ScheduledTask(50, 67, 0), new ScheduledTask(38, 55, 2), new ScheduledTask(56, 69, 1), new ScheduledTask(26, 35, 4)};
        int[] expectedProcessorEndTimes = new int[]{67, 69, 55, 34, 35};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot25_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.25_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(2, 7, 0), new ScheduledTask(7, 15, 0), new ScheduledTask(15, 21, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(21, 28, 0), new ScheduledTask(37, 39, 0), new ScheduledTask(28, 37, 0), new ScheduledTask(39, 44, 0), new ScheduledTask(44, 54, 0), new ScheduledTask(57, 63, 1), new ScheduledTask(52, 57, 1), new ScheduledTask(54, 60, 0), new ScheduledTask(68, 78, 0), new ScheduledTask(60, 68, 0), new ScheduledTask(68, 75, 1)};
        int[] expectedProcessorEndTimes = new int[]{78, 75};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot25_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.25_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(2, 7, 0), new ScheduledTask(7, 15, 0), new ScheduledTask(15, 21, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(21, 28, 0), new ScheduledTask(37, 39, 0), new ScheduledTask(28, 37, 0), new ScheduledTask(39, 44, 0), new ScheduledTask(44, 54, 0), new ScheduledTask(57, 63, 2), new ScheduledTask(52, 57, 2), new ScheduledTask(54, 60, 0), new ScheduledTask(68, 78, 0), new ScheduledTask(60, 68, 0), new ScheduledTask(68, 75, 2)};
        int[] expectedProcessorEndTimes = new int[]{78, 3, 75};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot25_CCR_9dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.25_CCR_9.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(2, 7, 0), new ScheduledTask(7, 15, 0), new ScheduledTask(15, 21, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(21, 28, 0), new ScheduledTask(37, 39, 0), new ScheduledTask(28, 37, 0), new ScheduledTask(39, 44, 0), new ScheduledTask(44, 54, 0), new ScheduledTask(57, 63, 1), new ScheduledTask(52, 57, 1), new ScheduledTask(54, 60, 0), new ScheduledTask(68, 78, 0), new ScheduledTask(60, 68, 0), new ScheduledTask(68, 75, 1)};
        int[] expectedProcessorEndTimes = new int[]{78, 75};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot44_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.44_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 105;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(12, 26, 1), new ScheduledTask(0, 12, 1), new ScheduledTask(16, 30, 0), new ScheduledTask(26, 38, 1), new ScheduledTask(38, 47, 1), new ScheduledTask(56, 65, 0), new ScheduledTask(47, 52, 1), new ScheduledTask(65, 86, 0), new ScheduledTask(51, 56, 0), new ScheduledTask(42, 51, 0), new ScheduledTask(52, 75, 1), new ScheduledTask(86, 105, 0), new ScheduledTask(75, 91, 1), new ScheduledTask(91, 103, 1), new ScheduledTask(30, 42, 0)};
        int[] expectedProcessorEndTimes = new int[]{105, 103};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot44_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.44_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 86;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(0, 14, 1), new ScheduledTask(0, 12, 2), new ScheduledTask(16, 30, 0), new ScheduledTask(14, 26, 1), new ScheduledTask(30, 39, 0), new ScheduledTask(39, 48, 0), new ScheduledTask(48, 53, 0), new ScheduledTask(53, 74, 0), new ScheduledTask(42, 47, 1), new ScheduledTask(33, 42, 1), new ScheduledTask(59, 82, 3), new ScheduledTask(51, 70, 1), new ScheduledTask(70, 86, 1), new ScheduledTask(74, 86, 0), new ScheduledTask(37, 49, 3)};
        int[] expectedProcessorEndTimes = new int[]{86, 86, 12, 82};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot44_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.44_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 86;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(0, 14, 1), new ScheduledTask(0, 12, 2), new ScheduledTask(16, 30, 0), new ScheduledTask(14, 26, 1), new ScheduledTask(30, 39, 0), new ScheduledTask(44, 53, 0), new ScheduledTask(39, 44, 0), new ScheduledTask(53, 74, 0), new ScheduledTask(41, 46, 1), new ScheduledTask(33, 42, 2), new ScheduledTask(50, 73, 1), new ScheduledTask(56, 75, 3), new ScheduledTask(62, 78, 2), new ScheduledTask(74, 86, 0), new ScheduledTask(37, 49, 4)};
        int[] expectedProcessorEndTimes = new int[]{86, 73, 78, 75, 49};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot50_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.50_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1166;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 170, 0), new ScheduledTask(0, 146, 1), new ScheduledTask(170, 219, 0), new ScheduledTask(146, 243, 1), new ScheduledTask(219, 316, 0), new ScheduledTask(316, 559, 0), new ScheduledTask(243, 292, 1), new ScheduledTask(292, 535, 1), new ScheduledTask(535, 584, 1), new ScheduledTask(584, 803, 1), new ScheduledTask(559, 656, 0), new ScheduledTask(656, 753, 0), new ScheduledTask(753, 996, 0), new ScheduledTask(803, 1022, 1), new ScheduledTask(996, 1166, 0), new ScheduledTask(1022, 1144, 1)};
        int[] expectedProcessorEndTimes = new int[]{1166, 1144};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot50_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.50_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 899;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 170, 0), new ScheduledTask(0, 146, 1), new ScheduledTask(170, 219, 0), new ScheduledTask(0, 97, 2), new ScheduledTask(219, 316, 0), new ScheduledTask(316, 559, 0), new ScheduledTask(0, 49, 3), new ScheduledTask(225, 468, 1), new ScheduledTask(148, 197, 2), new ScheduledTask(197, 416, 2), new ScheduledTask(559, 656, 0), new ScheduledTask(320, 417, 3), new ScheduledTask(656, 899, 0), new ScheduledTask(658, 877, 1), new ScheduledTask(473, 643, 2), new ScheduledTask(564, 686, 3)};
        int[] expectedProcessorEndTimes = new int[]{899, 877, 643, 686};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot50_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.50_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 899;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 170, 0), new ScheduledTask(0, 146, 1), new ScheduledTask(170, 219, 0), new ScheduledTask(0, 97, 2), new ScheduledTask(219, 316, 0), new ScheduledTask(316, 559, 0), new ScheduledTask(0, 49, 3), new ScheduledTask(225, 468, 1), new ScheduledTask(148, 197, 2), new ScheduledTask(197, 416, 2), new ScheduledTask(559, 656, 0), new ScheduledTask(320, 417, 3), new ScheduledTask(656, 899, 0), new ScheduledTask(658, 877, 1), new ScheduledTask(473, 643, 2), new ScheduledTask(564, 686, 3)};
        int[] expectedProcessorEndTimes = new int[]{899, 877, 643, 686};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot56_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.56_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1186;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 88, 0), new ScheduledTask(88, 307, 0), new ScheduledTask(0, 154, 1), new ScheduledTask(307, 505, 0), new ScheduledTask(154, 373, 1), new ScheduledTask(373, 592, 1), new ScheduledTask(592, 768, 1), new ScheduledTask(505, 637, 0), new ScheduledTask(637, 725, 0), new ScheduledTask(835, 1054, 0), new ScheduledTask(768, 966, 1), new ScheduledTask(725, 835, 0), new ScheduledTask(966, 1054, 1), new ScheduledTask(1054, 1098, 1), new ScheduledTask(1054, 1186, 0), new ScheduledTask(1098, 1186, 1)};
        int[] expectedProcessorEndTimes = new int[]{1186, 1186};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot56_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.56_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1032;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 88, 0), new ScheduledTask(88, 307, 0), new ScheduledTask(0, 154, 1), new ScheduledTask(307, 505, 0), new ScheduledTask(154, 373, 1), new ScheduledTask(314, 533, 2), new ScheduledTask(505, 681, 0), new ScheduledTask(373, 505, 1), new ScheduledTask(310, 398, 3), new ScheduledTask(681, 900, 0), new ScheduledTask(688, 886, 1), new ScheduledTask(533, 643, 2), new ScheduledTask(398, 486, 3), new ScheduledTask(486, 530, 3), new ScheduledTask(900, 1032, 0), new ScheduledTask(686, 774, 2)};
        int[] expectedProcessorEndTimes = new int[]{1032, 886, 774, 530};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot56_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.56_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 1032;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 88, 0), new ScheduledTask(88, 307, 0), new ScheduledTask(0, 154, 1), new ScheduledTask(307, 505, 0), new ScheduledTask(154, 373, 1), new ScheduledTask(314, 533, 2), new ScheduledTask(505, 681, 0), new ScheduledTask(373, 505, 1), new ScheduledTask(310, 398, 3), new ScheduledTask(681, 900, 0), new ScheduledTask(688, 886, 1), new ScheduledTask(533, 643, 2), new ScheduledTask(163, 251, 4), new ScheduledTask(377, 421, 4), new ScheduledTask(900, 1032, 0), new ScheduledTask(686, 774, 2)};
        int[] expectedProcessorEndTimes = new int[]{1032, 886, 774, 398, 421};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot25_CCR_9dot95_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.25_CCR_9.95_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 102;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 10, 0), new ScheduledTask(10, 17, 0), new ScheduledTask(17, 19, 0), new ScheduledTask(19, 24, 0), new ScheduledTask(24, 34, 0), new ScheduledTask(34, 39, 0), new ScheduledTask(39, 46, 0), new ScheduledTask(46, 53, 0), new ScheduledTask(53, 62, 0), new ScheduledTask(62, 66, 0), new ScheduledTask(66, 74, 0), new ScheduledTask(74, 81, 0), new ScheduledTask(81, 91, 0), new ScheduledTask(91, 94, 0), new ScheduledTask(94, 102, 0)};
        int[] expectedProcessorEndTimes = new int[]{102};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot25_CCR_9dot95_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.25_CCR_9.95_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 102;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 10, 0), new ScheduledTask(10, 17, 0), new ScheduledTask(17, 19, 0), new ScheduledTask(19, 24, 0), new ScheduledTask(24, 34, 0), new ScheduledTask(34, 39, 0), new ScheduledTask(39, 46, 0), new ScheduledTask(46, 53, 0), new ScheduledTask(53, 62, 0), new ScheduledTask(62, 66, 0), new ScheduledTask(66, 74, 0), new ScheduledTask(74, 81, 0), new ScheduledTask(81, 91, 0), new ScheduledTask(91, 94, 0), new ScheduledTask(94, 102, 0)};
        int[] expectedProcessorEndTimes = new int[]{102};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot25_CCR_9dot95_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.25_CCR_9.95_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 102;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 10, 0), new ScheduledTask(10, 17, 0), new ScheduledTask(17, 19, 0), new ScheduledTask(19, 24, 0), new ScheduledTask(24, 34, 0), new ScheduledTask(34, 39, 0), new ScheduledTask(39, 46, 0), new ScheduledTask(46, 53, 0), new ScheduledTask(53, 62, 0), new ScheduledTask(62, 66, 0), new ScheduledTask(66, 74, 0), new ScheduledTask(74, 81, 0), new ScheduledTask(81, 91, 0), new ScheduledTask(91, 94, 0), new ScheduledTask(94, 102, 0)};
        int[] expectedProcessorEndTimes = new int[]{102};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot31_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.31_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 336;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 27, 0), new ScheduledTask(27, 80, 0), new ScheduledTask(80, 101, 0), new ScheduledTask(30, 46, 1), new ScheduledTask(106, 122, 1), new ScheduledTask(101, 117, 0), new ScheduledTask(124, 167, 1), new ScheduledTask(131, 184, 0), new ScheduledTask(167, 215, 1), new ScheduledTask(215, 231, 1), new ScheduledTask(231, 247, 1), new ScheduledTask(252, 268, 0), new ScheduledTask(268, 289, 0), new ScheduledTask(247, 268, 1), new ScheduledTask(275, 286, 1), new ScheduledTask(293, 336, 0)};
        int[] expectedProcessorEndTimes = new int[]{336, 286};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot31_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.31_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 331;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 27, 0), new ScheduledTask(27, 80, 0), new ScheduledTask(80, 101, 0), new ScheduledTask(30, 46, 1), new ScheduledTask(106, 122, 2), new ScheduledTask(101, 117, 0), new ScheduledTask(124, 167, 2), new ScheduledTask(131, 184, 3), new ScheduledTask(167, 215, 2), new ScheduledTask(215, 231, 2), new ScheduledTask(231, 247, 2), new ScheduledTask(247, 263, 2), new ScheduledTask(263, 284, 2), new ScheduledTask(255, 276, 0), new ScheduledTask(270, 281, 3), new ScheduledTask(288, 331, 2)};
        int[] expectedProcessorEndTimes = new int[]{276, 46, 331, 281};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot31_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.31_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 331;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 27, 0), new ScheduledTask(27, 80, 0), new ScheduledTask(80, 101, 0), new ScheduledTask(30, 46, 1), new ScheduledTask(106, 122, 2), new ScheduledTask(101, 117, 0), new ScheduledTask(124, 167, 2), new ScheduledTask(131, 184, 3), new ScheduledTask(167, 215, 2), new ScheduledTask(215, 231, 2), new ScheduledTask(231, 247, 2), new ScheduledTask(247, 263, 2), new ScheduledTask(263, 284, 2), new ScheduledTask(255, 276, 4), new ScheduledTask(270, 281, 5), new ScheduledTask(288, 331, 2)};
        int[] expectedProcessorEndTimes = new int[]{117, 46, 331, 184, 276, 281};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot31_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.31_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 280;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 30, 0), new ScheduledTask(30, 43, 0), new ScheduledTask(43, 77, 0), new ScheduledTask(0, 21, 1), new ScheduledTask(82, 99, 1), new ScheduledTask(77, 94, 0), new ScheduledTask(99, 107, 1), new ScheduledTask(107, 128, 1), new ScheduledTask(128, 162, 1), new ScheduledTask(104, 134, 0), new ScheduledTask(162, 170, 1), new ScheduledTask(170, 208, 1), new ScheduledTask(164, 194, 0), new ScheduledTask(208, 238, 1), new ScheduledTask(238, 280, 1), new ScheduledTask(245, 266, 0)};
        int[] expectedProcessorEndTimes = new int[]{266, 280};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot31_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.31_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 280;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 30, 0), new ScheduledTask(30, 43, 0), new ScheduledTask(43, 77, 0), new ScheduledTask(0, 21, 1), new ScheduledTask(82, 99, 2), new ScheduledTask(77, 94, 0), new ScheduledTask(99, 107, 2), new ScheduledTask(107, 128, 2), new ScheduledTask(128, 162, 2), new ScheduledTask(104, 134, 3), new ScheduledTask(162, 170, 2), new ScheduledTask(170, 208, 2), new ScheduledTask(164, 194, 0), new ScheduledTask(208, 238, 2), new ScheduledTask(238, 280, 2), new ScheduledTask(245, 266, 0)};
        int[] expectedProcessorEndTimes = new int[]{266, 21, 280, 134};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot31_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.31_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 280;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 30, 0), new ScheduledTask(30, 43, 0), new ScheduledTask(43, 77, 0), new ScheduledTask(0, 21, 1), new ScheduledTask(82, 99, 2), new ScheduledTask(77, 94, 0), new ScheduledTask(99, 107, 2), new ScheduledTask(107, 128, 2), new ScheduledTask(128, 162, 2), new ScheduledTask(104, 134, 3), new ScheduledTask(162, 170, 2), new ScheduledTask(170, 208, 2), new ScheduledTask(164, 194, 4), new ScheduledTask(208, 238, 2), new ScheduledTask(238, 280, 2), new ScheduledTask(245, 266, 5)};
        int[] expectedProcessorEndTimes = new int[]{94, 21, 280, 134, 194, 266};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot50_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.50_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 3117;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 395, 0), new ScheduledTask(0, 395, 1), new ScheduledTask(395, 711, 0), new ScheduledTask(711, 987, 0), new ScheduledTask(987, 1066, 0), new ScheduledTask(716, 874, 1), new ScheduledTask(1066, 1184, 0), new ScheduledTask(1184, 1302, 0), new ScheduledTask(1302, 1420, 0), new ScheduledTask(1310, 1665, 1), new ScheduledTask(1420, 1696, 0), new ScheduledTask(1665, 2020, 1), new ScheduledTask(1696, 2051, 0), new ScheduledTask(2051, 2406, 0), new ScheduledTask(2406, 2801, 0), new ScheduledTask(2801, 3117, 0)};
        int[] expectedProcessorEndTimes = new int[]{3117, 2020};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot50_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.50_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 3117;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 395, 0), new ScheduledTask(0, 395, 1), new ScheduledTask(395, 711, 0), new ScheduledTask(711, 987, 0), new ScheduledTask(987, 1066, 0), new ScheduledTask(716, 874, 1), new ScheduledTask(1066, 1184, 0), new ScheduledTask(1184, 1302, 0), new ScheduledTask(1302, 1420, 0), new ScheduledTask(1310, 1665, 1), new ScheduledTask(1420, 1696, 0), new ScheduledTask(1665, 2020, 1), new ScheduledTask(1696, 2051, 0), new ScheduledTask(2051, 2406, 0), new ScheduledTask(2406, 2801, 0), new ScheduledTask(2801, 3117, 0)};
        int[] expectedProcessorEndTimes = new int[]{3117, 2020};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot50_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.50_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 3117;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 395, 0), new ScheduledTask(0, 395, 1), new ScheduledTask(395, 711, 0), new ScheduledTask(711, 987, 0), new ScheduledTask(987, 1066, 0), new ScheduledTask(716, 874, 1), new ScheduledTask(1066, 1184, 0), new ScheduledTask(1184, 1302, 0), new ScheduledTask(1302, 1420, 0), new ScheduledTask(1310, 1665, 1), new ScheduledTask(1420, 1696, 0), new ScheduledTask(1665, 2020, 1), new ScheduledTask(1696, 2051, 0), new ScheduledTask(2051, 2406, 0), new ScheduledTask(2406, 2801, 0), new ScheduledTask(2801, 3117, 0)};
        int[] expectedProcessorEndTimes = new int[]{3117, 2020};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot56_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.56_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 3409;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 262, 0), new ScheduledTask(262, 419, 0), new ScheduledTask(423, 685, 1), new ScheduledTask(419, 681, 0), new ScheduledTask(685, 895, 1), new ScheduledTask(895, 1366, 1), new ScheduledTask(1368, 1787, 0), new ScheduledTask(1680, 2047, 1), new ScheduledTask(1366, 1680, 1), new ScheduledTask(898, 1055, 0), new ScheduledTask(2047, 2361, 1), new ScheduledTask(2361, 2885, 1), new ScheduledTask(2885, 3042, 1), new ScheduledTask(1787, 1944, 0), new ScheduledTask(3042, 3147, 1), new ScheduledTask(3147, 3409, 1)};
        int[] expectedProcessorEndTimes = new int[]{1944, 3409};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot56_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.56_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 3147;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 262, 0), new ScheduledTask(262, 419, 0), new ScheduledTask(423, 685, 1), new ScheduledTask(419, 681, 0), new ScheduledTask(685, 895, 1), new ScheduledTask(895, 1366, 1), new ScheduledTask(1366, 1785, 1), new ScheduledTask(1372, 1739, 2), new ScheduledTask(1375, 1689, 3), new ScheduledTask(898, 1055, 0), new ScheduledTask(1785, 2099, 1), new ScheduledTask(2099, 2623, 1), new ScheduledTask(2623, 2780, 1), new ScheduledTask(1787, 1944, 0), new ScheduledTask(2780, 2885, 1), new ScheduledTask(2885, 3147, 1)};
        int[] expectedProcessorEndTimes = new int[]{1944, 3147, 1739, 1689};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot56_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.56_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 3147;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 262, 0), new ScheduledTask(262, 419, 0), new ScheduledTask(423, 685, 1), new ScheduledTask(419, 681, 0), new ScheduledTask(685, 895, 1), new ScheduledTask(895, 1366, 1), new ScheduledTask(1366, 1785, 1), new ScheduledTask(1372, 1739, 2), new ScheduledTask(1375, 1689, 3), new ScheduledTask(898, 1055, 4), new ScheduledTask(1785, 2099, 1), new ScheduledTask(2099, 2623, 1), new ScheduledTask(2623, 2780, 1), new ScheduledTask(1787, 1944, 5), new ScheduledTask(2780, 2885, 1), new ScheduledTask(2885, 3147, 1)};
        int[] expectedProcessorEndTimes = new int[]{681, 3147, 1739, 1689, 1055, 1944};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot56_CCR_10dot07_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.56_CCR_10.07_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 83;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(2, 10, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(10, 14, 0), new ScheduledTask(14, 22, 0), new ScheduledTask(33, 43, 1), new ScheduledTask(22, 29, 0), new ScheduledTask(43, 45, 1), new ScheduledTask(29, 39, 0), new ScheduledTask(49, 57, 1), new ScheduledTask(47, 49, 1), new ScheduledTask(57, 63, 1), new ScheduledTask(63, 65, 1), new ScheduledTask(65, 68, 1), new ScheduledTask(52, 59, 0), new ScheduledTask(73, 83, 1), new ScheduledTask(68, 73, 1)};
        int[] expectedProcessorEndTimes = new int[]{59, 83};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot56_CCR_10dot07_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.56_CCR_10.07_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 83;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(2, 10, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(10, 14, 0), new ScheduledTask(14, 22, 0), new ScheduledTask(33, 43, 1), new ScheduledTask(22, 29, 0), new ScheduledTask(43, 45, 1), new ScheduledTask(29, 39, 0), new ScheduledTask(49, 57, 1), new ScheduledTask(47, 49, 1), new ScheduledTask(57, 63, 1), new ScheduledTask(63, 65, 1), new ScheduledTask(65, 68, 1), new ScheduledTask(52, 59, 2), new ScheduledTask(73, 83, 1), new ScheduledTask(68, 73, 1)};
        int[] expectedProcessorEndTimes = new int[]{39, 83, 59};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot56_CCR_10dot07_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.56_CCR_10.07_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 83;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(2, 10, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(10, 14, 0), new ScheduledTask(14, 22, 0), new ScheduledTask(33, 43, 1), new ScheduledTask(22, 29, 0), new ScheduledTask(43, 45, 1), new ScheduledTask(29, 39, 0), new ScheduledTask(49, 57, 1), new ScheduledTask(47, 49, 1), new ScheduledTask(57, 63, 1), new ScheduledTask(63, 65, 1), new ScheduledTask(65, 68, 1), new ScheduledTask(52, 59, 2), new ScheduledTask(73, 83, 1), new ScheduledTask(68, 73, 1)};
        int[] expectedProcessorEndTimes = new int[]{39, 83, 59};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot69_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.69_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 3712;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 244, 0), new ScheduledTask(244, 342, 0), new ScheduledTask(342, 586, 0), new ScheduledTask(348, 739, 1), new ScheduledTask(586, 781, 0), new ScheduledTask(781, 1123, 0), new ScheduledTask(1123, 1514, 0), new ScheduledTask(791, 889, 1), new ScheduledTask(1514, 1856, 0), new ScheduledTask(1520, 1764, 1), new ScheduledTask(889, 1084, 1), new ScheduledTask(1856, 2051, 0), new ScheduledTask(2051, 2393, 0), new ScheduledTask(2393, 2784, 0), new ScheduledTask(2784, 3224, 0), new ScheduledTask(3224, 3712, 0)};
        int[] expectedProcessorEndTimes = new int[]{3712, 1764};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot69_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.69_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 3712;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 244, 0), new ScheduledTask(244, 342, 0), new ScheduledTask(342, 586, 0), new ScheduledTask(348, 739, 1), new ScheduledTask(586, 781, 0), new ScheduledTask(781, 1123, 0), new ScheduledTask(1123, 1514, 0), new ScheduledTask(791, 889, 1), new ScheduledTask(1514, 1856, 0), new ScheduledTask(1520, 1764, 1), new ScheduledTask(891, 1086, 2), new ScheduledTask(1856, 2051, 0), new ScheduledTask(2051, 2393, 0), new ScheduledTask(2393, 2784, 0), new ScheduledTask(2784, 3224, 0), new ScheduledTask(3224, 3712, 0)};
        int[] expectedProcessorEndTimes = new int[]{3712, 1764, 1086};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot69_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.69_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 3712;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 244, 0), new ScheduledTask(244, 342, 0), new ScheduledTask(342, 586, 0), new ScheduledTask(348, 739, 1), new ScheduledTask(586, 781, 0), new ScheduledTask(781, 1123, 0), new ScheduledTask(1123, 1514, 0), new ScheduledTask(791, 889, 1), new ScheduledTask(1514, 1856, 0), new ScheduledTask(1520, 1764, 1), new ScheduledTask(891, 1086, 2), new ScheduledTask(1856, 2051, 0), new ScheduledTask(2051, 2393, 0), new ScheduledTask(2393, 2784, 0), new ScheduledTask(2784, 3224, 0), new ScheduledTask(3224, 3712, 0)};
        int[] expectedProcessorEndTimes = new int[]{3712, 1764, 1086};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot75_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.75_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 338;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 28, 0), new ScheduledTask(0, 39, 1), new ScheduledTask(28, 62, 0), new ScheduledTask(62, 79, 0), new ScheduledTask(79, 113, 0), new ScheduledTask(72, 100, 1), new ScheduledTask(113, 158, 0), new ScheduledTask(100, 111, 1), new ScheduledTask(120, 131, 1), new ScheduledTask(158, 209, 0), new ScheduledTask(209, 237, 0), new ScheduledTask(237, 254, 0), new ScheduledTask(254, 310, 0), new ScheduledTask(256, 278, 1), new ScheduledTask(278, 323, 1), new ScheduledTask(310, 338, 0)};
        int[] expectedProcessorEndTimes = new int[]{338, 323};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot75_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.75_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 338;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 28, 0), new ScheduledTask(0, 39, 1), new ScheduledTask(28, 62, 0), new ScheduledTask(62, 79, 0), new ScheduledTask(79, 113, 0), new ScheduledTask(72, 100, 1), new ScheduledTask(113, 158, 0), new ScheduledTask(100, 111, 1), new ScheduledTask(120, 131, 1), new ScheduledTask(158, 209, 0), new ScheduledTask(209, 237, 0), new ScheduledTask(237, 254, 0), new ScheduledTask(254, 310, 0), new ScheduledTask(256, 278, 1), new ScheduledTask(278, 323, 1), new ScheduledTask(310, 338, 0)};
        int[] expectedProcessorEndTimes = new int[]{338, 323};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot75_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.75_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 338;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 28, 0), new ScheduledTask(0, 39, 1), new ScheduledTask(28, 62, 0), new ScheduledTask(62, 79, 0), new ScheduledTask(79, 113, 0), new ScheduledTask(72, 100, 1), new ScheduledTask(113, 158, 0), new ScheduledTask(100, 111, 1), new ScheduledTask(120, 131, 1), new ScheduledTask(158, 209, 0), new ScheduledTask(209, 237, 0), new ScheduledTask(237, 254, 0), new ScheduledTask(254, 310, 0), new ScheduledTask(256, 278, 1), new ScheduledTask(278, 323, 1), new ScheduledTask(310, 338, 0)};
        int[] expectedProcessorEndTimes = new int[]{338, 323};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot75_CCR_9dot90_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.75_CCR_9.90_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(7, 11, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(11, 18, 0), new ScheduledTask(18, 26, 0), new ScheduledTask(26, 32, 0), new ScheduledTask(40, 47, 1), new ScheduledTask(30, 40, 1), new ScheduledTask(47, 51, 1), new ScheduledTask(51, 58, 1), new ScheduledTask(32, 36, 0), new ScheduledTask(58, 62, 1), new ScheduledTask(65, 69, 1), new ScheduledTask(62, 65, 1), new ScheduledTask(69, 74, 1), new ScheduledTask(74, 84, 1), new ScheduledTask(84, 90, 1)};
        int[] expectedProcessorEndTimes = new int[]{36, 90};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot75_CCR_9dot90_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.75_CCR_9.90_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(11, 18, 0), new ScheduledTask(18, 26, 0), new ScheduledTask(26, 32, 0), new ScheduledTask(40, 47, 1), new ScheduledTask(30, 40, 1), new ScheduledTask(47, 51, 1), new ScheduledTask(51, 58, 1), new ScheduledTask(32, 36, 0), new ScheduledTask(58, 62, 1), new ScheduledTask(65, 69, 1), new ScheduledTask(62, 65, 1), new ScheduledTask(69, 74, 1), new ScheduledTask(74, 84, 1), new ScheduledTask(84, 90, 1)};
        int[] expectedProcessorEndTimes = new int[]{36, 90};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot75_CCR_9dot90_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.75_CCR_9.90_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(7, 11, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(11, 18, 0), new ScheduledTask(18, 26, 0), new ScheduledTask(26, 32, 0), new ScheduledTask(40, 47, 1), new ScheduledTask(30, 40, 1), new ScheduledTask(47, 51, 1), new ScheduledTask(51, 58, 1), new ScheduledTask(32, 36, 0), new ScheduledTask(58, 62, 1), new ScheduledTask(65, 69, 1), new ScheduledTask(62, 65, 1), new ScheduledTask(69, 74, 1), new ScheduledTask(74, 84, 1), new ScheduledTask(84, 90, 1)};
        int[] expectedProcessorEndTimes = new int[]{36, 90};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot75_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.75_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(9, 12, 0), new ScheduledTask(12, 16, 0), new ScheduledTask(16, 26, 0), new ScheduledTask(26, 31, 0), new ScheduledTask(31, 35, 0), new ScheduledTask(35, 44, 0), new ScheduledTask(3, 6, 1), new ScheduledTask(44, 46, 0), new ScheduledTask(46, 52, 0), new ScheduledTask(52, 55, 0), new ScheduledTask(55, 59, 0), new ScheduledTask(59, 66, 0), new ScheduledTask(66, 73, 0), new ScheduledTask(73, 78, 0)};
        int[] expectedProcessorEndTimes = new int[]{78, 6};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot75_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.75_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(9, 12, 0), new ScheduledTask(12, 16, 0), new ScheduledTask(16, 26, 0), new ScheduledTask(26, 31, 0), new ScheduledTask(31, 35, 0), new ScheduledTask(35, 44, 0), new ScheduledTask(3, 6, 1), new ScheduledTask(44, 46, 0), new ScheduledTask(46, 52, 0), new ScheduledTask(52, 55, 0), new ScheduledTask(55, 59, 0), new ScheduledTask(59, 66, 0), new ScheduledTask(66, 73, 0), new ScheduledTask(73, 78, 0)};
        int[] expectedProcessorEndTimes = new int[]{78, 6};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot75_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.75_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(9, 12, 0), new ScheduledTask(12, 16, 0), new ScheduledTask(16, 26, 0), new ScheduledTask(26, 31, 0), new ScheduledTask(31, 35, 0), new ScheduledTask(35, 44, 0), new ScheduledTask(3, 6, 1), new ScheduledTask(44, 46, 0), new ScheduledTask(46, 52, 0), new ScheduledTask(52, 55, 0), new ScheduledTask(55, 59, 0), new ScheduledTask(59, 66, 0), new ScheduledTask(66, 73, 0), new ScheduledTask(73, 78, 0)};
        int[] expectedProcessorEndTimes = new int[]{78, 6};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot81_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.81_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 358;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 37, 0), new ScheduledTask(0, 26, 1), new ScheduledTask(37, 56, 0), new ScheduledTask(56, 82, 0), new ScheduledTask(82, 119, 0), new ScheduledTask(66, 73, 1), new ScheduledTask(119, 153, 0), new ScheduledTask(153, 175, 0), new ScheduledTask(123, 130, 1), new ScheduledTask(175, 182, 0), new ScheduledTask(182, 219, 0), new ScheduledTask(219, 256, 0), new ScheduledTask(256, 290, 0), new ScheduledTask(290, 324, 0), new ScheduledTask(227, 264, 1), new ScheduledTask(324, 358, 0)};
        int[] expectedProcessorEndTimes = new int[]{358, 264};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot81_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.81_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 358;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 37, 0), new ScheduledTask(0, 26, 1), new ScheduledTask(37, 56, 0), new ScheduledTask(56, 82, 0), new ScheduledTask(82, 119, 0), new ScheduledTask(66, 73, 1), new ScheduledTask(119, 153, 0), new ScheduledTask(153, 175, 0), new ScheduledTask(123, 130, 1), new ScheduledTask(175, 182, 0), new ScheduledTask(182, 219, 0), new ScheduledTask(219, 256, 0), new ScheduledTask(256, 290, 0), new ScheduledTask(290, 324, 0), new ScheduledTask(227, 264, 1), new ScheduledTask(324, 358, 0)};
        int[] expectedProcessorEndTimes = new int[]{358, 264};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot81_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.81_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 358;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 37, 0), new ScheduledTask(0, 26, 1), new ScheduledTask(37, 56, 0), new ScheduledTask(56, 82, 0), new ScheduledTask(82, 119, 0), new ScheduledTask(66, 73, 1), new ScheduledTask(119, 153, 0), new ScheduledTask(153, 175, 0), new ScheduledTask(123, 130, 1), new ScheduledTask(175, 182, 0), new ScheduledTask(182, 219, 0), new ScheduledTask(219, 256, 0), new ScheduledTask(256, 290, 0), new ScheduledTask(290, 324, 0), new ScheduledTask(227, 264, 1), new ScheduledTask(324, 358, 0)};
        int[] expectedProcessorEndTimes = new int[]{358, 264};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot81_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.81_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 318;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 34, 0), new ScheduledTask(0, 21, 1), new ScheduledTask(21, 63, 1), new ScheduledTask(34, 72, 0), new ScheduledTask(72, 110, 0), new ScheduledTask(115, 157, 1), new ScheduledTask(110, 152, 0), new ScheduledTask(157, 174, 1), new ScheduledTask(174, 216, 1), new ScheduledTask(216, 254, 1), new ScheduledTask(182, 216, 0), new ScheduledTask(152, 173, 0), new ScheduledTask(254, 267, 1), new ScheduledTask(219, 227, 0), new ScheduledTask(267, 284, 1), new ScheduledTask(284, 318, 1)};
        int[] expectedProcessorEndTimes = new int[]{227, 318};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot81_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.81_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 318;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 34, 0), new ScheduledTask(0, 21, 1), new ScheduledTask(25, 67, 2), new ScheduledTask(34, 72, 0), new ScheduledTask(72, 110, 0), new ScheduledTask(115, 157, 3), new ScheduledTask(110, 152, 0), new ScheduledTask(157, 174, 3), new ScheduledTask(174, 216, 3), new ScheduledTask(216, 254, 3), new ScheduledTask(182, 216, 0), new ScheduledTask(152, 173, 0), new ScheduledTask(254, 267, 3), new ScheduledTask(219, 227, 0), new ScheduledTask(267, 284, 3), new ScheduledTask(284, 318, 3)};
        int[] expectedProcessorEndTimes = new int[]{227, 21, 67, 318};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot81_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.81_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 318;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 34, 0), new ScheduledTask(0, 21, 1), new ScheduledTask(21, 63, 1), new ScheduledTask(34, 72, 0), new ScheduledTask(72, 110, 0), new ScheduledTask(115, 157, 1), new ScheduledTask(110, 152, 0), new ScheduledTask(157, 174, 1), new ScheduledTask(174, 216, 1), new ScheduledTask(216, 254, 1), new ScheduledTask(182, 216, 2), new ScheduledTask(65, 86, 3), new ScheduledTask(254, 267, 1), new ScheduledTask(219, 227, 4), new ScheduledTask(267, 284, 1), new ScheduledTask(284, 318, 1)};
        int[] expectedProcessorEndTimes = new int[]{152, 318, 216, 86, 227};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot81_CCR_10dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.81_CCR_10.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(17, 23, 1), new ScheduledTask(10, 16, 0), new ScheduledTask(23, 30, 1), new ScheduledTask(35, 45, 1), new ScheduledTask(20, 29, 0), new ScheduledTask(30, 35, 1), new ScheduledTask(48, 54, 1), new ScheduledTask(54, 56, 1), new ScheduledTask(61, 64, 1), new ScheduledTask(56, 61, 1), new ScheduledTask(64, 74, 1), new ScheduledTask(74, 78, 1), new ScheduledTask(78, 87, 1), new ScheduledTask(87, 92, 1)};
        int[] expectedProcessorEndTimes = new int[]{29, 92};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot81_CCR_10dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.81_CCR_10.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(11, 17, 0), new ScheduledTask(17, 23, 0), new ScheduledTask(22, 29, 2), new ScheduledTask(38, 48, 0), new ScheduledTask(23, 32, 0), new ScheduledTask(29, 34, 2), new ScheduledTask(48, 54, 0), new ScheduledTask(54, 56, 0), new ScheduledTask(61, 64, 0), new ScheduledTask(56, 61, 0), new ScheduledTask(64, 74, 0), new ScheduledTask(74, 78, 0), new ScheduledTask(78, 87, 0), new ScheduledTask(87, 92, 0)};
        int[] expectedProcessorEndTimes = new int[]{92, 4, 34};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot81_CCR_10dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.81_CCR_10.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(11, 17, 0), new ScheduledTask(17, 23, 0), new ScheduledTask(22, 29, 1), new ScheduledTask(38, 48, 0), new ScheduledTask(23, 32, 0), new ScheduledTask(29, 34, 1), new ScheduledTask(48, 54, 0), new ScheduledTask(54, 56, 0), new ScheduledTask(61, 64, 0), new ScheduledTask(56, 61, 0), new ScheduledTask(64, 74, 0), new ScheduledTask(74, 78, 0), new ScheduledTask(78, 87, 0), new ScheduledTask(87, 92, 0)};
        int[] expectedProcessorEndTimes = new int[]{92, 34};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot88_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.88_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 91;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 12, 0), new ScheduledTask(19, 25, 0), new ScheduledTask(12, 19, 0), new ScheduledTask(29, 35, 0), new ScheduledTask(35, 44, 0), new ScheduledTask(25, 29, 0), new ScheduledTask(44, 46, 0), new ScheduledTask(46, 54, 0), new ScheduledTask(54, 59, 0), new ScheduledTask(63, 72, 0), new ScheduledTask(59, 63, 0), new ScheduledTask(64, 68, 1), new ScheduledTask(72, 74, 0), new ScheduledTask(74, 84, 0), new ScheduledTask(81, 91, 1)};
        int[] expectedProcessorEndTimes = new int[]{84, 91};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot88_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.88_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 91;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 12, 0), new ScheduledTask(19, 25, 0), new ScheduledTask(12, 19, 0), new ScheduledTask(29, 35, 0), new ScheduledTask(35, 44, 0), new ScheduledTask(25, 29, 0), new ScheduledTask(44, 46, 0), new ScheduledTask(46, 54, 0), new ScheduledTask(54, 59, 0), new ScheduledTask(63, 72, 0), new ScheduledTask(59, 63, 0), new ScheduledTask(64, 68, 1), new ScheduledTask(72, 74, 0), new ScheduledTask(74, 84, 0), new ScheduledTask(81, 91, 1)};
        int[] expectedProcessorEndTimes = new int[]{84, 91};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot88_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.88_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 91;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 12, 0), new ScheduledTask(19, 25, 0), new ScheduledTask(12, 19, 0), new ScheduledTask(29, 35, 0), new ScheduledTask(35, 44, 0), new ScheduledTask(25, 29, 0), new ScheduledTask(44, 46, 0), new ScheduledTask(46, 54, 0), new ScheduledTask(54, 59, 0), new ScheduledTask(63, 72, 0), new ScheduledTask(59, 63, 0), new ScheduledTask(64, 68, 1), new ScheduledTask(72, 74, 0), new ScheduledTask(74, 84, 0), new ScheduledTask(81, 91, 1)};
        int[] expectedProcessorEndTimes = new int[]{84, 91};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot94_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.94_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 3180;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 106, 0), new ScheduledTask(106, 636, 0), new ScheduledTask(108, 214, 1), new ScheduledTask(636, 954, 0), new ScheduledTask(954, 1431, 0), new ScheduledTask(961, 1120, 1), new ScheduledTask(1431, 1643, 0), new ScheduledTask(1643, 1802, 0), new ScheduledTask(1649, 1967, 1), new ScheduledTask(1802, 2067, 0), new ScheduledTask(2067, 2332, 0), new ScheduledTask(1967, 2073, 1), new ScheduledTask(2332, 2809, 0), new ScheduledTask(2335, 2547, 1), new ScheduledTask(2547, 2706, 1), new ScheduledTask(2809, 3180, 0)};
        int[] expectedProcessorEndTimes = new int[]{3180, 2706};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot94_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.94_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 3180;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 106, 0), new ScheduledTask(106, 636, 0), new ScheduledTask(108, 214, 1), new ScheduledTask(636, 954, 0), new ScheduledTask(954, 1431, 0), new ScheduledTask(961, 1120, 1), new ScheduledTask(1431, 1643, 0), new ScheduledTask(1643, 1802, 0), new ScheduledTask(1649, 1967, 1), new ScheduledTask(1802, 2067, 0), new ScheduledTask(2067, 2332, 0), new ScheduledTask(1804, 1910, 2), new ScheduledTask(2332, 2809, 0), new ScheduledTask(2335, 2547, 1), new ScheduledTask(2335, 2494, 2), new ScheduledTask(2809, 3180, 0)};
        int[] expectedProcessorEndTimes = new int[]{3180, 2547, 2494};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot94_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.94_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 3180;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 106, 0), new ScheduledTask(106, 636, 0), new ScheduledTask(108, 214, 1), new ScheduledTask(636, 954, 0), new ScheduledTask(954, 1431, 0), new ScheduledTask(961, 1120, 1), new ScheduledTask(1431, 1643, 0), new ScheduledTask(1643, 1802, 0), new ScheduledTask(1649, 1967, 1), new ScheduledTask(1802, 2067, 0), new ScheduledTask(2067, 2332, 0), new ScheduledTask(1804, 1910, 2), new ScheduledTask(2332, 2809, 0), new ScheduledTask(2335, 2547, 1), new ScheduledTask(2335, 2494, 2), new ScheduledTask(2809, 3180, 0)};
        int[] expectedProcessorEndTimes = new int[]{3180, 2547, 2494};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot94_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.94_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4433;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 104, 0), new ScheduledTask(104, 626, 0), new ScheduledTask(113, 217, 1), new ScheduledTask(626, 1043, 0), new ScheduledTask(1043, 1408, 0), new ScheduledTask(1408, 1721, 0), new ScheduledTask(1721, 2034, 0), new ScheduledTask(2034, 2295, 0), new ScheduledTask(2295, 2556, 0), new ScheduledTask(2556, 2921, 0), new ScheduledTask(2921, 3182, 0), new ScheduledTask(3182, 3599, 0), new ScheduledTask(3599, 3964, 0), new ScheduledTask(2926, 3082, 1), new ScheduledTask(3604, 3760, 1), new ScheduledTask(3964, 4433, 0)};
        int[] expectedProcessorEndTimes = new int[]{4433, 3760};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot94_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.94_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4433;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 104, 0), new ScheduledTask(104, 626, 0), new ScheduledTask(113, 217, 1), new ScheduledTask(626, 1043, 0), new ScheduledTask(1043, 1408, 0), new ScheduledTask(1408, 1721, 0), new ScheduledTask(1721, 2034, 0), new ScheduledTask(2034, 2295, 0), new ScheduledTask(2295, 2556, 0), new ScheduledTask(2556, 2921, 0), new ScheduledTask(2921, 3182, 0), new ScheduledTask(3182, 3599, 0), new ScheduledTask(3599, 3964, 0), new ScheduledTask(2926, 3082, 1), new ScheduledTask(3604, 3760, 1), new ScheduledTask(3964, 4433, 0)};
        int[] expectedProcessorEndTimes = new int[]{4433, 3760};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot94_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.94_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4433;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 104, 0), new ScheduledTask(104, 626, 0), new ScheduledTask(113, 217, 1), new ScheduledTask(626, 1043, 0), new ScheduledTask(1043, 1408, 0), new ScheduledTask(1408, 1721, 0), new ScheduledTask(1721, 2034, 0), new ScheduledTask(2034, 2295, 0), new ScheduledTask(2295, 2556, 0), new ScheduledTask(2556, 2921, 0), new ScheduledTask(2921, 3182, 0), new ScheduledTask(3182, 3599, 0), new ScheduledTask(3599, 3964, 0), new ScheduledTask(2926, 3082, 1), new ScheduledTask(3604, 3760, 1), new ScheduledTask(3964, 4433, 0)};
        int[] expectedProcessorEndTimes = new int[]{4433, 3760};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot94_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.94_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 395;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 40, 0), new ScheduledTask(40, 50, 0), new ScheduledTask(50, 90, 0), new ScheduledTask(90, 115, 0), new ScheduledTask(115, 165, 0), new ScheduledTask(165, 190, 0), new ScheduledTask(190, 235, 0), new ScheduledTask(120, 130, 1), new ScheduledTask(235, 275, 0), new ScheduledTask(171, 206, 1), new ScheduledTask(245, 270, 1), new ScheduledTask(275, 290, 0), new ScheduledTask(290, 310, 0), new ScheduledTask(310, 325, 0), new ScheduledTask(325, 350, 0), new ScheduledTask(350, 395, 0)};
        int[] expectedProcessorEndTimes = new int[]{395, 270};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot94_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.94_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 395;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 40, 0), new ScheduledTask(40, 50, 0), new ScheduledTask(50, 90, 0), new ScheduledTask(90, 115, 0), new ScheduledTask(115, 165, 0), new ScheduledTask(165, 190, 0), new ScheduledTask(190, 235, 0), new ScheduledTask(120, 130, 1), new ScheduledTask(235, 275, 0), new ScheduledTask(171, 206, 1), new ScheduledTask(245, 270, 1), new ScheduledTask(275, 290, 0), new ScheduledTask(290, 310, 0), new ScheduledTask(310, 325, 0), new ScheduledTask(325, 350, 0), new ScheduledTask(350, 395, 0)};
        int[] expectedProcessorEndTimes = new int[]{395, 270};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot94_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.94_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 395;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 40, 0), new ScheduledTask(40, 50, 0), new ScheduledTask(50, 90, 0), new ScheduledTask(90, 115, 0), new ScheduledTask(115, 165, 0), new ScheduledTask(165, 190, 0), new ScheduledTask(190, 235, 0), new ScheduledTask(120, 130, 1), new ScheduledTask(235, 275, 0), new ScheduledTask(171, 206, 1), new ScheduledTask(245, 270, 1), new ScheduledTask(275, 290, 0), new ScheduledTask(290, 310, 0), new ScheduledTask(310, 325, 0), new ScheduledTask(325, 350, 0), new ScheduledTask(350, 395, 0)};
        int[] expectedProcessorEndTimes = new int[]{395, 270};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot00_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.00_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 3181;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 196, 0), new ScheduledTask(196, 589, 0), new ScheduledTask(0, 275, 1), new ScheduledTask(589, 864, 0), new ScheduledTask(864, 1257, 0), new ScheduledTask(1257, 1532, 0), new ScheduledTask(1532, 1650, 0), new ScheduledTask(1650, 2003, 0), new ScheduledTask(1654, 1772, 1), new ScheduledTask(2003, 2278, 0), new ScheduledTask(2278, 2631, 0), new ScheduledTask(2281, 2556, 1), new ScheduledTask(2631, 2906, 0), new ScheduledTask(2638, 2756, 1), new ScheduledTask(2756, 3070, 1), new ScheduledTask(2906, 3181, 0)};
        int[] expectedProcessorEndTimes = new int[]{3181, 3070};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot00_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.00_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 3181;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 196, 0), new ScheduledTask(196, 589, 0), new ScheduledTask(0, 275, 1), new ScheduledTask(589, 864, 0), new ScheduledTask(864, 1257, 0), new ScheduledTask(1257, 1532, 0), new ScheduledTask(1532, 1650, 0), new ScheduledTask(1650, 2003, 0), new ScheduledTask(1654, 1772, 1), new ScheduledTask(2003, 2278, 0), new ScheduledTask(2278, 2631, 0), new ScheduledTask(2281, 2556, 1), new ScheduledTask(2631, 2906, 0), new ScheduledTask(2638, 2756, 1), new ScheduledTask(2756, 3070, 1), new ScheduledTask(2906, 3181, 0)};
        int[] expectedProcessorEndTimes = new int[]{3181, 3070};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot00_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.00_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 3181;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 196, 0), new ScheduledTask(196, 589, 0), new ScheduledTask(0, 275, 1), new ScheduledTask(589, 864, 0), new ScheduledTask(864, 1257, 0), new ScheduledTask(1257, 1532, 0), new ScheduledTask(1532, 1650, 0), new ScheduledTask(1650, 2003, 0), new ScheduledTask(1654, 1772, 1), new ScheduledTask(2003, 2278, 0), new ScheduledTask(2278, 2631, 0), new ScheduledTask(2281, 2556, 1), new ScheduledTask(2631, 2906, 0), new ScheduledTask(2638, 2756, 1), new ScheduledTask(2756, 3070, 1), new ScheduledTask(2906, 3181, 0)};
        int[] expectedProcessorEndTimes = new int[]{3181, 3070};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot00_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.00_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 413;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 27, 0), new ScheduledTask(27, 63, 0), new ScheduledTask(63, 107, 0), new ScheduledTask(107, 147, 0), new ScheduledTask(147, 191, 0), new ScheduledTask(149, 180, 1), new ScheduledTask(191, 213, 0), new ScheduledTask(213, 226, 0), new ScheduledTask(226, 266, 0), new ScheduledTask(266, 302, 0), new ScheduledTask(220, 233, 1), new ScheduledTask(302, 338, 0), new ScheduledTask(338, 369, 0), new ScheduledTask(271, 293, 1), new ScheduledTask(369, 382, 0), new ScheduledTask(382, 413, 0)};
        int[] expectedProcessorEndTimes = new int[]{413, 293};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot00_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.00_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 413;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 27, 0), new ScheduledTask(27, 63, 0), new ScheduledTask(63, 107, 0), new ScheduledTask(107, 147, 0), new ScheduledTask(147, 191, 0), new ScheduledTask(149, 180, 1), new ScheduledTask(191, 213, 0), new ScheduledTask(213, 226, 0), new ScheduledTask(226, 266, 0), new ScheduledTask(266, 302, 0), new ScheduledTask(220, 233, 1), new ScheduledTask(302, 338, 0), new ScheduledTask(338, 369, 0), new ScheduledTask(271, 293, 1), new ScheduledTask(369, 382, 0), new ScheduledTask(382, 413, 0)};
        int[] expectedProcessorEndTimes = new int[]{413, 293};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot00_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.00_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 413;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 27, 0), new ScheduledTask(27, 63, 0), new ScheduledTask(63, 107, 0), new ScheduledTask(107, 147, 0), new ScheduledTask(147, 191, 0), new ScheduledTask(149, 180, 1), new ScheduledTask(191, 213, 0), new ScheduledTask(213, 226, 0), new ScheduledTask(226, 266, 0), new ScheduledTask(266, 302, 0), new ScheduledTask(220, 233, 1), new ScheduledTask(302, 338, 0), new ScheduledTask(338, 369, 0), new ScheduledTask(271, 293, 1), new ScheduledTask(369, 382, 0), new ScheduledTask(382, 413, 0)};
        int[] expectedProcessorEndTimes = new int[]{413, 293};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot00_CCR_10dot09_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.00_CCR_10.09_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 10, 0), new ScheduledTask(10, 17, 0), new ScheduledTask(17, 27, 0), new ScheduledTask(27, 30, 0), new ScheduledTask(30, 36, 0), new ScheduledTask(36, 39, 0), new ScheduledTask(39, 41, 0), new ScheduledTask(41, 43, 0), new ScheduledTask(43, 53, 0), new ScheduledTask(47, 55, 1), new ScheduledTask(53, 55, 0), new ScheduledTask(61, 71, 0), new ScheduledTask(71, 74, 0), new ScheduledTask(76, 84, 0), new ScheduledTask(74, 76, 0)};
        int[] expectedProcessorEndTimes = new int[]{84, 55};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot00_CCR_10dot09_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.00_CCR_10.09_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 10, 0), new ScheduledTask(10, 17, 0), new ScheduledTask(17, 27, 0), new ScheduledTask(27, 30, 0), new ScheduledTask(30, 36, 0), new ScheduledTask(36, 39, 0), new ScheduledTask(39, 41, 0), new ScheduledTask(41, 43, 0), new ScheduledTask(43, 53, 0), new ScheduledTask(47, 55, 1), new ScheduledTask(53, 55, 0), new ScheduledTask(61, 71, 0), new ScheduledTask(71, 74, 0), new ScheduledTask(76, 84, 0), new ScheduledTask(74, 76, 0)};
        int[] expectedProcessorEndTimes = new int[]{84, 55};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot00_CCR_10dot09_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.00_CCR_10.09_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 10, 0), new ScheduledTask(10, 17, 0), new ScheduledTask(17, 27, 0), new ScheduledTask(27, 30, 0), new ScheduledTask(30, 36, 0), new ScheduledTask(36, 39, 0), new ScheduledTask(39, 41, 0), new ScheduledTask(41, 43, 0), new ScheduledTask(43, 53, 0), new ScheduledTask(47, 55, 1), new ScheduledTask(53, 55, 0), new ScheduledTask(61, 71, 0), new ScheduledTask(71, 74, 0), new ScheduledTask(76, 84, 0), new ScheduledTask(74, 76, 0)};
        int[] expectedProcessorEndTimes = new int[]{84, 55};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot06_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.06_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 2733;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 396, 0), new ScheduledTask(0, 357, 1), new ScheduledTask(396, 792, 0), new ScheduledTask(400, 559, 1), new ScheduledTask(792, 1069, 0), new ScheduledTask(559, 836, 1), new ScheduledTask(1069, 1346, 0), new ScheduledTask(1073, 1232, 1), new ScheduledTask(1346, 1465, 0), new ScheduledTask(1465, 1624, 0), new ScheduledTask(1624, 2020, 0), new ScheduledTask(1627, 2023, 1), new ScheduledTask(2020, 2377, 0), new ScheduledTask(2377, 2654, 0), new ScheduledTask(2380, 2539, 1), new ScheduledTask(2654, 2733, 0)};
        int[] expectedProcessorEndTimes = new int[]{2733, 2539};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot06_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.06_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 2733;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 396, 0), new ScheduledTask(0, 357, 1), new ScheduledTask(396, 792, 0), new ScheduledTask(400, 559, 1), new ScheduledTask(792, 1069, 0), new ScheduledTask(559, 836, 1), new ScheduledTask(1069, 1346, 0), new ScheduledTask(1073, 1232, 1), new ScheduledTask(1346, 1465, 0), new ScheduledTask(1465, 1624, 0), new ScheduledTask(1624, 2020, 0), new ScheduledTask(1627, 2023, 1), new ScheduledTask(2020, 2377, 0), new ScheduledTask(2377, 2654, 0), new ScheduledTask(2380, 2539, 1), new ScheduledTask(2654, 2733, 0)};
        int[] expectedProcessorEndTimes = new int[]{2733, 2539};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot06_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.06_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 2733;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 396, 0), new ScheduledTask(0, 357, 1), new ScheduledTask(396, 792, 0), new ScheduledTask(400, 559, 1), new ScheduledTask(792, 1069, 0), new ScheduledTask(559, 836, 1), new ScheduledTask(1069, 1346, 0), new ScheduledTask(1073, 1232, 1), new ScheduledTask(1346, 1465, 0), new ScheduledTask(1465, 1624, 0), new ScheduledTask(1624, 2020, 0), new ScheduledTask(1627, 2023, 1), new ScheduledTask(2020, 2377, 0), new ScheduledTask(2377, 2654, 0), new ScheduledTask(2380, 2539, 1), new ScheduledTask(2654, 2733, 0)};
        int[] expectedProcessorEndTimes = new int[]{2733, 2539};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot06_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.06_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 3776;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 484, 0), new ScheduledTask(484, 920, 0), new ScheduledTask(920, 1114, 0), new ScheduledTask(929, 1219, 1), new ScheduledTask(1114, 1356, 0), new ScheduledTask(1356, 1598, 0), new ScheduledTask(1598, 2082, 0), new ScheduledTask(2082, 2518, 0), new ScheduledTask(2087, 2474, 1), new ScheduledTask(2518, 2663, 0), new ScheduledTask(2663, 3050, 0), new ScheduledTask(2673, 2963, 1), new ScheduledTask(2963, 3108, 1), new ScheduledTask(3050, 3195, 0), new ScheduledTask(3195, 3534, 0), new ScheduledTask(3534, 3776, 0)};
        int[] expectedProcessorEndTimes = new int[]{3776, 3108};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot06_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.06_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 3776;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 484, 0), new ScheduledTask(484, 920, 0), new ScheduledTask(920, 1114, 0), new ScheduledTask(929, 1219, 1), new ScheduledTask(1114, 1356, 0), new ScheduledTask(1356, 1598, 0), new ScheduledTask(1598, 2082, 0), new ScheduledTask(2082, 2518, 0), new ScheduledTask(2087, 2474, 1), new ScheduledTask(2518, 2663, 0), new ScheduledTask(2663, 3050, 0), new ScheduledTask(2673, 2963, 1), new ScheduledTask(2668, 2813, 2), new ScheduledTask(3050, 3195, 0), new ScheduledTask(3195, 3534, 0), new ScheduledTask(3534, 3776, 0)};
        int[] expectedProcessorEndTimes = new int[]{3776, 2963, 2813};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot06_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.06_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 3776;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 484, 0), new ScheduledTask(484, 920, 0), new ScheduledTask(920, 1114, 0), new ScheduledTask(929, 1219, 1), new ScheduledTask(1114, 1356, 0), new ScheduledTask(1356, 1598, 0), new ScheduledTask(1598, 2082, 0), new ScheduledTask(2082, 2518, 0), new ScheduledTask(2087, 2474, 1), new ScheduledTask(2518, 2663, 0), new ScheduledTask(2663, 3050, 0), new ScheduledTask(2673, 2963, 1), new ScheduledTask(2668, 2813, 2), new ScheduledTask(3050, 3195, 0), new ScheduledTask(3195, 3534, 0), new ScheduledTask(3534, 3776, 0)};
        int[] expectedProcessorEndTimes = new int[]{3776, 2963, 2813};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot06_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.06_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 389;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 49, 0), new ScheduledTask(49, 88, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(10, 20, 1), new ScheduledTask(88, 122, 0), new ScheduledTask(52, 101, 1), new ScheduledTask(122, 151, 0), new ScheduledTask(154, 169, 1), new ScheduledTask(151, 161, 0), new ScheduledTask(169, 213, 1), new ScheduledTask(213, 252, 1), new ScheduledTask(252, 291, 1), new ScheduledTask(291, 335, 1), new ScheduledTask(296, 321, 0), new ScheduledTask(335, 345, 1), new ScheduledTask(345, 389, 1)};
        int[] expectedProcessorEndTimes = new int[]{321, 389};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot06_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.06_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 389;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 49, 0), new ScheduledTask(49, 88, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(10, 20, 1), new ScheduledTask(88, 122, 0), new ScheduledTask(52, 101, 2), new ScheduledTask(122, 151, 0), new ScheduledTask(154, 169, 3), new ScheduledTask(151, 161, 0), new ScheduledTask(169, 213, 3), new ScheduledTask(213, 252, 3), new ScheduledTask(252, 291, 3), new ScheduledTask(291, 335, 3), new ScheduledTask(296, 321, 0), new ScheduledTask(335, 345, 3), new ScheduledTask(345, 389, 3)};
        int[] expectedProcessorEndTimes = new int[]{321, 20, 101, 389};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot06_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.06_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 389;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 49, 0), new ScheduledTask(49, 88, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(17, 27, 2), new ScheduledTask(88, 122, 0), new ScheduledTask(52, 101, 3), new ScheduledTask(122, 151, 0), new ScheduledTask(154, 169, 4), new ScheduledTask(151, 161, 0), new ScheduledTask(169, 213, 4), new ScheduledTask(213, 252, 4), new ScheduledTask(252, 291, 4), new ScheduledTask(291, 335, 4), new ScheduledTask(296, 321, 5), new ScheduledTask(335, 345, 4), new ScheduledTask(345, 389, 4)};
        int[] expectedProcessorEndTimes = new int[]{161, 10, 27, 101, 389, 321};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot12_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.12_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 405;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 47, 0), new ScheduledTask(47, 94, 0), new ScheduledTask(94, 137, 0), new ScheduledTask(100, 143, 1), new ScheduledTask(137, 151, 0), new ScheduledTask(151, 170, 0), new ScheduledTask(170, 179, 0), new ScheduledTask(179, 212, 0), new ScheduledTask(161, 189, 1), new ScheduledTask(212, 259, 0), new ScheduledTask(259, 273, 0), new ScheduledTask(273, 301, 0), new ScheduledTask(301, 334, 0), new ScheduledTask(334, 358, 0), new ScheduledTask(358, 405, 0), new ScheduledTask(308, 346, 1)};
        int[] expectedProcessorEndTimes = new int[]{405, 346};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot12_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.12_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 405;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 47, 0), new ScheduledTask(47, 94, 0), new ScheduledTask(94, 137, 0), new ScheduledTask(100, 143, 1), new ScheduledTask(137, 151, 0), new ScheduledTask(151, 170, 0), new ScheduledTask(170, 179, 0), new ScheduledTask(179, 212, 0), new ScheduledTask(161, 189, 1), new ScheduledTask(212, 259, 0), new ScheduledTask(259, 273, 0), new ScheduledTask(273, 301, 0), new ScheduledTask(301, 334, 0), new ScheduledTask(334, 358, 0), new ScheduledTask(358, 405, 0), new ScheduledTask(308, 346, 1)};
        int[] expectedProcessorEndTimes = new int[]{405, 346};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot12_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.12_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 405;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 47, 0), new ScheduledTask(47, 94, 0), new ScheduledTask(94, 137, 0), new ScheduledTask(100, 143, 1), new ScheduledTask(137, 151, 0), new ScheduledTask(151, 170, 0), new ScheduledTask(170, 179, 0), new ScheduledTask(179, 212, 0), new ScheduledTask(161, 189, 1), new ScheduledTask(212, 259, 0), new ScheduledTask(259, 273, 0), new ScheduledTask(273, 301, 0), new ScheduledTask(301, 334, 0), new ScheduledTask(334, 358, 0), new ScheduledTask(358, 405, 0), new ScheduledTask(308, 346, 1)};
        int[] expectedProcessorEndTimes = new int[]{405, 346};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot19_CCR_10dot04_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.19_CCR_10.04_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 86;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 10, 0), new ScheduledTask(10, 14, 0), new ScheduledTask(14, 23, 0), new ScheduledTask(23, 31, 0), new ScheduledTask(26, 34, 1), new ScheduledTask(40, 42, 1), new ScheduledTask(35, 40, 1), new ScheduledTask(42, 50, 1), new ScheduledTask(50, 57, 1), new ScheduledTask(57, 64, 1), new ScheduledTask(64, 71, 1), new ScheduledTask(71, 76, 1), new ScheduledTask(76, 78, 1), new ScheduledTask(78, 82, 1), new ScheduledTask(82, 86, 1)};
        int[] expectedProcessorEndTimes = new int[]{31, 86};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot19_CCR_10dot04_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.19_CCR_10.04_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 86;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 10, 0), new ScheduledTask(10, 14, 0), new ScheduledTask(14, 23, 0), new ScheduledTask(23, 31, 0), new ScheduledTask(26, 34, 1), new ScheduledTask(40, 42, 1), new ScheduledTask(35, 40, 1), new ScheduledTask(42, 50, 1), new ScheduledTask(50, 57, 1), new ScheduledTask(57, 64, 1), new ScheduledTask(69, 76, 1), new ScheduledTask(64, 69, 1), new ScheduledTask(76, 78, 1), new ScheduledTask(78, 82, 1), new ScheduledTask(82, 86, 1)};
        int[] expectedProcessorEndTimes = new int[]{31, 86};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot19_CCR_10dot04_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.19_CCR_10.04_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 86;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 10, 0), new ScheduledTask(10, 14, 0), new ScheduledTask(14, 23, 0), new ScheduledTask(23, 31, 0), new ScheduledTask(26, 34, 1), new ScheduledTask(40, 42, 1), new ScheduledTask(35, 40, 1), new ScheduledTask(42, 50, 1), new ScheduledTask(50, 57, 1), new ScheduledTask(57, 64, 1), new ScheduledTask(69, 76, 1), new ScheduledTask(64, 69, 1), new ScheduledTask(76, 78, 1), new ScheduledTask(78, 82, 1), new ScheduledTask(82, 86, 1)};
        int[] expectedProcessorEndTimes = new int[]{31, 86};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot31_CCR_10dot09_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.31_CCR_10.09_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 115;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 11, 0), new ScheduledTask(11, 19, 0), new ScheduledTask(19, 25, 0), new ScheduledTask(25, 29, 0), new ScheduledTask(29, 32, 0), new ScheduledTask(32, 42, 0), new ScheduledTask(42, 47, 0), new ScheduledTask(47, 57, 0), new ScheduledTask(57, 67, 0), new ScheduledTask(67, 74, 0), new ScheduledTask(74, 84, 0), new ScheduledTask(84, 93, 0), new ScheduledTask(93, 103, 0), new ScheduledTask(103, 105, 0), new ScheduledTask(105, 115, 0)};
        int[] expectedProcessorEndTimes = new int[]{115};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot31_CCR_10dot09_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.31_CCR_10.09_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 115;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 11, 0), new ScheduledTask(11, 19, 0), new ScheduledTask(19, 25, 0), new ScheduledTask(25, 29, 0), new ScheduledTask(29, 32, 0), new ScheduledTask(32, 42, 0), new ScheduledTask(42, 47, 0), new ScheduledTask(47, 57, 0), new ScheduledTask(57, 67, 0), new ScheduledTask(67, 74, 0), new ScheduledTask(74, 84, 0), new ScheduledTask(84, 93, 0), new ScheduledTask(93, 103, 0), new ScheduledTask(103, 105, 0), new ScheduledTask(105, 115, 0)};
        int[] expectedProcessorEndTimes = new int[]{115};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot31_CCR_10dot09_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.31_CCR_10.09_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 115;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 11, 0), new ScheduledTask(11, 19, 0), new ScheduledTask(19, 25, 0), new ScheduledTask(25, 29, 0), new ScheduledTask(29, 32, 0), new ScheduledTask(32, 42, 0), new ScheduledTask(42, 47, 0), new ScheduledTask(47, 57, 0), new ScheduledTask(57, 67, 0), new ScheduledTask(67, 74, 0), new ScheduledTask(74, 84, 0), new ScheduledTask(84, 93, 0), new ScheduledTask(93, 103, 0), new ScheduledTask(103, 105, 0), new ScheduledTask(105, 115, 0)};
        int[] expectedProcessorEndTimes = new int[]{115};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot38_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.38_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4869;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 458, 0), new ScheduledTask(458, 1030, 0), new ScheduledTask(1030, 1316, 0), new ScheduledTask(1316, 1545, 0), new ScheduledTask(1545, 2117, 0), new ScheduledTask(2117, 2575, 0), new ScheduledTask(2575, 2975, 0), new ScheduledTask(2580, 2809, 1), new ScheduledTask(2975, 3261, 0), new ScheduledTask(2981, 3267, 1), new ScheduledTask(3267, 3782, 1), new ScheduledTask(3782, 4125, 1), new ScheduledTask(4125, 4239, 1), new ScheduledTask(4239, 4697, 1), new ScheduledTask(4697, 4869, 1), new ScheduledTask(4699, 4813, 0)};
        int[] expectedProcessorEndTimes = new int[]{4813, 4869};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot38_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.38_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4869;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 458, 0), new ScheduledTask(458, 1030, 0), new ScheduledTask(1030, 1316, 0), new ScheduledTask(1316, 1545, 0), new ScheduledTask(1545, 2117, 0), new ScheduledTask(2117, 2575, 0), new ScheduledTask(2575, 2975, 0), new ScheduledTask(2580, 2809, 1), new ScheduledTask(2975, 3261, 0), new ScheduledTask(2981, 3267, 1), new ScheduledTask(3267, 3782, 1), new ScheduledTask(3782, 4125, 1), new ScheduledTask(4125, 4239, 1), new ScheduledTask(4239, 4697, 1), new ScheduledTask(4697, 4869, 1), new ScheduledTask(4699, 4813, 0)};
        int[] expectedProcessorEndTimes = new int[]{4813, 4869};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot38_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.38_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4869;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 458, 0), new ScheduledTask(458, 1030, 0), new ScheduledTask(1030, 1316, 0), new ScheduledTask(1316, 1545, 0), new ScheduledTask(1545, 2117, 0), new ScheduledTask(2117, 2575, 0), new ScheduledTask(2575, 2975, 0), new ScheduledTask(2580, 2809, 1), new ScheduledTask(2975, 3261, 0), new ScheduledTask(2981, 3267, 1), new ScheduledTask(3267, 3782, 1), new ScheduledTask(3782, 4125, 1), new ScheduledTask(4125, 4239, 1), new ScheduledTask(4239, 4697, 1), new ScheduledTask(4697, 4869, 1), new ScheduledTask(4699, 4813, 0)};
        int[] expectedProcessorEndTimes = new int[]{4813, 4869};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot38_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.38_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 469;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 23, 0), new ScheduledTask(23, 65, 0), new ScheduledTask(65, 107, 0), new ScheduledTask(107, 144, 0), new ScheduledTask(144, 186, 0), new ScheduledTask(186, 228, 0), new ScheduledTask(228, 260, 0), new ScheduledTask(260, 297, 0), new ScheduledTask(297, 315, 0), new ScheduledTask(320, 343, 1), new ScheduledTask(315, 361, 0), new ScheduledTask(343, 361, 1), new ScheduledTask(363, 395, 0), new ScheduledTask(395, 423, 0), new ScheduledTask(423, 451, 0), new ScheduledTask(451, 469, 0)};
        int[] expectedProcessorEndTimes = new int[]{469, 361};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot38_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.38_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 469;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 23, 0), new ScheduledTask(23, 65, 0), new ScheduledTask(65, 107, 0), new ScheduledTask(107, 144, 0), new ScheduledTask(144, 186, 0), new ScheduledTask(186, 228, 0), new ScheduledTask(228, 260, 0), new ScheduledTask(260, 297, 0), new ScheduledTask(297, 315, 0), new ScheduledTask(320, 343, 1), new ScheduledTask(315, 361, 0), new ScheduledTask(343, 361, 1), new ScheduledTask(363, 395, 2), new ScheduledTask(395, 423, 2), new ScheduledTask(423, 451, 2), new ScheduledTask(451, 469, 2)};
        int[] expectedProcessorEndTimes = new int[]{361, 361, 469};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot38_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.38_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 469;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 23, 0), new ScheduledTask(23, 65, 0), new ScheduledTask(65, 107, 0), new ScheduledTask(107, 144, 0), new ScheduledTask(144, 186, 0), new ScheduledTask(186, 228, 0), new ScheduledTask(228, 260, 0), new ScheduledTask(260, 297, 0), new ScheduledTask(297, 315, 0), new ScheduledTask(320, 343, 1), new ScheduledTask(315, 361, 0), new ScheduledTask(343, 361, 1), new ScheduledTask(363, 395, 2), new ScheduledTask(395, 423, 2), new ScheduledTask(423, 451, 2), new ScheduledTask(451, 469, 2)};
        int[] expectedProcessorEndTimes = new int[]{361, 361, 469};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot38_CCR_9dot88_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.38_CCR_9.88_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 89;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 14, 0), new ScheduledTask(14, 17, 0), new ScheduledTask(17, 21, 0), new ScheduledTask(21, 25, 0), new ScheduledTask(27, 36, 0), new ScheduledTask(25, 27, 0), new ScheduledTask(36, 41, 0), new ScheduledTask(41, 47, 0), new ScheduledTask(47, 55, 0), new ScheduledTask(50, 52, 1), new ScheduledTask(56, 63, 1), new ScheduledTask(57, 66, 0), new ScheduledTask(69, 71, 1), new ScheduledTask(71, 81, 1), new ScheduledTask(81, 89, 1)};
        int[] expectedProcessorEndTimes = new int[]{66, 89};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot38_CCR_9dot88_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.38_CCR_9.88_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 89;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 14, 0), new ScheduledTask(14, 17, 0), new ScheduledTask(17, 21, 0), new ScheduledTask(21, 25, 0), new ScheduledTask(27, 36, 0), new ScheduledTask(25, 27, 0), new ScheduledTask(36, 41, 0), new ScheduledTask(41, 47, 0), new ScheduledTask(47, 55, 0), new ScheduledTask(50, 52, 1), new ScheduledTask(57, 64, 2), new ScheduledTask(57, 66, 0), new ScheduledTask(69, 71, 2), new ScheduledTask(71, 81, 2), new ScheduledTask(81, 89, 2)};
        int[] expectedProcessorEndTimes = new int[]{66, 52, 89};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot38_CCR_9dot88_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.38_CCR_9.88_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 89;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 14, 0), new ScheduledTask(14, 17, 0), new ScheduledTask(17, 21, 0), new ScheduledTask(21, 25, 0), new ScheduledTask(27, 36, 0), new ScheduledTask(25, 27, 0), new ScheduledTask(36, 41, 0), new ScheduledTask(41, 47, 0), new ScheduledTask(47, 55, 0), new ScheduledTask(50, 52, 1), new ScheduledTask(56, 63, 1), new ScheduledTask(57, 66, 0), new ScheduledTask(69, 71, 1), new ScheduledTask(71, 81, 1), new ScheduledTask(81, 89, 1)};
        int[] expectedProcessorEndTimes = new int[]{66, 89};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot56_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.56_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4351;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 472, 0), new ScheduledTask(0, 314, 1), new ScheduledTask(472, 891, 0), new ScheduledTask(891, 1101, 0), new ScheduledTask(901, 1058, 1), new ScheduledTask(1101, 1573, 0), new ScheduledTask(1573, 1835, 0), new ScheduledTask(1111, 1216, 1), new ScheduledTask(1835, 2149, 0), new ScheduledTask(2149, 2673, 0), new ScheduledTask(2673, 3145, 0), new ScheduledTask(3145, 3355, 0), new ScheduledTask(3355, 3879, 0), new ScheduledTask(3153, 3572, 1), new ScheduledTask(3879, 4351, 0), new ScheduledTask(3884, 4198, 1)};
        int[] expectedProcessorEndTimes = new int[]{4351, 4198};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot56_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.56_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4351;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 472, 0), new ScheduledTask(0, 314, 1), new ScheduledTask(472, 891, 0), new ScheduledTask(891, 1101, 0), new ScheduledTask(901, 1058, 1), new ScheduledTask(1101, 1573, 0), new ScheduledTask(1573, 1835, 0), new ScheduledTask(1111, 1216, 1), new ScheduledTask(1835, 2149, 0), new ScheduledTask(2149, 2673, 0), new ScheduledTask(2673, 3145, 0), new ScheduledTask(3145, 3355, 0), new ScheduledTask(3355, 3879, 0), new ScheduledTask(3153, 3572, 1), new ScheduledTask(3879, 4351, 0), new ScheduledTask(3884, 4198, 1)};
        int[] expectedProcessorEndTimes = new int[]{4351, 4198};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot56_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.56_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4351;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 472, 0), new ScheduledTask(0, 314, 1), new ScheduledTask(472, 891, 0), new ScheduledTask(891, 1101, 0), new ScheduledTask(901, 1058, 1), new ScheduledTask(1101, 1573, 0), new ScheduledTask(1573, 1835, 0), new ScheduledTask(1111, 1216, 1), new ScheduledTask(1835, 2149, 0), new ScheduledTask(2149, 2673, 0), new ScheduledTask(2673, 3145, 0), new ScheduledTask(3145, 3355, 0), new ScheduledTask(3355, 3879, 0), new ScheduledTask(3153, 3572, 1), new ScheduledTask(3879, 4351, 0), new ScheduledTask(3884, 4198, 1)};
        int[] expectedProcessorEndTimes = new int[]{4351, 4198};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 844;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 56, 0), new ScheduledTask(56, 168, 0), new ScheduledTask(168, 205, 0), new ScheduledTask(284, 433, 1), new ScheduledTask(261, 410, 0), new ScheduledTask(116, 284, 1), new ScheduledTask(60, 116, 1), new ScheduledTask(205, 261, 0), new ScheduledTask(433, 508, 1), new ScheduledTask(447, 522, 0), new ScheduledTask(410, 447, 0), new ScheduledTask(522, 690, 0), new ScheduledTask(690, 802, 0), new ScheduledTask(695, 770, 1), new ScheduledTask(770, 807, 1), new ScheduledTask(807, 844, 1)};
        int[] expectedProcessorEndTimes = new int[]{802, 844};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 754;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 56, 0), new ScheduledTask(56, 168, 0), new ScheduledTask(168, 205, 0), new ScheduledTask(211, 360, 1), new ScheduledTask(205, 354, 0), new ScheduledTask(197, 365, 2), new ScheduledTask(60, 116, 1), new ScheduledTask(209, 265, 3), new ScheduledTask(122, 197, 2), new ScheduledTask(362, 437, 1), new ScheduledTask(373, 410, 3), new ScheduledTask(437, 605, 1), new ScheduledTask(605, 717, 1), new ScheduledTask(610, 685, 3), new ScheduledTask(611, 648, 2), new ScheduledTask(717, 754, 1)};
        int[] expectedProcessorEndTimes = new int[]{354, 754, 648, 685};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 754;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 56, 0), new ScheduledTask(56, 168, 0), new ScheduledTask(168, 205, 0), new ScheduledTask(211, 360, 1), new ScheduledTask(205, 354, 0), new ScheduledTask(63, 231, 2), new ScheduledTask(60, 116, 3), new ScheduledTask(209, 265, 4), new ScheduledTask(122, 197, 4), new ScheduledTask(362, 437, 1), new ScheduledTask(239, 276, 5), new ScheduledTask(437, 605, 1), new ScheduledTask(605, 717, 1), new ScheduledTask(610, 685, 5), new ScheduledTask(611, 648, 4), new ScheduledTask(717, 754, 1)};
        int[] expectedProcessorEndTimes = new int[]{354, 754, 231, 116, 648, 685};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 725;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 47, 0), new ScheduledTask(47, 189, 0), new ScheduledTask(145, 224, 1), new ScheduledTask(50, 82, 1), new ScheduledTask(252, 299, 0), new ScheduledTask(224, 319, 1), new ScheduledTask(319, 398, 1), new ScheduledTask(398, 556, 1), new ScheduledTask(346, 425, 0), new ScheduledTask(189, 252, 0), new ScheduledTask(82, 145, 1), new ScheduledTask(299, 346, 0), new ScheduledTask(488, 567, 0), new ScheduledTask(425, 488, 0), new ScheduledTask(567, 646, 0), new ScheduledTask(646, 725, 0)};
        int[] expectedProcessorEndTimes = new int[]{725, 556};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 505;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 47, 0), new ScheduledTask(47, 189, 0), new ScheduledTask(54, 133, 1), new ScheduledTask(50, 82, 2), new ScheduledTask(85, 132, 3), new ScheduledTask(133, 228, 1), new ScheduledTask(145, 224, 2), new ScheduledTask(189, 347, 0), new ScheduledTask(195, 274, 3), new ScheduledTask(82, 145, 2), new ScheduledTask(132, 195, 3), new ScheduledTask(228, 275, 1), new ScheduledTask(224, 303, 2), new ScheduledTask(278, 341, 3), new ScheduledTask(347, 426, 0), new ScheduledTask(426, 505, 0)};
        int[] expectedProcessorEndTimes = new int[]{505, 275, 303, 341};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 505;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 47, 0), new ScheduledTask(47, 189, 0), new ScheduledTask(54, 133, 1), new ScheduledTask(50, 82, 2), new ScheduledTask(82, 129, 2), new ScheduledTask(133, 228, 1), new ScheduledTask(129, 208, 2), new ScheduledTask(189, 347, 0), new ScheduledTask(141, 220, 3), new ScheduledTask(88, 151, 4), new ScheduledTask(89, 152, 5), new ScheduledTask(151, 198, 4), new ScheduledTask(208, 287, 2), new ScheduledTask(230, 293, 1), new ScheduledTask(347, 426, 0), new ScheduledTask(426, 505, 0)};
        int[] expectedProcessorEndTimes = new int[]{505, 293, 287, 220, 198, 152};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 958;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 132, 0), new ScheduledTask(132, 211, 0), new ScheduledTask(211, 277, 0), new ScheduledTask(277, 317, 0), new ScheduledTask(317, 396, 0), new ScheduledTask(396, 462, 0), new ScheduledTask(462, 488, 0), new ScheduledTask(488, 528, 0), new ScheduledTask(528, 660, 0), new ScheduledTask(660, 779, 0), new ScheduledTask(665, 731, 1), new ScheduledTask(599, 665, 1), new ScheduledTask(731, 850, 1), new ScheduledTask(493, 599, 1), new ScheduledTask(779, 845, 0), new ScheduledTask(852, 958, 1)};
        int[] expectedProcessorEndTimes = new int[]{845, 958};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 885;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 132, 0), new ScheduledTask(132, 211, 0), new ScheduledTask(211, 277, 0), new ScheduledTask(277, 317, 0), new ScheduledTask(317, 396, 0), new ScheduledTask(396, 462, 0), new ScheduledTask(462, 488, 0), new ScheduledTask(488, 528, 0), new ScheduledTask(528, 660, 0), new ScheduledTask(490, 609, 1), new ScheduledTask(537, 603, 2), new ScheduledTask(536, 602, 3), new ScheduledTask(660, 779, 0), new ScheduledTask(602, 708, 3), new ScheduledTask(609, 675, 1), new ScheduledTask(779, 885, 0)};
        int[] expectedProcessorEndTimes = new int[]{885, 675, 603, 708};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 885;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 132, 0), new ScheduledTask(132, 211, 0), new ScheduledTask(211, 277, 0), new ScheduledTask(277, 317, 0), new ScheduledTask(317, 396, 0), new ScheduledTask(396, 462, 0), new ScheduledTask(462, 488, 0), new ScheduledTask(488, 528, 0), new ScheduledTask(528, 660, 0), new ScheduledTask(490, 609, 1), new ScheduledTask(537, 603, 2), new ScheduledTask(536, 602, 3), new ScheduledTask(660, 779, 0), new ScheduledTask(493, 599, 4), new ScheduledTask(609, 675, 1), new ScheduledTask(779, 885, 0)};
        int[] expectedProcessorEndTimes = new int[]{885, 675, 603, 602, 599};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 824;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 90, 0), new ScheduledTask(90, 162, 0), new ScheduledTask(162, 198, 0), new ScheduledTask(198, 288, 0), new ScheduledTask(288, 378, 0), new ScheduledTask(378, 432, 0), new ScheduledTask(383, 473, 1), new ScheduledTask(504, 594, 0), new ScheduledTask(432, 504, 0), new ScheduledTask(509, 545, 1), new ScheduledTask(473, 509, 1), new ScheduledTask(594, 684, 0), new ScheduledTask(545, 626, 1), new ScheduledTask(626, 689, 1), new ScheduledTask(689, 761, 1), new ScheduledTask(761, 824, 1)};
        int[] expectedProcessorEndTimes = new int[]{684, 824};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 720;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 90, 0), new ScheduledTask(90, 162, 0), new ScheduledTask(162, 198, 0), new ScheduledTask(198, 288, 0), new ScheduledTask(288, 378, 0), new ScheduledTask(378, 432, 0), new ScheduledTask(383, 473, 1), new ScheduledTask(432, 522, 0), new ScheduledTask(436, 508, 2), new ScheduledTask(384, 420, 3), new ScheduledTask(440, 476, 3), new ScheduledTask(473, 563, 1), new ScheduledTask(477, 558, 3), new ScheduledTask(522, 585, 0), new ScheduledTask(585, 657, 0), new ScheduledTask(657, 720, 0)};
        int[] expectedProcessorEndTimes = new int[]{720, 563, 508, 558};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 720;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 90, 0), new ScheduledTask(90, 162, 0), new ScheduledTask(162, 198, 0), new ScheduledTask(198, 288, 0), new ScheduledTask(288, 378, 0), new ScheduledTask(378, 432, 0), new ScheduledTask(383, 473, 1), new ScheduledTask(432, 522, 0), new ScheduledTask(436, 508, 2), new ScheduledTask(384, 420, 3), new ScheduledTask(440, 476, 3), new ScheduledTask(429, 519, 4), new ScheduledTask(473, 554, 1), new ScheduledTask(522, 585, 0), new ScheduledTask(585, 657, 0), new ScheduledTask(657, 720, 0)};
        int[] expectedProcessorEndTimes = new int[]{720, 554, 508, 476, 519};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 797;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 103, 0), new ScheduledTask(103, 193, 0), new ScheduledTask(193, 257, 0), new ScheduledTask(105, 208, 1), new ScheduledTask(257, 347, 0), new ScheduledTask(323, 400, 1), new ScheduledTask(259, 323, 1), new ScheduledTask(208, 259, 1), new ScheduledTask(400, 490, 1), new ScheduledTask(424, 501, 0), new ScheduledTask(347, 424, 0), new ScheduledTask(501, 527, 0), new ScheduledTask(537, 653, 1), new ScheduledTask(527, 604, 0), new ScheduledTask(604, 668, 0), new ScheduledTask(668, 797, 0)};
        int[] expectedProcessorEndTimes = new int[]{797, 653};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 622;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 103, 0), new ScheduledTask(103, 193, 0), new ScheduledTask(110, 174, 1), new ScheduledTask(105, 208, 2), new ScheduledTask(177, 267, 3), new ScheduledTask(193, 270, 0), new ScheduledTask(208, 272, 2), new ScheduledTask(203, 254, 1), new ScheduledTask(254, 344, 1), new ScheduledTask(274, 351, 0), new ScheduledTask(267, 344, 3), new ScheduledTask(351, 377, 0), new ScheduledTask(377, 493, 0), new ScheduledTask(385, 462, 3), new ScheduledTask(383, 447, 2), new ScheduledTask(493, 622, 0)};
        int[] expectedProcessorEndTimes = new int[]{622, 344, 447, 462};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 619;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 103, 0), new ScheduledTask(103, 193, 0), new ScheduledTask(110, 174, 1), new ScheduledTask(105, 208, 2), new ScheduledTask(174, 264, 1), new ScheduledTask(193, 270, 0), new ScheduledTask(199, 263, 3), new ScheduledTask(203, 254, 4), new ScheduledTask(208, 298, 2), new ScheduledTask(270, 347, 0), new ScheduledTask(264, 341, 1), new ScheduledTask(348, 374, 0), new ScheduledTask(374, 490, 0), new ScheduledTask(382, 459, 1), new ScheduledTask(380, 444, 2), new ScheduledTask(490, 619, 0)};
        int[] expectedProcessorEndTimes = new int[]{619, 459, 444, 263, 254};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 827;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 100, 0), new ScheduledTask(100, 189, 0), new ScheduledTask(189, 256, 0), new ScheduledTask(256, 289, 0), new ScheduledTask(289, 311, 0), new ScheduledTask(311, 367, 0), new ScheduledTask(314, 414, 1), new ScheduledTask(447, 559, 1), new ScheduledTask(467, 534, 0), new ScheduledTask(414, 447, 1), new ScheduledTask(367, 445, 0), new ScheduledTask(534, 646, 0), new ScheduledTask(559, 648, 1), new ScheduledTask(445, 467, 0), new ScheduledTask(649, 738, 1), new ScheduledTask(738, 827, 1)};
        int[] expectedProcessorEndTimes = new int[]{646, 827};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 746;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 100, 0), new ScheduledTask(100, 189, 0), new ScheduledTask(189, 256, 0), new ScheduledTask(256, 289, 0), new ScheduledTask(289, 311, 0), new ScheduledTask(311, 367, 0), new ScheduledTask(314, 414, 1), new ScheduledTask(367, 479, 0), new ScheduledTask(375, 442, 2), new ScheduledTask(374, 407, 3), new ScheduledTask(407, 485, 3), new ScheduledTask(414, 526, 1), new ScheduledTask(479, 568, 0), new ScheduledTask(485, 507, 3), new ScheduledTask(568, 657, 0), new ScheduledTask(657, 746, 0)};
        int[] expectedProcessorEndTimes = new int[]{746, 526, 442, 507};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 746;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 100, 0), new ScheduledTask(100, 189, 0), new ScheduledTask(189, 256, 0), new ScheduledTask(256, 289, 0), new ScheduledTask(289, 311, 0), new ScheduledTask(311, 367, 0), new ScheduledTask(314, 414, 1), new ScheduledTask(367, 479, 0), new ScheduledTask(375, 442, 2), new ScheduledTask(374, 407, 3), new ScheduledTask(314, 392, 4), new ScheduledTask(414, 526, 1), new ScheduledTask(479, 568, 0), new ScheduledTask(392, 414, 4), new ScheduledTask(568, 657, 0), new ScheduledTask(657, 746, 0)};
        int[] expectedProcessorEndTimes = new int[]{746, 526, 442, 407, 414};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 665;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 24, 0), new ScheduledTask(52, 136, 1), new ScheduledTask(24, 84, 0), new ScheduledTask(228, 324, 0), new ScheduledTask(316, 412, 1), new ScheduledTask(324, 445, 0), new ScheduledTask(220, 316, 1), new ScheduledTask(180, 228, 0), new ScheduledTask(28, 52, 1), new ScheduledTask(132, 180, 0), new ScheduledTask(84, 132, 0), new ScheduledTask(412, 533, 1), new ScheduledTask(136, 220, 1), new ScheduledTask(445, 529, 0), new ScheduledTask(533, 605, 1), new ScheduledTask(605, 665, 1)};
        int[] expectedProcessorEndTimes = new int[]{529, 665};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 475;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 24, 0), new ScheduledTask(24, 108, 0), new ScheduledTask(32, 92, 1), new ScheduledTask(117, 213, 2), new ScheduledTask(110, 206, 1), new ScheduledTask(100, 221, 3), new ScheduledTask(156, 252, 0), new ScheduledTask(108, 156, 0), new ScheduledTask(28, 52, 3), new ScheduledTask(206, 254, 1), new ScheduledTask(52, 100, 3), new ScheduledTask(221, 342, 3), new ScheduledTask(213, 297, 2), new ScheduledTask(255, 339, 1), new ScheduledTask(343, 415, 3), new ScheduledTask(415, 475, 3)};
        int[] expectedProcessorEndTimes = new int[]{252, 339, 297, 475};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 461;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 24, 0), new ScheduledTask(24, 108, 0), new ScheduledTask(32, 92, 1), new ScheduledTask(108, 204, 0), new ScheduledTask(110, 206, 1), new ScheduledTask(100, 221, 2), new ScheduledTask(96, 192, 3), new ScheduledTask(113, 161, 4), new ScheduledTask(28, 52, 5), new ScheduledTask(94, 142, 5), new ScheduledTask(142, 190, 5), new ScheduledTask(208, 329, 0), new ScheduledTask(190, 274, 5), new ScheduledTask(221, 305, 2), new ScheduledTask(329, 401, 0), new ScheduledTask(401, 461, 0)};
        int[] expectedProcessorEndTimes = new int[]{461, 206, 305, 192, 161, 274};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 842;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 99, 0), new ScheduledTask(99, 186, 0), new ScheduledTask(193, 280, 1), new ScheduledTask(260, 359, 0), new ScheduledTask(354, 441, 1), new ScheduledTask(186, 260, 0), new ScheduledTask(305, 354, 1), new ScheduledTask(280, 305, 1), new ScheduledTask(446, 557, 0), new ScheduledTask(441, 552, 1), new ScheduledTask(359, 446, 0), new ScheduledTask(557, 644, 0), new ScheduledTask(648, 759, 1), new ScheduledTask(644, 755, 0), new ScheduledTask(755, 817, 0), new ScheduledTask(817, 842, 0)};
        int[] expectedProcessorEndTimes = new int[]{842, 759};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 699;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 99, 0), new ScheduledTask(99, 186, 0), new ScheduledTask(186, 273, 0), new ScheduledTask(195, 294, 1), new ScheduledTask(273, 360, 0), new ScheduledTask(191, 265, 2), new ScheduledTask(282, 331, 3), new ScheduledTask(294, 319, 1), new ScheduledTask(360, 471, 0), new ScheduledTask(319, 430, 1), new ScheduledTask(265, 352, 2), new ScheduledTask(471, 558, 0), new ScheduledTask(562, 673, 2), new ScheduledTask(558, 669, 0), new ScheduledTask(567, 629, 3), new ScheduledTask(674, 699, 2)};
        int[] expectedProcessorEndTimes = new int[]{669, 430, 699, 629};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 699;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 99, 0), new ScheduledTask(99, 186, 0), new ScheduledTask(186, 273, 0), new ScheduledTask(195, 294, 1), new ScheduledTask(273, 360, 0), new ScheduledTask(191, 265, 2), new ScheduledTask(282, 331, 3), new ScheduledTask(279, 304, 4), new ScheduledTask(360, 471, 0), new ScheduledTask(294, 405, 1), new ScheduledTask(272, 359, 5), new ScheduledTask(471, 558, 0), new ScheduledTask(562, 673, 5), new ScheduledTask(558, 669, 0), new ScheduledTask(567, 629, 4), new ScheduledTask(674, 699, 5)};
        int[] expectedProcessorEndTimes = new int[]{669, 405, 265, 331, 629, 699};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 732;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 89, 0), new ScheduledTask(89, 178, 0), new ScheduledTask(178, 267, 0), new ScheduledTask(191, 241, 1), new ScheduledTask(297, 386, 0), new ScheduledTask(92, 112, 1), new ScheduledTask(112, 191, 1), new ScheduledTask(241, 330, 1), new ScheduledTask(330, 370, 1), new ScheduledTask(267, 297, 0), new ScheduledTask(386, 475, 0), new ScheduledTask(400, 469, 1), new ScheduledTask(370, 400, 1), new ScheduledTask(475, 534, 0), new ScheduledTask(534, 633, 0), new ScheduledTask(633, 732, 0)};
        int[] expectedProcessorEndTimes = new int[]{732, 469};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 702;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 89, 0), new ScheduledTask(89, 178, 0), new ScheduledTask(178, 267, 0), new ScheduledTask(94, 144, 1), new ScheduledTask(267, 356, 0), new ScheduledTask(92, 112, 2), new ScheduledTask(112, 191, 2), new ScheduledTask(144, 233, 1), new ScheduledTask(274, 314, 1), new ScheduledTask(274, 304, 2), new ScheduledTask(356, 445, 0), new ScheduledTask(197, 266, 3), new ScheduledTask(266, 296, 3), new ScheduledTask(445, 504, 0), new ScheduledTask(504, 603, 0), new ScheduledTask(603, 702, 0)};
        int[] expectedProcessorEndTimes = new int[]{702, 314, 304, 296};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 702;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 89, 0), new ScheduledTask(89, 178, 0), new ScheduledTask(178, 267, 0), new ScheduledTask(94, 144, 1), new ScheduledTask(267, 356, 0), new ScheduledTask(92, 112, 2), new ScheduledTask(112, 191, 2), new ScheduledTask(144, 233, 1), new ScheduledTask(274, 314, 1), new ScheduledTask(274, 304, 2), new ScheduledTask(356, 445, 0), new ScheduledTask(197, 266, 3), new ScheduledTask(241, 271, 4), new ScheduledTask(445, 504, 0), new ScheduledTask(504, 603, 0), new ScheduledTask(603, 702, 0)};
        int[] expectedProcessorEndTimes = new int[]{702, 314, 304, 266, 271};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 765;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 23, 0), new ScheduledTask(23, 139, 0), new ScheduledTask(31, 147, 1), new ScheduledTask(182, 298, 1), new ScheduledTask(139, 243, 0), new ScheduledTask(313, 417, 0), new ScheduledTask(243, 313, 0), new ScheduledTask(147, 182, 1), new ScheduledTask(391, 507, 1), new ScheduledTask(298, 391, 1), new ScheduledTask(417, 510, 0), new ScheduledTask(510, 533, 0), new ScheduledTask(541, 611, 1), new ScheduledTask(591, 661, 0), new ScheduledTask(533, 591, 0), new ScheduledTask(661, 765, 0)};
        int[] expectedProcessorEndTimes = new int[]{765, 611};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 553;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 23, 0), new ScheduledTask(23, 139, 0), new ScheduledTask(31, 147, 1), new ScheduledTask(139, 255, 0), new ScheduledTask(149, 253, 2), new ScheduledTask(33, 137, 3), new ScheduledTask(147, 217, 1), new ScheduledTask(142, 177, 3), new ScheduledTask(217, 333, 1), new ScheduledTask(255, 348, 0), new ScheduledTask(177, 270, 3), new ScheduledTask(348, 371, 0), new ScheduledTask(379, 449, 3), new ScheduledTask(371, 441, 0), new ScheduledTask(378, 436, 2), new ScheduledTask(449, 553, 3)};
        int[] expectedProcessorEndTimes = new int[]{441, 333, 436, 553};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 553;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 23, 0), new ScheduledTask(23, 139, 0), new ScheduledTask(31, 147, 1), new ScheduledTask(139, 255, 0), new ScheduledTask(149, 253, 2), new ScheduledTask(33, 137, 3), new ScheduledTask(150, 220, 4), new ScheduledTask(142, 177, 5), new ScheduledTask(226, 342, 1), new ScheduledTask(255, 348, 0), new ScheduledTask(137, 230, 3), new ScheduledTask(348, 371, 0), new ScheduledTask(379, 449, 5), new ScheduledTask(371, 441, 0), new ScheduledTask(378, 436, 4), new ScheduledTask(449, 553, 5)};
        int[] expectedProcessorEndTimes = new int[]{441, 342, 253, 230, 436, 553};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(11, 25, 0), new ScheduledTask(25, 39, 0), new ScheduledTask(29, 39, 1), new ScheduledTask(18, 22, 1), new ScheduledTask(39, 50, 1), new ScheduledTask(50, 57, 1), new ScheduledTask(45, 53, 0), new ScheduledTask(57, 70, 1), new ScheduledTask(26, 29, 1), new ScheduledTask(39, 45, 0), new ScheduledTask(22, 26, 1), new ScheduledTask(53, 63, 0), new ScheduledTask(63, 67, 0), new ScheduledTask(70, 74, 1), new ScheduledTask(74, 77, 1)};
        int[] expectedProcessorEndTimes = new int[]{67, 77};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(11, 25, 0), new ScheduledTask(25, 39, 0), new ScheduledTask(29, 39, 1), new ScheduledTask(18, 22, 2), new ScheduledTask(35, 46, 2), new ScheduledTask(39, 46, 0), new ScheduledTask(19, 27, 3), new ScheduledTask(49, 62, 0), new ScheduledTask(27, 30, 3), new ScheduledTask(30, 36, 3), new ScheduledTask(36, 40, 3), new ScheduledTask(39, 49, 1), new ScheduledTask(40, 44, 3), new ScheduledTask(62, 66, 0), new ScheduledTask(66, 69, 0)};
        int[] expectedProcessorEndTimes = new int[]{69, 49, 46, 44};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(11, 25, 0), new ScheduledTask(25, 39, 0), new ScheduledTask(29, 39, 1), new ScheduledTask(18, 22, 2), new ScheduledTask(35, 46, 2), new ScheduledTask(39, 46, 0), new ScheduledTask(19, 27, 3), new ScheduledTask(49, 62, 0), new ScheduledTask(24, 27, 4), new ScheduledTask(27, 33, 3), new ScheduledTask(32, 36, 4), new ScheduledTask(29, 39, 5), new ScheduledTask(37, 41, 4), new ScheduledTask(62, 66, 0), new ScheduledTask(66, 69, 0)};
        int[] expectedProcessorEndTimes = new int[]{69, 39, 46, 33, 41, 39};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(30, 38, 0), new ScheduledTask(11, 16, 1), new ScheduledTask(8, 12, 0), new ScheduledTask(30, 41, 1), new ScheduledTask(38, 50, 0), new ScheduledTask(51, 65, 1), new ScheduledTask(20, 30, 1), new ScheduledTask(16, 20, 1), new ScheduledTask(19, 30, 0), new ScheduledTask(12, 19, 0), new ScheduledTask(54, 62, 0), new ScheduledTask(41, 51, 1), new ScheduledTask(65, 69, 1), new ScheduledTask(50, 54, 0), new ScheduledTask(69, 81, 1)};
        int[] expectedProcessorEndTimes = new int[]{62, 81};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 60;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(11, 19, 1), new ScheduledTask(11, 16, 2), new ScheduledTask(8, 12, 0), new ScheduledTask(23, 34, 3), new ScheduledTask(22, 34, 0), new ScheduledTask(19, 33, 1), new ScheduledTask(12, 22, 0), new ScheduledTask(18, 22, 3), new ScheduledTask(25, 36, 2), new ScheduledTask(18, 25, 2), new ScheduledTask(33, 41, 1), new ScheduledTask(34, 44, 3), new ScheduledTask(44, 48, 3), new ScheduledTask(36, 40, 2), new ScheduledTask(48, 60, 3)};
        int[] expectedProcessorEndTimes = new int[]{34, 41, 40, 60};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(11, 19, 1), new ScheduledTask(11, 16, 2), new ScheduledTask(8, 12, 0), new ScheduledTask(16, 27, 2), new ScheduledTask(21, 33, 3), new ScheduledTask(19, 33, 1), new ScheduledTask(16, 26, 4), new ScheduledTask(18, 22, 5), new ScheduledTask(12, 23, 0), new ScheduledTask(26, 33, 4), new ScheduledTask(27, 35, 5), new ScheduledTask(30, 40, 2), new ScheduledTask(41, 45, 2), new ScheduledTask(33, 37, 4), new ScheduledTask(45, 57, 2)};
        int[] expectedProcessorEndTimes = new int[]{23, 33, 57, 33, 37, 35};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 79;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 11, 0), new ScheduledTask(11, 13, 0), new ScheduledTask(13, 15, 0), new ScheduledTask(15, 24, 0), new ScheduledTask(24, 31, 0), new ScheduledTask(43, 48, 0), new ScheduledTask(30, 37, 1), new ScheduledTask(31, 37, 0), new ScheduledTask(37, 43, 0), new ScheduledTask(48, 60, 1), new ScheduledTask(37, 48, 1), new ScheduledTask(48, 58, 0), new ScheduledTask(60, 62, 1), new ScheduledTask(62, 68, 1), new ScheduledTask(68, 79, 1)};
        int[] expectedProcessorEndTimes = new int[]{58, 79};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 75;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 11, 0), new ScheduledTask(11, 13, 0), new ScheduledTask(13, 15, 0), new ScheduledTask(15, 24, 0), new ScheduledTask(24, 31, 0), new ScheduledTask(31, 36, 0), new ScheduledTask(30, 37, 1), new ScheduledTask(41, 47, 1), new ScheduledTask(36, 42, 0), new ScheduledTask(32, 44, 2), new ScheduledTask(42, 53, 3), new ScheduledTask(48, 58, 1), new ScheduledTask(44, 46, 2), new ScheduledTask(58, 64, 1), new ScheduledTask(64, 75, 1)};
        int[] expectedProcessorEndTimes = new int[]{42, 75, 46, 53};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 75;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 11, 0), new ScheduledTask(11, 13, 0), new ScheduledTask(13, 15, 0), new ScheduledTask(15, 24, 0), new ScheduledTask(24, 31, 0), new ScheduledTask(31, 36, 0), new ScheduledTask(30, 37, 1), new ScheduledTask(41, 47, 1), new ScheduledTask(36, 42, 0), new ScheduledTask(32, 44, 2), new ScheduledTask(42, 53, 3), new ScheduledTask(48, 58, 1), new ScheduledTask(46, 48, 4), new ScheduledTask(58, 64, 1), new ScheduledTask(64, 75, 1)};
        int[] expectedProcessorEndTimes = new int[]{42, 75, 44, 53, 48};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 79;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 16, 0), new ScheduledTask(7, 15, 1), new ScheduledTask(27, 36, 1), new ScheduledTask(28, 39, 0), new ScheduledTask(16, 21, 0), new ScheduledTask(21, 28, 0), new ScheduledTask(15, 27, 1), new ScheduledTask(36, 48, 1), new ScheduledTask(39, 48, 0), new ScheduledTask(48, 51, 1), new ScheduledTask(51, 54, 1), new ScheduledTask(56, 65, 0), new ScheduledTask(65, 72, 0), new ScheduledTask(54, 63, 1), new ScheduledTask(72, 79, 0)};
        int[] expectedProcessorEndTimes = new int[]{79, 63};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(11, 22, 1), new ScheduledTask(7, 15, 2), new ScheduledTask(5, 14, 0), new ScheduledTask(24, 35, 3), new ScheduledTask(22, 27, 1), new ScheduledTask(17, 24, 3), new ScheduledTask(15, 27, 2), new ScheduledTask(14, 26, 0), new ScheduledTask(27, 36, 1), new ScheduledTask(35, 38, 3), new ScheduledTask(39, 42, 3), new ScheduledTask(44, 53, 2), new ScheduledTask(53, 60, 2), new ScheduledTask(42, 51, 3), new ScheduledTask(60, 67, 2)};
        int[] expectedProcessorEndTimes = new int[]{26, 36, 67, 51};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 16, 0), new ScheduledTask(7, 15, 1), new ScheduledTask(9, 18, 2), new ScheduledTask(15, 26, 1), new ScheduledTask(20, 25, 3), new ScheduledTask(17, 24, 4), new ScheduledTask(20, 32, 5), new ScheduledTask(18, 30, 2), new ScheduledTask(25, 34, 3), new ScheduledTask(35, 38, 2), new ScheduledTask(38, 41, 2), new ScheduledTask(43, 52, 5), new ScheduledTask(52, 59, 5), new ScheduledTask(41, 50, 2), new ScheduledTask(59, 66, 5)};
        int[] expectedProcessorEndTimes = new int[]{16, 26, 50, 34, 24, 66};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 20, 0), new ScheduledTask(11, 18, 1), new ScheduledTask(20, 29, 0), new ScheduledTask(18, 25, 1), new ScheduledTask(25, 34, 1), new ScheduledTask(29, 36, 0), new ScheduledTask(34, 45, 1), new ScheduledTask(36, 45, 0), new ScheduledTask(45, 52, 0), new ScheduledTask(45, 48, 1), new ScheduledTask(48, 58, 1), new ScheduledTask(52, 61, 0), new ScheduledTask(58, 65, 1), new ScheduledTask(65, 68, 1), new ScheduledTask(68, 71, 1)};
        int[] expectedProcessorEndTimes = new int[]{61, 71};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 20, 0), new ScheduledTask(11, 18, 1), new ScheduledTask(23, 32, 1), new ScheduledTask(29, 36, 0), new ScheduledTask(20, 29, 0), new ScheduledTask(26, 33, 2), new ScheduledTask(32, 43, 1), new ScheduledTask(31, 40, 3), new ScheduledTask(20, 27, 3), new ScheduledTask(28, 31, 3), new ScheduledTask(36, 46, 0), new ScheduledTask(43, 52, 1), new ScheduledTask(40, 47, 3), new ScheduledTask(52, 55, 1), new ScheduledTask(55, 58, 1)};
        int[] expectedProcessorEndTimes = new int[]{46, 58, 33, 47};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 20, 0), new ScheduledTask(11, 18, 1), new ScheduledTask(23, 32, 2), new ScheduledTask(29, 36, 0), new ScheduledTask(20, 29, 0), new ScheduledTask(26, 33, 3), new ScheduledTask(32, 43, 2), new ScheduledTask(27, 36, 4), new ScheduledTask(20, 27, 5), new ScheduledTask(28, 31, 5), new ScheduledTask(36, 46, 0), new ScheduledTask(43, 52, 2), new ScheduledTask(36, 43, 4), new ScheduledTask(52, 55, 2), new ScheduledTask(55, 58, 2)};
        int[] expectedProcessorEndTimes = new int[]{46, 18, 58, 33, 43, 31};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 89;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 17, 0), new ScheduledTask(17, 27, 0), new ScheduledTask(27, 33, 0), new ScheduledTask(32, 35, 1), new ScheduledTask(40, 51, 0), new ScheduledTask(39, 52, 1), new ScheduledTask(37, 40, 0), new ScheduledTask(51, 62, 0), new ScheduledTask(33, 37, 0), new ScheduledTask(52, 61, 1), new ScheduledTask(35, 39, 1), new ScheduledTask(61, 75, 1), new ScheduledTask(62, 75, 0), new ScheduledTask(75, 78, 1), new ScheduledTask(78, 89, 1)};
        int[] expectedProcessorEndTimes = new int[]{75, 89};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 75;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 17, 0), new ScheduledTask(17, 27, 0), new ScheduledTask(27, 33, 0), new ScheduledTask(32, 35, 1), new ScheduledTask(36, 47, 0), new ScheduledTask(36, 49, 2), new ScheduledTask(33, 36, 0), new ScheduledTask(39, 50, 1), new ScheduledTask(35, 39, 3), new ScheduledTask(45, 54, 3), new ScheduledTask(35, 39, 1), new ScheduledTask(47, 61, 0), new ScheduledTask(49, 62, 2), new ScheduledTask(61, 64, 0), new ScheduledTask(64, 75, 0)};
        int[] expectedProcessorEndTimes = new int[]{75, 50, 62, 54};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 75;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 17, 0), new ScheduledTask(17, 27, 0), new ScheduledTask(27, 33, 0), new ScheduledTask(32, 35, 1), new ScheduledTask(36, 47, 0), new ScheduledTask(36, 49, 2), new ScheduledTask(33, 36, 0), new ScheduledTask(35, 46, 1), new ScheduledTask(35, 39, 3), new ScheduledTask(45, 54, 4), new ScheduledTask(44, 48, 5), new ScheduledTask(47, 61, 0), new ScheduledTask(49, 62, 2), new ScheduledTask(61, 64, 0), new ScheduledTask(64, 75, 0)};
        int[] expectedProcessorEndTimes = new int[]{75, 46, 62, 39, 54, 48};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(10, 18, 1), new ScheduledTask(3, 12, 0), new ScheduledTask(24, 33, 1), new ScheduledTask(44, 58, 1), new ScheduledTask(33, 44, 1), new ScheduledTask(18, 24, 1), new ScheduledTask(39, 51, 0), new ScheduledTask(5, 10, 1), new ScheduledTask(30, 39, 0), new ScheduledTask(24, 30, 0), new ScheduledTask(13, 24, 0), new ScheduledTask(51, 59, 0), new ScheduledTask(58, 61, 1), new ScheduledTask(61, 64, 1), new ScheduledTask(64, 69, 1)};
        int[] expectedProcessorEndTimes = new int[]{59, 69};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 11, 0), new ScheduledTask(5, 14, 1), new ScheduledTask(11, 20, 0), new ScheduledTask(25, 39, 1), new ScheduledTask(14, 25, 1), new ScheduledTask(20, 26, 2), new ScheduledTask(20, 32, 0), new ScheduledTask(5, 10, 3), new ScheduledTask(21, 30, 3), new ScheduledTask(26, 32, 2), new ScheduledTask(10, 21, 3), new ScheduledTask(32, 40, 2), new ScheduledTask(39, 42, 1), new ScheduledTask(42, 45, 1), new ScheduledTask(45, 50, 1)};
        int[] expectedProcessorEndTimes = new int[]{32, 50, 40, 30};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 11, 0), new ScheduledTask(5, 14, 1), new ScheduledTask(11, 20, 0), new ScheduledTask(20, 34, 2), new ScheduledTask(14, 25, 1), new ScheduledTask(20, 26, 3), new ScheduledTask(20, 32, 0), new ScheduledTask(5, 10, 2), new ScheduledTask(19, 28, 4), new ScheduledTask(16, 22, 5), new ScheduledTask(22, 33, 5), new ScheduledTask(32, 40, 3), new ScheduledTask(39, 42, 2), new ScheduledTask(42, 45, 2), new ScheduledTask(45, 50, 2)};
        int[] expectedProcessorEndTimes = new int[]{32, 25, 50, 40, 28, 33};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(11, 20, 0), new ScheduledTask(3, 8, 0), new ScheduledTask(8, 11, 0), new ScheduledTask(34, 48, 0), new ScheduledTask(45, 59, 1), new ScheduledTask(20, 34, 0), new ScheduledTask(8, 22, 1), new ScheduledTask(34, 45, 1), new ScheduledTask(31, 34, 1), new ScheduledTask(28, 31, 1), new ScheduledTask(48, 61, 0), new ScheduledTask(59, 65, 1), new ScheduledTask(22, 28, 1), new ScheduledTask(65, 76, 1), new ScheduledTask(76, 84, 1)};
        int[] expectedProcessorEndTimes = new int[]{61, 84};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(8, 17, 0), new ScheduledTask(3, 8, 0), new ScheduledTask(22, 25, 1), new ScheduledTask(20, 34, 0), new ScheduledTask(13, 27, 2), new ScheduledTask(25, 39, 1), new ScheduledTask(8, 22, 1), new ScheduledTask(15, 26, 3), new ScheduledTask(17, 20, 0), new ScheduledTask(26, 29, 3), new ScheduledTask(34, 47, 0), new ScheduledTask(39, 45, 1), new ScheduledTask(29, 35, 3), new ScheduledTask(48, 59, 0), new ScheduledTask(59, 67, 0)};
        int[] expectedProcessorEndTimes = new int[]{67, 45, 27, 35};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(8, 17, 0), new ScheduledTask(3, 8, 0), new ScheduledTask(17, 20, 1), new ScheduledTask(20, 34, 0), new ScheduledTask(13, 27, 2), new ScheduledTask(20, 34, 1), new ScheduledTask(8, 22, 3), new ScheduledTask(15, 26, 4), new ScheduledTask(17, 20, 0), new ScheduledTask(21, 24, 5), new ScheduledTask(34, 47, 0), new ScheduledTask(37, 43, 1), new ScheduledTask(29, 35, 5), new ScheduledTask(47, 58, 0), new ScheduledTask(58, 66, 0)};
        int[] expectedProcessorEndTimes = new int[]{66, 43, 27, 22, 26, 35};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 91;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 10, 0), new ScheduledTask(5, 9, 1), new ScheduledTask(10, 24, 0), new ScheduledTask(24, 37, 0), new ScheduledTask(9, 20, 1), new ScheduledTask(32, 36, 1), new ScheduledTask(29, 32, 1), new ScheduledTask(37, 50, 0), new ScheduledTask(20, 29, 1), new ScheduledTask(36, 42, 1), new ScheduledTask(50, 64, 0), new ScheduledTask(64, 75, 0), new ScheduledTask(68, 78, 1), new ScheduledTask(75, 82, 0), new ScheduledTask(82, 91, 0)};
        int[] expectedProcessorEndTimes = new int[]{91, 78};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 10, 0), new ScheduledTask(5, 9, 1), new ScheduledTask(12, 26, 2), new ScheduledTask(10, 23, 0), new ScheduledTask(9, 20, 1), new ScheduledTask(22, 26, 3), new ScheduledTask(19, 22, 3), new ScheduledTask(28, 41, 2), new ScheduledTask(20, 29, 1), new ScheduledTask(26, 32, 3), new ScheduledTask(41, 55, 2), new ScheduledTask(55, 66, 2), new ScheduledTask(59, 69, 3), new ScheduledTask(66, 73, 2), new ScheduledTask(73, 82, 2)};
        int[] expectedProcessorEndTimes = new int[]{23, 29, 82, 69};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 10, 0), new ScheduledTask(5, 9, 1), new ScheduledTask(12, 26, 2), new ScheduledTask(10, 23, 0), new ScheduledTask(9, 20, 1), new ScheduledTask(13, 17, 3), new ScheduledTask(19, 22, 4), new ScheduledTask(28, 41, 2), new ScheduledTask(20, 29, 1), new ScheduledTask(27, 33, 5), new ScheduledTask(41, 55, 2), new ScheduledTask(55, 66, 2), new ScheduledTask(59, 69, 5), new ScheduledTask(65, 72, 4), new ScheduledTask(73, 82, 4)};
        int[] expectedProcessorEndTimes = new int[]{23, 29, 66, 17, 82, 69};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 102;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(17, 28, 0), new ScheduledTask(14, 22, 1), new ScheduledTask(28, 42, 0), new ScheduledTask(31, 43, 1), new ScheduledTask(58, 67, 1), new ScheduledTask(45, 57, 0), new ScheduledTask(9, 17, 0), new ScheduledTask(52, 58, 1), new ScheduledTask(43, 52, 1), new ScheduledTask(22, 31, 1), new ScheduledTask(67, 78, 1), new ScheduledTask(57, 71, 0), new ScheduledTask(42, 45, 0), new ScheduledTask(78, 87, 1), new ScheduledTask(87, 102, 1)};
        int[] expectedProcessorEndTimes = new int[]{71, 102};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 85;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(16, 27, 1), new ScheduledTask(9, 17, 0), new ScheduledTask(35, 49, 2), new ScheduledTask(26, 38, 3), new ScheduledTask(27, 36, 1), new ScheduledTask(17, 29, 0), new ScheduledTask(17, 25, 3), new ScheduledTask(36, 42, 1), new ScheduledTask(26, 35, 2), new ScheduledTask(29, 38, 0), new ScheduledTask(50, 61, 2), new ScheduledTask(40, 54, 3), new ScheduledTask(42, 45, 1), new ScheduledTask(61, 70, 2), new ScheduledTask(70, 85, 2)};
        int[] expectedProcessorEndTimes = new int[]{38, 45, 85, 54};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 85;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(16, 27, 1), new ScheduledTask(9, 17, 0), new ScheduledTask(34, 48, 2), new ScheduledTask(17, 29, 0), new ScheduledTask(27, 36, 1), new ScheduledTask(24, 36, 3), new ScheduledTask(17, 25, 4), new ScheduledTask(35, 41, 5), new ScheduledTask(26, 35, 5), new ScheduledTask(25, 34, 4), new ScheduledTask(49, 60, 2), new ScheduledTask(40, 54, 3), new ScheduledTask(41, 44, 5), new ScheduledTask(61, 70, 2), new ScheduledTask(70, 85, 2)};
        int[] expectedProcessorEndTimes = new int[]{29, 36, 85, 54, 34, 44};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 13, 0), new ScheduledTask(13, 23, 0), new ScheduledTask(41, 43, 0), new ScheduledTask(32, 41, 0), new ScheduledTask(48, 57, 0), new ScheduledTask(27, 32, 0), new ScheduledTask(23, 25, 0), new ScheduledTask(46, 52, 1), new ScheduledTask(45, 48, 0), new ScheduledTask(43, 45, 0), new ScheduledTask(67, 73, 0), new ScheduledTask(57, 64, 0), new ScheduledTask(25, 27, 0), new ScheduledTask(73, 82, 0), new ScheduledTask(82, 92, 0)};
        int[] expectedProcessorEndTimes = new int[]{92, 52};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 13, 0), new ScheduledTask(13, 23, 0), new ScheduledTask(41, 43, 0), new ScheduledTask(32, 41, 0), new ScheduledTask(48, 57, 0), new ScheduledTask(27, 32, 0), new ScheduledTask(23, 25, 0), new ScheduledTask(46, 52, 1), new ScheduledTask(45, 48, 0), new ScheduledTask(43, 45, 0), new ScheduledTask(67, 73, 0), new ScheduledTask(57, 64, 0), new ScheduledTask(25, 27, 0), new ScheduledTask(73, 82, 0), new ScheduledTask(82, 92, 0)};
        int[] expectedProcessorEndTimes = new int[]{92, 52};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 13, 0), new ScheduledTask(13, 23, 0), new ScheduledTask(41, 43, 0), new ScheduledTask(32, 41, 0), new ScheduledTask(48, 57, 0), new ScheduledTask(27, 32, 0), new ScheduledTask(23, 25, 0), new ScheduledTask(46, 52, 1), new ScheduledTask(45, 48, 0), new ScheduledTask(43, 45, 0), new ScheduledTask(67, 73, 0), new ScheduledTask(57, 64, 0), new ScheduledTask(25, 27, 0), new ScheduledTask(73, 82, 0), new ScheduledTask(82, 92, 0)};
        int[] expectedProcessorEndTimes = new int[]{92, 52};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 75;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 8, 0), new ScheduledTask(30, 39, 0), new ScheduledTask(8, 13, 0), new ScheduledTask(39, 47, 0), new ScheduledTask(47, 52, 0), new ScheduledTask(25, 27, 0), new ScheduledTask(15, 25, 0), new ScheduledTask(52, 54, 0), new ScheduledTask(13, 15, 0), new ScheduledTask(24, 30, 1), new ScheduledTask(27, 30, 0), new ScheduledTask(30, 39, 1), new ScheduledTask(54, 63, 0), new ScheduledTask(63, 65, 0), new ScheduledTask(65, 75, 0)};
        int[] expectedProcessorEndTimes = new int[]{75, 39};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 75;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 8, 0), new ScheduledTask(30, 39, 0), new ScheduledTask(8, 13, 0), new ScheduledTask(39, 47, 0), new ScheduledTask(47, 52, 0), new ScheduledTask(25, 27, 0), new ScheduledTask(15, 25, 0), new ScheduledTask(52, 54, 0), new ScheduledTask(13, 15, 0), new ScheduledTask(24, 30, 1), new ScheduledTask(27, 30, 0), new ScheduledTask(30, 39, 1), new ScheduledTask(54, 63, 0), new ScheduledTask(63, 65, 0), new ScheduledTask(65, 75, 0)};
        int[] expectedProcessorEndTimes = new int[]{75, 39};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 75;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 8, 0), new ScheduledTask(30, 39, 0), new ScheduledTask(8, 13, 0), new ScheduledTask(39, 47, 0), new ScheduledTask(47, 52, 0), new ScheduledTask(25, 27, 0), new ScheduledTask(15, 25, 0), new ScheduledTask(52, 54, 0), new ScheduledTask(13, 15, 0), new ScheduledTask(24, 30, 1), new ScheduledTask(27, 30, 0), new ScheduledTask(30, 39, 1), new ScheduledTask(54, 63, 0), new ScheduledTask(63, 65, 0), new ScheduledTask(65, 75, 0)};
        int[] expectedProcessorEndTimes = new int[]{75, 39};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 11, 0), new ScheduledTask(11, 18, 0), new ScheduledTask(18, 24, 0), new ScheduledTask(24, 34, 0), new ScheduledTask(34, 43, 0), new ScheduledTask(43, 49, 0), new ScheduledTask(49, 51, 0), new ScheduledTask(32, 40, 1), new ScheduledTask(51, 53, 0), new ScheduledTask(54, 56, 0), new ScheduledTask(56, 58, 0), new ScheduledTask(58, 63, 0), new ScheduledTask(63, 66, 0), new ScheduledTask(66, 73, 0), new ScheduledTask(73, 80, 0)};
        int[] expectedProcessorEndTimes = new int[]{80, 40};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 11, 0), new ScheduledTask(11, 18, 0), new ScheduledTask(18, 24, 0), new ScheduledTask(24, 34, 0), new ScheduledTask(34, 43, 0), new ScheduledTask(43, 49, 0), new ScheduledTask(49, 51, 0), new ScheduledTask(32, 40, 1), new ScheduledTask(51, 53, 0), new ScheduledTask(54, 56, 0), new ScheduledTask(56, 58, 0), new ScheduledTask(58, 63, 0), new ScheduledTask(63, 66, 0), new ScheduledTask(66, 73, 0), new ScheduledTask(73, 80, 0)};
        int[] expectedProcessorEndTimes = new int[]{80, 40};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 11, 0), new ScheduledTask(11, 18, 0), new ScheduledTask(18, 24, 0), new ScheduledTask(24, 34, 0), new ScheduledTask(34, 43, 0), new ScheduledTask(43, 49, 0), new ScheduledTask(49, 51, 0), new ScheduledTask(32, 40, 1), new ScheduledTask(51, 53, 0), new ScheduledTask(54, 56, 0), new ScheduledTask(56, 58, 0), new ScheduledTask(58, 63, 0), new ScheduledTask(63, 66, 0), new ScheduledTask(66, 73, 0), new ScheduledTask(73, 80, 0)};
        int[] expectedProcessorEndTimes = new int[]{80, 40};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(16, 25, 0), new ScheduledTask(26, 33, 1), new ScheduledTask(32, 35, 0), new ScheduledTask(60, 62, 1), new ScheduledTask(48, 57, 1), new ScheduledTask(43, 48, 1), new ScheduledTask(33, 43, 1), new ScheduledTask(25, 32, 0), new ScheduledTask(5, 10, 0), new ScheduledTask(35, 37, 0), new ScheduledTask(62, 66, 1), new ScheduledTask(10, 16, 0), new ScheduledTask(57, 60, 1), new ScheduledTask(66, 72, 1), new ScheduledTask(72, 82, 1)};
        int[] expectedProcessorEndTimes = new int[]{37, 82};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(16, 25, 0), new ScheduledTask(26, 33, 1), new ScheduledTask(32, 35, 0), new ScheduledTask(60, 62, 1), new ScheduledTask(48, 57, 1), new ScheduledTask(43, 48, 1), new ScheduledTask(33, 43, 1), new ScheduledTask(25, 32, 0), new ScheduledTask(5, 10, 0), new ScheduledTask(35, 37, 0), new ScheduledTask(62, 66, 1), new ScheduledTask(10, 16, 0), new ScheduledTask(57, 60, 1), new ScheduledTask(66, 72, 1), new ScheduledTask(72, 82, 1)};
        int[] expectedProcessorEndTimes = new int[]{37, 82};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(16, 25, 0), new ScheduledTask(26, 33, 1), new ScheduledTask(32, 35, 0), new ScheduledTask(60, 62, 1), new ScheduledTask(48, 57, 1), new ScheduledTask(43, 48, 1), new ScheduledTask(33, 43, 1), new ScheduledTask(25, 32, 0), new ScheduledTask(5, 10, 0), new ScheduledTask(35, 37, 0), new ScheduledTask(62, 66, 1), new ScheduledTask(10, 16, 0), new ScheduledTask(57, 60, 1), new ScheduledTask(66, 72, 1), new ScheduledTask(72, 82, 1)};
        int[] expectedProcessorEndTimes = new int[]{37, 82};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 94;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 11, 0), new ScheduledTask(57, 63, 1), new ScheduledTask(20, 30, 0), new ScheduledTask(11, 20, 0), new ScheduledTask(74, 80, 1), new ScheduledTask(70, 74, 1), new ScheduledTask(30, 38, 0), new ScheduledTask(48, 51, 0), new ScheduledTask(67, 70, 1), new ScheduledTask(38, 48, 0), new ScheduledTask(63, 67, 1), new ScheduledTask(80, 82, 1), new ScheduledTask(51, 61, 0), new ScheduledTask(82, 92, 1), new ScheduledTask(92, 94, 1)};
        int[] expectedProcessorEndTimes = new int[]{61, 94};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 94;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(29, 34, 0), new ScheduledTask(34, 40, 0), new ScheduledTask(6, 16, 0), new ScheduledTask(16, 25, 0), new ScheduledTask(44, 50, 0), new ScheduledTask(40, 44, 0), new ScheduledTask(49, 57, 1), new ScheduledTask(31, 34, 1), new ScheduledTask(50, 53, 0), new ScheduledTask(39, 49, 1), new ScheduledTask(25, 29, 0), new ScheduledTask(53, 55, 0), new ScheduledTask(57, 67, 1), new ScheduledTask(82, 92, 0), new ScheduledTask(92, 94, 0)};
        int[] expectedProcessorEndTimes = new int[]{94, 67};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 94;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 11, 0), new ScheduledTask(57, 63, 1), new ScheduledTask(20, 30, 0), new ScheduledTask(11, 20, 0), new ScheduledTask(74, 80, 1), new ScheduledTask(70, 74, 1), new ScheduledTask(30, 38, 0), new ScheduledTask(48, 51, 0), new ScheduledTask(67, 70, 1), new ScheduledTask(38, 48, 0), new ScheduledTask(63, 67, 1), new ScheduledTask(80, 82, 1), new ScheduledTask(51, 61, 0), new ScheduledTask(82, 92, 1), new ScheduledTask(92, 94, 1)};
        int[] expectedProcessorEndTimes = new int[]{61, 94};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 12, 0), new ScheduledTask(12, 22, 0), new ScheduledTask(22, 25, 0), new ScheduledTask(25, 27, 0), new ScheduledTask(27, 33, 0), new ScheduledTask(54, 63, 0), new ScheduledTask(68, 75, 0), new ScheduledTask(65, 68, 0), new ScheduledTask(63, 65, 0), new ScheduledTask(37, 46, 0), new ScheduledTask(75, 84, 0), new ScheduledTask(46, 54, 0), new ScheduledTask(33, 37, 0), new ScheduledTask(52, 59, 1), new ScheduledTask(84, 88, 0)};
        int[] expectedProcessorEndTimes = new int[]{88, 59};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 12, 0), new ScheduledTask(12, 22, 0), new ScheduledTask(22, 25, 0), new ScheduledTask(25, 27, 0), new ScheduledTask(27, 33, 0), new ScheduledTask(54, 63, 0), new ScheduledTask(68, 75, 0), new ScheduledTask(65, 68, 0), new ScheduledTask(63, 65, 0), new ScheduledTask(37, 46, 0), new ScheduledTask(75, 84, 0), new ScheduledTask(46, 54, 0), new ScheduledTask(33, 37, 0), new ScheduledTask(52, 59, 1), new ScheduledTask(84, 88, 0)};
        int[] expectedProcessorEndTimes = new int[]{88, 59};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 12, 0), new ScheduledTask(12, 22, 0), new ScheduledTask(22, 25, 0), new ScheduledTask(25, 27, 0), new ScheduledTask(27, 33, 0), new ScheduledTask(54, 63, 0), new ScheduledTask(68, 75, 0), new ScheduledTask(65, 68, 0), new ScheduledTask(63, 65, 0), new ScheduledTask(37, 46, 0), new ScheduledTask(75, 84, 0), new ScheduledTask(46, 54, 0), new ScheduledTask(33, 37, 0), new ScheduledTask(52, 59, 1), new ScheduledTask(84, 88, 0)};
        int[] expectedProcessorEndTimes = new int[]{88, 59};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(29, 37, 0), new ScheduledTask(3, 9, 0), new ScheduledTask(18, 25, 1), new ScheduledTask(15, 22, 0), new ScheduledTask(44, 51, 0), new ScheduledTask(13, 15, 0), new ScheduledTask(61, 65, 0), new ScheduledTask(9, 13, 0), new ScheduledTask(37, 44, 0), new ScheduledTask(25, 28, 1), new ScheduledTask(28, 37, 1), new ScheduledTask(22, 29, 0), new ScheduledTask(51, 61, 0), new ScheduledTask(65, 69, 0), new ScheduledTask(69, 76, 0)};
        int[] expectedProcessorEndTimes = new int[]{76, 37};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(29, 37, 0), new ScheduledTask(3, 9, 0), new ScheduledTask(18, 25, 1), new ScheduledTask(15, 22, 0), new ScheduledTask(44, 51, 0), new ScheduledTask(13, 15, 0), new ScheduledTask(61, 65, 0), new ScheduledTask(9, 13, 0), new ScheduledTask(37, 44, 0), new ScheduledTask(25, 28, 1), new ScheduledTask(28, 37, 1), new ScheduledTask(22, 29, 0), new ScheduledTask(51, 61, 0), new ScheduledTask(65, 69, 0), new ScheduledTask(69, 76, 0)};
        int[] expectedProcessorEndTimes = new int[]{76, 37};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(29, 37, 0), new ScheduledTask(3, 9, 0), new ScheduledTask(18, 25, 1), new ScheduledTask(15, 22, 0), new ScheduledTask(44, 51, 0), new ScheduledTask(13, 15, 0), new ScheduledTask(61, 65, 0), new ScheduledTask(9, 13, 0), new ScheduledTask(37, 44, 0), new ScheduledTask(25, 28, 1), new ScheduledTask(28, 37, 1), new ScheduledTask(22, 29, 0), new ScheduledTask(51, 61, 0), new ScheduledTask(65, 69, 0), new ScheduledTask(69, 76, 0)};
        int[] expectedProcessorEndTimes = new int[]{76, 37};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(36, 40, 0), new ScheduledTask(19, 24, 0), new ScheduledTask(61, 71, 1), new ScheduledTask(53, 61, 1), new ScheduledTask(27, 29, 1), new ScheduledTask(30, 36, 0), new ScheduledTask(29, 35, 1), new ScheduledTask(40, 49, 0), new ScheduledTask(49, 58, 0), new ScheduledTask(74, 77, 1), new ScheduledTask(24, 30, 0), new ScheduledTask(58, 60, 0), new ScheduledTask(77, 83, 1), new ScheduledTask(83, 92, 1)};
        int[] expectedProcessorEndTimes = new int[]{60, 92};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(36, 40, 0), new ScheduledTask(19, 24, 0), new ScheduledTask(61, 71, 1), new ScheduledTask(53, 61, 1), new ScheduledTask(27, 29, 2), new ScheduledTask(30, 36, 0), new ScheduledTask(46, 52, 1), new ScheduledTask(40, 49, 0), new ScheduledTask(49, 58, 0), new ScheduledTask(74, 77, 1), new ScheduledTask(24, 30, 0), new ScheduledTask(58, 60, 0), new ScheduledTask(77, 83, 1), new ScheduledTask(83, 92, 1)};
        int[] expectedProcessorEndTimes = new int[]{60, 92, 29};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(36, 40, 0), new ScheduledTask(19, 24, 0), new ScheduledTask(61, 71, 1), new ScheduledTask(53, 61, 1), new ScheduledTask(27, 29, 2), new ScheduledTask(30, 36, 0), new ScheduledTask(46, 52, 1), new ScheduledTask(40, 49, 0), new ScheduledTask(49, 58, 0), new ScheduledTask(74, 77, 1), new ScheduledTask(24, 30, 0), new ScheduledTask(58, 60, 0), new ScheduledTask(77, 83, 1), new ScheduledTask(83, 92, 1)};
        int[] expectedProcessorEndTimes = new int[]{60, 92, 29};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 96;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(48, 55, 0), new ScheduledTask(9, 12, 0), new ScheduledTask(27, 32, 1), new ScheduledTask(12, 17, 0), new ScheduledTask(55, 62, 0), new ScheduledTask(17, 26, 0), new ScheduledTask(32, 39, 1), new ScheduledTask(33, 41, 0), new ScheduledTask(26, 33, 0), new ScheduledTask(39, 46, 1), new ScheduledTask(41, 48, 0), new ScheduledTask(62, 66, 0), new ScheduledTask(74, 82, 0), new ScheduledTask(82, 90, 0), new ScheduledTask(90, 96, 0)};
        int[] expectedProcessorEndTimes = new int[]{96, 46};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 96;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(48, 55, 0), new ScheduledTask(9, 12, 0), new ScheduledTask(27, 32, 1), new ScheduledTask(12, 17, 0), new ScheduledTask(55, 62, 0), new ScheduledTask(32, 41, 0), new ScheduledTask(32, 39, 1), new ScheduledTask(24, 32, 0), new ScheduledTask(17, 24, 0), new ScheduledTask(39, 46, 1), new ScheduledTask(41, 48, 0), new ScheduledTask(62, 66, 0), new ScheduledTask(74, 82, 0), new ScheduledTask(82, 90, 0), new ScheduledTask(90, 96, 0)};
        int[] expectedProcessorEndTimes = new int[]{96, 46};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 96;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(48, 55, 0), new ScheduledTask(9, 12, 0), new ScheduledTask(27, 32, 1), new ScheduledTask(12, 17, 0), new ScheduledTask(55, 62, 0), new ScheduledTask(32, 41, 0), new ScheduledTask(32, 39, 1), new ScheduledTask(24, 32, 0), new ScheduledTask(17, 24, 0), new ScheduledTask(39, 46, 1), new ScheduledTask(41, 48, 0), new ScheduledTask(62, 66, 0), new ScheduledTask(74, 82, 0), new ScheduledTask(82, 90, 0), new ScheduledTask(90, 96, 0)};
        int[] expectedProcessorEndTimes = new int[]{96, 46};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 13, 0), new ScheduledTask(13, 23, 0), new ScheduledTask(23, 26, 0), new ScheduledTask(26, 31, 0), new ScheduledTask(31, 33, 0), new ScheduledTask(33, 40, 0), new ScheduledTask(40, 48, 0), new ScheduledTask(48, 53, 0), new ScheduledTask(53, 55, 0), new ScheduledTask(55, 57, 0), new ScheduledTask(57, 62, 0), new ScheduledTask(62, 64, 0), new ScheduledTask(64, 72, 0), new ScheduledTask(72, 80, 0), new ScheduledTask(80, 90, 0)};
        int[] expectedProcessorEndTimes = new int[]{90};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 13, 0), new ScheduledTask(13, 23, 0), new ScheduledTask(23, 26, 0), new ScheduledTask(26, 31, 0), new ScheduledTask(31, 33, 0), new ScheduledTask(33, 40, 0), new ScheduledTask(40, 48, 0), new ScheduledTask(48, 53, 0), new ScheduledTask(53, 55, 0), new ScheduledTask(55, 57, 0), new ScheduledTask(57, 62, 0), new ScheduledTask(62, 64, 0), new ScheduledTask(64, 72, 0), new ScheduledTask(72, 80, 0), new ScheduledTask(80, 90, 0)};
        int[] expectedProcessorEndTimes = new int[]{90};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 13, 0), new ScheduledTask(13, 23, 0), new ScheduledTask(23, 26, 0), new ScheduledTask(26, 31, 0), new ScheduledTask(31, 33, 0), new ScheduledTask(33, 40, 0), new ScheduledTask(40, 48, 0), new ScheduledTask(48, 53, 0), new ScheduledTask(53, 55, 0), new ScheduledTask(55, 57, 0), new ScheduledTask(57, 62, 0), new ScheduledTask(62, 64, 0), new ScheduledTask(64, 72, 0), new ScheduledTask(72, 80, 0), new ScheduledTask(80, 90, 0)};
        int[] expectedProcessorEndTimes = new int[]{90};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 745;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 31, 0), new ScheduledTask(31, 108, 0), new ScheduledTask(108, 139, 0), new ScheduledTask(451, 606, 1), new ScheduledTask(296, 451, 1), new ScheduledTask(355, 463, 0), new ScheduledTask(262, 355, 0), new ScheduledTask(139, 216, 0), new ScheduledTask(250, 296, 1), new ScheduledTask(111, 204, 1), new ScheduledTask(204, 250, 1), new ScheduledTask(463, 602, 0), new ScheduledTask(606, 699, 1), new ScheduledTask(602, 695, 0), new ScheduledTask(216, 262, 0), new ScheduledTask(699, 745, 1)};
        int[] expectedProcessorEndTimes = new int[]{695, 745};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 479;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 31, 0), new ScheduledTask(31, 108, 0), new ScheduledTask(108, 139, 0), new ScheduledTask(139, 294, 0), new ScheduledTask(145, 300, 1), new ScheduledTask(116, 224, 2), new ScheduledTask(235, 328, 3), new ScheduledTask(112, 189, 3), new ScheduledTask(224, 270, 2), new ScheduledTask(294, 387, 0), new ScheduledTask(189, 235, 3), new ScheduledTask(270, 409, 2), new ScheduledTask(328, 421, 3), new ScheduledTask(300, 393, 1), new ScheduledTask(387, 433, 0), new ScheduledTask(433, 479, 0)};
        int[] expectedProcessorEndTimes = new int[]{479, 393, 409, 421};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 441;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 31, 0), new ScheduledTask(31, 108, 0), new ScheduledTask(108, 139, 0), new ScheduledTask(139, 294, 0), new ScheduledTask(145, 300, 1), new ScheduledTask(116, 224, 2), new ScheduledTask(143, 236, 3), new ScheduledTask(112, 189, 4), new ScheduledTask(148, 194, 5), new ScheduledTask(189, 282, 4), new ScheduledTask(194, 240, 5), new ScheduledTask(224, 363, 2), new ScheduledTask(302, 395, 1), new ScheduledTask(236, 329, 3), new ScheduledTask(282, 328, 4), new ScheduledTask(395, 441, 1)};
        int[] expectedProcessorEndTimes = new int[]{294, 441, 363, 329, 328, 240};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 868;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 51, 0), new ScheduledTask(51, 85, 0), new ScheduledTask(85, 186, 0), new ScheduledTask(186, 220, 0), new ScheduledTask(227, 345, 1), new ScheduledTask(220, 287, 0), new ScheduledTask(321, 422, 0), new ScheduledTask(581, 648, 1), new ScheduledTask(446, 581, 1), new ScheduledTask(591, 726, 0), new ScheduledTask(287, 321, 0), new ScheduledTask(345, 446, 1), new ScheduledTask(648, 817, 1), new ScheduledTask(422, 591, 0), new ScheduledTask(726, 810, 0), new ScheduledTask(817, 868, 1)};
        int[] expectedProcessorEndTimes = new int[]{810, 868};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 659;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 51, 0), new ScheduledTask(51, 85, 0), new ScheduledTask(85, 186, 0), new ScheduledTask(186, 220, 0), new ScheduledTask(220, 338, 0), new ScheduledTask(230, 297, 1), new ScheduledTask(304, 405, 2), new ScheduledTask(230, 297, 3), new ScheduledTask(346, 481, 3), new ScheduledTask(346, 481, 1), new ScheduledTask(303, 337, 3), new ScheduledTask(338, 439, 0), new ScheduledTask(405, 574, 2), new ScheduledTask(439, 608, 0), new ScheduledTask(489, 573, 3), new ScheduledTask(608, 659, 0)};
        int[] expectedProcessorEndTimes = new int[]{659, 481, 574, 573};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 622;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 51, 0), new ScheduledTask(51, 85, 0), new ScheduledTask(85, 186, 0), new ScheduledTask(186, 220, 0), new ScheduledTask(220, 338, 0), new ScheduledTask(230, 297, 1), new ScheduledTask(297, 398, 1), new ScheduledTask(230, 297, 2), new ScheduledTask(346, 481, 3), new ScheduledTask(338, 473, 0), new ScheduledTask(303, 337, 4), new ScheduledTask(343, 444, 5), new ScheduledTask(337, 506, 4), new ScheduledTask(398, 567, 1), new ScheduledTask(481, 565, 3), new ScheduledTask(571, 622, 1)};
        int[] expectedProcessorEndTimes = new int[]{473, 622, 297, 565, 506, 444};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 754;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 33, 0), new ScheduledTask(196, 326, 0), new ScheduledTask(36, 166, 1), new ScheduledTask(326, 456, 0), new ScheduledTask(456, 538, 0), new ScheduledTask(493, 542, 1), new ScheduledTask(444, 493, 1), new ScheduledTask(395, 444, 1), new ScheduledTask(346, 395, 1), new ScheduledTask(313, 346, 1), new ScheduledTask(166, 313, 1), new ScheduledTask(542, 656, 1), new ScheduledTask(82, 196, 0), new ScheduledTask(538, 652, 0), new ScheduledTask(33, 82, 0), new ScheduledTask(656, 754, 1)};
        int[] expectedProcessorEndTimes = new int[]{652, 754};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 505;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 33, 0), new ScheduledTask(33, 163, 0), new ScheduledTask(36, 166, 1), new ScheduledTask(163, 293, 0), new ScheduledTask(201, 283, 2), new ScheduledTask(190, 239, 3), new ScheduledTask(215, 264, 1), new ScheduledTask(166, 215, 1), new ScheduledTask(239, 288, 3), new ScheduledTask(168, 201, 2), new ScheduledTask(43, 190, 3), new ScheduledTask(293, 407, 0), new ScheduledTask(283, 397, 2), new ScheduledTask(288, 402, 3), new ScheduledTask(42, 91, 2), new ScheduledTask(407, 505, 0)};
        int[] expectedProcessorEndTimes = new int[]{505, 264, 397, 402};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 505;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 33, 0), new ScheduledTask(33, 163, 0), new ScheduledTask(36, 166, 1), new ScheduledTask(163, 293, 0), new ScheduledTask(166, 248, 1), new ScheduledTask(168, 217, 2), new ScheduledTask(171, 220, 3), new ScheduledTask(170, 219, 4), new ScheduledTask(169, 218, 5), new ScheduledTask(217, 250, 2), new ScheduledTask(218, 365, 5), new ScheduledTask(293, 407, 0), new ScheduledTask(219, 333, 4), new ScheduledTask(252, 366, 2), new ScheduledTask(220, 269, 3), new ScheduledTask(407, 505, 0)};
        int[] expectedProcessorEndTimes = new int[]{505, 248, 366, 269, 333, 365};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 706;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 87, 0), new ScheduledTask(87, 112, 0), new ScheduledTask(112, 174, 0), new ScheduledTask(261, 335, 0), new ScheduledTask(182, 219, 1), new ScheduledTask(343, 467, 1), new ScheduledTask(219, 343, 1), new ScheduledTask(174, 211, 0), new ScheduledTask(211, 261, 0), new ScheduledTask(446, 483, 0), new ScheduledTask(335, 372, 0), new ScheduledTask(467, 554, 1), new ScheduledTask(483, 557, 0), new ScheduledTask(372, 446, 0), new ScheduledTask(557, 607, 0), new ScheduledTask(607, 706, 0)};
        int[] expectedProcessorEndTimes = new int[]{706, 554};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 595;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 87, 0), new ScheduledTask(87, 112, 0), new ScheduledTask(112, 174, 0), new ScheduledTask(174, 248, 0), new ScheduledTask(182, 219, 1), new ScheduledTask(248, 372, 0), new ScheduledTask(219, 343, 1), new ScheduledTask(179, 216, 2), new ScheduledTask(216, 266, 2), new ScheduledTask(256, 293, 3), new ScheduledTask(266, 303, 2), new ScheduledTask(293, 380, 3), new ScheduledTask(372, 446, 0), new ScheduledTask(343, 417, 1), new ScheduledTask(446, 496, 0), new ScheduledTask(496, 595, 0)};
        int[] expectedProcessorEndTimes = new int[]{595, 417, 303, 380};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 595;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 87, 0), new ScheduledTask(87, 112, 0), new ScheduledTask(112, 174, 0), new ScheduledTask(174, 248, 0), new ScheduledTask(182, 219, 1), new ScheduledTask(248, 372, 0), new ScheduledTask(219, 343, 1), new ScheduledTask(179, 216, 2), new ScheduledTask(216, 266, 2), new ScheduledTask(256, 293, 3), new ScheduledTask(257, 294, 4), new ScheduledTask(266, 353, 2), new ScheduledTask(372, 446, 0), new ScheduledTask(343, 417, 1), new ScheduledTask(446, 496, 0), new ScheduledTask(496, 595, 0)};
        int[] expectedProcessorEndTimes = new int[]{595, 417, 353, 293, 294};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 841;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 136, 0), new ScheduledTask(136, 226, 0), new ScheduledTask(226, 271, 0), new ScheduledTask(271, 361, 0), new ScheduledTask(431, 491, 1), new ScheduledTask(406, 526, 0), new ScheduledTask(526, 646, 0), new ScheduledTask(536, 626, 1), new ScheduledTask(386, 431, 1), new ScheduledTask(361, 406, 0), new ScheduledTask(491, 536, 1), new ScheduledTask(626, 716, 1), new ScheduledTask(646, 721, 0), new ScheduledTask(326, 386, 1), new ScheduledTask(281, 326, 1), new ScheduledTask(721, 841, 0)};
        int[] expectedProcessorEndTimes = new int[]{841, 716};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 691;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 136, 0), new ScheduledTask(136, 226, 0), new ScheduledTask(226, 271, 0), new ScheduledTask(271, 361, 0), new ScheduledTask(280, 340, 1), new ScheduledTask(361, 481, 0), new ScheduledTask(340, 460, 1), new ScheduledTask(348, 438, 2), new ScheduledTask(364, 409, 3), new ScheduledTask(409, 454, 3), new ScheduledTask(438, 483, 2), new ScheduledTask(481, 571, 0), new ScheduledTask(483, 558, 2), new ScheduledTask(454, 514, 3), new ScheduledTask(460, 505, 1), new ScheduledTask(571, 691, 0)};
        int[] expectedProcessorEndTimes = new int[]{691, 505, 558, 514};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 691;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 136, 0), new ScheduledTask(136, 226, 0), new ScheduledTask(226, 271, 0), new ScheduledTask(271, 361, 0), new ScheduledTask(280, 340, 1), new ScheduledTask(361, 481, 0), new ScheduledTask(340, 460, 1), new ScheduledTask(348, 438, 2), new ScheduledTask(364, 409, 3), new ScheduledTask(366, 411, 4), new ScheduledTask(349, 394, 5), new ScheduledTask(481, 571, 0), new ScheduledTask(460, 535, 1), new ScheduledTask(394, 454, 5), new ScheduledTask(409, 454, 3), new ScheduledTask(571, 691, 0)};
        int[] expectedProcessorEndTimes = new int[]{691, 535, 438, 454, 411, 454};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 860;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 164, 0), new ScheduledTask(164, 213, 0), new ScheduledTask(287, 451, 1), new ScheduledTask(377, 459, 0), new ScheduledTask(213, 295, 0), new ScheduledTask(254, 287, 1), new ScheduledTask(451, 549, 1), new ScheduledTask(221, 254, 1), new ScheduledTask(492, 557, 0), new ScheduledTask(328, 377, 0), new ScheduledTask(295, 328, 0), new ScheduledTask(459, 492, 0), new ScheduledTask(557, 671, 0), new ScheduledTask(680, 713, 1), new ScheduledTask(671, 704, 0), new ScheduledTask(713, 860, 1)};
        int[] expectedProcessorEndTimes = new int[]{704, 860};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 713;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 164, 0), new ScheduledTask(164, 213, 0), new ScheduledTask(213, 377, 0), new ScheduledTask(218, 300, 1), new ScheduledTask(254, 336, 2), new ScheduledTask(219, 252, 3), new ScheduledTask(300, 398, 1), new ScheduledTask(221, 254, 2), new ScheduledTask(304, 369, 3), new ScheduledTask(336, 385, 2), new ScheduledTask(264, 297, 3), new ScheduledTask(377, 410, 0), new ScheduledTask(410, 524, 0), new ScheduledTask(533, 566, 3), new ScheduledTask(524, 557, 0), new ScheduledTask(566, 713, 3)};
        int[] expectedProcessorEndTimes = new int[]{557, 398, 385, 713};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 713;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 164, 0), new ScheduledTask(164, 213, 0), new ScheduledTask(213, 377, 0), new ScheduledTask(218, 300, 1), new ScheduledTask(222, 304, 2), new ScheduledTask(219, 252, 3), new ScheduledTask(256, 354, 4), new ScheduledTask(221, 254, 5), new ScheduledTask(300, 365, 1), new ScheduledTask(337, 386, 2), new ScheduledTask(304, 337, 2), new ScheduledTask(377, 410, 0), new ScheduledTask(410, 524, 0), new ScheduledTask(533, 566, 5), new ScheduledTask(524, 557, 0), new ScheduledTask(566, 713, 5)};
        int[] expectedProcessorEndTimes = new int[]{557, 365, 386, 252, 354, 713};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 897;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 134, 0), new ScheduledTask(138, 257, 1), new ScheduledTask(238, 268, 0), new ScheduledTask(525, 659, 1), new ScheduledTask(401, 535, 0), new ScheduledTask(391, 525, 1), new ScheduledTask(535, 654, 0), new ScheduledTask(287, 391, 1), new ScheduledTask(327, 401, 0), new ScheduledTask(268, 327, 0), new ScheduledTask(257, 287, 1), new ScheduledTask(134, 164, 0), new ScheduledTask(659, 748, 1), new ScheduledTask(654, 743, 0), new ScheduledTask(164, 238, 0), new ScheduledTask(748, 897, 1)};
        int[] expectedProcessorEndTimes = new int[]{743, 897};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 634;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 134, 0), new ScheduledTask(138, 257, 1), new ScheduledTask(134, 164, 0), new ScheduledTask(166, 300, 2), new ScheduledTask(244, 378, 3), new ScheduledTask(257, 391, 1), new ScheduledTask(268, 387, 0), new ScheduledTask(164, 268, 0), new ScheduledTask(170, 244, 3), new ScheduledTask(330, 389, 2), new ScheduledTask(300, 330, 2), new ScheduledTask(140, 170, 3), new ScheduledTask(389, 478, 2), new ScheduledTask(396, 485, 1), new ScheduledTask(378, 452, 3), new ScheduledTask(485, 634, 1)};
        int[] expectedProcessorEndTimes = new int[]{387, 634, 478, 452};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 627;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 134, 0), new ScheduledTask(134, 253, 0), new ScheduledTask(142, 172, 1), new ScheduledTask(172, 306, 1), new ScheduledTask(182, 316, 2), new ScheduledTask(253, 387, 0), new ScheduledTask(261, 380, 3), new ScheduledTask(176, 280, 4), new ScheduledTask(175, 249, 5), new ScheduledTask(249, 308, 5), new ScheduledTask(280, 310, 4), new ScheduledTask(306, 336, 1), new ScheduledTask(318, 407, 2), new ScheduledTask(389, 478, 0), new ScheduledTask(336, 410, 1), new ScheduledTask(478, 627, 0)};
        int[] expectedProcessorEndTimes = new int[]{627, 410, 407, 380, 310, 308};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 813;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 112, 0), new ScheduledTask(174, 261, 0), new ScheduledTask(426, 526, 1), new ScheduledTask(398, 485, 0), new ScheduledTask(164, 214, 1), new ScheduledTask(114, 164, 1), new ScheduledTask(323, 398, 0), new ScheduledTask(364, 426, 1), new ScheduledTask(261, 323, 0), new ScheduledTask(239, 364, 1), new ScheduledTask(485, 610, 0), new ScheduledTask(112, 174, 0), new ScheduledTask(526, 613, 1), new ScheduledTask(214, 239, 1), new ScheduledTask(614, 701, 1), new ScheduledTask(701, 813, 1)};
        int[] expectedProcessorEndTimes = new int[]{610, 813};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 614;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 112, 0), new ScheduledTask(112, 199, 0), new ScheduledTask(209, 309, 1), new ScheduledTask(199, 286, 0), new ScheduledTask(118, 168, 2), new ScheduledTask(114, 164, 3), new ScheduledTask(207, 282, 3), new ScheduledTask(203, 265, 2), new ScheduledTask(265, 327, 2), new ScheduledTask(282, 407, 3), new ScheduledTask(286, 411, 0), new ScheduledTask(122, 184, 1), new ScheduledTask(327, 414, 2), new ScheduledTask(184, 209, 1), new ScheduledTask(415, 502, 2), new ScheduledTask(502, 614, 2)};
        int[] expectedProcessorEndTimes = new int[]{411, 309, 614, 407};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 593;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 112, 0), new ScheduledTask(112, 199, 0), new ScheduledTask(199, 299, 0), new ScheduledTask(208, 295, 1), new ScheduledTask(118, 168, 2), new ScheduledTask(114, 164, 3), new ScheduledTask(207, 282, 2), new ScheduledTask(203, 265, 3), new ScheduledTask(209, 271, 4), new ScheduledTask(171, 296, 5), new ScheduledTask(265, 390, 3), new ScheduledTask(271, 333, 4), new ScheduledTask(301, 388, 0), new ScheduledTask(333, 358, 4), new ScheduledTask(394, 481, 0), new ScheduledTask(481, 593, 0)};
        int[] expectedProcessorEndTimes = new int[]{593, 295, 282, 390, 358, 296};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 719;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 74, 0), new ScheduledTask(148, 235, 0), new ScheduledTask(336, 460, 1), new ScheduledTask(334, 445, 0), new ScheduledTask(260, 334, 0), new ScheduledTask(77, 151, 1), new ScheduledTask(287, 336, 1), new ScheduledTask(225, 287, 1), new ScheduledTask(235, 260, 0), new ScheduledTask(74, 148, 0), new ScheduledTask(460, 559, 1), new ScheduledTask(151, 225, 1), new ScheduledTask(445, 507, 0), new ScheduledTask(507, 556, 0), new ScheduledTask(559, 608, 1), new ScheduledTask(608, 719, 1)};
        int[] expectedProcessorEndTimes = new int[]{556, 719};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 546;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 74, 0), new ScheduledTask(74, 161, 0), new ScheduledTask(161, 285, 0), new ScheduledTask(169, 280, 1), new ScheduledTask(205, 279, 2), new ScheduledTask(77, 151, 1), new ScheduledTask(190, 239, 3), new ScheduledTask(239, 301, 3), new ScheduledTask(165, 190, 3), new ScheduledTask(80, 154, 3), new ScheduledTask(287, 386, 1), new ScheduledTask(301, 375, 3), new ScheduledTask(308, 370, 2), new ScheduledTask(156, 205, 2), new ScheduledTask(386, 435, 1), new ScheduledTask(435, 546, 1)};
        int[] expectedProcessorEndTimes = new int[]{285, 546, 370, 375};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 546;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 74, 0), new ScheduledTask(74, 161, 0), new ScheduledTask(161, 285, 0), new ScheduledTask(169, 280, 1), new ScheduledTask(163, 237, 2), new ScheduledTask(77, 151, 3), new ScheduledTask(170, 219, 3), new ScheduledTask(84, 146, 4), new ScheduledTask(165, 190, 4), new ScheduledTask(80, 154, 5), new ScheduledTask(287, 386, 1), new ScheduledTask(158, 232, 5), new ScheduledTask(190, 252, 4), new ScheduledTask(219, 268, 3), new ScheduledTask(386, 435, 1), new ScheduledTask(435, 546, 1)};
        int[] expectedProcessorEndTimes = new int[]{285, 546, 237, 268, 252, 232};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 819;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 121, 0), new ScheduledTask(121, 218, 0), new ScheduledTask(218, 303, 0), new ScheduledTask(210, 319, 1), new ScheduledTask(303, 375, 0), new ScheduledTask(367, 439, 1), new ScheduledTask(319, 367, 1), new ScheduledTask(125, 210, 1), new ScheduledTask(439, 548, 1), new ScheduledTask(447, 544, 0), new ScheduledTask(375, 447, 0), new ScheduledTask(551, 623, 1), new ScheduledTask(626, 747, 0), new ScheduledTask(647, 732, 1), new ScheduledTask(623, 647, 1), new ScheduledTask(747, 819, 0)};
        int[] expectedProcessorEndTimes = new int[]{819, 732};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 756;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 121, 0), new ScheduledTask(121, 218, 0), new ScheduledTask(218, 303, 0), new ScheduledTask(125, 234, 1), new ScheduledTask(303, 375, 0), new ScheduledTask(305, 377, 1), new ScheduledTask(311, 359, 2), new ScheduledTask(125, 210, 3), new ScheduledTask(382, 491, 1), new ScheduledTask(244, 341, 3), new ScheduledTask(341, 413, 3), new ScheduledTask(491, 563, 1), new ScheduledTask(563, 684, 1), new ScheduledTask(573, 658, 0), new ScheduledTask(571, 595, 2), new ScheduledTask(684, 756, 1)};
        int[] expectedProcessorEndTimes = new int[]{658, 756, 595, 413};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 756;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 121, 0), new ScheduledTask(121, 218, 0), new ScheduledTask(218, 303, 0), new ScheduledTask(125, 234, 1), new ScheduledTask(303, 375, 0), new ScheduledTask(305, 377, 1), new ScheduledTask(311, 359, 2), new ScheduledTask(125, 210, 3), new ScheduledTask(382, 491, 1), new ScheduledTask(244, 341, 3), new ScheduledTask(212, 284, 4), new ScheduledTask(491, 563, 1), new ScheduledTask(563, 684, 1), new ScheduledTask(573, 658, 0), new ScheduledTask(571, 595, 2), new ScheduledTask(684, 756, 1)};
        int[] expectedProcessorEndTimes = new int[]{658, 756, 595, 341, 284};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 18, 0), new ScheduledTask(18, 25, 0), new ScheduledTask(25, 31, 0), new ScheduledTask(31, 45, 0), new ScheduledTask(48, 62, 1), new ScheduledTask(45, 58, 0), new ScheduledTask(42, 48, 1), new ScheduledTask(36, 42, 1), new ScheduledTask(28, 36, 1), new ScheduledTask(58, 61, 0), new ScheduledTask(66, 72, 1), new ScheduledTask(61, 67, 0), new ScheduledTask(62, 66, 1), new ScheduledTask(72, 76, 1), new ScheduledTask(76, 82, 1)};
        int[] expectedProcessorEndTimes = new int[]{67, 82};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 18, 0), new ScheduledTask(18, 25, 0), new ScheduledTask(25, 31, 0), new ScheduledTask(39, 53, 1), new ScheduledTask(34, 48, 2), new ScheduledTask(31, 44, 0), new ScheduledTask(42, 48, 3), new ScheduledTask(44, 50, 0), new ScheduledTask(28, 36, 3), new ScheduledTask(48, 51, 3), new ScheduledTask(53, 59, 1), new ScheduledTask(36, 42, 3), new ScheduledTask(48, 52, 2), new ScheduledTask(59, 63, 1), new ScheduledTask(63, 69, 1)};
        int[] expectedProcessorEndTimes = new int[]{50, 69, 52, 51};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 18, 0), new ScheduledTask(18, 25, 0), new ScheduledTask(25, 31, 0), new ScheduledTask(39, 53, 1), new ScheduledTask(34, 48, 2), new ScheduledTask(31, 44, 0), new ScheduledTask(36, 42, 3), new ScheduledTask(36, 42, 4), new ScheduledTask(28, 36, 3), new ScheduledTask(44, 47, 0), new ScheduledTask(53, 59, 1), new ScheduledTask(39, 45, 5), new ScheduledTask(48, 52, 2), new ScheduledTask(59, 63, 1), new ScheduledTask(63, 69, 1)};
        int[] expectedProcessorEndTimes = new int[]{47, 69, 52, 42, 42, 45};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(11, 17, 0), new ScheduledTask(40, 47, 1), new ScheduledTask(32, 44, 0), new ScheduledTask(17, 28, 0), new ScheduledTask(47, 55, 1), new ScheduledTask(13, 18, 1), new ScheduledTask(30, 40, 1), new ScheduledTask(28, 32, 0), new ScheduledTask(44, 51, 0), new ScheduledTask(26, 30, 1), new ScheduledTask(18, 26, 1), new ScheduledTask(55, 61, 1), new ScheduledTask(51, 59, 0), new ScheduledTask(61, 66, 1), new ScheduledTask(66, 72, 1)};
        int[] expectedProcessorEndTimes = new int[]{59, 72};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(11, 17, 0), new ScheduledTask(21, 28, 1), new ScheduledTask(17, 29, 0), new ScheduledTask(25, 36, 2), new ScheduledTask(28, 36, 1), new ScheduledTask(13, 18, 1), new ScheduledTask(25, 35, 3), new ScheduledTask(36, 40, 2), new ScheduledTask(29, 36, 0), new ScheduledTask(20, 24, 3), new ScheduledTask(35, 43, 3), new ScheduledTask(36, 42, 1), new ScheduledTask(42, 50, 2), new ScheduledTask(50, 55, 2), new ScheduledTask(55, 61, 2)};
        int[] expectedProcessorEndTimes = new int[]{36, 42, 61, 43};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(11, 17, 0), new ScheduledTask(21, 28, 1), new ScheduledTask(17, 29, 0), new ScheduledTask(25, 36, 2), new ScheduledTask(28, 36, 1), new ScheduledTask(13, 18, 1), new ScheduledTask(25, 35, 3), new ScheduledTask(36, 40, 2), new ScheduledTask(29, 36, 0), new ScheduledTask(20, 24, 4), new ScheduledTask(25, 33, 5), new ScheduledTask(36, 42, 1), new ScheduledTask(42, 50, 2), new ScheduledTask(50, 55, 2), new ScheduledTask(55, 61, 2)};
        int[] expectedProcessorEndTimes = new int[]{36, 42, 61, 35, 24, 33};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 89;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 18, 0), new ScheduledTask(18, 30, 0), new ScheduledTask(29, 35, 1), new ScheduledTask(51, 61, 1), new ScheduledTask(30, 41, 0), new ScheduledTask(41, 51, 1), new ScheduledTask(41, 51, 0), new ScheduledTask(37, 41, 1), new ScheduledTask(35, 37, 1), new ScheduledTask(20, 25, 1), new ScheduledTask(51, 61, 0), new ScheduledTask(61, 68, 1), new ScheduledTask(25, 29, 1), new ScheduledTask(68, 80, 1), new ScheduledTask(80, 89, 1)};
        int[] expectedProcessorEndTimes = new int[]{61, 89};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 18, 0), new ScheduledTask(18, 30, 0), new ScheduledTask(27, 33, 1), new ScheduledTask(33, 43, 1), new ScheduledTask(30, 41, 0), new ScheduledTask(43, 53, 1), new ScheduledTask(32, 42, 2), new ScheduledTask(43, 47, 3), new ScheduledTask(34, 36, 3), new ScheduledTask(20, 25, 3), new ScheduledTask(44, 54, 0), new ScheduledTask(53, 60, 1), new ScheduledTask(25, 29, 3), new ScheduledTask(60, 72, 1), new ScheduledTask(72, 81, 1)};
        int[] expectedProcessorEndTimes = new int[]{54, 81, 42, 47};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 18, 0), new ScheduledTask(18, 30, 0), new ScheduledTask(27, 33, 1), new ScheduledTask(33, 43, 1), new ScheduledTask(30, 41, 0), new ScheduledTask(42, 52, 2), new ScheduledTask(32, 42, 3), new ScheduledTask(43, 47, 4), new ScheduledTask(34, 36, 5), new ScheduledTask(20, 25, 5), new ScheduledTask(44, 54, 0), new ScheduledTask(52, 59, 2), new ScheduledTask(25, 29, 5), new ScheduledTask(60, 72, 2), new ScheduledTask(72, 81, 2)};
        int[] expectedProcessorEndTimes = new int[]{54, 43, 81, 42, 47, 36};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(29, 34, 0), new ScheduledTask(34, 46, 0), new ScheduledTask(7, 17, 0), new ScheduledTask(48, 60, 1), new ScheduledTask(27, 39, 1), new ScheduledTask(18, 27, 1), new ScheduledTask(43, 48, 1), new ScheduledTask(9, 18, 1), new ScheduledTask(39, 43, 1), new ScheduledTask(60, 72, 1), new ScheduledTask(17, 29, 0), new ScheduledTask(58, 70, 0), new ScheduledTask(46, 53, 0), new ScheduledTask(53, 58, 0), new ScheduledTask(73, 82, 1)};
        int[] expectedProcessorEndTimes = new int[]{70, 82};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 12, 0), new ScheduledTask(22, 34, 1), new ScheduledTask(15, 25, 2), new ScheduledTask(12, 24, 0), new ScheduledTask(22, 34, 3), new ScheduledTask(13, 22, 1), new ScheduledTask(25, 30, 2), new ScheduledTask(9, 18, 3), new ScheduledTask(18, 22, 3), new ScheduledTask(36, 48, 1), new ScheduledTask(30, 42, 2), new ScheduledTask(31, 43, 0), new ScheduledTask(24, 31, 0), new ScheduledTask(34, 39, 3), new ScheduledTask(48, 57, 1)};
        int[] expectedProcessorEndTimes = new int[]{43, 57, 42, 39};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 12, 0), new ScheduledTask(18, 30, 1), new ScheduledTask(15, 25, 2), new ScheduledTask(12, 24, 0), new ScheduledTask(14, 26, 3), new ScheduledTask(13, 22, 4), new ScheduledTask(20, 25, 5), new ScheduledTask(9, 18, 1), new ScheduledTask(25, 29, 5), new ScheduledTask(31, 43, 1), new ScheduledTask(25, 37, 2), new ScheduledTask(22, 34, 4), new ScheduledTask(24, 31, 0), new ScheduledTask(26, 31, 3), new ScheduledTask(43, 52, 1)};
        int[] expectedProcessorEndTimes = new int[]{31, 52, 37, 31, 34, 29};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 87;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 12, 0), new ScheduledTask(12, 25, 0), new ScheduledTask(39, 49, 0), new ScheduledTask(36, 52, 1), new ScheduledTask(25, 39, 0), new ScheduledTask(20, 30, 1), new ScheduledTask(49, 59, 0), new ScheduledTask(31, 36, 1), new ScheduledTask(60, 65, 1), new ScheduledTask(52, 55, 1), new ScheduledTask(65, 76, 1), new ScheduledTask(59, 72, 0), new ScheduledTask(55, 60, 1), new ScheduledTask(77, 82, 1), new ScheduledTask(82, 87, 1)};
        int[] expectedProcessorEndTimes = new int[]{72, 87};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 12, 0), new ScheduledTask(12, 25, 0), new ScheduledTask(28, 38, 1), new ScheduledTask(25, 41, 0), new ScheduledTask(31, 45, 2), new ScheduledTask(23, 33, 3), new ScheduledTask(38, 48, 1), new ScheduledTask(33, 38, 3), new ScheduledTask(18, 23, 3), new ScheduledTask(38, 41, 3), new ScheduledTask(41, 52, 3), new ScheduledTask(49, 62, 1), new ScheduledTask(45, 50, 2), new ScheduledTask(62, 67, 1), new ScheduledTask(67, 72, 1)};
        int[] expectedProcessorEndTimes = new int[]{41, 72, 50, 52};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 12, 0), new ScheduledTask(12, 25, 0), new ScheduledTask(28, 38, 1), new ScheduledTask(25, 41, 0), new ScheduledTask(31, 45, 2), new ScheduledTask(20, 30, 3), new ScheduledTask(38, 48, 1), new ScheduledTask(31, 36, 4), new ScheduledTask(18, 23, 5), new ScheduledTask(34, 37, 5), new ScheduledTask(23, 34, 5), new ScheduledTask(49, 62, 1), new ScheduledTask(40, 45, 5), new ScheduledTask(62, 67, 1), new ScheduledTask(67, 72, 1)};
        int[] expectedProcessorEndTimes = new int[]{41, 72, 45, 30, 36, 45};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 85;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 16, 0), new ScheduledTask(18, 34, 1), new ScheduledTask(27, 33, 0), new ScheduledTask(41, 52, 0), new ScheduledTask(57, 65, 1), new ScheduledTask(38, 41, 0), new ScheduledTask(61, 77, 0), new ScheduledTask(33, 38, 0), new ScheduledTask(46, 57, 1), new ScheduledTask(40, 46, 1), new ScheduledTask(65, 81, 1), new ScheduledTask(52, 61, 0), new ScheduledTask(34, 40, 1), new ScheduledTask(16, 27, 0), new ScheduledTask(77, 80, 0), new ScheduledTask(82, 85, 1)};
        int[] expectedProcessorEndTimes = new int[]{80, 85};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 16, 0), new ScheduledTask(18, 34, 1), new ScheduledTask(16, 22, 0), new ScheduledTask(28, 39, 2), new ScheduledTask(22, 30, 0), new ScheduledTask(28, 31, 3), new ScheduledTask(34, 50, 1), new ScheduledTask(31, 36, 3), new ScheduledTask(41, 52, 0), new ScheduledTask(42, 48, 3), new ScheduledTask(41, 57, 2), new ScheduledTask(48, 57, 3), new ScheduledTask(36, 42, 3), new ScheduledTask(30, 41, 0), new ScheduledTask(57, 60, 3), new ScheduledTask(60, 63, 3)};
        int[] expectedProcessorEndTimes = new int[]{52, 50, 57, 63};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 16, 0), new ScheduledTask(18, 34, 1), new ScheduledTask(16, 22, 0), new ScheduledTask(22, 33, 0), new ScheduledTask(30, 38, 2), new ScheduledTask(28, 31, 3), new ScheduledTask(34, 50, 1), new ScheduledTask(27, 32, 4), new ScheduledTask(41, 52, 0), new ScheduledTask(42, 48, 5), new ScheduledTask(41, 57, 2), new ScheduledTask(48, 57, 5), new ScheduledTask(36, 42, 5), new ScheduledTask(24, 35, 5), new ScheduledTask(57, 60, 5), new ScheduledTask(60, 63, 5)};
        int[] expectedProcessorEndTimes = new int[]{52, 50, 57, 31, 32, 63};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(16, 26, 1), new ScheduledTask(14, 19, 0), new ScheduledTask(26, 40, 1), new ScheduledTask(24, 38, 0), new ScheduledTask(49, 59, 1), new ScheduledTask(40, 49, 1), new ScheduledTask(19, 24, 0), new ScheduledTask(51, 56, 0), new ScheduledTask(48, 51, 0), new ScheduledTask(59, 76, 1), new ScheduledTask(56, 72, 0), new ScheduledTask(38, 48, 0), new ScheduledTask(7, 14, 0), new ScheduledTask(11, 16, 1), new ScheduledTask(76, 88, 1)};
        int[] expectedProcessorEndTimes = new int[]{72, 88};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 17, 0), new ScheduledTask(16, 21, 1), new ScheduledTask(17, 31, 0), new ScheduledTask(26, 40, 1), new ScheduledTask(19, 29, 2), new ScheduledTask(31, 40, 3), new ScheduledTask(21, 26, 1), new ScheduledTask(23, 28, 3), new ScheduledTask(28, 31, 3), new ScheduledTask(40, 57, 3), new ScheduledTask(29, 45, 2), new ScheduledTask(40, 50, 1), new ScheduledTask(16, 23, 3), new ScheduledTask(11, 16, 3), new ScheduledTask(58, 70, 3)};
        int[] expectedProcessorEndTimes = new int[]{31, 50, 45, 70};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 17, 0), new ScheduledTask(16, 21, 1), new ScheduledTask(27, 41, 1), new ScheduledTask(26, 40, 2), new ScheduledTask(19, 29, 3), new ScheduledTask(25, 34, 4), new ScheduledTask(21, 26, 1), new ScheduledTask(30, 35, 5), new ScheduledTask(27, 30, 5), new ScheduledTask(41, 58, 1), new ScheduledTask(35, 51, 5), new ScheduledTask(40, 50, 2), new ScheduledTask(16, 23, 5), new ScheduledTask(11, 16, 5), new ScheduledTask(58, 70, 1)};
        int[] expectedProcessorEndTimes = new int[]{17, 70, 50, 29, 34, 51};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(10, 15, 1), new ScheduledTask(21, 31, 0), new ScheduledTask(23, 27, 1), new ScheduledTask(4, 10, 0), new ScheduledTask(41, 53, 1), new ScheduledTask(33, 41, 1), new ScheduledTask(15, 23, 1), new ScheduledTask(27, 33, 1), new ScheduledTask(47, 49, 0), new ScheduledTask(43, 47, 0), new ScheduledTask(31, 43, 0), new ScheduledTask(10, 21, 0), new ScheduledTask(49, 59, 0), new ScheduledTask(53, 61, 1), new ScheduledTask(61, 73, 1)};
        int[] expectedProcessorEndTimes = new int[]{59, 73};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(10, 15, 1), new ScheduledTask(8, 18, 0), new ScheduledTask(4, 8, 0), new ScheduledTask(12, 18, 2), new ScheduledTask(15, 27, 1), new ScheduledTask(18, 26, 3), new ScheduledTask(18, 26, 2), new ScheduledTask(10, 16, 3), new ScheduledTask(16, 18, 3), new ScheduledTask(27, 31, 1), new ScheduledTask(18, 30, 0), new ScheduledTask(26, 37, 2), new ScheduledTask(26, 36, 3), new ScheduledTask(31, 39, 1), new ScheduledTask(39, 51, 1)};
        int[] expectedProcessorEndTimes = new int[]{30, 51, 37, 36};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(10, 15, 1), new ScheduledTask(8, 18, 0), new ScheduledTask(4, 8, 0), new ScheduledTask(12, 18, 2), new ScheduledTask(15, 27, 1), new ScheduledTask(17, 25, 3), new ScheduledTask(17, 25, 4), new ScheduledTask(14, 20, 5), new ScheduledTask(12, 14, 5), new ScheduledTask(22, 26, 5), new ScheduledTask(18, 30, 0), new ScheduledTask(18, 29, 2), new ScheduledTask(25, 35, 3), new ScheduledTask(30, 38, 1), new ScheduledTask(38, 50, 1)};
        int[] expectedProcessorEndTimes = new int[]{30, 50, 29, 35, 25, 26};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 85;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 6, 0), new ScheduledTask(6, 18, 0), new ScheduledTask(10, 25, 1), new ScheduledTask(5, 10, 1), new ScheduledTask(23, 38, 0), new ScheduledTask(44, 58, 0), new ScheduledTask(38, 44, 0), new ScheduledTask(39, 53, 1), new ScheduledTask(25, 39, 1), new ScheduledTask(18, 23, 0), new ScheduledTask(62, 73, 1), new ScheduledTask(53, 62, 1), new ScheduledTask(58, 66, 0), new ScheduledTask(73, 82, 1), new ScheduledTask(82, 85, 1)};
        int[] expectedProcessorEndTimes = new int[]{66, 85};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 6, 0), new ScheduledTask(6, 18, 0), new ScheduledTask(7, 22, 1), new ScheduledTask(5, 10, 2), new ScheduledTask(10, 25, 2), new ScheduledTask(18, 32, 0), new ScheduledTask(22, 28, 1), new ScheduledTask(30, 44, 3), new ScheduledTask(25, 39, 2), new ScheduledTask(25, 30, 3), new ScheduledTask(28, 39, 1), new ScheduledTask(33, 42, 0), new ScheduledTask(44, 52, 3), new ScheduledTask(52, 61, 3), new ScheduledTask(61, 64, 3)};
        int[] expectedProcessorEndTimes = new int[]{42, 39, 39, 64};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 6, 0), new ScheduledTask(6, 18, 0), new ScheduledTask(7, 22, 1), new ScheduledTask(5, 10, 2), new ScheduledTask(10, 25, 2), new ScheduledTask(18, 32, 0), new ScheduledTask(22, 28, 1), new ScheduledTask(27, 41, 3), new ScheduledTask(21, 35, 4), new ScheduledTask(25, 30, 5), new ScheduledTask(28, 39, 1), new ScheduledTask(25, 34, 2), new ScheduledTask(42, 50, 3), new ScheduledTask(50, 59, 3), new ScheduledTask(59, 62, 3)};
        int[] expectedProcessorEndTimes = new int[]{32, 39, 34, 62, 35, 30};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(19, 26, 0), new ScheduledTask(17, 27, 1), new ScheduledTask(26, 37, 0), new ScheduledTask(51, 54, 1), new ScheduledTask(14, 17, 1), new ScheduledTask(40, 51, 0), new ScheduledTask(31, 39, 1), new ScheduledTask(37, 40, 0), new ScheduledTask(54, 66, 1), new ScheduledTask(27, 31, 1), new ScheduledTask(39, 51, 1), new ScheduledTask(11, 19, 0), new ScheduledTask(54, 62, 0), new ScheduledTask(51, 54, 0), new ScheduledTask(66, 77, 1)};
        int[] expectedProcessorEndTimes = new int[]{62, 77};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(11, 18, 0), new ScheduledTask(14, 24, 1), new ScheduledTask(18, 29, 0), new ScheduledTask(23, 26, 2), new ScheduledTask(14, 17, 3), new ScheduledTask(27, 38, 1), new ScheduledTask(26, 34, 2), new ScheduledTask(24, 27, 1), new ScheduledTask(32, 44, 3), new ScheduledTask(28, 32, 3), new ScheduledTask(29, 41, 0), new ScheduledTask(20, 28, 3), new ScheduledTask(34, 42, 2), new ScheduledTask(44, 47, 3), new ScheduledTask(47, 58, 3)};
        int[] expectedProcessorEndTimes = new int[]{41, 38, 42, 58};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(11, 18, 0), new ScheduledTask(14, 24, 1), new ScheduledTask(18, 29, 0), new ScheduledTask(23, 26, 2), new ScheduledTask(14, 17, 3), new ScheduledTask(27, 38, 4), new ScheduledTask(28, 36, 5), new ScheduledTask(24, 27, 1), new ScheduledTask(32, 44, 3), new ScheduledTask(36, 40, 5), new ScheduledTask(17, 29, 3), new ScheduledTask(20, 28, 5), new ScheduledTask(18, 26, 4), new ScheduledTask(44, 47, 3), new ScheduledTask(47, 58, 3)};
        int[] expectedProcessorEndTimes = new int[]{29, 27, 26, 58, 38, 40};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 10, 0), new ScheduledTask(10, 13, 0), new ScheduledTask(13, 22, 0), new ScheduledTask(22, 27, 0), new ScheduledTask(27, 31, 0), new ScheduledTask(31, 33, 0), new ScheduledTask(33, 37, 0), new ScheduledTask(37, 41, 0), new ScheduledTask(41, 48, 0), new ScheduledTask(48, 54, 0), new ScheduledTask(54, 57, 0), new ScheduledTask(57, 59, 0), new ScheduledTask(59, 65, 0), new ScheduledTask(65, 71, 0), new ScheduledTask(71, 81, 0)};
        int[] expectedProcessorEndTimes = new int[]{81};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 10, 0), new ScheduledTask(10, 13, 0), new ScheduledTask(13, 22, 0), new ScheduledTask(22, 27, 0), new ScheduledTask(27, 31, 0), new ScheduledTask(31, 33, 0), new ScheduledTask(33, 37, 0), new ScheduledTask(37, 41, 0), new ScheduledTask(41, 48, 0), new ScheduledTask(48, 54, 0), new ScheduledTask(54, 57, 0), new ScheduledTask(57, 59, 0), new ScheduledTask(59, 65, 0), new ScheduledTask(65, 71, 0), new ScheduledTask(71, 81, 0)};
        int[] expectedProcessorEndTimes = new int[]{81};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 10, 0), new ScheduledTask(10, 13, 0), new ScheduledTask(13, 22, 0), new ScheduledTask(22, 27, 0), new ScheduledTask(27, 31, 0), new ScheduledTask(31, 33, 0), new ScheduledTask(33, 37, 0), new ScheduledTask(37, 41, 0), new ScheduledTask(41, 48, 0), new ScheduledTask(48, 54, 0), new ScheduledTask(54, 57, 0), new ScheduledTask(57, 59, 0), new ScheduledTask(59, 65, 0), new ScheduledTask(65, 71, 0), new ScheduledTask(71, 81, 0)};
        int[] expectedProcessorEndTimes = new int[]{81};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 96;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 11, 0), new ScheduledTask(11, 21, 0), new ScheduledTask(21, 25, 0), new ScheduledTask(25, 31, 0), new ScheduledTask(31, 33, 0), new ScheduledTask(33, 36, 0), new ScheduledTask(36, 39, 0), new ScheduledTask(39, 49, 0), new ScheduledTask(49, 55, 0), new ScheduledTask(55, 59, 0), new ScheduledTask(59, 66, 0), new ScheduledTask(66, 69, 0), new ScheduledTask(69, 79, 0), new ScheduledTask(79, 88, 0), new ScheduledTask(88, 96, 0)};
        int[] expectedProcessorEndTimes = new int[]{96};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 96;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 11, 0), new ScheduledTask(11, 21, 0), new ScheduledTask(21, 25, 0), new ScheduledTask(25, 31, 0), new ScheduledTask(31, 33, 0), new ScheduledTask(33, 36, 0), new ScheduledTask(36, 39, 0), new ScheduledTask(39, 49, 0), new ScheduledTask(49, 55, 0), new ScheduledTask(55, 59, 0), new ScheduledTask(59, 66, 0), new ScheduledTask(66, 69, 0), new ScheduledTask(69, 79, 0), new ScheduledTask(79, 88, 0), new ScheduledTask(88, 96, 0)};
        int[] expectedProcessorEndTimes = new int[]{96};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 96;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 11, 0), new ScheduledTask(11, 21, 0), new ScheduledTask(21, 25, 0), new ScheduledTask(25, 31, 0), new ScheduledTask(31, 33, 0), new ScheduledTask(33, 36, 0), new ScheduledTask(36, 39, 0), new ScheduledTask(39, 49, 0), new ScheduledTask(49, 55, 0), new ScheduledTask(55, 59, 0), new ScheduledTask(59, 66, 0), new ScheduledTask(66, 69, 0), new ScheduledTask(69, 79, 0), new ScheduledTask(79, 88, 0), new ScheduledTask(88, 96, 0)};
        int[] expectedProcessorEndTimes = new int[]{96};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 89;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 15, 0), new ScheduledTask(62, 64, 0), new ScheduledTask(31, 38, 0), new ScheduledTask(15, 24, 0), new ScheduledTask(50, 59, 0), new ScheduledTask(24, 31, 0), new ScheduledTask(68, 74, 0), new ScheduledTask(64, 68, 0), new ScheduledTask(46, 50, 0), new ScheduledTask(34, 39, 1), new ScheduledTask(38, 46, 0), new ScheduledTask(74, 81, 0), new ScheduledTask(39, 47, 1), new ScheduledTask(59, 62, 0), new ScheduledTask(81, 89, 0)};
        int[] expectedProcessorEndTimes = new int[]{89, 47};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 89;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 15, 0), new ScheduledTask(62, 64, 0), new ScheduledTask(31, 38, 0), new ScheduledTask(15, 24, 0), new ScheduledTask(50, 59, 0), new ScheduledTask(24, 31, 0), new ScheduledTask(68, 74, 0), new ScheduledTask(64, 68, 0), new ScheduledTask(46, 50, 0), new ScheduledTask(34, 39, 1), new ScheduledTask(38, 46, 0), new ScheduledTask(74, 81, 0), new ScheduledTask(39, 47, 1), new ScheduledTask(59, 62, 0), new ScheduledTask(81, 89, 0)};
        int[] expectedProcessorEndTimes = new int[]{89, 47};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 89;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 15, 0), new ScheduledTask(62, 64, 0), new ScheduledTask(31, 38, 0), new ScheduledTask(15, 24, 0), new ScheduledTask(50, 59, 0), new ScheduledTask(24, 31, 0), new ScheduledTask(68, 74, 0), new ScheduledTask(64, 68, 0), new ScheduledTask(46, 50, 0), new ScheduledTask(34, 39, 1), new ScheduledTask(38, 46, 0), new ScheduledTask(74, 81, 0), new ScheduledTask(39, 47, 1), new ScheduledTask(59, 62, 0), new ScheduledTask(81, 89, 0)};
        int[] expectedProcessorEndTimes = new int[]{89, 47};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 93;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 14, 0), new ScheduledTask(14, 20, 0), new ScheduledTask(20, 23, 0), new ScheduledTask(23, 31, 0), new ScheduledTask(31, 39, 0), new ScheduledTask(39, 44, 0), new ScheduledTask(44, 52, 0), new ScheduledTask(52, 58, 0), new ScheduledTask(58, 62, 0), new ScheduledTask(62, 71, 0), new ScheduledTask(71, 80, 0), new ScheduledTask(80, 84, 0), new ScheduledTask(84, 86, 0), new ScheduledTask(86, 90, 0), new ScheduledTask(90, 93, 0)};
        int[] expectedProcessorEndTimes = new int[]{93};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 93;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 14, 0), new ScheduledTask(14, 20, 0), new ScheduledTask(20, 23, 0), new ScheduledTask(23, 31, 0), new ScheduledTask(31, 39, 0), new ScheduledTask(39, 44, 0), new ScheduledTask(44, 52, 0), new ScheduledTask(52, 58, 0), new ScheduledTask(58, 62, 0), new ScheduledTask(62, 71, 0), new ScheduledTask(71, 80, 0), new ScheduledTask(80, 84, 0), new ScheduledTask(84, 86, 0), new ScheduledTask(86, 90, 0), new ScheduledTask(90, 93, 0)};
        int[] expectedProcessorEndTimes = new int[]{93};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 93;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 14, 0), new ScheduledTask(14, 20, 0), new ScheduledTask(20, 23, 0), new ScheduledTask(23, 31, 0), new ScheduledTask(31, 39, 0), new ScheduledTask(39, 44, 0), new ScheduledTask(44, 52, 0), new ScheduledTask(52, 58, 0), new ScheduledTask(58, 62, 0), new ScheduledTask(62, 71, 0), new ScheduledTask(71, 80, 0), new ScheduledTask(80, 84, 0), new ScheduledTask(84, 86, 0), new ScheduledTask(86, 90, 0), new ScheduledTask(90, 93, 0)};
        int[] expectedProcessorEndTimes = new int[]{93};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 98;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 16, 0), new ScheduledTask(16, 19, 0), new ScheduledTask(19, 26, 0), new ScheduledTask(26, 34, 0), new ScheduledTask(34, 37, 0), new ScheduledTask(37, 43, 0), new ScheduledTask(43, 50, 0), new ScheduledTask(50, 59, 0), new ScheduledTask(59, 62, 0), new ScheduledTask(62, 66, 0), new ScheduledTask(66, 70, 0), new ScheduledTask(70, 74, 0), new ScheduledTask(74, 83, 0), new ScheduledTask(83, 90, 0), new ScheduledTask(90, 98, 0)};
        int[] expectedProcessorEndTimes = new int[]{98};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 98;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 16, 0), new ScheduledTask(16, 19, 0), new ScheduledTask(19, 26, 0), new ScheduledTask(26, 34, 0), new ScheduledTask(34, 37, 0), new ScheduledTask(37, 43, 0), new ScheduledTask(43, 50, 0), new ScheduledTask(50, 59, 0), new ScheduledTask(59, 62, 0), new ScheduledTask(62, 66, 0), new ScheduledTask(66, 70, 0), new ScheduledTask(70, 74, 0), new ScheduledTask(74, 83, 0), new ScheduledTask(83, 90, 0), new ScheduledTask(90, 98, 0)};
        int[] expectedProcessorEndTimes = new int[]{98};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 98;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 16, 0), new ScheduledTask(16, 19, 0), new ScheduledTask(19, 26, 0), new ScheduledTask(26, 34, 0), new ScheduledTask(34, 37, 0), new ScheduledTask(37, 43, 0), new ScheduledTask(43, 50, 0), new ScheduledTask(50, 59, 0), new ScheduledTask(59, 62, 0), new ScheduledTask(62, 66, 0), new ScheduledTask(66, 70, 0), new ScheduledTask(70, 74, 0), new ScheduledTask(74, 83, 0), new ScheduledTask(83, 90, 0), new ScheduledTask(90, 98, 0)};
        int[] expectedProcessorEndTimes = new int[]{98};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 10, 0), new ScheduledTask(10, 12, 0), new ScheduledTask(22, 25, 0), new ScheduledTask(16, 20, 0), new ScheduledTask(63, 68, 1), new ScheduledTask(34, 42, 0), new ScheduledTask(46, 55, 1), new ScheduledTask(12, 16, 0), new ScheduledTask(44, 53, 0), new ScheduledTask(55, 63, 1), new ScheduledTask(25, 34, 0), new ScheduledTask(20, 22, 0), new ScheduledTask(68, 75, 1), new ScheduledTask(42, 44, 0), new ScheduledTask(75, 84, 1)};
        int[] expectedProcessorEndTimes = new int[]{53, 84};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 10, 0), new ScheduledTask(10, 12, 0), new ScheduledTask(23, 26, 0), new ScheduledTask(17, 21, 0), new ScheduledTask(12, 17, 0), new ScheduledTask(35, 43, 0), new ScheduledTask(46, 55, 1), new ScheduledTask(64, 68, 1), new ScheduledTask(55, 64, 1), new ScheduledTask(45, 53, 0), new ScheduledTask(26, 35, 0), new ScheduledTask(21, 23, 0), new ScheduledTask(68, 75, 1), new ScheduledTask(43, 45, 0), new ScheduledTask(75, 84, 1)};
        int[] expectedProcessorEndTimes = new int[]{53, 84};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 10, 0), new ScheduledTask(10, 12, 0), new ScheduledTask(22, 25, 0), new ScheduledTask(16, 20, 0), new ScheduledTask(63, 68, 1), new ScheduledTask(34, 42, 0), new ScheduledTask(46, 55, 1), new ScheduledTask(12, 16, 0), new ScheduledTask(44, 53, 0), new ScheduledTask(55, 63, 1), new ScheduledTask(25, 34, 0), new ScheduledTask(20, 22, 0), new ScheduledTask(68, 75, 1), new ScheduledTask(42, 44, 0), new ScheduledTask(75, 84, 1)};
        int[] expectedProcessorEndTimes = new int[]{53, 84};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(24, 32, 1), new ScheduledTask(19, 25, 0), new ScheduledTask(42, 52, 1), new ScheduledTask(58, 60, 1), new ScheduledTask(6, 14, 0), new ScheduledTask(25, 29, 0), new ScheduledTask(52, 58, 1), new ScheduledTask(36, 42, 1), new ScheduledTask(32, 36, 1), new ScheduledTask(35, 42, 0), new ScheduledTask(29, 35, 0), new ScheduledTask(60, 62, 1), new ScheduledTask(14, 19, 0), new ScheduledTask(42, 44, 0), new ScheduledTask(62, 65, 1)};
        int[] expectedProcessorEndTimes = new int[]{44, 65};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(24, 32, 1), new ScheduledTask(19, 25, 0), new ScheduledTask(42, 52, 1), new ScheduledTask(58, 60, 1), new ScheduledTask(6, 14, 0), new ScheduledTask(25, 29, 0), new ScheduledTask(52, 58, 1), new ScheduledTask(32, 38, 1), new ScheduledTask(38, 42, 1), new ScheduledTask(35, 42, 0), new ScheduledTask(29, 35, 0), new ScheduledTask(60, 62, 1), new ScheduledTask(14, 19, 0), new ScheduledTask(42, 44, 0), new ScheduledTask(62, 65, 1)};
        int[] expectedProcessorEndTimes = new int[]{44, 65};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(24, 32, 1), new ScheduledTask(19, 25, 0), new ScheduledTask(32, 42, 1), new ScheduledTask(42, 44, 1), new ScheduledTask(6, 14, 0), new ScheduledTask(25, 29, 0), new ScheduledTask(44, 50, 1), new ScheduledTask(54, 60, 1), new ScheduledTask(50, 54, 1), new ScheduledTask(35, 42, 0), new ScheduledTask(29, 35, 0), new ScheduledTask(60, 62, 1), new ScheduledTask(14, 19, 0), new ScheduledTask(42, 44, 0), new ScheduledTask(62, 65, 1)};
        int[] expectedProcessorEndTimes = new int[]{44, 65};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 104;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 13, 0), new ScheduledTask(13, 22, 0), new ScheduledTask(22, 28, 0), new ScheduledTask(28, 35, 0), new ScheduledTask(35, 41, 0), new ScheduledTask(41, 46, 0), new ScheduledTask(46, 53, 0), new ScheduledTask(53, 59, 0), new ScheduledTask(59, 69, 0), new ScheduledTask(69, 71, 0), new ScheduledTask(71, 81, 0), new ScheduledTask(81, 83, 0), new ScheduledTask(83, 89, 0), new ScheduledTask(89, 97, 0), new ScheduledTask(97, 104, 0)};
        int[] expectedProcessorEndTimes = new int[]{104};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 104;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 13, 0), new ScheduledTask(13, 22, 0), new ScheduledTask(22, 28, 0), new ScheduledTask(28, 35, 0), new ScheduledTask(35, 41, 0), new ScheduledTask(41, 46, 0), new ScheduledTask(46, 53, 0), new ScheduledTask(53, 59, 0), new ScheduledTask(59, 69, 0), new ScheduledTask(69, 71, 0), new ScheduledTask(71, 81, 0), new ScheduledTask(81, 83, 0), new ScheduledTask(83, 89, 0), new ScheduledTask(89, 97, 0), new ScheduledTask(97, 104, 0)};
        int[] expectedProcessorEndTimes = new int[]{104};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 104;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 13, 0), new ScheduledTask(13, 22, 0), new ScheduledTask(22, 28, 0), new ScheduledTask(28, 35, 0), new ScheduledTask(35, 41, 0), new ScheduledTask(41, 46, 0), new ScheduledTask(46, 53, 0), new ScheduledTask(53, 59, 0), new ScheduledTask(59, 69, 0), new ScheduledTask(69, 71, 0), new ScheduledTask(71, 81, 0), new ScheduledTask(81, 83, 0), new ScheduledTask(83, 89, 0), new ScheduledTask(89, 97, 0), new ScheduledTask(97, 104, 0)};
        int[] expectedProcessorEndTimes = new int[]{104};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 97;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(35, 43, 1), new ScheduledTask(12, 21, 0), new ScheduledTask(43, 53, 1), new ScheduledTask(4, 12, 0), new ScheduledTask(2, 4, 0), new ScheduledTask(21, 27, 0), new ScheduledTask(71, 75, 1), new ScheduledTask(62, 71, 1), new ScheduledTask(53, 62, 1), new ScheduledTask(27, 37, 0), new ScheduledTask(75, 80, 1), new ScheduledTask(80, 82, 1), new ScheduledTask(82, 90, 1), new ScheduledTask(90, 94, 1), new ScheduledTask(94, 97, 1)};
        int[] expectedProcessorEndTimes = new int[]{37, 97};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 97;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(35, 43, 1), new ScheduledTask(12, 21, 0), new ScheduledTask(56, 66, 1), new ScheduledTask(2, 10, 0), new ScheduledTask(10, 12, 0), new ScheduledTask(21, 27, 0), new ScheduledTask(52, 56, 1), new ScheduledTask(43, 52, 1), new ScheduledTask(66, 75, 1), new ScheduledTask(27, 37, 0), new ScheduledTask(75, 80, 1), new ScheduledTask(80, 82, 1), new ScheduledTask(82, 90, 1), new ScheduledTask(90, 94, 1), new ScheduledTask(94, 97, 1)};
        int[] expectedProcessorEndTimes = new int[]{37, 97};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 97;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(35, 43, 1), new ScheduledTask(12, 21, 0), new ScheduledTask(56, 66, 1), new ScheduledTask(2, 10, 0), new ScheduledTask(10, 12, 0), new ScheduledTask(21, 27, 0), new ScheduledTask(52, 56, 1), new ScheduledTask(43, 52, 1), new ScheduledTask(66, 75, 1), new ScheduledTask(27, 37, 0), new ScheduledTask(75, 80, 1), new ScheduledTask(80, 82, 1), new ScheduledTask(82, 90, 1), new ScheduledTask(90, 94, 1), new ScheduledTask(94, 97, 1)};
        int[] expectedProcessorEndTimes = new int[]{37, 97};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 103;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(30, 38, 0), new ScheduledTask(15, 18, 0), new ScheduledTask(38, 45, 0), new ScheduledTask(18, 24, 0), new ScheduledTask(45, 47, 0), new ScheduledTask(47, 57, 0), new ScheduledTask(6, 15, 0), new ScheduledTask(57, 66, 0), new ScheduledTask(24, 30, 0), new ScheduledTask(34, 42, 1), new ScheduledTask(66, 75, 0), new ScheduledTask(89, 97, 0), new ScheduledTask(79, 89, 0), new ScheduledTask(75, 79, 0), new ScheduledTask(97, 103, 0)};
        int[] expectedProcessorEndTimes = new int[]{103, 42};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 103;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(30, 38, 0), new ScheduledTask(6, 9, 0), new ScheduledTask(38, 45, 0), new ScheduledTask(18, 24, 0), new ScheduledTask(45, 47, 0), new ScheduledTask(47, 57, 0), new ScheduledTask(9, 18, 0), new ScheduledTask(57, 66, 0), new ScheduledTask(24, 30, 0), new ScheduledTask(37, 45, 1), new ScheduledTask(66, 75, 0), new ScheduledTask(75, 83, 0), new ScheduledTask(87, 97, 0), new ScheduledTask(83, 87, 0), new ScheduledTask(97, 103, 0)};
        int[] expectedProcessorEndTimes = new int[]{103, 45};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 103;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(30, 38, 0), new ScheduledTask(15, 18, 0), new ScheduledTask(38, 45, 0), new ScheduledTask(18, 24, 0), new ScheduledTask(45, 47, 0), new ScheduledTask(47, 57, 0), new ScheduledTask(6, 15, 0), new ScheduledTask(57, 66, 0), new ScheduledTask(24, 30, 0), new ScheduledTask(34, 42, 1), new ScheduledTask(66, 75, 0), new ScheduledTask(75, 83, 0), new ScheduledTask(87, 97, 0), new ScheduledTask(83, 87, 0), new ScheduledTask(97, 103, 0)};
        int[] expectedProcessorEndTimes = new int[]{103, 42};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 845;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 118, 0), new ScheduledTask(34, 135, 1), new ScheduledTask(118, 203, 0), new ScheduledTask(203, 372, 0), new ScheduledTask(0, 34, 1), new ScheduledTask(236, 354, 1), new ScheduledTask(135, 236, 1), new ScheduledTask(372, 440, 0), new ScheduledTask(540, 675, 1), new ScheduledTask(405, 540, 1), new ScheduledTask(440, 558, 0), new ScheduledTask(354, 405, 1), new ScheduledTask(693, 845, 0), new ScheduledTask(558, 693, 0), new ScheduledTask(726, 844, 1), new ScheduledTask(675, 726, 1)};
        int[] expectedProcessorEndTimes = new int[]{845, 844};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 578;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 118, 0), new ScheduledTask(0, 101, 1), new ScheduledTask(0, 85, 2), new ScheduledTask(118, 287, 0), new ScheduledTask(0, 34, 3), new ScheduledTask(122, 240, 1), new ScheduledTask(128, 229, 3), new ScheduledTask(103, 171, 2), new ScheduledTask(289, 424, 2), new ScheduledTask(287, 422, 0), new ScheduledTask(296, 414, 3), new ScheduledTask(245, 296, 3), new ScheduledTask(426, 578, 2), new ScheduledTask(429, 564, 3), new ScheduledTask(431, 549, 1), new ScheduledTask(430, 481, 0)};
        int[] expectedProcessorEndTimes = new int[]{481, 549, 578, 564};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 578;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 118, 0), new ScheduledTask(0, 101, 1), new ScheduledTask(0, 85, 2), new ScheduledTask(118, 287, 0), new ScheduledTask(0, 34, 3), new ScheduledTask(122, 240, 4), new ScheduledTask(128, 229, 5), new ScheduledTask(103, 171, 2), new ScheduledTask(289, 424, 1), new ScheduledTask(287, 422, 0), new ScheduledTask(296, 414, 5), new ScheduledTask(245, 296, 5), new ScheduledTask(426, 578, 1), new ScheduledTask(429, 564, 5), new ScheduledTask(431, 549, 4), new ScheduledTask(430, 481, 3)};
        int[] expectedProcessorEndTimes = new int[]{422, 578, 171, 481, 549, 564};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 897;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(146, 274, 0), new ScheduledTask(0, 128, 1), new ScheduledTask(0, 73, 0), new ScheduledTask(73, 146, 0), new ScheduledTask(274, 402, 0), new ScheduledTask(128, 275, 1), new ScheduledTask(281, 373, 1), new ScheduledTask(373, 410, 1), new ScheduledTask(557, 741, 1), new ScheduledTask(410, 557, 1), new ScheduledTask(457, 567, 0), new ScheduledTask(402, 457, 0), new ScheduledTask(695, 842, 0), new ScheduledTask(741, 888, 1), new ScheduledTask(567, 695, 0), new ScheduledTask(842, 897, 0)};
        int[] expectedProcessorEndTimes = new int[]{897, 888};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 587;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 128, 0), new ScheduledTask(0, 128, 1), new ScheduledTask(0, 73, 2), new ScheduledTask(0, 73, 3), new ScheduledTask(128, 256, 0), new ScheduledTask(128, 275, 1), new ScheduledTask(135, 227, 2), new ScheduledTask(130, 167, 3), new ScheduledTask(256, 440, 0), new ScheduledTask(275, 422, 1), new ScheduledTask(263, 373, 2), new ScheduledTask(280, 335, 3), new ScheduledTask(422, 569, 1), new ScheduledTask(440, 587, 0), new ScheduledTask(428, 556, 2), new ScheduledTask(449, 504, 3)};
        int[] expectedProcessorEndTimes = new int[]{587, 569, 556, 504};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 587;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 128, 0), new ScheduledTask(0, 128, 1), new ScheduledTask(0, 73, 2), new ScheduledTask(0, 73, 3), new ScheduledTask(128, 256, 0), new ScheduledTask(128, 275, 1), new ScheduledTask(135, 227, 2), new ScheduledTask(130, 167, 3), new ScheduledTask(256, 440, 0), new ScheduledTask(275, 422, 1), new ScheduledTask(263, 373, 2), new ScheduledTask(280, 335, 3), new ScheduledTask(422, 569, 1), new ScheduledTask(440, 587, 0), new ScheduledTask(428, 556, 2), new ScheduledTask(449, 504, 3)};
        int[] expectedProcessorEndTimes = new int[]{587, 569, 556, 504};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 934;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 191, 0), new ScheduledTask(191, 361, 0), new ScheduledTask(128, 341, 1), new ScheduledTask(0, 128, 1), new ScheduledTask(384, 512, 1), new ScheduledTask(361, 467, 0), new ScheduledTask(341, 384, 1), new ScheduledTask(467, 573, 0), new ScheduledTask(573, 743, 0), new ScheduledTask(512, 618, 1), new ScheduledTask(661, 746, 1), new ScheduledTask(618, 661, 1), new ScheduledTask(794, 922, 1), new ScheduledTask(828, 934, 0), new ScheduledTask(743, 828, 0), new ScheduledTask(751, 794, 1)};
        int[] expectedProcessorEndTimes = new int[]{934, 922};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 617;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 191, 0), new ScheduledTask(0, 170, 1), new ScheduledTask(0, 213, 2), new ScheduledTask(0, 128, 3), new ScheduledTask(191, 319, 0), new ScheduledTask(201, 307, 1), new ScheduledTask(213, 256, 2), new ScheduledTask(217, 323, 3), new ScheduledTask(319, 489, 0), new ScheduledTask(326, 432, 1), new ScheduledTask(323, 408, 3), new ScheduledTask(328, 371, 2), new ScheduledTask(489, 617, 0), new ScheduledTask(408, 514, 3), new ScheduledTask(494, 579, 1), new ScheduledTask(497, 540, 2)};
        int[] expectedProcessorEndTimes = new int[]{617, 579, 540, 514};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 617;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 191, 0), new ScheduledTask(0, 170, 1), new ScheduledTask(0, 213, 2), new ScheduledTask(0, 128, 3), new ScheduledTask(191, 319, 0), new ScheduledTask(201, 307, 1), new ScheduledTask(213, 256, 2), new ScheduledTask(217, 323, 3), new ScheduledTask(319, 489, 0), new ScheduledTask(326, 432, 1), new ScheduledTask(323, 408, 3), new ScheduledTask(328, 371, 2), new ScheduledTask(489, 617, 0), new ScheduledTask(408, 514, 3), new ScheduledTask(494, 579, 1), new ScheduledTask(497, 540, 2)};
        int[] expectedProcessorEndTimes = new int[]{617, 579, 540, 514};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 896;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(166, 299, 0), new ScheduledTask(0, 166, 0), new ScheduledTask(33, 182, 1), new ScheduledTask(0, 33, 1), new ScheduledTask(299, 465, 0), new ScheduledTask(182, 315, 1), new ScheduledTask(315, 398, 1), new ScheduledTask(514, 663, 1), new ScheduledTask(398, 481, 1), new ScheduledTask(465, 598, 0), new ScheduledTask(481, 514, 1), new ScheduledTask(598, 631, 0), new ScheduledTask(730, 896, 0), new ScheduledTask(746, 895, 1), new ScheduledTask(631, 730, 0), new ScheduledTask(663, 746, 1)};
        int[] expectedProcessorEndTimes = new int[]{896, 895};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 597;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 133, 0), new ScheduledTask(0, 166, 1), new ScheduledTask(0, 149, 2), new ScheduledTask(0, 33, 3), new ScheduledTask(133, 299, 0), new ScheduledTask(166, 299, 1), new ScheduledTask(149, 232, 2), new ScheduledTask(299, 448, 0), new ScheduledTask(168, 251, 3), new ScheduledTask(309, 442, 1), new ScheduledTask(304, 337, 2), new ScheduledTask(301, 334, 3), new ScheduledTask(339, 505, 2), new ScheduledTask(448, 597, 0), new ScheduledTask(442, 541, 1), new ScheduledTask(458, 541, 3)};
        int[] expectedProcessorEndTimes = new int[]{597, 541, 505, 541};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 597;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 133, 0), new ScheduledTask(0, 166, 1), new ScheduledTask(0, 149, 2), new ScheduledTask(0, 33, 3), new ScheduledTask(133, 299, 0), new ScheduledTask(166, 299, 1), new ScheduledTask(149, 232, 2), new ScheduledTask(299, 448, 0), new ScheduledTask(168, 251, 3), new ScheduledTask(309, 442, 1), new ScheduledTask(304, 337, 2), new ScheduledTask(301, 334, 3), new ScheduledTask(339, 505, 2), new ScheduledTask(448, 597, 0), new ScheduledTask(442, 541, 1), new ScheduledTask(458, 541, 3)};
        int[] expectedProcessorEndTimes = new int[]{597, 541, 505, 541};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 853;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 134, 0), new ScheduledTask(0, 100, 1), new ScheduledTask(100, 200, 1), new ScheduledTask(134, 218, 0), new ScheduledTask(200, 351, 1), new ScheduledTask(218, 302, 0), new ScheduledTask(302, 386, 0), new ScheduledTask(351, 384, 1), new ScheduledTask(384, 535, 1), new ScheduledTask(391, 525, 0), new ScheduledTask(525, 642, 0), new ScheduledTask(535, 669, 1), new ScheduledTask(642, 793, 0), new ScheduledTask(669, 820, 1), new ScheduledTask(793, 843, 0), new ScheduledTask(820, 853, 1)};
        int[] expectedProcessorEndTimes = new int[]{843, 853};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 587;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 134, 0), new ScheduledTask(0, 100, 1), new ScheduledTask(0, 100, 2), new ScheduledTask(0, 84, 3), new ScheduledTask(134, 285, 0), new ScheduledTask(143, 227, 1), new ScheduledTask(100, 184, 2), new ScheduledTask(143, 176, 3), new ScheduledTask(285, 436, 0), new ScheduledTask(227, 361, 1), new ScheduledTask(230, 347, 2), new ScheduledTask(288, 422, 3), new ScheduledTask(436, 587, 0), new ScheduledTask(361, 512, 1), new ScheduledTask(438, 488, 2), new ScheduledTask(446, 479, 3)};
        int[] expectedProcessorEndTimes = new int[]{587, 512, 488, 479};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 587;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 134, 0), new ScheduledTask(0, 100, 1), new ScheduledTask(0, 100, 2), new ScheduledTask(0, 84, 3), new ScheduledTask(134, 285, 0), new ScheduledTask(143, 227, 1), new ScheduledTask(100, 184, 2), new ScheduledTask(143, 176, 3), new ScheduledTask(285, 436, 0), new ScheduledTask(227, 361, 1), new ScheduledTask(230, 347, 2), new ScheduledTask(288, 422, 3), new ScheduledTask(436, 587, 0), new ScheduledTask(361, 512, 1), new ScheduledTask(438, 488, 2), new ScheduledTask(446, 479, 3)};
        int[] expectedProcessorEndTimes = new int[]{587, 512, 488, 479};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 864;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(93, 232, 0), new ScheduledTask(139, 278, 1), new ScheduledTask(0, 139, 1), new ScheduledTask(0, 93, 0), new ScheduledTask(278, 417, 1), new ScheduledTask(232, 371, 0), new ScheduledTask(371, 479, 0), new ScheduledTask(417, 494, 1), new ScheduledTask(510, 665, 0), new ScheduledTask(494, 633, 1), new ScheduledTask(633, 679, 1), new ScheduledTask(696, 851, 0), new ScheduledTask(725, 864, 1), new ScheduledTask(479, 510, 0), new ScheduledTask(679, 725, 1), new ScheduledTask(665, 696, 0)};
        int[] expectedProcessorEndTimes = new int[]{851, 864};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 595;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 139, 0), new ScheduledTask(0, 139, 1), new ScheduledTask(0, 139, 2), new ScheduledTask(0, 93, 3), new ScheduledTask(143, 282, 0), new ScheduledTask(139, 278, 2), new ScheduledTask(146, 254, 1), new ScheduledTask(145, 222, 3), new ScheduledTask(285, 440, 0), new ScheduledTask(290, 429, 1), new ScheduledTask(278, 324, 2), new ScheduledTask(440, 595, 0), new ScheduledTask(442, 581, 1), new ScheduledTask(290, 321, 3), new ScheduledTask(447, 493, 2), new ScheduledTask(431, 462, 3)};
        int[] expectedProcessorEndTimes = new int[]{595, 581, 493, 462};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 595;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 139, 0), new ScheduledTask(0, 139, 1), new ScheduledTask(0, 139, 2), new ScheduledTask(0, 93, 3), new ScheduledTask(143, 282, 0), new ScheduledTask(139, 278, 2), new ScheduledTask(146, 254, 1), new ScheduledTask(145, 222, 3), new ScheduledTask(285, 440, 0), new ScheduledTask(290, 429, 1), new ScheduledTask(278, 324, 2), new ScheduledTask(440, 595, 0), new ScheduledTask(442, 581, 1), new ScheduledTask(290, 321, 3), new ScheduledTask(447, 493, 2), new ScheduledTask(431, 462, 3)};
        int[] expectedProcessorEndTimes = new int[]{595, 581, 493, 462};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1017;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 213, 0), new ScheduledTask(0, 166, 1), new ScheduledTask(166, 237, 1), new ScheduledTask(213, 260, 0), new ScheduledTask(260, 426, 0), new ScheduledTask(237, 403, 1), new ScheduledTask(403, 521, 1), new ScheduledTask(426, 497, 0), new ScheduledTask(521, 616, 1), new ScheduledTask(497, 592, 0), new ScheduledTask(592, 663, 0), new ScheduledTask(616, 782, 1), new ScheduledTask(663, 899, 0), new ScheduledTask(782, 900, 1), new ScheduledTask(899, 1017, 0), new ScheduledTask(900, 995, 1)};
        int[] expectedProcessorEndTimes = new int[]{1017, 995};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 720;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 213, 0), new ScheduledTask(0, 166, 1), new ScheduledTask(0, 71, 2), new ScheduledTask(0, 47, 3), new ScheduledTask(213, 379, 0), new ScheduledTask(223, 389, 1), new ScheduledTask(175, 293, 2), new ScheduledTask(218, 289, 3), new ScheduledTask(379, 474, 0), new ScheduledTask(389, 484, 1), new ScheduledTask(298, 369, 2), new ScheduledTask(397, 563, 2), new ScheduledTask(484, 720, 1), new ScheduledTask(563, 681, 2), new ScheduledTask(571, 689, 0), new ScheduledTask(482, 577, 3)};
        int[] expectedProcessorEndTimes = new int[]{689, 720, 681, 577};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 720;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 213, 0), new ScheduledTask(0, 166, 1), new ScheduledTask(0, 71, 2), new ScheduledTask(0, 47, 3), new ScheduledTask(213, 379, 0), new ScheduledTask(223, 389, 1), new ScheduledTask(175, 293, 2), new ScheduledTask(218, 289, 3), new ScheduledTask(379, 474, 0), new ScheduledTask(389, 484, 1), new ScheduledTask(298, 369, 2), new ScheduledTask(397, 563, 2), new ScheduledTask(484, 720, 1), new ScheduledTask(563, 681, 2), new ScheduledTask(571, 689, 0), new ScheduledTask(482, 577, 3)};
        int[] expectedProcessorEndTimes = new int[]{689, 720, 681, 577};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 901;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(41, 246, 0), new ScheduledTask(82, 246, 1), new ScheduledTask(0, 41, 0), new ScheduledTask(246, 451, 0), new ScheduledTask(0, 82, 1), new ScheduledTask(348, 471, 1), new ScheduledTask(246, 348, 1), new ScheduledTask(451, 492, 0), new ScheduledTask(594, 717, 1), new ScheduledTask(471, 594, 1), new ScheduledTask(594, 655, 0), new ScheduledTask(717, 901, 1), new ScheduledTask(655, 819, 0), new ScheduledTask(492, 594, 0), new ScheduledTask(860, 901, 0), new ScheduledTask(819, 860, 0)};
        int[] expectedProcessorEndTimes = new int[]{901, 901};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 717;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 205, 0), new ScheduledTask(0, 164, 1), new ScheduledTask(0, 41, 2), new ScheduledTask(205, 410, 0), new ScheduledTask(0, 82, 3), new ScheduledTask(215, 338, 1), new ScheduledTask(171, 273, 2), new ScheduledTask(210, 251, 3), new ScheduledTask(338, 461, 1), new ScheduledTask(410, 533, 0), new ScheduledTask(416, 477, 2), new ScheduledTask(533, 717, 0), new ScheduledTask(540, 704, 1), new ScheduledTask(275, 377, 3), new ScheduledTask(465, 506, 3), new ScheduledTask(477, 518, 2)};
        int[] expectedProcessorEndTimes = new int[]{717, 704, 518, 506};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 717;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 205, 0), new ScheduledTask(0, 164, 1), new ScheduledTask(0, 41, 2), new ScheduledTask(205, 410, 0), new ScheduledTask(0, 82, 3), new ScheduledTask(215, 338, 1), new ScheduledTask(171, 273, 2), new ScheduledTask(210, 251, 3), new ScheduledTask(338, 461, 1), new ScheduledTask(410, 533, 0), new ScheduledTask(416, 477, 2), new ScheduledTask(533, 717, 0), new ScheduledTask(540, 704, 1), new ScheduledTask(275, 377, 3), new ScheduledTask(465, 506, 3), new ScheduledTask(477, 518, 2)};
        int[] expectedProcessorEndTimes = new int[]{717, 704, 518, 506};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 909;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(79, 257, 0), new ScheduledTask(59, 237, 1), new ScheduledTask(0, 79, 0), new ScheduledTask(0, 59, 1), new ScheduledTask(336, 474, 1), new ScheduledTask(237, 336, 1), new ScheduledTask(257, 395, 0), new ScheduledTask(474, 514, 1), new ScheduledTask(514, 692, 1), new ScheduledTask(477, 596, 0), new ScheduledTask(692, 771, 1), new ScheduledTask(395, 474, 0), new ScheduledTask(771, 909, 1), new ScheduledTask(695, 814, 0), new ScheduledTask(596, 695, 0), new ScheduledTask(814, 893, 0)};
        int[] expectedProcessorEndTimes = new int[]{893, 909};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 638;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 178, 0), new ScheduledTask(0, 178, 1), new ScheduledTask(0, 79, 2), new ScheduledTask(0, 59, 3), new ScheduledTask(184, 322, 0), new ScheduledTask(178, 277, 1), new ScheduledTask(188, 326, 2), new ScheduledTask(184, 224, 3), new ScheduledTask(322, 500, 0), new ScheduledTask(326, 445, 2), new ScheduledTask(327, 406, 1), new ScheduledTask(334, 413, 3), new ScheduledTask(500, 638, 0), new ScheduledTask(503, 622, 1), new ScheduledTask(445, 544, 2), new ScheduledTask(505, 584, 3)};
        int[] expectedProcessorEndTimes = new int[]{638, 622, 544, 584};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 638;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 178, 0), new ScheduledTask(0, 178, 1), new ScheduledTask(0, 79, 2), new ScheduledTask(0, 59, 3), new ScheduledTask(184, 322, 0), new ScheduledTask(178, 277, 1), new ScheduledTask(188, 326, 2), new ScheduledTask(184, 224, 3), new ScheduledTask(322, 500, 0), new ScheduledTask(326, 445, 2), new ScheduledTask(327, 406, 1), new ScheduledTask(334, 413, 3), new ScheduledTask(500, 638, 0), new ScheduledTask(503, 622, 1), new ScheduledTask(445, 544, 2), new ScheduledTask(505, 584, 3)};
        int[] expectedProcessorEndTimes = new int[]{638, 622, 544, 584};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 880;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(48, 160, 0), new ScheduledTask(115, 227, 1), new ScheduledTask(0, 48, 1), new ScheduledTask(0, 48, 0), new ScheduledTask(160, 288, 0), new ScheduledTask(307, 403, 1), new ScheduledTask(227, 307, 1), new ScheduledTask(51, 115, 1), new ScheduledTask(547, 707, 1), new ScheduledTask(403, 547, 1), new ScheduledTask(448, 576, 0), new ScheduledTask(288, 448, 0), new ScheduledTask(707, 867, 1), new ScheduledTask(768, 880, 0), new ScheduledTask(656, 768, 0), new ScheduledTask(576, 656, 0)};
        int[] expectedProcessorEndTimes = new int[]{880, 867};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 544;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 112, 0), new ScheduledTask(0, 112, 1), new ScheduledTask(0, 48, 2), new ScheduledTask(0, 48, 3), new ScheduledTask(112, 240, 0), new ScheduledTask(119, 215, 1), new ScheduledTask(122, 202, 2), new ScheduledTask(54, 118, 3), new ScheduledTask(215, 375, 1), new ScheduledTask(240, 384, 0), new ScheduledTask(247, 375, 2), new ScheduledTask(244, 404, 3), new ScheduledTask(384, 544, 0), new ScheduledTask(389, 501, 1), new ScheduledTask(404, 516, 3), new ScheduledTask(411, 491, 2)};
        int[] expectedProcessorEndTimes = new int[]{544, 501, 491, 516};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 544;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 112, 0), new ScheduledTask(0, 112, 1), new ScheduledTask(0, 48, 2), new ScheduledTask(0, 48, 3), new ScheduledTask(112, 240, 0), new ScheduledTask(119, 215, 1), new ScheduledTask(122, 202, 2), new ScheduledTask(54, 118, 3), new ScheduledTask(215, 375, 1), new ScheduledTask(240, 384, 0), new ScheduledTask(247, 375, 2), new ScheduledTask(244, 404, 3), new ScheduledTask(384, 544, 0), new ScheduledTask(389, 501, 1), new ScheduledTask(404, 516, 3), new ScheduledTask(411, 491, 2)};
        int[] expectedProcessorEndTimes = new int[]{544, 501, 491, 516};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot99_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.99_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 74;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(3, 17, 0), new ScheduledTask(0, 11, 1), new ScheduledTask(11, 19, 1), new ScheduledTask(0, 3, 0), new ScheduledTask(23, 36, 1), new ScheduledTask(21, 32, 0), new ScheduledTask(19, 23, 1), new ScheduledTask(17, 21, 0), new ScheduledTask(36, 50, 1), new ScheduledTask(42, 55, 0), new ScheduledTask(32, 42, 0), new ScheduledTask(50, 63, 1), new ScheduledTask(55, 68, 0), new ScheduledTask(66, 74, 1), new ScheduledTask(68, 74, 0), new ScheduledTask(63, 66, 1)};
        int[] expectedProcessorEndTimes = new int[]{74, 74};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot99_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.99_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(0, 11, 1), new ScheduledTask(0, 8, 2), new ScheduledTask(0, 3, 3), new ScheduledTask(18, 31, 0), new ScheduledTask(17, 28, 1), new ScheduledTask(16, 20, 2), new ScheduledTask(16, 20, 3), new ScheduledTask(31, 45, 0), new ScheduledTask(36, 49, 1), new ScheduledTask(32, 42, 2), new ScheduledTask(39, 52, 3), new ScheduledTask(49, 62, 1), new ScheduledTask(55, 63, 0), new ScheduledTask(55, 61, 3), new ScheduledTask(57, 60, 2)};
        int[] expectedProcessorEndTimes = new int[]{63, 62, 60, 61};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot99_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.99_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(0, 11, 1), new ScheduledTask(0, 8, 2), new ScheduledTask(0, 3, 3), new ScheduledTask(18, 31, 0), new ScheduledTask(17, 28, 1), new ScheduledTask(16, 20, 2), new ScheduledTask(16, 20, 3), new ScheduledTask(31, 45, 0), new ScheduledTask(36, 49, 1), new ScheduledTask(32, 42, 2), new ScheduledTask(39, 52, 3), new ScheduledTask(49, 62, 1), new ScheduledTask(55, 63, 0), new ScheduledTask(55, 61, 3), new ScheduledTask(57, 60, 2)};
        int[] expectedProcessorEndTimes = new int[]{63, 62, 60, 61};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 94;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 15, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(10, 30, 1), new ScheduledTask(15, 25, 0), new ScheduledTask(25, 42, 0), new ScheduledTask(30, 35, 1), new ScheduledTask(35, 50, 1), new ScheduledTask(42, 64, 0), new ScheduledTask(50, 55, 1), new ScheduledTask(55, 67, 1), new ScheduledTask(64, 69, 0), new ScheduledTask(67, 77, 1), new ScheduledTask(69, 84, 0), new ScheduledTask(77, 89, 1), new ScheduledTask(84, 94, 0), new ScheduledTask(89, 94, 1)};
        int[] expectedProcessorEndTimes = new int[]{94, 94};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 15, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 20, 2), new ScheduledTask(0, 10, 3), new ScheduledTask(18, 35, 0), new ScheduledTask(20, 25, 2), new ScheduledTask(25, 40, 2), new ScheduledTask(35, 57, 0), new ScheduledTask(22, 27, 1), new ScheduledTask(45, 57, 3), new ScheduledTask(40, 45, 2), new ScheduledTask(45, 55, 2), new ScheduledTask(57, 72, 0), new ScheduledTask(58, 70, 3), new ScheduledTask(61, 71, 2), new ScheduledTask(64, 69, 1)};
        int[] expectedProcessorEndTimes = new int[]{72, 69, 71, 70};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 15, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 20, 2), new ScheduledTask(0, 10, 3), new ScheduledTask(18, 35, 0), new ScheduledTask(20, 25, 2), new ScheduledTask(25, 40, 2), new ScheduledTask(35, 57, 0), new ScheduledTask(22, 27, 3), new ScheduledTask(45, 57, 4), new ScheduledTask(40, 45, 2), new ScheduledTask(45, 55, 2), new ScheduledTask(57, 72, 0), new ScheduledTask(58, 70, 4), new ScheduledTask(62, 72, 5), new ScheduledTask(64, 69, 3)};
        int[] expectedProcessorEndTimes = new int[]{72, 10, 55, 69, 70, 72};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 83;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(5, 17, 1), new ScheduledTask(0, 5, 1), new ScheduledTask(12, 16, 0), new ScheduledTask(30, 41, 0), new ScheduledTask(17, 31, 1), new ScheduledTask(16, 30, 0), new ScheduledTask(31, 38, 1), new ScheduledTask(53, 69, 0), new ScheduledTask(38, 47, 1), new ScheduledTask(47, 58, 1), new ScheduledTask(42, 53, 0), new ScheduledTask(69, 83, 0), new ScheduledTask(65, 77, 1), new ScheduledTask(58, 65, 1), new ScheduledTask(77, 82, 1)};
        int[] expectedProcessorEndTimes = new int[]{83, 82};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(0, 12, 1), new ScheduledTask(0, 5, 2), new ScheduledTask(0, 4, 3), new ScheduledTask(12, 23, 1), new ScheduledTask(14, 28, 0), new ScheduledTask(14, 28, 3), new ScheduledTask(18, 25, 2), new ScheduledTask(31, 47, 2), new ScheduledTask(32, 41, 3), new ScheduledTask(30, 41, 0), new ScheduledTask(33, 44, 1), new ScheduledTask(49, 63, 2), new ScheduledTask(48, 60, 3), new ScheduledTask(55, 62, 1), new ScheduledTask(50, 55, 1)};
        int[] expectedProcessorEndTimes = new int[]{41, 62, 63, 60};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(0, 12, 1), new ScheduledTask(0, 5, 2), new ScheduledTask(0, 4, 3), new ScheduledTask(12, 23, 1), new ScheduledTask(14, 28, 0), new ScheduledTask(14, 28, 4), new ScheduledTask(18, 25, 5), new ScheduledTask(31, 47, 5), new ScheduledTask(32, 41, 4), new ScheduledTask(30, 41, 0), new ScheduledTask(33, 44, 3), new ScheduledTask(49, 63, 5), new ScheduledTask(48, 60, 4), new ScheduledTask(55, 62, 3), new ScheduledTask(50, 55, 3)};
        int[] expectedProcessorEndTimes = new int[]{41, 23, 5, 62, 60, 63};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 96;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 13, 0), new ScheduledTask(13, 26, 0), new ScheduledTask(7, 22, 1), new ScheduledTask(0, 7, 1), new ScheduledTask(30, 41, 0), new ScheduledTask(30, 37, 1), new ScheduledTask(23, 30, 1), new ScheduledTask(26, 30, 0), new ScheduledTask(50, 70, 1), new ScheduledTask(41, 59, 0), new ScheduledTask(37, 46, 1), new ScheduledTask(46, 50, 1), new ScheduledTask(74, 96, 1), new ScheduledTask(77, 95, 0), new ScheduledTask(59, 77, 0), new ScheduledTask(70, 74, 1)};
        int[] expectedProcessorEndTimes = new int[]{95, 96};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 13, 0), new ScheduledTask(0, 13, 1), new ScheduledTask(0, 15, 2), new ScheduledTask(13, 20, 0), new ScheduledTask(22, 33, 0), new ScheduledTask(30, 37, 3), new ScheduledTask(23, 30, 3), new ScheduledTask(30, 34, 2), new ScheduledTask(38, 58, 3), new ScheduledTask(36, 54, 0), new ScheduledTask(40, 49, 2), new ScheduledTask(45, 49, 1), new ScheduledTask(58, 80, 3), new ScheduledTask(62, 80, 2), new ScheduledTask(62, 80, 1), new ScheduledTask(60, 64, 0)};
        int[] expectedProcessorEndTimes = new int[]{64, 80, 80, 80};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 13, 0), new ScheduledTask(0, 13, 1), new ScheduledTask(0, 15, 2), new ScheduledTask(0, 7, 3), new ScheduledTask(22, 33, 3), new ScheduledTask(22, 29, 4), new ScheduledTask(26, 33, 5), new ScheduledTask(22, 26, 5), new ScheduledTask(38, 58, 5), new ScheduledTask(33, 51, 3), new ScheduledTask(43, 52, 4), new ScheduledTask(38, 42, 4), new ScheduledTask(58, 80, 5), new ScheduledTask(62, 80, 4), new ScheduledTask(51, 69, 3), new ScheduledTask(69, 73, 3)};
        int[] expectedProcessorEndTimes = new int[]{13, 13, 15, 73, 80, 80};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.00_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 98;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(10, 24, 0), new ScheduledTask(0, 16, 1), new ScheduledTask(0, 10, 0), new ScheduledTask(24, 32, 1), new ScheduledTask(24, 42, 0), new ScheduledTask(32, 42, 1), new ScheduledTask(42, 54, 1), new ScheduledTask(16, 24, 1), new ScheduledTask(60, 72, 1), new ScheduledTask(62, 80, 0), new ScheduledTask(42, 62, 0), new ScheduledTask(54, 60, 1), new ScheduledTask(72, 92, 1), new ScheduledTask(88, 98, 0), new ScheduledTask(80, 88, 0), new ScheduledTask(92, 98, 1)};
        int[] expectedProcessorEndTimes = new int[]{98, 98};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot00_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.00_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 74;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(0, 16, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 8, 3), new ScheduledTask(21, 39, 0), new ScheduledTask(17, 27, 1), new ScheduledTask(23, 35, 2), new ScheduledTask(23, 31, 3), new ScheduledTask(37, 49, 2), new ScheduledTask(39, 57, 0), new ScheduledTask(44, 64, 1), new ScheduledTask(48, 54, 3), new ScheduledTask(54, 74, 3), new ScheduledTask(64, 74, 0), new ScheduledTask(64, 72, 1), new ScheduledTask(67, 73, 2)};
        int[] expectedProcessorEndTimes = new int[]{74, 72, 73, 74};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot00_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.00_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 74;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(0, 16, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 8, 3), new ScheduledTask(21, 39, 0), new ScheduledTask(17, 27, 1), new ScheduledTask(23, 35, 2), new ScheduledTask(23, 31, 3), new ScheduledTask(37, 49, 2), new ScheduledTask(39, 57, 0), new ScheduledTask(44, 64, 1), new ScheduledTask(48, 54, 3), new ScheduledTask(54, 74, 3), new ScheduledTask(64, 74, 0), new ScheduledTask(64, 72, 1), new ScheduledTask(67, 73, 2)};
        int[] expectedProcessorEndTimes = new int[]{74, 72, 73, 74};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 101;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 19, 0), new ScheduledTask(19, 32, 1), new ScheduledTask(0, 19, 1), new ScheduledTask(19, 36, 0), new ScheduledTask(41, 56, 1), new ScheduledTask(32, 41, 1), new ScheduledTask(40, 46, 0), new ScheduledTask(36, 40, 0), new ScheduledTask(65, 76, 1), new ScheduledTask(56, 65, 1), new ScheduledTask(46, 52, 0), new ScheduledTask(52, 61, 0), new ScheduledTask(80, 101, 0), new ScheduledTask(61, 80, 0), new ScheduledTask(85, 98, 1), new ScheduledTask(76, 85, 1)};
        int[] expectedProcessorEndTimes = new int[]{101, 98};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 19, 0), new ScheduledTask(0, 13, 1), new ScheduledTask(0, 19, 2), new ScheduledTask(0, 17, 3), new ScheduledTask(23, 38, 1), new ScheduledTask(22, 31, 0), new ScheduledTask(26, 32, 3), new ScheduledTask(22, 26, 3), new ScheduledTask(38, 49, 1), new ScheduledTask(46, 55, 3), new ScheduledTask(32, 38, 3), new ScheduledTask(42, 51, 2), new ScheduledTask(55, 76, 3), new ScheduledTask(51, 70, 2), new ScheduledTask(63, 76, 1), new ScheduledTask(60, 69, 0)};
        int[] expectedProcessorEndTimes = new int[]{69, 76, 70, 76};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 19, 0), new ScheduledTask(0, 13, 1), new ScheduledTask(0, 19, 2), new ScheduledTask(0, 17, 3), new ScheduledTask(23, 38, 2), new ScheduledTask(22, 31, 0), new ScheduledTask(24, 30, 4), new ScheduledTask(25, 29, 5), new ScheduledTask(38, 49, 2), new ScheduledTask(46, 55, 5), new ScheduledTask(39, 45, 5), new ScheduledTask(39, 48, 4), new ScheduledTask(55, 76, 5), new ScheduledTask(51, 70, 4), new ScheduledTask(63, 76, 3), new ScheduledTask(60, 69, 2)};
        int[] expectedProcessorEndTimes = new int[]{31, 13, 69, 76, 70, 76};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(5, 18, 1), new ScheduledTask(0, 5, 1), new ScheduledTask(11, 27, 0), new ScheduledTask(18, 21, 1), new ScheduledTask(28, 41, 0), new ScheduledTask(24, 29, 1), new ScheduledTask(21, 24, 1), new ScheduledTask(29, 44, 1), new ScheduledTask(44, 57, 1), new ScheduledTask(44, 60, 0), new ScheduledTask(41, 44, 0), new ScheduledTask(57, 73, 1), new ScheduledTask(60, 73, 0), new ScheduledTask(73, 84, 1), new ScheduledTask(73, 84, 0)};
        int[] expectedProcessorEndTimes = new int[]{84, 84};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(0, 13, 1), new ScheduledTask(0, 5, 2), new ScheduledTask(11, 27, 0), new ScheduledTask(0, 3, 3), new ScheduledTask(18, 31, 1), new ScheduledTask(13, 18, 1), new ScheduledTask(18, 21, 3), new ScheduledTask(29, 44, 3), new ScheduledTask(27, 40, 0), new ScheduledTask(31, 47, 1), new ScheduledTask(44, 47, 3), new ScheduledTask(50, 66, 3), new ScheduledTask(49, 62, 2), new ScheduledTask(54, 65, 1), new ScheduledTask(54, 65, 0)};
        int[] expectedProcessorEndTimes = new int[]{65, 65, 62, 66};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(0, 13, 1), new ScheduledTask(0, 5, 2), new ScheduledTask(11, 27, 0), new ScheduledTask(0, 3, 3), new ScheduledTask(23, 36, 2), new ScheduledTask(13, 18, 1), new ScheduledTask(18, 21, 4), new ScheduledTask(29, 44, 5), new ScheduledTask(27, 40, 0), new ScheduledTask(36, 52, 2), new ScheduledTask(44, 47, 5), new ScheduledTask(50, 66, 5), new ScheduledTask(52, 65, 2), new ScheduledTask(55, 66, 4), new ScheduledTask(54, 65, 3)};
        int[] expectedProcessorEndTimes = new int[]{40, 18, 65, 65, 66, 66};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot01_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.01_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 94;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 18, 0), new ScheduledTask(14, 22, 1), new ScheduledTask(0, 14, 1), new ScheduledTask(18, 34, 0), new ScheduledTask(22, 40, 1), new ScheduledTask(44, 52, 1), new ScheduledTask(40, 44, 1), new ScheduledTask(34, 52, 0), new ScheduledTask(52, 72, 1), new ScheduledTask(52, 66, 0), new ScheduledTask(72, 92, 1), new ScheduledTask(72, 78, 0), new ScheduledTask(66, 72, 0), new ScheduledTask(88, 94, 0), new ScheduledTask(82, 88, 0), new ScheduledTask(78, 82, 0)};
        int[] expectedProcessorEndTimes = new int[]{94, 92};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot01_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.01_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 18, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(0, 14, 2), new ScheduledTask(0, 16, 3), new ScheduledTask(18, 36, 0), new ScheduledTask(19, 27, 2), new ScheduledTask(25, 29, 1), new ScheduledTask(23, 41, 3), new ScheduledTask(39, 59, 0), new ScheduledTask(44, 58, 1), new ScheduledTask(62, 82, 1), new ScheduledTask(41, 47, 3), new ScheduledTask(45, 51, 2), new ScheduledTask(63, 69, 0), new ScheduledTask(53, 59, 3), new ScheduledTask(62, 66, 2)};
        int[] expectedProcessorEndTimes = new int[]{69, 82, 66, 59};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot01_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.01_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 18, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(0, 14, 2), new ScheduledTask(0, 16, 3), new ScheduledTask(18, 36, 0), new ScheduledTask(19, 27, 2), new ScheduledTask(25, 29, 1), new ScheduledTask(23, 41, 3), new ScheduledTask(39, 59, 0), new ScheduledTask(44, 58, 1), new ScheduledTask(62, 82, 1), new ScheduledTask(41, 47, 3), new ScheduledTask(45, 51, 2), new ScheduledTask(63, 69, 0), new ScheduledTask(53, 59, 3), new ScheduledTask(62, 66, 2)};
        int[] expectedProcessorEndTimes = new int[]{69, 82, 66, 59};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot01_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.01_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(11, 26, 0), new ScheduledTask(5, 20, 1), new ScheduledTask(0, 11, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(29, 42, 0), new ScheduledTask(20, 31, 1), new ScheduledTask(31, 36, 1), new ScheduledTask(26, 29, 0), new ScheduledTask(36, 51, 1), new ScheduledTask(51, 64, 1), new ScheduledTask(50, 63, 0), new ScheduledTask(42, 50, 0), new ScheduledTask(63, 76, 0), new ScheduledTask(64, 74, 1), new ScheduledTask(74, 84, 1), new ScheduledTask(76, 84, 0)};
        int[] expectedProcessorEndTimes = new int[]{84, 84};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot01_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.01_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 15, 0), new ScheduledTask(0, 15, 1), new ScheduledTask(0, 11, 2), new ScheduledTask(0, 5, 3), new ScheduledTask(21, 34, 0), new ScheduledTask(15, 26, 1), new ScheduledTask(23, 28, 2), new ScheduledTask(19, 22, 3), new ScheduledTask(30, 45, 1), new ScheduledTask(34, 47, 0), new ScheduledTask(38, 51, 2), new ScheduledTask(37, 45, 3), new ScheduledTask(53, 66, 2), new ScheduledTask(50, 60, 0), new ScheduledTask(57, 67, 1), new ScheduledTask(59, 67, 3)};
        int[] expectedProcessorEndTimes = new int[]{60, 67, 66, 67};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot01_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.01_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 15, 0), new ScheduledTask(0, 15, 1), new ScheduledTask(0, 11, 2), new ScheduledTask(0, 5, 3), new ScheduledTask(21, 34, 0), new ScheduledTask(15, 26, 1), new ScheduledTask(23, 28, 2), new ScheduledTask(19, 22, 3), new ScheduledTask(30, 45, 1), new ScheduledTask(34, 47, 0), new ScheduledTask(38, 51, 2), new ScheduledTask(37, 45, 3), new ScheduledTask(53, 66, 2), new ScheduledTask(50, 60, 0), new ScheduledTask(57, 67, 1), new ScheduledTask(59, 67, 3)};
        int[] expectedProcessorEndTimes = new int[]{60, 67, 66, 67};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(5, 17, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(5, 14, 1), new ScheduledTask(14, 29, 1), new ScheduledTask(0, 5, 0), new ScheduledTask(22, 36, 0), new ScheduledTask(17, 22, 0), new ScheduledTask(29, 34, 1), new ScheduledTask(43, 60, 0), new ScheduledTask(34, 49, 1), new ScheduledTask(49, 64, 1), new ScheduledTask(36, 43, 0), new ScheduledTask(60, 77, 0), new ScheduledTask(64, 76, 1), new ScheduledTask(76, 88, 1), new ScheduledTask(77, 87, 0)};
        int[] expectedProcessorEndTimes = new int[]{87, 88};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(0, 9, 2), new ScheduledTask(9, 24, 2), new ScheduledTask(0, 5, 3), new ScheduledTask(15, 29, 0), new ScheduledTask(21, 26, 1), new ScheduledTask(14, 19, 3), new ScheduledTask(31, 48, 0), new ScheduledTask(26, 41, 1), new ScheduledTask(37, 52, 2), new ScheduledTask(36, 43, 3), new ScheduledTask(50, 67, 0), new ScheduledTask(52, 64, 2), new ScheduledTask(56, 68, 1), new ScheduledTask(60, 70, 3)};
        int[] expectedProcessorEndTimes = new int[]{67, 68, 64, 70};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(0, 9, 2), new ScheduledTask(9, 24, 2), new ScheduledTask(0, 5, 3), new ScheduledTask(15, 29, 0), new ScheduledTask(21, 26, 1), new ScheduledTask(14, 19, 3), new ScheduledTask(31, 48, 0), new ScheduledTask(26, 41, 1), new ScheduledTask(37, 52, 2), new ScheduledTask(36, 43, 3), new ScheduledTask(50, 67, 0), new ScheduledTask(52, 64, 2), new ScheduledTask(56, 68, 1), new ScheduledTask(60, 70, 3)};
        int[] expectedProcessorEndTimes = new int[]{67, 68, 64, 70};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(8, 18, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(2, 8, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(38, 43, 0), new ScheduledTask(28, 33, 0), new ScheduledTask(27, 30, 1), new ScheduledTask(18, 28, 0), new ScheduledTask(56, 64, 0), new ScheduledTask(50, 56, 0), new ScheduledTask(43, 50, 0), new ScheduledTask(33, 38, 0), new ScheduledTask(73, 81, 0), new ScheduledTask(66, 73, 0), new ScheduledTask(65, 67, 1), new ScheduledTask(64, 66, 0)};
        int[] expectedProcessorEndTimes = new int[]{81, 67};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(8, 18, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(2, 8, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(38, 43, 0), new ScheduledTask(28, 33, 0), new ScheduledTask(27, 30, 1), new ScheduledTask(18, 28, 0), new ScheduledTask(56, 64, 0), new ScheduledTask(50, 56, 0), new ScheduledTask(43, 50, 0), new ScheduledTask(33, 38, 0), new ScheduledTask(73, 81, 0), new ScheduledTask(66, 73, 0), new ScheduledTask(65, 67, 2), new ScheduledTask(64, 66, 0)};
        int[] expectedProcessorEndTimes = new int[]{81, 30, 67};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(8, 18, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(2, 8, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(38, 43, 0), new ScheduledTask(28, 33, 0), new ScheduledTask(27, 30, 1), new ScheduledTask(18, 28, 0), new ScheduledTask(56, 64, 0), new ScheduledTask(50, 56, 0), new ScheduledTask(43, 50, 0), new ScheduledTask(33, 38, 0), new ScheduledTask(73, 81, 0), new ScheduledTask(66, 73, 0), new ScheduledTask(65, 67, 2), new ScheduledTask(64, 66, 0)};
        int[] expectedProcessorEndTimes = new int[]{81, 30, 67};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 79;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(10, 17, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(4, 10, 0), new ScheduledTask(0, 4, 0), new ScheduledTask(31, 39, 0), new ScheduledTask(20, 24, 0), new ScheduledTask(42, 46, 0), new ScheduledTask(17, 20, 0), new ScheduledTask(52, 60, 0), new ScheduledTask(24, 31, 0), new ScheduledTask(46, 52, 0), new ScheduledTask(39, 42, 0), new ScheduledTask(70, 79, 0), new ScheduledTask(63, 70, 0), new ScheduledTask(71, 76, 1), new ScheduledTask(60, 63, 0)};
        int[] expectedProcessorEndTimes = new int[]{79, 76};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 79;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(4, 11, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(0, 6, 2), new ScheduledTask(0, 4, 0), new ScheduledTask(29, 37, 0), new ScheduledTask(15, 19, 0), new ScheduledTask(42, 46, 0), new ScheduledTask(11, 14, 0), new ScheduledTask(52, 60, 0), new ScheduledTask(19, 26, 0), new ScheduledTask(46, 52, 0), new ScheduledTask(37, 40, 0), new ScheduledTask(70, 79, 0), new ScheduledTask(63, 70, 0), new ScheduledTask(66, 71, 3), new ScheduledTask(60, 63, 0)};
        int[] expectedProcessorEndTimes = new int[]{79, 7, 6, 71};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 79;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(10, 17, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(4, 10, 0), new ScheduledTask(0, 4, 0), new ScheduledTask(31, 39, 0), new ScheduledTask(20, 24, 0), new ScheduledTask(42, 46, 0), new ScheduledTask(17, 20, 0), new ScheduledTask(52, 60, 0), new ScheduledTask(24, 31, 0), new ScheduledTask(46, 52, 0), new ScheduledTask(39, 42, 0), new ScheduledTask(70, 79, 0), new ScheduledTask(63, 70, 0), new ScheduledTask(71, 76, 1), new ScheduledTask(60, 63, 0)};
        int[] expectedProcessorEndTimes = new int[]{79, 76};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(18, 28, 0), new ScheduledTask(9, 15, 0), new ScheduledTask(0, 9, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(15, 18, 0), new ScheduledTask(35, 42, 0), new ScheduledTask(31, 33, 0), new ScheduledTask(28, 31, 0), new ScheduledTask(42, 46, 0), new ScheduledTask(60, 64, 1), new ScheduledTask(33, 35, 0), new ScheduledTask(46, 54, 0), new ScheduledTask(60, 68, 0), new ScheduledTask(64, 71, 1), new ScheduledTask(54, 60, 0), new ScheduledTask(71, 76, 1)};
        int[] expectedProcessorEndTimes = new int[]{68, 76};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(18, 28, 0), new ScheduledTask(9, 15, 0), new ScheduledTask(0, 9, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(15, 18, 0), new ScheduledTask(35, 42, 0), new ScheduledTask(31, 33, 0), new ScheduledTask(28, 31, 0), new ScheduledTask(42, 46, 0), new ScheduledTask(60, 64, 1), new ScheduledTask(33, 35, 0), new ScheduledTask(46, 54, 0), new ScheduledTask(60, 68, 0), new ScheduledTask(64, 71, 1), new ScheduledTask(54, 60, 0), new ScheduledTask(71, 76, 1)};
        int[] expectedProcessorEndTimes = new int[]{68, 76};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(18, 28, 0), new ScheduledTask(9, 15, 0), new ScheduledTask(0, 9, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(15, 18, 0), new ScheduledTask(35, 42, 0), new ScheduledTask(31, 33, 0), new ScheduledTask(28, 31, 0), new ScheduledTask(42, 46, 0), new ScheduledTask(60, 64, 2), new ScheduledTask(33, 35, 0), new ScheduledTask(46, 54, 0), new ScheduledTask(60, 68, 0), new ScheduledTask(64, 71, 2), new ScheduledTask(54, 60, 0), new ScheduledTask(71, 76, 2)};
        int[] expectedProcessorEndTimes = new int[]{68, 6, 76};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(7, 17, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 7, 0), new ScheduledTask(23, 33, 0), new ScheduledTask(53, 56, 1), new ScheduledTask(20, 23, 0), new ScheduledTask(33, 39, 0), new ScheduledTask(41, 43, 0), new ScheduledTask(60, 69, 1), new ScheduledTask(56, 60, 1), new ScheduledTask(43, 48, 0), new ScheduledTask(48, 56, 0), new ScheduledTask(74, 81, 1), new ScheduledTask(69, 74, 1), new ScheduledTask(56, 60, 0), new ScheduledTask(82, 84, 1)};
        int[] expectedProcessorEndTimes = new int[]{60, 84};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(7, 17, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 7, 0), new ScheduledTask(23, 33, 0), new ScheduledTask(53, 56, 2), new ScheduledTask(20, 23, 0), new ScheduledTask(33, 39, 0), new ScheduledTask(41, 43, 0), new ScheduledTask(60, 69, 2), new ScheduledTask(56, 60, 2), new ScheduledTask(43, 48, 0), new ScheduledTask(48, 56, 0), new ScheduledTask(74, 81, 2), new ScheduledTask(69, 74, 2), new ScheduledTask(79, 83, 3), new ScheduledTask(82, 84, 2)};
        int[] expectedProcessorEndTimes = new int[]{56, 10, 84, 83};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(10, 17, 0), new ScheduledTask(23, 33, 0), new ScheduledTask(46, 49, 2), new ScheduledTask(20, 23, 0), new ScheduledTask(33, 39, 0), new ScheduledTask(41, 43, 0), new ScheduledTask(59, 68, 2), new ScheduledTask(49, 53, 2), new ScheduledTask(43, 48, 0), new ScheduledTask(48, 56, 0), new ScheduledTask(74, 81, 2), new ScheduledTask(69, 74, 2), new ScheduledTask(79, 83, 3), new ScheduledTask(82, 84, 2)};
        int[] expectedProcessorEndTimes = new int[]{56, 10, 84, 83};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot04_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.04_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(3, 5, 0), new ScheduledTask(0, 3, 0), new ScheduledTask(5, 9, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(44, 49, 1), new ScheduledTask(14, 21, 0), new ScheduledTask(9, 14, 0), new ScheduledTask(35, 38, 1), new ScheduledTask(49, 53, 1), new ScheduledTask(38, 42, 1), new ScheduledTask(53, 55, 1), new ScheduledTask(21, 31, 0), new ScheduledTask(57, 67, 1), new ScheduledTask(67, 74, 1), new ScheduledTask(70, 76, 0), new ScheduledTask(55, 57, 1)};
        int[] expectedProcessorEndTimes = new int[]{76, 74};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot04_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.04_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(3, 5, 0), new ScheduledTask(0, 3, 0), new ScheduledTask(5, 9, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(44, 49, 1), new ScheduledTask(14, 21, 0), new ScheduledTask(9, 14, 0), new ScheduledTask(35, 38, 1), new ScheduledTask(49, 53, 1), new ScheduledTask(38, 42, 1), new ScheduledTask(53, 55, 1), new ScheduledTask(21, 31, 0), new ScheduledTask(57, 67, 1), new ScheduledTask(67, 74, 1), new ScheduledTask(70, 76, 2), new ScheduledTask(55, 57, 1)};
        int[] expectedProcessorEndTimes = new int[]{31, 74, 76};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot04_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.04_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(6, 9, 0), new ScheduledTask(2, 6, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(41, 46, 2), new ScheduledTask(14, 21, 0), new ScheduledTask(9, 14, 0), new ScheduledTask(38, 41, 2), new ScheduledTask(49, 53, 2), new ScheduledTask(55, 59, 2), new ScheduledTask(46, 48, 2), new ScheduledTask(21, 31, 0), new ScheduledTask(59, 69, 2), new ScheduledTask(69, 76, 2), new ScheduledTask(70, 76, 3), new ScheduledTask(53, 55, 2)};
        int[] expectedProcessorEndTimes = new int[]{31, 8, 76, 76};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot05_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.05_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(11, 13, 0), new ScheduledTask(7, 11, 0), new ScheduledTask(25, 31, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(20, 25, 0), new ScheduledTask(34, 42, 0), new ScheduledTask(13, 20, 0), new ScheduledTask(31, 34, 0), new ScheduledTask(50, 57, 0), new ScheduledTask(46, 50, 0), new ScheduledTask(42, 46, 0), new ScheduledTask(47, 54, 1), new ScheduledTask(71, 81, 0), new ScheduledTask(57, 65, 0), new ScheduledTask(65, 71, 0), new ScheduledTask(72, 77, 1)};
        int[] expectedProcessorEndTimes = new int[]{81, 77};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot05_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.05_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(28, 30, 0), new ScheduledTask(6, 10, 0), new ScheduledTask(0, 6, 0), new ScheduledTask(13, 20, 0), new ScheduledTask(37, 42, 0), new ScheduledTask(20, 28, 0), new ScheduledTask(30, 37, 0), new ScheduledTask(10, 13, 0), new ScheduledTask(42, 49, 0), new ScheduledTask(49, 53, 0), new ScheduledTask(57, 61, 1), new ScheduledTask(53, 60, 0), new ScheduledTask(66, 76, 0), new ScheduledTask(72, 80, 2), new ScheduledTask(60, 66, 0), new ScheduledTask(75, 80, 1)};
        int[] expectedProcessorEndTimes = new int[]{76, 80, 80};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot05_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.05_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(28, 30, 0), new ScheduledTask(6, 10, 0), new ScheduledTask(0, 6, 0), new ScheduledTask(13, 20, 0), new ScheduledTask(37, 42, 0), new ScheduledTask(20, 28, 0), new ScheduledTask(30, 37, 0), new ScheduledTask(10, 13, 0), new ScheduledTask(42, 49, 0), new ScheduledTask(49, 53, 0), new ScheduledTask(57, 61, 1), new ScheduledTask(53, 60, 0), new ScheduledTask(66, 76, 0), new ScheduledTask(72, 80, 2), new ScheduledTask(60, 66, 0), new ScheduledTask(75, 80, 1)};
        int[] expectedProcessorEndTimes = new int[]{76, 80, 80};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_9dot97_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_9.97_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(6, 15, 0), new ScheduledTask(3, 6, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(0, 3, 0), new ScheduledTask(21, 29, 0), new ScheduledTask(32, 41, 0), new ScheduledTask(45, 52, 0), new ScheduledTask(15, 21, 0), new ScheduledTask(29, 32, 0), new ScheduledTask(56, 61, 0), new ScheduledTask(52, 56, 0), new ScheduledTask(41, 45, 0), new ScheduledTask(72, 81, 0), new ScheduledTask(75, 82, 1), new ScheduledTask(65, 72, 0), new ScheduledTask(61, 65, 0)};
        int[] expectedProcessorEndTimes = new int[]{81, 82};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_9dot97_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_9.97_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(6, 15, 0), new ScheduledTask(3, 6, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(0, 3, 0), new ScheduledTask(21, 29, 0), new ScheduledTask(32, 41, 0), new ScheduledTask(45, 52, 0), new ScheduledTask(15, 21, 0), new ScheduledTask(29, 32, 0), new ScheduledTask(56, 61, 0), new ScheduledTask(52, 56, 0), new ScheduledTask(41, 45, 0), new ScheduledTask(72, 81, 0), new ScheduledTask(75, 82, 1), new ScheduledTask(65, 72, 0), new ScheduledTask(61, 65, 0)};
        int[] expectedProcessorEndTimes = new int[]{81, 82};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_9dot97_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_9.97_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(6, 15, 0), new ScheduledTask(3, 6, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(0, 3, 0), new ScheduledTask(21, 29, 0), new ScheduledTask(32, 41, 0), new ScheduledTask(45, 52, 0), new ScheduledTask(15, 21, 0), new ScheduledTask(29, 32, 0), new ScheduledTask(56, 61, 0), new ScheduledTask(52, 56, 0), new ScheduledTask(41, 45, 0), new ScheduledTask(72, 81, 0), new ScheduledTask(75, 82, 2), new ScheduledTask(65, 72, 0), new ScheduledTask(61, 65, 0)};
        int[] expectedProcessorEndTimes = new int[]{81, 4, 82};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_9dot98_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_9.98_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 89;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(10, 19, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(6, 10, 0), new ScheduledTask(0, 6, 0), new ScheduledTask(50, 58, 0), new ScheduledTask(28, 32, 0), new ScheduledTask(19, 28, 0), new ScheduledTask(42, 50, 0), new ScheduledTask(58, 65, 0), new ScheduledTask(75, 82, 0), new ScheduledTask(32, 42, 0), new ScheduledTask(65, 70, 0), new ScheduledTask(78, 85, 1), new ScheduledTask(70, 75, 0), new ScheduledTask(85, 89, 0), new ScheduledTask(82, 85, 0)};
        int[] expectedProcessorEndTimes = new int[]{89, 85};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_9dot98_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_9.98_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(10, 19, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(6, 10, 0), new ScheduledTask(0, 6, 0), new ScheduledTask(50, 58, 0), new ScheduledTask(28, 32, 0), new ScheduledTask(19, 28, 0), new ScheduledTask(42, 50, 0), new ScheduledTask(58, 65, 0), new ScheduledTask(70, 77, 0), new ScheduledTask(32, 42, 0), new ScheduledTask(65, 70, 0), new ScheduledTask(78, 85, 2), new ScheduledTask(83, 88, 3), new ScheduledTask(80, 84, 0), new ScheduledTask(77, 80, 0)};
        int[] expectedProcessorEndTimes = new int[]{84, 7, 85, 88};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_9dot98_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_9.98_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(10, 19, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(6, 10, 0), new ScheduledTask(0, 6, 0), new ScheduledTask(50, 58, 0), new ScheduledTask(28, 32, 0), new ScheduledTask(19, 28, 0), new ScheduledTask(42, 50, 0), new ScheduledTask(58, 65, 0), new ScheduledTask(70, 77, 0), new ScheduledTask(32, 42, 0), new ScheduledTask(65, 70, 0), new ScheduledTask(78, 85, 2), new ScheduledTask(83, 88, 3), new ScheduledTask(80, 84, 0), new ScheduledTask(77, 80, 0)};
        int[] expectedProcessorEndTimes = new int[]{84, 7, 85, 88};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 13, 0), new ScheduledTask(13, 15, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(20, 30, 0), new ScheduledTask(34, 44, 0), new ScheduledTask(15, 20, 0), new ScheduledTask(19, 23, 1), new ScheduledTask(44, 51, 0), new ScheduledTask(69, 75, 0), new ScheduledTask(59, 69, 0), new ScheduledTask(30, 34, 0), new ScheduledTask(79, 88, 0), new ScheduledTask(51, 59, 0), new ScheduledTask(77, 79, 0), new ScheduledTask(75, 77, 0)};
        int[] expectedProcessorEndTimes = new int[]{88, 23};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(2, 5, 0), new ScheduledTask(5, 15, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(20, 30, 0), new ScheduledTask(34, 44, 0), new ScheduledTask(15, 20, 0), new ScheduledTask(21, 25, 1), new ScheduledTask(44, 51, 0), new ScheduledTask(69, 75, 0), new ScheduledTask(59, 69, 0), new ScheduledTask(30, 34, 0), new ScheduledTask(79, 88, 0), new ScheduledTask(51, 59, 0), new ScheduledTask(77, 79, 0), new ScheduledTask(75, 77, 0)};
        int[] expectedProcessorEndTimes = new int[]{88, 25};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(2, 5, 0), new ScheduledTask(5, 15, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(20, 30, 0), new ScheduledTask(34, 44, 0), new ScheduledTask(15, 20, 0), new ScheduledTask(21, 25, 1), new ScheduledTask(44, 51, 0), new ScheduledTask(69, 75, 0), new ScheduledTask(59, 69, 0), new ScheduledTask(30, 34, 0), new ScheduledTask(79, 88, 0), new ScheduledTask(51, 59, 0), new ScheduledTask(77, 79, 0), new ScheduledTask(75, 77, 0)};
        int[] expectedProcessorEndTimes = new int[]{88, 25};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 95;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(18, 25, 0), new ScheduledTask(4, 9, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(0, 4, 0), new ScheduledTask(32, 40, 0), new ScheduledTask(25, 32, 0), new ScheduledTask(55, 60, 0), new ScheduledTask(9, 18, 0), new ScheduledTask(40, 47, 0), new ScheduledTask(65, 71, 0), new ScheduledTask(47, 55, 0), new ScheduledTask(60, 65, 0), new ScheduledTask(86, 95, 0), new ScheduledTask(78, 86, 0), new ScheduledTask(71, 78, 0), new ScheduledTask(88, 95, 1)};
        int[] expectedProcessorEndTimes = new int[]{95, 95};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 95;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(18, 25, 0), new ScheduledTask(4, 9, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(0, 4, 0), new ScheduledTask(32, 40, 0), new ScheduledTask(25, 32, 0), new ScheduledTask(55, 60, 0), new ScheduledTask(9, 18, 0), new ScheduledTask(40, 47, 0), new ScheduledTask(65, 71, 0), new ScheduledTask(47, 55, 0), new ScheduledTask(60, 65, 0), new ScheduledTask(86, 95, 0), new ScheduledTask(78, 86, 0), new ScheduledTask(71, 78, 0), new ScheduledTask(88, 95, 2)};
        int[] expectedProcessorEndTimes = new int[]{95, 9, 95};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_9dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_9.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 95;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(18, 25, 0), new ScheduledTask(4, 9, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(0, 4, 0), new ScheduledTask(32, 40, 0), new ScheduledTask(25, 32, 0), new ScheduledTask(55, 60, 0), new ScheduledTask(9, 18, 0), new ScheduledTask(40, 47, 0), new ScheduledTask(65, 71, 0), new ScheduledTask(47, 55, 0), new ScheduledTask(60, 65, 0), new ScheduledTask(86, 95, 0), new ScheduledTask(78, 86, 0), new ScheduledTask(71, 78, 0), new ScheduledTask(88, 95, 2)};
        int[] expectedProcessorEndTimes = new int[]{95, 9, 95};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 16);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    
}
