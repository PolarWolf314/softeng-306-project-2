package nz.ac.auckland.se306.group12.optimal;

import java.util.concurrent.TimeUnit;
import nz.ac.auckland.se306.group12.ScheduleValidator;
import nz.ac.auckland.se306.group12.TestUtil;
import nz.ac.auckland.se306.group12.models.Graph;
import nz.ac.auckland.se306.group12.models.Schedule;
import nz.ac.auckland.se306.group12.scheduler.Scheduler;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;

/**
 * This class has been automatically generated by the GenerateUnitTests.py script.
 * Do not modify this file directly as it will be overwritten the next time the script is run.
 * <p>
 * The optimal schedules for each test have been sourced from 
 * <a href="https://parallel.auckland.ac.nz/OptimalTaskScheduling/OptimalSchedules.html">the amazing work</a>
 * done by the Parallel and Reconfigurable Computing Lab at the University of Auckland.
 */
@Timeout(value = 2, unit = TimeUnit.MINUTES, threadMode = ThreadMode.SEPARATE_THREAD)
public class OptimalSchedulerNodes16Test {

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 996;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 640;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 521;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1074;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 682;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 554;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 502;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 373;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 896;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 540;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 420;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 513;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 401;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 656;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 537;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 554;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 428;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 382;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 293;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 540;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 414;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 918;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 588;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 480;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot99_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.99_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot99_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.99_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot99_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.99_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot99_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.99_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot99_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.99_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot99_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.99_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot99_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.99_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_1dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_1.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 48;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_1dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_1.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_10dot03_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_10.03_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_10dot03_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_10.03_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_10dot03_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_10.03_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_10dot03_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_10.03_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 74;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_10dot03_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_10.03_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 74;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_10dot06_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_10.06_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_10dot06_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_10.06_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_9dot97_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_9.97_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_9dot97_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_9.97_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_9dot97_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_9.97_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_9dot99_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_9.99_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_9dot99_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_9.99_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_9dot99_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_9.99_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 377;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 205;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 148;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 416;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 231;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 171;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 582;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 349;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 271;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 471;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 283;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 218;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 552;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 338;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 268;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 477;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 269;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 202;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 479;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 255;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 181;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 532;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 283;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 197;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 563;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 321;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 247;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 490;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 279;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 210;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot97_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.97_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 60;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot97_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.97_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 34;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot97_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.97_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 27;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot98_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.98_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 49;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot98_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.98_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 27;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot98_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.98_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 20;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 26;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 28;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 28;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 21;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot02_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.02_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot02_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.02_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 33;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot02_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.02_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 26;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot03_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.03_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot03_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.03_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot03_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.03_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot06_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.06_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot06_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.06_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot06_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.06_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 25;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot95_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.95_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot95_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.95_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot95_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.95_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot99_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.99_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot99_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.99_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot99_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.99_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot99_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.99_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot99_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.99_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot99_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.99_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot99_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.99_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot99_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.99_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot99_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.99_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot99_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.99_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot99_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.99_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot99_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.99_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 44;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 22;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 15;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 44;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 22;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 15;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 38;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 19;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 13;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 19;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 13;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 26;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 18;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 27;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 18;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 23;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 16;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 27;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 18;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 41;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 21;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 14;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 23;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 15;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 454;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 267;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 267;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 482;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 292;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 239;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 457;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 253;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 215;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 495;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 284;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 226;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 487;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 277;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 221;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 433;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 250;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 228;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 504;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 290;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 246;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 486;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 281;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 227;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 378;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 230;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 194;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 461;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 261;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 212;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot96_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.96_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot96_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.96_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 33;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot96_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.96_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot96_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.96_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot96_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.96_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot96_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.96_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot98_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.98_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot98_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.98_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 38;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot98_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.98_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 38;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 48;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 30;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 41;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 38;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 39;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 39;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 34;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot04_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.04_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot04_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.04_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot04_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.04_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot08_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.08_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 48;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot08_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.08_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot08_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.08_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 27;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot11_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.11_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot11_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.11_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot11_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.11_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 30;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 83;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot04_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.04_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot04_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.04_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot04_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.04_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_9dot97_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_9.97_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_9dot97_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_9.97_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_9dot97_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_9.97_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_9dot98_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_9.98_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_9dot98_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_9.98_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_9dot98_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_9.98_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 75;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_9dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_9.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 511;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 290;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 216;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 391;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 236;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 188;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 513;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 283;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 209;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 453;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 245;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 176;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 491;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 292;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 230;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 528;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 305;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 234;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 536;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 314;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 239;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 492;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 274;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 204;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 352;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 210;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 163;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 577;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 330;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 250;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 23;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 22;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 28;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 24;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 30;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 23;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 27;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 22;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 25;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot03_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.03_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot03_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.03_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 39;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot03_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.03_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot03_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.03_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot03_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.03_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot03_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.03_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 25;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot07_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.07_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 44;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot07_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.07_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 24;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot07_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.07_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 18;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.00_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot00_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.00_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot00_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.00_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot00_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.00_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot00_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.00_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot00_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.00_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 60;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_9dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_9.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 565;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 378;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 378;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 532;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 321;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 290;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 386;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 221;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 219;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 559;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 346;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 323;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 565;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 324;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 305;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 467;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 270;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 243;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 421;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 249;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 230;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 466;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 258;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 217;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 539;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 293;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 268;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 482;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 283;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 274;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot94_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.94_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot94_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.94_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 34;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot94_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.94_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot95_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.95_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot95_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.95_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 39;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot95_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.95_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 38;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot97_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.97_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot97_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.97_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot97_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.97_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 42;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 42;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 42;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 34;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 33;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot02_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.02_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot02_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.02_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot02_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.02_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 38;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot03_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.03_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 60;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot03_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.03_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 42;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot03_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.03_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 41;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot06_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.06_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot06_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.06_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 42;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot06_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.06_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 42;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 87;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 87;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 87;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot03_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.03_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot03_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.03_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot03_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.03_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot04_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.04_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot04_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.04_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot04_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.04_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot05_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.05_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot05_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.05_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot05_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.05_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 765;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 656;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 656;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 761;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 677;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 677;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 775;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 710;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 710;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 683;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 581;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 581;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 778;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 654;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 654;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 914;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 888;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 888;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 816;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 772;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 772;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 882;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 771;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 771;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 699;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 568;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 568;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1020;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 985;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 985;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot97_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.97_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot97_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.97_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 83;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot97_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.97_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 83;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot99_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.99_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 95;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot99_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.99_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot99_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.99_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot99_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.99_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 75;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot99_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.99_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot99_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.99_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot99_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.99_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 87;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot99_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.99_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot99_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.99_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot99_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.99_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 96;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot99_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.99_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot99_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.99_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 99;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 96;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 96;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 86;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 89;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 89;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_1dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_1.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 89;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_1dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_1.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_1dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_1.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 93;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 93;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 93;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 98;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 98;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 98;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.00_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 105;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot00_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.00_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 105;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot00_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.00_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 105;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 93;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 93;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 93;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot03_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.03_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot03_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.03_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot03_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.03_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot03_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.03_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 104;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot03_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.03_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 104;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot03_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.03_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 104;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_9dot98_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_9.98_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 95;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_9dot98_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_9.98_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 95;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_9dot98_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_9.98_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 95;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_9dot98_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_9.98_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 97;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_9dot98_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_9.98_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 97;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_9dot98_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_9.98_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 97;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 106;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 106;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 106;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot38_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.38_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 540;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot38_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.38_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 520;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot38_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.38_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 520;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot56_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.56_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 754;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot56_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.56_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 593;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot56_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.56_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 593;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot62_CCR_10dot03_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.62_CCR_10.03_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot62_CCR_10dot03_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.62_CCR_10.03_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot62_CCR_10dot03_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.62_CCR_10.03_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot75_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.75_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 83;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot75_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.75_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot75_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.75_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot81_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.81_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot81_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.81_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot81_CCR_10dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.81_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot88_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.88_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1083;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot88_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.88_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1083;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot88_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.88_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1083;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot94_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.94_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 965;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot94_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.94_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 624;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot94_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.94_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 624;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot94_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.94_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 107;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot94_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.94_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 104;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot94_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.94_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 104;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot94_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.94_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot94_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.94_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot94_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.94_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot00_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.00_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 108;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot00_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.00_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 97;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot00_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.00_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 97;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot00_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.00_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot00_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.00_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot00_CCR_10dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.00_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot00_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.00_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot00_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.00_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot00_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.00_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot06_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.06_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1051;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot06_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.06_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 670;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot06_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.06_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 670;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot06_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.06_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 930;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot06_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.06_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 675;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot06_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.06_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 675;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot06_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.06_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 109;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot06_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.06_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 106;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot06_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.06_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 106;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot06_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.06_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot06_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.06_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot06_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.06_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot06_CCR_10dot05_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.06_CCR_10.05_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot06_CCR_10dot05_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.06_CCR_10.05_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot06_CCR_10dot05_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.06_CCR_10.05_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot12_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.12_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 113;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot12_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.12_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 97;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot12_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.12_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 97;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot12_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.12_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot12_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.12_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot12_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.12_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot19_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.19_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1179;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot19_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.19_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 970;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot19_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.19_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 970;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot19_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.19_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 106;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot19_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.19_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 86;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot19_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.19_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 86;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot19_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.19_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot19_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.19_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot19_CCR_9dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.19_CCR_9.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot25_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.25_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 973;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot25_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.25_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 948;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot25_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.25_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 948;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot25_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.25_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 122;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot25_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.25_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 117;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot25_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.25_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 117;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot25_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.25_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 129;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot25_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.25_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 129;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot25_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.25_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 129;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot25_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.25_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 105;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot25_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.25_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot25_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.25_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot25_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.25_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot25_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.25_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot25_CCR_9dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.25_CCR_9.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot44_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.44_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 105;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot44_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.44_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 86;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot44_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.44_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 86;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot50_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.50_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1166;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot50_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.50_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 899;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot50_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.50_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 899;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot56_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.56_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1186;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot56_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.56_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1032;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot56_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.56_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 1032;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot25_CCR_9dot95_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.25_CCR_9.95_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 102;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot25_CCR_9dot95_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.25_CCR_9.95_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 102;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot25_CCR_9dot95_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.25_CCR_9.95_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 102;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot31_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.31_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 336;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot31_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.31_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 331;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot31_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.31_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 331;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot31_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.31_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 280;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot31_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.31_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 280;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot31_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.31_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 280;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot50_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.50_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 3117;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot50_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.50_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 3117;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot50_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.50_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 3117;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot56_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.56_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 3409;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot56_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.56_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 3147;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot56_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.56_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 3147;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot56_CCR_10dot07_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.56_CCR_10.07_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 83;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot56_CCR_10dot07_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.56_CCR_10.07_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 83;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot56_CCR_10dot07_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.56_CCR_10.07_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 83;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot69_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.69_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 3712;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot69_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.69_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 3712;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot69_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.69_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 3712;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot75_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.75_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 338;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot75_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.75_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 338;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot75_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.75_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 338;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot75_CCR_9dot90_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.75_CCR_9.90_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot75_CCR_9dot90_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.75_CCR_9.90_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot75_CCR_9dot90_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.75_CCR_9.90_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot75_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.75_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot75_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.75_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot75_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.75_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot81_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.81_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 358;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot81_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.81_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 358;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot81_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.81_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 358;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot81_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.81_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 318;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot81_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.81_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 318;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot81_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.81_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 318;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot81_CCR_10dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.81_CCR_10.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot81_CCR_10dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.81_CCR_10.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot81_CCR_10dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.81_CCR_10.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot88_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.88_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 91;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot88_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.88_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 91;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot88_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.88_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 91;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot94_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.94_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 3180;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot94_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.94_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 3180;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot94_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.94_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 3180;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot94_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.94_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4433;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot94_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.94_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4433;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot94_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.94_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4433;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot94_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.94_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 395;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot94_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.94_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 395;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot94_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.94_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 395;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot00_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.00_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 3181;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot00_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.00_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 3181;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot00_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.00_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 3181;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot00_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.00_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 413;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot00_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.00_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 413;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot00_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.00_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 413;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot00_CCR_10dot09_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.00_CCR_10.09_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot00_CCR_10dot09_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.00_CCR_10.09_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot00_CCR_10dot09_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.00_CCR_10.09_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot06_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.06_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 2733;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot06_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.06_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 2733;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot06_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.06_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 2733;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot06_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.06_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 3776;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot06_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.06_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 3776;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot06_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.06_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 3776;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot06_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.06_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 389;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot06_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.06_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 389;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot06_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.06_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 389;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot12_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.12_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 405;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot12_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.12_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 405;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot12_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.12_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 405;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot19_CCR_10dot04_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.19_CCR_10.04_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 86;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot19_CCR_10dot04_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.19_CCR_10.04_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 86;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot19_CCR_10dot04_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.19_CCR_10.04_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 86;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot31_CCR_10dot09_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.31_CCR_10.09_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 115;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot31_CCR_10dot09_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.31_CCR_10.09_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 115;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot31_CCR_10dot09_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.31_CCR_10.09_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 115;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot38_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.38_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4869;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot38_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.38_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4869;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot38_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.38_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4869;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot38_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.38_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 469;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot38_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.38_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 469;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot38_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.38_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 469;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot38_CCR_9dot88_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.38_CCR_9.88_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 89;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot38_CCR_9dot88_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.38_CCR_9.88_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 89;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot38_CCR_9dot88_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.38_CCR_9.88_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 89;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot56_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.56_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4351;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot56_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.56_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4351;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot56_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.56_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4351;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 844;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 754;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 754;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 725;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 505;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 505;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 958;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 885;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 885;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 824;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 720;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 720;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 797;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 622;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 619;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 827;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 746;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 746;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 665;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 475;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 461;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 842;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 699;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 699;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 732;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 702;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 702;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 765;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 553;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 553;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 60;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 79;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 75;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 75;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 79;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 89;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 75;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 75;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 91;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 102;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 85;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 85;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 75;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 75;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 75;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 94;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 94;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 94;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 96;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 96;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 96;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 745;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 479;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 441;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 868;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 659;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 622;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 754;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 505;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 505;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 706;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 595;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 595;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 841;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 691;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 691;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 860;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 713;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 713;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 897;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 634;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 627;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 813;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 614;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 593;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 719;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 546;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 546;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 819;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 756;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 756;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 89;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 87;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 85;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 85;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 96;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 96;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 96;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 89;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 89;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 89;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 93;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 93;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 93;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 98;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 98;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 98;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 104;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 104;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 104;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 97;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 97;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 97;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 103;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 103;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 103;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 845;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 578;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 578;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 897;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 587;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 587;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 934;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 617;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 617;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 896;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 597;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 597;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 853;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 587;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 587;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 864;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 595;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 595;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1017;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 720;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 720;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 901;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 717;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 717;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 909;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 638;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 638;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 880;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 544;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 544;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot99_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.99_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 74;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot99_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.99_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot99_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.99_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 94;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 83;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 96;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.00_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 98;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot00_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.00_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 74;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot00_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.00_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 74;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 101;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot01_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.01_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 94;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot01_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.01_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot01_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.01_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot01_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.01_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot01_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.01_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot01_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.01_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 79;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 79;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 79;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot04_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.04_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot04_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.04_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot04_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.04_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot05_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.05_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot05_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.05_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot05_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.05_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_9dot97_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_9.97_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_9dot97_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_9.97_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_9dot97_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_9.97_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_9dot98_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_9.98_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 89;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_9dot98_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_9.98_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_9dot98_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_9.98_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 95;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 95;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_9dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_9.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 95;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

}
