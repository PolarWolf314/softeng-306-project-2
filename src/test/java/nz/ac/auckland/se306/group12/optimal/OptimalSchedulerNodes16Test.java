package nz.ac.auckland.se306.group12.optimal;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import nz.ac.auckland.se306.group12.ScheduleValidator;
import nz.ac.auckland.se306.group12.TestUtil;
import nz.ac.auckland.se306.group12.models.Graph;
import nz.ac.auckland.se306.group12.models.Schedule;
import nz.ac.auckland.se306.group12.scheduler.Scheduler;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Assumptions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;

/**
 * This class has been automatically generated by the GenerateUnitTests.py script.
 * Do not modify this file directly as it will be overwritten the next time the script is run.
 * <p>
 * The optimal schedules for each test have been sourced from 
 * <a href="https://parallel.auckland.ac.nz/OptimalTaskScheduling/OptimalSchedules.html">the amazing work</a>
 * done by the Parallel and Reconfigurable Computing Lab at the University of Auckland.
 */
@Timeout(value = 2, unit = TimeUnit.MINUTES, threadMode = ThreadMode.SEPARATE_THREAD)
public class OptimalSchedulerNodes16Test {

    public static final int TOTAL_TESTS = 994;

    // Change this to adjust how many tests are run
    public static final int TEST_RUN_COUNT = 50;

    private static Set<Number> tests_to_run;

    /**
   * Randomly select {@link #TEST_RUN_COUNT} tests to run.
   */
    @BeforeAll
    public static void beforeAll() {
        int num_to_run = Math.min(TEST_RUN_COUNT, TOTAL_TESTS);
        tests_to_run = new HashSet<>();
        while (tests_to_run.size() < num_to_run) {
            tests_to_run.add((int) (Math.random() * TOTAL_TESTS));
        }
    }

    public boolean isTestActive(int testIndex) {
        return tests_to_run.contains(testIndex);
    }

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(0));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 996;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(1));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 640;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(2));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 521;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(3));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1074;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(4));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 682;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(5));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 554;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(6));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 502;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(7));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 373;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(8));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 896;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(9));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 540;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(10));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 420;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(11));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 513;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(12));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 401;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(13));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 656;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(14));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 537;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(15));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 554;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(16));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 428;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(17));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 382;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(18));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 293;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(19));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 540;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(20));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 414;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(21));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 918;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(22));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 588;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(23));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 480;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot99_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(24));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.99_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot99_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(25));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.99_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot99_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(26));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.99_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot99_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(27));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.99_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot99_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(28));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.99_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot99_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(29));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.99_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot99_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(30));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.99_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(31));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(32));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(33));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(34));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_1dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(35));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_1.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 48;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(36));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(37));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_1dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(38));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_1.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(39));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(40));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(41));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(42));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(43));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(44));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(45));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(46));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(47));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(48));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_10dot03_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(49));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_10.03_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_10dot03_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(50));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_10.03_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_10dot03_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(51));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_10.03_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_10dot03_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(52));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_10.03_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 74;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_10dot03_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(53));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_10.03_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 74;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_10dot06_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(54));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_10.06_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_10dot06_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(55));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_10.06_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_9dot97_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(56));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_9.97_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_9dot97_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(57));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_9.97_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_9dot97_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(58));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_9.97_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_9dot99_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(59));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_9.99_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_9dot99_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(60));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_9.99_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_9dot99_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(61));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_9.99_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(62));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_16_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(63));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Join_Nodes_16_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(64));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 377;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(65));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 205;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(66));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 148;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(67));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 416;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(68));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 231;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(69));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 171;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(70));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 582;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(71));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 349;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(72));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 271;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(73));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 471;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(74));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 283;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(75));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 218;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(76));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 552;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(77));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 338;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(78));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 268;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(79));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 477;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(80));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 269;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(81));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 202;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(82));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 479;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(83));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 255;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(84));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 181;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(85));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 532;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(86));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 283;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(87));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 197;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(88));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 563;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(89));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 321;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(90));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 247;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(91));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 490;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(92));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 279;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(93));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 210;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot97_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(94));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.97_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 60;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot97_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(95));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.97_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 34;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot97_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(96));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.97_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 27;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot98_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(97));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.98_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 49;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot98_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(98));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.98_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 27;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot98_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(99));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.98_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 20;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(100));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(101));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(102));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 26;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(103));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(104));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(105));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(106));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(107));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(108));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 28;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(109));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(110));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 28;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(111));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 21;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot02_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(112));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.02_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot02_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(113));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.02_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 33;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot02_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(114));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.02_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 26;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(115));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(116));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(117));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot03_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(118));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.03_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot03_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(119));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.03_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot03_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(120));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.03_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot06_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(121));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.06_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot06_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(122));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.06_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_1dot06_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(123));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_1.06_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 25;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(124));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(125));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(126));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(127));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(128));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(129));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(130));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(131));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(132));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot95_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(133));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.95_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot95_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(134));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.95_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot95_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(135));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.95_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(136));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(137));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(138));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot99_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(139));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.99_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot99_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(140));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.99_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot99_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(141));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.99_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot99_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(142));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.99_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot99_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(143));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.99_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot99_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(144));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.99_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot99_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(145));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.99_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot99_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(146));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.99_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot99_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(147));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.99_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot99_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(148));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.99_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot99_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(149));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.99_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot99_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(150));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.99_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(151));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(152));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_16_CCR_9dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(153));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Fork_Nodes_16_CCR_9.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(154));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 44;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(155));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 22;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(156));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 15;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(157));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 44;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(158));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 22;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(159));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 15;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(160));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 38;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(161));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 19;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(162));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 13;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(163));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(164));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 19;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(165));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 13;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(166));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(167));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 26;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(168));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 18;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(169));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(170));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 27;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(171));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 18;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(172));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(173));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 23;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(174));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 16;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(175));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(176));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 27;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(177));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 18;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(178));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 41;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(179));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 21;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(180));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 14;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(181));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(182));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 23;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_16_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(183));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Independent_Nodes_16_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 15;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(184));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 454;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(185));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 267;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(186));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 267;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(187));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 482;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(188));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 292;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(189));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 239;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(190));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 457;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(191));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 253;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(192));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 215;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(193));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 495;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(194));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 284;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(195));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 226;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(196));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 487;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(197));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 277;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(198));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 221;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(199));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 433;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(200));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 250;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(201));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 228;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(202));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 504;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(203));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 290;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(204));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 246;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(205));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 486;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(206));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 281;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(207));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 227;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(208));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 378;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(209));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 230;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(210));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 194;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(211));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 461;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(212));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 261;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(213));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 212;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot96_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(214));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.96_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot96_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(215));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.96_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 33;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot96_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(216));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.96_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot96_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(217));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.96_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot96_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(218));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.96_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot96_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(219));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.96_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot98_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(220));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.98_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot98_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(221));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.98_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 38;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot98_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(222));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.98_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 38;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(223));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 48;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(224));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(225));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_0.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 30;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(226));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(227));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 41;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(228));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 38;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(229));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(230));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 39;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(231));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 39;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(232));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(233));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 34;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(234));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot04_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(235));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.04_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot04_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(236));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.04_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot04_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(237));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.04_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot08_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(238));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.08_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 48;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot08_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(239));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.08_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot08_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(240));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.08_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 27;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot11_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(241));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.11_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot11_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(242));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.11_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot11_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(243));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_1.11_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 30;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(244));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(245));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(246));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(247));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(248));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(249));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(250));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(251));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(252));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(253));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(254));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(255));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(256));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 83;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(257));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(258));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot04_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(259));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.04_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot04_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(260));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.04_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot04_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(261));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_10.04_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_9dot97_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(262));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_9.97_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_9dot97_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(263));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_9.97_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_9dot97_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(264));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_9.97_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_9dot98_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(265));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_9.98_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_9dot98_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(266));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_9.98_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_9dot98_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(267));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_9.98_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(268));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(269));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(270));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(271));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 75;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(272));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_16_CCR_9dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(273));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/InTree-Balanced-MaxBf-3_Nodes_16_CCR_9.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(274));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 511;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(275));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 290;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(276));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 216;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(277));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 391;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(278));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 236;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(279));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 188;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(280));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 513;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(281));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 283;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(282));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 209;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(283));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 453;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(284));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 245;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(285));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 176;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(286));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 491;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(287));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 292;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(288));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 230;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(289));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 528;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(290));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 305;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(291));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 234;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(292));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 536;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(293));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 314;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(294));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 239;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(295));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 492;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(296));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 274;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(297));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 204;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(298));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 352;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(299));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 210;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(300));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 163;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(301));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 577;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(302));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 330;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(303));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 250;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(304));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(305));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_0dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(306));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_0.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 23;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(307));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(308));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(309));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 22;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(310));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(311));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(312));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 28;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(313));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(314));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(315));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 24;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(316));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(317));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 30;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(318));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 23;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(319));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(320));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 27;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(321));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 22;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(322));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(323));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(324));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 25;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot03_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(325));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.03_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot03_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(326));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.03_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 39;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot03_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(327));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.03_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot03_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(328));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.03_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot03_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(329));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.03_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot03_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(330));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.03_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 25;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot07_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(331));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.07_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 44;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot07_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(332));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.07_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 24;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_1dot07_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(333));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_1.07_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 18;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(334));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(335));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(336));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(337));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(338));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(339));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(340));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.00_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot00_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(341));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.00_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot00_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(342));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.00_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot00_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(343));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.00_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot00_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(344));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.00_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot00_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(345));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.00_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(346));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 60;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(347));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(348));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(349));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(350));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(351));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(352));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(353));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(354));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(355));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(356));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_10dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(357));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(358));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(359));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(360));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(361));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(362));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_16_CCR_9dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(363));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Join_Nodes_16_CCR_9.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(364));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 565;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(365));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 378;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(366));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 378;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(367));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 532;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(368));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 321;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(369));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 290;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(370));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 386;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(371));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 221;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(372));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 219;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(373));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 559;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(374));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 346;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(375));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 323;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(376));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 565;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(377));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 324;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(378));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 305;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(379));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 467;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(380));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 270;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(381));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 243;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(382));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 421;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(383));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 249;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(384));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 230;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(385));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 466;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(386));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 258;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(387));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 217;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(388));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 539;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(389));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 293;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(390));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 268;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(391));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 482;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(392));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 283;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(393));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 274;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot94_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(394));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.94_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot94_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(395));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.94_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 34;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot94_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(396));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.94_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot95_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(397));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.95_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot95_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(398));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.95_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 39;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot95_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(399));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.95_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 38;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot97_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(400));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.97_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot97_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(401));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.97_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot97_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(402));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.97_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 42;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(403));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(404));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 42;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(405));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 42;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(406));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(407));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 34;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(408));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(409));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(410));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 33;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(411));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot02_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(412));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.02_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot02_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(413));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.02_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot02_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(414));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.02_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(415));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(416));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 38;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(417));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot03_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(418));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.03_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 60;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot03_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(419));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.03_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 42;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot03_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(420));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.03_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 41;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot06_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(421));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.06_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot06_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(422));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.06_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 42;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_1dot06_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(423));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_1.06_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 42;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(424));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(425));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(426));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(427));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(428));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(429));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(430));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(431));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(432));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(433));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 87;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(434));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 87;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(435));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 87;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(436));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(437));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(438));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(439));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(440));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(441));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot03_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(442));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.03_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot03_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(443));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.03_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot03_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(444));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.03_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot04_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(445));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.04_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot04_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(446));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.04_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot04_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(447));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.04_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot05_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(448));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.05_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot05_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(449));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.05_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_10dot05_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(450));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_10.05_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(451));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(452));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(453));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/OutTree-Balanced-MaxBf-3_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(454));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 765;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(455));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 656;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(456));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 656;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(457));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 761;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(458));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 677;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(459));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 677;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(460));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 775;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(461));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 710;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(462));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 710;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(463));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 683;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(464));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 581;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(465));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 581;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(466));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 778;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(467));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 654;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(468));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 654;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(469));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 914;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(470));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 888;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(471));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 888;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(472));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 816;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(473));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 772;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(474));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 772;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(475));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 882;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(476));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 771;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(477));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 771;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(478));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 699;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(479));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 568;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(480));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 568;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(481));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1020;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(482));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 985;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(483));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 985;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot97_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(484));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.97_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot97_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(485));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.97_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 83;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot97_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(486));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.97_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 83;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot99_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(487));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.99_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 95;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot99_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(488));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.99_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot99_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(489));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.99_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot99_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(490));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.99_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 75;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot99_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(491));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.99_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot99_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(492));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.99_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot99_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(493));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.99_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 87;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot99_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(494));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.99_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot99_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(495));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.99_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot99_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(496));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.99_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 96;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot99_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(497));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.99_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot99_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(498));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.99_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(499));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 99;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(500));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 96;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(501));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 96;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(502));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 86;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(503));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(504));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(505));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(506));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 89;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(507));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 89;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_1dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(508));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_1.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 89;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_1dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(509));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_1.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_1dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(510));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_1.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(511));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(512));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(513));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(514));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 93;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(515));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 93;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(516));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 93;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(517));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 98;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(518));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 98;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(519));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 98;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(520));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.00_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 105;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot00_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(521));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.00_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 105;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot00_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(522));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.00_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 105;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(523));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 93;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(524));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 93;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(525));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 93;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(526));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(527));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(528));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot03_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(529));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.03_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot03_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(530));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.03_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot03_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(531));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.03_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot03_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(532));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.03_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 104;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot03_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(533));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.03_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 104;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_10dot03_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(534));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_10.03_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 104;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_9dot98_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(535));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_9.98_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 95;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_9dot98_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(536));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_9.98_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 95;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_9dot98_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(537));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_9.98_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 95;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_9dot98_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(538));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_9.98_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 97;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_9dot98_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(539));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_9.98_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 97;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_9dot98_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(540));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_9.98_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 97;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(541));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 106;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(542));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 106;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(543));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Pipeline_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 106;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot38_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(544));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.38_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 540;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot38_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(545));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.38_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 520;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot38_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(546));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.38_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 520;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot56_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(547));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.56_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 754;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot56_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(548));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.56_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 593;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot56_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(549));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.56_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 593;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot62_CCR_10dot03_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(550));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.62_CCR_10.03_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot62_CCR_10dot03_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(551));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.62_CCR_10.03_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot62_CCR_10dot03_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(552));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.62_CCR_10.03_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot75_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(553));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.75_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 83;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot75_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(554));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.75_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot75_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(555));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.75_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot81_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(556));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.81_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot81_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(557));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.81_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot81_CCR_10dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(558));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.81_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot88_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(559));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.88_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1083;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot88_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(560));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.88_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1083;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot88_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(561));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.88_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1083;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot94_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(562));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.94_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 965;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot94_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(563));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.94_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 624;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot94_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(564));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.94_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 624;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot94_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(565));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.94_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 107;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot94_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(566));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.94_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 104;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot94_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(567));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.94_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 104;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot94_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(568));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.94_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot94_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(569));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.94_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_1dot94_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(570));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_1.94_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot00_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(571));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.00_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 108;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot00_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(572));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.00_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 97;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot00_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(573));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.00_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 97;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot00_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(574));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.00_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot00_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(575));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.00_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot00_CCR_10dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(576));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.00_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot00_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(577));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.00_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot00_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(578));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.00_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot00_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(579));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.00_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot06_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(580));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.06_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1051;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot06_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(581));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.06_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 670;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot06_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(582));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.06_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 670;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot06_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(583));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.06_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 930;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot06_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(584));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.06_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 675;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot06_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(585));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.06_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 675;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot06_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(586));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.06_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 109;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot06_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(587));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.06_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 106;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot06_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(588));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.06_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 106;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot06_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(589));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.06_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot06_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(590));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.06_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot06_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(591));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.06_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot06_CCR_10dot05_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(592));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.06_CCR_10.05_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot06_CCR_10dot05_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(593));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.06_CCR_10.05_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot06_CCR_10dot05_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(594));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.06_CCR_10.05_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot12_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(595));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.12_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 113;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot12_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(596));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.12_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 97;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot12_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(597));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.12_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 97;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot12_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(598));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.12_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot12_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(599));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.12_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot12_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(600));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.12_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot19_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(601));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.19_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1179;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot19_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(602));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.19_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 970;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot19_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(603));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.19_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 970;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot19_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(604));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.19_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 106;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot19_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(605));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.19_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 86;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot19_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(606));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.19_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 86;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot19_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(607));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.19_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot19_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(608));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.19_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot19_CCR_9dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(609));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.19_CCR_9.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot25_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(610));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.25_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 973;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot25_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(611));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.25_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 948;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot25_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(612));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.25_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 948;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot25_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(613));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.25_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 122;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot25_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(614));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.25_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 117;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot25_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(615));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.25_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 117;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot25_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(616));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.25_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 129;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot25_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(617));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.25_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 129;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot25_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(618));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.25_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 129;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot25_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(619));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.25_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 105;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot25_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(620));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.25_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot25_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(621));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.25_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot25_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(622));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.25_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot25_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(623));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.25_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot25_CCR_9dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(624));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.25_CCR_9.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot44_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(625));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.44_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 105;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot44_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(626));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.44_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 86;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot44_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(627));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.44_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 86;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot50_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(628));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.50_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1166;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot50_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(629));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.50_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 899;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot50_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(630));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.50_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 899;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot56_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(631));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.56_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1186;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot56_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(632));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.56_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1032;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_2dot56_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(633));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_2.56_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 1032;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot25_CCR_9dot95_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(634));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.25_CCR_9.95_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 102;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot25_CCR_9dot95_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(635));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.25_CCR_9.95_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 102;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot25_CCR_9dot95_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(636));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.25_CCR_9.95_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 102;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot31_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(637));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.31_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 336;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot31_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(638));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.31_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 331;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot31_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(639));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.31_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 331;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot31_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(640));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.31_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 280;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot31_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(641));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.31_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 280;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot31_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(642));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.31_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 280;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot50_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(643));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.50_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 3117;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot50_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(644));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.50_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 3117;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot50_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(645));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.50_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 3117;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot56_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(646));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.56_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 3409;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot56_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(647));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.56_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 3147;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot56_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(648));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.56_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 3147;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot56_CCR_10dot07_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(649));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.56_CCR_10.07_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 83;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot56_CCR_10dot07_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(650));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.56_CCR_10.07_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 83;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot56_CCR_10dot07_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(651));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.56_CCR_10.07_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 83;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot69_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(652));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.69_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 3712;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot69_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(653));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.69_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 3712;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot69_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(654));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.69_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 3712;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot75_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(655));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.75_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 338;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot75_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(656));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.75_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 338;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot75_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(657));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.75_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 338;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot75_CCR_9dot90_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(658));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.75_CCR_9.90_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot75_CCR_9dot90_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(659));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.75_CCR_9.90_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot75_CCR_9dot90_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(660));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.75_CCR_9.90_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot75_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(661));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.75_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot75_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(662));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.75_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot75_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(663));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.75_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot81_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(664));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.81_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 358;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot81_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(665));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.81_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 358;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot81_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(666));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.81_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 358;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot81_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(667));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.81_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 318;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot81_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(668));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.81_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 318;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot81_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(669));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.81_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 318;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot81_CCR_10dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(670));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.81_CCR_10.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot81_CCR_10dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(671));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.81_CCR_10.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot81_CCR_10dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(672));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.81_CCR_10.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot88_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(673));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.88_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 91;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot88_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(674));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.88_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 91;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot88_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(675));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.88_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 91;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot94_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(676));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.94_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 3180;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot94_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(677));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.94_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 3180;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot94_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(678));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.94_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 3180;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot94_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(679));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.94_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4433;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot94_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(680));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.94_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4433;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot94_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(681));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.94_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4433;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot94_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(682));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.94_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 395;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot94_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(683));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.94_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 395;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_4dot94_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(684));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_4.94_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 395;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot00_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(685));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.00_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 3181;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot00_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(686));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.00_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 3181;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot00_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(687));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.00_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 3181;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot00_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(688));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.00_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 413;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot00_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(689));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.00_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 413;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot00_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(690));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.00_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 413;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot00_CCR_10dot09_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(691));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.00_CCR_10.09_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot00_CCR_10dot09_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(692));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.00_CCR_10.09_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot00_CCR_10dot09_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(693));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.00_CCR_10.09_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot06_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(694));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.06_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 2733;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot06_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(695));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.06_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 2733;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot06_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(696));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.06_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 2733;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot06_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(697));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.06_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 3776;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot06_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(698));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.06_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 3776;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot06_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(699));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.06_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 3776;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot06_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(700));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.06_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 389;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot06_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(701));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.06_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 389;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot06_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(702));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.06_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 389;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot12_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(703));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.12_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 405;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot12_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(704));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.12_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 405;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot12_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(705));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.12_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 405;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot19_CCR_10dot04_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(706));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.19_CCR_10.04_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 86;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot19_CCR_10dot04_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(707));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.19_CCR_10.04_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 86;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot19_CCR_10dot04_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(708));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.19_CCR_10.04_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 86;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot31_CCR_10dot09_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(709));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.31_CCR_10.09_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 115;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot31_CCR_10dot09_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(710));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.31_CCR_10.09_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 115;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot31_CCR_10dot09_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(711));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.31_CCR_10.09_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 115;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot38_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(712));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.38_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4869;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot38_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(713));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.38_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4869;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot38_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(714));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.38_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4869;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot38_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(715));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.38_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 469;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot38_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(716));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.38_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 469;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot38_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(717));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.38_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 469;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot38_CCR_9dot88_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(718));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.38_CCR_9.88_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 89;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot38_CCR_9dot88_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(719));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.38_CCR_9.88_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 89;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot38_CCR_9dot88_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(720));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.38_CCR_9.88_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 89;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot56_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(721));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.56_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4351;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot56_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(722));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.56_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4351;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_16_Density_5dot56_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(723));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Random_Nodes_16_Density_5.56_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4351;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(724));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 844;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(725));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 754;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(726));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 754;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(727));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 725;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(728));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 505;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(729));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 505;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(730));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 958;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(731));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 885;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(732));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 885;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(733));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 824;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(734));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 720;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(735));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 720;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(736));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 797;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(737));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 622;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(738));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 619;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(739));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 827;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(740));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 746;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(741));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 746;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(742));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 665;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(743));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 475;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(744));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 461;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(745));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 842;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(746));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 699;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(747));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 699;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(748));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 732;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(749));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 702;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(750));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 702;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(751));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 765;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(752));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 553;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(753));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 553;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(754));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(755));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(756));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(757));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(758));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 60;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(759));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(760));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 79;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(761));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 75;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(762));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 75;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(763));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 79;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(764));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(765));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(766));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(767));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(768));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(769));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 89;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(770));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 75;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(771));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 75;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(772));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(773));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(774));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(775));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(776));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(777));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(778));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 91;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(779));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(780));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(781));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 102;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(782));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 85;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(783));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 85;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(784));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(785));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(786));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(787));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 75;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(788));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 75;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(789));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 75;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(790));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(791));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(792));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(793));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(794));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(795));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(796));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 94;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(797));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 94;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(798));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 94;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(799));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(800));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(801));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(802));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(803));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(804));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(805));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(806));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(807));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(808));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 96;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(809));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 96;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(810));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 96;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(811));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(812));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(813));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-3_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(814));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 745;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(815));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 479;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(816));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 441;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(817));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 868;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(818));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 659;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(819));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 622;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(820));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 754;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(821));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 505;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(822));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 505;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(823));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 706;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(824));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 595;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(825));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 595;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(826));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 841;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(827));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 691;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(828));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 691;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(829));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 860;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(830));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 713;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(831));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 713;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(832));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 897;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(833));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 634;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(834));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 627;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(835));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 813;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(836));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 614;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(837));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 593;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(838));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 719;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(839));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 546;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(840));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 546;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(841));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 819;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(842));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 756;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(843));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 756;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(844));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(845));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(846));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(847));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(848));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(849));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(850));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 89;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(851));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(852));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(853));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(854));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(855));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(856));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 87;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(857));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(858));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(859));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 85;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(860));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(861));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(862));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(863));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(864));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(865));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(866));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(867));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(868));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 85;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(869));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(870));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(871));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(872));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(873));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(874));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(875));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(876));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(877));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 96;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(878));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 96;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(879));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 96;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(880));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 89;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(881));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 89;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(882));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 89;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(883));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 93;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(884));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 93;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(885));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 93;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(886));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 98;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(887));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 98;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(888));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 98;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(889));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(890));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(891));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(892));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(893));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(894));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(895));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 104;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(896));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 104;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(897));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 104;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(898));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 97;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(899));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 97;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(900));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 97;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(901));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 103;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(902));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 103;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(903));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/SeriesParallel-MaxBf-5_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 103;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(904));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 845;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(905));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 578;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(906));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 578;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(907));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 897;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(908));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 587;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(909));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 587;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(910));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 934;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(911));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 617;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(912));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 617;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(913));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 896;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(914));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 597;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(915));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 597;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(916));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 853;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(917));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 587;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(918));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 587;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(919));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 864;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(920));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 595;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(921));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 595;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(922));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1017;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(923));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 720;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(924));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 720;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(925));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 901;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(926));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 717;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(927));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 717;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(928));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 909;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(929));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 638;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(930));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 638;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(931));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 880;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(932));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 544;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(933));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 544;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot99_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(934));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.99_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 74;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot99_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(935));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.99_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot99_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(936));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.99_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(937));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 94;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(938));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(939));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(940));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 83;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(941));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(942));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(943));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 96;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(944));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(945));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(946));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.00_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 98;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot00_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(947));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.00_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 74;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot00_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(948));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.00_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 74;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(949));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 101;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(950));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(951));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(952));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(953));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(954));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot01_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(955));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.01_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 94;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot01_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(956));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.01_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot01_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(957));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.01_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot01_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(958));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.01_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot01_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(959));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.01_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot01_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(960));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.01_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(961));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(962));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(963));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(964));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(965));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(966));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(967));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 79;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(968));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 79;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(969));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 79;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(970));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(971));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(972));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(973));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(974));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(975));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot04_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(976));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.04_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot04_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(977));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.04_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot04_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(978));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.04_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot05_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(979));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.05_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot05_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(980));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.05_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_10dot05_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(981));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_10.05_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 80;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_9dot97_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(982));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_9.97_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_9dot97_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(983));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_9.97_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_9dot97_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(984));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_9.97_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_9dot98_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(985));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_9.98_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 89;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_9dot98_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(986));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_9.98_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_9dot98_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(987));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_9.98_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(988));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(989));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(990));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(991));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 95;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(992));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 95;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_16_CCR_9dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(993));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/16-nodes/Stencil_Nodes_16_CCR_9.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 95;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

}
