package nz.ac.auckland.se306.group12.optimal;

import java.util.concurrent.TimeUnit;
import nz.ac.auckland.se306.group12.ScheduleValidator;
import nz.ac.auckland.se306.group12.TestUtil;
import nz.ac.auckland.se306.group12.models.Graph;
import nz.ac.auckland.se306.group12.models.Schedule;
import nz.ac.auckland.se306.group12.scheduler.Scheduler;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;

/**
 * This class has been automatically generated by the GenerateUnitTests.py script.
 * Do not modify this file directly as it will be overwritten the next time the script is run.
 * <p>
 * The optimal schedules for each test have been sourced from 
 * <a href="https://parallel.auckland.ac.nz/OptimalTaskScheduling/OptimalSchedules.html">the amazing work</a>
 * done by the Parallel and Reconfigurable Computing Lab at the University of Auckland.
 */
@Timeout(value = 2, unit = TimeUnit.MINUTES, threadMode = ThreadMode.SEPARATE_THREAD)
public class OptimalSchedulerNodes30Test {

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Join_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 16;
        int expectedScheduleEndTime = 532;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Join_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1826;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 941;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 973;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 933;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 759;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 910;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 843;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 861;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 940;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 947;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 16;
        int expectedScheduleEndTime = 170;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1013;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 885;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_0dot95_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_0.95_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 93;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_0dot96_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_0.96_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 97;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_1dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_1.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 99;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 94;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_1dot02_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_1.02_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 89;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_1dot02_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_1.02_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 16;
        int expectedScheduleEndTime = 21;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_1dot02_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_1.02_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 95;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_1dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 101;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_1dot04_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_1.04_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 93;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_1dot04_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_1.04_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_1dot05_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_1.05_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_1dot07_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_1.07_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_10dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_10.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 113;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_10dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_10.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_10dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_10.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_10dot01_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_10.01_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 106;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_10dot01_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_10.01_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 83;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_10dot01_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_10.01_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 83;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_10dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 98;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_10dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 79;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_10dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_10.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 79;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 112;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 96;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_2dot00_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_2.00_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 16;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_2dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_2.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 111;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_9dot98_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_9.98_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 16;
        int expectedScheduleEndTime = 91;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_9dot98_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_9.98_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 108;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_9dot98_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_9.98_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 91;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_9dot98_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_9.98_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 91;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_9dot99_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_9.99_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 114;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_9dot99_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_9.99_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 85;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_9dot99_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_9.99_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 85;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_9dot99_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_9.99_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 102;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_9dot99_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_9.99_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 79;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_9dot99_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_9.99_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_9dot99_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_9.99_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 93;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_9dot99_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_9.99_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_9dot99_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_9.99_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_9dot99_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_9.99_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 104;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_9dot99_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_9.99_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_9dot99_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_9.99_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 102;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 95;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 48;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 86;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 43;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 39;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 26;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 101;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 34;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 99;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 33;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 97;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 49;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 85;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 43;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 41;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 16;
        int expectedScheduleEndTime = 13;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 23;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 34;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 956;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 897;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 840;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 860;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 975;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 986;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 901;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 917;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 974;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 16;
        int expectedScheduleEndTime = 252;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 889;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 840;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot91_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_0.91_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 102;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot92_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_0.92_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 98;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot94_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_0.94_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 107;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot98_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_0.98_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 98;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot98_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_0.98_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_0.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 107;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_1dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 101;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_1dot06_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_1.06_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 93;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_1dot06_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_1.06_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 40;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_1dot07_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_1.07_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 91;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_1dot09_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_1.09_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 94;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_1dot11_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_1.11_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 97;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_1dot11_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_1.11_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_2dot02_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_2.02_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 98;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 93;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Unbalanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 11;
        int expectedScheduleEndTime = 385;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Unbalanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 858;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Unbalanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 385;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_30_CCR_0dot95_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Unbalanced-MaxBf-3_Nodes_30_CCR_0.95_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 16;
        int expectedScheduleEndTime = 39;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_30_CCR_0dot95_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Unbalanced-MaxBf-3_Nodes_30_CCR_0.95_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_30_CCR_2dot00_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Unbalanced-MaxBf-3_Nodes_30_CCR_2.00_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 16;
        int expectedScheduleEndTime = 49;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_30_CCR_2dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Unbalanced-MaxBf-3_Nodes_30_CCR_2.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 101;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_30_CCR_2dot00_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Unbalanced-MaxBf-3_Nodes_30_CCR_2.00_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 848;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 926;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 951;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 822;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 824;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1007;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 881;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 935;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 16;
        int expectedScheduleEndTime = 182;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 820;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 881;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_0dot91_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_0.91_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 91;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_0dot94_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_0.94_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 93;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_0dot96_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_0.96_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_0dot97_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_0.97_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 106;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_0dot98_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_0.98_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 110;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_0dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_0.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 110;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_0dot99_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_0.99_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 16;
        int expectedScheduleEndTime = 30;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_0dot99_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_0.99_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 103;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 91;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_1dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 97;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_1dot08_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_1.08_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_1dot09_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_1.09_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_10dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_10.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 110;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_10dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_10.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_10dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_10.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_10dot01_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_10.01_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 99;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_10dot01_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_10.01_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_10dot01_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_10.01_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 95;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_10dot01_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_10.01_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 75;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_10dot01_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_10.01_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 75;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_10dot01_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_10.01_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 120;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_10dot01_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_10.01_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 89;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_10dot01_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_10.01_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 95;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_10dot01_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_10.01_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_10dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 115;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_10dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_10dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_10.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 102;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 74;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_2dot00_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_2.00_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 16;
        int expectedScheduleEndTime = 40;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_2dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_2.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 109;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_2dot00_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_2.00_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 40;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_9dot98_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_9.98_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 120;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_9dot98_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_9.98_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 93;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 117;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 93;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 93;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_9dot99_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_9.99_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 108;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_9dot99_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_9.99_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_9dot99_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_9.99_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 83;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_9dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_9.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 83;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 888;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 898;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1015;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 972;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 841;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1054;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 882;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 905;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 861;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 14;
        int expectedScheduleEndTime = 260;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 765;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 260;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 928;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot94_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.94_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot95_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.95_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 95;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot95_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.95_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot97_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.97_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot97_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.97_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot98_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.98_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 99;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot98_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.98_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 44;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 107;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot99_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.99_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 98;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot99_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.99_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot99_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.99_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 97;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot99_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.99_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 42;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 102;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 48;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_1dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 87;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_1dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_1.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_1dot09_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_1.09_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_10dot01_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_10.01_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 102;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_10dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 87;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_10dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_10.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 87;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_2dot01_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_2.01_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 105;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_9dot96_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_9.96_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_9dot96_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_9.96_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 74;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_9dot96_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_9.96_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 13;
        int expectedScheduleEndTime = 400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 875;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_30_CCR_0dot98_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_30_CCR_0.98_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 16;
        int expectedScheduleEndTime = 48;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_30_CCR_0dot98_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_30_CCR_0.98_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 111;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_30_CCR_2dot02_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_30_CCR_2.02_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 87;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_30_CCR_2dot02_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_30_CCR_2.02_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1626;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1167;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 1167;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1113;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 1113;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1135;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1766;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1402;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 1402;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1419;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1054;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 1054;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1685;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1259;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 1259;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1055;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1736;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1373;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 1373;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1652;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1384;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 1384;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 1191;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1498;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1191;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 1191;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot98_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.98_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 179;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot99_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.99_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 133;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 147;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 162;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_1dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_1.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 130;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_1dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_1.00_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 169;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_1dot00_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_1.00_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 152;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 143;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_10dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_10.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 138;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_10dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_10.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 138;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_10dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_10.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 138;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_10dot03_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_10.03_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 142;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_10dot03_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_10.03_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 142;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_10dot03_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_10.03_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 142;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 161;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 161;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_9dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_9.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 161;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_0dot40_CCR_10dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_0.40_CCR_10.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_0dot40_CCR_10dot00_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_0.40_CCR_10.00_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_0dot47_CCR_0dot99_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_0.47_CCR_0.99_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 16;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_0dot47_CCR_0dot99_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_0.47_CCR_0.99_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 97;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_0dot47_CCR_0dot99_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_0.47_CCR_0.99_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_0dot67_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_0.67_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 16;
        int expectedScheduleEndTime = 195;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_0dot67_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_0.67_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 195;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_0dot73_CCR_2dot01_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_0.73_CCR_2.01_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_0dot73_CCR_2dot01_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_0.73_CCR_2.01_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 30;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_0dot87_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_0.87_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 16;
        int expectedScheduleEndTime = 271;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_0dot87_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_0.87_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 750;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_0dot87_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_0.87_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 271;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_0dot93_CCR_2dot01_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_0.93_CCR_2.01_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 98;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_1dot27_CCR_1dot00_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_1.27_CCR_1.00_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 13;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_1dot27_CCR_1dot00_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_1.27_CCR_1.00_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_1dot63_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_1.63_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1368;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_1dot63_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_1.63_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 665;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_1dot63_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_1.63_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 141;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_1dot73_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_1.73_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1655;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_1dot73_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_1.73_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 725;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_1dot77_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_1.77_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1537;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_1dot77_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_1.77_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 859;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_1dot77_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_1.77_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 859;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_1dot80_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_1.80_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1487;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_1dot80_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_1.80_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 598;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_1dot80_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_1.80_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 157;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_1dot80_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_1.80_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 79;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_1dot80_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_1.80_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 75;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_1dot83_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_1.83_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 706;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_1dot83_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_1.83_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 148;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_1dot83_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_1.83_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_1dot83_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_1.83_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot07_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.07_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1740;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot07_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.07_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 781;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot07_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.07_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1964;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot07_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.07_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1260;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot07_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.07_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 1260;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot10_CCR_0dot99_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.10_CCR_0.99_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 16;
        int expectedScheduleEndTime = 110;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot10_CCR_0dot99_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.10_CCR_0.99_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 189;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot10_CCR_0dot99_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.10_CCR_0.99_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 110;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot10_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.10_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 140;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot10_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.10_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 140;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot10_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.10_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 104;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot10_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.10_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 103;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot10_CCR_1dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.10_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 192;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot10_CCR_1dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.10_CCR_1.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 122;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot10_CCR_1dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.10_CCR_1.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 122;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot10_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.10_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 85;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot10_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.10_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot17_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.17_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 2014;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot17_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.17_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1452;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot17_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.17_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 1452;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot20_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.20_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1334;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot20_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.20_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 1334;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot20_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.20_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 98;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot20_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.20_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 93;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot30_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.30_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 217;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot30_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.30_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 163;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot30_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.30_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 163;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot40_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.40_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 7;
        int expectedScheduleEndTime = 1815;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot40_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.40_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1815;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot40_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.40_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 7;
        int expectedScheduleEndTime = 1815;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot40_CCR_10dot03_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.40_CCR_10.03_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 91;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot47_CCR_9dot98_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.47_CCR_9.98_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 110;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot53_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.53_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 120;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_3dot90_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_3.90_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 3540;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_3dot90_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_3.90_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 2361;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_3dot90_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_3.90_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 2361;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot23_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.23_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 385;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot23_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.23_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 294;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot33_CCR_10dot05_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.33_CCR_10.05_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 111;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot37_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.37_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 469;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot37_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.37_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 469;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot37_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.37_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 469;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot50_CCR_9dot95_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.50_CCR_9.95_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot53_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.53_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4395;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot53_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.53_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 3654;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot53_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.53_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 3654;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot63_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.63_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4103;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot63_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.63_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 3283;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot63_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.63_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 3283;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot73_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.73_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 3684;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot73_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.73_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4840;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot73_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.73_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4741;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot73_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.73_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 4741;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot77_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.77_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 501;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot77_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.77_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 473;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot77_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.77_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 473;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot77_CCR_9dot96_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.77_CCR_9.96_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 120;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot80_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.80_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 16;
        int expectedScheduleEndTime = 4153;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot80_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.80_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4347;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot80_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.80_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4153;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot80_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.80_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 4153;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot80_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.80_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 491;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot80_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.80_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 482;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot80_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.80_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 482;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot83_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.83_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 435;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot83_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.83_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 373;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot83_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.83_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 373;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot90_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.90_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4499;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot90_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.90_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4206;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot90_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.90_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 4206;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot93_CCR_1dot00_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.93_CCR_1.00_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 431;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot93_CCR_1dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.93_CCR_1.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 445;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot93_CCR_1dot00_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.93_CCR_1.00_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 431;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot93_CCR_1dot00_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.93_CCR_1.00_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 431;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot97_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.97_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4453;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot97_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.97_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4396;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot97_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.97_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4396;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot00_CCR_9dot90_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.00_CCR_9.90_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 114;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot03_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.03_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4904;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot03_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.03_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4514;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot03_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.03_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 4514;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot03_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.03_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4859;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot03_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.03_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4085;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot03_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.03_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 4085;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot03_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.03_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 455;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot03_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.03_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 422;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot03_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.03_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 422;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot07_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.07_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 447;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot07_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.07_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 407;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot10_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.10_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 550;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot10_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.10_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 540;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot10_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.10_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 540;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot17_CCR_2dot01_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.17_CCR_2.01_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 266;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot17_CCR_2dot01_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.17_CCR_2.01_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 273;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot17_CCR_2dot01_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.17_CCR_2.01_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 266;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot17_CCR_2dot01_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.17_CCR_2.01_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 266;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot33_CCR_9dot94_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.33_CCR_9.94_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 120;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot37_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.37_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 613;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot37_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.37_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 598;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot37_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.37_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 598;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot43_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.43_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4883;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot43_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.43_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4559;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot43_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.43_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4559;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot57_CCR_10dot12_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.57_CCR_10.12_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 102;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_30_CCR_10dot03_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-2_Nodes_30_CCR_10.03_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 143;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_30_CCR_10dot03_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-2_Nodes_30_CCR_10.03_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 143;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_30_CCR_10dot03_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-2_Nodes_30_CCR_10.03_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 143;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_30_CCR_10dot03_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-2_Nodes_30_CCR_10.03_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 143;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_30_CCR_2dot01_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-2_Nodes_30_CCR_2.01_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 128;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 1051;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 789;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 1123;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 1066;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1209;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 1209;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 966;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 966;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1187;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 11;
        int expectedScheduleEndTime = 871;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 871;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1033;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 1033;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_30_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-3_Nodes_30_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 126;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_30_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-3_Nodes_30_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 123;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_30_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-3_Nodes_30_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 123;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_30_CCR_9dot99_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-3_Nodes_30_CCR_9.99_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 121;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_30_CCR_9dot99_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-3_Nodes_30_CCR_9.99_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 121;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_30_CCR_9dot99_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-3_Nodes_30_CCR_9.99_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 110;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_30_CCR_9dot99_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-3_Nodes_30_CCR_9.99_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 110;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_30_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-3_Nodes_30_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 144;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_30_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-3_Nodes_30_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 144;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_30_CCR_9dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-3_Nodes_30_CCR_9.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 144;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_30_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-5_Nodes_30_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 882;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_30_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-5_Nodes_30_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 738;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-5_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 12;
        int expectedScheduleEndTime = 1000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-5_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 1000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_30_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Stencil_Nodes_30_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 870;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_30_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Stencil_Nodes_30_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 947;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_30_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Stencil_Nodes_30_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 2054;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_30_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Stencil_Nodes_30_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 1052;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_30_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Stencil_Nodes_30_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 969;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_30_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Stencil_Nodes_30_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 891;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_30_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Stencil_Nodes_30_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 824;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_30_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Stencil_Nodes_30_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 915;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_30_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Stencil_Nodes_30_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1043;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_30_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Stencil_Nodes_30_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 1043;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_30_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Stencil_Nodes_30_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 1026;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Stencil_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 16;
        int expectedScheduleEndTime = 1134;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Stencil_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 2029;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_30_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Stencil_Nodes_30_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 874;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_30_CCR_1dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Stencil_Nodes_30_CCR_1.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 201;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_30_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Stencil_Nodes_30_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 208;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_30_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Stencil_Nodes_30_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 107;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_30_CCR_10dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Stencil_Nodes_30_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 105;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_30_CCR_10dot03_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Stencil_Nodes_30_CCR_10.03_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 107;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_30_CCR_9dot95_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Stencil_Nodes_30_CCR_9.95_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 118;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_30_CCR_9dot97_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Stencil_Nodes_30_CCR_9.97_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 110;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_30_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Stencil_Nodes_30_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 120;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_30_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Stencil_Nodes_30_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 104;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

}
