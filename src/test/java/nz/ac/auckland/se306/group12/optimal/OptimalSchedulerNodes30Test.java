package nz.ac.auckland.se306.group12.optimal;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import nz.ac.auckland.se306.group12.ScheduleValidator;
import nz.ac.auckland.se306.group12.TestUtil;
import nz.ac.auckland.se306.group12.models.Graph;
import nz.ac.auckland.se306.group12.models.Schedule;
import nz.ac.auckland.se306.group12.scheduler.Scheduler;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Assumptions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;

/**
 * This class has been automatically generated by the GenerateUnitTests.py script.
 * Do not modify this file directly as it will be overwritten the next time the script is run.
 * <p>
 * The optimal schedules for each test have been sourced from 
 * <a href="https://parallel.auckland.ac.nz/OptimalTaskScheduling/OptimalSchedules.html">the amazing work</a>
 * done by the Parallel and Reconfigurable Computing Lab at the University of Auckland.
 */
@Timeout(value = 2, unit = TimeUnit.MINUTES, threadMode = ThreadMode.SEPARATE_THREAD)
public class OptimalSchedulerNodes30Test {

    public static final int TOTAL_TESTS = 459;

    // Change this to adjust how many tests are run
    public static final int TEST_RUN_COUNT = 50;

    private static Set<Number> tests_to_run;

    /**
   * Randomly select {@link #TEST_RUN_COUNT} tests to run.
   */
    @BeforeAll
    public static void beforeAll() {
        int num_to_run = Math.min(TEST_RUN_COUNT, TOTAL_TESTS);
        tests_to_run = new HashSet<>();
        while (tests_to_run.size() < num_to_run) {
            tests_to_run.add((int) (Math.random() * TOTAL_TESTS));
        }
    }

    public boolean isTestActive(int testIndex) {
        return tests_to_run.contains(testIndex);
    }

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(0));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Join_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 16;
        int expectedScheduleEndTime = 532;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(1));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Join_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1826;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(2));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 941;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(3));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 973;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(4));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 933;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(5));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 759;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(6));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 910;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(7));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 843;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(8));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 861;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(9));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 940;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(10));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 947;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(11));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 16;
        int expectedScheduleEndTime = 170;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(12));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1013;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(13));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 885;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_0dot95_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(14));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_0.95_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 93;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_0dot96_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(15));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_0.96_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 97;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_1dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(16));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_1.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 99;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(17));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 94;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_1dot02_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(18));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_1.02_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 89;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_1dot02_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(19));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_1.02_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 16;
        int expectedScheduleEndTime = 21;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_1dot02_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(20));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_1.02_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 95;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_1dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(21));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 101;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_1dot04_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(22));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_1.04_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 93;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_1dot04_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(23));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_1.04_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_1dot05_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(24));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_1.05_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_1dot07_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(25));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_1.07_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_10dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(26));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_10.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 113;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_10dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(27));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_10.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_10dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(28));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_10.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_10dot01_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(29));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_10.01_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 106;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_10dot01_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(30));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_10.01_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 83;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_10dot01_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(31));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_10.01_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 83;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_10dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(32));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 98;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_10dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(33));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 79;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_10dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(34));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_10.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 79;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(35));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 112;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(36));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 96;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_2dot00_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(37));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_2.00_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 16;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_2dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(38));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_2.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 111;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_9dot98_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(39));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_9.98_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 16;
        int expectedScheduleEndTime = 91;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_9dot98_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(40));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_9.98_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 108;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_9dot98_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(41));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_9.98_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 91;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_9dot98_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(42));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_9.98_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 91;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(43));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(44));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(45));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_9dot99_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(46));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_9.99_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 114;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_9dot99_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(47));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_9.99_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 85;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_9dot99_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(48));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_9.99_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 85;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_9dot99_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(49));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_9.99_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 102;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_9dot99_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(50));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_9.99_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 79;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_9dot99_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(51));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_9.99_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_9dot99_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(52));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_9.99_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 93;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_9dot99_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(53));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_9.99_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_9dot99_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(54));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_9.99_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_9dot99_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(55));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_9.99_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 104;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_9dot99_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(56));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_9.99_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_9dot99_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(57));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_9.99_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(58));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 102;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_30_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(59));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Fork_Nodes_30_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(60));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 95;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(61));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 48;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(62));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(63));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 86;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(64));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 43;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(65));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(66));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 39;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(67));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 26;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(68));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 101;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(69));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(70));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 34;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(71));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 99;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(72));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(73));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 33;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(74));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(75));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(76));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(77));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 97;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(78));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 49;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(79));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 85;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(80));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 43;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(81));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(82));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 41;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(83));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 16;
        int expectedScheduleEndTime = 13;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(84));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(85));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(86));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 23;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(87));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(88));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_30_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(89));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Independent_Nodes_30_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 34;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(90));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 956;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(91));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 897;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(92));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 840;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(93));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 860;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(94));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 975;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(95));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 986;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(96));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 901;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(97));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 917;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(98));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 974;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(99));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 16;
        int expectedScheduleEndTime = 252;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(100));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 889;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(101));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 840;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot91_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(102));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_0.91_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 102;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot92_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(103));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_0.92_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 98;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot94_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(104));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_0.94_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 107;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot98_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(105));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_0.98_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 98;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot98_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(106));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_0.98_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(107));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_0.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(108));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 107;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_1dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(109));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 101;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_1dot06_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(110));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_1.06_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 93;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_1dot06_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(111));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_1.06_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 40;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_1dot07_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(112));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_1.07_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 91;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_1dot09_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(113));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_1.09_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 94;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_1dot11_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(114));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_1.11_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 97;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_1dot11_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(115));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_1.11_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_2dot02_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(116));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_2.02_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 98;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_30_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(117));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Balanced-MaxBf-3_Nodes_30_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 93;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(118));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Unbalanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 11;
        int expectedScheduleEndTime = 385;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(119));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Unbalanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 858;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(120));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Unbalanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 385;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_30_CCR_0dot95_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(121));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Unbalanced-MaxBf-3_Nodes_30_CCR_0.95_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 16;
        int expectedScheduleEndTime = 39;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_30_CCR_0dot95_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(122));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Unbalanced-MaxBf-3_Nodes_30_CCR_0.95_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_30_CCR_2dot00_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(123));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Unbalanced-MaxBf-3_Nodes_30_CCR_2.00_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 16;
        int expectedScheduleEndTime = 49;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_30_CCR_2dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(124));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Unbalanced-MaxBf-3_Nodes_30_CCR_2.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 101;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_30_CCR_2dot00_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(125));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/InTree-Unbalanced-MaxBf-3_Nodes_30_CCR_2.00_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(126));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 848;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(127));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 926;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(128));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 951;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(129));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 822;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(130));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 824;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(131));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1007;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(132));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 881;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(133));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(134));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 935;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(135));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 16;
        int expectedScheduleEndTime = 182;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(136));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 820;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(137));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 881;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_0dot91_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(138));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_0.91_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 91;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_0dot94_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(139));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_0.94_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 93;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_0dot96_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(140));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_0.96_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_0dot97_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(141));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_0.97_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 106;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_0dot98_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(142));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_0.98_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 110;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_0dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(143));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_0.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 110;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_0dot99_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(144));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_0.99_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 16;
        int expectedScheduleEndTime = 30;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_0dot99_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(145));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_0.99_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 103;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(146));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 91;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_1dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(147));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 97;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_1dot08_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(148));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_1.08_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_1dot09_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(149));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_1.09_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_10dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(150));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_10.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 110;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_10dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(151));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_10.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_10dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(152));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_10.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_10dot01_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(153));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_10.01_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 99;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_10dot01_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(154));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_10.01_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_10dot01_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(155));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_10.01_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 95;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_10dot01_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(156));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_10.01_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 75;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_10dot01_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(157));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_10.01_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 75;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_10dot01_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(158));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_10.01_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 120;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_10dot01_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(159));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_10.01_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 89;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_10dot01_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(160));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_10.01_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 95;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_10dot01_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(161));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_10.01_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_10dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(162));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 115;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_10dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(163));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_10dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(164));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_10.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 82;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(165));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 102;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(166));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 74;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_2dot00_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(167));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_2.00_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 16;
        int expectedScheduleEndTime = 40;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_2dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(168));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_2.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 109;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_2dot00_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(169));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_2.00_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 40;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_9dot98_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(170));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_9.98_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 120;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_9dot98_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(171));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_9.98_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 93;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(172));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 117;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(173));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 93;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(174));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 93;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_9dot99_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(175));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_9.99_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 108;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_9dot99_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(176));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_9.99_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_9dot99_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(177));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_9.99_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(178));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(179));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 83;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_30_CCR_9dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(180));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Join_Nodes_30_CCR_9.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 83;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(181));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 888;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(182));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 898;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(183));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1015;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(184));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 972;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(185));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 841;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(186));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1054;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(187));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 882;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(188));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 905;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(189));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 861;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(190));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 14;
        int expectedScheduleEndTime = 260;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(191));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 765;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(192));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 260;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(193));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 928;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot94_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(194));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.94_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot95_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(195));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.95_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 95;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot95_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(196));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.95_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot97_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(197));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.97_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 92;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot97_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(198));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.97_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot98_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(199));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.98_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 99;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot98_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(200));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.98_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 44;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(201));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 107;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot99_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(202));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.99_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 98;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot99_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(203));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.99_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot99_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(204));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.99_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 97;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot99_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(205));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.99_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 42;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(206));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 102;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(207));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 48;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_1dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(208));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 87;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_1dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(209));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_1.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_1dot09_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(210));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_1.09_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_10dot01_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(211));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_10.01_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 102;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_10dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(212));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 87;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_10dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(213));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_10.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 87;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_2dot01_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(214));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_2.01_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 105;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_9dot96_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(215));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_9.96_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 100;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_9dot96_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(216));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_9.96_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 74;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_30_CCR_9dot96_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(217));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Balanced-MaxBf-3_Nodes_30_CCR_9.96_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(218));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 13;
        int expectedScheduleEndTime = 400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(219));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 875;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(220));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_30_CCR_0dot98_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(221));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_30_CCR_0.98_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 16;
        int expectedScheduleEndTime = 48;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_30_CCR_0dot98_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(222));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_30_CCR_0.98_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 111;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_30_CCR_2dot02_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(223));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_30_CCR_2.02_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 87;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_30_CCR_2dot02_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(224));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_30_CCR_2.02_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(225));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1626;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(226));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1167;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(227));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 1167;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(228));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1113;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(229));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 1113;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(230));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1135;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(231));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1766;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(232));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1402;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(233));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 1402;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(234));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1419;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(235));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1054;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(236));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 1054;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(237));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1685;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(238));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1259;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(239));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 1259;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(240));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1055;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(241));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1736;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(242));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1373;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(243));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 1373;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(244));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1652;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(245));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1384;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(246));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 1384;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(247));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 1191;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(248));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1498;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(249));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1191;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(250));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 1191;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot98_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(251));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.98_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 179;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot99_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(252));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.99_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 133;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(253));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 147;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(254));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 162;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_1dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(255));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_1.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 130;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_1dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(256));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_1.00_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 169;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_1dot00_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(257));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_1.00_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 152;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(258));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 143;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_10dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(259));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_10.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 138;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_10dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(260));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_10.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 138;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_10dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(261));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_10.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 138;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_10dot03_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(262));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_10.03_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 142;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_10dot03_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(263));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_10.03_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 142;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_10dot03_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(264));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_10.03_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 142;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(265));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 161;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(266));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 161;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_30_CCR_9dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(267));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Pipeline_Nodes_30_CCR_9.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 161;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_0dot40_CCR_10dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(268));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_0.40_CCR_10.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_0dot40_CCR_10dot00_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(269));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_0.40_CCR_10.00_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_0dot47_CCR_0dot99_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(270));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_0.47_CCR_0.99_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 16;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_0dot47_CCR_0dot99_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(271));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_0.47_CCR_0.99_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 97;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_0dot47_CCR_0dot99_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(272));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_0.47_CCR_0.99_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_0dot67_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(273));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_0.67_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 16;
        int expectedScheduleEndTime = 195;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_0dot67_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(274));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_0.67_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 195;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_0dot73_CCR_2dot01_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(275));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_0.73_CCR_2.01_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_0dot73_CCR_2dot01_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(276));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_0.73_CCR_2.01_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 30;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_0dot87_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(277));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_0.87_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 16;
        int expectedScheduleEndTime = 271;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_0dot87_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(278));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_0.87_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 750;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_0dot87_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(279));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_0.87_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 271;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_0dot93_CCR_2dot01_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(280));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_0.93_CCR_2.01_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 98;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_1dot27_CCR_1dot00_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(281));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_1.27_CCR_1.00_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 13;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_1dot27_CCR_1dot00_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(282));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_1.27_CCR_1.00_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_1dot63_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(283));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_1.63_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1368;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_1dot63_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(284));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_1.63_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 665;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_1dot63_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(285));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_1.63_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 141;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_1dot73_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(286));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_1.73_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1655;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_1dot73_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(287));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_1.73_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 725;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_1dot77_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(288));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_1.77_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1537;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_1dot77_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(289));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_1.77_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 859;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_1dot77_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(290));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_1.77_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 859;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_1dot80_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(291));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_1.80_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1487;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_1dot80_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(292));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_1.80_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 598;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_1dot80_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(293));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_1.80_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 157;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_1dot80_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(294));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_1.80_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 79;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_1dot80_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(295));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_1.80_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 75;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_1dot83_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(296));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_1.83_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 706;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_1dot83_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(297));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_1.83_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 148;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_1dot83_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(298));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_1.83_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_1dot83_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(299));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_1.83_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot07_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(300));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.07_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1740;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot07_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(301));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.07_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 781;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot07_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(302));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.07_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1964;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot07_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(303));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.07_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1260;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot07_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(304));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.07_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 1260;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot10_CCR_0dot99_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(305));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.10_CCR_0.99_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 16;
        int expectedScheduleEndTime = 110;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot10_CCR_0dot99_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(306));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.10_CCR_0.99_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 189;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot10_CCR_0dot99_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(307));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.10_CCR_0.99_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 110;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot10_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(308));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.10_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 140;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot10_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(309));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.10_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 140;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot10_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(310));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.10_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 104;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot10_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(311));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.10_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 103;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot10_CCR_1dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(312));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.10_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 192;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot10_CCR_1dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(313));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.10_CCR_1.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 122;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot10_CCR_1dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(314));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.10_CCR_1.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 122;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot10_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(315));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.10_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 85;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot10_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(316));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.10_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot17_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(317));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.17_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 2014;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot17_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(318));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.17_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1452;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot17_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(319));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.17_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 1452;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot20_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(320));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.20_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1334;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot20_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(321));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.20_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 1334;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot20_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(322));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.20_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 98;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot20_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(323));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.20_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 93;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot30_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(324));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.30_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 217;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot30_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(325));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.30_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 163;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot30_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(326));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.30_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 163;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot40_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(327));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.40_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 7;
        int expectedScheduleEndTime = 1815;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot40_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(328));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.40_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1815;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot40_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(329));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.40_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 7;
        int expectedScheduleEndTime = 1815;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot40_CCR_10dot03_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(330));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.40_CCR_10.03_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 91;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot47_CCR_9dot98_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(331));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.47_CCR_9.98_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 110;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_2dot53_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(332));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_2.53_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 120;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_3dot90_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(333));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_3.90_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 3540;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_3dot90_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(334));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_3.90_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 2361;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_3dot90_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(335));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_3.90_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 2361;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot23_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(336));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.23_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 385;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot23_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(337));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.23_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 294;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot33_CCR_10dot05_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(338));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.33_CCR_10.05_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 111;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot37_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(339));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.37_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 469;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot37_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(340));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.37_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 469;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot37_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(341));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.37_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 469;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot50_CCR_9dot95_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(342));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.50_CCR_9.95_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot53_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(343));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.53_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4395;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot53_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(344));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.53_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 3654;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot53_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(345));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.53_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 3654;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot63_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(346));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.63_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4103;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot63_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(347));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.63_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 3283;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot63_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(348));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.63_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 3283;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot73_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(349));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.73_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 3684;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot73_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(350));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.73_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4840;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot73_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(351));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.73_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4741;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot73_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(352));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.73_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 4741;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot77_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(353));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.77_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 501;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot77_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(354));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.77_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 473;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot77_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(355));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.77_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 473;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot77_CCR_9dot96_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(356));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.77_CCR_9.96_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 120;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot80_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(357));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.80_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 16;
        int expectedScheduleEndTime = 4153;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot80_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(358));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.80_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4347;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot80_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(359));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.80_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4153;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot80_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(360));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.80_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 4153;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot80_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(361));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.80_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 491;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot80_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(362));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.80_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 482;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot80_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(363));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.80_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 482;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot83_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(364));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.83_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 435;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot83_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(365));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.83_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 373;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot83_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(366));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.83_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 373;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot90_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(367));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.90_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4499;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot90_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(368));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.90_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4206;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot90_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(369));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.90_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 4206;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot93_CCR_1dot00_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(370));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.93_CCR_1.00_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 431;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot93_CCR_1dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(371));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.93_CCR_1.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 445;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot93_CCR_1dot00_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(372));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.93_CCR_1.00_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 431;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot93_CCR_1dot00_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(373));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.93_CCR_1.00_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 431;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot97_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(374));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.97_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4453;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot97_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(375));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.97_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4396;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_4dot97_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(376));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_4.97_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4396;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot00_CCR_9dot90_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(377));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.00_CCR_9.90_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 114;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot03_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(378));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.03_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4904;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot03_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(379));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.03_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4514;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot03_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(380));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.03_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 4514;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot03_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(381));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.03_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4859;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot03_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(382));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.03_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4085;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot03_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(383));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.03_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 4085;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot03_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(384));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.03_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 455;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot03_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(385));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.03_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 422;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot03_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(386));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.03_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 422;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot07_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(387));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.07_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 447;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot07_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(388));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.07_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 407;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot10_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(389));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.10_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 550;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot10_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(390));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.10_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 540;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot10_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(391));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.10_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 540;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot17_CCR_2dot01_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(392));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.17_CCR_2.01_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 266;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot17_CCR_2dot01_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(393));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.17_CCR_2.01_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 273;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot17_CCR_2dot01_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(394));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.17_CCR_2.01_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 266;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot17_CCR_2dot01_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(395));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.17_CCR_2.01_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 266;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot33_CCR_9dot94_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(396));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.33_CCR_9.94_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 120;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot37_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(397));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.37_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 613;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot37_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(398));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.37_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 598;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot37_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(399));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.37_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 598;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot43_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(400));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.43_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 4883;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot43_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(401));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.43_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4559;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot43_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(402));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.43_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 4559;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_30_Density_5dot57_CCR_10dot12_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(403));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Random_Nodes_30_Density_5.57_CCR_10.12_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 102;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_30_CCR_10dot03_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(404));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-2_Nodes_30_CCR_10.03_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 143;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_30_CCR_10dot03_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(405));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-2_Nodes_30_CCR_10.03_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 143;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_30_CCR_10dot03_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(406));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-2_Nodes_30_CCR_10.03_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 143;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_30_CCR_10dot03_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(407));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-2_Nodes_30_CCR_10.03_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 143;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_30_CCR_2dot01_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(408));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-2_Nodes_30_CCR_2.01_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 128;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(409));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 1051;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(410));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 789;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(411));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 1123;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(412));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 1066;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(413));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1209;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(414));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 1209;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(415));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 966;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(416));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 966;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(417));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1187;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(418));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 11;
        int expectedScheduleEndTime = 871;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(419));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 871;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(420));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1033;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_30_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(421));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-3_Nodes_30_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 1033;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_30_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(422));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-3_Nodes_30_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 126;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_30_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(423));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-3_Nodes_30_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 123;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_30_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(424));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-3_Nodes_30_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 123;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_30_CCR_9dot99_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(425));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-3_Nodes_30_CCR_9.99_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 121;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_30_CCR_9dot99_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(426));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-3_Nodes_30_CCR_9.99_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 121;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_30_CCR_9dot99_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(427));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-3_Nodes_30_CCR_9.99_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 110;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_30_CCR_9dot99_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(428));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-3_Nodes_30_CCR_9.99_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 110;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_30_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(429));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-3_Nodes_30_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 144;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_30_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(430));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-3_Nodes_30_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 144;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_30_CCR_9dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(431));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-3_Nodes_30_CCR_9.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 144;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_30_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(432));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-5_Nodes_30_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 882;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_30_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(433));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-5_Nodes_30_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 738;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(434));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-5_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 12;
        int expectedScheduleEndTime = 1000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(435));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/SeriesParallel-MaxBf-5_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 1000;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_30_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(436));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Stencil_Nodes_30_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 870;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_30_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(437));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Stencil_Nodes_30_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 947;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_30_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(438));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Stencil_Nodes_30_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 2054;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_30_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(439));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Stencil_Nodes_30_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 1052;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_30_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(440));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Stencil_Nodes_30_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 969;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_30_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(441));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Stencil_Nodes_30_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 891;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_30_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(442));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Stencil_Nodes_30_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 824;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_30_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(443));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Stencil_Nodes_30_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 915;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_30_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(444));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Stencil_Nodes_30_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 1043;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_30_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(445));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Stencil_Nodes_30_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 1043;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_30_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(446));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Stencil_Nodes_30_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 1026;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(447));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Stencil_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 16;
        int expectedScheduleEndTime = 1134;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_30_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(448));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Stencil_Nodes_30_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 2029;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_30_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(449));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Stencil_Nodes_30_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 874;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_30_CCR_1dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(450));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Stencil_Nodes_30_CCR_1.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 201;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_30_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(451));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Stencil_Nodes_30_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 208;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_30_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(452));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Stencil_Nodes_30_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 107;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_30_CCR_10dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(453));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Stencil_Nodes_30_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 105;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_30_CCR_10dot03_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(454));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Stencil_Nodes_30_CCR_10.03_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 107;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_30_CCR_9dot95_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(455));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Stencil_Nodes_30_CCR_9.95_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 118;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_30_CCR_9dot97_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(456));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Stencil_Nodes_30_CCR_9.97_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 110;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_30_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(457));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Stencil_Nodes_30_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 120;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_30_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Assumptions.assumeTrue(this.isTestActive(458));

        Graph graph = TestUtil.loadGraph("./graphs/optimal/30-nodes/Stencil_Nodes_30_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 104;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

}
