package nz.ac.auckland.se306.group12.optimal;

import nz.ac.auckland.se306.group12.TestUtil;
import nz.ac.auckland.se306.group12.models.Graph;
import nz.ac.auckland.se306.group12.models.Schedule;
import nz.ac.auckland.se306.group12.models.ScheduledTask;
import nz.ac.auckland.se306.group12.scheduler.Scheduler;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;

/**
 * This class has been automatically generated by the GenerateUnitTests.py script.
 * Do not modify this file directly as it will be overwritten the next time the script is run.
 * <p>
 * The optimal schedules for each test have been sourced from 
 * <a href="https://parallel.auckland.ac.nz/OptimalTaskScheduling/OptimalSchedules.html">the amazing work</a>
 * done by the Parallel and Reconfigurable Computing Lab at the University of Auckland.
 */
public class OptimalSchedulerNodes10Test {

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 548;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 126, 0), new ScheduledTask(359, 485, 1), new ScheduledTask(168, 294, 0), new ScheduledTask(294, 420, 0), new ScheduledTask(254, 359, 1), new ScheduledTask(191, 254, 1), new ScheduledTask(128, 191, 1), new ScheduledTask(420, 483, 0), new ScheduledTask(126, 168, 0), new ScheduledTask(485, 548, 1)};
        int[] expectedProcessorEndTimes = new int[]{483, 548};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 380;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 126, 0), new ScheduledTask(126, 252, 0), new ScheduledTask(191, 317, 1), new ScheduledTask(170, 296, 2), new ScheduledTask(133, 238, 3), new ScheduledTask(238, 301, 3), new ScheduledTask(128, 191, 1), new ScheduledTask(252, 315, 0), new ScheduledTask(128, 170, 2), new ScheduledTask(317, 380, 1)};
        int[] expectedProcessorEndTimes = new int[]{315, 380, 296, 301};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 322;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 126, 0), new ScheduledTask(131, 257, 1), new ScheduledTask(130, 256, 2), new ScheduledTask(126, 252, 0), new ScheduledTask(133, 238, 3), new ScheduledTask(170, 233, 4), new ScheduledTask(128, 191, 5), new ScheduledTask(191, 254, 5), new ScheduledTask(128, 170, 4), new ScheduledTask(259, 322, 1)};
        int[] expectedProcessorEndTimes = new int[]{252, 322, 256, 238, 233, 254};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 95, 0), new ScheduledTask(331, 489, 0), new ScheduledTask(189, 331, 0), new ScheduledTask(371, 482, 1), new ScheduledTask(181, 276, 1), new ScheduledTask(276, 371, 1), new ScheduledTask(102, 181, 1), new ScheduledTask(142, 189, 0), new ScheduledTask(95, 142, 0), new ScheduledTask(489, 600, 0)};
        int[] expectedProcessorEndTimes = new int[]{600, 482};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 411;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 95, 0), new ScheduledTask(95, 253, 0), new ScheduledTask(103, 245, 1), new ScheduledTask(103, 214, 2), new ScheduledTask(97, 192, 3), new ScheduledTask(192, 287, 3), new ScheduledTask(214, 293, 2), new ScheduledTask(245, 292, 1), new ScheduledTask(253, 300, 0), new ScheduledTask(300, 411, 0)};
        int[] expectedProcessorEndTimes = new int[]{411, 292, 293, 287};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 365;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 95, 0), new ScheduledTask(95, 253, 0), new ScheduledTask(103, 245, 1), new ScheduledTask(103, 214, 2), new ScheduledTask(97, 192, 3), new ScheduledTask(101, 196, 4), new ScheduledTask(102, 181, 5), new ScheduledTask(181, 228, 5), new ScheduledTask(192, 239, 3), new ScheduledTask(254, 365, 0)};
        int[] expectedProcessorEndTimes = new int[]{365, 245, 214, 239, 196, 228};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 578;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 131, 0), new ScheduledTask(131, 262, 0), new ScheduledTask(133, 251, 1), new ScheduledTask(251, 356, 1), new ScheduledTask(262, 354, 0), new ScheduledTask(354, 419, 0), new ScheduledTask(356, 421, 1), new ScheduledTask(419, 445, 0), new ScheduledTask(421, 447, 1), new ScheduledTask(447, 578, 1)};
        int[] expectedProcessorEndTimes = new int[]{445, 578};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 432;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 131, 0), new ScheduledTask(139, 270, 1), new ScheduledTask(133, 251, 2), new ScheduledTask(196, 301, 0), new ScheduledTask(204, 296, 3), new ScheduledTask(139, 204, 3), new ScheduledTask(131, 196, 0), new ScheduledTask(270, 296, 1), new ScheduledTask(251, 277, 2), new ScheduledTask(301, 432, 0)};
        int[] expectedProcessorEndTimes = new int[]{432, 296, 277, 296};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 393;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 131, 0), new ScheduledTask(131, 262, 0), new ScheduledTask(133, 251, 1), new ScheduledTask(141, 246, 2), new ScheduledTask(135, 227, 3), new ScheduledTask(139, 204, 4), new ScheduledTask(134, 199, 5), new ScheduledTask(199, 225, 5), new ScheduledTask(204, 230, 4), new ScheduledTask(262, 393, 0)};
        int[] expectedProcessorEndTimes = new int[]{393, 251, 246, 227, 230, 225};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 554;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 45, 0), new ScheduledTask(166, 315, 1), new ScheduledTask(45, 179, 0), new ScheduledTask(315, 449, 1), new ScheduledTask(47, 166, 1), new ScheduledTask(179, 298, 0), new ScheduledTask(402, 521, 0), new ScheduledTask(298, 402, 0), new ScheduledTask(449, 524, 1), new ScheduledTask(524, 554, 1)};
        int[] expectedProcessorEndTimes = new int[]{521, 554};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 328;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 45, 0), new ScheduledTask(50, 199, 1), new ScheduledTask(164, 298, 0), new ScheduledTask(51, 185, 2), new ScheduledTask(47, 166, 3), new ScheduledTask(166, 285, 3), new ScheduledTask(45, 164, 0), new ScheduledTask(185, 289, 2), new ScheduledTask(199, 274, 1), new ScheduledTask(298, 328, 0)};
        int[] expectedProcessorEndTimes = new int[]{328, 274, 289, 285};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 298;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 45, 0), new ScheduledTask(50, 199, 1), new ScheduledTask(55, 189, 2), new ScheduledTask(51, 185, 3), new ScheduledTask(45, 164, 0), new ScheduledTask(54, 173, 4), new ScheduledTask(53, 172, 5), new ScheduledTask(164, 268, 0), new ScheduledTask(185, 260, 3), new ScheduledTask(268, 298, 0)};
        int[] expectedProcessorEndTimes = new int[]{298, 199, 189, 260, 173, 172};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 564;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 112, 0), new ScheduledTask(114, 226, 1), new ScheduledTask(292, 404, 0), new ScheduledTask(202, 292, 0), new ScheduledTask(112, 202, 0), new ScheduledTask(226, 316, 1), new ScheduledTask(316, 395, 1), new ScheduledTask(395, 474, 1), new ScheduledTask(404, 471, 0), new ScheduledTask(474, 564, 1)};
        int[] expectedProcessorEndTimes = new int[]{471, 564};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 393;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 112, 0), new ScheduledTask(112, 224, 0), new ScheduledTask(117, 229, 1), new ScheduledTask(116, 206, 2), new ScheduledTask(120, 210, 3), new ScheduledTask(206, 296, 2), new ScheduledTask(210, 289, 3), new ScheduledTask(224, 303, 0), new ScheduledTask(229, 296, 1), new ScheduledTask(303, 393, 0)};
        int[] expectedProcessorEndTimes = new int[]{393, 296, 296, 289};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 363;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 112, 0), new ScheduledTask(114, 226, 1), new ScheduledTask(117, 229, 2), new ScheduledTask(116, 206, 3), new ScheduledTask(120, 210, 4), new ScheduledTask(115, 205, 5), new ScheduledTask(112, 191, 0), new ScheduledTask(191, 270, 0), new ScheduledTask(205, 272, 5), new ScheduledTask(273, 363, 5)};
        int[] expectedProcessorEndTimes = new int[]{270, 226, 229, 206, 210, 363};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 570;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 76, 0), new ScheduledTask(76, 266, 0), new ScheduledTask(81, 214, 1), new ScheduledTask(214, 347, 1), new ScheduledTask(266, 399, 0), new ScheduledTask(347, 442, 1), new ScheduledTask(399, 475, 0), new ScheduledTask(442, 499, 1), new ScheduledTask(475, 513, 0), new ScheduledTask(513, 570, 0)};
        int[] expectedProcessorEndTimes = new int[]{570, 499};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 365;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 76, 0), new ScheduledTask(79, 269, 1), new ScheduledTask(156, 289, 2), new ScheduledTask(175, 308, 3), new ScheduledTask(171, 304, 0), new ScheduledTask(76, 171, 0), new ScheduledTask(80, 156, 2), new ScheduledTask(80, 137, 3), new ScheduledTask(137, 175, 3), new ScheduledTask(308, 365, 3)};
        int[] expectedProcessorEndTimes = new int[]{304, 269, 289, 365};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 323;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 76, 0), new ScheduledTask(76, 266, 0), new ScheduledTask(81, 214, 1), new ScheduledTask(86, 219, 2), new ScheduledTask(84, 217, 3), new ScheduledTask(83, 178, 4), new ScheduledTask(80, 156, 5), new ScheduledTask(156, 213, 5), new ScheduledTask(178, 216, 4), new ScheduledTask(266, 323, 0)};
        int[] expectedProcessorEndTimes = new int[]{323, 214, 219, 217, 216, 213};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 522;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 174, 0), new ScheduledTask(348, 470, 0), new ScheduledTask(261, 348, 0), new ScheduledTask(174, 261, 0), new ScheduledTask(251, 321, 1), new ScheduledTask(391, 461, 1), new ScheduledTask(321, 391, 1), new ScheduledTask(216, 251, 1), new ScheduledTask(181, 216, 1), new ScheduledTask(470, 522, 0)};
        int[] expectedProcessorEndTimes = new int[]{522, 461};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 386;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 174, 0), new ScheduledTask(176, 298, 1), new ScheduledTask(174, 261, 0), new ScheduledTask(213, 300, 2), new ScheduledTask(177, 247, 3), new ScheduledTask(261, 331, 0), new ScheduledTask(247, 317, 3), new ScheduledTask(178, 213, 2), new ScheduledTask(298, 333, 1), new ScheduledTask(334, 386, 1)};
        int[] expectedProcessorEndTimes = new int[]{331, 386, 300, 317};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 348;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 174, 0), new ScheduledTask(174, 296, 0), new ScheduledTask(181, 268, 1), new ScheduledTask(180, 267, 2), new ScheduledTask(177, 247, 3), new ScheduledTask(181, 251, 4), new ScheduledTask(180, 250, 5), new ScheduledTask(247, 282, 3), new ScheduledTask(250, 285, 5), new ScheduledTask(296, 348, 0)};
        int[] expectedProcessorEndTimes = new int[]{348, 268, 267, 282, 251, 285};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 574;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 69, 0), new ScheduledTask(208, 381, 0), new ScheduledTask(158, 314, 1), new ScheduledTask(314, 470, 1), new ScheduledTask(104, 208, 0), new ScheduledTask(71, 158, 1), new ScheduledTask(416, 468, 0), new ScheduledTask(69, 104, 0), new ScheduledTask(381, 416, 0), new ScheduledTask(470, 574, 1)};
        int[] expectedProcessorEndTimes = new int[]{468, 574};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 385;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 69, 0), new ScheduledTask(73, 246, 1), new ScheduledTask(121, 277, 0), new ScheduledTask(113, 269, 2), new ScheduledTask(158, 262, 3), new ScheduledTask(71, 158, 3), new ScheduledTask(69, 121, 0), new ScheduledTask(78, 113, 2), new ScheduledTask(246, 281, 1), new ScheduledTask(281, 385, 1)};
        int[] expectedProcessorEndTimes = new int[]{277, 385, 269, 262};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 346;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 69, 0), new ScheduledTask(69, 242, 0), new ScheduledTask(79, 235, 1), new ScheduledTask(79, 235, 2), new ScheduledTask(72, 176, 3), new ScheduledTask(71, 158, 4), new ScheduledTask(77, 129, 5), new ScheduledTask(129, 164, 5), new ScheduledTask(158, 193, 4), new ScheduledTask(242, 346, 0)};
        int[] expectedProcessorEndTimes = new int[]{346, 235, 235, 176, 193, 164};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 605;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 112, 0), new ScheduledTask(210, 350, 0), new ScheduledTask(282, 422, 1), new ScheduledTask(170, 282, 1), new ScheduledTask(350, 462, 0), new ScheduledTask(112, 210, 0), new ScheduledTask(422, 520, 1), new ScheduledTask(114, 170, 1), new ScheduledTask(462, 518, 0), new ScheduledTask(521, 605, 1)};
        int[] expectedProcessorEndTimes = new int[]{518, 605};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 412;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 112, 0), new ScheduledTask(119, 259, 1), new ScheduledTask(170, 310, 2), new ScheduledTask(118, 230, 3), new ScheduledTask(210, 322, 0), new ScheduledTask(112, 210, 0), new ScheduledTask(230, 328, 3), new ScheduledTask(114, 170, 2), new ScheduledTask(259, 315, 1), new ScheduledTask(328, 412, 3)};
        int[] expectedProcessorEndTimes = new int[]{322, 315, 310, 412};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 353;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 112, 0), new ScheduledTask(119, 259, 1), new ScheduledTask(119, 259, 2), new ScheduledTask(118, 230, 3), new ScheduledTask(114, 226, 4), new ScheduledTask(170, 268, 5), new ScheduledTask(112, 210, 0), new ScheduledTask(114, 170, 5), new ScheduledTask(210, 266, 0), new ScheduledTask(269, 353, 5)};
        int[] expectedProcessorEndTimes = new int[]{266, 259, 259, 230, 226, 353};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 262;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 57, 0), new ScheduledTask(57, 200, 0), new ScheduledTask(61, 204, 1), new ScheduledTask(66, 194, 2), new ScheduledTask(67, 181, 3), new ScheduledTask(64, 178, 4), new ScheduledTask(59, 102, 5), new ScheduledTask(64, 107, 6), new ScheduledTask(62, 91, 7), new ScheduledTask(205, 262, 1)};
        int[] expectedProcessorEndTimes = new int[]{200, 262, 194, 181, 178, 102, 107, 91};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 499;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 57, 0), new ScheduledTask(245, 388, 1), new ScheduledTask(102, 245, 1), new ScheduledTask(314, 442, 0), new ScheduledTask(200, 314, 0), new ScheduledTask(86, 200, 0), new ScheduledTask(59, 102, 1), new ScheduledTask(388, 431, 1), new ScheduledTask(57, 86, 0), new ScheduledTask(442, 499, 0)};
        int[] expectedProcessorEndTimes = new int[]{499, 431};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 342;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 57, 0), new ScheduledTask(134, 277, 1), new ScheduledTask(61, 204, 2), new ScheduledTask(66, 194, 3), new ScheduledTask(171, 285, 0), new ScheduledTask(57, 171, 0), new ScheduledTask(91, 134, 1), new ScheduledTask(204, 247, 2), new ScheduledTask(62, 91, 1), new ScheduledTask(285, 342, 0)};
        int[] expectedProcessorEndTimes = new int[]{342, 277, 247, 194};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 262;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 57, 0), new ScheduledTask(57, 200, 0), new ScheduledTask(61, 204, 1), new ScheduledTask(66, 194, 2), new ScheduledTask(67, 181, 3), new ScheduledTask(64, 178, 4), new ScheduledTask(59, 102, 5), new ScheduledTask(64, 107, 6), new ScheduledTask(62, 91, 7), new ScheduledTask(205, 262, 1)};
        int[] expectedProcessorEndTimes = new int[]{200, 262, 194, 181, 178, 102, 107, 91};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 465;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 41, 0), new ScheduledTask(41, 178, 0), new ScheduledTask(44, 181, 1), new ScheduledTask(178, 301, 0), new ScheduledTask(181, 291, 1), new ScheduledTask(291, 401, 1), new ScheduledTask(301, 383, 0), new ScheduledTask(383, 438, 0), new ScheduledTask(401, 428, 1), new ScheduledTask(438, 465, 0)};
        int[] expectedProcessorEndTimes = new int[]{465, 428};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 288;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 41, 0), new ScheduledTask(105, 242, 1), new ScheduledTask(44, 181, 2), new ScheduledTask(43, 166, 3), new ScheduledTask(151, 261, 0), new ScheduledTask(41, 151, 0), new ScheduledTask(166, 248, 3), new ScheduledTask(50, 105, 1), new ScheduledTask(181, 208, 2), new ScheduledTask(261, 288, 0)};
        int[] expectedProcessorEndTimes = new int[]{288, 242, 208, 248};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 211;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 41, 0), new ScheduledTask(41, 178, 0), new ScheduledTask(44, 181, 1), new ScheduledTask(43, 166, 2), new ScheduledTask(48, 158, 3), new ScheduledTask(43, 153, 4), new ScheduledTask(43, 125, 5), new ScheduledTask(125, 180, 5), new ScheduledTask(153, 180, 4), new ScheduledTask(184, 211, 5)};
        int[] expectedProcessorEndTimes = new int[]{178, 181, 166, 158, 180, 211};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 16, 0), new ScheduledTask(23, 37, 1), new ScheduledTask(20, 34, 0), new ScheduledTask(37, 43, 1), new ScheduledTask(38, 50, 0), new ScheduledTask(43, 51, 1), new ScheduledTask(16, 20, 0), new ScheduledTask(34, 38, 0), new ScheduledTask(19, 23, 1), new ScheduledTask(52, 70, 1)};
        int[] expectedProcessorEndTimes = new int[]{50, 70};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 16, 0), new ScheduledTask(21, 35, 1), new ScheduledTask(16, 30, 0), new ScheduledTask(21, 27, 2), new ScheduledTask(23, 35, 3), new ScheduledTask(27, 35, 2), new ScheduledTask(30, 34, 0), new ScheduledTask(35, 39, 1), new ScheduledTask(19, 23, 3), new ScheduledTask(41, 59, 1)};
        int[] expectedProcessorEndTimes = new int[]{34, 59, 35, 35};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 16, 0), new ScheduledTask(16, 30, 0), new ScheduledTask(24, 38, 1), new ScheduledTask(21, 27, 2), new ScheduledTask(20, 32, 3), new ScheduledTask(19, 27, 4), new ScheduledTask(26, 30, 5), new ScheduledTask(27, 31, 2), new ScheduledTask(27, 31, 4), new ScheduledTask(39, 57, 1)};
        int[] expectedProcessorEndTimes = new int[]{30, 57, 31, 32, 31, 30};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(36, 48, 1), new ScheduledTask(22, 34, 0), new ScheduledTask(21, 27, 1), new ScheduledTask(12, 22, 0), new ScheduledTask(34, 44, 0), new ScheduledTask(14, 21, 1), new ScheduledTask(27, 33, 1), new ScheduledTask(33, 36, 1), new ScheduledTask(48, 63, 1)};
        int[] expectedProcessorEndTimes = new int[]{44, 63};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(16, 28, 1), new ScheduledTask(18, 30, 0), new ScheduledTask(12, 18, 0), new ScheduledTask(21, 31, 2), new ScheduledTask(22, 32, 3), new ScheduledTask(14, 21, 2), new ScheduledTask(28, 34, 1), new ScheduledTask(19, 22, 3), new ScheduledTask(35, 50, 1)};
        int[] expectedProcessorEndTimes = new int[]{30, 50, 31, 32};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 48;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(16, 28, 1), new ScheduledTask(18, 30, 0), new ScheduledTask(12, 18, 0), new ScheduledTask(20, 30, 2), new ScheduledTask(21, 31, 3), new ScheduledTask(14, 21, 4), new ScheduledTask(22, 28, 4), new ScheduledTask(19, 22, 5), new ScheduledTask(33, 48, 2)};
        int[] expectedProcessorEndTimes = new int[]{30, 28, 48, 31, 28, 22};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(25, 39, 0), new ScheduledTask(17, 25, 0), new ScheduledTask(13, 24, 1), new ScheduledTask(39, 49, 1), new ScheduledTask(24, 32, 1), new ScheduledTask(32, 39, 1), new ScheduledTask(39, 46, 0), new ScheduledTask(11, 17, 0), new ScheduledTask(49, 63, 1)};
        int[] expectedProcessorEndTimes = new int[]{46, 63};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 49;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(14, 28, 1), new ScheduledTask(15, 23, 2), new ScheduledTask(19, 30, 0), new ScheduledTask(13, 23, 3), new ScheduledTask(11, 19, 0), new ScheduledTask(28, 35, 1), new ScheduledTask(23, 30, 2), new ScheduledTask(23, 29, 3), new ScheduledTask(35, 49, 1)};
        int[] expectedProcessorEndTimes = new int[]{30, 49, 30, 29};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(11, 25, 0), new ScheduledTask(15, 23, 1), new ScheduledTask(13, 24, 2), new ScheduledTask(13, 23, 3), new ScheduledTask(25, 33, 0), new ScheduledTask(18, 25, 4), new ScheduledTask(19, 26, 5), new ScheduledTask(23, 29, 3), new ScheduledTask(33, 47, 0)};
        int[] expectedProcessorEndTimes = new int[]{47, 23, 24, 29, 25, 26};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 48;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 16, 0), new ScheduledTask(26, 36, 1), new ScheduledTask(5, 19, 1), new ScheduledTask(29, 43, 0), new ScheduledTask(19, 26, 1), new ScheduledTask(36, 45, 1), new ScheduledTask(16, 22, 0), new ScheduledTask(22, 29, 0), new ScheduledTask(45, 48, 1)};
        int[] expectedProcessorEndTimes = new int[]{43, 48};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 16, 0), new ScheduledTask(13, 23, 1), new ScheduledTask(5, 19, 2), new ScheduledTask(6, 20, 3), new ScheduledTask(6, 13, 1), new ScheduledTask(16, 25, 0), new ScheduledTask(23, 29, 1), new ScheduledTask(20, 27, 3), new ScheduledTask(29, 32, 1)};
        int[] expectedProcessorEndTimes = new int[]{25, 32, 19, 27};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 16, 0), new ScheduledTask(13, 23, 1), new ScheduledTask(5, 19, 2), new ScheduledTask(6, 20, 3), new ScheduledTask(6, 13, 4), new ScheduledTask(13, 22, 4), new ScheduledTask(9, 15, 5), new ScheduledTask(15, 22, 5), new ScheduledTask(26, 29, 1)};
        int[] expectedProcessorEndTimes = new int[]{16, 29, 19, 20, 22, 22};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 13, 0), new ScheduledTask(16, 27, 1), new ScheduledTask(27, 40, 1), new ScheduledTask(13, 22, 0), new ScheduledTask(40, 53, 0), new ScheduledTask(29, 40, 0), new ScheduledTask(22, 29, 0), new ScheduledTask(44, 55, 1), new ScheduledTask(40, 44, 1), new ScheduledTask(56, 61, 1)};
        int[] expectedProcessorEndTimes = new int[]{53, 61};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 13, 0), new ScheduledTask(16, 27, 1), new ScheduledTask(27, 40, 1), new ScheduledTask(13, 22, 0), new ScheduledTask(22, 35, 0), new ScheduledTask(24, 35, 2), new ScheduledTask(18, 25, 3), new ScheduledTask(25, 36, 3), new ScheduledTask(20, 24, 2), new ScheduledTask(40, 45, 1)};
        int[] expectedProcessorEndTimes = new int[]{35, 45, 35, 36};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 41;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 13, 0), new ScheduledTask(16, 27, 1), new ScheduledTask(13, 26, 0), new ScheduledTask(27, 36, 1), new ScheduledTask(18, 31, 2), new ScheduledTask(17, 28, 3), new ScheduledTask(18, 25, 4), new ScheduledTask(20, 31, 5), new ScheduledTask(25, 29, 4), new ScheduledTask(36, 41, 1)};
        int[] expectedProcessorEndTimes = new int[]{26, 41, 31, 28, 29, 31};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 74;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(20, 36, 0), new ScheduledTask(27, 41, 1), new ScheduledTask(16, 27, 1), new ScheduledTask(49, 60, 0), new ScheduledTask(41, 55, 1), new ScheduledTask(36, 49, 0), new ScheduledTask(9, 20, 0), new ScheduledTask(11, 16, 1), new ScheduledTask(60, 74, 0)};
        int[] expectedProcessorEndTimes = new int[]{74, 55};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 25, 0), new ScheduledTask(26, 40, 1), new ScheduledTask(15, 26, 1), new ScheduledTask(12, 23, 2), new ScheduledTask(18, 32, 3), new ScheduledTask(23, 36, 2), new ScheduledTask(25, 36, 0), new ScheduledTask(11, 16, 3), new ScheduledTask(41, 55, 1)};
        int[] expectedProcessorEndTimes = new int[]{36, 55, 36, 32};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 25, 0), new ScheduledTask(23, 37, 1), new ScheduledTask(15, 26, 2), new ScheduledTask(12, 23, 1), new ScheduledTask(18, 32, 3), new ScheduledTask(18, 31, 4), new ScheduledTask(19, 30, 5), new ScheduledTask(11, 16, 5), new ScheduledTask(37, 51, 1)};
        int[] expectedProcessorEndTimes = new int[]{25, 51, 26, 32, 31, 30};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(16, 29, 1), new ScheduledTask(14, 25, 0), new ScheduledTask(35, 46, 1), new ScheduledTask(25, 38, 0), new ScheduledTask(29, 35, 1), new ScheduledTask(46, 54, 1), new ScheduledTask(38, 45, 0), new ScheduledTask(45, 52, 0), new ScheduledTask(54, 67, 1)};
        int[] expectedProcessorEndTimes = new int[]{52, 67};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(16, 29, 1), new ScheduledTask(20, 31, 2), new ScheduledTask(29, 40, 3), new ScheduledTask(20, 33, 0), new ScheduledTask(14, 20, 0), new ScheduledTask(21, 29, 3), new ScheduledTask(31, 38, 2), new ScheduledTask(29, 36, 1), new ScheduledTask(40, 53, 3)};
        int[] expectedProcessorEndTimes = new int[]{33, 36, 38, 53};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(16, 29, 1), new ScheduledTask(20, 31, 2), new ScheduledTask(20, 31, 0), new ScheduledTask(21, 34, 3), new ScheduledTask(14, 20, 0), new ScheduledTask(29, 37, 1), new ScheduledTask(23, 30, 4), new ScheduledTask(24, 31, 5), new ScheduledTask(37, 50, 1)};
        int[] expectedProcessorEndTimes = new int[]{31, 50, 31, 34, 30, 31};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(37, 56, 1), new ScheduledTask(22, 39, 0), new ScheduledTask(10, 22, 0), new ScheduledTask(23, 37, 1), new ScheduledTask(9, 23, 1), new ScheduledTask(39, 46, 0), new ScheduledTask(5, 10, 0), new ScheduledTask(46, 53, 0), new ScheduledTask(56, 63, 1)};
        int[] expectedProcessorEndTimes = new int[]{53, 63};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(17, 36, 1), new ScheduledTask(5, 22, 0), new ScheduledTask(13, 25, 2), new ScheduledTask(12, 26, 3), new ScheduledTask(22, 36, 0), new ScheduledTask(10, 17, 1), new ScheduledTask(25, 30, 2), new ScheduledTask(26, 33, 3), new ScheduledTask(38, 45, 1)};
        int[] expectedProcessorEndTimes = new int[]{36, 45, 30, 33};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 41;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 24, 0), new ScheduledTask(13, 30, 1), new ScheduledTask(13, 25, 2), new ScheduledTask(12, 26, 3), new ScheduledTask(9, 23, 4), new ScheduledTask(10, 17, 5), new ScheduledTask(17, 22, 5), new ScheduledTask(22, 29, 5), new ScheduledTask(34, 41, 1)};
        int[] expectedProcessorEndTimes = new int[]{24, 41, 25, 26, 23, 29};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(19, 26, 1), new ScheduledTask(26, 36, 1), new ScheduledTask(6, 19, 1), new ScheduledTask(4, 15, 0), new ScheduledTask(23, 34, 0), new ScheduledTask(15, 23, 0), new ScheduledTask(36, 43, 1), new ScheduledTask(34, 40, 0), new ScheduledTask(43, 54, 1)};
        int[] expectedProcessorEndTimes = new int[]{40, 54};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 39;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 11, 0), new ScheduledTask(18, 28, 1), new ScheduledTask(6, 19, 2), new ScheduledTask(11, 22, 0), new ScheduledTask(7, 18, 1), new ScheduledTask(7, 15, 3), new ScheduledTask(15, 22, 3), new ScheduledTask(19, 25, 2), new ScheduledTask(28, 39, 1)};
        int[] expectedProcessorEndTimes = new int[]{22, 39, 25, 22};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 11, 0), new ScheduledTask(15, 25, 1), new ScheduledTask(6, 19, 2), new ScheduledTask(11, 22, 0), new ScheduledTask(7, 18, 3), new ScheduledTask(7, 15, 1), new ScheduledTask(11, 18, 4), new ScheduledTask(12, 18, 5), new ScheduledTask(26, 37, 1)};
        int[] expectedProcessorEndTimes = new int[]{22, 37, 19, 18, 18, 18};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot01_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.01_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 44;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(12, 25, 0), new ScheduledTask(18, 31, 1), new ScheduledTask(21, 30, 2), new ScheduledTask(16, 25, 3), new ScheduledTask(19, 28, 4), new ScheduledTask(22, 31, 5), new ScheduledTask(14, 21, 6), new ScheduledTask(18, 24, 7), new ScheduledTask(37, 44, 1)};
        int[] expectedProcessorEndTimes = new int[]{25, 44, 30, 25, 28, 31, 21, 24};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot01_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.01_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(30, 43, 0), new ScheduledTask(39, 52, 1), new ScheduledTask(12, 21, 0), new ScheduledTask(21, 30, 0), new ScheduledTask(21, 30, 1), new ScheduledTask(30, 39, 1), new ScheduledTask(14, 21, 1), new ScheduledTask(43, 49, 0), new ScheduledTask(52, 59, 1)};
        int[] expectedProcessorEndTimes = new int[]{49, 59};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot01_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.01_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(12, 25, 0), new ScheduledTask(25, 38, 0), new ScheduledTask(21, 30, 1), new ScheduledTask(16, 25, 2), new ScheduledTask(19, 28, 3), new ScheduledTask(25, 34, 2), new ScheduledTask(14, 21, 1), new ScheduledTask(28, 34, 3), new ScheduledTask(38, 45, 0)};
        int[] expectedProcessorEndTimes = new int[]{45, 30, 34, 34};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot01_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.01_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 44;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(12, 25, 0), new ScheduledTask(18, 31, 1), new ScheduledTask(21, 30, 2), new ScheduledTask(16, 25, 3), new ScheduledTask(19, 28, 4), new ScheduledTask(22, 31, 5), new ScheduledTask(14, 21, 6), new ScheduledTask(18, 24, 7), new ScheduledTask(37, 44, 1)};
        int[] expectedProcessorEndTimes = new int[]{25, 44, 30, 25, 28, 31, 21, 24};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 17, 0), new ScheduledTask(36, 50, 1), new ScheduledTask(27, 44, 0), new ScheduledTask(19, 28, 1), new ScheduledTask(24, 27, 0), new ScheduledTask(17, 24, 0), new ScheduledTask(28, 33, 1), new ScheduledTask(33, 36, 1), new ScheduledTask(44, 49, 0), new ScheduledTask(51, 67, 1)};
        int[] expectedProcessorEndTimes = new int[]{49, 67};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 17, 0), new ScheduledTask(26, 40, 1), new ScheduledTask(17, 34, 0), new ScheduledTask(19, 28, 2), new ScheduledTask(25, 28, 3), new ScheduledTask(28, 35, 3), new ScheduledTask(28, 33, 2), new ScheduledTask(33, 36, 2), new ScheduledTask(21, 26, 1), new ScheduledTask(40, 56, 1)};
        int[] expectedProcessorEndTimes = new int[]{34, 56, 36, 35};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 17, 0), new ScheduledTask(25, 39, 1), new ScheduledTask(17, 34, 0), new ScheduledTask(19, 28, 2), new ScheduledTask(25, 28, 3), new ScheduledTask(28, 35, 3), new ScheduledTask(27, 32, 4), new ScheduledTask(26, 29, 5), new ScheduledTask(29, 34, 5), new ScheduledTask(39, 55, 1)};
        int[] expectedProcessorEndTimes = new int[]{34, 55, 28, 35, 32, 34};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot84_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.84_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 33;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(14, 22, 1), new ScheduledTask(10, 19, 0), new ScheduledTask(13, 19, 2), new ScheduledTask(22, 25, 1), new ScheduledTask(8, 10, 0), new ScheduledTask(15, 20, 3), new ScheduledTask(14, 18, 4), new ScheduledTask(10, 13, 5), new ScheduledTask(26, 33, 1)};
        int[] expectedProcessorEndTimes = new int[]{19, 33, 19, 20, 18, 13};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot84_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.84_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 38;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(14, 22, 1), new ScheduledTask(19, 28, 0), new ScheduledTask(25, 31, 1), new ScheduledTask(22, 25, 1), new ScheduledTask(8, 10, 0), new ScheduledTask(14, 19, 0), new ScheduledTask(10, 14, 0), new ScheduledTask(10, 13, 1), new ScheduledTask(31, 38, 1)};
        int[] expectedProcessorEndTimes = new int[]{28, 38};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot84_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.84_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 33;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(14, 22, 1), new ScheduledTask(14, 23, 0), new ScheduledTask(13, 19, 2), new ScheduledTask(22, 25, 1), new ScheduledTask(8, 10, 0), new ScheduledTask(15, 20, 3), new ScheduledTask(10, 14, 0), new ScheduledTask(10, 13, 3), new ScheduledTask(26, 33, 1)};
        int[] expectedProcessorEndTimes = new int[]{23, 33, 19, 20};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot84_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.84_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 33;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(14, 22, 1), new ScheduledTask(10, 19, 0), new ScheduledTask(13, 19, 2), new ScheduledTask(22, 25, 1), new ScheduledTask(8, 10, 0), new ScheduledTask(15, 20, 3), new ScheduledTask(14, 18, 4), new ScheduledTask(10, 13, 5), new ScheduledTask(26, 33, 1)};
        int[] expectedProcessorEndTimes = new int[]{19, 33, 19, 20, 18, 13};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 10, 0), new ScheduledTask(10, 16, 0), new ScheduledTask(16, 23, 0), new ScheduledTask(23, 33, 0), new ScheduledTask(33, 40, 0), new ScheduledTask(40, 47, 0), new ScheduledTask(47, 53, 0), new ScheduledTask(53, 56, 0), new ScheduledTask(56, 64, 0)};
        int[] expectedProcessorEndTimes = new int[]{64};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 10, 0), new ScheduledTask(10, 16, 0), new ScheduledTask(16, 23, 0), new ScheduledTask(23, 33, 0), new ScheduledTask(33, 40, 0), new ScheduledTask(40, 47, 0), new ScheduledTask(47, 53, 0), new ScheduledTask(53, 56, 0), new ScheduledTask(56, 64, 0)};
        int[] expectedProcessorEndTimes = new int[]{64};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 10, 0), new ScheduledTask(10, 16, 0), new ScheduledTask(16, 23, 0), new ScheduledTask(23, 33, 0), new ScheduledTask(33, 40, 0), new ScheduledTask(40, 47, 0), new ScheduledTask(47, 53, 0), new ScheduledTask(53, 56, 0), new ScheduledTask(56, 64, 0)};
        int[] expectedProcessorEndTimes = new int[]{64};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_10dot01_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.01_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 15, 0), new ScheduledTask(15, 25, 0), new ScheduledTask(25, 34, 0), new ScheduledTask(34, 42, 0), new ScheduledTask(42, 50, 0), new ScheduledTask(50, 56, 0), new ScheduledTask(56, 60, 0), new ScheduledTask(60, 63, 0), new ScheduledTask(63, 69, 0)};
        int[] expectedProcessorEndTimes = new int[]{69};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_10dot01_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.01_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 15, 0), new ScheduledTask(15, 25, 0), new ScheduledTask(25, 34, 0), new ScheduledTask(34, 42, 0), new ScheduledTask(42, 50, 0), new ScheduledTask(50, 56, 0), new ScheduledTask(56, 60, 0), new ScheduledTask(60, 63, 0), new ScheduledTask(63, 69, 0)};
        int[] expectedProcessorEndTimes = new int[]{69};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_10dot01_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.01_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 15, 0), new ScheduledTask(15, 25, 0), new ScheduledTask(25, 34, 0), new ScheduledTask(34, 42, 0), new ScheduledTask(42, 50, 0), new ScheduledTask(50, 56, 0), new ScheduledTask(56, 60, 0), new ScheduledTask(60, 63, 0), new ScheduledTask(63, 69, 0)};
        int[] expectedProcessorEndTimes = new int[]{69};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_10dot01_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.01_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 15, 0), new ScheduledTask(15, 25, 0), new ScheduledTask(25, 34, 0), new ScheduledTask(34, 42, 0), new ScheduledTask(42, 50, 0), new ScheduledTask(50, 56, 0), new ScheduledTask(56, 60, 0), new ScheduledTask(60, 63, 0), new ScheduledTask(63, 69, 0)};
        int[] expectedProcessorEndTimes = new int[]{69};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_10dot02_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.02_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 15, 0), new ScheduledTask(15, 23, 0), new ScheduledTask(23, 25, 0), new ScheduledTask(25, 31, 0), new ScheduledTask(31, 40, 0), new ScheduledTask(40, 46, 0), new ScheduledTask(46, 50, 0), new ScheduledTask(50, 55, 0), new ScheduledTask(55, 63, 0)};
        int[] expectedProcessorEndTimes = new int[]{63};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_10dot02_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.02_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 15, 0), new ScheduledTask(15, 23, 0), new ScheduledTask(23, 25, 0), new ScheduledTask(25, 31, 0), new ScheduledTask(31, 40, 0), new ScheduledTask(40, 46, 0), new ScheduledTask(46, 50, 0), new ScheduledTask(50, 55, 0), new ScheduledTask(55, 63, 0)};
        int[] expectedProcessorEndTimes = new int[]{63};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_10dot02_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.02_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 15, 0), new ScheduledTask(15, 23, 0), new ScheduledTask(23, 25, 0), new ScheduledTask(25, 31, 0), new ScheduledTask(31, 40, 0), new ScheduledTask(40, 46, 0), new ScheduledTask(46, 50, 0), new ScheduledTask(50, 55, 0), new ScheduledTask(55, 63, 0)};
        int[] expectedProcessorEndTimes = new int[]{63};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 60;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 13, 0), new ScheduledTask(13, 19, 0), new ScheduledTask(19, 22, 0), new ScheduledTask(22, 27, 0), new ScheduledTask(27, 37, 0), new ScheduledTask(37, 43, 0), new ScheduledTask(43, 49, 0), new ScheduledTask(49, 58, 0), new ScheduledTask(58, 60, 0)};
        int[] expectedProcessorEndTimes = new int[]{60};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 60;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 13, 0), new ScheduledTask(13, 19, 0), new ScheduledTask(19, 22, 0), new ScheduledTask(22, 27, 0), new ScheduledTask(27, 37, 0), new ScheduledTask(37, 43, 0), new ScheduledTask(43, 49, 0), new ScheduledTask(49, 58, 0), new ScheduledTask(58, 60, 0)};
        int[] expectedProcessorEndTimes = new int[]{60};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 60;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 13, 0), new ScheduledTask(13, 19, 0), new ScheduledTask(19, 22, 0), new ScheduledTask(22, 27, 0), new ScheduledTask(27, 37, 0), new ScheduledTask(37, 43, 0), new ScheduledTask(43, 49, 0), new ScheduledTask(49, 58, 0), new ScheduledTask(58, 60, 0)};
        int[] expectedProcessorEndTimes = new int[]{60};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_10dot03_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.03_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(19, 26, 0), new ScheduledTask(26, 33, 0), new ScheduledTask(33, 35, 0), new ScheduledTask(35, 43, 0), new ScheduledTask(43, 51, 0), new ScheduledTask(51, 60, 0), new ScheduledTask(60, 68, 0), new ScheduledTask(68, 73, 0)};
        int[] expectedProcessorEndTimes = new int[]{73};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_10dot03_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.03_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(19, 26, 0), new ScheduledTask(26, 33, 0), new ScheduledTask(33, 35, 0), new ScheduledTask(35, 43, 0), new ScheduledTask(43, 51, 0), new ScheduledTask(51, 60, 0), new ScheduledTask(60, 68, 0), new ScheduledTask(68, 73, 0)};
        int[] expectedProcessorEndTimes = new int[]{73};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_10dot03_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.03_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(19, 26, 0), new ScheduledTask(26, 33, 0), new ScheduledTask(33, 35, 0), new ScheduledTask(35, 43, 0), new ScheduledTask(43, 51, 0), new ScheduledTask(51, 60, 0), new ScheduledTask(60, 68, 0), new ScheduledTask(68, 73, 0)};
        int[] expectedProcessorEndTimes = new int[]{73};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_10dot05_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.05_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 18, 0), new ScheduledTask(18, 23, 0), new ScheduledTask(23, 32, 0), new ScheduledTask(32, 40, 0), new ScheduledTask(40, 48, 0), new ScheduledTask(48, 57, 0), new ScheduledTask(57, 66, 0), new ScheduledTask(66, 71, 0), new ScheduledTask(71, 81, 0)};
        int[] expectedProcessorEndTimes = new int[]{81};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_10dot05_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.05_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 18, 0), new ScheduledTask(18, 23, 0), new ScheduledTask(23, 32, 0), new ScheduledTask(32, 40, 0), new ScheduledTask(40, 48, 0), new ScheduledTask(48, 57, 0), new ScheduledTask(57, 66, 0), new ScheduledTask(66, 71, 0), new ScheduledTask(71, 81, 0)};
        int[] expectedProcessorEndTimes = new int[]{81};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_10dot05_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.05_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 18, 0), new ScheduledTask(18, 23, 0), new ScheduledTask(23, 32, 0), new ScheduledTask(32, 40, 0), new ScheduledTask(40, 48, 0), new ScheduledTask(48, 57, 0), new ScheduledTask(57, 66, 0), new ScheduledTask(66, 71, 0), new ScheduledTask(71, 81, 0)};
        int[] expectedProcessorEndTimes = new int[]{81};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_9dot92_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_9.92_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 60;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 13, 0), new ScheduledTask(13, 15, 0), new ScheduledTask(15, 23, 0), new ScheduledTask(23, 31, 0), new ScheduledTask(31, 38, 0), new ScheduledTask(38, 43, 0), new ScheduledTask(43, 52, 0), new ScheduledTask(52, 55, 0), new ScheduledTask(55, 60, 0)};
        int[] expectedProcessorEndTimes = new int[]{60};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_9dot92_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_9.92_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 60;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 13, 0), new ScheduledTask(13, 15, 0), new ScheduledTask(15, 23, 0), new ScheduledTask(23, 31, 0), new ScheduledTask(31, 38, 0), new ScheduledTask(38, 43, 0), new ScheduledTask(43, 52, 0), new ScheduledTask(52, 55, 0), new ScheduledTask(55, 60, 0)};
        int[] expectedProcessorEndTimes = new int[]{60};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_9dot92_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_9.92_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 60;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 13, 0), new ScheduledTask(13, 15, 0), new ScheduledTask(15, 23, 0), new ScheduledTask(23, 31, 0), new ScheduledTask(31, 38, 0), new ScheduledTask(38, 43, 0), new ScheduledTask(43, 52, 0), new ScheduledTask(52, 55, 0), new ScheduledTask(55, 60, 0)};
        int[] expectedProcessorEndTimes = new int[]{60};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_9dot95_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_9.95_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 17, 0), new ScheduledTask(17, 26, 0), new ScheduledTask(26, 28, 0), new ScheduledTask(28, 34, 0), new ScheduledTask(34, 43, 0), new ScheduledTask(43, 46, 0), new ScheduledTask(46, 49, 0), new ScheduledTask(49, 57, 0), new ScheduledTask(57, 61, 0)};
        int[] expectedProcessorEndTimes = new int[]{61};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_9dot95_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_9.95_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 17, 0), new ScheduledTask(17, 26, 0), new ScheduledTask(26, 28, 0), new ScheduledTask(28, 34, 0), new ScheduledTask(34, 43, 0), new ScheduledTask(43, 46, 0), new ScheduledTask(46, 49, 0), new ScheduledTask(49, 57, 0), new ScheduledTask(57, 61, 0)};
        int[] expectedProcessorEndTimes = new int[]{61};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_9dot95_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_9.95_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 17, 0), new ScheduledTask(17, 26, 0), new ScheduledTask(26, 28, 0), new ScheduledTask(28, 34, 0), new ScheduledTask(34, 43, 0), new ScheduledTask(43, 46, 0), new ScheduledTask(46, 49, 0), new ScheduledTask(49, 57, 0), new ScheduledTask(57, 61, 0)};
        int[] expectedProcessorEndTimes = new int[]{61};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_9dot97_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_9.97_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(44, 54, 0), new ScheduledTask(40, 44, 0), new ScheduledTask(38, 40, 0), new ScheduledTask(31, 38, 0), new ScheduledTask(23, 31, 0), new ScheduledTask(15, 23, 0), new ScheduledTask(6, 15, 0), new ScheduledTask(21, 24, 1), new ScheduledTask(54, 61, 0)};
        int[] expectedProcessorEndTimes = new int[]{61, 24};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_9dot97_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_9.97_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 16, 0), new ScheduledTask(50, 54, 0), new ScheduledTask(31, 33, 0), new ScheduledTask(16, 23, 0), new ScheduledTask(42, 50, 0), new ScheduledTask(23, 31, 0), new ScheduledTask(33, 42, 0), new ScheduledTask(21, 24, 1), new ScheduledTask(54, 61, 0)};
        int[] expectedProcessorEndTimes = new int[]{61, 24};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_9dot97_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_9.97_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(23, 33, 0), new ScheduledTask(50, 54, 0), new ScheduledTask(48, 50, 0), new ScheduledTask(33, 40, 0), new ScheduledTask(6, 14, 0), new ScheduledTask(40, 48, 0), new ScheduledTask(14, 23, 0), new ScheduledTask(21, 24, 1), new ScheduledTask(54, 61, 0)};
        int[] expectedProcessorEndTimes = new int[]{61, 24};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_9dot98_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_9.98_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 10, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(19, 27, 0), new ScheduledTask(27, 37, 0), new ScheduledTask(37, 47, 0), new ScheduledTask(47, 57, 0), new ScheduledTask(57, 64, 0), new ScheduledTask(64, 74, 0), new ScheduledTask(74, 84, 0)};
        int[] expectedProcessorEndTimes = new int[]{84};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_9dot98_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_9.98_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 10, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(19, 27, 0), new ScheduledTask(27, 37, 0), new ScheduledTask(37, 47, 0), new ScheduledTask(47, 57, 0), new ScheduledTask(57, 64, 0), new ScheduledTask(64, 74, 0), new ScheduledTask(74, 84, 0)};
        int[] expectedProcessorEndTimes = new int[]{84};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_9dot98_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_9.98_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 10, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(19, 27, 0), new ScheduledTask(27, 37, 0), new ScheduledTask(37, 47, 0), new ScheduledTask(47, 57, 0), new ScheduledTask(57, 64, 0), new ScheduledTask(64, 74, 0), new ScheduledTask(74, 84, 0)};
        int[] expectedProcessorEndTimes = new int[]{84};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 13, 0), new ScheduledTask(13, 19, 0), new ScheduledTask(19, 21, 0), new ScheduledTask(21, 27, 0), new ScheduledTask(27, 29, 0), new ScheduledTask(29, 37, 0), new ScheduledTask(37, 44, 0), new ScheduledTask(44, 54, 0), new ScheduledTask(54, 64, 0)};
        int[] expectedProcessorEndTimes = new int[]{64};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 13, 0), new ScheduledTask(13, 19, 0), new ScheduledTask(19, 21, 0), new ScheduledTask(21, 27, 0), new ScheduledTask(27, 29, 0), new ScheduledTask(29, 37, 0), new ScheduledTask(37, 44, 0), new ScheduledTask(44, 54, 0), new ScheduledTask(54, 64, 0)};
        int[] expectedProcessorEndTimes = new int[]{64};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 13, 0), new ScheduledTask(13, 19, 0), new ScheduledTask(19, 21, 0), new ScheduledTask(21, 27, 0), new ScheduledTask(27, 29, 0), new ScheduledTask(29, 37, 0), new ScheduledTask(37, 44, 0), new ScheduledTask(44, 54, 0), new ScheduledTask(54, 64, 0)};
        int[] expectedProcessorEndTimes = new int[]{64};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 208;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 13, 0), new ScheduledTask(117, 182, 0), new ScheduledTask(47, 105, 1), new ScheduledTask(65, 117, 0), new ScheduledTask(13, 65, 0), new ScheduledTask(105, 144, 1), new ScheduledTask(15, 47, 1), new ScheduledTask(176, 208, 1), new ScheduledTask(144, 176, 1), new ScheduledTask(182, 208, 0)};
        int[] expectedProcessorEndTimes = new int[]{208, 208};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 117;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 13, 0), new ScheduledTask(18, 83, 1), new ScheduledTask(17, 75, 2), new ScheduledTask(65, 117, 0), new ScheduledTask(13, 65, 0), new ScheduledTask(75, 114, 2), new ScheduledTask(15, 47, 3), new ScheduledTask(79, 111, 3), new ScheduledTask(47, 79, 3), new ScheduledTask(83, 109, 1)};
        int[] expectedProcessorEndTimes = new int[]{117, 109, 114, 111};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 91;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 13, 0), new ScheduledTask(18, 83, 1), new ScheduledTask(17, 75, 2), new ScheduledTask(13, 65, 0), new ScheduledTask(15, 67, 3), new ScheduledTask(47, 86, 4), new ScheduledTask(15, 47, 4), new ScheduledTask(52, 84, 5), new ScheduledTask(20, 52, 5), new ScheduledTask(65, 91, 0)};
        int[] expectedProcessorEndTimes = new int[]{91, 83, 75, 67, 86, 84};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 307;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 22, 0), new ScheduledTask(22, 120, 0), new ScheduledTask(120, 197, 0), new ScheduledTask(26, 103, 1), new ScheduledTask(103, 169, 1), new ScheduledTask(197, 263, 0), new ScheduledTask(213, 268, 1), new ScheduledTask(263, 307, 0), new ScheduledTask(169, 213, 1), new ScheduledTask(268, 301, 1)};
        int[] expectedProcessorEndTimes = new int[]{307, 301};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 169;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 22, 0), new ScheduledTask(70, 168, 1), new ScheduledTask(29, 106, 2), new ScheduledTask(22, 99, 0), new ScheduledTask(26, 92, 3), new ScheduledTask(99, 165, 0), new ScheduledTask(106, 161, 2), new ScheduledTask(125, 169, 3), new ScheduledTask(26, 70, 1), new ScheduledTask(92, 125, 3)};
        int[] expectedProcessorEndTimes = new int[]{165, 168, 161, 169};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 132;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 22, 0), new ScheduledTask(29, 127, 1), new ScheduledTask(29, 106, 2), new ScheduledTask(26, 103, 3), new ScheduledTask(22, 88, 0), new ScheduledTask(30, 96, 4), new ScheduledTask(29, 84, 5), new ScheduledTask(84, 128, 5), new ScheduledTask(88, 132, 0), new ScheduledTask(96, 129, 4)};
        int[] expectedProcessorEndTimes = new int[]{132, 127, 106, 103, 129, 128};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 278;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 59, 0), new ScheduledTask(197, 273, 1), new ScheduledTask(219, 278, 0), new ScheduledTask(101, 160, 0), new ScheduledTask(160, 219, 0), new ScheduledTask(95, 146, 1), new ScheduledTask(59, 101, 0), new ScheduledTask(61, 95, 1), new ScheduledTask(146, 180, 1), new ScheduledTask(180, 197, 1)};
        int[] expectedProcessorEndTimes = new int[]{278, 273};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 172;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 59, 0), new ScheduledTask(93, 169, 0), new ScheduledTask(112, 171, 1), new ScheduledTask(104, 163, 2), new ScheduledTask(113, 172, 3), new ScheduledTask(62, 113, 3), new ScheduledTask(62, 104, 2), new ScheduledTask(61, 95, 1), new ScheduledTask(59, 93, 0), new ScheduledTask(95, 112, 1)};
        int[] expectedProcessorEndTimes = new int[]{169, 171, 163, 172};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 144;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 59, 0), new ScheduledTask(68, 144, 1), new ScheduledTask(82, 141, 2), new ScheduledTask(64, 123, 3), new ScheduledTask(66, 125, 4), new ScheduledTask(93, 144, 0), new ScheduledTask(62, 104, 5), new ScheduledTask(59, 93, 0), new ScheduledTask(104, 138, 5), new ScheduledTask(65, 82, 2)};
        int[] expectedProcessorEndTimes = new int[]{144, 144, 141, 123, 125, 138};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 157;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 20, 0), new ScheduledTask(82, 123, 0), new ScheduledTask(59, 100, 1), new ScheduledTask(22, 59, 1), new ScheduledTask(123, 156, 0), new ScheduledTask(49, 82, 0), new ScheduledTask(20, 49, 0), new ScheduledTask(100, 125, 1), new ScheduledTask(125, 145, 1), new ScheduledTask(145, 157, 1)};
        int[] expectedProcessorEndTimes = new int[]{156, 157};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 91;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 20, 0), new ScheduledTask(48, 89, 1), new ScheduledTask(49, 90, 0), new ScheduledTask(22, 59, 2), new ScheduledTask(56, 89, 3), new ScheduledTask(23, 56, 3), new ScheduledTask(20, 49, 0), new ScheduledTask(23, 48, 1), new ScheduledTask(59, 79, 2), new ScheduledTask(79, 91, 2)};
        int[] expectedProcessorEndTimes = new int[]{90, 89, 91, 89};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 20, 0), new ScheduledTask(20, 61, 0), new ScheduledTask(23, 64, 1), new ScheduledTask(22, 59, 2), new ScheduledTask(25, 58, 3), new ScheduledTask(23, 56, 4), new ScheduledTask(22, 51, 5), new ScheduledTask(51, 76, 5), new ScheduledTask(56, 76, 4), new ScheduledTask(58, 70, 3)};
        int[] expectedProcessorEndTimes = new int[]{61, 64, 59, 70, 76, 76};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 317;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 72, 0), new ScheduledTask(110, 200, 1), new ScheduledTask(126, 207, 0), new ScheduledTask(200, 263, 1), new ScheduledTask(207, 270, 0), new ScheduledTask(72, 126, 0), new ScheduledTask(270, 315, 0), new ScheduledTask(281, 317, 1), new ScheduledTask(74, 110, 1), new ScheduledTask(263, 281, 1)};
        int[] expectedProcessorEndTimes = new int[]{315, 317};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 72, 0), new ScheduledTask(110, 200, 1), new ScheduledTask(72, 153, 0), new ScheduledTask(131, 194, 2), new ScheduledTask(79, 142, 3), new ScheduledTask(77, 131, 2), new ScheduledTask(153, 198, 0), new ScheduledTask(160, 196, 3), new ScheduledTask(74, 110, 1), new ScheduledTask(142, 160, 3)};
        int[] expectedProcessorEndTimes = new int[]{198, 200, 194, 196};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 164;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 72, 0), new ScheduledTask(72, 162, 0), new ScheduledTask(79, 160, 1), new ScheduledTask(78, 141, 2), new ScheduledTask(79, 142, 3), new ScheduledTask(110, 164, 4), new ScheduledTask(116, 161, 5), new ScheduledTask(80, 116, 5), new ScheduledTask(74, 110, 4), new ScheduledTask(141, 159, 2)};
        int[] expectedProcessorEndTimes = new int[]{162, 160, 159, 142, 164, 161};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 273;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 17, 0), new ScheduledTask(51, 128, 0), new ScheduledTask(196, 273, 0), new ScheduledTask(19, 96, 1), new ScheduledTask(147, 215, 1), new ScheduledTask(215, 266, 1), new ScheduledTask(96, 147, 1), new ScheduledTask(17, 51, 0), new ScheduledTask(128, 162, 0), new ScheduledTask(162, 196, 0)};
        int[] expectedProcessorEndTimes = new int[]{273, 266};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 153;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 17, 0), new ScheduledTask(53, 130, 1), new ScheduledTask(70, 147, 2), new ScheduledTask(19, 96, 3), new ScheduledTask(17, 85, 0), new ScheduledTask(96, 147, 3), new ScheduledTask(19, 70, 2), new ScheduledTask(19, 53, 1), new ScheduledTask(85, 119, 0), new ScheduledTask(119, 153, 0)};
        int[] expectedProcessorEndTimes = new int[]{153, 130, 147, 147};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 119;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 17, 0), new ScheduledTask(21, 98, 1), new ScheduledTask(27, 104, 2), new ScheduledTask(19, 96, 3), new ScheduledTask(17, 85, 0), new ScheduledTask(53, 104, 4), new ScheduledTask(19, 70, 5), new ScheduledTask(19, 53, 4), new ScheduledTask(85, 119, 0), new ScheduledTask(70, 104, 5)};
        int[] expectedProcessorEndTimes = new int[]{119, 98, 104, 96, 104, 104};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 302;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 32, 0), new ScheduledTask(32, 129, 0), new ScheduledTask(129, 194, 0), new ScheduledTask(194, 259, 0), new ScheduledTask(174, 239, 1), new ScheduledTask(120, 174, 1), new ScheduledTask(239, 293, 1), new ScheduledTask(77, 120, 1), new ScheduledTask(259, 302, 0), new ScheduledTask(34, 77, 1)};
        int[] expectedProcessorEndTimes = new int[]{302, 293};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 174;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 32, 0), new ScheduledTask(77, 174, 1), new ScheduledTask(40, 105, 2), new ScheduledTask(105, 170, 2), new ScheduledTask(91, 156, 3), new ScheduledTask(37, 91, 3), new ScheduledTask(75, 129, 0), new ScheduledTask(32, 75, 0), new ScheduledTask(129, 172, 0), new ScheduledTask(34, 77, 1)};
        int[] expectedProcessorEndTimes = new int[]{172, 174, 170, 156};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 140;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 32, 0), new ScheduledTask(39, 136, 1), new ScheduledTask(40, 105, 2), new ScheduledTask(40, 105, 3), new ScheduledTask(75, 140, 0), new ScheduledTask(77, 131, 4), new ScheduledTask(40, 94, 5), new ScheduledTask(32, 75, 0), new ScheduledTask(94, 137, 5), new ScheduledTask(34, 77, 4)};
        int[] expectedProcessorEndTimes = new int[]{140, 136, 105, 105, 131, 137};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 318;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 90, 0), new ScheduledTask(238, 317, 0), new ScheduledTask(171, 250, 1), new ScheduledTask(113, 192, 0), new ScheduledTask(250, 318, 1), new ScheduledTask(126, 171, 1), new ScheduledTask(92, 126, 1), new ScheduledTask(215, 238, 0), new ScheduledTask(90, 113, 0), new ScheduledTask(192, 215, 0)};
        int[] expectedProcessorEndTimes = new int[]{317, 318};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 214;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 90, 0), new ScheduledTask(126, 205, 1), new ScheduledTask(115, 194, 2), new ScheduledTask(90, 169, 0), new ScheduledTask(142, 210, 3), new ScheduledTask(169, 214, 0), new ScheduledTask(92, 126, 1), new ScheduledTask(119, 142, 3), new ScheduledTask(92, 115, 2), new ScheduledTask(96, 119, 3)};
        int[] expectedProcessorEndTimes = new int[]{214, 205, 194, 210};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 176;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 90, 0), new ScheduledTask(90, 169, 0), new ScheduledTask(97, 176, 1), new ScheduledTask(94, 173, 2), new ScheduledTask(100, 168, 3), new ScheduledTask(94, 139, 4), new ScheduledTask(92, 126, 5), new ScheduledTask(126, 149, 5), new ScheduledTask(139, 162, 4), new ScheduledTask(149, 172, 5)};
        int[] expectedProcessorEndTimes = new int[]{169, 176, 173, 168, 162, 172};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 282;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 28, 0), new ScheduledTask(197, 282, 0), new ScheduledTask(146, 222, 1), new ScheduledTask(28, 94, 0), new ScheduledTask(222, 279, 1), new ScheduledTask(89, 146, 1), new ScheduledTask(32, 89, 1), new ScheduledTask(150, 197, 0), new ScheduledTask(94, 122, 0), new ScheduledTask(122, 150, 0)};
        int[] expectedProcessorEndTimes = new int[]{282, 279};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 164;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 28, 0), new ScheduledTask(61, 146, 1), new ScheduledTask(28, 104, 0), new ScheduledTask(31, 97, 2), new ScheduledTask(104, 161, 0), new ScheduledTask(97, 154, 2), new ScheduledTask(32, 89, 3), new ScheduledTask(117, 164, 3), new ScheduledTask(33, 61, 1), new ScheduledTask(89, 117, 3)};
        int[] expectedProcessorEndTimes = new int[]{161, 146, 154, 164};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 132;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 28, 0), new ScheduledTask(38, 123, 1), new ScheduledTask(35, 111, 2), new ScheduledTask(31, 97, 3), new ScheduledTask(75, 132, 0), new ScheduledTask(33, 90, 4), new ScheduledTask(32, 89, 5), new ScheduledTask(28, 75, 0), new ScheduledTask(97, 125, 3), new ScheduledTask(90, 118, 4)};
        int[] expectedProcessorEndTimes = new int[]{132, 123, 111, 125, 118, 89};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 9;
        int expectedScheduleEndTime = 167;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 96, 0), new ScheduledTask(100, 167, 1), new ScheduledTask(96, 163, 0), new ScheduledTask(98, 156, 2), new ScheduledTask(99, 147, 3), new ScheduledTask(99, 147, 4), new ScheduledTask(103, 151, 5), new ScheduledTask(102, 131, 6), new ScheduledTask(104, 123, 7), new ScheduledTask(105, 124, 8)};
        int[] expectedProcessorEndTimes = new int[]{163, 167, 156, 147, 147, 151, 131, 123, 124};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 96, 0), new ScheduledTask(147, 214, 1), new ScheduledTask(214, 281, 1), new ScheduledTask(96, 154, 0), new ScheduledTask(154, 202, 0), new ScheduledTask(99, 147, 1), new ScheduledTask(231, 279, 0), new ScheduledTask(202, 231, 0), new ScheduledTask(279, 298, 0), new ScheduledTask(281, 300, 1)};
        int[] expectedProcessorEndTimes = new int[]{298, 300};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 204;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 96, 0), new ScheduledTask(96, 163, 0), new ScheduledTask(131, 198, 1), new ScheduledTask(98, 156, 2), new ScheduledTask(99, 147, 3), new ScheduledTask(147, 195, 3), new ScheduledTask(156, 204, 2), new ScheduledTask(102, 131, 1), new ScheduledTask(163, 182, 0), new ScheduledTask(182, 201, 0)};
        int[] expectedProcessorEndTimes = new int[]{201, 198, 204, 195};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 167;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 96, 0), new ScheduledTask(100, 167, 1), new ScheduledTask(96, 163, 0), new ScheduledTask(98, 156, 2), new ScheduledTask(99, 147, 3), new ScheduledTask(99, 147, 4), new ScheduledTask(103, 151, 5), new ScheduledTask(102, 131, 6), new ScheduledTask(104, 123, 7), new ScheduledTask(147, 166, 3)};
        int[] expectedProcessorEndTimes = new int[]{163, 167, 156, 166, 147, 151, 131, 123};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 357;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 54, 0), new ScheduledTask(54, 151, 0), new ScheduledTask(59, 156, 1), new ScheduledTask(151, 248, 0), new ScheduledTask(156, 253, 1), new ScheduledTask(248, 335, 0), new ScheduledTask(253, 296, 1), new ScheduledTask(296, 329, 1), new ScheduledTask(329, 351, 1), new ScheduledTask(335, 357, 0)};
        int[] expectedProcessorEndTimes = new int[]{357, 351};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 238;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 54, 0), new ScheduledTask(54, 151, 0), new ScheduledTask(59, 156, 1), new ScheduledTask(63, 160, 2), new ScheduledTask(64, 161, 3), new ScheduledTask(151, 238, 0), new ScheduledTask(156, 199, 1), new ScheduledTask(160, 193, 2), new ScheduledTask(161, 183, 3), new ScheduledTask(183, 205, 3)};
        int[] expectedProcessorEndTimes = new int[]{238, 199, 193, 205};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 163;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 54, 0), new ScheduledTask(64, 161, 1), new ScheduledTask(59, 156, 2), new ScheduledTask(63, 160, 3), new ScheduledTask(64, 161, 4), new ScheduledTask(54, 141, 0), new ScheduledTask(113, 156, 5), new ScheduledTask(58, 91, 5), new ScheduledTask(91, 113, 5), new ScheduledTask(141, 163, 0)};
        int[] expectedProcessorEndTimes = new int[]{163, 161, 156, 160, 161, 156};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot98_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.98_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 28;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(18, 28, 0), new ScheduledTask(19, 28, 1), new ScheduledTask(4, 11, 1), new ScheduledTask(12, 18, 0), new ScheduledTask(6, 12, 0), new ScheduledTask(11, 15, 1), new ScheduledTask(2, 6, 0), new ScheduledTask(15, 17, 1), new ScheduledTask(17, 19, 1)};
        int[] expectedProcessorEndTimes = new int[]{28, 28};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot98_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.98_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 21;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 12, 0), new ScheduledTask(12, 21, 0), new ScheduledTask(4, 11, 1), new ScheduledTask(10, 16, 2), new ScheduledTask(7, 13, 3), new ScheduledTask(11, 15, 1), new ScheduledTask(13, 17, 3), new ScheduledTask(15, 17, 1), new ScheduledTask(16, 18, 2)};
        int[] expectedProcessorEndTimes = new int[]{21, 17, 18, 17};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot98_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.98_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 21;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 12, 0), new ScheduledTask(12, 21, 0), new ScheduledTask(4, 11, 1), new ScheduledTask(10, 16, 2), new ScheduledTask(7, 13, 3), new ScheduledTask(5, 9, 4), new ScheduledTask(4, 8, 5), new ScheduledTask(8, 10, 5), new ScheduledTask(9, 11, 4)};
        int[] expectedProcessorEndTimes = new int[]{21, 11, 16, 13, 11, 10};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 30;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 13, 0), new ScheduledTask(7, 15, 1), new ScheduledTask(13, 19, 0), new ScheduledTask(15, 21, 1), new ScheduledTask(19, 24, 0), new ScheduledTask(21, 26, 1), new ScheduledTask(24, 28, 0), new ScheduledTask(26, 30, 1), new ScheduledTask(28, 30, 0)};
        int[] expectedProcessorEndTimes = new int[]{30, 30};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 20;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(6, 15, 1), new ScheduledTask(7, 15, 2), new ScheduledTask(4, 10, 0), new ScheduledTask(10, 16, 3), new ScheduledTask(10, 15, 0), new ScheduledTask(15, 20, 0), new ScheduledTask(16, 20, 3), new ScheduledTask(6, 10, 3), new ScheduledTask(15, 17, 2)};
        int[] expectedProcessorEndTimes = new int[]{20, 15, 17, 20};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 18;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(6, 15, 1), new ScheduledTask(10, 18, 2), new ScheduledTask(6, 12, 0), new ScheduledTask(9, 15, 3), new ScheduledTask(12, 17, 4), new ScheduledTask(12, 17, 0), new ScheduledTask(14, 18, 5), new ScheduledTask(6, 10, 2), new ScheduledTask(4, 6, 0)};
        int[] expectedProcessorEndTimes = new int[]{17, 15, 18, 15, 17, 18};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot99_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.99_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 20;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 13, 0), new ScheduledTask(5, 14, 1), new ScheduledTask(10, 19, 2), new ScheduledTask(10, 19, 3), new ScheduledTask(11, 19, 4), new ScheduledTask(10, 18, 5), new ScheduledTask(13, 20, 0), new ScheduledTask(13, 19, 6), new ScheduledTask(12, 15, 7)};
        int[] expectedProcessorEndTimes = new int[]{20, 14, 19, 19, 19, 18, 19, 15};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot99_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.99_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 39;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(28, 38, 0), new ScheduledTask(5, 14, 1), new ScheduledTask(14, 23, 1), new ScheduledTask(23, 32, 1), new ScheduledTask(11, 19, 0), new ScheduledTask(3, 11, 0), new ScheduledTask(32, 39, 1), new ScheduledTask(22, 28, 0), new ScheduledTask(19, 22, 0)};
        int[] expectedProcessorEndTimes = new int[]{38, 39};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot99_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.99_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 25;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(15, 25, 0), new ScheduledTask(5, 14, 1), new ScheduledTask(3, 12, 0), new ScheduledTask(14, 23, 1), new ScheduledTask(11, 19, 2), new ScheduledTask(10, 18, 3), new ScheduledTask(18, 25, 3), new ScheduledTask(19, 25, 2), new ScheduledTask(12, 15, 0)};
        int[] expectedProcessorEndTimes = new int[]{25, 23, 25, 25};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot99_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.99_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 20;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 13, 0), new ScheduledTask(5, 14, 1), new ScheduledTask(10, 19, 2), new ScheduledTask(10, 19, 3), new ScheduledTask(11, 19, 4), new ScheduledTask(10, 18, 5), new ScheduledTask(13, 20, 0), new ScheduledTask(13, 19, 6), new ScheduledTask(12, 15, 7)};
        int[] expectedProcessorEndTimes = new int[]{20, 14, 19, 19, 19, 18, 19, 15};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 40;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(20, 30, 1), new ScheduledTask(21, 31, 0), new ScheduledTask(30, 40, 1), new ScheduledTask(31, 40, 0), new ScheduledTask(9, 17, 1), new ScheduledTask(7, 14, 0), new ScheduledTask(14, 19, 0), new ScheduledTask(17, 20, 1), new ScheduledTask(19, 21, 0)};
        int[] expectedProcessorEndTimes = new int[]{40, 40};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 27;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(17, 27, 1), new ScheduledTask(7, 17, 0), new ScheduledTask(17, 27, 2), new ScheduledTask(17, 26, 0), new ScheduledTask(9, 17, 1), new ScheduledTask(13, 20, 3), new ScheduledTask(20, 25, 3), new ScheduledTask(10, 13, 2), new ScheduledTask(25, 27, 3)};
        int[] expectedProcessorEndTimes = new int[]{26, 27, 27, 27};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 27;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(15, 25, 1), new ScheduledTask(7, 17, 0), new ScheduledTask(17, 27, 2), new ScheduledTask(17, 26, 0), new ScheduledTask(9, 17, 3), new ScheduledTask(13, 20, 4), new ScheduledTask(15, 20, 5), new ScheduledTask(10, 13, 1), new ScheduledTask(25, 27, 1)};
        int[] expectedProcessorEndTimes = new int[]{26, 27, 27, 17, 20, 20};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(20, 30, 0), new ScheduledTask(19, 28, 1), new ScheduledTask(28, 37, 1), new ScheduledTask(10, 18, 0), new ScheduledTask(15, 19, 1), new ScheduledTask(32, 36, 0), new ScheduledTask(12, 15, 1), new ScheduledTask(18, 20, 0), new ScheduledTask(30, 32, 0)};
        int[] expectedProcessorEndTimes = new int[]{36, 37};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 20, 0), new ScheduledTask(17, 26, 1), new ScheduledTask(20, 29, 0), new ScheduledTask(14, 22, 2), new ScheduledTask(15, 19, 3), new ScheduledTask(20, 24, 3), new ScheduledTask(22, 25, 2), new ScheduledTask(24, 26, 3), new ScheduledTask(25, 27, 2)};
        int[] expectedProcessorEndTimes = new int[]{29, 26, 27, 26};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 20, 0), new ScheduledTask(17, 26, 1), new ScheduledTask(20, 29, 0), new ScheduledTask(14, 22, 2), new ScheduledTask(15, 19, 3), new ScheduledTask(20, 24, 3), new ScheduledTask(12, 15, 4), new ScheduledTask(14, 16, 5), new ScheduledTask(19, 21, 4)};
        int[] expectedProcessorEndTimes = new int[]{29, 26, 22, 24, 21, 16};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 44;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(17, 28, 1), new ScheduledTask(34, 43, 0), new ScheduledTask(11, 20, 0), new ScheduledTask(31, 40, 1), new ScheduledTask(20, 28, 0), new ScheduledTask(28, 34, 0), new ScheduledTask(40, 44, 1), new ScheduledTask(28, 31, 1), new ScheduledTask(15, 17, 1)};
        int[] expectedProcessorEndTimes = new int[]{43, 44};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 34;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(11, 22, 0), new ScheduledTask(25, 34, 0), new ScheduledTask(20, 29, 1), new ScheduledTask(20, 29, 2), new ScheduledTask(20, 28, 3), new ScheduledTask(28, 34, 3), new ScheduledTask(29, 33, 1), new ScheduledTask(22, 25, 0), new ScheduledTask(15, 17, 1)};
        int[] expectedProcessorEndTimes = new int[]{34, 33, 29, 34};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(17, 28, 1), new ScheduledTask(16, 25, 0), new ScheduledTask(20, 29, 2), new ScheduledTask(20, 29, 3), new ScheduledTask(20, 28, 4), new ScheduledTask(20, 26, 5), new ScheduledTask(25, 29, 0), new ScheduledTask(13, 16, 0), new ScheduledTask(11, 13, 0)};
        int[] expectedProcessorEndTimes = new int[]{29, 28, 29, 29, 28, 26};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 38;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(28, 38, 0), new ScheduledTask(13, 22, 0), new ScheduledTask(7, 16, 1), new ScheduledTask(4, 13, 0), new ScheduledTask(22, 30, 1), new ScheduledTask(30, 38, 1), new ScheduledTask(16, 22, 1), new ScheduledTask(22, 26, 0), new ScheduledTask(26, 28, 0)};
        int[] expectedProcessorEndTimes = new int[]{38, 38};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 24;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(13, 23, 0), new ScheduledTask(4, 13, 0), new ScheduledTask(7, 16, 1), new ScheduledTask(9, 18, 2), new ScheduledTask(14, 22, 3), new ScheduledTask(16, 24, 1), new ScheduledTask(8, 14, 3), new ScheduledTask(18, 22, 2), new ScheduledTask(22, 24, 2)};
        int[] expectedProcessorEndTimes = new int[]{23, 24, 24, 22};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 22;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 14, 0), new ScheduledTask(12, 21, 1), new ScheduledTask(7, 16, 2), new ScheduledTask(9, 18, 3), new ScheduledTask(12, 20, 4), new ScheduledTask(14, 22, 0), new ScheduledTask(8, 14, 5), new ScheduledTask(14, 18, 5), new ScheduledTask(16, 18, 2)};
        int[] expectedProcessorEndTimes = new int[]{22, 21, 18, 18, 20, 18};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot02_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.02_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(20, 29, 1), new ScheduledTask(5, 14, 1), new ScheduledTask(3, 10, 0), new ScheduledTask(22, 29, 0), new ScheduledTask(10, 17, 0), new ScheduledTask(14, 18, 1), new ScheduledTask(17, 20, 0), new ScheduledTask(20, 22, 0), new ScheduledTask(18, 20, 1)};
        int[] expectedProcessorEndTimes = new int[]{29, 29};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot02_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.02_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 19;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 12, 0), new ScheduledTask(5, 14, 1), new ScheduledTask(6, 13, 2), new ScheduledTask(12, 19, 0), new ScheduledTask(8, 15, 3), new ScheduledTask(13, 17, 2), new ScheduledTask(14, 17, 1), new ScheduledTask(15, 17, 3), new ScheduledTask(17, 19, 1)};
        int[] expectedProcessorEndTimes = new int[]{19, 19, 17, 17};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot02_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.02_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 19;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 12, 0), new ScheduledTask(5, 14, 1), new ScheduledTask(6, 13, 2), new ScheduledTask(12, 19, 0), new ScheduledTask(8, 15, 3), new ScheduledTask(9, 13, 4), new ScheduledTask(9, 12, 5), new ScheduledTask(12, 14, 5), new ScheduledTask(13, 15, 2)};
        int[] expectedProcessorEndTimes = new int[]{19, 14, 15, 15, 13, 14};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 40;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(22, 32, 1), new ScheduledTask(25, 34, 0), new ScheduledTask(13, 22, 1), new ScheduledTask(14, 22, 0), new ScheduledTask(34, 39, 0), new ScheduledTask(35, 40, 1), new ScheduledTask(10, 14, 0), new ScheduledTask(32, 35, 1), new ScheduledTask(22, 25, 0)};
        int[] expectedProcessorEndTimes = new int[]{39, 40};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 27;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(17, 27, 1), new ScheduledTask(10, 19, 0), new ScheduledTask(13, 22, 2), new ScheduledTask(14, 22, 3), new ScheduledTask(22, 27, 2), new ScheduledTask(22, 27, 0), new ScheduledTask(13, 17, 1), new ScheduledTask(19, 22, 0), new ScheduledTask(22, 25, 3)};
        int[] expectedProcessorEndTimes = new int[]{27, 27, 27, 25};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 26;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(16, 26, 1), new ScheduledTask(10, 19, 0), new ScheduledTask(13, 22, 2), new ScheduledTask(14, 22, 3), new ScheduledTask(21, 26, 4), new ScheduledTask(19, 24, 0), new ScheduledTask(13, 17, 5), new ScheduledTask(22, 25, 2), new ScheduledTask(22, 25, 3)};
        int[] expectedProcessorEndTimes = new int[]{24, 26, 25, 25, 26, 17};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot04_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.04_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 41;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(19, 29, 1), new ScheduledTask(24, 34, 0), new ScheduledTask(15, 24, 0), new ScheduledTask(29, 37, 1), new ScheduledTask(34, 41, 0), new ScheduledTask(8, 15, 0), new ScheduledTask(12, 17, 1), new ScheduledTask(37, 41, 1), new ScheduledTask(17, 19, 1)};
        int[] expectedProcessorEndTimes = new int[]{41, 41};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot04_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.04_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 28;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(17, 27, 1), new ScheduledTask(17, 27, 2), new ScheduledTask(19, 28, 3), new ScheduledTask(8, 16, 0), new ScheduledTask(16, 23, 0), new ScheduledTask(12, 19, 3), new ScheduledTask(12, 17, 1), new ScheduledTask(23, 27, 0), new ScheduledTask(12, 14, 2)};
        int[] expectedProcessorEndTimes = new int[]{27, 27, 27, 28};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot04_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.04_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 27;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(16, 26, 1), new ScheduledTask(17, 27, 2), new ScheduledTask(13, 22, 3), new ScheduledTask(8, 16, 0), new ScheduledTask(16, 23, 0), new ScheduledTask(12, 19, 4), new ScheduledTask(12, 17, 5), new ScheduledTask(23, 27, 0), new ScheduledTask(12, 14, 1)};
        int[] expectedProcessorEndTimes = new int[]{27, 26, 27, 22, 19, 17};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot09_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.09_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 30;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 12, 0), new ScheduledTask(18, 26, 0), new ScheduledTask(12, 19, 1), new ScheduledTask(24, 30, 1), new ScheduledTask(12, 18, 0), new ScheduledTask(19, 24, 1), new ScheduledTask(26, 30, 0), new ScheduledTask(7, 10, 1), new ScheduledTask(10, 12, 1)};
        int[] expectedProcessorEndTimes = new int[]{30, 30};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot09_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.09_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 19;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(6, 15, 1), new ScheduledTask(5, 13, 0), new ScheduledTask(10, 17, 2), new ScheduledTask(13, 19, 0), new ScheduledTask(7, 13, 3), new ScheduledTask(13, 18, 3), new ScheduledTask(15, 19, 1), new ScheduledTask(7, 10, 2), new ScheduledTask(3, 5, 0)};
        int[] expectedProcessorEndTimes = new int[]{19, 19, 17, 18};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot09_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.09_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 17;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(6, 15, 1), new ScheduledTask(3, 11, 0), new ScheduledTask(10, 17, 2), new ScheduledTask(11, 17, 0), new ScheduledTask(7, 13, 3), new ScheduledTask(10, 15, 4), new ScheduledTask(12, 16, 5), new ScheduledTask(7, 10, 2), new ScheduledTask(15, 17, 1)};
        int[] expectedProcessorEndTimes = new int[]{17, 17, 17, 13, 15, 16};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 34;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(13, 23, 1), new ScheduledTask(16, 26, 2), new ScheduledTask(25, 34, 3), new ScheduledTask(22, 31, 0), new ScheduledTask(7, 16, 0), new ScheduledTask(23, 31, 1), new ScheduledTask(16, 22, 0), new ScheduledTask(22, 26, 4), new ScheduledTask(19, 23, 5)};
        int[] expectedProcessorEndTimes = new int[]{31, 31, 26, 34, 26, 23};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(13, 23, 1), new ScheduledTask(7, 17, 0), new ScheduledTask(17, 26, 0), new ScheduledTask(35, 44, 0), new ScheduledTask(26, 35, 0), new ScheduledTask(27, 35, 1), new ScheduledTask(39, 45, 1), new ScheduledTask(35, 39, 1), new ScheduledTask(23, 27, 1)};
        int[] expectedProcessorEndTimes = new int[]{44, 45};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 34;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(13, 23, 1), new ScheduledTask(16, 26, 2), new ScheduledTask(25, 34, 1), new ScheduledTask(22, 31, 0), new ScheduledTask(7, 16, 0), new ScheduledTask(26, 34, 2), new ScheduledTask(16, 22, 0), new ScheduledTask(23, 27, 3), new ScheduledTask(19, 23, 3)};
        int[] expectedProcessorEndTimes = new int[]{31, 34, 34, 27};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 34;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(13, 23, 1), new ScheduledTask(16, 26, 2), new ScheduledTask(25, 34, 1), new ScheduledTask(22, 31, 0), new ScheduledTask(7, 16, 0), new ScheduledTask(22, 30, 3), new ScheduledTask(16, 22, 0), new ScheduledTask(22, 26, 4), new ScheduledTask(19, 23, 5)};
        int[] expectedProcessorEndTimes = new int[]{31, 34, 26, 30, 26, 23};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(17, 26, 1), new ScheduledTask(2, 11, 0), new ScheduledTask(15, 22, 0), new ScheduledTask(22, 26, 0), new ScheduledTask(26, 29, 0), new ScheduledTask(26, 29, 1), new ScheduledTask(29, 31, 0), new ScheduledTask(11, 13, 0), new ScheduledTask(13, 15, 0)};
        int[] expectedProcessorEndTimes = new int[]{31, 29};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(17, 26, 1), new ScheduledTask(2, 11, 0), new ScheduledTask(15, 22, 0), new ScheduledTask(22, 26, 0), new ScheduledTask(26, 29, 0), new ScheduledTask(17, 20, 2), new ScheduledTask(29, 31, 0), new ScheduledTask(11, 13, 0), new ScheduledTask(13, 15, 0)};
        int[] expectedProcessorEndTimes = new int[]{31, 26, 20};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(17, 26, 1), new ScheduledTask(2, 11, 0), new ScheduledTask(15, 22, 0), new ScheduledTask(22, 26, 0), new ScheduledTask(26, 29, 0), new ScheduledTask(17, 20, 2), new ScheduledTask(29, 31, 0), new ScheduledTask(11, 13, 0), new ScheduledTask(13, 15, 0)};
        int[] expectedProcessorEndTimes = new int[]{31, 26, 20};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(30, 40, 0), new ScheduledTask(10, 20, 0), new ScheduledTask(20, 27, 0), new ScheduledTask(54, 61, 0), new ScheduledTask(52, 59, 1), new ScheduledTask(49, 54, 0), new ScheduledTask(40, 45, 0), new ScheduledTask(45, 49, 0), new ScheduledTask(27, 30, 0)};
        int[] expectedProcessorEndTimes = new int[]{61, 59};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(30, 40, 0), new ScheduledTask(10, 20, 0), new ScheduledTask(20, 27, 0), new ScheduledTask(54, 61, 0), new ScheduledTask(52, 59, 1), new ScheduledTask(49, 54, 0), new ScheduledTask(40, 45, 0), new ScheduledTask(45, 49, 0), new ScheduledTask(27, 30, 0)};
        int[] expectedProcessorEndTimes = new int[]{61, 59};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(30, 40, 0), new ScheduledTask(10, 20, 0), new ScheduledTask(20, 27, 0), new ScheduledTask(54, 61, 0), new ScheduledTask(52, 59, 1), new ScheduledTask(49, 54, 0), new ScheduledTask(40, 45, 0), new ScheduledTask(45, 49, 0), new ScheduledTask(27, 30, 0)};
        int[] expectedProcessorEndTimes = new int[]{61, 59};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 16, 0), new ScheduledTask(16, 26, 0), new ScheduledTask(26, 36, 0), new ScheduledTask(36, 45, 0), new ScheduledTask(36, 44, 1), new ScheduledTask(45, 52, 0), new ScheduledTask(52, 57, 0), new ScheduledTask(57, 61, 0), new ScheduledTask(51, 55, 1)};
        int[] expectedProcessorEndTimes = new int[]{61, 55};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 16, 0), new ScheduledTask(16, 26, 0), new ScheduledTask(26, 36, 0), new ScheduledTask(36, 45, 0), new ScheduledTask(36, 44, 1), new ScheduledTask(45, 52, 0), new ScheduledTask(52, 57, 0), new ScheduledTask(57, 61, 0), new ScheduledTask(51, 55, 1)};
        int[] expectedProcessorEndTimes = new int[]{61, 55};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 16, 0), new ScheduledTask(16, 26, 0), new ScheduledTask(26, 36, 0), new ScheduledTask(36, 45, 0), new ScheduledTask(36, 44, 1), new ScheduledTask(45, 52, 0), new ScheduledTask(52, 57, 0), new ScheduledTask(57, 61, 0), new ScheduledTask(51, 55, 1)};
        int[] expectedProcessorEndTimes = new int[]{61, 55};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(15, 25, 0), new ScheduledTask(41, 51, 0), new ScheduledTask(25, 35, 0), new ScheduledTask(51, 59, 1), new ScheduledTask(51, 58, 0), new ScheduledTask(58, 65, 0), new ScheduledTask(9, 15, 0), new ScheduledTask(37, 43, 1), new ScheduledTask(35, 41, 0)};
        int[] expectedProcessorEndTimes = new int[]{65, 59};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(15, 25, 0), new ScheduledTask(41, 51, 0), new ScheduledTask(25, 35, 0), new ScheduledTask(51, 59, 1), new ScheduledTask(51, 58, 0), new ScheduledTask(58, 65, 0), new ScheduledTask(9, 15, 0), new ScheduledTask(37, 43, 2), new ScheduledTask(35, 41, 0)};
        int[] expectedProcessorEndTimes = new int[]{65, 59, 43};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(15, 25, 0), new ScheduledTask(41, 51, 0), new ScheduledTask(25, 35, 0), new ScheduledTask(51, 59, 1), new ScheduledTask(51, 58, 0), new ScheduledTask(58, 65, 0), new ScheduledTask(9, 15, 0), new ScheduledTask(37, 43, 2), new ScheduledTask(35, 41, 0)};
        int[] expectedProcessorEndTimes = new int[]{65, 59, 43};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(10, 20, 0), new ScheduledTask(41, 50, 1), new ScheduledTask(24, 33, 0), new ScheduledTask(33, 41, 0), new ScheduledTask(41, 48, 0), new ScheduledTask(50, 56, 1), new ScheduledTask(5, 10, 0), new ScheduledTask(20, 24, 0), new ScheduledTask(48, 51, 0)};
        int[] expectedProcessorEndTimes = new int[]{51, 56};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(10, 20, 0), new ScheduledTask(41, 50, 1), new ScheduledTask(24, 33, 0), new ScheduledTask(33, 41, 0), new ScheduledTask(41, 48, 0), new ScheduledTask(41, 47, 2), new ScheduledTask(5, 10, 0), new ScheduledTask(20, 24, 0), new ScheduledTask(48, 51, 0)};
        int[] expectedProcessorEndTimes = new int[]{51, 50, 47};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(10, 20, 0), new ScheduledTask(41, 50, 1), new ScheduledTask(24, 33, 0), new ScheduledTask(33, 41, 0), new ScheduledTask(41, 48, 0), new ScheduledTask(41, 47, 2), new ScheduledTask(5, 10, 0), new ScheduledTask(20, 24, 0), new ScheduledTask(48, 51, 0)};
        int[] expectedProcessorEndTimes = new int[]{51, 50, 47};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(16, 26, 0), new ScheduledTask(30, 39, 0), new ScheduledTask(38, 47, 1), new ScheduledTask(38, 44, 2), new ScheduledTask(27, 32, 3), new ScheduledTask(6, 11, 0), new ScheduledTask(26, 30, 0), new ScheduledTask(11, 14, 0), new ScheduledTask(14, 16, 0)};
        int[] expectedProcessorEndTimes = new int[]{39, 47, 44, 32};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(22, 32, 0), new ScheduledTask(36, 45, 0), new ScheduledTask(38, 47, 1), new ScheduledTask(6, 12, 0), new ScheduledTask(27, 32, 1), new ScheduledTask(12, 17, 0), new ScheduledTask(32, 36, 0), new ScheduledTask(17, 20, 0), new ScheduledTask(20, 22, 0)};
        int[] expectedProcessorEndTimes = new int[]{45, 47};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(16, 26, 0), new ScheduledTask(30, 39, 0), new ScheduledTask(38, 47, 1), new ScheduledTask(38, 44, 2), new ScheduledTask(27, 32, 3), new ScheduledTask(6, 11, 0), new ScheduledTask(26, 30, 0), new ScheduledTask(11, 14, 0), new ScheduledTask(14, 16, 0)};
        int[] expectedProcessorEndTimes = new int[]{39, 47, 44, 32};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(16, 26, 0), new ScheduledTask(30, 39, 0), new ScheduledTask(38, 47, 1), new ScheduledTask(38, 44, 2), new ScheduledTask(27, 32, 3), new ScheduledTask(6, 11, 0), new ScheduledTask(26, 30, 0), new ScheduledTask(11, 14, 0), new ScheduledTask(14, 16, 0)};
        int[] expectedProcessorEndTimes = new int[]{39, 47, 44, 32};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 33;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(24, 31, 0), new ScheduledTask(15, 22, 0), new ScheduledTask(6, 12, 0), new ScheduledTask(22, 27, 1), new ScheduledTask(12, 15, 0), new ScheduledTask(3, 6, 0), new ScheduledTask(29, 32, 1), new ScheduledTask(22, 24, 0), new ScheduledTask(31, 33, 0)};
        int[] expectedProcessorEndTimes = new int[]{33, 32};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 33;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(24, 31, 0), new ScheduledTask(15, 22, 0), new ScheduledTask(6, 12, 0), new ScheduledTask(22, 27, 1), new ScheduledTask(12, 15, 0), new ScheduledTask(3, 6, 0), new ScheduledTask(29, 32, 2), new ScheduledTask(22, 24, 0), new ScheduledTask(31, 33, 0)};
        int[] expectedProcessorEndTimes = new int[]{33, 27, 32};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 33;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(24, 31, 0), new ScheduledTask(15, 22, 0), new ScheduledTask(6, 12, 0), new ScheduledTask(22, 27, 1), new ScheduledTask(12, 15, 0), new ScheduledTask(3, 6, 0), new ScheduledTask(29, 32, 2), new ScheduledTask(22, 24, 0), new ScheduledTask(31, 33, 0)};
        int[] expectedProcessorEndTimes = new int[]{33, 27, 32};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(46, 56, 0), new ScheduledTask(8, 17, 0), new ScheduledTask(56, 65, 0), new ScheduledTask(25, 33, 0), new ScheduledTask(44, 52, 1), new ScheduledTask(17, 25, 0), new ScheduledTask(33, 40, 0), new ScheduledTask(40, 46, 0), new ScheduledTask(52, 54, 1)};
        int[] expectedProcessorEndTimes = new int[]{65, 54};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(46, 56, 0), new ScheduledTask(8, 17, 0), new ScheduledTask(56, 65, 0), new ScheduledTask(25, 33, 0), new ScheduledTask(44, 52, 1), new ScheduledTask(17, 25, 0), new ScheduledTask(33, 40, 0), new ScheduledTask(40, 46, 0), new ScheduledTask(44, 46, 2)};
        int[] expectedProcessorEndTimes = new int[]{65, 52, 46};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(46, 56, 0), new ScheduledTask(8, 17, 0), new ScheduledTask(56, 65, 0), new ScheduledTask(25, 33, 0), new ScheduledTask(44, 52, 1), new ScheduledTask(17, 25, 0), new ScheduledTask(33, 40, 0), new ScheduledTask(40, 46, 0), new ScheduledTask(44, 46, 2)};
        int[] expectedProcessorEndTimes = new int[]{65, 52, 46};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_9dot97_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_9.97_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(42, 52, 1), new ScheduledTask(20, 28, 0), new ScheduledTask(43, 51, 0), new ScheduledTask(35, 43, 0), new ScheduledTask(28, 35, 0), new ScheduledTask(4, 11, 0), new ScheduledTask(14, 20, 0), new ScheduledTask(29, 33, 1), new ScheduledTask(11, 14, 0)};
        int[] expectedProcessorEndTimes = new int[]{51, 52};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_9dot97_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_9.97_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(42, 52, 1), new ScheduledTask(13, 21, 0), new ScheduledTask(36, 44, 0), new ScheduledTask(28, 36, 0), new ScheduledTask(21, 28, 0), new ScheduledTask(29, 36, 2), new ScheduledTask(7, 13, 0), new ScheduledTask(29, 33, 3), new ScheduledTask(4, 7, 0)};
        int[] expectedProcessorEndTimes = new int[]{44, 52, 36, 33};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_9dot97_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_9.97_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(42, 52, 1), new ScheduledTask(13, 21, 0), new ScheduledTask(36, 44, 0), new ScheduledTask(28, 36, 0), new ScheduledTask(21, 28, 0), new ScheduledTask(29, 36, 2), new ScheduledTask(7, 13, 0), new ScheduledTask(29, 33, 3), new ScheduledTask(4, 7, 0)};
        int[] expectedProcessorEndTimes = new int[]{44, 52, 36, 33};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_9dot98_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_9.98_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(12, 21, 0), new ScheduledTask(26, 35, 0), new ScheduledTask(36, 44, 1), new ScheduledTask(5, 12, 0), new ScheduledTask(47, 53, 1), new ScheduledTask(40, 46, 0), new ScheduledTask(46, 51, 0), new ScheduledTask(21, 26, 0), new ScheduledTask(35, 40, 0)};
        int[] expectedProcessorEndTimes = new int[]{51, 53};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_9dot98_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_9.98_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(12, 21, 0), new ScheduledTask(26, 35, 0), new ScheduledTask(36, 44, 1), new ScheduledTask(5, 12, 0), new ScheduledTask(47, 53, 2), new ScheduledTask(40, 46, 0), new ScheduledTask(46, 51, 0), new ScheduledTask(21, 26, 0), new ScheduledTask(35, 40, 0)};
        int[] expectedProcessorEndTimes = new int[]{51, 44, 53};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_9dot98_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_9.98_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(12, 21, 0), new ScheduledTask(26, 35, 0), new ScheduledTask(36, 44, 1), new ScheduledTask(5, 12, 0), new ScheduledTask(47, 53, 2), new ScheduledTask(40, 46, 0), new ScheduledTask(46, 51, 0), new ScheduledTask(21, 26, 0), new ScheduledTask(35, 40, 0)};
        int[] expectedProcessorEndTimes = new int[]{51, 44, 53};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(37, 47, 0), new ScheduledTask(45, 54, 1), new ScheduledTask(27, 34, 0), new ScheduledTask(7, 14, 0), new ScheduledTask(20, 27, 0), new ScheduledTask(14, 20, 0), new ScheduledTask(4, 7, 0), new ScheduledTask(34, 37, 0), new ScheduledTask(47, 49, 0)};
        int[] expectedProcessorEndTimes = new int[]{49, 54};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(34, 44, 0), new ScheduledTask(45, 54, 1), new ScheduledTask(24, 31, 0), new ScheduledTask(4, 11, 0), new ScheduledTask(17, 24, 0), new ScheduledTask(11, 17, 0), new ScheduledTask(45, 48, 2), new ScheduledTask(31, 34, 0), new ScheduledTask(44, 46, 0)};
        int[] expectedProcessorEndTimes = new int[]{46, 54, 48};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(34, 44, 0), new ScheduledTask(45, 54, 1), new ScheduledTask(24, 31, 0), new ScheduledTask(4, 11, 0), new ScheduledTask(17, 24, 0), new ScheduledTask(11, 17, 0), new ScheduledTask(45, 48, 2), new ScheduledTask(31, 34, 0), new ScheduledTask(44, 46, 0)};
        int[] expectedProcessorEndTimes = new int[]{46, 54, 48};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 30;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(10, 18, 0), new ScheduledTask(10, 17, 1), new ScheduledTask(17, 23, 1), new ScheduledTask(18, 23, 0), new ScheduledTask(23, 27, 0), new ScheduledTask(23, 27, 1), new ScheduledTask(27, 30, 0), new ScheduledTask(27, 29, 1)};
        int[] expectedProcessorEndTimes = new int[]{30, 29};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 15;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 8, 2), new ScheduledTask(0, 7, 3), new ScheduledTask(8, 14, 2), new ScheduledTask(10, 15, 0), new ScheduledTask(7, 11, 3), new ScheduledTask(11, 15, 3), new ScheduledTask(10, 13, 1), new ScheduledTask(13, 15, 1)};
        int[] expectedProcessorEndTimes = new int[]{15, 15, 14, 15};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 10;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 8, 2), new ScheduledTask(0, 7, 3), new ScheduledTask(0, 6, 4), new ScheduledTask(0, 5, 5), new ScheduledTask(5, 9, 5), new ScheduledTask(6, 10, 4), new ScheduledTask(7, 10, 3), new ScheduledTask(8, 10, 2)};
        int[] expectedProcessorEndTimes = new int[]{10, 10, 10, 10, 10, 9};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(9, 18, 0), new ScheduledTask(9, 18, 1), new ScheduledTask(18, 26, 0), new ScheduledTask(18, 25, 1), new ScheduledTask(25, 29, 1), new ScheduledTask(26, 29, 0), new ScheduledTask(29, 31, 0), new ScheduledTask(29, 31, 1)};
        int[] expectedProcessorEndTimes = new int[]{31, 31};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 17;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(0, 9, 2), new ScheduledTask(0, 9, 3), new ScheduledTask(9, 17, 0), new ScheduledTask(9, 16, 1), new ScheduledTask(9, 13, 2), new ScheduledTask(9, 12, 3), new ScheduledTask(12, 14, 3), new ScheduledTask(13, 15, 2)};
        int[] expectedProcessorEndTimes = new int[]{17, 16, 15, 14};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 11;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(0, 9, 2), new ScheduledTask(0, 9, 3), new ScheduledTask(0, 8, 4), new ScheduledTask(0, 7, 5), new ScheduledTask(7, 11, 5), new ScheduledTask(8, 11, 4), new ScheduledTask(9, 11, 0), new ScheduledTask(9, 11, 1)};
        int[] expectedProcessorEndTimes = new int[]{11, 11, 9, 9, 11, 11};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 33;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(10, 20, 0), new ScheduledTask(10, 19, 1), new ScheduledTask(19, 25, 1), new ScheduledTask(20, 26, 0), new ScheduledTask(25, 29, 1), new ScheduledTask(26, 30, 0), new ScheduledTask(29, 32, 1), new ScheduledTask(30, 33, 0)};
        int[] expectedProcessorEndTimes = new int[]{33, 32};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 17;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 9, 3), new ScheduledTask(9, 15, 3), new ScheduledTask(10, 16, 0), new ScheduledTask(10, 14, 1), new ScheduledTask(10, 14, 2), new ScheduledTask(14, 17, 1), new ScheduledTask(14, 17, 2)};
        int[] expectedProcessorEndTimes = new int[]{16, 17, 17, 15};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 12;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 9, 3), new ScheduledTask(0, 6, 4), new ScheduledTask(6, 12, 4), new ScheduledTask(0, 4, 5), new ScheduledTask(4, 8, 5), new ScheduledTask(9, 12, 3), new ScheduledTask(8, 11, 5)};
        int[] expectedProcessorEndTimes = new int[]{10, 10, 10, 12, 12, 11};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(9, 16, 0), new ScheduledTask(9, 16, 1), new ScheduledTask(16, 22, 0), new ScheduledTask(16, 21, 1), new ScheduledTask(21, 26, 1), new ScheduledTask(22, 27, 0), new ScheduledTask(26, 31, 1), new ScheduledTask(27, 30, 0)};
        int[] expectedProcessorEndTimes = new int[]{30, 31};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 16;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(9, 16, 0), new ScheduledTask(0, 7, 2), new ScheduledTask(0, 6, 3), new ScheduledTask(9, 14, 1), new ScheduledTask(7, 12, 2), new ScheduledTask(6, 11, 3), new ScheduledTask(11, 16, 3), new ScheduledTask(12, 15, 2)};
        int[] expectedProcessorEndTimes = new int[]{16, 14, 15, 16};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 12;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(0, 7, 2), new ScheduledTask(0, 7, 3), new ScheduledTask(0, 6, 4), new ScheduledTask(0, 5, 5), new ScheduledTask(5, 10, 5), new ScheduledTask(6, 11, 4), new ScheduledTask(7, 12, 2), new ScheduledTask(7, 10, 3)};
        int[] expectedProcessorEndTimes = new int[]{9, 9, 12, 10, 11, 10};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 30;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(8, 16, 1), new ScheduledTask(10, 16, 0), new ScheduledTask(16, 22, 0), new ScheduledTask(16, 22, 1), new ScheduledTask(22, 27, 0), new ScheduledTask(22, 27, 1), new ScheduledTask(27, 30, 0), new ScheduledTask(27, 29, 1)};
        int[] expectedProcessorEndTimes = new int[]{30, 29};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 15;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(0, 8, 2), new ScheduledTask(0, 6, 3), new ScheduledTask(6, 12, 3), new ScheduledTask(8, 14, 1), new ScheduledTask(8, 13, 2), new ScheduledTask(10, 15, 0), new ScheduledTask(12, 15, 3), new ScheduledTask(13, 15, 2)};
        int[] expectedProcessorEndTimes = new int[]{15, 14, 15, 15};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 11;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(0, 8, 2), new ScheduledTask(0, 6, 3), new ScheduledTask(0, 6, 4), new ScheduledTask(0, 6, 5), new ScheduledTask(6, 11, 3), new ScheduledTask(6, 11, 4), new ScheduledTask(6, 9, 5), new ScheduledTask(8, 10, 1)};
        int[] expectedProcessorEndTimes = new int[]{10, 10, 8, 11, 11, 9};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 24;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(7, 13, 1), new ScheduledTask(9, 15, 0), new ScheduledTask(13, 18, 1), new ScheduledTask(15, 19, 0), new ScheduledTask(18, 21, 1), new ScheduledTask(19, 22, 0), new ScheduledTask(21, 23, 1), new ScheduledTask(22, 24, 0)};
        int[] expectedProcessorEndTimes = new int[]{24, 23};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 12;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(0, 6, 2), new ScheduledTask(0, 6, 3), new ScheduledTask(6, 11, 2), new ScheduledTask(6, 10, 3), new ScheduledTask(7, 10, 1), new ScheduledTask(9, 12, 0), new ScheduledTask(10, 12, 1), new ScheduledTask(10, 12, 3)};
        int[] expectedProcessorEndTimes = new int[]{12, 12, 11, 12};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 9;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(0, 6, 2), new ScheduledTask(0, 6, 3), new ScheduledTask(0, 5, 4), new ScheduledTask(0, 4, 5), new ScheduledTask(4, 7, 5), new ScheduledTask(5, 8, 4), new ScheduledTask(6, 8, 2), new ScheduledTask(6, 8, 3)};
        int[] expectedProcessorEndTimes = new int[]{9, 7, 8, 8, 8, 7};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 28;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(8, 16, 1), new ScheduledTask(10, 16, 0), new ScheduledTask(16, 22, 0), new ScheduledTask(16, 21, 1), new ScheduledTask(21, 24, 1), new ScheduledTask(22, 25, 0), new ScheduledTask(24, 27, 1), new ScheduledTask(25, 28, 0)};
        int[] expectedProcessorEndTimes = new int[]{28, 27};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 14;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(0, 8, 2), new ScheduledTask(8, 14, 1), new ScheduledTask(0, 6, 3), new ScheduledTask(6, 11, 3), new ScheduledTask(10, 13, 0), new ScheduledTask(8, 11, 2), new ScheduledTask(11, 14, 2), new ScheduledTask(11, 14, 3)};
        int[] expectedProcessorEndTimes = new int[]{13, 14, 14, 14};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 11;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(0, 8, 2), new ScheduledTask(0, 6, 3), new ScheduledTask(0, 6, 4), new ScheduledTask(0, 5, 5), new ScheduledTask(5, 8, 5), new ScheduledTask(6, 9, 3), new ScheduledTask(6, 9, 4), new ScheduledTask(8, 11, 1)};
        int[] expectedProcessorEndTimes = new int[]{10, 11, 8, 9, 9, 8};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 25;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(8, 16, 1), new ScheduledTask(9, 15, 0), new ScheduledTask(15, 20, 0), new ScheduledTask(16, 20, 1), new ScheduledTask(20, 23, 0), new ScheduledTask(20, 22, 1), new ScheduledTask(22, 24, 1), new ScheduledTask(23, 25, 0)};
        int[] expectedProcessorEndTimes = new int[]{25, 24};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 13;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(0, 8, 2), new ScheduledTask(0, 6, 3), new ScheduledTask(6, 11, 3), new ScheduledTask(8, 12, 1), new ScheduledTask(8, 11, 2), new ScheduledTask(9, 11, 0), new ScheduledTask(11, 13, 0), new ScheduledTask(11, 13, 2)};
        int[] expectedProcessorEndTimes = new int[]{13, 12, 13, 11};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 9;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(0, 8, 2), new ScheduledTask(0, 6, 3), new ScheduledTask(0, 5, 4), new ScheduledTask(0, 4, 5), new ScheduledTask(4, 7, 5), new ScheduledTask(5, 7, 4), new ScheduledTask(6, 8, 3), new ScheduledTask(7, 9, 4)};
        int[] expectedProcessorEndTimes = new int[]{9, 8, 8, 8, 9, 7};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(9, 17, 1), new ScheduledTask(10, 18, 0), new ScheduledTask(17, 24, 1), new ScheduledTask(18, 24, 0), new ScheduledTask(24, 27, 0), new ScheduledTask(24, 27, 1), new ScheduledTask(27, 29, 0), new ScheduledTask(27, 29, 1)};
        int[] expectedProcessorEndTimes = new int[]{29, 29};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 15;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(0, 8, 2), new ScheduledTask(0, 8, 3), new ScheduledTask(8, 15, 2), new ScheduledTask(8, 14, 3), new ScheduledTask(9, 12, 1), new ScheduledTask(10, 13, 0), new ScheduledTask(12, 14, 1), new ScheduledTask(13, 15, 0)};
        int[] expectedProcessorEndTimes = new int[]{15, 14, 15, 14};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 10;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(0, 8, 2), new ScheduledTask(0, 8, 3), new ScheduledTask(0, 7, 4), new ScheduledTask(0, 6, 5), new ScheduledTask(6, 9, 5), new ScheduledTask(7, 10, 4), new ScheduledTask(8, 10, 2), new ScheduledTask(8, 10, 3)};
        int[] expectedProcessorEndTimes = new int[]{10, 9, 10, 10, 10, 9};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 10;
        int expectedScheduleEndTime = 10;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(0, 8, 2), new ScheduledTask(0, 6, 3), new ScheduledTask(0, 6, 4), new ScheduledTask(0, 6, 5), new ScheduledTask(0, 5, 6), new ScheduledTask(0, 4, 7), new ScheduledTask(0, 4, 8), new ScheduledTask(0, 3, 9)};
        int[] expectedProcessorEndTimes = new int[]{10, 9, 8, 6, 6, 6, 5, 4, 4, 3};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(9, 17, 1), new ScheduledTask(10, 16, 0), new ScheduledTask(16, 22, 0), new ScheduledTask(17, 23, 1), new ScheduledTask(22, 27, 0), new ScheduledTask(23, 27, 1), new ScheduledTask(27, 31, 0), new ScheduledTask(27, 30, 1)};
        int[] expectedProcessorEndTimes = new int[]{31, 30};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 16;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(0, 8, 2), new ScheduledTask(9, 15, 1), new ScheduledTask(0, 6, 3), new ScheduledTask(6, 12, 3), new ScheduledTask(10, 15, 0), new ScheduledTask(8, 12, 2), new ScheduledTask(12, 16, 2), new ScheduledTask(12, 15, 3)};
        int[] expectedProcessorEndTimes = new int[]{15, 15, 16, 15};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 10;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(0, 8, 2), new ScheduledTask(0, 6, 3), new ScheduledTask(0, 6, 4), new ScheduledTask(0, 6, 5), new ScheduledTask(0, 5, 6), new ScheduledTask(0, 4, 7), new ScheduledTask(4, 8, 7), new ScheduledTask(5, 8, 6)};
        int[] expectedProcessorEndTimes = new int[]{10, 9, 8, 6, 6, 6, 8, 8};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 26;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(8, 15, 1), new ScheduledTask(9, 15, 0), new ScheduledTask(15, 20, 0), new ScheduledTask(15, 19, 1), new ScheduledTask(19, 23, 1), new ScheduledTask(20, 23, 0), new ScheduledTask(23, 26, 0), new ScheduledTask(23, 25, 1)};
        int[] expectedProcessorEndTimes = new int[]{26, 25};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 13;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(0, 7, 2), new ScheduledTask(0, 6, 3), new ScheduledTask(7, 12, 2), new ScheduledTask(9, 13, 0), new ScheduledTask(6, 10, 3), new ScheduledTask(8, 11, 1), new ScheduledTask(10, 13, 3), new ScheduledTask(11, 13, 1)};
        int[] expectedProcessorEndTimes = new int[]{13, 13, 12, 13};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 9;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(0, 7, 2), new ScheduledTask(0, 6, 3), new ScheduledTask(0, 5, 4), new ScheduledTask(0, 4, 5), new ScheduledTask(4, 8, 5), new ScheduledTask(5, 8, 4), new ScheduledTask(6, 9, 3), new ScheduledTask(7, 9, 2)};
        int[] expectedProcessorEndTimes = new int[]{9, 8, 9, 9, 8, 8};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 317;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(248, 317, 0), new ScheduledTask(167, 246, 0), new ScheduledTask(215, 244, 1), new ScheduledTask(0, 88, 1), new ScheduledTask(0, 49, 0), new ScheduledTask(49, 108, 0), new ScheduledTask(108, 167, 0), new ScheduledTask(88, 147, 1), new ScheduledTask(147, 186, 1), new ScheduledTask(186, 215, 1)};
        int[] expectedProcessorEndTimes = new int[]{317, 244};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 212;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(143, 212, 0), new ScheduledTask(64, 143, 0), new ScheduledTask(108, 137, 1), new ScheduledTask(39, 127, 2), new ScheduledTask(0, 49, 1), new ScheduledTask(0, 59, 0), new ScheduledTask(0, 59, 3), new ScheduledTask(49, 108, 1), new ScheduledTask(0, 39, 2), new ScheduledTask(59, 88, 3)};
        int[] expectedProcessorEndTimes = new int[]{212, 137, 127, 88};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 212;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(143, 212, 0), new ScheduledTask(64, 143, 0), new ScheduledTask(74, 103, 1), new ScheduledTask(0, 88, 2), new ScheduledTask(0, 49, 4), new ScheduledTask(0, 59, 0), new ScheduledTask(0, 59, 1), new ScheduledTask(0, 59, 3), new ScheduledTask(29, 68, 5), new ScheduledTask(0, 29, 5)};
        int[] expectedProcessorEndTimes = new int[]{212, 103, 88, 59, 49, 68};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 286;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(211, 286, 0), new ScheduledTask(132, 207, 1), new ScheduledTask(175, 208, 0), new ScheduledTask(66, 99, 1), new ScheduledTask(0, 66, 1), new ScheduledTask(50, 75, 0), new ScheduledTask(0, 50, 0), new ScheduledTask(99, 132, 1), new ScheduledTask(150, 175, 0), new ScheduledTask(75, 150, 0)};
        int[] expectedProcessorEndTimes = new int[]{286, 207};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 216;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(141, 216, 0), new ScheduledTask(66, 141, 0), new ScheduledTask(85, 118, 1), new ScheduledTask(83, 116, 3), new ScheduledTask(0, 66, 0), new ScheduledTask(25, 50, 3), new ScheduledTask(0, 50, 2), new ScheduledTask(50, 83, 3), new ScheduledTask(0, 25, 3), new ScheduledTask(0, 75, 1)};
        int[] expectedProcessorEndTimes = new int[]{216, 118, 50, 116};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 216;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(141, 216, 0), new ScheduledTask(66, 141, 0), new ScheduledTask(75, 108, 1), new ScheduledTask(25, 58, 3), new ScheduledTask(0, 66, 0), new ScheduledTask(0, 25, 3), new ScheduledTask(0, 50, 2), new ScheduledTask(0, 33, 4), new ScheduledTask(0, 25, 5), new ScheduledTask(0, 75, 1)};
        int[] expectedProcessorEndTimes = new int[]{216, 108, 50, 58, 33, 25};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 278;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(252, 278, 0), new ScheduledTask(94, 128, 0), new ScheduledTask(179, 247, 1), new ScheduledTask(162, 247, 0), new ScheduledTask(43, 94, 0), new ScheduledTask(0, 68, 1), new ScheduledTask(0, 43, 0), new ScheduledTask(145, 179, 1), new ScheduledTask(68, 145, 1), new ScheduledTask(128, 162, 0)};
        int[] expectedProcessorEndTimes = new int[]{278, 247};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 171;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(145, 171, 0), new ScheduledTask(102, 136, 1), new ScheduledTask(77, 145, 0), new ScheduledTask(43, 128, 2), new ScheduledTask(34, 85, 3), new ScheduledTask(34, 102, 1), new ScheduledTask(0, 43, 2), new ScheduledTask(0, 34, 3), new ScheduledTask(0, 77, 0), new ScheduledTask(0, 34, 1)};
        int[] expectedProcessorEndTimes = new int[]{171, 136, 128, 85};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 171;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(145, 171, 0), new ScheduledTask(79, 113, 1), new ScheduledTask(77, 145, 0), new ScheduledTask(0, 85, 2), new ScheduledTask(0, 51, 3), new ScheduledTask(0, 68, 1), new ScheduledTask(34, 77, 4), new ScheduledTask(0, 34, 5), new ScheduledTask(0, 77, 0), new ScheduledTask(0, 34, 4)};
        int[] expectedProcessorEndTimes = new int[]{171, 113, 85, 51, 77, 34};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 273;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(207, 273, 0), new ScheduledTask(179, 198, 1), new ScheduledTask(113, 160, 1), new ScheduledTask(169, 207, 0), new ScheduledTask(160, 179, 1), new ScheduledTask(94, 150, 0), new ScheduledTask(150, 169, 0), new ScheduledTask(38, 113, 1), new ScheduledTask(0, 38, 1), new ScheduledTask(0, 94, 0)};
        int[] expectedProcessorEndTimes = new int[]{273, 198};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 207;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(141, 207, 0), new ScheduledTask(84, 103, 1), new ScheduledTask(94, 141, 0), new ScheduledTask(57, 95, 3), new ScheduledTask(0, 19, 2), new ScheduledTask(19, 75, 2), new ScheduledTask(0, 19, 3), new ScheduledTask(0, 75, 1), new ScheduledTask(19, 57, 3), new ScheduledTask(0, 94, 0)};
        int[] expectedProcessorEndTimes = new int[]{207, 103, 75, 95};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 207;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(141, 207, 0), new ScheduledTask(75, 94, 1), new ScheduledTask(94, 141, 0), new ScheduledTask(38, 76, 3), new ScheduledTask(0, 19, 4), new ScheduledTask(0, 56, 2), new ScheduledTask(0, 19, 5), new ScheduledTask(0, 75, 1), new ScheduledTask(0, 38, 3), new ScheduledTask(0, 94, 0)};
        int[] expectedProcessorEndTimes = new int[]{207, 94, 56, 76, 19, 19};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 283;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(201, 283, 0), new ScheduledTask(153, 198, 0), new ScheduledTask(117, 199, 1), new ScheduledTask(81, 99, 1), new ScheduledTask(0, 45, 1), new ScheduledTask(117, 153, 0), new ScheduledTask(63, 117, 0), new ScheduledTask(45, 81, 1), new ScheduledTask(99, 117, 1), new ScheduledTask(0, 63, 0)};
        int[] expectedProcessorEndTimes = new int[]{283, 199};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 227;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(145, 227, 0), new ScheduledTask(78, 123, 1), new ScheduledTask(63, 145, 0), new ScheduledTask(0, 18, 2), new ScheduledTask(18, 63, 2), new ScheduledTask(36, 72, 3), new ScheduledTask(18, 72, 1), new ScheduledTask(0, 36, 3), new ScheduledTask(0, 18, 1), new ScheduledTask(0, 63, 0)};
        int[] expectedProcessorEndTimes = new int[]{227, 123, 63, 72};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 227;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(145, 227, 0), new ScheduledTask(54, 99, 1), new ScheduledTask(63, 145, 0), new ScheduledTask(18, 36, 5), new ScheduledTask(0, 45, 2), new ScheduledTask(0, 36, 3), new ScheduledTask(0, 54, 1), new ScheduledTask(0, 36, 4), new ScheduledTask(0, 18, 5), new ScheduledTask(0, 63, 0)};
        int[] expectedProcessorEndTimes = new int[]{227, 99, 45, 36, 36, 36};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 235;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(183, 235, 0), new ScheduledTask(85, 131, 1), new ScheduledTask(137, 183, 0), new ScheduledTask(131, 177, 1), new ScheduledTask(0, 39, 0), new ScheduledTask(0, 39, 1), new ScheduledTask(39, 85, 1), new ScheduledTask(111, 137, 0), new ScheduledTask(39, 78, 0), new ScheduledTask(78, 111, 0)};
        int[] expectedProcessorEndTimes = new int[]{235, 177};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 170;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(118, 170, 0), new ScheduledTask(72, 118, 0), new ScheduledTask(67, 113, 1), new ScheduledTask(39, 85, 2), new ScheduledTask(0, 39, 2), new ScheduledTask(33, 72, 0), new ScheduledTask(0, 46, 1), new ScheduledTask(0, 26, 3), new ScheduledTask(26, 65, 3), new ScheduledTask(0, 33, 0)};
        int[] expectedProcessorEndTimes = new int[]{170, 113, 85, 65};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 145;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(93, 145, 0), new ScheduledTask(47, 93, 0), new ScheduledTask(41, 87, 1), new ScheduledTask(39, 85, 2), new ScheduledTask(0, 39, 1), new ScheduledTask(0, 39, 2), new ScheduledTask(0, 46, 0), new ScheduledTask(0, 26, 5), new ScheduledTask(0, 39, 3), new ScheduledTask(0, 33, 4)};
        int[] expectedProcessorEndTimes = new int[]{145, 87, 85, 39, 33, 26};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 349;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(279, 349, 0), new ScheduledTask(210, 271, 1), new ScheduledTask(209, 244, 0), new ScheduledTask(244, 279, 0), new ScheduledTask(0, 79, 1), new ScheduledTask(158, 210, 1), new ScheduledTask(87, 157, 0), new ScheduledTask(0, 87, 0), new ScheduledTask(157, 209, 0), new ScheduledTask(79, 158, 1)};
        int[] expectedProcessorEndTimes = new int[]{349, 271};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 236;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(166, 236, 0), new ScheduledTask(79, 140, 1), new ScheduledTask(131, 166, 0), new ScheduledTask(87, 122, 2), new ScheduledTask(0, 79, 1), new ScheduledTask(0, 52, 0), new ScheduledTask(0, 70, 3), new ScheduledTask(0, 87, 2), new ScheduledTask(70, 122, 3), new ScheduledTask(52, 131, 0)};
        int[] expectedProcessorEndTimes = new int[]{236, 140, 122, 122};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 210;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(140, 210, 0), new ScheduledTask(79, 140, 0), new ScheduledTask(94, 129, 1), new ScheduledTask(0, 35, 5), new ScheduledTask(0, 79, 0), new ScheduledTask(0, 52, 4), new ScheduledTask(0, 70, 3), new ScheduledTask(0, 87, 1), new ScheduledTask(35, 87, 5), new ScheduledTask(0, 79, 2)};
        int[] expectedProcessorEndTimes = new int[]{210, 129, 79, 70, 52, 87};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 282;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(235, 282, 0), new ScheduledTask(201, 235, 0), new ScheduledTask(87, 141, 0), new ScheduledTask(161, 228, 1), new ScheduledTask(114, 161, 1), new ScheduledTask(47, 114, 1), new ScheduledTask(141, 201, 0), new ScheduledTask(0, 60, 0), new ScheduledTask(60, 87, 0), new ScheduledTask(0, 47, 1)};
        int[] expectedProcessorEndTimes = new int[]{282, 228};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 181;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(134, 181, 0), new ScheduledTask(96, 130, 0), new ScheduledTask(60, 114, 1), new ScheduledTask(60, 127, 2), new ScheduledTask(47, 94, 0), new ScheduledTask(27, 94, 3), new ScheduledTask(0, 60, 2), new ScheduledTask(0, 60, 1), new ScheduledTask(0, 27, 3), new ScheduledTask(0, 47, 0)};
        int[] expectedProcessorEndTimes = new int[]{181, 114, 127, 94};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 161;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(114, 161, 0), new ScheduledTask(69, 103, 1), new ScheduledTask(60, 114, 0), new ScheduledTask(27, 94, 2), new ScheduledTask(0, 47, 4), new ScheduledTask(0, 67, 1), new ScheduledTask(0, 60, 3), new ScheduledTask(0, 60, 0), new ScheduledTask(0, 27, 2), new ScheduledTask(0, 47, 5)};
        int[] expectedProcessorEndTimes = new int[]{161, 103, 94, 60, 47, 47};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 304;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(255, 304, 0), new ScheduledTask(206, 255, 0), new ScheduledTask(176, 245, 1), new ScheduledTask(108, 206, 0), new ScheduledTask(78, 176, 1), new ScheduledTask(0, 20, 0), new ScheduledTask(39, 78, 1), new ScheduledTask(20, 59, 0), new ScheduledTask(59, 108, 0), new ScheduledTask(0, 39, 1)};
        int[] expectedProcessorEndTimes = new int[]{304, 245};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 196;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(147, 196, 0), new ScheduledTask(98, 147, 0), new ScheduledTask(69, 138, 1), new ScheduledTask(39, 137, 2), new ScheduledTask(0, 98, 0), new ScheduledTask(0, 20, 1), new ScheduledTask(39, 78, 3), new ScheduledTask(0, 39, 3), new ScheduledTask(20, 69, 1), new ScheduledTask(0, 39, 2)};
        int[] expectedProcessorEndTimes = new int[]{196, 138, 137, 78};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 196;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(147, 196, 0), new ScheduledTask(98, 147, 0), new ScheduledTask(49, 118, 1), new ScheduledTask(0, 98, 2), new ScheduledTask(0, 98, 0), new ScheduledTask(0, 20, 3), new ScheduledTask(20, 59, 3), new ScheduledTask(0, 39, 4), new ScheduledTask(0, 49, 1), new ScheduledTask(0, 39, 5)};
        int[] expectedProcessorEndTimes = new int[]{196, 118, 98, 59, 39, 39};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 144;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(114, 144, 0), new ScheduledTask(48, 78, 1), new ScheduledTask(60, 114, 0), new ScheduledTask(48, 108, 2), new ScheduledTask(0, 24, 4), new ScheduledTask(0, 48, 1), new ScheduledTask(0, 36, 3), new ScheduledTask(0, 60, 0), new ScheduledTask(0, 18, 5), new ScheduledTask(0, 48, 2)};
        int[] expectedProcessorEndTimes = new int[]{144, 78, 108, 36, 24, 18};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 222;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(192, 222, 0), new ScheduledTask(156, 186, 1), new ScheduledTask(66, 120, 1), new ScheduledTask(132, 192, 0), new ScheduledTask(108, 132, 0), new ScheduledTask(60, 108, 0), new ScheduledTask(120, 156, 1), new ScheduledTask(0, 60, 0), new ScheduledTask(48, 66, 1), new ScheduledTask(0, 48, 1)};
        int[] expectedProcessorEndTimes = new int[]{222, 186};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 144;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(114, 144, 0), new ScheduledTask(66, 96, 1), new ScheduledTask(60, 114, 0), new ScheduledTask(48, 108, 2), new ScheduledTask(0, 24, 3), new ScheduledTask(18, 66, 1), new ScheduledTask(24, 60, 3), new ScheduledTask(0, 60, 0), new ScheduledTask(0, 18, 1), new ScheduledTask(0, 48, 2)};
        int[] expectedProcessorEndTimes = new int[]{144, 96, 108, 60};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 144;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(114, 144, 0), new ScheduledTask(48, 78, 1), new ScheduledTask(60, 114, 0), new ScheduledTask(48, 108, 2), new ScheduledTask(0, 24, 4), new ScheduledTask(0, 48, 1), new ScheduledTask(0, 36, 3), new ScheduledTask(0, 60, 0), new ScheduledTask(0, 18, 5), new ScheduledTask(0, 48, 2)};
        int[] expectedProcessorEndTimes = new int[]{144, 78, 108, 36, 24, 18};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 372;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(279, 372, 0), new ScheduledTask(107, 240, 1), new ScheduledTask(240, 267, 1), new ScheduledTask(226, 279, 0), new ScheduledTask(0, 40, 1), new ScheduledTask(80, 107, 1), new ScheduledTask(0, 93, 0), new ScheduledTask(93, 173, 0), new ScheduledTask(40, 80, 1), new ScheduledTask(173, 226, 0)};
        int[] expectedProcessorEndTimes = new int[]{372, 267};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 319;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(226, 319, 0), new ScheduledTask(93, 226, 0), new ScheduledTask(120, 147, 1), new ScheduledTask(67, 120, 2), new ScheduledTask(0, 40, 1), new ScheduledTask(0, 27, 2), new ScheduledTask(0, 93, 0), new ScheduledTask(40, 120, 1), new ScheduledTask(27, 67, 2), new ScheduledTask(0, 53, 3)};
        int[] expectedProcessorEndTimes = new int[]{319, 147, 120, 53};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 319;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(226, 319, 0), new ScheduledTask(93, 226, 0), new ScheduledTask(120, 147, 1), new ScheduledTask(27, 80, 2), new ScheduledTask(0, 40, 1), new ScheduledTask(0, 27, 2), new ScheduledTask(0, 93, 0), new ScheduledTask(40, 120, 1), new ScheduledTask(0, 40, 4), new ScheduledTask(0, 53, 3)};
        int[] expectedProcessorEndTimes = new int[]{319, 147, 80, 53, 40};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot91_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.91_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(26, 35, 0), new ScheduledTask(19, 23, 1), new ScheduledTask(18, 22, 0), new ScheduledTask(22, 26, 0), new ScheduledTask(9, 14, 1), new ScheduledTask(0, 7, 0), new ScheduledTask(14, 19, 1), new ScheduledTask(7, 13, 0), new ScheduledTask(13, 18, 0), new ScheduledTask(0, 9, 1)};
        int[] expectedProcessorEndTimes = new int[]{35, 23};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot91_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.91_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(20, 29, 0), new ScheduledTask(13, 17, 1), new ScheduledTask(14, 18, 0), new ScheduledTask(6, 10, 2), new ScheduledTask(0, 5, 3), new ScheduledTask(5, 12, 1), new ScheduledTask(0, 5, 1), new ScheduledTask(0, 6, 2), new ScheduledTask(9, 14, 0), new ScheduledTask(0, 9, 0)};
        int[] expectedProcessorEndTimes = new int[]{29, 17, 10, 5};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot91_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.91_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 27;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(18, 27, 0), new ScheduledTask(14, 18, 0), new ScheduledTask(10, 14, 0), new ScheduledTask(7, 11, 1), new ScheduledTask(0, 5, 3), new ScheduledTask(0, 7, 1), new ScheduledTask(0, 5, 4), new ScheduledTask(0, 6, 2), new ScheduledTask(0, 5, 5), new ScheduledTask(0, 9, 0)};
        int[] expectedProcessorEndTimes = new int[]{27, 11, 6, 5, 5, 5};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot98_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.98_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 34;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(32, 34, 0), new ScheduledTask(16, 22, 0), new ScheduledTask(22, 28, 1), new ScheduledTask(22, 31, 0), new ScheduledTask(10, 16, 0), new ScheduledTask(5, 10, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(14, 22, 1), new ScheduledTask(7, 14, 1), new ScheduledTask(0, 7, 1)};
        int[] expectedProcessorEndTimes = new int[]{34, 28};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot98_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.98_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 25;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(23, 25, 0), new ScheduledTask(17, 23, 0), new ScheduledTask(13, 19, 1), new ScheduledTask(0, 9, 2), new ScheduledTask(8, 14, 3), new ScheduledTask(7, 12, 0), new ScheduledTask(12, 17, 0), new ScheduledTask(0, 8, 3), new ScheduledTask(0, 7, 0), new ScheduledTask(0, 7, 1)};
        int[] expectedProcessorEndTimes = new int[]{25, 19, 9, 14};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot98_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.98_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 25;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(23, 25, 0), new ScheduledTask(11, 17, 0), new ScheduledTask(17, 23, 0), new ScheduledTask(5, 14, 1), new ScheduledTask(0, 6, 4), new ScheduledTask(0, 5, 1), new ScheduledTask(0, 5, 3), new ScheduledTask(0, 8, 2), new ScheduledTask(5, 12, 3), new ScheduledTask(0, 7, 0)};
        int[] expectedProcessorEndTimes = new int[]{25, 14, 8, 12, 6};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(27, 37, 0), new ScheduledTask(17, 19, 0), new ScheduledTask(19, 23, 1), new ScheduledTask(19, 26, 0), new ScheduledTask(7, 14, 0), new ScheduledTask(14, 17, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(5, 13, 1), new ScheduledTask(0, 7, 0), new ScheduledTask(13, 19, 1)};
        int[] expectedProcessorEndTimes = new int[]{37, 23};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(19, 29, 0), new ScheduledTask(12, 14, 1), new ScheduledTask(14, 18, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(5, 12, 1), new ScheduledTask(0, 3, 3), new ScheduledTask(0, 5, 1), new ScheduledTask(0, 8, 2), new ScheduledTask(7, 14, 0), new ScheduledTask(3, 9, 3)};
        int[] expectedProcessorEndTimes = new int[]{29, 14, 8, 9};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(19, 29, 0), new ScheduledTask(17, 19, 0), new ScheduledTask(13, 17, 0), new ScheduledTask(0, 7, 2), new ScheduledTask(0, 7, 3), new ScheduledTask(6, 9, 4), new ScheduledTask(0, 5, 5), new ScheduledTask(0, 8, 1), new ScheduledTask(0, 7, 0), new ScheduledTask(0, 6, 4)};
        int[] expectedProcessorEndTimes = new int[]{29, 8, 7, 7, 9, 5};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 39;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(32, 39, 0), new ScheduledTask(22, 27, 0), new ScheduledTask(27, 32, 0), new ScheduledTask(22, 29, 1), new ScheduledTask(0, 10, 0), new ScheduledTask(10, 13, 0), new ScheduledTask(13, 22, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(12, 22, 1), new ScheduledTask(7, 12, 1)};
        int[] expectedProcessorEndTimes = new int[]{39, 29};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 30;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(23, 30, 0), new ScheduledTask(13, 18, 0), new ScheduledTask(18, 23, 0), new ScheduledTask(10, 17, 1), new ScheduledTask(0, 10, 0), new ScheduledTask(10, 13, 0), new ScheduledTask(0, 9, 2), new ScheduledTask(0, 7, 3), new ScheduledTask(0, 10, 1), new ScheduledTask(7, 12, 3)};
        int[] expectedProcessorEndTimes = new int[]{30, 17, 9, 12};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(22, 29, 0), new ScheduledTask(12, 17, 0), new ScheduledTask(17, 22, 0), new ScheduledTask(5, 12, 3), new ScheduledTask(0, 10, 0), new ScheduledTask(0, 3, 5), new ScheduledTask(0, 9, 2), new ScheduledTask(0, 7, 4), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 5, 3)};
        int[] expectedProcessorEndTimes = new int[]{29, 10, 9, 12, 7, 3};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 38;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(29, 38, 0), new ScheduledTask(11, 19, 0), new ScheduledTask(25, 28, 0), new ScheduledTask(20, 25, 1), new ScheduledTask(7, 11, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(13, 20, 1), new ScheduledTask(19, 25, 0), new ScheduledTask(4, 13, 1)};
        int[] expectedProcessorEndTimes = new int[]{38, 25};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 30;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(21, 30, 0), new ScheduledTask(11, 19, 0), new ScheduledTask(13, 16, 1), new ScheduledTask(7, 12, 2), new ScheduledTask(7, 11, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(0, 7, 2), new ScheduledTask(0, 6, 3), new ScheduledTask(4, 13, 1)};
        int[] expectedProcessorEndTimes = new int[]{30, 16, 12, 6};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 28;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(19, 28, 0), new ScheduledTask(11, 19, 0), new ScheduledTask(11, 14, 1), new ScheduledTask(4, 9, 4), new ScheduledTask(0, 4, 0), new ScheduledTask(4, 11, 0), new ScheduledTask(0, 4, 4), new ScheduledTask(0, 7, 2), new ScheduledTask(0, 6, 3), new ScheduledTask(0, 9, 1)};
        int[] expectedProcessorEndTimes = new int[]{28, 14, 7, 6, 9};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 39;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(33, 39, 0), new ScheduledTask(27, 30, 1), new ScheduledTask(19, 26, 0), new ScheduledTask(26, 33, 0), new ScheduledTask(25, 27, 1), new ScheduledTask(10, 19, 0), new ScheduledTask(15, 25, 1), new ScheduledTask(0, 8, 1), new ScheduledTask(0, 10, 0), new ScheduledTask(8, 15, 1)};
        int[] expectedProcessorEndTimes = new int[]{39, 30};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(23, 29, 0), new ScheduledTask(17, 20, 1), new ScheduledTask(16, 23, 0), new ScheduledTask(8, 15, 0), new ScheduledTask(0, 2, 3), new ScheduledTask(2, 11, 3), new ScheduledTask(7, 17, 1), new ScheduledTask(0, 8, 0), new ScheduledTask(0, 10, 2), new ScheduledTask(0, 7, 1)};
        int[] expectedProcessorEndTimes = new int[]{29, 20, 10, 11};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(23, 29, 0), new ScheduledTask(16, 19, 1), new ScheduledTask(16, 23, 0), new ScheduledTask(0, 7, 4), new ScheduledTask(0, 2, 0), new ScheduledTask(0, 9, 2), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 8, 3), new ScheduledTask(2, 12, 0), new ScheduledTask(0, 7, 5)};
        int[] expectedProcessorEndTimes = new int[]{29, 19, 9, 8, 7, 7};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 41;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(36, 41, 0), new ScheduledTask(19, 22, 1), new ScheduledTask(28, 36, 0), new ScheduledTask(22, 32, 1), new ScheduledTask(9, 19, 1), new ScheduledTask(0, 6, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(6, 15, 0), new ScheduledTask(23, 28, 0), new ScheduledTask(15, 23, 0)};
        int[] expectedProcessorEndTimes = new int[]{41, 32};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 33;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(28, 33, 0), new ScheduledTask(25, 28, 0), new ScheduledTask(17, 25, 0), new ScheduledTask(8, 18, 1), new ScheduledTask(5, 15, 2), new ScheduledTask(0, 6, 3), new ScheduledTask(6, 15, 3), new ScheduledTask(0, 9, 0), new ScheduledTask(0, 5, 2), new ScheduledTask(0, 8, 1)};
        int[] expectedProcessorEndTimes = new int[]{33, 18, 15, 15};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(26, 31, 0), new ScheduledTask(15, 18, 0), new ScheduledTask(18, 26, 0), new ScheduledTask(10, 20, 1), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 6, 0), new ScheduledTask(6, 15, 0), new ScheduledTask(0, 9, 2), new ScheduledTask(0, 5, 4), new ScheduledTask(0, 8, 3)};
        int[] expectedProcessorEndTimes = new int[]{31, 20, 9, 8, 5};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 39;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(37, 39, 0), new ScheduledTask(20, 30, 1), new ScheduledTask(21, 28, 0), new ScheduledTask(28, 36, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(18, 20, 1), new ScheduledTask(9, 18, 1), new ScheduledTask(0, 9, 1), new ScheduledTask(17, 21, 0), new ScheduledTask(7, 17, 0)};
        int[] expectedProcessorEndTimes = new int[]{39, 30};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(30, 32, 0), new ScheduledTask(20, 30, 0), new ScheduledTask(13, 20, 0), new ScheduledTask(10, 18, 1), new ScheduledTask(0, 7, 2), new ScheduledTask(4, 6, 3), new ScheduledTask(7, 16, 2), new ScheduledTask(0, 9, 0), new ScheduledTask(0, 4, 3), new ScheduledTask(0, 10, 1)};
        int[] expectedProcessorEndTimes = new int[]{32, 18, 16, 6};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(30, 32, 0), new ScheduledTask(13, 23, 1), new ScheduledTask(22, 29, 0), new ScheduledTask(0, 8, 4), new ScheduledTask(0, 7, 1), new ScheduledTask(0, 2, 5), new ScheduledTask(0, 9, 2), new ScheduledTask(0, 9, 3), new ScheduledTask(2, 6, 5), new ScheduledTask(9, 19, 2)};
        int[] expectedProcessorEndTimes = new int[]{32, 23, 19, 9, 8, 6};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(29, 37, 0), new ScheduledTask(26, 29, 0), new ScheduledTask(21, 27, 1), new ScheduledTask(14, 21, 1), new ScheduledTask(10, 20, 0), new ScheduledTask(20, 26, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(0, 5, 0), new ScheduledTask(7, 14, 1), new ScheduledTask(5, 10, 0)};
        int[] expectedProcessorEndTimes = new int[]{37, 27};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 28;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(20, 28, 0), new ScheduledTask(16, 19, 0), new ScheduledTask(12, 18, 1), new ScheduledTask(5, 12, 2), new ScheduledTask(0, 10, 0), new ScheduledTask(10, 16, 0), new ScheduledTask(0, 7, 3), new ScheduledTask(7, 12, 1), new ScheduledTask(0, 7, 1), new ScheduledTask(0, 5, 2)};
        int[] expectedProcessorEndTimes = new int[]{28, 18, 12, 7};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 28;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(20, 28, 0), new ScheduledTask(16, 19, 0), new ScheduledTask(12, 18, 1), new ScheduledTask(0, 7, 2), new ScheduledTask(0, 10, 0), new ScheduledTask(0, 6, 4), new ScheduledTask(0, 7, 3), new ScheduledTask(7, 12, 1), new ScheduledTask(0, 7, 1), new ScheduledTask(0, 5, 5)};
        int[] expectedProcessorEndTimes = new int[]{28, 18, 7, 7, 6, 5};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(29, 35, 0), new ScheduledTask(13, 18, 1), new ScheduledTask(24, 29, 0), new ScheduledTask(18, 26, 1), new ScheduledTask(9, 13, 1), new ScheduledTask(0, 7, 1), new ScheduledTask(0, 9, 0), new ScheduledTask(9, 18, 0), new ScheduledTask(7, 9, 1), new ScheduledTask(18, 24, 0)};
        int[] expectedProcessorEndTimes = new int[]{35, 26};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(23, 29, 0), new ScheduledTask(13, 18, 0), new ScheduledTask(18, 23, 0), new ScheduledTask(7, 15, 2), new ScheduledTask(0, 4, 0), new ScheduledTask(0, 7, 2), new ScheduledTask(4, 13, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(0, 2, 3), new ScheduledTask(2, 8, 3)};
        int[] expectedProcessorEndTimes = new int[]{29, 9, 15, 8};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(23, 29, 0), new ScheduledTask(13, 18, 0), new ScheduledTask(18, 23, 0), new ScheduledTask(7, 15, 2), new ScheduledTask(0, 4, 4), new ScheduledTask(0, 7, 2), new ScheduledTask(2, 11, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(0, 2, 0), new ScheduledTask(0, 6, 3)};
        int[] expectedProcessorEndTimes = new int[]{29, 9, 15, 6, 4};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot04_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.04_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 21;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(18, 21, 0), new ScheduledTask(12, 14, 1), new ScheduledTask(9, 18, 0), new ScheduledTask(6, 12, 2), new ScheduledTask(5, 12, 1), new ScheduledTask(0, 5, 1), new ScheduledTask(3, 6, 2), new ScheduledTask(0, 3, 2), new ScheduledTask(0, 2, 0), new ScheduledTask(2, 9, 0)};
        int[] expectedProcessorEndTimes = new int[]{21, 14, 12};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot04_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.04_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 27;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(24, 27, 0), new ScheduledTask(22, 24, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(14, 20, 1), new ScheduledTask(7, 14, 1), new ScheduledTask(2, 7, 1), new ScheduledTask(19, 22, 0), new ScheduledTask(0, 3, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(3, 10, 0)};
        int[] expectedProcessorEndTimes = new int[]{27, 20};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot04_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.04_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 21;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(18, 21, 0), new ScheduledTask(12, 14, 1), new ScheduledTask(9, 18, 0), new ScheduledTask(6, 12, 2), new ScheduledTask(5, 12, 1), new ScheduledTask(0, 5, 1), new ScheduledTask(3, 6, 2), new ScheduledTask(0, 3, 2), new ScheduledTask(0, 2, 0), new ScheduledTask(2, 9, 0)};
        int[] expectedProcessorEndTimes = new int[]{21, 14, 12};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot04_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.04_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 21;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(18, 21, 0), new ScheduledTask(12, 14, 1), new ScheduledTask(9, 18, 0), new ScheduledTask(6, 12, 2), new ScheduledTask(5, 12, 1), new ScheduledTask(0, 5, 1), new ScheduledTask(3, 6, 2), new ScheduledTask(0, 3, 2), new ScheduledTask(0, 2, 0), new ScheduledTask(2, 9, 0)};
        int[] expectedProcessorEndTimes = new int[]{21, 14, 12};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(57, 66, 0), new ScheduledTask(52, 57, 0), new ScheduledTask(49, 52, 0), new ScheduledTask(4, 10, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(39, 49, 0), new ScheduledTask(29, 39, 0), new ScheduledTask(19, 29, 0), new ScheduledTask(0, 4, 0)};
        int[] expectedProcessorEndTimes = new int[]{66, 2};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(57, 66, 0), new ScheduledTask(52, 57, 0), new ScheduledTask(49, 52, 0), new ScheduledTask(4, 10, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(39, 49, 0), new ScheduledTask(29, 39, 0), new ScheduledTask(19, 29, 0), new ScheduledTask(0, 4, 0)};
        int[] expectedProcessorEndTimes = new int[]{66, 2};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(57, 66, 0), new ScheduledTask(52, 57, 0), new ScheduledTask(49, 52, 0), new ScheduledTask(4, 10, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(39, 49, 0), new ScheduledTask(29, 39, 0), new ScheduledTask(19, 29, 0), new ScheduledTask(0, 4, 0)};
        int[] expectedProcessorEndTimes = new int[]{66, 2};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(43, 47, 0), new ScheduledTask(16, 19, 1), new ScheduledTask(14, 18, 0), new ScheduledTask(18, 28, 0), new ScheduledTask(5, 14, 1), new ScheduledTask(14, 16, 1), new ScheduledTask(0, 5, 1), new ScheduledTask(0, 2, 0), new ScheduledTask(11, 14, 0), new ScheduledTask(2, 11, 0)};
        int[] expectedProcessorEndTimes = new int[]{47, 19};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(43, 47, 0), new ScheduledTask(16, 19, 1), new ScheduledTask(14, 18, 0), new ScheduledTask(18, 28, 0), new ScheduledTask(5, 14, 1), new ScheduledTask(14, 16, 1), new ScheduledTask(0, 5, 1), new ScheduledTask(0, 2, 0), new ScheduledTask(11, 14, 0), new ScheduledTask(2, 11, 0)};
        int[] expectedProcessorEndTimes = new int[]{47, 19};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(43, 47, 0), new ScheduledTask(16, 19, 1), new ScheduledTask(14, 18, 0), new ScheduledTask(18, 28, 0), new ScheduledTask(5, 14, 1), new ScheduledTask(14, 16, 1), new ScheduledTask(0, 5, 1), new ScheduledTask(0, 2, 0), new ScheduledTask(11, 14, 0), new ScheduledTask(2, 11, 0)};
        int[] expectedProcessorEndTimes = new int[]{47, 19};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 48;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(41, 48, 0), new ScheduledTask(35, 39, 0), new ScheduledTask(22, 27, 0), new ScheduledTask(39, 41, 0), new ScheduledTask(27, 33, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(33, 35, 0), new ScheduledTask(19, 22, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(0, 10, 0)};
        int[] expectedProcessorEndTimes = new int[]{48, 7};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 48;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(41, 48, 0), new ScheduledTask(35, 39, 0), new ScheduledTask(22, 27, 0), new ScheduledTask(39, 41, 0), new ScheduledTask(27, 33, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(33, 35, 0), new ScheduledTask(19, 22, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(0, 10, 0)};
        int[] expectedProcessorEndTimes = new int[]{48, 7};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 48;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(41, 48, 0), new ScheduledTask(35, 39, 0), new ScheduledTask(22, 27, 0), new ScheduledTask(39, 41, 0), new ScheduledTask(27, 33, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(33, 35, 0), new ScheduledTask(19, 22, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(0, 10, 0)};
        int[] expectedProcessorEndTimes = new int[]{48, 7};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 49;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(40, 49, 0), new ScheduledTask(32, 40, 0), new ScheduledTask(9, 12, 0), new ScheduledTask(21, 27, 0), new ScheduledTask(12, 21, 0), new ScheduledTask(27, 31, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(5, 9, 0), new ScheduledTask(0, 3, 0), new ScheduledTask(3, 5, 0)};
        int[] expectedProcessorEndTimes = new int[]{49, 6};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 49;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(40, 49, 0), new ScheduledTask(32, 40, 0), new ScheduledTask(9, 12, 0), new ScheduledTask(21, 27, 0), new ScheduledTask(12, 21, 0), new ScheduledTask(27, 31, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(5, 9, 0), new ScheduledTask(0, 3, 0), new ScheduledTask(3, 5, 0)};
        int[] expectedProcessorEndTimes = new int[]{49, 6};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 49;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(40, 49, 0), new ScheduledTask(32, 40, 0), new ScheduledTask(9, 12, 0), new ScheduledTask(21, 27, 0), new ScheduledTask(12, 21, 0), new ScheduledTask(27, 31, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(5, 9, 0), new ScheduledTask(0, 3, 0), new ScheduledTask(3, 5, 0)};
        int[] expectedProcessorEndTimes = new int[]{49, 6};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(53, 59, 0), new ScheduledTask(38, 45, 0), new ScheduledTask(45, 53, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(9, 14, 0), new ScheduledTask(20, 28, 0), new ScheduledTask(0, 4, 0), new ScheduledTask(14, 20, 0), new ScheduledTask(4, 9, 0), new ScheduledTask(28, 38, 0)};
        int[] expectedProcessorEndTimes = new int[]{59, 4};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(53, 59, 0), new ScheduledTask(38, 45, 0), new ScheduledTask(45, 53, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(9, 14, 0), new ScheduledTask(20, 28, 0), new ScheduledTask(0, 4, 0), new ScheduledTask(14, 20, 0), new ScheduledTask(4, 9, 0), new ScheduledTask(28, 38, 0)};
        int[] expectedProcessorEndTimes = new int[]{59, 4};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(53, 59, 0), new ScheduledTask(38, 45, 0), new ScheduledTask(45, 53, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(9, 14, 0), new ScheduledTask(20, 28, 0), new ScheduledTask(0, 4, 0), new ScheduledTask(14, 20, 0), new ScheduledTask(4, 9, 0), new ScheduledTask(28, 38, 0)};
        int[] expectedProcessorEndTimes = new int[]{59, 4};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(53, 56, 0), new ScheduledTask(21, 25, 0), new ScheduledTask(46, 53, 0), new ScheduledTask(40, 45, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(11, 21, 0), new ScheduledTask(5, 11, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(25, 33, 0), new ScheduledTask(33, 40, 0)};
        int[] expectedProcessorEndTimes = new int[]{56, 8};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(53, 56, 0), new ScheduledTask(21, 25, 0), new ScheduledTask(46, 53, 0), new ScheduledTask(40, 45, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(11, 21, 0), new ScheduledTask(5, 11, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(25, 33, 0), new ScheduledTask(33, 40, 0)};
        int[] expectedProcessorEndTimes = new int[]{56, 8};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(53, 56, 0), new ScheduledTask(21, 25, 0), new ScheduledTask(46, 53, 0), new ScheduledTask(40, 45, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(11, 21, 0), new ScheduledTask(5, 11, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(25, 33, 0), new ScheduledTask(33, 40, 0)};
        int[] expectedProcessorEndTimes = new int[]{56, 8};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(53, 56, 0), new ScheduledTask(21, 25, 0), new ScheduledTask(46, 53, 0), new ScheduledTask(40, 45, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(11, 21, 0), new ScheduledTask(5, 11, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(25, 33, 0), new ScheduledTask(33, 40, 0)};
        int[] expectedProcessorEndTimes = new int[]{56, 8};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(37, 45, 0), new ScheduledTask(28, 34, 0), new ScheduledTask(10, 18, 0), new ScheduledTask(34, 37, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(18, 24, 0), new ScheduledTask(24, 28, 0), new ScheduledTask(2, 4, 0), new ScheduledTask(4, 10, 0), new ScheduledTask(0, 2, 0)};
        int[] expectedProcessorEndTimes = new int[]{45, 7};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(37, 45, 0), new ScheduledTask(28, 34, 0), new ScheduledTask(10, 18, 0), new ScheduledTask(34, 37, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(18, 24, 0), new ScheduledTask(24, 28, 0), new ScheduledTask(2, 4, 0), new ScheduledTask(4, 10, 0), new ScheduledTask(0, 2, 0)};
        int[] expectedProcessorEndTimes = new int[]{45, 7};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(37, 45, 0), new ScheduledTask(28, 34, 0), new ScheduledTask(10, 18, 0), new ScheduledTask(34, 37, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(18, 24, 0), new ScheduledTask(24, 28, 0), new ScheduledTask(2, 4, 0), new ScheduledTask(4, 10, 0), new ScheduledTask(0, 2, 0)};
        int[] expectedProcessorEndTimes = new int[]{45, 7};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(42, 47, 0), new ScheduledTask(19, 21, 0), new ScheduledTask(33, 42, 0), new ScheduledTask(21, 27, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(7, 10, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(27, 30, 0), new ScheduledTask(5, 11, 1)};
        int[] expectedProcessorEndTimes = new int[]{47, 11};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(42, 47, 0), new ScheduledTask(19, 21, 0), new ScheduledTask(33, 42, 0), new ScheduledTask(21, 27, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(7, 10, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(0, 5, 2), new ScheduledTask(27, 30, 0), new ScheduledTask(0, 6, 1)};
        int[] expectedProcessorEndTimes = new int[]{47, 6, 5};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(42, 47, 0), new ScheduledTask(19, 21, 0), new ScheduledTask(33, 42, 0), new ScheduledTask(21, 27, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(7, 10, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(0, 5, 2), new ScheduledTask(27, 30, 0), new ScheduledTask(0, 6, 1)};
        int[] expectedProcessorEndTimes = new int[]{47, 6, 5};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(46, 51, 0), new ScheduledTask(29, 38, 0), new ScheduledTask(38, 46, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(2, 4, 0), new ScheduledTask(13, 19, 0), new ScheduledTask(4, 7, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(19, 29, 0), new ScheduledTask(7, 13, 0)};
        int[] expectedProcessorEndTimes = new int[]{51, 4};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(46, 51, 0), new ScheduledTask(29, 38, 0), new ScheduledTask(38, 46, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(2, 4, 0), new ScheduledTask(13, 19, 0), new ScheduledTask(4, 7, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(19, 29, 0), new ScheduledTask(7, 13, 0)};
        int[] expectedProcessorEndTimes = new int[]{51, 4};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(46, 51, 0), new ScheduledTask(29, 38, 0), new ScheduledTask(38, 46, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(2, 4, 0), new ScheduledTask(13, 19, 0), new ScheduledTask(4, 7, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(19, 29, 0), new ScheduledTask(7, 13, 0)};
        int[] expectedProcessorEndTimes = new int[]{51, 4};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot04_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.04_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 44;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(39, 44, 0), new ScheduledTask(17, 26, 0), new ScheduledTask(12, 14, 1), new ScheduledTask(26, 35, 0), new ScheduledTask(11, 17, 0), new ScheduledTask(5, 11, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(4, 7, 1), new ScheduledTask(7, 12, 1), new ScheduledTask(0, 4, 1)};
        int[] expectedProcessorEndTimes = new int[]{44, 14};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot04_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.04_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 44;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(39, 44, 0), new ScheduledTask(17, 26, 0), new ScheduledTask(12, 14, 1), new ScheduledTask(26, 35, 0), new ScheduledTask(11, 17, 0), new ScheduledTask(5, 11, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(4, 7, 1), new ScheduledTask(7, 12, 1), new ScheduledTask(0, 4, 1)};
        int[] expectedProcessorEndTimes = new int[]{44, 14};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot04_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.04_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 44;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(39, 44, 0), new ScheduledTask(17, 26, 0), new ScheduledTask(12, 14, 1), new ScheduledTask(26, 35, 0), new ScheduledTask(11, 17, 0), new ScheduledTask(5, 11, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(4, 7, 1), new ScheduledTask(7, 12, 1), new ScheduledTask(0, 4, 1)};
        int[] expectedProcessorEndTimes = new int[]{44, 14};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_2dot02_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_2.02_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 36;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(28, 36, 0), new ScheduledTask(13, 22, 0), new ScheduledTask(17, 23, 1), new ScheduledTask(0, 5, 3), new ScheduledTask(0, 4, 0), new ScheduledTask(4, 10, 0), new ScheduledTask(0, 8, 2), new ScheduledTask(0, 5, 1), new ScheduledTask(9, 17, 1), new ScheduledTask(5, 9, 1)};
        int[] expectedProcessorEndTimes = new int[]{36, 23, 8, 5};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_2dot02_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_2.02_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 39;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(31, 39, 0), new ScheduledTask(22, 31, 0), new ScheduledTask(18, 24, 1), new ScheduledTask(5, 10, 1), new ScheduledTask(4, 8, 0), new ScheduledTask(8, 14, 0), new ScheduledTask(14, 22, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(10, 18, 1), new ScheduledTask(0, 4, 0)};
        int[] expectedProcessorEndTimes = new int[]{39, 24};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_2dot02_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_2.02_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 36;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(28, 36, 0), new ScheduledTask(13, 22, 0), new ScheduledTask(17, 23, 1), new ScheduledTask(0, 5, 3), new ScheduledTask(0, 4, 0), new ScheduledTask(4, 10, 0), new ScheduledTask(0, 8, 2), new ScheduledTask(0, 5, 1), new ScheduledTask(9, 17, 1), new ScheduledTask(5, 9, 1)};
        int[] expectedProcessorEndTimes = new int[]{36, 23, 8, 5};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_2dot02_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_2.02_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 36;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(28, 36, 0), new ScheduledTask(13, 22, 0), new ScheduledTask(17, 23, 1), new ScheduledTask(0, 5, 3), new ScheduledTask(0, 4, 0), new ScheduledTask(4, 10, 0), new ScheduledTask(0, 8, 2), new ScheduledTask(0, 5, 1), new ScheduledTask(9, 17, 1), new ScheduledTask(5, 9, 1)};
        int[] expectedProcessorEndTimes = new int[]{36, 23, 8, 5};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(58, 63, 0), new ScheduledTask(23, 28, 1), new ScheduledTask(24, 33, 0), new ScheduledTask(33, 43, 0), new ScheduledTask(13, 23, 1), new ScheduledTask(0, 6, 1), new ScheduledTask(6, 13, 1), new ScheduledTask(16, 24, 0), new ScheduledTask(0, 6, 0), new ScheduledTask(6, 16, 0)};
        int[] expectedProcessorEndTimes = new int[]{63, 28};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(58, 63, 0), new ScheduledTask(23, 28, 1), new ScheduledTask(24, 33, 0), new ScheduledTask(33, 43, 0), new ScheduledTask(13, 23, 1), new ScheduledTask(0, 6, 1), new ScheduledTask(6, 13, 1), new ScheduledTask(16, 24, 0), new ScheduledTask(0, 6, 0), new ScheduledTask(6, 16, 0)};
        int[] expectedProcessorEndTimes = new int[]{63, 28};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_9dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_9.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(58, 63, 0), new ScheduledTask(23, 28, 1), new ScheduledTask(24, 33, 0), new ScheduledTask(33, 43, 0), new ScheduledTask(13, 23, 1), new ScheduledTask(0, 6, 1), new ScheduledTask(6, 13, 1), new ScheduledTask(16, 24, 0), new ScheduledTask(0, 6, 0), new ScheduledTask(6, 16, 0)};
        int[] expectedProcessorEndTimes = new int[]{63, 28};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 278;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(200, 278, 0), new ScheduledTask(133, 200, 0), new ScheduledTask(123, 179, 1), new ScheduledTask(56, 123, 1), new ScheduledTask(100, 133, 0), new ScheduledTask(22, 100, 2), new ScheduledTask(0, 56, 1), new ScheduledTask(0, 44, 3), new ScheduledTask(0, 100, 0), new ScheduledTask(0, 22, 2)};
        int[] expectedProcessorEndTimes = new int[]{278, 179, 100, 44};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 344;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(266, 344, 0), new ScheduledTask(199, 266, 0), new ScheduledTask(201, 257, 1), new ScheduledTask(56, 123, 1), new ScheduledTask(166, 199, 0), new ScheduledTask(123, 201, 1), new ScheduledTask(0, 56, 1), new ScheduledTask(122, 166, 0), new ScheduledTask(22, 122, 0), new ScheduledTask(0, 22, 0)};
        int[] expectedProcessorEndTimes = new int[]{344, 257};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 278;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(200, 278, 0), new ScheduledTask(133, 200, 0), new ScheduledTask(123, 179, 1), new ScheduledTask(56, 123, 1), new ScheduledTask(100, 133, 0), new ScheduledTask(22, 100, 2), new ScheduledTask(0, 56, 1), new ScheduledTask(0, 44, 3), new ScheduledTask(0, 100, 0), new ScheduledTask(0, 22, 2)};
        int[] expectedProcessorEndTimes = new int[]{278, 179, 100, 44};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 278;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(200, 278, 0), new ScheduledTask(133, 200, 0), new ScheduledTask(123, 179, 1), new ScheduledTask(56, 123, 1), new ScheduledTask(100, 133, 0), new ScheduledTask(22, 100, 2), new ScheduledTask(0, 56, 1), new ScheduledTask(0, 44, 3), new ScheduledTask(0, 100, 0), new ScheduledTask(0, 22, 2)};
        int[] expectedProcessorEndTimes = new int[]{278, 179, 100, 44};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 38;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(27, 38, 0), new ScheduledTask(13, 17, 1), new ScheduledTask(14, 25, 0), new ScheduledTask(2, 13, 1), new ScheduledTask(4, 6, 2), new ScheduledTask(9, 14, 0), new ScheduledTask(2, 9, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(0, 4, 2), new ScheduledTask(0, 2, 0)};
        int[] expectedProcessorEndTimes = new int[]{38, 17, 6};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 40;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(29, 40, 0), new ScheduledTask(15, 19, 1), new ScheduledTask(18, 29, 0), new ScheduledTask(4, 15, 1), new ScheduledTask(11, 13, 0), new ScheduledTask(13, 18, 0), new ScheduledTask(4, 11, 0), new ScheduledTask(2, 4, 1), new ScheduledTask(0, 4, 0), new ScheduledTask(0, 2, 1)};
        int[] expectedProcessorEndTimes = new int[]{40, 19};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 38;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(27, 38, 0), new ScheduledTask(13, 17, 1), new ScheduledTask(14, 25, 0), new ScheduledTask(2, 13, 1), new ScheduledTask(4, 6, 2), new ScheduledTask(9, 14, 0), new ScheduledTask(2, 9, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(0, 4, 2), new ScheduledTask(0, 2, 0)};
        int[] expectedProcessorEndTimes = new int[]{38, 17, 6};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 38;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(27, 38, 0), new ScheduledTask(13, 17, 1), new ScheduledTask(14, 25, 0), new ScheduledTask(2, 13, 1), new ScheduledTask(4, 6, 2), new ScheduledTask(9, 14, 0), new ScheduledTask(2, 9, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(0, 4, 2), new ScheduledTask(0, 2, 0)};
        int[] expectedProcessorEndTimes = new int[]{38, 17, 6};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(47, 56, 0), new ScheduledTask(42, 47, 0), new ScheduledTask(29, 32, 0), new ScheduledTask(15, 19, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(32, 37, 0), new ScheduledTask(37, 42, 0), new ScheduledTask(19, 29, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(7, 15, 0)};
        int[] expectedProcessorEndTimes = new int[]{56, 10};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(47, 56, 0), new ScheduledTask(42, 47, 0), new ScheduledTask(29, 32, 0), new ScheduledTask(15, 19, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(32, 37, 0), new ScheduledTask(37, 42, 0), new ScheduledTask(19, 29, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(7, 15, 0)};
        int[] expectedProcessorEndTimes = new int[]{56, 10};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(47, 56, 0), new ScheduledTask(42, 47, 0), new ScheduledTask(29, 32, 0), new ScheduledTask(15, 19, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(32, 37, 0), new ScheduledTask(37, 42, 0), new ScheduledTask(19, 29, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(7, 15, 0)};
        int[] expectedProcessorEndTimes = new int[]{56, 10};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(47, 56, 0), new ScheduledTask(42, 47, 0), new ScheduledTask(29, 32, 0), new ScheduledTask(15, 19, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(32, 37, 0), new ScheduledTask(37, 42, 0), new ScheduledTask(19, 29, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(7, 15, 0)};
        int[] expectedProcessorEndTimes = new int[]{56, 10};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_2dot02_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_2.02_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 34;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(28, 34, 0), new ScheduledTask(16, 24, 0), new ScheduledTask(11, 15, 0), new ScheduledTask(24, 28, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(0, 5, 2), new ScheduledTask(0, 4, 3), new ScheduledTask(7, 15, 1), new ScheduledTask(0, 3, 0), new ScheduledTask(3, 11, 0)};
        int[] expectedProcessorEndTimes = new int[]{34, 15, 5, 4};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_2dot02_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_2.02_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(31, 37, 0), new ScheduledTask(17, 25, 0), new ScheduledTask(25, 29, 0), new ScheduledTask(18, 22, 1), new ScheduledTask(0, 7, 1), new ScheduledTask(8, 13, 0), new ScheduledTask(13, 17, 0), new ScheduledTask(0, 8, 0), new ScheduledTask(15, 18, 1), new ScheduledTask(7, 15, 1)};
        int[] expectedProcessorEndTimes = new int[]{37, 22};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_2dot02_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_2.02_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 34;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(28, 34, 0), new ScheduledTask(16, 24, 0), new ScheduledTask(11, 15, 0), new ScheduledTask(24, 28, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(0, 5, 2), new ScheduledTask(0, 4, 3), new ScheduledTask(7, 15, 1), new ScheduledTask(0, 3, 0), new ScheduledTask(3, 11, 0)};
        int[] expectedProcessorEndTimes = new int[]{34, 15, 5, 4};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_2dot02_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_2.02_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 34;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(28, 34, 0), new ScheduledTask(16, 24, 0), new ScheduledTask(11, 15, 0), new ScheduledTask(24, 28, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(0, 5, 2), new ScheduledTask(0, 4, 3), new ScheduledTask(7, 15, 1), new ScheduledTask(0, 3, 0), new ScheduledTask(3, 11, 0)};
        int[] expectedProcessorEndTimes = new int[]{34, 15, 5, 4};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 255;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(62, 89, 1), new ScheduledTask(88, 123, 0), new ScheduledTask(89, 124, 1), new ScheduledTask(124, 142, 1), new ScheduledTask(0, 27, 1), new ScheduledTask(142, 204, 1), new ScheduledTask(27, 62, 1), new ScheduledTask(123, 211, 0), new ScheduledTask(0, 88, 0), new ScheduledTask(211, 255, 0)};
        int[] expectedProcessorEndTimes = new int[]{255, 204};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 159;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(35, 62, 3), new ScheduledTask(0, 35, 2), new ScheduledTask(62, 97, 3), new ScheduledTask(88, 106, 1), new ScheduledTask(0, 27, 0), new ScheduledTask(35, 97, 2), new ScheduledTask(0, 35, 3), new ScheduledTask(27, 115, 0), new ScheduledTask(0, 88, 1), new ScheduledTask(115, 159, 0)};
        int[] expectedProcessorEndTimes = new int[]{159, 106, 97, 97};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 134;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 27, 3), new ScheduledTask(27, 62, 3), new ScheduledTask(27, 62, 4), new ScheduledTask(0, 18, 2), new ScheduledTask(0, 27, 4), new ScheduledTask(18, 80, 2), new ScheduledTask(0, 35, 5), new ScheduledTask(0, 88, 1), new ScheduledTask(0, 88, 0), new ScheduledTask(90, 134, 0)};
        int[] expectedProcessorEndTimes = new int[]{134, 88, 80, 62, 62, 35};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 286;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(159, 227, 1), new ScheduledTask(69, 92, 0), new ScheduledTask(92, 149, 0), new ScheduledTask(46, 69, 0), new ScheduledTask(91, 159, 1), new ScheduledTask(23, 46, 0), new ScheduledTask(0, 23, 0), new ScheduledTask(0, 91, 1), new ScheduledTask(149, 228, 0), new ScheduledTask(229, 286, 0)};
        int[] expectedProcessorEndTimes = new int[]{286, 227};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 182;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(57, 125, 0), new ScheduledTask(91, 114, 1), new ScheduledTask(0, 57, 0), new ScheduledTask(0, 23, 2), new ScheduledTask(46, 114, 3), new ScheduledTask(23, 46, 3), new ScheduledTask(0, 23, 3), new ScheduledTask(0, 91, 1), new ScheduledTask(23, 102, 2), new ScheduledTask(125, 182, 0)};
        int[] expectedProcessorEndTimes = new int[]{182, 114, 102, 114};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 148;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 68, 2), new ScheduledTask(46, 69, 5), new ScheduledTask(23, 80, 4), new ScheduledTask(23, 46, 5), new ScheduledTask(0, 68, 3), new ScheduledTask(0, 23, 5), new ScheduledTask(0, 23, 4), new ScheduledTask(0, 91, 0), new ScheduledTask(0, 79, 1), new ScheduledTask(91, 148, 0)};
        int[] expectedProcessorEndTimes = new int[]{148, 79, 68, 68, 80, 69};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(140, 168, 0), new ScheduledTask(84, 103, 0), new ScheduledTask(130, 223, 1), new ScheduledTask(168, 224, 0), new ScheduledTask(93, 130, 1), new ScheduledTask(103, 140, 0), new ScheduledTask(37, 93, 1), new ScheduledTask(0, 84, 0), new ScheduledTask(0, 37, 1), new ScheduledTask(226, 300, 0)};
        int[] expectedProcessorEndTimes = new int[]{300, 223};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 190;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(84, 112, 2), new ScheduledTask(0, 19, 1), new ScheduledTask(19, 112, 1), new ScheduledTask(56, 112, 3), new ScheduledTask(37, 74, 0), new ScheduledTask(74, 111, 0), new ScheduledTask(0, 56, 3), new ScheduledTask(0, 84, 2), new ScheduledTask(0, 37, 0), new ScheduledTask(116, 190, 0)};
        int[] expectedProcessorEndTimes = new int[]{190, 112, 112, 112};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 167;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 28, 4), new ScheduledTask(0, 19, 2), new ScheduledTask(0, 93, 0), new ScheduledTask(19, 75, 2), new ScheduledTask(28, 65, 4), new ScheduledTask(37, 74, 5), new ScheduledTask(0, 56, 3), new ScheduledTask(0, 84, 1), new ScheduledTask(0, 37, 5), new ScheduledTask(93, 167, 0)};
        int[] expectedProcessorEndTimes = new int[]{167, 84, 75, 56, 65, 74};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 245;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 16, 0), new ScheduledTask(55, 102, 1), new ScheduledTask(103, 127, 0), new ScheduledTask(87, 103, 0), new ScheduledTask(16, 87, 0), new ScheduledTask(0, 55, 1), new ScheduledTask(102, 133, 1), new ScheduledTask(133, 196, 1), new ScheduledTask(127, 198, 0), new ScheduledTask(198, 245, 0)};
        int[] expectedProcessorEndTimes = new int[]{245, 196};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 151;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 16, 3), new ScheduledTask(55, 102, 0), new ScheduledTask(71, 95, 1), new ScheduledTask(16, 32, 3), new ScheduledTask(0, 71, 1), new ScheduledTask(0, 55, 0), new ScheduledTask(0, 31, 2), new ScheduledTask(32, 95, 3), new ScheduledTask(31, 102, 2), new ScheduledTask(104, 151, 0)};
        int[] expectedProcessorEndTimes = new int[]{151, 95, 102, 95};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 120;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 16, 5), new ScheduledTask(0, 47, 4), new ScheduledTask(47, 71, 4), new ScheduledTask(55, 71, 3), new ScheduledTask(0, 71, 0), new ScheduledTask(0, 55, 3), new ScheduledTask(16, 47, 5), new ScheduledTask(0, 63, 2), new ScheduledTask(0, 71, 1), new ScheduledTask(73, 120, 0)};
        int[] expectedProcessorEndTimes = new int[]{120, 71, 63, 71, 71, 47};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 369;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 115, 1), new ScheduledTask(138, 230, 1), new ScheduledTask(230, 264, 1), new ScheduledTask(207, 264, 0), new ScheduledTask(115, 207, 0), new ScheduledTask(115, 138, 1), new ScheduledTask(23, 46, 0), new ScheduledTask(46, 115, 0), new ScheduledTask(0, 23, 0), new ScheduledTask(266, 369, 0)};
        int[] expectedProcessorEndTimes = new int[]{369, 264};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 244;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 115, 0), new ScheduledTask(46, 138, 1), new ScheduledTask(92, 126, 2), new ScheduledTask(69, 126, 3), new ScheduledTask(0, 92, 2), new ScheduledTask(115, 138, 0), new ScheduledTask(23, 46, 1), new ScheduledTask(0, 69, 3), new ScheduledTask(0, 23, 1), new ScheduledTask(141, 244, 0)};
        int[] expectedProcessorEndTimes = new int[]{244, 138, 126, 126};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 218;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 115, 0), new ScheduledTask(0, 92, 1), new ScheduledTask(46, 80, 5), new ScheduledTask(23, 80, 4), new ScheduledTask(0, 92, 2), new ScheduledTask(23, 46, 5), new ScheduledTask(0, 23, 5), new ScheduledTask(0, 69, 3), new ScheduledTask(0, 23, 4), new ScheduledTask(115, 218, 0)};
        int[] expectedProcessorEndTimes = new int[]{218, 92, 92, 69, 80, 80};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 216;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(120, 200, 0), new ScheduledTask(144, 192, 1), new ScheduledTask(56, 120, 0), new ScheduledTask(16, 64, 1), new ScheduledTask(16, 56, 0), new ScheduledTask(0, 16, 1), new ScheduledTask(64, 120, 1), new ScheduledTask(0, 16, 0), new ScheduledTask(120, 144, 1), new ScheduledTask(200, 216, 0)};
        int[] expectedProcessorEndTimes = new int[]{216, 192};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 120;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 80, 1), new ScheduledTask(48, 96, 3), new ScheduledTask(16, 80, 0), new ScheduledTask(0, 48, 3), new ScheduledTask(0, 40, 2), new ScheduledTask(80, 96, 1), new ScheduledTask(40, 96, 2), new ScheduledTask(0, 16, 0), new ScheduledTask(80, 104, 0), new ScheduledTask(104, 120, 0)};
        int[] expectedProcessorEndTimes = new int[]{120, 96, 96, 96};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 96;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 80, 0), new ScheduledTask(16, 64, 3), new ScheduledTask(0, 64, 1), new ScheduledTask(16, 64, 4), new ScheduledTask(24, 64, 5), new ScheduledTask(0, 16, 3), new ScheduledTask(0, 56, 2), new ScheduledTask(0, 16, 4), new ScheduledTask(0, 24, 5), new ScheduledTask(80, 96, 0)};
        int[] expectedProcessorEndTimes = new int[]{96, 64, 56, 64, 64, 64};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 301;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(180, 237, 1), new ScheduledTask(114, 179, 0), new ScheduledTask(49, 114, 0), new ScheduledTask(179, 244, 0), new ScheduledTask(57, 90, 1), new ScheduledTask(90, 123, 1), new ScheduledTask(0, 49, 0), new ScheduledTask(123, 180, 1), new ScheduledTask(0, 57, 1), new ScheduledTask(244, 301, 0)};
        int[] expectedProcessorEndTimes = new int[]{301, 237};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 182;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(65, 122, 2), new ScheduledTask(49, 114, 1), new ScheduledTask(0, 65, 2), new ScheduledTask(0, 65, 3), new ScheduledTask(57, 90, 0), new ScheduledTask(90, 123, 0), new ScheduledTask(0, 49, 1), new ScheduledTask(65, 122, 3), new ScheduledTask(0, 57, 0), new ScheduledTask(125, 182, 0)};
        int[] expectedProcessorEndTimes = new int[]{182, 114, 122, 122};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 163;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(49, 106, 0), new ScheduledTask(33, 98, 1), new ScheduledTask(0, 65, 2), new ScheduledTask(0, 65, 3), new ScheduledTask(0, 33, 1), new ScheduledTask(65, 98, 2), new ScheduledTask(0, 49, 0), new ScheduledTask(0, 57, 4), new ScheduledTask(0, 57, 5), new ScheduledTask(106, 163, 0)};
        int[] expectedProcessorEndTimes = new int[]{163, 98, 98, 65, 57, 57};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 321;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(77, 106, 1), new ScheduledTask(68, 126, 0), new ScheduledTask(39, 68, 0), new ScheduledTask(0, 39, 0), new ScheduledTask(154, 231, 1), new ScheduledTask(106, 154, 1), new ScheduledTask(126, 213, 0), new ScheduledTask(0, 77, 1), new ScheduledTask(213, 232, 0), new ScheduledTask(234, 321, 0)};
        int[] expectedProcessorEndTimes = new int[]{321, 231};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 212;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(77, 106, 2), new ScheduledTask(39, 97, 3), new ScheduledTask(0, 29, 1), new ScheduledTask(0, 39, 3), new ScheduledTask(48, 125, 0), new ScheduledTask(0, 48, 0), new ScheduledTask(29, 116, 1), new ScheduledTask(0, 77, 2), new ScheduledTask(97, 116, 3), new ScheduledTask(125, 212, 0)};
        int[] expectedProcessorEndTimes = new int[]{212, 116, 106, 116};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 174;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 29, 5), new ScheduledTask(19, 77, 3), new ScheduledTask(0, 29, 4), new ScheduledTask(29, 68, 5), new ScheduledTask(0, 77, 1), new ScheduledTask(29, 77, 4), new ScheduledTask(0, 87, 0), new ScheduledTask(0, 77, 2), new ScheduledTask(0, 19, 3), new ScheduledTask(87, 174, 0)};
        int[] expectedProcessorEndTimes = new int[]{174, 77, 77, 77, 77, 68};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 382;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(221, 298, 1), new ScheduledTask(77, 154, 1), new ScheduledTask(0, 86, 0), new ScheduledTask(86, 124, 0), new ScheduledTask(181, 238, 0), new ScheduledTask(124, 181, 0), new ScheduledTask(154, 221, 1), new ScheduledTask(238, 305, 0), new ScheduledTask(0, 77, 1), new ScheduledTask(305, 382, 0)};
        int[] expectedProcessorEndTimes = new int[]{382, 298};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 233;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(77, 154, 2), new ScheduledTask(0, 77, 2), new ScheduledTask(0, 86, 1), new ScheduledTask(0, 38, 0), new ScheduledTask(95, 152, 0), new ScheduledTask(38, 95, 0), new ScheduledTask(77, 144, 3), new ScheduledTask(86, 153, 1), new ScheduledTask(0, 77, 3), new ScheduledTask(156, 233, 0)};
        int[] expectedProcessorEndTimes = new int[]{233, 153, 154, 144};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 204;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(38, 115, 2), new ScheduledTask(0, 77, 3), new ScheduledTask(0, 86, 1), new ScheduledTask(0, 38, 2), new ScheduledTask(0, 57, 0), new ScheduledTask(0, 57, 5), new ScheduledTask(57, 124, 0), new ScheduledTask(57, 124, 5), new ScheduledTask(0, 77, 4), new ScheduledTask(127, 204, 0)};
        int[] expectedProcessorEndTimes = new int[]{204, 86, 115, 77, 77, 124};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 9;
        int expectedScheduleEndTime = 130;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 43, 6), new ScheduledTask(0, 36, 7), new ScheduledTask(0, 71, 0), new ScheduledTask(0, 71, 1), new ScheduledTask(0, 50, 5), new ScheduledTask(0, 64, 2), new ScheduledTask(0, 57, 3), new ScheduledTask(0, 14, 8), new ScheduledTask(0, 57, 4), new ScheduledTask(73, 130, 0)};
        int[] expectedProcessorEndTimes = new int[]{130, 71, 64, 57, 57, 50, 43, 36, 14};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 292;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 43, 0), new ScheduledTask(0, 36, 1), new ScheduledTask(157, 228, 1), new ScheduledTask(164, 235, 0), new ScheduledTask(57, 107, 0), new ScheduledTask(93, 157, 1), new ScheduledTask(36, 93, 1), new ScheduledTask(43, 57, 0), new ScheduledTask(107, 164, 0), new ScheduledTask(235, 292, 0)};
        int[] expectedProcessorEndTimes = new int[]{292, 228};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 178;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 43, 1), new ScheduledTask(0, 36, 0), new ScheduledTask(50, 121, 0), new ScheduledTask(43, 114, 1), new ScheduledTask(64, 114, 2), new ScheduledTask(0, 64, 2), new ScheduledTask(0, 57, 3), new ScheduledTask(36, 50, 0), new ScheduledTask(57, 114, 3), new ScheduledTask(121, 178, 0)};
        int[] expectedProcessorEndTimes = new int[]{178, 114, 114, 114};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 130;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 43, 6), new ScheduledTask(14, 50, 7), new ScheduledTask(0, 71, 0), new ScheduledTask(0, 71, 1), new ScheduledTask(0, 50, 5), new ScheduledTask(0, 64, 2), new ScheduledTask(0, 57, 3), new ScheduledTask(0, 14, 7), new ScheduledTask(0, 57, 4), new ScheduledTask(73, 130, 0)};
        int[] expectedProcessorEndTimes = new int[]{130, 71, 64, 57, 57, 50, 43, 50};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 283;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(56, 127, 0), new ScheduledTask(157, 207, 1), new ScheduledTask(0, 28, 0), new ScheduledTask(127, 198, 0), new ScheduledTask(0, 50, 1), new ScheduledTask(28, 56, 0), new ScheduledTask(50, 93, 1), new ScheduledTask(93, 157, 1), new ScheduledTask(198, 212, 0), new ScheduledTask(212, 283, 0)};
        int[] expectedProcessorEndTimes = new int[]{283, 207};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 184;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(42, 113, 0), new ScheduledTask(50, 100, 3), new ScheduledTask(14, 42, 0), new ScheduledTask(28, 99, 1), new ScheduledTask(0, 50, 3), new ScheduledTask(0, 28, 1), new ScheduledTask(0, 43, 2), new ScheduledTask(43, 107, 2), new ScheduledTask(0, 14, 0), new ScheduledTask(113, 184, 0)};
        int[] expectedProcessorEndTimes = new int[]{184, 99, 107, 100};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 149;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 71, 1), new ScheduledTask(28, 78, 0), new ScheduledTask(0, 28, 5), new ScheduledTask(0, 71, 2), new ScheduledTask(0, 50, 4), new ScheduledTask(0, 28, 0), new ScheduledTask(28, 71, 5), new ScheduledTask(0, 64, 3), new ScheduledTask(50, 64, 4), new ScheduledTask(78, 149, 0)};
        int[] expectedProcessorEndTimes = new int[]{149, 71, 71, 64, 64, 71};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot91_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.91_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 33;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(2, 9, 1), new ScheduledTask(15, 24, 0), new ScheduledTask(9, 12, 1), new ScheduledTask(5, 15, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(12, 22, 1), new ScheduledTask(0, 2, 1), new ScheduledTask(22, 24, 1), new ScheduledTask(24, 26, 0), new ScheduledTask(26, 33, 0)};
        int[] expectedProcessorEndTimes = new int[]{33, 24};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot91_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.91_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 23;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 3), new ScheduledTask(2, 11, 2), new ScheduledTask(0, 3, 1), new ScheduledTask(5, 15, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(3, 13, 1), new ScheduledTask(0, 2, 2), new ScheduledTask(11, 13, 2), new ScheduledTask(7, 9, 3), new ScheduledTask(16, 23, 0)};
        int[] expectedProcessorEndTimes = new int[]{23, 13, 13, 9};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot91_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.91_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 23;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 3), new ScheduledTask(0, 9, 2), new ScheduledTask(2, 5, 4), new ScheduledTask(5, 15, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 2, 4), new ScheduledTask(2, 4, 5), new ScheduledTask(0, 2, 5), new ScheduledTask(16, 23, 0)};
        int[] expectedProcessorEndTimes = new int[]{23, 10, 9, 7, 5, 4};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot96_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.96_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 41;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(13, 21, 1), new ScheduledTask(24, 28, 1), new ScheduledTask(21, 24, 1), new ScheduledTask(0, 13, 0), new ScheduledTask(9, 13, 1), new ScheduledTask(13, 18, 0), new ScheduledTask(4, 9, 1), new ScheduledTask(0, 4, 1), new ScheduledTask(18, 31, 0), new ScheduledTask(32, 41, 0)};
        int[] expectedProcessorEndTimes = new int[]{41, 28};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot96_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.96_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(4, 12, 2), new ScheduledTask(12, 16, 2), new ScheduledTask(17, 20, 0), new ScheduledTask(0, 13, 0), new ScheduledTask(13, 17, 0), new ScheduledTask(5, 10, 3), new ScheduledTask(0, 5, 3), new ScheduledTask(0, 4, 2), new ScheduledTask(0, 13, 1), new ScheduledTask(20, 29, 0)};
        int[] expectedProcessorEndTimes = new int[]{29, 13, 16, 10};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot96_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.96_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 2), new ScheduledTask(8, 12, 5), new ScheduledTask(0, 3, 0), new ScheduledTask(3, 16, 0), new ScheduledTask(4, 8, 5), new ScheduledTask(0, 5, 3), new ScheduledTask(0, 5, 4), new ScheduledTask(0, 4, 5), new ScheduledTask(0, 13, 1), new ScheduledTask(20, 29, 0)};
        int[] expectedProcessorEndTimes = new int[]{29, 13, 8, 5, 5, 12};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot98_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.98_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 38;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(16, 25, 0), new ScheduledTask(18, 27, 1), new ScheduledTask(7, 16, 0), new ScheduledTask(25, 31, 0), new ScheduledTask(3, 7, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 3, 0), new ScheduledTask(10, 15, 1), new ScheduledTask(15, 18, 1), new ScheduledTask(31, 38, 0)};
        int[] expectedProcessorEndTimes = new int[]{38, 27};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot98_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.98_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 25;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(9, 18, 0), new ScheduledTask(5, 14, 2), new ScheduledTask(0, 9, 0), new ScheduledTask(7, 13, 3), new ScheduledTask(3, 7, 3), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 3, 3), new ScheduledTask(0, 5, 2), new ScheduledTask(10, 13, 1), new ScheduledTask(18, 25, 0)};
        int[] expectedProcessorEndTimes = new int[]{25, 13, 14, 13};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot98_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.98_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 24;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 1), new ScheduledTask(3, 12, 2), new ScheduledTask(0, 9, 3), new ScheduledTask(3, 9, 4), new ScheduledTask(0, 4, 0), new ScheduledTask(4, 14, 0), new ScheduledTask(0, 3, 4), new ScheduledTask(0, 5, 5), new ScheduledTask(0, 3, 2), new ScheduledTask(17, 24, 0)};
        int[] expectedProcessorEndTimes = new int[]{24, 9, 12, 9, 9, 5};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 13, 0), new ScheduledTask(8, 13, 1), new ScheduledTask(13, 15, 1), new ScheduledTask(0, 8, 1), new ScheduledTask(15, 20, 1), new ScheduledTask(20, 22, 1), new ScheduledTask(13, 18, 0), new ScheduledTask(18, 24, 0), new ScheduledTask(24, 31, 0)};
        int[] expectedProcessorEndTimes = new int[]{31, 22};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 22;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 3), new ScheduledTask(0, 10, 0), new ScheduledTask(3, 8, 3), new ScheduledTask(8, 10, 1), new ScheduledTask(0, 8, 1), new ScheduledTask(6, 11, 2), new ScheduledTask(10, 12, 1), new ScheduledTask(10, 15, 0), new ScheduledTask(0, 6, 2), new ScheduledTask(15, 22, 0)};
        int[] expectedProcessorEndTimes = new int[]{22, 12, 11, 8};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 22;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 13, 0), new ScheduledTask(0, 5, 3), new ScheduledTask(2, 4, 4), new ScheduledTask(0, 8, 1), new ScheduledTask(4, 9, 4), new ScheduledTask(0, 2, 4), new ScheduledTask(0, 5, 5), new ScheduledTask(0, 6, 2), new ScheduledTask(15, 22, 0)};
        int[] expectedProcessorEndTimes = new int[]{22, 8, 6, 5, 9, 5};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_1dot00_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.00_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 26;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(6, 16, 0), new ScheduledTask(0, 4, 5), new ScheduledTask(0, 4, 6), new ScheduledTask(0, 7, 2), new ScheduledTask(0, 5, 4), new ScheduledTask(0, 6, 0), new ScheduledTask(0, 2, 7), new ScheduledTask(0, 8, 1), new ScheduledTask(0, 7, 3), new ScheduledTask(17, 26, 0)};
        int[] expectedProcessorEndTimes = new int[]{26, 8, 7, 7, 5, 4, 4, 2};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_1dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(4, 14, 0), new ScheduledTask(0, 4, 0), new ScheduledTask(22, 26, 1), new ScheduledTask(13, 20, 1), new ScheduledTask(22, 27, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(20, 22, 1), new ScheduledTask(14, 22, 0), new ScheduledTask(6, 13, 1), new ScheduledTask(28, 37, 0)};
        int[] expectedProcessorEndTimes = new int[]{37, 26};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_1dot00_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.00_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 26;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(6, 16, 0), new ScheduledTask(0, 4, 3), new ScheduledTask(10, 14, 1), new ScheduledTask(5, 12, 2), new ScheduledTask(0, 5, 2), new ScheduledTask(0, 6, 0), new ScheduledTask(8, 10, 1), new ScheduledTask(0, 8, 1), new ScheduledTask(4, 11, 3), new ScheduledTask(17, 26, 0)};
        int[] expectedProcessorEndTimes = new int[]{26, 14, 12, 11};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_1dot00_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.00_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 26;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(6, 16, 0), new ScheduledTask(0, 4, 5), new ScheduledTask(0, 4, 6), new ScheduledTask(0, 7, 2), new ScheduledTask(0, 5, 4), new ScheduledTask(0, 6, 0), new ScheduledTask(0, 2, 7), new ScheduledTask(0, 8, 1), new ScheduledTask(0, 7, 3), new ScheduledTask(17, 26, 0)};
        int[] expectedProcessorEndTimes = new int[]{26, 8, 7, 7, 5, 4, 4, 2};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 34;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(19, 23, 0), new ScheduledTask(6, 11, 1), new ScheduledTask(11, 17, 1), new ScheduledTask(0, 6, 1), new ScheduledTask(17, 19, 0), new ScheduledTask(7, 17, 0), new ScheduledTask(17, 23, 1), new ScheduledTask(0, 7, 0), new ScheduledTask(23, 27, 0), new ScheduledTask(27, 34, 0)};
        int[] expectedProcessorEndTimes = new int[]{34, 23};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 24;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(6, 10, 2), new ScheduledTask(0, 5, 1), new ScheduledTask(7, 13, 1), new ScheduledTask(0, 6, 2), new ScheduledTask(5, 7, 1), new ScheduledTask(7, 17, 0), new ScheduledTask(0, 6, 3), new ScheduledTask(0, 7, 0), new ScheduledTask(10, 14, 2), new ScheduledTask(17, 24, 0)};
        int[] expectedProcessorEndTimes = new int[]{24, 13, 14, 6};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 24;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(2, 6, 5), new ScheduledTask(0, 5, 4), new ScheduledTask(0, 6, 1), new ScheduledTask(0, 6, 2), new ScheduledTask(0, 2, 5), new ScheduledTask(7, 17, 0), new ScheduledTask(4, 10, 3), new ScheduledTask(0, 7, 0), new ScheduledTask(0, 4, 3), new ScheduledTask(17, 24, 0)};
        int[] expectedProcessorEndTimes = new int[]{24, 6, 6, 10, 5, 6};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_1dot02_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.02_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(17, 20, 1), new ScheduledTask(5, 13, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(12, 17, 1), new ScheduledTask(21, 29, 0), new ScheduledTask(6, 12, 1), new ScheduledTask(0, 5, 0), new ScheduledTask(13, 21, 0), new ScheduledTask(20, 25, 1), new ScheduledTask(29, 31, 0)};
        int[] expectedProcessorEndTimes = new int[]{31, 25};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_1dot02_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.02_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 18;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(12, 15, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(0, 6, 0), new ScheduledTask(0, 5, 2), new ScheduledTask(5, 13, 2), new ScheduledTask(6, 12, 0), new ScheduledTask(0, 5, 3), new ScheduledTask(5, 13, 3), new ScheduledTask(8, 13, 1), new ScheduledTask(16, 18, 0)};
        int[] expectedProcessorEndTimes = new int[]{18, 13, 13, 13};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_1dot02_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.02_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 16;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 2), new ScheduledTask(0, 8, 1), new ScheduledTask(0, 6, 0), new ScheduledTask(0, 5, 4), new ScheduledTask(3, 11, 2), new ScheduledTask(6, 12, 0), new ScheduledTask(0, 5, 5), new ScheduledTask(0, 8, 3), new ScheduledTask(5, 10, 4), new ScheduledTask(14, 16, 0)};
        int[] expectedProcessorEndTimes = new int[]{16, 8, 11, 8, 10, 5};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(15, 18, 1), new ScheduledTask(10, 15, 1), new ScheduledTask(18, 23, 1), new ScheduledTask(20, 24, 0), new ScheduledTask(7, 17, 0), new ScheduledTask(5, 10, 1), new ScheduledTask(0, 5, 1), new ScheduledTask(17, 20, 0), new ScheduledTask(25, 31, 0)};
        int[] expectedProcessorEndTimes = new int[]{31, 23};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 22;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 1), new ScheduledTask(5, 8, 2), new ScheduledTask(10, 15, 0), new ScheduledTask(8, 13, 2), new ScheduledTask(7, 11, 1), new ScheduledTask(0, 10, 0), new ScheduledTask(0, 5, 2), new ScheduledTask(3, 8, 3), new ScheduledTask(0, 3, 3), new ScheduledTask(16, 22, 0)};
        int[] expectedProcessorEndTimes = new int[]{22, 11, 13, 8};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 22;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 1), new ScheduledTask(0, 3, 5), new ScheduledTask(0, 5, 2), new ScheduledTask(5, 10, 3), new ScheduledTask(3, 7, 5), new ScheduledTask(3, 13, 0), new ScheduledTask(0, 5, 3), new ScheduledTask(0, 5, 4), new ScheduledTask(0, 3, 0), new ScheduledTask(16, 22, 0)};
        int[] expectedProcessorEndTimes = new int[]{22, 7, 5, 10, 5, 7};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_1dot05_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.05_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 30;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(7, 14, 1), new ScheduledTask(21, 26, 1), new ScheduledTask(3, 7, 1), new ScheduledTask(2, 10, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(19, 28, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(14, 21, 1), new ScheduledTask(28, 30, 0)};
        int[] expectedProcessorEndTimes = new int[]{30, 26};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_1dot05_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.05_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 19;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(3, 10, 0), new ScheduledTask(10, 15, 3), new ScheduledTask(0, 4, 1), new ScheduledTask(2, 10, 3), new ScheduledTask(0, 3, 0), new ScheduledTask(4, 13, 1), new ScheduledTask(0, 2, 3), new ScheduledTask(0, 9, 2), new ScheduledTask(10, 17, 0), new ScheduledTask(17, 19, 0)};
        int[] expectedProcessorEndTimes = new int[]{19, 13, 9, 15};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_1dot05_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.05_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 17;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 3), new ScheduledTask(5, 10, 5), new ScheduledTask(0, 4, 0), new ScheduledTask(0, 8, 2), new ScheduledTask(2, 5, 5), new ScheduledTask(4, 13, 0), new ScheduledTask(0, 2, 5), new ScheduledTask(0, 9, 1), new ScheduledTask(0, 7, 4), new ScheduledTask(15, 17, 0)};
        int[] expectedProcessorEndTimes = new int[]{17, 9, 8, 7, 7, 10};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_1dot06_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.06_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(4, 12, 0), new ScheduledTask(14, 17, 1), new ScheduledTask(17, 24, 0), new ScheduledTask(0, 4, 0), new ScheduledTask(8, 11, 1), new ScheduledTask(11, 14, 1), new ScheduledTask(0, 8, 1), new ScheduledTask(17, 23, 1), new ScheduledTask(12, 17, 0), new ScheduledTask(25, 31, 0)};
        int[] expectedProcessorEndTimes = new int[]{31, 23};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_1dot06_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.06_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 22;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(8, 16, 0), new ScheduledTask(0, 3, 3), new ScheduledTask(3, 10, 1), new ScheduledTask(3, 7, 2), new ScheduledTask(0, 3, 2), new ScheduledTask(0, 3, 1), new ScheduledTask(0, 8, 0), new ScheduledTask(7, 13, 2), new ScheduledTask(3, 8, 3), new ScheduledTask(16, 22, 0)};
        int[] expectedProcessorEndTimes = new int[]{22, 10, 13, 8};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_1dot06_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.06_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 21;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 1), new ScheduledTask(11, 14, 0), new ScheduledTask(0, 7, 2), new ScheduledTask(0, 4, 5), new ScheduledTask(8, 11, 0), new ScheduledTask(0, 3, 3), new ScheduledTask(0, 8, 0), new ScheduledTask(3, 9, 3), new ScheduledTask(0, 5, 4), new ScheduledTask(15, 21, 0)};
        int[] expectedProcessorEndTimes = new int[]{21, 8, 7, 9, 5, 4};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_1dot07_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.07_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(17, 27, 0), new ScheduledTask(8, 11, 0), new ScheduledTask(14, 17, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(0, 4, 0), new ScheduledTask(7, 16, 1), new ScheduledTask(4, 8, 0), new ScheduledTask(16, 25, 1), new ScheduledTask(11, 14, 0), new ScheduledTask(28, 31, 0)};
        int[] expectedProcessorEndTimes = new int[]{31, 25};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_1dot07_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.07_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 20;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 1), new ScheduledTask(11, 14, 0), new ScheduledTask(9, 12, 2), new ScheduledTask(4, 11, 0), new ScheduledTask(0, 4, 0), new ScheduledTask(0, 9, 2), new ScheduledTask(0, 4, 3), new ScheduledTask(4, 13, 3), new ScheduledTask(14, 17, 0), new ScheduledTask(17, 20, 0)};
        int[] expectedProcessorEndTimes = new int[]{20, 10, 12, 13};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_1dot07_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.07_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 18;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 1), new ScheduledTask(0, 3, 0), new ScheduledTask(12, 15, 0), new ScheduledTask(0, 7, 3), new ScheduledTask(0, 4, 4), new ScheduledTask(3, 12, 0), new ScheduledTask(0, 4, 5), new ScheduledTask(3, 12, 2), new ScheduledTask(0, 3, 2), new ScheduledTask(15, 18, 0)};
        int[] expectedProcessorEndTimes = new int[]{18, 10, 12, 7, 4, 4};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 44;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(16, 18, 0), new ScheduledTask(2, 7, 0), new ScheduledTask(33, 37, 0), new ScheduledTask(14, 16, 0), new ScheduledTask(18, 23, 0), new ScheduledTask(23, 33, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(7, 14, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(37, 44, 0)};
        int[] expectedProcessorEndTimes = new int[]{44, 6};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 44;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(16, 18, 0), new ScheduledTask(2, 7, 0), new ScheduledTask(0, 4, 2), new ScheduledTask(14, 16, 0), new ScheduledTask(18, 23, 0), new ScheduledTask(23, 33, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(7, 14, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(37, 44, 0)};
        int[] expectedProcessorEndTimes = new int[]{44, 6, 4};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 44;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(16, 18, 0), new ScheduledTask(2, 7, 0), new ScheduledTask(0, 4, 2), new ScheduledTask(14, 16, 0), new ScheduledTask(18, 23, 0), new ScheduledTask(23, 33, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(7, 14, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(37, 44, 0)};
        int[] expectedProcessorEndTimes = new int[]{44, 6, 4};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(24, 32, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(19, 24, 0), new ScheduledTask(7, 11, 0), new ScheduledTask(13, 15, 0), new ScheduledTask(4, 12, 1), new ScheduledTask(11, 13, 0), new ScheduledTask(15, 19, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(34, 37, 0)};
        int[] expectedProcessorEndTimes = new int[]{37, 12};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(24, 32, 0), new ScheduledTask(0, 4, 2), new ScheduledTask(19, 24, 0), new ScheduledTask(7, 11, 0), new ScheduledTask(13, 15, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(11, 13, 0), new ScheduledTask(15, 19, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(34, 37, 0)};
        int[] expectedProcessorEndTimes = new int[]{37, 8, 4};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(24, 32, 0), new ScheduledTask(0, 4, 2), new ScheduledTask(19, 24, 0), new ScheduledTask(7, 11, 0), new ScheduledTask(13, 15, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(11, 13, 0), new ScheduledTask(15, 19, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(34, 37, 0)};
        int[] expectedProcessorEndTimes = new int[]{37, 8, 4};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(38, 40, 0), new ScheduledTask(7, 15, 1), new ScheduledTask(3, 12, 0), new ScheduledTask(28, 38, 0), new ScheduledTask(24, 28, 0), new ScheduledTask(12, 22, 0), new ScheduledTask(22, 24, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(0, 3, 0), new ScheduledTask(41, 45, 0)};
        int[] expectedProcessorEndTimes = new int[]{45, 15};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 42;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 3), new ScheduledTask(0, 8, 1), new ScheduledTask(9, 18, 0), new ScheduledTask(28, 38, 0), new ScheduledTask(5, 9, 0), new ScheduledTask(18, 28, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(0, 7, 2), new ScheduledTask(2, 5, 0), new ScheduledTask(38, 42, 0)};
        int[] expectedProcessorEndTimes = new int[]{42, 8, 7, 2};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 42;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 3), new ScheduledTask(0, 8, 1), new ScheduledTask(9, 18, 0), new ScheduledTask(28, 38, 0), new ScheduledTask(5, 9, 0), new ScheduledTask(18, 28, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(0, 7, 2), new ScheduledTask(2, 5, 0), new ScheduledTask(38, 42, 0)};
        int[] expectedProcessorEndTimes = new int[]{42, 8, 7, 2};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot00_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.00_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(46, 49, 0), new ScheduledTask(49, 53, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(32, 38, 0), new ScheduledTask(17, 25, 0), new ScheduledTask(38, 46, 0), new ScheduledTask(25, 32, 0), new ScheduledTask(10, 17, 0), new ScheduledTask(54, 64, 0)};
        int[] expectedProcessorEndTimes = new int[]{64, 9};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot00_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.00_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 3, 3), new ScheduledTask(0, 4, 2), new ScheduledTask(0, 9, 1), new ScheduledTask(32, 38, 0), new ScheduledTask(17, 25, 0), new ScheduledTask(38, 46, 0), new ScheduledTask(25, 32, 0), new ScheduledTask(10, 17, 0), new ScheduledTask(54, 64, 0)};
        int[] expectedProcessorEndTimes = new int[]{64, 9, 4, 3};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot00_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.00_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 3, 3), new ScheduledTask(0, 4, 2), new ScheduledTask(0, 9, 1), new ScheduledTask(32, 38, 0), new ScheduledTask(17, 25, 0), new ScheduledTask(38, 46, 0), new ScheduledTask(25, 32, 0), new ScheduledTask(10, 17, 0), new ScheduledTask(54, 64, 0)};
        int[] expectedProcessorEndTimes = new int[]{64, 9, 4, 3};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(4, 11, 1), new ScheduledTask(25, 33, 0), new ScheduledTask(10, 17, 0), new ScheduledTask(2, 5, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(17, 25, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(33, 42, 0), new ScheduledTask(5, 10, 0), new ScheduledTask(42, 46, 0)};
        int[] expectedProcessorEndTimes = new int[]{46, 11};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 1), new ScheduledTask(25, 33, 0), new ScheduledTask(10, 17, 0), new ScheduledTask(2, 5, 0), new ScheduledTask(0, 4, 2), new ScheduledTask(17, 25, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(33, 42, 0), new ScheduledTask(5, 10, 0), new ScheduledTask(42, 46, 0)};
        int[] expectedProcessorEndTimes = new int[]{46, 7, 4};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 1), new ScheduledTask(25, 33, 0), new ScheduledTask(10, 17, 0), new ScheduledTask(2, 5, 0), new ScheduledTask(0, 4, 2), new ScheduledTask(17, 25, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(33, 42, 0), new ScheduledTask(5, 10, 0), new ScheduledTask(42, 46, 0)};
        int[] expectedProcessorEndTimes = new int[]{46, 7, 4};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 1), new ScheduledTask(44, 52, 0), new ScheduledTask(12, 22, 0), new ScheduledTask(22, 27, 0), new ScheduledTask(6, 12, 0), new ScheduledTask(52, 56, 0), new ScheduledTask(0, 6, 0), new ScheduledTask(36, 44, 0), new ScheduledTask(27, 36, 0), new ScheduledTask(56, 64, 0)};
        int[] expectedProcessorEndTimes = new int[]{64, 10};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 1), new ScheduledTask(44, 52, 0), new ScheduledTask(12, 22, 0), new ScheduledTask(22, 27, 0), new ScheduledTask(6, 12, 0), new ScheduledTask(0, 4, 2), new ScheduledTask(0, 6, 0), new ScheduledTask(36, 44, 0), new ScheduledTask(27, 36, 0), new ScheduledTask(56, 64, 0)};
        int[] expectedProcessorEndTimes = new int[]{64, 10, 4};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 1), new ScheduledTask(44, 52, 0), new ScheduledTask(12, 22, 0), new ScheduledTask(22, 27, 0), new ScheduledTask(6, 12, 0), new ScheduledTask(0, 4, 2), new ScheduledTask(0, 6, 0), new ScheduledTask(36, 44, 0), new ScheduledTask(27, 36, 0), new ScheduledTask(56, 64, 0)};
        int[] expectedProcessorEndTimes = new int[]{64, 10, 4};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot02_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.02_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(15, 25, 0), new ScheduledTask(10, 12, 1), new ScheduledTask(33, 39, 0), new ScheduledTask(39, 41, 0), new ScheduledTask(25, 27, 0), new ScheduledTask(27, 33, 0), new ScheduledTask(8, 15, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(42, 46, 0)};
        int[] expectedProcessorEndTimes = new int[]{46, 12};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot02_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.02_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(15, 25, 0), new ScheduledTask(0, 2, 2), new ScheduledTask(33, 39, 0), new ScheduledTask(0, 2, 3), new ScheduledTask(25, 27, 0), new ScheduledTask(27, 33, 0), new ScheduledTask(8, 15, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(42, 46, 0)};
        int[] expectedProcessorEndTimes = new int[]{46, 10, 2, 2};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot02_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.02_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(15, 25, 0), new ScheduledTask(0, 2, 2), new ScheduledTask(33, 39, 0), new ScheduledTask(0, 2, 3), new ScheduledTask(25, 27, 0), new ScheduledTask(27, 33, 0), new ScheduledTask(8, 15, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(42, 46, 0)};
        int[] expectedProcessorEndTimes = new int[]{46, 10, 2, 2};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot02_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.02_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(36, 43, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(43, 47, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(26, 36, 0), new ScheduledTask(4, 12, 1), new ScheduledTask(19, 26, 0), new ScheduledTask(7, 9, 0), new ScheduledTask(9, 19, 0), new ScheduledTask(47, 53, 0)};
        int[] expectedProcessorEndTimes = new int[]{53, 12};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot02_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.02_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(36, 43, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(43, 47, 0), new ScheduledTask(0, 4, 2), new ScheduledTask(26, 36, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(19, 26, 0), new ScheduledTask(7, 9, 0), new ScheduledTask(9, 19, 0), new ScheduledTask(47, 53, 0)};
        int[] expectedProcessorEndTimes = new int[]{53, 8, 4};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot02_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.02_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(36, 43, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(43, 47, 0), new ScheduledTask(0, 4, 2), new ScheduledTask(26, 36, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(19, 26, 0), new ScheduledTask(7, 9, 0), new ScheduledTask(9, 19, 0), new ScheduledTask(47, 53, 0)};
        int[] expectedProcessorEndTimes = new int[]{53, 8, 4};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(26, 34, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(13, 19, 0), new ScheduledTask(34, 44, 0), new ScheduledTask(4, 9, 1), new ScheduledTask(19, 26, 0), new ScheduledTask(7, 13, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(2, 7, 0), new ScheduledTask(45, 55, 0)};
        int[] expectedProcessorEndTimes = new int[]{55, 9};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 10, 0), new ScheduledTask(15, 21, 0), new ScheduledTask(28, 38, 0), new ScheduledTask(0, 5, 2), new ScheduledTask(21, 28, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(0, 4, 3), new ScheduledTask(10, 15, 0), new ScheduledTask(42, 52, 0)};
        int[] expectedProcessorEndTimes = new int[]{52, 6, 5, 4};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 10, 0), new ScheduledTask(15, 21, 0), new ScheduledTask(28, 38, 0), new ScheduledTask(0, 5, 2), new ScheduledTask(21, 28, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(0, 4, 3), new ScheduledTask(10, 15, 0), new ScheduledTask(42, 52, 0)};
        int[] expectedProcessorEndTimes = new int[]{52, 6, 5, 4};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot07_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.07_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(14, 21, 0), new ScheduledTask(0, 2, 3), new ScheduledTask(0, 9, 0), new ScheduledTask(9, 14, 0), new ScheduledTask(0, 4, 2), new ScheduledTask(31, 40, 0), new ScheduledTask(23, 31, 0), new ScheduledTask(21, 23, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(43, 52, 0)};
        int[] expectedProcessorEndTimes = new int[]{52, 5, 4, 2};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot07_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.07_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(12, 19, 0), new ScheduledTask(0, 2, 1), new ScheduledTask(36, 45, 0), new ScheduledTask(7, 12, 0), new ScheduledTask(2, 6, 1), new ScheduledTask(27, 36, 0), new ScheduledTask(19, 27, 0), new ScheduledTask(0, 2, 0), new ScheduledTask(2, 7, 0), new ScheduledTask(45, 54, 0)};
        int[] expectedProcessorEndTimes = new int[]{54, 6};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot07_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.07_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(14, 21, 0), new ScheduledTask(0, 2, 3), new ScheduledTask(0, 9, 0), new ScheduledTask(9, 14, 0), new ScheduledTask(0, 4, 2), new ScheduledTask(31, 40, 0), new ScheduledTask(23, 31, 0), new ScheduledTask(21, 23, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(43, 52, 0)};
        int[] expectedProcessorEndTimes = new int[]{52, 5, 4, 2};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot07_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.07_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(14, 21, 0), new ScheduledTask(0, 2, 3), new ScheduledTask(0, 9, 0), new ScheduledTask(9, 14, 0), new ScheduledTask(0, 4, 2), new ScheduledTask(31, 40, 0), new ScheduledTask(23, 31, 0), new ScheduledTask(21, 23, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(43, 52, 0)};
        int[] expectedProcessorEndTimes = new int[]{52, 5, 4, 2};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_2dot00_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_2.00_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 24;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 2), new ScheduledTask(9, 19, 0), new ScheduledTask(0, 5, 3), new ScheduledTask(0, 5, 4), new ScheduledTask(0, 5, 5), new ScheduledTask(0, 4, 6), new ScheduledTask(0, 9, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 4, 7), new ScheduledTask(21, 24, 0)};
        int[] expectedProcessorEndTimes = new int[]{24, 10, 6, 5, 5, 5, 4, 4};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_2dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_2.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(9, 15, 0), new ScheduledTask(24, 34, 0), new ScheduledTask(9, 14, 1), new ScheduledTask(4, 9, 1), new ScheduledTask(4, 9, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(15, 24, 0), new ScheduledTask(14, 24, 1), new ScheduledTask(0, 4, 0), new ScheduledTask(34, 37, 0)};
        int[] expectedProcessorEndTimes = new int[]{37, 24};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_2dot00_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_2.00_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 27;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(4, 10, 2), new ScheduledTask(14, 24, 0), new ScheduledTask(4, 9, 3), new ScheduledTask(0, 5, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(0, 4, 3), new ScheduledTask(5, 14, 0), new ScheduledTask(5, 15, 1), new ScheduledTask(0, 4, 2), new ScheduledTask(24, 27, 0)};
        int[] expectedProcessorEndTimes = new int[]{27, 15, 10, 9};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_2dot00_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_2.00_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 24;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 2), new ScheduledTask(9, 19, 0), new ScheduledTask(0, 5, 3), new ScheduledTask(0, 5, 4), new ScheduledTask(0, 5, 5), new ScheduledTask(0, 4, 6), new ScheduledTask(0, 9, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(0, 4, 7), new ScheduledTask(21, 24, 0)};
        int[] expectedProcessorEndTimes = new int[]{24, 10, 6, 5, 5, 5, 4, 4};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 1), new ScheduledTask(21, 25, 0), new ScheduledTask(44, 53, 0), new ScheduledTask(9, 17, 1), new ScheduledTask(0, 6, 0), new ScheduledTask(34, 44, 0), new ScheduledTask(6, 14, 0), new ScheduledTask(14, 21, 0), new ScheduledTask(25, 34, 0), new ScheduledTask(59, 61, 0)};
        int[] expectedProcessorEndTimes = new int[]{61, 17};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 1), new ScheduledTask(21, 25, 0), new ScheduledTask(44, 53, 0), new ScheduledTask(0, 8, 2), new ScheduledTask(0, 6, 0), new ScheduledTask(34, 44, 0), new ScheduledTask(6, 14, 0), new ScheduledTask(14, 21, 0), new ScheduledTask(25, 34, 0), new ScheduledTask(59, 61, 0)};
        int[] expectedProcessorEndTimes = new int[]{61, 9, 8};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_9dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_9.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 1), new ScheduledTask(21, 25, 0), new ScheduledTask(44, 53, 0), new ScheduledTask(0, 8, 2), new ScheduledTask(0, 6, 0), new ScheduledTask(34, 44, 0), new ScheduledTask(6, 14, 0), new ScheduledTask(14, 21, 0), new ScheduledTask(25, 34, 0), new ScheduledTask(59, 61, 0)};
        int[] expectedProcessorEndTimes = new int[]{61, 9, 8};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 299;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 47, 0), new ScheduledTask(47, 131, 0), new ScheduledTask(121, 149, 1), new ScheduledTask(215, 299, 0), new ScheduledTask(56, 121, 1), new ScheduledTask(159, 215, 0), new ScheduledTask(243, 299, 1), new ScheduledTask(196, 243, 1), new ScheduledTask(149, 196, 1), new ScheduledTask(131, 159, 0)};
        int[] expectedProcessorEndTimes = new int[]{299, 299};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 215;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 47, 0), new ScheduledTask(47, 131, 0), new ScheduledTask(51, 79, 1), new ScheduledTask(131, 215, 0), new ScheduledTask(56, 121, 2), new ScheduledTask(79, 135, 1), new ScheduledTask(86, 142, 3), new ScheduledTask(121, 168, 2), new ScheduledTask(140, 187, 1), new ScheduledTask(142, 170, 3)};
        int[] expectedProcessorEndTimes = new int[]{215, 187, 168, 170};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 215;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 47, 0), new ScheduledTask(47, 131, 0), new ScheduledTask(51, 79, 1), new ScheduledTask(131, 215, 0), new ScheduledTask(56, 121, 2), new ScheduledTask(79, 135, 1), new ScheduledTask(86, 142, 3), new ScheduledTask(82, 129, 4), new ScheduledTask(140, 187, 1), new ScheduledTask(138, 166, 2)};
        int[] expectedProcessorEndTimes = new int[]{215, 187, 166, 142, 129};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 239;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 25, 0), new ScheduledTask(25, 99, 0), new ScheduledTask(76, 92, 1), new ScheduledTask(164, 238, 0), new ScheduledTask(99, 164, 0), new ScheduledTask(182, 239, 1), new ScheduledTask(27, 76, 1), new ScheduledTask(141, 182, 1), new ScheduledTask(92, 125, 1), new ScheduledTask(125, 141, 1)};
        int[] expectedProcessorEndTimes = new int[]{238, 239};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 156;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 25, 0), new ScheduledTask(25, 99, 0), new ScheduledTask(35, 51, 1), new ScheduledTask(51, 125, 1), new ScheduledTask(53, 118, 2), new ScheduledTask(99, 156, 0), new ScheduledTask(27, 76, 3), new ScheduledTask(105, 146, 3), new ScheduledTask(118, 151, 2), new ScheduledTask(125, 141, 1)};
        int[] expectedProcessorEndTimes = new int[]{156, 141, 151, 146};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 156;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 25, 0), new ScheduledTask(25, 99, 0), new ScheduledTask(35, 51, 1), new ScheduledTask(51, 125, 1), new ScheduledTask(53, 118, 2), new ScheduledTask(99, 156, 0), new ScheduledTask(27, 76, 3), new ScheduledTask(105, 146, 3), new ScheduledTask(55, 88, 4), new ScheduledTask(104, 120, 4)};
        int[] expectedProcessorEndTimes = new int[]{156, 125, 118, 146, 120};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 242;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 24, 0), new ScheduledTask(105, 161, 0), new ScheduledTask(26, 58, 1), new ScheduledTask(24, 105, 0), new ScheduledTask(161, 242, 0), new ScheduledTask(114, 170, 1), new ScheduledTask(194, 242, 1), new ScheduledTask(82, 114, 1), new ScheduledTask(170, 194, 1), new ScheduledTask(58, 82, 1)};
        int[] expectedProcessorEndTimes = new int[]{242, 242};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 161;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 24, 0), new ScheduledTask(24, 80, 0), new ScheduledTask(26, 58, 1), new ScheduledTask(27, 108, 2), new ScheduledTask(80, 161, 0), new ScheduledTask(58, 114, 1), new ScheduledTask(86, 134, 3), new ScheduledTask(108, 140, 2), new ScheduledTask(114, 138, 1), new ScheduledTask(134, 158, 3)};
        int[] expectedProcessorEndTimes = new int[]{161, 138, 140, 158};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 161;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 24, 0), new ScheduledTask(24, 80, 0), new ScheduledTask(26, 58, 1), new ScheduledTask(27, 108, 2), new ScheduledTask(80, 161, 0), new ScheduledTask(58, 114, 1), new ScheduledTask(86, 134, 3), new ScheduledTask(64, 96, 4), new ScheduledTask(89, 113, 5), new ScheduledTask(96, 120, 4)};
        int[] expectedProcessorEndTimes = new int[]{161, 114, 108, 134, 120, 113};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 284;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 66, 0), new ScheduledTask(72, 123, 1), new ScheduledTask(66, 103, 0), new ScheduledTask(218, 284, 1), new ScheduledTask(103, 162, 0), new ScheduledTask(221, 280, 0), new ScheduledTask(167, 218, 1), new ScheduledTask(123, 167, 1), new ScheduledTask(184, 221, 0), new ScheduledTask(162, 184, 0)};
        int[] expectedProcessorEndTimes = new int[]{280, 284};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 189;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 66, 0), new ScheduledTask(72, 123, 1), new ScheduledTask(66, 103, 0), new ScheduledTask(123, 189, 1), new ScheduledTask(103, 162, 0), new ScheduledTask(128, 187, 2), new ScheduledTask(72, 123, 2), new ScheduledTask(105, 149, 3), new ScheduledTask(149, 186, 3), new ScheduledTask(162, 184, 0)};
        int[] expectedProcessorEndTimes = new int[]{184, 189, 187, 186};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 176;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 66, 0), new ScheduledTask(66, 117, 0), new ScheduledTask(72, 109, 1), new ScheduledTask(109, 175, 1), new ScheduledTask(117, 176, 2), new ScheduledTask(117, 176, 0), new ScheduledTask(72, 123, 3), new ScheduledTask(111, 155, 4), new ScheduledTask(125, 162, 5), new ScheduledTask(123, 145, 3)};
        int[] expectedProcessorEndTimes = new int[]{176, 175, 176, 145, 155, 162};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 355;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 68, 0), new ScheduledTask(73, 96, 1), new ScheduledTask(242, 355, 1), new ScheduledTask(68, 91, 0), new ScheduledTask(152, 242, 1), new ScheduledTask(271, 350, 0), new ScheduledTask(192, 271, 0), new ScheduledTask(96, 152, 1), new ScheduledTask(136, 192, 0), new ScheduledTask(91, 136, 0)};
        int[] expectedProcessorEndTimes = new int[]{350, 355};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 226;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 68, 0), new ScheduledTask(73, 96, 1), new ScheduledTask(96, 209, 1), new ScheduledTask(68, 91, 0), new ScheduledTask(133, 223, 2), new ScheduledTask(141, 220, 3), new ScheduledTask(147, 226, 0), new ScheduledTask(77, 133, 2), new ScheduledTask(91, 147, 0), new ScheduledTask(96, 141, 3)};
        int[] expectedProcessorEndTimes = new int[]{226, 209, 223, 220};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 204;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 68, 0), new ScheduledTask(68, 91, 0), new ScheduledTask(91, 204, 0), new ScheduledTask(76, 99, 1), new ScheduledTask(98, 188, 2), new ScheduledTask(99, 178, 1), new ScheduledTask(98, 177, 3), new ScheduledTask(77, 133, 4), new ScheduledTask(105, 161, 5), new ScheduledTask(133, 178, 4)};
        int[] expectedProcessorEndTimes = new int[]{204, 178, 188, 177, 178, 161};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 304;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 43, 0), new ScheduledTask(77, 146, 0), new ScheduledTask(46, 115, 1), new ScheduledTask(224, 302, 0), new ScheduledTask(146, 224, 0), new ScheduledTask(235, 304, 1), new ScheduledTask(115, 175, 1), new ScheduledTask(43, 77, 0), new ScheduledTask(201, 235, 1), new ScheduledTask(175, 201, 1)};
        int[] expectedProcessorEndTimes = new int[]{302, 304};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 209;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 43, 0), new ScheduledTask(43, 112, 0), new ScheduledTask(46, 115, 1), new ScheduledTask(124, 202, 2), new ScheduledTask(122, 200, 3), new ScheduledTask(138, 207, 0), new ScheduledTask(115, 175, 1), new ScheduledTask(52, 86, 2), new ScheduledTask(175, 209, 1), new ScheduledTask(112, 138, 0)};
        int[] expectedProcessorEndTimes = new int[]{207, 209, 202, 200};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 193;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 43, 0), new ScheduledTask(43, 112, 0), new ScheduledTask(46, 115, 1), new ScheduledTask(115, 193, 1), new ScheduledTask(112, 190, 0), new ScheduledTask(121, 190, 2), new ScheduledTask(122, 182, 3), new ScheduledTask(52, 86, 4), new ScheduledTask(116, 150, 4), new ScheduledTask(117, 143, 5)};
        int[] expectedProcessorEndTimes = new int[]{190, 193, 190, 182, 150, 143};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 376;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 100, 0), new ScheduledTask(102, 215, 1), new ScheduledTask(138, 201, 0), new ScheduledTask(276, 376, 0), new ScheduledTask(303, 366, 1), new ScheduledTask(240, 303, 1), new ScheduledTask(226, 276, 0), new ScheduledTask(100, 138, 0), new ScheduledTask(215, 240, 1), new ScheduledTask(201, 226, 0)};
        int[] expectedProcessorEndTimes = new int[]{376, 366};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 276;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 100, 0), new ScheduledTask(100, 213, 0), new ScheduledTask(110, 173, 1), new ScheduledTask(173, 273, 1), new ScheduledTask(213, 276, 0), new ScheduledTask(181, 244, 2), new ScheduledTask(219, 269, 3), new ScheduledTask(110, 148, 2), new ScheduledTask(244, 269, 2), new ScheduledTask(182, 207, 3)};
        int[] expectedProcessorEndTimes = new int[]{276, 273, 269, 269};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 276;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 100, 0), new ScheduledTask(100, 213, 0), new ScheduledTask(110, 173, 1), new ScheduledTask(173, 273, 1), new ScheduledTask(213, 276, 0), new ScheduledTask(181, 244, 2), new ScheduledTask(219, 269, 3), new ScheduledTask(110, 148, 4), new ScheduledTask(220, 245, 4), new ScheduledTask(182, 207, 5)};
        int[] expectedProcessorEndTimes = new int[]{276, 273, 244, 269, 245, 207};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 265;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 54, 0), new ScheduledTask(95, 134, 1), new ScheduledTask(54, 116, 0), new ScheduledTask(134, 211, 1), new ScheduledTask(193, 262, 0), new ScheduledTask(211, 265, 1), new ScheduledTask(56, 95, 1), new ScheduledTask(162, 193, 0), new ScheduledTask(139, 162, 0), new ScheduledTask(116, 139, 0)};
        int[] expectedProcessorEndTimes = new int[]{262, 265};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 178;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 54, 0), new ScheduledTask(54, 93, 0), new ScheduledTask(64, 126, 1), new ScheduledTask(97, 174, 2), new ScheduledTask(98, 167, 3), new ScheduledTask(93, 147, 0), new ScheduledTask(56, 95, 2), new ScheduledTask(147, 178, 0), new ScheduledTask(126, 149, 1), new ScheduledTask(149, 172, 1)};
        int[] expectedProcessorEndTimes = new int[]{178, 172, 174, 167};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 170;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 54, 0), new ScheduledTask(54, 93, 0), new ScheduledTask(64, 126, 1), new ScheduledTask(93, 170, 0), new ScheduledTask(98, 167, 2), new ScheduledTask(101, 155, 3), new ScheduledTask(56, 95, 4), new ScheduledTask(126, 157, 1), new ScheduledTask(129, 152, 4), new ScheduledTask(130, 153, 5)};
        int[] expectedProcessorEndTimes = new int[]{170, 157, 167, 155, 152, 153};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 411;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 121, 0), new ScheduledTask(121, 242, 0), new ScheduledTask(128, 152, 1), new ScheduledTask(152, 249, 1), new ScheduledTask(242, 327, 0), new ScheduledTask(252, 337, 1), new ScheduledTask(327, 375, 0), new ScheduledTask(337, 385, 1), new ScheduledTask(375, 411, 0), new ScheduledTask(385, 409, 1)};
        int[] expectedProcessorEndTimes = new int[]{411, 409};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 327;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 121, 0), new ScheduledTask(121, 242, 0), new ScheduledTask(128, 152, 1), new ScheduledTask(152, 249, 1), new ScheduledTask(130, 215, 2), new ScheduledTask(242, 327, 0), new ScheduledTask(245, 293, 2), new ScheduledTask(252, 300, 1), new ScheduledTask(162, 198, 3), new ScheduledTask(198, 222, 3)};
        int[] expectedProcessorEndTimes = new int[]{327, 300, 293, 222};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 327;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 121, 0), new ScheduledTask(121, 242, 0), new ScheduledTask(128, 152, 1), new ScheduledTask(152, 249, 1), new ScheduledTask(130, 215, 2), new ScheduledTask(242, 327, 0), new ScheduledTask(245, 293, 2), new ScheduledTask(252, 300, 1), new ScheduledTask(162, 198, 3), new ScheduledTask(157, 181, 4)};
        int[] expectedProcessorEndTimes = new int[]{327, 300, 293, 198, 181};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 206;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 47, 0), new ScheduledTask(47, 122, 0), new ScheduledTask(122, 206, 0), new ScheduledTask(125, 200, 1), new ScheduledTask(55, 74, 2), new ScheduledTask(74, 121, 2), new ScheduledTask(126, 164, 2), new ScheduledTask(81, 109, 3), new ScheduledTask(50, 69, 4), new ScheduledTask(76, 95, 4)};
        int[] expectedProcessorEndTimes = new int[]{206, 200, 164, 109, 95};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 253;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 47, 0), new ScheduledTask(47, 122, 0), new ScheduledTask(169, 253, 0), new ScheduledTask(173, 248, 1), new ScheduledTask(69, 88, 1), new ScheduledTask(122, 169, 0), new ScheduledTask(135, 173, 1), new ScheduledTask(107, 135, 1), new ScheduledTask(50, 69, 1), new ScheduledTask(88, 107, 1)};
        int[] expectedProcessorEndTimes = new int[]{253, 248};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 206;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 47, 0), new ScheduledTask(47, 122, 0), new ScheduledTask(122, 206, 0), new ScheduledTask(125, 200, 1), new ScheduledTask(55, 74, 2), new ScheduledTask(74, 121, 2), new ScheduledTask(126, 164, 2), new ScheduledTask(81, 109, 3), new ScheduledTask(109, 128, 3), new ScheduledTask(128, 147, 3)};
        int[] expectedProcessorEndTimes = new int[]{206, 200, 164, 147};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 206;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 47, 0), new ScheduledTask(47, 122, 0), new ScheduledTask(122, 206, 0), new ScheduledTask(125, 200, 1), new ScheduledTask(55, 74, 2), new ScheduledTask(74, 121, 2), new ScheduledTask(126, 164, 2), new ScheduledTask(81, 109, 3), new ScheduledTask(50, 69, 4), new ScheduledTask(76, 95, 4)};
        int[] expectedProcessorEndTimes = new int[]{206, 200, 164, 109, 95};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 354;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 87, 0), new ScheduledTask(174, 251, 0), new ScheduledTask(87, 174, 0), new ScheduledTask(93, 190, 1), new ScheduledTask(270, 347, 0), new ScheduledTask(190, 248, 1), new ScheduledTask(306, 354, 1), new ScheduledTask(277, 306, 1), new ScheduledTask(248, 277, 1), new ScheduledTask(251, 270, 0)};
        int[] expectedProcessorEndTimes = new int[]{347, 354};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 244;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 87, 0), new ScheduledTask(87, 164, 0), new ScheduledTask(97, 184, 1), new ScheduledTask(93, 190, 2), new ScheduledTask(164, 241, 0), new ScheduledTask(184, 242, 1), new ScheduledTask(193, 241, 2), new ScheduledTask(186, 215, 3), new ScheduledTask(215, 244, 3), new ScheduledTask(167, 186, 3)};
        int[] expectedProcessorEndTimes = new int[]{241, 242, 241, 244};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 242;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 87, 0), new ScheduledTask(87, 164, 0), new ScheduledTask(97, 184, 1), new ScheduledTask(93, 190, 2), new ScheduledTask(164, 241, 0), new ScheduledTask(184, 242, 1), new ScheduledTask(193, 241, 2), new ScheduledTask(169, 198, 3), new ScheduledTask(192, 221, 4), new ScheduledTask(167, 186, 5)};
        int[] expectedProcessorEndTimes = new int[]{241, 242, 241, 198, 221, 186};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot91_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.91_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 33;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(8, 15, 1), new ScheduledTask(15, 20, 0), new ScheduledTask(19, 29, 1), new ScheduledTask(6, 15, 0), new ScheduledTask(27, 33, 0), new ScheduledTask(20, 25, 0), new ScheduledTask(15, 19, 1), new ScheduledTask(29, 32, 1), new ScheduledTask(25, 27, 0)};
        int[] expectedProcessorEndTimes = new int[]{33, 32};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot91_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.91_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 26;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(8, 15, 1), new ScheduledTask(6, 11, 0), new ScheduledTask(15, 25, 1), new ScheduledTask(10, 19, 2), new ScheduledTask(17, 23, 3), new ScheduledTask(11, 16, 0), new ScheduledTask(22, 26, 2), new ScheduledTask(23, 26, 3), new ScheduledTask(15, 17, 3)};
        int[] expectedProcessorEndTimes = new int[]{16, 25, 26, 26};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot91_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.91_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 26;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(8, 15, 1), new ScheduledTask(6, 11, 0), new ScheduledTask(15, 25, 1), new ScheduledTask(10, 19, 2), new ScheduledTask(17, 23, 3), new ScheduledTask(11, 16, 0), new ScheduledTask(22, 26, 0), new ScheduledTask(23, 26, 4), new ScheduledTask(15, 17, 5)};
        int[] expectedProcessorEndTimes = new int[]{26, 25, 19, 23, 26, 17};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot93_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.93_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 22;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 10, 0), new ScheduledTask(5, 11, 1), new ScheduledTask(10, 20, 0), new ScheduledTask(5, 14, 2), new ScheduledTask(11, 17, 1), new ScheduledTask(17, 22, 1), new ScheduledTask(16, 19, 2), new ScheduledTask(19, 22, 2), new ScheduledTask(18, 20, 3)};
        int[] expectedProcessorEndTimes = new int[]{20, 22, 22, 20};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot93_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.93_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 30;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 10, 0), new ScheduledTask(5, 11, 1), new ScheduledTask(10, 20, 0), new ScheduledTask(11, 20, 1), new ScheduledTask(20, 26, 0), new ScheduledTask(20, 25, 1), new ScheduledTask(25, 28, 1), new ScheduledTask(26, 29, 0), new ScheduledTask(28, 30, 1)};
        int[] expectedProcessorEndTimes = new int[]{29, 30};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot93_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.93_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 22;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 10, 0), new ScheduledTask(5, 11, 1), new ScheduledTask(10, 20, 0), new ScheduledTask(5, 14, 2), new ScheduledTask(11, 17, 1), new ScheduledTask(17, 22, 1), new ScheduledTask(16, 19, 2), new ScheduledTask(19, 22, 2), new ScheduledTask(18, 20, 3)};
        int[] expectedProcessorEndTimes = new int[]{20, 22, 22, 20};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot93_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.93_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 22;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 10, 0), new ScheduledTask(5, 11, 1), new ScheduledTask(10, 20, 0), new ScheduledTask(5, 14, 2), new ScheduledTask(11, 17, 1), new ScheduledTask(17, 22, 1), new ScheduledTask(16, 19, 2), new ScheduledTask(19, 22, 2), new ScheduledTask(18, 20, 3)};
        int[] expectedProcessorEndTimes = new int[]{20, 22, 22, 20};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot94_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.94_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 38;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(15, 25, 1), new ScheduledTask(4, 13, 0), new ScheduledTask(25, 34, 1), new ScheduledTask(7, 15, 1), new ScheduledTask(24, 32, 0), new ScheduledTask(32, 38, 0), new ScheduledTask(18, 24, 0), new ScheduledTask(13, 18, 0), new ScheduledTask(34, 36, 1)};
        int[] expectedProcessorEndTimes = new int[]{38, 36};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot94_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.94_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(11, 21, 1), new ScheduledTask(4, 13, 0), new ScheduledTask(21, 30, 1), new ScheduledTask(24, 32, 0), new ScheduledTask(23, 31, 2), new ScheduledTask(26, 32, 3), new ScheduledTask(18, 24, 0), new ScheduledTask(13, 18, 0), new ScheduledTask(30, 32, 1)};
        int[] expectedProcessorEndTimes = new int[]{32, 32, 31, 32};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot94_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.94_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(11, 21, 1), new ScheduledTask(4, 13, 0), new ScheduledTask(21, 30, 1), new ScheduledTask(7, 15, 2), new ScheduledTask(23, 31, 3), new ScheduledTask(26, 32, 4), new ScheduledTask(13, 19, 0), new ScheduledTask(15, 20, 5), new ScheduledTask(30, 32, 1)};
        int[] expectedProcessorEndTimes = new int[]{19, 32, 15, 31, 32, 20};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 15, 0), new ScheduledTask(18, 20, 1), new ScheduledTask(20, 30, 0), new ScheduledTask(10, 18, 1), new ScheduledTask(29, 37, 1), new ScheduledTask(22, 29, 1), new ScheduledTask(30, 37, 0), new ScheduledTask(15, 20, 0), new ScheduledTask(20, 22, 1)};
        int[] expectedProcessorEndTimes = new int[]{37, 37};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(9, 17, 0), new ScheduledTask(7, 9, 0), new ScheduledTask(17, 27, 0), new ScheduledTask(10, 18, 1), new ScheduledTask(19, 27, 2), new ScheduledTask(25, 32, 3), new ScheduledTask(25, 32, 1), new ScheduledTask(20, 25, 3), new ScheduledTask(14, 16, 3)};
        int[] expectedProcessorEndTimes = new int[]{27, 32, 27, 32};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(9, 17, 0), new ScheduledTask(7, 9, 0), new ScheduledTask(17, 27, 0), new ScheduledTask(10, 18, 1), new ScheduledTask(19, 27, 2), new ScheduledTask(17, 24, 3), new ScheduledTask(25, 32, 1), new ScheduledTask(20, 25, 4), new ScheduledTask(14, 16, 5)};
        int[] expectedProcessorEndTimes = new int[]{27, 32, 27, 24, 25, 16};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 43;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(13, 17, 1), new ScheduledTask(10, 13, 0), new ScheduledTask(33, 42, 1), new ScheduledTask(19, 28, 0), new ScheduledTask(24, 33, 1), new ScheduledTask(35, 43, 0), new ScheduledTask(17, 24, 1), new ScheduledTask(28, 35, 0), new ScheduledTask(13, 19, 0)};
        int[] expectedProcessorEndTimes = new int[]{43, 42};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(13, 17, 1), new ScheduledTask(10, 13, 0), new ScheduledTask(18, 27, 2), new ScheduledTask(22, 31, 0), new ScheduledTask(13, 22, 0), new ScheduledTask(24, 32, 1), new ScheduledTask(25, 32, 3), new ScheduledTask(17, 24, 1), new ScheduledTask(18, 24, 3)};
        int[] expectedProcessorEndTimes = new int[]{31, 32, 27, 32};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(13, 17, 1), new ScheduledTask(10, 13, 0), new ScheduledTask(18, 27, 2), new ScheduledTask(22, 31, 3), new ScheduledTask(13, 22, 0), new ScheduledTask(24, 32, 1), new ScheduledTask(25, 32, 4), new ScheduledTask(17, 24, 1), new ScheduledTask(18, 24, 5)};
        int[] expectedProcessorEndTimes = new int[]{22, 32, 27, 31, 32, 24};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 43;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 17, 0), new ScheduledTask(21, 30, 1), new ScheduledTask(12, 21, 1), new ScheduledTask(17, 25, 0), new ScheduledTask(36, 43, 1), new ScheduledTask(31, 38, 0), new ScheduledTask(30, 36, 1), new ScheduledTask(25, 31, 0), new ScheduledTask(38, 43, 0)};
        int[] expectedProcessorEndTimes = new int[]{43, 43};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 17, 0), new ScheduledTask(14, 23, 1), new ScheduledTask(12, 21, 2), new ScheduledTask(23, 31, 0), new ScheduledTask(28, 35, 1), new ScheduledTask(26, 33, 2), new ScheduledTask(29, 35, 3), new ScheduledTask(17, 23, 0), new ScheduledTask(23, 28, 1)};
        int[] expectedProcessorEndTimes = new int[]{31, 35, 33, 35};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 17, 0), new ScheduledTask(14, 23, 1), new ScheduledTask(12, 21, 2), new ScheduledTask(23, 31, 0), new ScheduledTask(23, 30, 1), new ScheduledTask(26, 33, 3), new ScheduledTask(29, 35, 4), new ScheduledTask(17, 23, 0), new ScheduledTask(26, 31, 5)};
        int[] expectedProcessorEndTimes = new int[]{31, 30, 21, 33, 35, 31};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 30;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(12, 17, 1), new ScheduledTask(9, 12, 0), new ScheduledTask(24, 30, 0), new ScheduledTask(24, 30, 1), new ScheduledTask(18, 24, 0), new ScheduledTask(19, 24, 1), new ScheduledTask(15, 18, 0), new ScheduledTask(12, 15, 0), new ScheduledTask(17, 19, 1)};
        int[] expectedProcessorEndTimes = new int[]{30, 30};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 25;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 14, 0), new ScheduledTask(13, 16, 1), new ScheduledTask(19, 25, 2), new ScheduledTask(16, 22, 0), new ScheduledTask(19, 25, 1), new ScheduledTask(18, 23, 3), new ScheduledTask(22, 25, 0), new ScheduledTask(16, 19, 1), new ScheduledTask(14, 16, 0)};
        int[] expectedProcessorEndTimes = new int[]{25, 25, 25, 23};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 25;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 14, 0), new ScheduledTask(13, 16, 1), new ScheduledTask(19, 25, 2), new ScheduledTask(16, 22, 0), new ScheduledTask(16, 22, 1), new ScheduledTask(18, 23, 3), new ScheduledTask(21, 24, 4), new ScheduledTask(21, 24, 5), new ScheduledTask(14, 16, 0)};
        int[] expectedProcessorEndTimes = new int[]{22, 22, 25, 23, 24, 24};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 36;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(11, 19, 1), new ScheduledTask(6, 10, 0), new ScheduledTask(27, 36, 1), new ScheduledTask(18, 26, 0), new ScheduledTask(10, 18, 0), new ScheduledTask(30, 36, 0), new ScheduledTask(22, 27, 1), new ScheduledTask(26, 30, 0), new ScheduledTask(19, 22, 1)};
        int[] expectedProcessorEndTimes = new int[]{36, 36};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(10, 18, 0), new ScheduledTask(6, 10, 0), new ScheduledTask(22, 31, 0), new ScheduledTask(19, 27, 1), new ScheduledTask(19, 27, 2), new ScheduledTask(24, 30, 3), new ScheduledTask(16, 21, 3), new ScheduledTask(18, 22, 0), new ScheduledTask(13, 16, 3)};
        int[] expectedProcessorEndTimes = new int[]{31, 27, 27, 30};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 30;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(10, 18, 0), new ScheduledTask(6, 10, 0), new ScheduledTask(18, 27, 0), new ScheduledTask(19, 27, 1), new ScheduledTask(19, 27, 2), new ScheduledTask(24, 30, 3), new ScheduledTask(16, 21, 4), new ScheduledTask(22, 26, 5), new ScheduledTask(13, 16, 2)};
        int[] expectedProcessorEndTimes = new int[]{27, 27, 27, 30, 21, 26};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 26;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 11, 0), new ScheduledTask(5, 8, 1), new ScheduledTask(8, 15, 1), new ScheduledTask(11, 18, 0), new ScheduledTask(15, 20, 1), new ScheduledTask(18, 23, 0), new ScheduledTask(20, 24, 1), new ScheduledTask(23, 25, 0), new ScheduledTask(24, 26, 1)};
        int[] expectedProcessorEndTimes = new int[]{25, 26};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 21;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 11, 0), new ScheduledTask(5, 8, 1), new ScheduledTask(8, 15, 1), new ScheduledTask(11, 18, 0), new ScheduledTask(13, 18, 2), new ScheduledTask(16, 21, 1), new ScheduledTask(13, 17, 3), new ScheduledTask(17, 19, 3), new ScheduledTask(18, 20, 0)};
        int[] expectedProcessorEndTimes = new int[]{20, 21, 18, 19};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 21;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 11, 0), new ScheduledTask(5, 8, 1), new ScheduledTask(8, 15, 1), new ScheduledTask(11, 18, 0), new ScheduledTask(13, 18, 2), new ScheduledTask(16, 21, 1), new ScheduledTask(13, 17, 3), new ScheduledTask(7, 9, 4), new ScheduledTask(14, 16, 4)};
        int[] expectedProcessorEndTimes = new int[]{18, 21, 18, 17, 16};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot06_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.06_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 39;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 11, 0), new ScheduledTask(21, 23, 1), new ScheduledTask(28, 38, 0), new ScheduledTask(19, 28, 0), new ScheduledTask(13, 21, 1), new ScheduledTask(11, 19, 0), new ScheduledTask(29, 36, 1), new ScheduledTask(23, 29, 1), new ScheduledTask(36, 39, 1)};
        int[] expectedProcessorEndTimes = new int[]{38, 39};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot06_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.06_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 28;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 11, 0), new ScheduledTask(11, 13, 0), new ScheduledTask(17, 27, 1), new ScheduledTask(19, 28, 0), new ScheduledTask(13, 21, 2), new ScheduledTask(17, 25, 3), new ScheduledTask(21, 28, 2), new ScheduledTask(13, 19, 0), new ScheduledTask(25, 28, 3)};
        int[] expectedProcessorEndTimes = new int[]{28, 27, 28, 28};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot06_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.06_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 27;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(10, 13, 0), new ScheduledTask(8, 10, 0), new ScheduledTask(17, 27, 1), new ScheduledTask(16, 25, 0), new ScheduledTask(15, 23, 2), new ScheduledTask(19, 27, 3), new ScheduledTask(18, 25, 4), new ScheduledTask(17, 23, 5), new ScheduledTask(13, 16, 0)};
        int[] expectedProcessorEndTimes = new int[]{25, 27, 23, 27, 25, 23};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot09_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.09_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(7, 11, 1), new ScheduledTask(5, 7, 0), new ScheduledTask(22, 31, 0), new ScheduledTask(14, 22, 0), new ScheduledTask(7, 14, 0), new ScheduledTask(26, 31, 1), new ScheduledTask(21, 26, 1), new ScheduledTask(16, 21, 1), new ScheduledTask(12, 16, 1)};
        int[] expectedProcessorEndTimes = new int[]{31, 31};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot09_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.09_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 24;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 9, 0), new ScheduledTask(9, 11, 1), new ScheduledTask(14, 23, 2), new ScheduledTask(11, 19, 1), new ScheduledTask(17, 24, 3), new ScheduledTask(14, 19, 0), new ScheduledTask(9, 14, 0), new ScheduledTask(19, 24, 1), new ScheduledTask(12, 16, 3)};
        int[] expectedProcessorEndTimes = new int[]{19, 24, 23, 24};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot09_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.09_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 24;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 9, 0), new ScheduledTask(9, 11, 1), new ScheduledTask(9, 18, 0), new ScheduledTask(11, 19, 1), new ScheduledTask(17, 24, 2), new ScheduledTask(19, 24, 3), new ScheduledTask(16, 21, 4), new ScheduledTask(19, 24, 1), new ScheduledTask(12, 16, 5)};
        int[] expectedProcessorEndTimes = new int[]{18, 24, 24, 24, 21, 16};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 14, 0), new ScheduledTask(13, 17, 1), new ScheduledTask(17, 27, 1), new ScheduledTask(13, 22, 2), new ScheduledTask(14, 22, 0), new ScheduledTask(27, 35, 1), new ScheduledTask(22, 27, 0), new ScheduledTask(23, 27, 2), new ScheduledTask(26, 28, 3)};
        int[] expectedProcessorEndTimes = new int[]{27, 35, 27, 28};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 39;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 14, 0), new ScheduledTask(13, 17, 1), new ScheduledTask(17, 27, 1), new ScheduledTask(14, 23, 0), new ScheduledTask(23, 31, 0), new ScheduledTask(27, 35, 1), new ScheduledTask(31, 36, 0), new ScheduledTask(35, 39, 1), new ScheduledTask(36, 38, 0)};
        int[] expectedProcessorEndTimes = new int[]{38, 39};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 14, 0), new ScheduledTask(13, 17, 1), new ScheduledTask(17, 27, 1), new ScheduledTask(13, 22, 2), new ScheduledTask(14, 22, 0), new ScheduledTask(27, 35, 1), new ScheduledTask(22, 27, 0), new ScheduledTask(23, 27, 2), new ScheduledTask(26, 28, 3)};
        int[] expectedProcessorEndTimes = new int[]{27, 35, 27, 28};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 14, 0), new ScheduledTask(13, 17, 1), new ScheduledTask(17, 27, 1), new ScheduledTask(13, 22, 2), new ScheduledTask(14, 22, 0), new ScheduledTask(27, 35, 1), new ScheduledTask(22, 27, 0), new ScheduledTask(23, 27, 2), new ScheduledTask(26, 28, 3)};
        int[] expectedProcessorEndTimes = new int[]{27, 35, 27, 28};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 14, 0), new ScheduledTask(30, 37, 0), new ScheduledTask(20, 30, 0), new ScheduledTask(41, 51, 0), new ScheduledTask(50, 59, 1), new ScheduledTask(38, 47, 1), new ScheduledTask(14, 20, 0), new ScheduledTask(37, 41, 0), new ScheduledTask(51, 54, 0)};
        int[] expectedProcessorEndTimes = new int[]{54, 59};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 14, 0), new ScheduledTask(30, 37, 0), new ScheduledTask(20, 30, 0), new ScheduledTask(41, 51, 0), new ScheduledTask(50, 59, 1), new ScheduledTask(38, 47, 2), new ScheduledTask(14, 20, 0), new ScheduledTask(37, 41, 0), new ScheduledTask(51, 54, 0)};
        int[] expectedProcessorEndTimes = new int[]{54, 59, 47};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 14, 0), new ScheduledTask(30, 37, 0), new ScheduledTask(20, 30, 0), new ScheduledTask(41, 51, 0), new ScheduledTask(50, 59, 1), new ScheduledTask(38, 47, 2), new ScheduledTask(14, 20, 0), new ScheduledTask(37, 41, 0), new ScheduledTask(51, 54, 0)};
        int[] expectedProcessorEndTimes = new int[]{54, 59, 47};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(28, 37, 0), new ScheduledTask(4, 6, 0), new ScheduledTask(34, 43, 1), new ScheduledTask(19, 28, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(37, 45, 0), new ScheduledTask(51, 58, 0), new ScheduledTask(45, 51, 0), new ScheduledTask(6, 10, 0)};
        int[] expectedProcessorEndTimes = new int[]{58, 43};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(28, 37, 0), new ScheduledTask(4, 6, 0), new ScheduledTask(34, 43, 1), new ScheduledTask(19, 28, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(37, 45, 0), new ScheduledTask(51, 58, 0), new ScheduledTask(45, 51, 0), new ScheduledTask(6, 10, 0)};
        int[] expectedProcessorEndTimes = new int[]{58, 43};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(28, 37, 0), new ScheduledTask(4, 6, 0), new ScheduledTask(34, 43, 1), new ScheduledTask(19, 28, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(37, 45, 0), new ScheduledTask(51, 58, 0), new ScheduledTask(45, 51, 0), new ScheduledTask(6, 10, 0)};
        int[] expectedProcessorEndTimes = new int[]{58, 43};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 43;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(24, 31, 0), new ScheduledTask(5, 9, 0), new ScheduledTask(15, 24, 0), new ScheduledTask(33, 40, 1), new ScheduledTask(36, 43, 0), new ScheduledTask(11, 15, 0), new ScheduledTask(31, 34, 0), new ScheduledTask(9, 11, 0), new ScheduledTask(34, 36, 0)};
        int[] expectedProcessorEndTimes = new int[]{43, 40};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 43;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(24, 31, 0), new ScheduledTask(5, 9, 0), new ScheduledTask(15, 24, 0), new ScheduledTask(33, 40, 1), new ScheduledTask(36, 43, 0), new ScheduledTask(11, 15, 0), new ScheduledTask(31, 34, 0), new ScheduledTask(9, 11, 0), new ScheduledTask(34, 36, 0)};
        int[] expectedProcessorEndTimes = new int[]{43, 40};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 43;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(24, 31, 0), new ScheduledTask(5, 9, 0), new ScheduledTask(15, 24, 0), new ScheduledTask(33, 40, 1), new ScheduledTask(36, 43, 0), new ScheduledTask(11, 15, 0), new ScheduledTask(31, 34, 0), new ScheduledTask(9, 11, 0), new ScheduledTask(34, 36, 0)};
        int[] expectedProcessorEndTimes = new int[]{43, 40};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(12, 19, 0), new ScheduledTask(20, 25, 1), new ScheduledTask(4, 12, 0), new ScheduledTask(28, 32, 1), new ScheduledTask(23, 27, 0), new ScheduledTask(19, 23, 0), new ScheduledTask(27, 31, 0), new ScheduledTask(32, 35, 1), new ScheduledTask(25, 28, 1)};
        int[] expectedProcessorEndTimes = new int[]{31, 35};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(12, 19, 0), new ScheduledTask(20, 25, 1), new ScheduledTask(4, 12, 0), new ScheduledTask(28, 32, 1), new ScheduledTask(23, 27, 0), new ScheduledTask(19, 23, 0), new ScheduledTask(27, 31, 0), new ScheduledTask(32, 35, 1), new ScheduledTask(25, 28, 1)};
        int[] expectedProcessorEndTimes = new int[]{31, 35};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(12, 19, 0), new ScheduledTask(20, 25, 1), new ScheduledTask(4, 12, 0), new ScheduledTask(28, 32, 1), new ScheduledTask(23, 27, 0), new ScheduledTask(19, 23, 0), new ScheduledTask(27, 31, 0), new ScheduledTask(32, 35, 1), new ScheduledTask(25, 28, 1)};
        int[] expectedProcessorEndTimes = new int[]{31, 35};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(12, 19, 0), new ScheduledTask(20, 25, 1), new ScheduledTask(4, 12, 0), new ScheduledTask(28, 32, 1), new ScheduledTask(23, 27, 0), new ScheduledTask(19, 23, 0), new ScheduledTask(27, 31, 0), new ScheduledTask(32, 35, 1), new ScheduledTask(25, 28, 1)};
        int[] expectedProcessorEndTimes = new int[]{31, 35};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 12, 0), new ScheduledTask(12, 18, 0), new ScheduledTask(18, 28, 0), new ScheduledTask(28, 38, 0), new ScheduledTask(38, 47, 0), new ScheduledTask(47, 56, 0), new ScheduledTask(56, 60, 0), new ScheduledTask(60, 64, 0), new ScheduledTask(51, 54, 1)};
        int[] expectedProcessorEndTimes = new int[]{64, 54};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 12, 0), new ScheduledTask(12, 18, 0), new ScheduledTask(18, 28, 0), new ScheduledTask(28, 38, 0), new ScheduledTask(38, 47, 0), new ScheduledTask(47, 56, 0), new ScheduledTask(56, 60, 0), new ScheduledTask(60, 64, 0), new ScheduledTask(51, 54, 1)};
        int[] expectedProcessorEndTimes = new int[]{64, 54};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 12, 0), new ScheduledTask(12, 18, 0), new ScheduledTask(18, 28, 0), new ScheduledTask(28, 38, 0), new ScheduledTask(38, 47, 0), new ScheduledTask(47, 56, 0), new ScheduledTask(56, 60, 0), new ScheduledTask(60, 64, 0), new ScheduledTask(51, 54, 1)};
        int[] expectedProcessorEndTimes = new int[]{64, 54};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(29, 36, 0), new ScheduledTask(3, 12, 0), new ScheduledTask(58, 68, 1), new ScheduledTask(42, 51, 1), new ScheduledTask(20, 29, 0), new ScheduledTask(51, 60, 0), new ScheduledTask(12, 20, 0), new ScheduledTask(43, 51, 0), new ScheduledTask(36, 43, 0)};
        int[] expectedProcessorEndTimes = new int[]{60, 68};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(29, 36, 0), new ScheduledTask(3, 12, 0), new ScheduledTask(58, 68, 1), new ScheduledTask(42, 51, 2), new ScheduledTask(20, 29, 0), new ScheduledTask(51, 60, 0), new ScheduledTask(12, 20, 0), new ScheduledTask(43, 51, 0), new ScheduledTask(36, 43, 0)};
        int[] expectedProcessorEndTimes = new int[]{60, 68, 51};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(29, 36, 0), new ScheduledTask(3, 12, 0), new ScheduledTask(58, 68, 1), new ScheduledTask(42, 51, 2), new ScheduledTask(20, 29, 0), new ScheduledTask(51, 60, 0), new ScheduledTask(12, 20, 0), new ScheduledTask(43, 51, 0), new ScheduledTask(36, 43, 0)};
        int[] expectedProcessorEndTimes = new int[]{60, 68, 51};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(26, 30, 0), new ScheduledTask(4, 9, 0), new ScheduledTask(17, 26, 0), new ScheduledTask(38, 46, 0), new ScheduledTask(30, 36, 0), new ScheduledTask(38, 44, 1), new ScheduledTask(13, 17, 0), new ScheduledTask(9, 13, 0), new ScheduledTask(36, 38, 0)};
        int[] expectedProcessorEndTimes = new int[]{46, 44};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(26, 30, 0), new ScheduledTask(4, 9, 0), new ScheduledTask(17, 26, 0), new ScheduledTask(38, 46, 0), new ScheduledTask(30, 36, 0), new ScheduledTask(38, 44, 1), new ScheduledTask(13, 17, 0), new ScheduledTask(9, 13, 0), new ScheduledTask(36, 38, 0)};
        int[] expectedProcessorEndTimes = new int[]{46, 44};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(26, 30, 0), new ScheduledTask(4, 9, 0), new ScheduledTask(17, 26, 0), new ScheduledTask(38, 46, 0), new ScheduledTask(30, 36, 0), new ScheduledTask(38, 44, 1), new ScheduledTask(13, 17, 0), new ScheduledTask(9, 13, 0), new ScheduledTask(36, 38, 0)};
        int[] expectedProcessorEndTimes = new int[]{46, 44};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 19, 0), new ScheduledTask(40, 48, 0), new ScheduledTask(31, 40, 0), new ScheduledTask(24, 31, 0), new ScheduledTask(50, 55, 1), new ScheduledTask(19, 24, 0), new ScheduledTask(54, 58, 0), new ScheduledTask(50, 54, 0), new ScheduledTask(48, 50, 0)};
        int[] expectedProcessorEndTimes = new int[]{58, 55};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 19, 0), new ScheduledTask(40, 48, 0), new ScheduledTask(31, 40, 0), new ScheduledTask(24, 31, 0), new ScheduledTask(50, 55, 1), new ScheduledTask(19, 24, 0), new ScheduledTask(54, 58, 0), new ScheduledTask(50, 54, 0), new ScheduledTask(48, 50, 0)};
        int[] expectedProcessorEndTimes = new int[]{58, 55};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 19, 0), new ScheduledTask(40, 48, 0), new ScheduledTask(31, 40, 0), new ScheduledTask(24, 31, 0), new ScheduledTask(50, 55, 1), new ScheduledTask(19, 24, 0), new ScheduledTask(54, 58, 0), new ScheduledTask(50, 54, 0), new ScheduledTask(48, 50, 0)};
        int[] expectedProcessorEndTimes = new int[]{58, 55};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(11, 16, 0), new ScheduledTask(30, 33, 0), new ScheduledTask(39, 49, 1), new ScheduledTask(22, 30, 0), new ScheduledTask(33, 40, 0), new ScheduledTask(40, 47, 0), new ScheduledTask(16, 22, 0), new ScheduledTask(6, 11, 0), new ScheduledTask(47, 51, 0)};
        int[] expectedProcessorEndTimes = new int[]{51, 49};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(11, 16, 0), new ScheduledTask(30, 33, 0), new ScheduledTask(39, 49, 1), new ScheduledTask(22, 30, 0), new ScheduledTask(33, 40, 0), new ScheduledTask(40, 47, 0), new ScheduledTask(16, 22, 0), new ScheduledTask(6, 11, 0), new ScheduledTask(47, 51, 0)};
        int[] expectedProcessorEndTimes = new int[]{51, 49};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(11, 16, 0), new ScheduledTask(30, 33, 0), new ScheduledTask(39, 49, 1), new ScheduledTask(22, 30, 0), new ScheduledTask(33, 40, 0), new ScheduledTask(40, 47, 0), new ScheduledTask(16, 22, 0), new ScheduledTask(6, 11, 0), new ScheduledTask(47, 51, 0)};
        int[] expectedProcessorEndTimes = new int[]{51, 49};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(30, 39, 0), new ScheduledTask(11, 16, 0), new ScheduledTask(22, 30, 0), new ScheduledTask(43, 50, 1), new ScheduledTask(39, 45, 0), new ScheduledTask(16, 22, 0), new ScheduledTask(6, 11, 0), new ScheduledTask(47, 52, 0), new ScheduledTask(45, 47, 0)};
        int[] expectedProcessorEndTimes = new int[]{52, 50};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(30, 39, 0), new ScheduledTask(11, 16, 0), new ScheduledTask(22, 30, 0), new ScheduledTask(43, 50, 1), new ScheduledTask(39, 45, 0), new ScheduledTask(16, 22, 0), new ScheduledTask(6, 11, 0), new ScheduledTask(47, 52, 0), new ScheduledTask(45, 47, 0)};
        int[] expectedProcessorEndTimes = new int[]{52, 50};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(30, 39, 0), new ScheduledTask(11, 16, 0), new ScheduledTask(22, 30, 0), new ScheduledTask(43, 50, 1), new ScheduledTask(39, 45, 0), new ScheduledTask(16, 22, 0), new ScheduledTask(6, 11, 0), new ScheduledTask(47, 52, 0), new ScheduledTask(45, 47, 0)};
        int[] expectedProcessorEndTimes = new int[]{52, 50};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 12, 0), new ScheduledTask(12, 15, 0), new ScheduledTask(15, 24, 0), new ScheduledTask(24, 31, 0), new ScheduledTask(31, 38, 0), new ScheduledTask(38, 44, 0), new ScheduledTask(44, 50, 0), new ScheduledTask(34, 37, 1), new ScheduledTask(50, 53, 0)};
        int[] expectedProcessorEndTimes = new int[]{53, 37};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 12, 0), new ScheduledTask(12, 15, 0), new ScheduledTask(15, 24, 0), new ScheduledTask(24, 31, 0), new ScheduledTask(31, 38, 0), new ScheduledTask(38, 44, 0), new ScheduledTask(44, 50, 0), new ScheduledTask(34, 37, 1), new ScheduledTask(50, 53, 0)};
        int[] expectedProcessorEndTimes = new int[]{53, 37};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 12, 0), new ScheduledTask(12, 15, 0), new ScheduledTask(15, 24, 0), new ScheduledTask(24, 31, 0), new ScheduledTask(31, 38, 0), new ScheduledTask(38, 44, 0), new ScheduledTask(44, 50, 0), new ScheduledTask(34, 37, 1), new ScheduledTask(50, 53, 0)};
        int[] expectedProcessorEndTimes = new int[]{53, 37};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 280;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 58, 0), new ScheduledTask(58, 140, 0), new ScheduledTask(67, 90, 1), new ScheduledTask(90, 172, 1), new ScheduledTask(140, 163, 0), new ScheduledTask(163, 280, 0), new ScheduledTask(149, 254, 2), new ScheduledTask(172, 230, 1), new ScheduledTask(179, 237, 3), new ScheduledTask(169, 192, 4)};
        int[] expectedProcessorEndTimes = new int[]{280, 230, 254, 237, 192};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 349;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 58, 0), new ScheduledTask(58, 140, 0), new ScheduledTask(67, 90, 1), new ScheduledTask(90, 172, 1), new ScheduledTask(140, 163, 0), new ScheduledTask(230, 347, 1), new ScheduledTask(244, 349, 0), new ScheduledTask(172, 230, 1), new ScheduledTask(186, 244, 0), new ScheduledTask(163, 186, 0)};
        int[] expectedProcessorEndTimes = new int[]{349, 347};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 280;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 58, 0), new ScheduledTask(58, 140, 0), new ScheduledTask(67, 90, 1), new ScheduledTask(90, 172, 1), new ScheduledTask(140, 163, 0), new ScheduledTask(163, 280, 0), new ScheduledTask(149, 254, 2), new ScheduledTask(172, 230, 1), new ScheduledTask(179, 237, 3), new ScheduledTask(230, 253, 1)};
        int[] expectedProcessorEndTimes = new int[]{280, 253, 254, 237};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 280;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 58, 0), new ScheduledTask(58, 140, 0), new ScheduledTask(67, 90, 1), new ScheduledTask(90, 172, 1), new ScheduledTask(140, 163, 0), new ScheduledTask(163, 280, 0), new ScheduledTask(149, 254, 2), new ScheduledTask(172, 230, 1), new ScheduledTask(179, 237, 3), new ScheduledTask(169, 192, 4)};
        int[] expectedProcessorEndTimes = new int[]{280, 230, 254, 237, 192};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_1dot09_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_1.09_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 14, 0), new ScheduledTask(14, 18, 0), new ScheduledTask(20, 27, 1), new ScheduledTask(18, 27, 0), new ScheduledTask(23, 30, 2), new ScheduledTask(25, 32, 3), new ScheduledTask(23, 28, 4), new ScheduledTask(29, 32, 1), new ScheduledTask(27, 29, 1)};
        int[] expectedProcessorEndTimes = new int[]{27, 32, 30, 32, 28};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_1dot09_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_1.09_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 38;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 14, 0), new ScheduledTask(18, 22, 1), new ScheduledTask(21, 28, 0), new ScheduledTask(22, 31, 1), new ScheduledTask(14, 21, 0), new ScheduledTask(31, 38, 1), new ScheduledTask(33, 38, 0), new ScheduledTask(30, 33, 0), new ScheduledTask(28, 30, 0)};
        int[] expectedProcessorEndTimes = new int[]{38, 38};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_1dot09_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_1.09_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 14, 0), new ScheduledTask(14, 18, 0), new ScheduledTask(20, 27, 1), new ScheduledTask(23, 32, 0), new ScheduledTask(23, 30, 2), new ScheduledTask(25, 32, 3), new ScheduledTask(18, 23, 0), new ScheduledTask(29, 32, 1), new ScheduledTask(27, 29, 1)};
        int[] expectedProcessorEndTimes = new int[]{32, 32, 30, 32};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_1dot09_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_1.09_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 14, 0), new ScheduledTask(14, 18, 0), new ScheduledTask(20, 27, 1), new ScheduledTask(18, 27, 0), new ScheduledTask(23, 30, 2), new ScheduledTask(25, 32, 3), new ScheduledTask(23, 28, 4), new ScheduledTask(29, 32, 1), new ScheduledTask(27, 29, 1)};
        int[] expectedProcessorEndTimes = new int[]{27, 32, 30, 32, 28};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_1dot96_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_1.96_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 26;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 12, 0), new ScheduledTask(12, 15, 0), new ScheduledTask(12, 16, 1), new ScheduledTask(17, 21, 2), new ScheduledTask(15, 25, 0), new ScheduledTask(16, 20, 1), new ScheduledTask(20, 23, 1), new ScheduledTask(21, 24, 2), new ScheduledTask(24, 26, 3)};
        int[] expectedProcessorEndTimes = new int[]{25, 23, 24, 26};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_1dot96_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_1.96_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 12, 0), new ScheduledTask(12, 15, 0), new ScheduledTask(12, 16, 1), new ScheduledTask(20, 24, 1), new ScheduledTask(15, 25, 0), new ScheduledTask(16, 20, 1), new ScheduledTask(26, 29, 0), new ScheduledTask(26, 29, 1), new ScheduledTask(24, 26, 1)};
        int[] expectedProcessorEndTimes = new int[]{29, 29};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_1dot96_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_1.96_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 26;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 12, 0), new ScheduledTask(12, 15, 0), new ScheduledTask(12, 16, 1), new ScheduledTask(17, 21, 2), new ScheduledTask(15, 25, 0), new ScheduledTask(16, 20, 1), new ScheduledTask(20, 23, 1), new ScheduledTask(21, 24, 2), new ScheduledTask(24, 26, 3)};
        int[] expectedProcessorEndTimes = new int[]{25, 23, 24, 26};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_1dot96_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_1.96_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 26;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 12, 0), new ScheduledTask(12, 15, 0), new ScheduledTask(12, 16, 1), new ScheduledTask(17, 21, 2), new ScheduledTask(15, 25, 0), new ScheduledTask(16, 20, 1), new ScheduledTask(20, 23, 1), new ScheduledTask(21, 24, 2), new ScheduledTask(24, 26, 3)};
        int[] expectedProcessorEndTimes = new int[]{25, 23, 24, 26};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_10dot01_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_10.01_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(45, 49, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(31, 36, 0), new ScheduledTask(57, 67, 0), new ScheduledTask(22, 31, 0), new ScheduledTask(36, 45, 0), new ScheduledTask(49, 57, 0), new ScheduledTask(65, 71, 1), new ScheduledTask(19, 22, 0)};
        int[] expectedProcessorEndTimes = new int[]{67, 71};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_10dot01_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_10.01_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(45, 49, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(31, 36, 0), new ScheduledTask(57, 67, 0), new ScheduledTask(22, 31, 0), new ScheduledTask(36, 45, 0), new ScheduledTask(49, 57, 0), new ScheduledTask(65, 71, 1), new ScheduledTask(19, 22, 0)};
        int[] expectedProcessorEndTimes = new int[]{67, 71};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_10dot01_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_10.01_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(45, 49, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(31, 36, 0), new ScheduledTask(57, 67, 0), new ScheduledTask(22, 31, 0), new ScheduledTask(36, 45, 0), new ScheduledTask(49, 57, 0), new ScheduledTask(65, 71, 1), new ScheduledTask(19, 22, 0)};
        int[] expectedProcessorEndTimes = new int[]{67, 71};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_10dot01_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_10.01_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(45, 49, 0), new ScheduledTask(10, 19, 0), new ScheduledTask(31, 36, 0), new ScheduledTask(57, 67, 0), new ScheduledTask(22, 31, 0), new ScheduledTask(36, 45, 0), new ScheduledTask(49, 57, 0), new ScheduledTask(65, 71, 1), new ScheduledTask(19, 22, 0)};
        int[] expectedProcessorEndTimes = new int[]{67, 71};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 518;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 57, 0), new ScheduledTask(57, 143, 0), new ScheduledTask(143, 286, 0), new ScheduledTask(62, 190, 1), new ScheduledTask(286, 429, 0), new ScheduledTask(190, 233, 1), new ScheduledTask(290, 347, 1), new ScheduledTask(429, 472, 0), new ScheduledTask(436, 465, 1), new ScheduledTask(475, 518, 0)};
        int[] expectedProcessorEndTimes = new int[]{518, 465};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 518;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 57, 0), new ScheduledTask(57, 143, 0), new ScheduledTask(143, 286, 0), new ScheduledTask(62, 190, 1), new ScheduledTask(286, 429, 0), new ScheduledTask(190, 233, 1), new ScheduledTask(290, 347, 1), new ScheduledTask(429, 472, 0), new ScheduledTask(436, 465, 1), new ScheduledTask(475, 518, 0)};
        int[] expectedProcessorEndTimes = new int[]{518, 465};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 518;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 57, 0), new ScheduledTask(57, 143, 0), new ScheduledTask(143, 286, 0), new ScheduledTask(62, 190, 1), new ScheduledTask(286, 429, 0), new ScheduledTask(190, 233, 1), new ScheduledTask(290, 347, 1), new ScheduledTask(429, 472, 0), new ScheduledTask(436, 465, 1), new ScheduledTask(475, 518, 0)};
        int[] expectedProcessorEndTimes = new int[]{518, 465};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 455;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 21, 0), new ScheduledTask(21, 106, 0), new ScheduledTask(31, 126, 1), new ScheduledTask(106, 212, 0), new ScheduledTask(126, 200, 1), new ScheduledTask(212, 275, 0), new ScheduledTask(216, 237, 1), new ScheduledTask(275, 370, 0), new ScheduledTask(278, 363, 1), new ScheduledTask(370, 455, 0)};
        int[] expectedProcessorEndTimes = new int[]{455, 363};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 455;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 21, 0), new ScheduledTask(21, 106, 0), new ScheduledTask(31, 126, 1), new ScheduledTask(106, 212, 0), new ScheduledTask(126, 200, 1), new ScheduledTask(212, 275, 0), new ScheduledTask(216, 237, 1), new ScheduledTask(275, 370, 0), new ScheduledTask(278, 363, 1), new ScheduledTask(370, 455, 0)};
        int[] expectedProcessorEndTimes = new int[]{455, 363};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 455;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 21, 0), new ScheduledTask(21, 106, 0), new ScheduledTask(31, 126, 1), new ScheduledTask(106, 212, 0), new ScheduledTask(126, 200, 1), new ScheduledTask(212, 275, 0), new ScheduledTask(216, 237, 1), new ScheduledTask(275, 370, 0), new ScheduledTask(278, 363, 1), new ScheduledTask(370, 455, 0)};
        int[] expectedProcessorEndTimes = new int[]{455, 363};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 660;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 90, 0), new ScheduledTask(90, 210, 0), new ScheduledTask(92, 197, 1), new ScheduledTask(210, 300, 0), new ScheduledTask(219, 249, 1), new ScheduledTask(300, 435, 0), new ScheduledTask(310, 385, 1), new ScheduledTask(385, 475, 1), new ScheduledTask(435, 525, 0), new ScheduledTask(525, 660, 0)};
        int[] expectedProcessorEndTimes = new int[]{660, 475};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 660;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 90, 0), new ScheduledTask(90, 210, 0), new ScheduledTask(92, 197, 1), new ScheduledTask(210, 300, 0), new ScheduledTask(219, 249, 1), new ScheduledTask(300, 435, 0), new ScheduledTask(310, 385, 1), new ScheduledTask(385, 475, 1), new ScheduledTask(435, 525, 0), new ScheduledTask(525, 660, 0)};
        int[] expectedProcessorEndTimes = new int[]{660, 475};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 660;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 90, 0), new ScheduledTask(90, 210, 0), new ScheduledTask(92, 197, 1), new ScheduledTask(210, 300, 0), new ScheduledTask(219, 249, 1), new ScheduledTask(300, 435, 0), new ScheduledTask(310, 385, 1), new ScheduledTask(385, 475, 1), new ScheduledTask(435, 525, 0), new ScheduledTask(525, 660, 0)};
        int[] expectedProcessorEndTimes = new int[]{660, 475};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 553;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 98, 0), new ScheduledTask(98, 184, 0), new ScheduledTask(184, 270, 0), new ScheduledTask(100, 137, 1), new ScheduledTask(186, 284, 1), new ScheduledTask(270, 381, 0), new ScheduledTask(284, 321, 1), new ScheduledTask(381, 442, 0), new ScheduledTask(386, 411, 1), new ScheduledTask(442, 553, 0)};
        int[] expectedProcessorEndTimes = new int[]{553, 411};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 553;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 98, 0), new ScheduledTask(98, 184, 0), new ScheduledTask(184, 270, 0), new ScheduledTask(100, 137, 1), new ScheduledTask(186, 284, 1), new ScheduledTask(270, 381, 0), new ScheduledTask(284, 321, 1), new ScheduledTask(381, 442, 0), new ScheduledTask(386, 411, 1), new ScheduledTask(442, 553, 0)};
        int[] expectedProcessorEndTimes = new int[]{553, 411};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 553;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 98, 0), new ScheduledTask(98, 184, 0), new ScheduledTask(184, 270, 0), new ScheduledTask(100, 137, 1), new ScheduledTask(186, 284, 1), new ScheduledTask(270, 381, 0), new ScheduledTask(284, 321, 1), new ScheduledTask(381, 442, 0), new ScheduledTask(386, 411, 1), new ScheduledTask(442, 553, 0)};
        int[] expectedProcessorEndTimes = new int[]{553, 411};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 639;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 148, 0), new ScheduledTask(148, 207, 0), new ScheduledTask(207, 355, 0), new ScheduledTask(151, 195, 1), new ScheduledTask(217, 261, 1), new ScheduledTask(355, 444, 0), new ScheduledTask(362, 421, 1), new ScheduledTask(444, 503, 0), new ScheduledTask(452, 496, 1), new ScheduledTask(506, 639, 0)};
        int[] expectedProcessorEndTimes = new int[]{639, 496};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 639;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 148, 0), new ScheduledTask(148, 207, 0), new ScheduledTask(207, 355, 0), new ScheduledTask(151, 195, 1), new ScheduledTask(217, 261, 1), new ScheduledTask(355, 444, 0), new ScheduledTask(362, 421, 1), new ScheduledTask(444, 503, 0), new ScheduledTask(452, 496, 1), new ScheduledTask(506, 639, 0)};
        int[] expectedProcessorEndTimes = new int[]{639, 496};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 639;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 148, 0), new ScheduledTask(148, 207, 0), new ScheduledTask(207, 355, 0), new ScheduledTask(151, 195, 1), new ScheduledTask(217, 261, 1), new ScheduledTask(355, 444, 0), new ScheduledTask(362, 421, 1), new ScheduledTask(444, 503, 0), new ScheduledTask(452, 496, 1), new ScheduledTask(506, 639, 0)};
        int[] expectedProcessorEndTimes = new int[]{639, 496};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 560;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 118, 0), new ScheduledTask(118, 200, 0), new ScheduledTask(125, 231, 1), new ScheduledTask(200, 259, 0), new ScheduledTask(231, 278, 1), new ScheduledTask(259, 330, 0), new ScheduledTask(278, 325, 1), new ScheduledTask(336, 454, 1), new ScheduledTask(330, 448, 0), new ScheduledTask(454, 560, 1)};
        int[] expectedProcessorEndTimes = new int[]{448, 560};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 560;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 118, 0), new ScheduledTask(118, 200, 0), new ScheduledTask(125, 231, 1), new ScheduledTask(200, 259, 0), new ScheduledTask(231, 278, 1), new ScheduledTask(259, 330, 0), new ScheduledTask(278, 325, 1), new ScheduledTask(336, 454, 2), new ScheduledTask(330, 448, 0), new ScheduledTask(454, 560, 2)};
        int[] expectedProcessorEndTimes = new int[]{448, 325, 560};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 560;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 118, 0), new ScheduledTask(118, 200, 0), new ScheduledTask(125, 231, 1), new ScheduledTask(200, 259, 0), new ScheduledTask(231, 278, 1), new ScheduledTask(259, 330, 0), new ScheduledTask(278, 325, 1), new ScheduledTask(336, 454, 2), new ScheduledTask(330, 448, 0), new ScheduledTask(454, 560, 2)};
        int[] expectedProcessorEndTimes = new int[]{448, 325, 560};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 443;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 28, 0), new ScheduledTask(28, 97, 0), new ScheduledTask(33, 61, 1), new ScheduledTask(97, 235, 0), new ScheduledTask(61, 171, 1), new ScheduledTask(235, 332, 0), new ScheduledTask(171, 240, 1), new ScheduledTask(240, 281, 1), new ScheduledTask(332, 360, 0), new ScheduledTask(360, 443, 0)};
        int[] expectedProcessorEndTimes = new int[]{443, 281};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 443;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 28, 0), new ScheduledTask(28, 97, 0), new ScheduledTask(33, 61, 1), new ScheduledTask(97, 235, 0), new ScheduledTask(61, 171, 1), new ScheduledTask(235, 332, 0), new ScheduledTask(171, 240, 1), new ScheduledTask(240, 281, 1), new ScheduledTask(332, 360, 0), new ScheduledTask(360, 443, 0)};
        int[] expectedProcessorEndTimes = new int[]{443, 281};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 443;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 28, 0), new ScheduledTask(28, 97, 0), new ScheduledTask(33, 61, 1), new ScheduledTask(97, 235, 0), new ScheduledTask(61, 171, 1), new ScheduledTask(235, 332, 0), new ScheduledTask(171, 240, 1), new ScheduledTask(240, 281, 1), new ScheduledTask(332, 360, 0), new ScheduledTask(360, 443, 0)};
        int[] expectedProcessorEndTimes = new int[]{443, 281};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 554;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 101, 0), new ScheduledTask(101, 180, 0), new ScheduledTask(105, 150, 1), new ScheduledTask(180, 281, 0), new ScheduledTask(185, 275, 1), new ScheduledTask(284, 363, 1), new ScheduledTask(281, 360, 0), new ScheduledTask(363, 453, 1), new ScheduledTask(360, 416, 0), new ScheduledTask(453, 554, 1)};
        int[] expectedProcessorEndTimes = new int[]{416, 554};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 554;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 101, 0), new ScheduledTask(101, 180, 0), new ScheduledTask(105, 150, 1), new ScheduledTask(180, 281, 0), new ScheduledTask(185, 275, 1), new ScheduledTask(284, 363, 1), new ScheduledTask(281, 360, 0), new ScheduledTask(363, 453, 1), new ScheduledTask(360, 416, 0), new ScheduledTask(453, 554, 1)};
        int[] expectedProcessorEndTimes = new int[]{416, 554};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 554;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 101, 0), new ScheduledTask(101, 180, 0), new ScheduledTask(105, 150, 1), new ScheduledTask(180, 281, 0), new ScheduledTask(185, 275, 1), new ScheduledTask(284, 363, 1), new ScheduledTask(281, 360, 0), new ScheduledTask(363, 453, 1), new ScheduledTask(360, 416, 0), new ScheduledTask(453, 554, 1)};
        int[] expectedProcessorEndTimes = new int[]{416, 554};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 409;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 89, 0), new ScheduledTask(89, 115, 0), new ScheduledTask(115, 166, 0), new ScheduledTask(98, 124, 1), new ScheduledTask(124, 150, 1), new ScheduledTask(166, 268, 0), new ScheduledTask(172, 261, 1), new ScheduledTask(268, 345, 0), new ScheduledTask(261, 312, 1), new ScheduledTask(345, 409, 0)};
        int[] expectedProcessorEndTimes = new int[]{409, 312};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 409;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 89, 0), new ScheduledTask(89, 115, 0), new ScheduledTask(115, 166, 0), new ScheduledTask(98, 124, 1), new ScheduledTask(124, 150, 1), new ScheduledTask(166, 268, 0), new ScheduledTask(172, 261, 1), new ScheduledTask(268, 345, 0), new ScheduledTask(261, 312, 1), new ScheduledTask(345, 409, 0)};
        int[] expectedProcessorEndTimes = new int[]{409, 312};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 409;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 89, 0), new ScheduledTask(89, 115, 0), new ScheduledTask(115, 166, 0), new ScheduledTask(98, 124, 1), new ScheduledTask(124, 150, 1), new ScheduledTask(166, 268, 0), new ScheduledTask(172, 261, 1), new ScheduledTask(268, 345, 0), new ScheduledTask(261, 312, 1), new ScheduledTask(345, 409, 0)};
        int[] expectedProcessorEndTimes = new int[]{409, 312};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 481;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 70, 0), new ScheduledTask(70, 98, 0), new ScheduledTask(74, 102, 1), new ScheduledTask(103, 215, 1), new ScheduledTask(98, 168, 0), new ScheduledTask(215, 313, 1), new ScheduledTask(168, 210, 0), new ScheduledTask(210, 294, 0), new ScheduledTask(313, 341, 1), new ScheduledTask(341, 481, 1)};
        int[] expectedProcessorEndTimes = new int[]{294, 481};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 481;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 70, 0), new ScheduledTask(70, 98, 0), new ScheduledTask(74, 102, 1), new ScheduledTask(103, 215, 1), new ScheduledTask(98, 168, 0), new ScheduledTask(215, 313, 1), new ScheduledTask(168, 210, 0), new ScheduledTask(210, 294, 0), new ScheduledTask(313, 341, 1), new ScheduledTask(341, 481, 1)};
        int[] expectedProcessorEndTimes = new int[]{294, 481};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 481;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 70, 0), new ScheduledTask(70, 98, 0), new ScheduledTask(74, 102, 1), new ScheduledTask(103, 215, 1), new ScheduledTask(98, 168, 0), new ScheduledTask(215, 313, 1), new ScheduledTask(168, 210, 0), new ScheduledTask(210, 294, 0), new ScheduledTask(313, 341, 1), new ScheduledTask(341, 481, 1)};
        int[] expectedProcessorEndTimes = new int[]{294, 481};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 481;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 70, 0), new ScheduledTask(70, 98, 0), new ScheduledTask(74, 102, 1), new ScheduledTask(103, 215, 1), new ScheduledTask(98, 168, 0), new ScheduledTask(215, 313, 1), new ScheduledTask(168, 210, 0), new ScheduledTask(210, 294, 0), new ScheduledTask(313, 341, 1), new ScheduledTask(341, 481, 1)};
        int[] expectedProcessorEndTimes = new int[]{294, 481};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 604;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 125, 0), new ScheduledTask(125, 225, 0), new ScheduledTask(135, 248, 1), new ScheduledTask(225, 350, 0), new ScheduledTask(248, 361, 1), new ScheduledTask(350, 425, 0), new ScheduledTask(361, 399, 1), new ScheduledTask(425, 525, 0), new ScheduledTask(432, 520, 1), new ScheduledTask(529, 604, 0)};
        int[] expectedProcessorEndTimes = new int[]{604, 520};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 604;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 125, 0), new ScheduledTask(125, 225, 0), new ScheduledTask(135, 248, 1), new ScheduledTask(225, 350, 0), new ScheduledTask(248, 361, 1), new ScheduledTask(350, 425, 0), new ScheduledTask(361, 399, 1), new ScheduledTask(425, 525, 0), new ScheduledTask(432, 520, 1), new ScheduledTask(529, 604, 0)};
        int[] expectedProcessorEndTimes = new int[]{604, 520};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 604;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 125, 0), new ScheduledTask(125, 225, 0), new ScheduledTask(135, 248, 1), new ScheduledTask(225, 350, 0), new ScheduledTask(248, 361, 1), new ScheduledTask(350, 425, 0), new ScheduledTask(361, 399, 1), new ScheduledTask(425, 525, 0), new ScheduledTask(432, 520, 1), new ScheduledTask(529, 604, 0)};
        int[] expectedProcessorEndTimes = new int[]{604, 520};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot97_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.97_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(9, 18, 0), new ScheduledTask(4, 9, 0), new ScheduledTask(11, 15, 1), new ScheduledTask(18, 24, 0), new ScheduledTask(24, 30, 0), new ScheduledTask(15, 20, 1), new ScheduledTask(20, 31, 1), new ScheduledTask(30, 37, 0), new ScheduledTask(39, 51, 0)};
        int[] expectedProcessorEndTimes = new int[]{51, 31};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot97_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.97_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(9, 18, 0), new ScheduledTask(4, 9, 0), new ScheduledTask(11, 15, 1), new ScheduledTask(18, 24, 0), new ScheduledTask(24, 30, 0), new ScheduledTask(15, 20, 1), new ScheduledTask(20, 31, 1), new ScheduledTask(30, 37, 0), new ScheduledTask(39, 51, 0)};
        int[] expectedProcessorEndTimes = new int[]{51, 31};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot97_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.97_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(9, 18, 0), new ScheduledTask(4, 9, 0), new ScheduledTask(11, 15, 1), new ScheduledTask(18, 24, 0), new ScheduledTask(24, 30, 0), new ScheduledTask(15, 20, 1), new ScheduledTask(20, 31, 1), new ScheduledTask(30, 37, 0), new ScheduledTask(39, 51, 0)};
        int[] expectedProcessorEndTimes = new int[]{51, 31};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot99_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.99_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(14, 23, 0), new ScheduledTask(6, 14, 0), new ScheduledTask(23, 39, 0), new ScheduledTask(16, 24, 1), new ScheduledTask(24, 32, 1), new ScheduledTask(39, 45, 0), new ScheduledTask(32, 45, 1), new ScheduledTask(45, 50, 0), new ScheduledTask(50, 66, 0)};
        int[] expectedProcessorEndTimes = new int[]{66, 45};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot99_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.99_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(14, 23, 0), new ScheduledTask(6, 14, 0), new ScheduledTask(23, 39, 0), new ScheduledTask(16, 24, 1), new ScheduledTask(24, 32, 1), new ScheduledTask(39, 45, 0), new ScheduledTask(32, 45, 1), new ScheduledTask(45, 50, 0), new ScheduledTask(50, 66, 0)};
        int[] expectedProcessorEndTimes = new int[]{66, 45};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot99_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.99_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(14, 23, 0), new ScheduledTask(6, 14, 0), new ScheduledTask(23, 39, 0), new ScheduledTask(16, 24, 1), new ScheduledTask(24, 32, 1), new ScheduledTask(39, 45, 0), new ScheduledTask(32, 45, 1), new ScheduledTask(45, 50, 0), new ScheduledTask(50, 66, 0)};
        int[] expectedProcessorEndTimes = new int[]{66, 45};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot99_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.99_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(16, 20, 0), new ScheduledTask(10, 16, 0), new ScheduledTask(20, 39, 0), new ScheduledTask(24, 28, 1), new ScheduledTask(28, 36, 1), new ScheduledTask(39, 47, 0), new ScheduledTask(36, 44, 1), new ScheduledTask(47, 55, 0), new ScheduledTask(55, 70, 0)};
        int[] expectedProcessorEndTimes = new int[]{70, 44};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot99_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.99_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(16, 20, 0), new ScheduledTask(10, 16, 0), new ScheduledTask(20, 39, 0), new ScheduledTask(24, 28, 1), new ScheduledTask(28, 36, 1), new ScheduledTask(39, 47, 0), new ScheduledTask(36, 44, 1), new ScheduledTask(47, 55, 0), new ScheduledTask(55, 70, 0)};
        int[] expectedProcessorEndTimes = new int[]{70, 44};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot99_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.99_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(16, 20, 0), new ScheduledTask(10, 16, 0), new ScheduledTask(20, 39, 0), new ScheduledTask(24, 28, 1), new ScheduledTask(28, 36, 1), new ScheduledTask(39, 47, 0), new ScheduledTask(36, 44, 1), new ScheduledTask(47, 55, 0), new ScheduledTask(55, 70, 0)};
        int[] expectedProcessorEndTimes = new int[]{70, 44};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 14, 0), new ScheduledTask(9, 15, 1), new ScheduledTask(14, 24, 0), new ScheduledTask(18, 23, 1), new ScheduledTask(31, 41, 1), new ScheduledTask(24, 33, 0), new ScheduledTask(33, 41, 0), new ScheduledTask(41, 48, 1), new ScheduledTask(50, 52, 1)};
        int[] expectedProcessorEndTimes = new int[]{41, 52};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 14, 0), new ScheduledTask(9, 15, 1), new ScheduledTask(14, 24, 0), new ScheduledTask(18, 23, 1), new ScheduledTask(31, 41, 1), new ScheduledTask(24, 33, 0), new ScheduledTask(33, 41, 0), new ScheduledTask(41, 48, 1), new ScheduledTask(50, 52, 1)};
        int[] expectedProcessorEndTimes = new int[]{41, 52};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 14, 0), new ScheduledTask(9, 15, 1), new ScheduledTask(14, 24, 0), new ScheduledTask(18, 23, 1), new ScheduledTask(31, 41, 1), new ScheduledTask(24, 33, 0), new ScheduledTask(33, 41, 0), new ScheduledTask(41, 48, 1), new ScheduledTask(50, 52, 1)};
        int[] expectedProcessorEndTimes = new int[]{41, 52};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 19, 0), new ScheduledTask(13, 18, 1), new ScheduledTask(22, 34, 0), new ScheduledTask(18, 27, 1), new ScheduledTask(35, 44, 0), new ScheduledTask(27, 30, 1), new ScheduledTask(44, 52, 0), new ScheduledTask(30, 38, 1), new ScheduledTask(52, 57, 0)};
        int[] expectedProcessorEndTimes = new int[]{57, 38};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 19, 0), new ScheduledTask(13, 18, 1), new ScheduledTask(22, 34, 2), new ScheduledTask(18, 27, 1), new ScheduledTask(35, 44, 2), new ScheduledTask(32, 35, 3), new ScheduledTask(44, 52, 2), new ScheduledTask(35, 43, 3), new ScheduledTask(52, 57, 2)};
        int[] expectedProcessorEndTimes = new int[]{19, 27, 57, 43};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 19, 0), new ScheduledTask(13, 18, 1), new ScheduledTask(22, 34, 2), new ScheduledTask(18, 27, 1), new ScheduledTask(35, 44, 2), new ScheduledTask(32, 35, 3), new ScheduledTask(44, 52, 2), new ScheduledTask(35, 43, 3), new ScheduledTask(52, 57, 2)};
        int[] expectedProcessorEndTimes = new int[]{19, 27, 57, 43};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(18, 23, 1), new ScheduledTask(8, 14, 0), new ScheduledTask(23, 32, 1), new ScheduledTask(14, 19, 0), new ScheduledTask(19, 27, 0), new ScheduledTask(32, 42, 1), new ScheduledTask(42, 49, 1), new ScheduledTask(27, 34, 0), new ScheduledTask(49, 57, 1)};
        int[] expectedProcessorEndTimes = new int[]{34, 57};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(18, 23, 1), new ScheduledTask(8, 14, 0), new ScheduledTask(23, 32, 1), new ScheduledTask(14, 19, 0), new ScheduledTask(21, 29, 2), new ScheduledTask(32, 42, 1), new ScheduledTask(42, 49, 1), new ScheduledTask(29, 36, 2), new ScheduledTask(49, 57, 1)};
        int[] expectedProcessorEndTimes = new int[]{19, 57, 36};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(18, 23, 1), new ScheduledTask(8, 14, 0), new ScheduledTask(23, 32, 1), new ScheduledTask(14, 19, 0), new ScheduledTask(21, 29, 2), new ScheduledTask(32, 42, 1), new ScheduledTask(42, 49, 1), new ScheduledTask(29, 36, 2), new ScheduledTask(49, 57, 1)};
        int[] expectedProcessorEndTimes = new int[]{19, 57, 36};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot00_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.00_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(12, 23, 0), new ScheduledTask(18, 20, 1), new ScheduledTask(23, 34, 0), new ScheduledTask(32, 36, 1), new ScheduledTask(36, 48, 1), new ScheduledTask(34, 36, 0), new ScheduledTask(48, 55, 1), new ScheduledTask(36, 44, 0), new ScheduledTask(55, 66, 1)};
        int[] expectedProcessorEndTimes = new int[]{44, 66};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(12, 23, 0), new ScheduledTask(18, 20, 1), new ScheduledTask(23, 34, 0), new ScheduledTask(32, 36, 1), new ScheduledTask(36, 48, 1), new ScheduledTask(34, 36, 0), new ScheduledTask(48, 55, 1), new ScheduledTask(36, 44, 0), new ScheduledTask(55, 66, 1)};
        int[] expectedProcessorEndTimes = new int[]{44, 66};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot00_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.00_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(12, 23, 0), new ScheduledTask(18, 20, 1), new ScheduledTask(23, 34, 0), new ScheduledTask(32, 36, 1), new ScheduledTask(36, 48, 1), new ScheduledTask(34, 36, 0), new ScheduledTask(48, 55, 1), new ScheduledTask(36, 44, 0), new ScheduledTask(55, 66, 1)};
        int[] expectedProcessorEndTimes = new int[]{44, 66};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot00_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.00_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(12, 23, 0), new ScheduledTask(18, 20, 1), new ScheduledTask(23, 34, 0), new ScheduledTask(32, 36, 1), new ScheduledTask(36, 48, 1), new ScheduledTask(34, 36, 0), new ScheduledTask(48, 55, 1), new ScheduledTask(36, 44, 0), new ScheduledTask(55, 66, 1)};
        int[] expectedProcessorEndTimes = new int[]{44, 66};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 18, 0), new ScheduledTask(18, 24, 0), new ScheduledTask(24, 32, 0), new ScheduledTask(22, 26, 1), new ScheduledTask(32, 41, 0), new ScheduledTask(26, 29, 1), new ScheduledTask(29, 39, 1), new ScheduledTask(41, 44, 0), new ScheduledTask(44, 52, 0)};
        int[] expectedProcessorEndTimes = new int[]{52, 39};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 18, 0), new ScheduledTask(18, 24, 0), new ScheduledTask(24, 32, 0), new ScheduledTask(22, 26, 1), new ScheduledTask(32, 41, 0), new ScheduledTask(26, 29, 1), new ScheduledTask(29, 39, 1), new ScheduledTask(41, 44, 0), new ScheduledTask(44, 52, 0)};
        int[] expectedProcessorEndTimes = new int[]{52, 39};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 18, 0), new ScheduledTask(18, 24, 0), new ScheduledTask(24, 32, 0), new ScheduledTask(22, 26, 1), new ScheduledTask(32, 41, 0), new ScheduledTask(26, 29, 1), new ScheduledTask(29, 39, 1), new ScheduledTask(41, 44, 0), new ScheduledTask(44, 52, 0)};
        int[] expectedProcessorEndTimes = new int[]{52, 39};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 19, 0), new ScheduledTask(18, 27, 1), new ScheduledTask(19, 31, 0), new ScheduledTask(27, 38, 1), new ScheduledTask(31, 43, 0), new ScheduledTask(38, 48, 1), new ScheduledTask(52, 54, 1), new ScheduledTask(43, 50, 0), new ScheduledTask(54, 63, 1)};
        int[] expectedProcessorEndTimes = new int[]{50, 63};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 19, 0), new ScheduledTask(18, 27, 1), new ScheduledTask(19, 31, 0), new ScheduledTask(27, 38, 1), new ScheduledTask(31, 43, 0), new ScheduledTask(38, 48, 1), new ScheduledTask(52, 54, 1), new ScheduledTask(43, 50, 0), new ScheduledTask(54, 63, 1)};
        int[] expectedProcessorEndTimes = new int[]{50, 63};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 19, 0), new ScheduledTask(18, 27, 1), new ScheduledTask(19, 31, 0), new ScheduledTask(27, 38, 1), new ScheduledTask(31, 43, 0), new ScheduledTask(38, 48, 1), new ScheduledTask(52, 54, 1), new ScheduledTask(43, 50, 0), new ScheduledTask(54, 63, 1)};
        int[] expectedProcessorEndTimes = new int[]{50, 63};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot03_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.03_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 21, 0), new ScheduledTask(15, 25, 1), new ScheduledTask(25, 35, 1), new ScheduledTask(21, 28, 0), new ScheduledTask(36, 48, 1), new ScheduledTask(28, 30, 0), new ScheduledTask(48, 51, 1), new ScheduledTask(30, 33, 0), new ScheduledTask(51, 54, 1)};
        int[] expectedProcessorEndTimes = new int[]{33, 54};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot03_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.03_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 21, 0), new ScheduledTask(15, 25, 1), new ScheduledTask(25, 35, 1), new ScheduledTask(21, 28, 0), new ScheduledTask(36, 48, 1), new ScheduledTask(28, 30, 0), new ScheduledTask(48, 51, 1), new ScheduledTask(30, 33, 0), new ScheduledTask(51, 54, 1)};
        int[] expectedProcessorEndTimes = new int[]{33, 54};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot03_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.03_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 21, 0), new ScheduledTask(15, 25, 1), new ScheduledTask(25, 35, 1), new ScheduledTask(21, 28, 0), new ScheduledTask(36, 48, 1), new ScheduledTask(28, 30, 0), new ScheduledTask(48, 51, 1), new ScheduledTask(30, 33, 0), new ScheduledTask(51, 54, 1)};
        int[] expectedProcessorEndTimes = new int[]{33, 54};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot09_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.09_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 9, 0), new ScheduledTask(5, 15, 1), new ScheduledTask(9, 15, 0), new ScheduledTask(17, 26, 1), new ScheduledTask(15, 25, 0), new ScheduledTask(26, 30, 1), new ScheduledTask(25, 32, 0), new ScheduledTask(34, 37, 0), new ScheduledTask(37, 45, 0)};
        int[] expectedProcessorEndTimes = new int[]{45, 30};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot09_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.09_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 9, 0), new ScheduledTask(5, 15, 1), new ScheduledTask(9, 15, 0), new ScheduledTask(17, 26, 1), new ScheduledTask(15, 25, 0), new ScheduledTask(26, 30, 1), new ScheduledTask(25, 32, 0), new ScheduledTask(34, 37, 0), new ScheduledTask(37, 45, 0)};
        int[] expectedProcessorEndTimes = new int[]{45, 30};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot09_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.09_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 9, 0), new ScheduledTask(5, 15, 1), new ScheduledTask(9, 15, 0), new ScheduledTask(17, 26, 2), new ScheduledTask(15, 25, 0), new ScheduledTask(26, 30, 2), new ScheduledTask(25, 32, 0), new ScheduledTask(34, 37, 0), new ScheduledTask(37, 45, 0)};
        int[] expectedProcessorEndTimes = new int[]{45, 15, 30};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 17, 0), new ScheduledTask(17, 20, 1), new ScheduledTask(23, 33, 2), new ScheduledTask(17, 23, 0), new ScheduledTask(23, 30, 0), new ScheduledTask(35, 38, 2), new ScheduledTask(43, 51, 2), new ScheduledTask(30, 38, 0), new ScheduledTask(51, 53, 2)};
        int[] expectedProcessorEndTimes = new int[]{38, 20, 53};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 17, 0), new ScheduledTask(17, 20, 1), new ScheduledTask(23, 33, 1), new ScheduledTask(17, 23, 0), new ScheduledTask(23, 30, 0), new ScheduledTask(35, 38, 1), new ScheduledTask(43, 51, 1), new ScheduledTask(30, 38, 0), new ScheduledTask(51, 53, 1)};
        int[] expectedProcessorEndTimes = new int[]{38, 53};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 17, 0), new ScheduledTask(17, 20, 1), new ScheduledTask(23, 33, 1), new ScheduledTask(17, 23, 0), new ScheduledTask(23, 30, 0), new ScheduledTask(35, 38, 1), new ScheduledTask(43, 51, 1), new ScheduledTask(30, 38, 0), new ScheduledTask(51, 53, 1)};
        int[] expectedProcessorEndTimes = new int[]{38, 53};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 17, 0), new ScheduledTask(17, 20, 1), new ScheduledTask(23, 33, 1), new ScheduledTask(17, 23, 0), new ScheduledTask(23, 30, 0), new ScheduledTask(35, 38, 1), new ScheduledTask(43, 51, 1), new ScheduledTask(30, 38, 0), new ScheduledTask(51, 53, 1)};
        int[] expectedProcessorEndTimes = new int[]{38, 53};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 15, 0), new ScheduledTask(15, 17, 0), new ScheduledTask(17, 19, 0), new ScheduledTask(19, 22, 0), new ScheduledTask(22, 29, 0), new ScheduledTask(29, 39, 0), new ScheduledTask(39, 43, 0), new ScheduledTask(43, 48, 0), new ScheduledTask(48, 55, 0)};
        int[] expectedProcessorEndTimes = new int[]{55};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 15, 0), new ScheduledTask(15, 17, 0), new ScheduledTask(17, 19, 0), new ScheduledTask(19, 22, 0), new ScheduledTask(22, 29, 0), new ScheduledTask(29, 39, 0), new ScheduledTask(39, 43, 0), new ScheduledTask(43, 48, 0), new ScheduledTask(48, 55, 0)};
        int[] expectedProcessorEndTimes = new int[]{55};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 15, 0), new ScheduledTask(15, 17, 0), new ScheduledTask(17, 19, 0), new ScheduledTask(19, 22, 0), new ScheduledTask(22, 29, 0), new ScheduledTask(29, 39, 0), new ScheduledTask(39, 43, 0), new ScheduledTask(43, 48, 0), new ScheduledTask(48, 55, 0)};
        int[] expectedProcessorEndTimes = new int[]{55};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 13, 0), new ScheduledTask(13, 20, 0), new ScheduledTask(20, 27, 0), new ScheduledTask(27, 32, 0), new ScheduledTask(32, 39, 0), new ScheduledTask(39, 43, 0), new ScheduledTask(43, 47, 0), new ScheduledTask(47, 53, 0), new ScheduledTask(53, 57, 0)};
        int[] expectedProcessorEndTimes = new int[]{57};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 13, 0), new ScheduledTask(13, 20, 0), new ScheduledTask(20, 27, 0), new ScheduledTask(27, 32, 0), new ScheduledTask(32, 39, 0), new ScheduledTask(39, 43, 0), new ScheduledTask(43, 47, 0), new ScheduledTask(47, 53, 0), new ScheduledTask(53, 57, 0)};
        int[] expectedProcessorEndTimes = new int[]{57};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 13, 0), new ScheduledTask(13, 20, 0), new ScheduledTask(20, 27, 0), new ScheduledTask(27, 32, 0), new ScheduledTask(32, 39, 0), new ScheduledTask(39, 43, 0), new ScheduledTask(43, 47, 0), new ScheduledTask(47, 53, 0), new ScheduledTask(53, 57, 0)};
        int[] expectedProcessorEndTimes = new int[]{57};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 11, 0), new ScheduledTask(11, 14, 0), new ScheduledTask(14, 24, 0), new ScheduledTask(24, 32, 0), new ScheduledTask(32, 39, 0), new ScheduledTask(39, 41, 0), new ScheduledTask(41, 47, 0), new ScheduledTask(47, 56, 0), new ScheduledTask(56, 58, 0)};
        int[] expectedProcessorEndTimes = new int[]{58};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 11, 0), new ScheduledTask(11, 14, 0), new ScheduledTask(14, 24, 0), new ScheduledTask(24, 32, 0), new ScheduledTask(32, 39, 0), new ScheduledTask(39, 41, 0), new ScheduledTask(41, 47, 0), new ScheduledTask(47, 56, 0), new ScheduledTask(56, 58, 0)};
        int[] expectedProcessorEndTimes = new int[]{58};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 11, 0), new ScheduledTask(11, 14, 0), new ScheduledTask(14, 24, 0), new ScheduledTask(24, 32, 0), new ScheduledTask(32, 39, 0), new ScheduledTask(39, 41, 0), new ScheduledTask(41, 47, 0), new ScheduledTask(47, 56, 0), new ScheduledTask(56, 58, 0)};
        int[] expectedProcessorEndTimes = new int[]{58};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 10, 0), new ScheduledTask(10, 14, 0), new ScheduledTask(14, 24, 0), new ScheduledTask(24, 26, 0), new ScheduledTask(26, 29, 0), new ScheduledTask(29, 37, 0), new ScheduledTask(37, 40, 0), new ScheduledTask(40, 42, 0), new ScheduledTask(42, 50, 0)};
        int[] expectedProcessorEndTimes = new int[]{50};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 10, 0), new ScheduledTask(10, 14, 0), new ScheduledTask(14, 24, 0), new ScheduledTask(24, 26, 0), new ScheduledTask(26, 29, 0), new ScheduledTask(29, 37, 0), new ScheduledTask(37, 40, 0), new ScheduledTask(40, 42, 0), new ScheduledTask(42, 50, 0)};
        int[] expectedProcessorEndTimes = new int[]{50};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 10, 0), new ScheduledTask(10, 14, 0), new ScheduledTask(14, 24, 0), new ScheduledTask(24, 26, 0), new ScheduledTask(26, 29, 0), new ScheduledTask(29, 37, 0), new ScheduledTask(37, 40, 0), new ScheduledTask(40, 42, 0), new ScheduledTask(42, 50, 0)};
        int[] expectedProcessorEndTimes = new int[]{50};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 10, 0), new ScheduledTask(10, 14, 0), new ScheduledTask(14, 24, 0), new ScheduledTask(24, 26, 0), new ScheduledTask(26, 29, 0), new ScheduledTask(29, 37, 0), new ScheduledTask(37, 40, 0), new ScheduledTask(40, 42, 0), new ScheduledTask(42, 50, 0)};
        int[] expectedProcessorEndTimes = new int[]{50};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 15, 0), new ScheduledTask(15, 17, 0), new ScheduledTask(17, 19, 0), new ScheduledTask(19, 21, 0), new ScheduledTask(21, 27, 0), new ScheduledTask(27, 36, 0), new ScheduledTask(36, 40, 0), new ScheduledTask(40, 42, 0), new ScheduledTask(42, 50, 0)};
        int[] expectedProcessorEndTimes = new int[]{50};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 15, 0), new ScheduledTask(15, 17, 0), new ScheduledTask(17, 19, 0), new ScheduledTask(19, 21, 0), new ScheduledTask(21, 27, 0), new ScheduledTask(27, 36, 0), new ScheduledTask(36, 40, 0), new ScheduledTask(40, 42, 0), new ScheduledTask(42, 50, 0)};
        int[] expectedProcessorEndTimes = new int[]{50};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 15, 0), new ScheduledTask(15, 17, 0), new ScheduledTask(17, 19, 0), new ScheduledTask(19, 21, 0), new ScheduledTask(21, 27, 0), new ScheduledTask(27, 36, 0), new ScheduledTask(36, 40, 0), new ScheduledTask(40, 42, 0), new ScheduledTask(42, 50, 0)};
        int[] expectedProcessorEndTimes = new int[]{50};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 18, 0), new ScheduledTask(18, 24, 0), new ScheduledTask(24, 31, 0), new ScheduledTask(31, 39, 0), new ScheduledTask(39, 49, 0), new ScheduledTask(49, 51, 0), new ScheduledTask(51, 58, 0), new ScheduledTask(58, 65, 0), new ScheduledTask(65, 71, 0)};
        int[] expectedProcessorEndTimes = new int[]{71};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 18, 0), new ScheduledTask(18, 24, 0), new ScheduledTask(24, 31, 0), new ScheduledTask(31, 39, 0), new ScheduledTask(39, 49, 0), new ScheduledTask(49, 51, 0), new ScheduledTask(51, 58, 0), new ScheduledTask(58, 65, 0), new ScheduledTask(65, 71, 0)};
        int[] expectedProcessorEndTimes = new int[]{71};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 18, 0), new ScheduledTask(18, 24, 0), new ScheduledTask(24, 31, 0), new ScheduledTask(31, 39, 0), new ScheduledTask(39, 49, 0), new ScheduledTask(49, 51, 0), new ScheduledTask(51, 58, 0), new ScheduledTask(58, 65, 0), new ScheduledTask(65, 71, 0)};
        int[] expectedProcessorEndTimes = new int[]{71};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 17, 0), new ScheduledTask(17, 23, 0), new ScheduledTask(23, 27, 0), new ScheduledTask(27, 35, 0), new ScheduledTask(35, 45, 0), new ScheduledTask(45, 49, 0), new ScheduledTask(49, 53, 0), new ScheduledTask(53, 61, 0), new ScheduledTask(61, 68, 0)};
        int[] expectedProcessorEndTimes = new int[]{68};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 17, 0), new ScheduledTask(17, 23, 0), new ScheduledTask(23, 27, 0), new ScheduledTask(27, 35, 0), new ScheduledTask(35, 45, 0), new ScheduledTask(45, 49, 0), new ScheduledTask(49, 53, 0), new ScheduledTask(53, 61, 0), new ScheduledTask(61, 68, 0)};
        int[] expectedProcessorEndTimes = new int[]{68};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 17, 0), new ScheduledTask(17, 23, 0), new ScheduledTask(23, 27, 0), new ScheduledTask(27, 35, 0), new ScheduledTask(35, 45, 0), new ScheduledTask(45, 49, 0), new ScheduledTask(49, 53, 0), new ScheduledTask(53, 61, 0), new ScheduledTask(61, 68, 0)};
        int[] expectedProcessorEndTimes = new int[]{68};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 14, 0), new ScheduledTask(14, 23, 0), new ScheduledTask(23, 26, 0), new ScheduledTask(26, 33, 0), new ScheduledTask(33, 38, 0), new ScheduledTask(38, 40, 0), new ScheduledTask(40, 46, 0), new ScheduledTask(46, 56, 0), new ScheduledTask(56, 62, 0)};
        int[] expectedProcessorEndTimes = new int[]{62};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 14, 0), new ScheduledTask(14, 23, 0), new ScheduledTask(23, 26, 0), new ScheduledTask(26, 33, 0), new ScheduledTask(33, 38, 0), new ScheduledTask(38, 40, 0), new ScheduledTask(40, 46, 0), new ScheduledTask(46, 56, 0), new ScheduledTask(56, 62, 0)};
        int[] expectedProcessorEndTimes = new int[]{62};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 14, 0), new ScheduledTask(14, 23, 0), new ScheduledTask(23, 26, 0), new ScheduledTask(26, 33, 0), new ScheduledTask(33, 38, 0), new ScheduledTask(38, 40, 0), new ScheduledTask(40, 46, 0), new ScheduledTask(46, 56, 0), new ScheduledTask(56, 62, 0)};
        int[] expectedProcessorEndTimes = new int[]{62};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot03_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.03_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 15, 0), new ScheduledTask(15, 20, 0), new ScheduledTask(20, 29, 0), new ScheduledTask(29, 35, 0), new ScheduledTask(35, 44, 0), new ScheduledTask(44, 52, 0), new ScheduledTask(52, 61, 0), new ScheduledTask(61, 71, 0), new ScheduledTask(71, 76, 0)};
        int[] expectedProcessorEndTimes = new int[]{76};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot03_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.03_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 15, 0), new ScheduledTask(15, 20, 0), new ScheduledTask(20, 29, 0), new ScheduledTask(29, 35, 0), new ScheduledTask(35, 44, 0), new ScheduledTask(44, 52, 0), new ScheduledTask(52, 61, 0), new ScheduledTask(61, 71, 0), new ScheduledTask(71, 76, 0)};
        int[] expectedProcessorEndTimes = new int[]{76};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot03_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.03_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 15, 0), new ScheduledTask(15, 20, 0), new ScheduledTask(20, 29, 0), new ScheduledTask(29, 35, 0), new ScheduledTask(35, 44, 0), new ScheduledTask(44, 52, 0), new ScheduledTask(52, 61, 0), new ScheduledTask(61, 71, 0), new ScheduledTask(71, 76, 0)};
        int[] expectedProcessorEndTimes = new int[]{76};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 12, 0), new ScheduledTask(12, 16, 0), new ScheduledTask(16, 19, 0), new ScheduledTask(19, 21, 0), new ScheduledTask(21, 30, 0), new ScheduledTask(30, 36, 0), new ScheduledTask(36, 46, 0), new ScheduledTask(46, 49, 0), new ScheduledTask(49, 58, 0)};
        int[] expectedProcessorEndTimes = new int[]{58};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 12, 0), new ScheduledTask(12, 16, 0), new ScheduledTask(16, 19, 0), new ScheduledTask(19, 21, 0), new ScheduledTask(21, 30, 0), new ScheduledTask(30, 36, 0), new ScheduledTask(36, 46, 0), new ScheduledTask(46, 49, 0), new ScheduledTask(49, 58, 0)};
        int[] expectedProcessorEndTimes = new int[]{58};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 12, 0), new ScheduledTask(12, 16, 0), new ScheduledTask(16, 19, 0), new ScheduledTask(19, 21, 0), new ScheduledTask(21, 30, 0), new ScheduledTask(30, 36, 0), new ScheduledTask(36, 46, 0), new ScheduledTask(46, 49, 0), new ScheduledTask(49, 58, 0)};
        int[] expectedProcessorEndTimes = new int[]{58};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 16, 0), new ScheduledTask(16, 25, 0), new ScheduledTask(25, 28, 0), new ScheduledTask(28, 38, 0), new ScheduledTask(38, 48, 0), new ScheduledTask(48, 56, 0), new ScheduledTask(56, 64, 0), new ScheduledTask(64, 74, 0), new ScheduledTask(74, 78, 0)};
        int[] expectedProcessorEndTimes = new int[]{78};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 16, 0), new ScheduledTask(16, 25, 0), new ScheduledTask(25, 28, 0), new ScheduledTask(28, 38, 0), new ScheduledTask(38, 48, 0), new ScheduledTask(48, 56, 0), new ScheduledTask(56, 64, 0), new ScheduledTask(64, 74, 0), new ScheduledTask(74, 78, 0)};
        int[] expectedProcessorEndTimes = new int[]{78};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_9dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_9.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 16, 0), new ScheduledTask(16, 25, 0), new ScheduledTask(25, 28, 0), new ScheduledTask(28, 38, 0), new ScheduledTask(38, 48, 0), new ScheduledTask(48, 56, 0), new ScheduledTask(56, 64, 0), new ScheduledTask(64, 74, 0), new ScheduledTask(74, 78, 0)};
        int[] expectedProcessorEndTimes = new int[]{78};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot20_CCR_1dot00_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.20_CCR_1.00_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 7;
        int expectedScheduleEndTime = 17;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 13, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(0, 7, 2), new ScheduledTask(0, 7, 3), new ScheduledTask(7, 13, 3), new ScheduledTask(13, 17, 0), new ScheduledTask(0, 2, 4), new ScheduledTask(0, 2, 5), new ScheduledTask(0, 2, 6)};
        int[] expectedProcessorEndTimes = new int[]{17, 9, 7, 13, 2, 2, 2};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot20_CCR_1dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.20_CCR_1.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 26;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 13, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(19, 26, 0), new ScheduledTask(9, 16, 1), new ScheduledTask(16, 22, 1), new ScheduledTask(15, 19, 0), new ScheduledTask(13, 15, 0), new ScheduledTask(22, 24, 1), new ScheduledTask(24, 26, 1)};
        int[] expectedProcessorEndTimes = new int[]{26, 26};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot20_CCR_1dot00_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.20_CCR_1.00_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 17;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 13, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(9, 16, 1), new ScheduledTask(0, 7, 2), new ScheduledTask(0, 6, 3), new ScheduledTask(13, 17, 0), new ScheduledTask(6, 8, 3), new ScheduledTask(8, 10, 3), new ScheduledTask(10, 12, 3)};
        int[] expectedProcessorEndTimes = new int[]{17, 16, 7, 12};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot20_CCR_1dot00_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.20_CCR_1.00_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 7;
        int expectedScheduleEndTime = 17;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 13, 0), new ScheduledTask(0, 9, 1), new ScheduledTask(0, 7, 2), new ScheduledTask(7, 14, 2), new ScheduledTask(0, 6, 3), new ScheduledTask(13, 17, 0), new ScheduledTask(0, 2, 4), new ScheduledTask(0, 2, 5), new ScheduledTask(0, 2, 6)};
        int[] expectedProcessorEndTimes = new int[]{17, 9, 14, 6, 2, 2, 2};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot40_CCR_10dot00_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.40_CCR_10.00_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 17;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(0, 6, 2), new ScheduledTask(2, 5, 0), new ScheduledTask(6, 16, 2), new ScheduledTask(7, 17, 1), new ScheduledTask(0, 9, 3), new ScheduledTask(0, 6, 4), new ScheduledTask(5, 10, 0), new ScheduledTask(0, 3, 5)};
        int[] expectedProcessorEndTimes = new int[]{10, 17, 16, 9, 6, 3};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot40_CCR_10dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.40_CCR_10.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(10, 12, 0), new ScheduledTask(3, 10, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(22, 25, 0), new ScheduledTask(21, 31, 1), new ScheduledTask(12, 22, 0), new ScheduledTask(6, 15, 1), new ScheduledTask(15, 21, 1), new ScheduledTask(25, 30, 0), new ScheduledTask(0, 3, 0)};
        int[] expectedProcessorEndTimes = new int[]{30, 31};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot40_CCR_10dot00_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.40_CCR_10.00_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 17;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(0, 6, 2), new ScheduledTask(2, 5, 0), new ScheduledTask(6, 16, 2), new ScheduledTask(7, 17, 1), new ScheduledTask(0, 9, 3), new ScheduledTask(5, 11, 0), new ScheduledTask(11, 16, 0), new ScheduledTask(9, 12, 3)};
        int[] expectedProcessorEndTimes = new int[]{16, 17, 16, 12};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot40_CCR_10dot00_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.40_CCR_10.00_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 17;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(0, 6, 2), new ScheduledTask(2, 5, 0), new ScheduledTask(6, 16, 2), new ScheduledTask(7, 17, 1), new ScheduledTask(0, 9, 3), new ScheduledTask(0, 6, 4), new ScheduledTask(5, 10, 0), new ScheduledTask(0, 3, 5)};
        int[] expectedProcessorEndTimes = new int[]{10, 17, 16, 9, 6, 3};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot40_CCR_10dot02_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.40_CCR_10.02_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 18;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(2, 10, 0), new ScheduledTask(0, 4, 2), new ScheduledTask(5, 15, 1), new ScheduledTask(4, 14, 2), new ScheduledTask(10, 18, 0), new ScheduledTask(0, 7, 3), new ScheduledTask(0, 5, 4), new ScheduledTask(0, 3, 5)};
        int[] expectedProcessorEndTimes = new int[]{18, 15, 14, 7, 5, 3};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot40_CCR_10dot02_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.40_CCR_10.02_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(2, 10, 0), new ScheduledTask(5, 9, 1), new ScheduledTask(9, 19, 1), new ScheduledTask(19, 29, 1), new ScheduledTask(10, 18, 0), new ScheduledTask(18, 25, 0), new ScheduledTask(25, 30, 0), new ScheduledTask(29, 32, 1)};
        int[] expectedProcessorEndTimes = new int[]{30, 32};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot40_CCR_10dot02_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.40_CCR_10.02_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 18;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(2, 10, 0), new ScheduledTask(0, 4, 2), new ScheduledTask(8, 18, 1), new ScheduledTask(4, 14, 2), new ScheduledTask(10, 18, 0), new ScheduledTask(0, 7, 3), new ScheduledTask(7, 12, 3), new ScheduledTask(5, 8, 1)};
        int[] expectedProcessorEndTimes = new int[]{18, 18, 14, 12};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot40_CCR_10dot02_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.40_CCR_10.02_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 18;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(2, 10, 0), new ScheduledTask(0, 4, 2), new ScheduledTask(5, 15, 1), new ScheduledTask(4, 14, 2), new ScheduledTask(10, 18, 0), new ScheduledTask(0, 7, 3), new ScheduledTask(0, 5, 4), new ScheduledTask(0, 3, 5)};
        int[] expectedProcessorEndTimes = new int[]{18, 15, 14, 7, 5, 3};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot50_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.50_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 22, 0), new ScheduledTask(0, 33, 1), new ScheduledTask(22, 66, 0), new ScheduledTask(0, 55, 2), new ScheduledTask(33, 88, 1), new ScheduledTask(0, 49, 3), new ScheduledTask(0, 49, 4), new ScheduledTask(0, 33, 5), new ScheduledTask(66, 77, 0), new ScheduledTask(77, 88, 0)};
        int[] expectedProcessorEndTimes = new int[]{88, 88, 55, 49, 49, 33};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot50_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.50_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 181;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(49, 71, 0), new ScheduledTask(0, 33, 1), new ScheduledTask(71, 115, 0), new ScheduledTask(33, 88, 1), new ScheduledTask(126, 181, 0), new ScheduledTask(0, 49, 0), new ScheduledTask(88, 137, 1), new ScheduledTask(137, 170, 1), new ScheduledTask(115, 126, 0), new ScheduledTask(170, 181, 1)};
        int[] expectedProcessorEndTimes = new int[]{181, 181};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot50_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.50_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 98;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 22, 0), new ScheduledTask(0, 33, 1), new ScheduledTask(22, 66, 0), new ScheduledTask(0, 55, 2), new ScheduledTask(33, 88, 1), new ScheduledTask(0, 49, 3), new ScheduledTask(49, 98, 3), new ScheduledTask(55, 88, 2), new ScheduledTask(66, 77, 0), new ScheduledTask(77, 88, 0)};
        int[] expectedProcessorEndTimes = new int[]{88, 88, 88, 98};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot50_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.50_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 22, 0), new ScheduledTask(0, 33, 1), new ScheduledTask(22, 66, 0), new ScheduledTask(0, 55, 2), new ScheduledTask(33, 88, 1), new ScheduledTask(0, 49, 3), new ScheduledTask(0, 49, 4), new ScheduledTask(0, 33, 5), new ScheduledTask(66, 77, 0), new ScheduledTask(77, 88, 0)};
        int[] expectedProcessorEndTimes = new int[]{88, 88, 55, 49, 49, 33};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot60_CCR_1dot02_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.60_CCR_1.02_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 18;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(9, 12, 0), new ScheduledTask(0, 2, 2), new ScheduledTask(0, 3, 3), new ScheduledTask(2, 8, 2), new ScheduledTask(12, 18, 0), new ScheduledTask(0, 5, 4), new ScheduledTask(8, 12, 1), new ScheduledTask(3, 5, 3)};
        int[] expectedProcessorEndTimes = new int[]{18, 12, 8, 5, 5};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot60_CCR_1dot02_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.60_CCR_1.02_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 22;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(9, 12, 0), new ScheduledTask(3, 5, 1), new ScheduledTask(5, 8, 1), new ScheduledTask(8, 14, 1), new ScheduledTask(12, 18, 0), new ScheduledTask(14, 19, 1), new ScheduledTask(18, 22, 0), new ScheduledTask(19, 21, 1)};
        int[] expectedProcessorEndTimes = new int[]{22, 21};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot60_CCR_1dot02_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.60_CCR_1.02_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 18;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(9, 12, 0), new ScheduledTask(0, 2, 2), new ScheduledTask(0, 3, 3), new ScheduledTask(2, 8, 2), new ScheduledTask(12, 18, 0), new ScheduledTask(3, 8, 1), new ScheduledTask(8, 12, 1), new ScheduledTask(3, 5, 3)};
        int[] expectedProcessorEndTimes = new int[]{18, 12, 8, 5};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot60_CCR_1dot02_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.60_CCR_1.02_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 18;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(9, 12, 0), new ScheduledTask(0, 2, 2), new ScheduledTask(0, 3, 3), new ScheduledTask(2, 8, 2), new ScheduledTask(12, 18, 0), new ScheduledTask(0, 5, 4), new ScheduledTask(8, 12, 1), new ScheduledTask(3, 5, 3)};
        int[] expectedProcessorEndTimes = new int[]{18, 12, 8, 5, 5};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot60_CCR_2dot00_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.60_CCR_2.00_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(5, 13, 0), new ScheduledTask(0, 6, 2), new ScheduledTask(13, 23, 0), new ScheduledTask(26, 35, 1), new ScheduledTask(0, 7, 3), new ScheduledTask(19, 26, 1), new ScheduledTask(0, 5, 4), new ScheduledTask(0, 4, 5)};
        int[] expectedProcessorEndTimes = new int[]{23, 35, 6, 7, 5, 4};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot60_CCR_2dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.60_CCR_2.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(10, 18, 1), new ScheduledTask(5, 13, 0), new ScheduledTask(4, 10, 1), new ScheduledTask(25, 35, 0), new ScheduledTask(26, 35, 1), new ScheduledTask(13, 20, 0), new ScheduledTask(18, 25, 1), new ScheduledTask(20, 25, 0), new ScheduledTask(0, 4, 1)};
        int[] expectedProcessorEndTimes = new int[]{35, 35};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot60_CCR_2dot00_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.60_CCR_2.00_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(5, 13, 0), new ScheduledTask(0, 6, 2), new ScheduledTask(22, 32, 0), new ScheduledTask(26, 35, 1), new ScheduledTask(0, 7, 3), new ScheduledTask(19, 26, 1), new ScheduledTask(13, 18, 0), new ScheduledTask(18, 22, 0)};
        int[] expectedProcessorEndTimes = new int[]{32, 35, 6, 7};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot60_CCR_2dot00_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.60_CCR_2.00_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(5, 13, 0), new ScheduledTask(0, 6, 2), new ScheduledTask(13, 23, 0), new ScheduledTask(26, 35, 1), new ScheduledTask(0, 7, 3), new ScheduledTask(19, 26, 1), new ScheduledTask(0, 5, 4), new ScheduledTask(0, 4, 5)};
        int[] expectedProcessorEndTimes = new int[]{23, 35, 6, 7, 5, 4};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot30_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.30_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 341;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 114, 0), new ScheduledTask(0, 91, 1), new ScheduledTask(114, 205, 0), new ScheduledTask(123, 168, 1), new ScheduledTask(121, 212, 2), new ScheduledTask(168, 191, 1), new ScheduledTask(0, 45, 3), new ScheduledTask(205, 273, 0), new ScheduledTask(212, 326, 2), new ScheduledTask(273, 341, 0)};
        int[] expectedProcessorEndTimes = new int[]{341, 191, 326, 45};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot30_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.30_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 386;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 114, 0), new ScheduledTask(45, 136, 1), new ScheduledTask(136, 227, 1), new ScheduledTask(114, 159, 0), new ScheduledTask(159, 250, 0), new ScheduledTask(227, 250, 1), new ScheduledTask(0, 45, 1), new ScheduledTask(250, 318, 1), new ScheduledTask(250, 364, 0), new ScheduledTask(318, 386, 1)};
        int[] expectedProcessorEndTimes = new int[]{364, 386};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot30_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.30_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 341;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 114, 0), new ScheduledTask(0, 91, 1), new ScheduledTask(114, 205, 0), new ScheduledTask(123, 168, 1), new ScheduledTask(121, 212, 2), new ScheduledTask(168, 191, 1), new ScheduledTask(0, 45, 3), new ScheduledTask(205, 273, 0), new ScheduledTask(212, 326, 2), new ScheduledTask(273, 341, 0)};
        int[] expectedProcessorEndTimes = new int[]{341, 191, 326, 45};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot30_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.30_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 341;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 114, 0), new ScheduledTask(0, 91, 1), new ScheduledTask(114, 205, 0), new ScheduledTask(123, 168, 1), new ScheduledTask(121, 212, 2), new ScheduledTask(168, 191, 1), new ScheduledTask(0, 45, 3), new ScheduledTask(205, 273, 0), new ScheduledTask(212, 326, 2), new ScheduledTask(273, 341, 0)};
        int[] expectedProcessorEndTimes = new int[]{341, 191, 326, 45};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot40_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.40_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 449;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 82, 0), new ScheduledTask(82, 218, 0), new ScheduledTask(54, 108, 1), new ScheduledTask(108, 244, 1), new ScheduledTask(218, 327, 0), new ScheduledTask(244, 326, 1), new ScheduledTask(334, 429, 1), new ScheduledTask(354, 449, 0), new ScheduledTask(0, 54, 1), new ScheduledTask(327, 354, 0)};
        int[] expectedProcessorEndTimes = new int[]{449, 429};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot40_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.40_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 427;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 82, 0), new ScheduledTask(82, 218, 0), new ScheduledTask(0, 54, 1), new ScheduledTask(85, 221, 1), new ScheduledTask(218, 327, 0), new ScheduledTask(223, 305, 1), new ScheduledTask(327, 422, 0), new ScheduledTask(332, 427, 1), new ScheduledTask(0, 54, 2), new ScheduledTask(335, 362, 2)};
        int[] expectedProcessorEndTimes = new int[]{422, 427, 362};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot40_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.40_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 427;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 82, 0), new ScheduledTask(82, 218, 0), new ScheduledTask(0, 54, 1), new ScheduledTask(85, 221, 1), new ScheduledTask(218, 327, 0), new ScheduledTask(223, 305, 1), new ScheduledTask(327, 422, 0), new ScheduledTask(332, 427, 1), new ScheduledTask(0, 54, 2), new ScheduledTask(335, 362, 2)};
        int[] expectedProcessorEndTimes = new int[]{422, 427, 362};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot40_CCR_1dot85_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.40_CCR_1.85_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(9, 16, 0), new ScheduledTask(6, 9, 0), new ScheduledTask(16, 18, 0), new ScheduledTask(15, 17, 1), new ScheduledTask(22, 29, 2), new ScheduledTask(18, 25, 0), new ScheduledTask(25, 32, 0), new ScheduledTask(18, 22, 2), new ScheduledTask(9, 11, 3)};
        int[] expectedProcessorEndTimes = new int[]{32, 17, 29, 11};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot40_CCR_1dot85_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.40_CCR_1.85_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(9, 16, 0), new ScheduledTask(6, 9, 0), new ScheduledTask(16, 18, 0), new ScheduledTask(15, 17, 1), new ScheduledTask(22, 29, 1), new ScheduledTask(18, 25, 0), new ScheduledTask(25, 32, 0), new ScheduledTask(18, 22, 1), new ScheduledTask(9, 11, 1)};
        int[] expectedProcessorEndTimes = new int[]{32, 29};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot40_CCR_1dot85_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.40_CCR_1.85_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(9, 16, 1), new ScheduledTask(6, 9, 0), new ScheduledTask(16, 18, 1), new ScheduledTask(9, 11, 0), new ScheduledTask(17, 24, 2), new ScheduledTask(25, 32, 1), new ScheduledTask(18, 25, 1), new ScheduledTask(18, 22, 3), new ScheduledTask(9, 11, 3)};
        int[] expectedProcessorEndTimes = new int[]{11, 32, 24, 22};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot40_CCR_1dot85_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.40_CCR_1.85_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(9, 16, 1), new ScheduledTask(6, 9, 0), new ScheduledTask(16, 18, 1), new ScheduledTask(9, 11, 0), new ScheduledTask(17, 24, 2), new ScheduledTask(25, 32, 1), new ScheduledTask(18, 25, 1), new ScheduledTask(18, 22, 3), new ScheduledTask(9, 11, 4)};
        int[] expectedProcessorEndTimes = new int[]{11, 32, 24, 22, 11};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot40_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.40_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(8, 13, 0), new ScheduledTask(6, 8, 0), new ScheduledTask(13, 23, 0), new ScheduledTask(0, 6, 0), new ScheduledTask(23, 27, 0), new ScheduledTask(33, 43, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(31, 33, 0), new ScheduledTask(44, 54, 0), new ScheduledTask(29, 31, 0)};
        int[] expectedProcessorEndTimes = new int[]{54, 7};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot40_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.40_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(8, 13, 0), new ScheduledTask(6, 8, 0), new ScheduledTask(13, 23, 0), new ScheduledTask(0, 6, 0), new ScheduledTask(23, 27, 0), new ScheduledTask(33, 43, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(31, 33, 0), new ScheduledTask(44, 54, 0), new ScheduledTask(29, 31, 0)};
        int[] expectedProcessorEndTimes = new int[]{54, 7};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot40_CCR_10dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.40_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(8, 13, 0), new ScheduledTask(6, 8, 0), new ScheduledTask(13, 23, 0), new ScheduledTask(0, 6, 0), new ScheduledTask(23, 27, 0), new ScheduledTask(33, 43, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(31, 33, 0), new ScheduledTask(44, 54, 0), new ScheduledTask(29, 31, 0)};
        int[] expectedProcessorEndTimes = new int[]{54, 7};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot50_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.50_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 476;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 111, 0), new ScheduledTask(111, 159, 0), new ScheduledTask(159, 254, 0), new ScheduledTask(0, 127, 1), new ScheduledTask(254, 413, 0), new ScheduledTask(222, 349, 1), new ScheduledTask(349, 444, 1), new ScheduledTask(127, 222, 1), new ScheduledTask(413, 445, 0), new ScheduledTask(444, 476, 1)};
        int[] expectedProcessorEndTimes = new int[]{445, 476};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot50_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.50_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 450;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 111, 0), new ScheduledTask(111, 159, 0), new ScheduledTask(159, 254, 0), new ScheduledTask(0, 127, 1), new ScheduledTask(254, 413, 0), new ScheduledTask(163, 290, 1), new ScheduledTask(263, 358, 2), new ScheduledTask(129, 224, 3), new ScheduledTask(413, 445, 0), new ScheduledTask(418, 450, 1)};
        int[] expectedProcessorEndTimes = new int[]{445, 450, 358, 224};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot50_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.50_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 450;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 111, 0), new ScheduledTask(111, 159, 0), new ScheduledTask(159, 254, 0), new ScheduledTask(0, 127, 1), new ScheduledTask(254, 413, 0), new ScheduledTask(163, 290, 1), new ScheduledTask(263, 358, 2), new ScheduledTask(129, 224, 3), new ScheduledTask(413, 445, 0), new ScheduledTask(418, 450, 1)};
        int[] expectedProcessorEndTimes = new int[]{445, 450, 358, 224};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot50_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.50_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 12, 0), new ScheduledTask(12, 25, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(25, 33, 0), new ScheduledTask(7, 15, 1), new ScheduledTask(33, 43, 0), new ScheduledTask(15, 22, 1), new ScheduledTask(22, 35, 1), new ScheduledTask(43, 46, 0)};
        int[] expectedProcessorEndTimes = new int[]{46, 35};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot50_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.50_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 12, 0), new ScheduledTask(12, 25, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(25, 33, 0), new ScheduledTask(7, 15, 1), new ScheduledTask(33, 43, 0), new ScheduledTask(15, 22, 1), new ScheduledTask(19, 32, 2), new ScheduledTask(43, 46, 0)};
        int[] expectedProcessorEndTimes = new int[]{46, 22, 32};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot50_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.50_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 12, 0), new ScheduledTask(12, 25, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(25, 33, 0), new ScheduledTask(7, 15, 1), new ScheduledTask(33, 43, 0), new ScheduledTask(15, 22, 1), new ScheduledTask(19, 32, 2), new ScheduledTask(43, 46, 0)};
        int[] expectedProcessorEndTimes = new int[]{46, 22, 32};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot50_CCR_10dot00_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.50_CCR_10.00_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(15, 19, 0), new ScheduledTask(5, 15, 0), new ScheduledTask(19, 21, 0), new ScheduledTask(21, 30, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(30, 35, 0), new ScheduledTask(35, 43, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(49, 57, 0), new ScheduledTask(43, 49, 0)};
        int[] expectedProcessorEndTimes = new int[]{57, 7};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot50_CCR_10dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.50_CCR_10.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(15, 19, 0), new ScheduledTask(5, 15, 0), new ScheduledTask(19, 21, 0), new ScheduledTask(21, 30, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(30, 35, 0), new ScheduledTask(35, 43, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(49, 57, 0), new ScheduledTask(43, 49, 0)};
        int[] expectedProcessorEndTimes = new int[]{57, 7};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot50_CCR_10dot00_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.50_CCR_10.00_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(15, 19, 0), new ScheduledTask(5, 15, 0), new ScheduledTask(19, 21, 0), new ScheduledTask(21, 30, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(30, 35, 0), new ScheduledTask(35, 43, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(49, 57, 0), new ScheduledTask(43, 49, 0)};
        int[] expectedProcessorEndTimes = new int[]{57, 7};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot50_CCR_10dot00_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.50_CCR_10.00_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(15, 19, 0), new ScheduledTask(5, 15, 0), new ScheduledTask(19, 21, 0), new ScheduledTask(21, 30, 0), new ScheduledTask(0, 5, 0), new ScheduledTask(30, 35, 0), new ScheduledTask(35, 43, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(49, 57, 0), new ScheduledTask(43, 49, 0)};
        int[] expectedProcessorEndTimes = new int[]{57, 7};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot50_CCR_2dot03_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.50_CCR_2.03_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 34;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 9, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(9, 19, 0), new ScheduledTask(17, 24, 1), new ScheduledTask(11, 21, 2), new ScheduledTask(14, 16, 3), new ScheduledTask(25, 34, 1), new ScheduledTask(19, 25, 3), new ScheduledTask(25, 28, 0)};
        int[] expectedProcessorEndTimes = new int[]{28, 34, 21, 25};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot50_CCR_2dot03_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.50_CCR_2.03_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(16, 19, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(6, 16, 0), new ScheduledTask(19, 26, 0), new ScheduledTask(16, 26, 1), new ScheduledTask(14, 16, 1), new ScheduledTask(26, 35, 0), new ScheduledTask(26, 32, 1), new ScheduledTask(32, 35, 1)};
        int[] expectedProcessorEndTimes = new int[]{35, 35};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot50_CCR_2dot03_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.50_CCR_2.03_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 34;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 9, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(9, 19, 0), new ScheduledTask(17, 24, 1), new ScheduledTask(11, 21, 2), new ScheduledTask(14, 16, 3), new ScheduledTask(25, 34, 1), new ScheduledTask(19, 25, 3), new ScheduledTask(25, 28, 0)};
        int[] expectedProcessorEndTimes = new int[]{28, 34, 21, 25};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot50_CCR_2dot03_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.50_CCR_2.03_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 34;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 9, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(9, 19, 0), new ScheduledTask(17, 24, 1), new ScheduledTask(11, 21, 2), new ScheduledTask(14, 16, 3), new ScheduledTask(25, 34, 1), new ScheduledTask(19, 25, 3), new ScheduledTask(25, 28, 0)};
        int[] expectedProcessorEndTimes = new int[]{28, 34, 21, 25};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot60_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.60_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 699;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 206, 0), new ScheduledTask(206, 288, 0), new ScheduledTask(0, 103, 1), new ScheduledTask(288, 370, 0), new ScheduledTask(370, 452, 0), new ScheduledTask(452, 596, 0), new ScheduledTask(293, 396, 1), new ScheduledTask(596, 699, 0), new ScheduledTask(456, 538, 1), new ScheduledTask(538, 600, 1)};
        int[] expectedProcessorEndTimes = new int[]{699, 600};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot60_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.60_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 699;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 206, 0), new ScheduledTask(206, 288, 0), new ScheduledTask(0, 103, 1), new ScheduledTask(288, 370, 0), new ScheduledTask(370, 452, 0), new ScheduledTask(452, 596, 0), new ScheduledTask(293, 396, 1), new ScheduledTask(596, 699, 0), new ScheduledTask(456, 538, 1), new ScheduledTask(295, 357, 2)};
        int[] expectedProcessorEndTimes = new int[]{699, 538, 357};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot60_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.60_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 699;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 206, 0), new ScheduledTask(206, 288, 0), new ScheduledTask(0, 103, 1), new ScheduledTask(288, 370, 0), new ScheduledTask(370, 452, 0), new ScheduledTask(452, 596, 0), new ScheduledTask(293, 396, 1), new ScheduledTask(596, 699, 0), new ScheduledTask(456, 538, 1), new ScheduledTask(295, 357, 2)};
        int[] expectedProcessorEndTimes = new int[]{699, 538, 357};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot60_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.60_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 558;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 180, 0), new ScheduledTask(180, 360, 0), new ScheduledTask(0, 162, 1), new ScheduledTask(184, 220, 1), new ScheduledTask(360, 432, 0), new ScheduledTask(220, 292, 1), new ScheduledTask(292, 364, 1), new ScheduledTask(432, 558, 0), new ScheduledTask(364, 418, 1), new ScheduledTask(438, 492, 1)};
        int[] expectedProcessorEndTimes = new int[]{558, 492};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot60_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.60_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 558;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 180, 0), new ScheduledTask(180, 360, 0), new ScheduledTask(0, 162, 1), new ScheduledTask(184, 220, 1), new ScheduledTask(360, 432, 0), new ScheduledTask(167, 239, 2), new ScheduledTask(220, 292, 1), new ScheduledTask(432, 558, 0), new ScheduledTask(226, 280, 3), new ScheduledTask(438, 492, 1)};
        int[] expectedProcessorEndTimes = new int[]{558, 492, 239, 280};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot60_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.60_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 558;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 180, 0), new ScheduledTask(180, 360, 0), new ScheduledTask(0, 162, 1), new ScheduledTask(184, 220, 1), new ScheduledTask(360, 432, 0), new ScheduledTask(167, 239, 2), new ScheduledTask(220, 292, 1), new ScheduledTask(432, 558, 0), new ScheduledTask(226, 280, 3), new ScheduledTask(438, 492, 1)};
        int[] expectedProcessorEndTimes = new int[]{558, 492, 239, 280};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot60_CCR_9dot97_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.60_CCR_9.97_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(16, 24, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(31, 34, 0), new ScheduledTask(6, 16, 0), new ScheduledTask(34, 43, 0), new ScheduledTask(24, 31, 0), new ScheduledTask(43, 50, 0), new ScheduledTask(44, 49, 1), new ScheduledTask(4, 7, 1)};
        int[] expectedProcessorEndTimes = new int[]{50, 49};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot60_CCR_9dot97_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.60_CCR_9.97_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(16, 24, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(31, 34, 0), new ScheduledTask(6, 16, 0), new ScheduledTask(34, 43, 0), new ScheduledTask(36, 43, 2), new ScheduledTask(43, 50, 0), new ScheduledTask(44, 49, 1), new ScheduledTask(24, 27, 3)};
        int[] expectedProcessorEndTimes = new int[]{50, 49, 43, 27};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot60_CCR_9dot97_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.60_CCR_9.97_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(16, 24, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(31, 34, 0), new ScheduledTask(6, 16, 0), new ScheduledTask(34, 43, 0), new ScheduledTask(36, 43, 2), new ScheduledTask(43, 50, 0), new ScheduledTask(44, 49, 1), new ScheduledTask(24, 27, 3)};
        int[] expectedProcessorEndTimes = new int[]{50, 49, 43, 27};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot70_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.70_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 601;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 125, 0), new ScheduledTask(132, 288, 1), new ScheduledTask(125, 188, 0), new ScheduledTask(188, 329, 0), new ScheduledTask(329, 470, 0), new ScheduledTask(0, 47, 1), new ScheduledTask(288, 382, 1), new ScheduledTask(382, 460, 1), new ScheduledTask(460, 601, 1), new ScheduledTask(470, 595, 0)};
        int[] expectedProcessorEndTimes = new int[]{595, 601};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot70_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.70_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 547;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 125, 0), new ScheduledTask(125, 281, 0), new ScheduledTask(132, 195, 1), new ScheduledTask(195, 336, 1), new ScheduledTask(281, 422, 0), new ScheduledTask(0, 47, 2), new ScheduledTask(289, 383, 2), new ScheduledTask(336, 414, 1), new ScheduledTask(0, 141, 3), new ScheduledTask(422, 547, 0)};
        int[] expectedProcessorEndTimes = new int[]{547, 414, 383, 141};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot70_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.70_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 547;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 125, 0), new ScheduledTask(125, 281, 0), new ScheduledTask(132, 195, 1), new ScheduledTask(195, 336, 1), new ScheduledTask(281, 422, 0), new ScheduledTask(0, 47, 2), new ScheduledTask(289, 383, 2), new ScheduledTask(336, 414, 1), new ScheduledTask(0, 141, 3), new ScheduledTask(422, 547, 0)};
        int[] expectedProcessorEndTimes = new int[]{547, 414, 383, 141};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot70_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.70_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 507;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 116, 0), new ScheduledTask(0, 87, 1), new ScheduledTask(87, 116, 1), new ScheduledTask(116, 232, 1), new ScheduledTask(120, 221, 0), new ScheduledTask(232, 377, 1), new ScheduledTask(221, 293, 0), new ScheduledTask(293, 351, 0), new ScheduledTask(351, 496, 0), new ScheduledTask(377, 507, 1)};
        int[] expectedProcessorEndTimes = new int[]{496, 507};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot70_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.70_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 492;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 116, 0), new ScheduledTask(0, 87, 1), new ScheduledTask(0, 29, 2), new ScheduledTask(87, 203, 1), new ScheduledTask(116, 217, 0), new ScheduledTask(217, 362, 0), new ScheduledTask(29, 101, 2), new ScheduledTask(91, 149, 3), new ScheduledTask(225, 370, 1), new ScheduledTask(362, 492, 0)};
        int[] expectedProcessorEndTimes = new int[]{492, 370, 101, 149};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot70_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.70_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 492;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 116, 0), new ScheduledTask(0, 87, 1), new ScheduledTask(0, 29, 2), new ScheduledTask(87, 203, 1), new ScheduledTask(116, 217, 0), new ScheduledTask(217, 362, 0), new ScheduledTask(29, 101, 2), new ScheduledTask(91, 149, 3), new ScheduledTask(225, 370, 1), new ScheduledTask(362, 492, 0)};
        int[] expectedProcessorEndTimes = new int[]{492, 370, 101, 149};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot80_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.80_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 13, 0), new ScheduledTask(13, 15, 0), new ScheduledTask(15, 20, 0), new ScheduledTask(20, 28, 0), new ScheduledTask(28, 35, 0), new ScheduledTask(35, 41, 0), new ScheduledTask(41, 49, 0), new ScheduledTask(49, 58, 0), new ScheduledTask(58, 62, 0)};
        int[] expectedProcessorEndTimes = new int[]{62};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot80_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.80_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 13, 0), new ScheduledTask(13, 15, 0), new ScheduledTask(15, 20, 0), new ScheduledTask(20, 28, 0), new ScheduledTask(28, 35, 0), new ScheduledTask(35, 41, 0), new ScheduledTask(41, 49, 0), new ScheduledTask(49, 58, 0), new ScheduledTask(58, 62, 0)};
        int[] expectedProcessorEndTimes = new int[]{62};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot80_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.80_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 13, 0), new ScheduledTask(13, 15, 0), new ScheduledTask(15, 20, 0), new ScheduledTask(20, 28, 0), new ScheduledTask(28, 35, 0), new ScheduledTask(35, 41, 0), new ScheduledTask(41, 49, 0), new ScheduledTask(49, 58, 0), new ScheduledTask(58, 62, 0)};
        int[] expectedProcessorEndTimes = new int[]{62};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot80_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.80_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 10, 0), new ScheduledTask(26, 34, 0), new ScheduledTask(24, 26, 0), new ScheduledTask(34, 39, 0), new ScheduledTask(15, 18, 0), new ScheduledTask(10, 15, 0), new ScheduledTask(33, 43, 1), new ScheduledTask(18, 24, 0), new ScheduledTask(39, 45, 0)};
        int[] expectedProcessorEndTimes = new int[]{45, 43};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot80_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.80_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 10, 0), new ScheduledTask(26, 34, 0), new ScheduledTask(24, 26, 0), new ScheduledTask(34, 39, 0), new ScheduledTask(15, 18, 0), new ScheduledTask(10, 15, 0), new ScheduledTask(33, 43, 1), new ScheduledTask(18, 24, 0), new ScheduledTask(39, 45, 0)};
        int[] expectedProcessorEndTimes = new int[]{45, 43};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot80_CCR_10dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.80_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 10, 0), new ScheduledTask(26, 34, 0), new ScheduledTask(24, 26, 0), new ScheduledTask(34, 39, 0), new ScheduledTask(15, 18, 0), new ScheduledTask(10, 15, 0), new ScheduledTask(33, 43, 1), new ScheduledTask(18, 24, 0), new ScheduledTask(39, 45, 0)};
        int[] expectedProcessorEndTimes = new int[]{45, 43};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot90_CCR_0dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.90_CCR_0.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 86;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 16, 0), new ScheduledTask(20, 35, 1), new ScheduledTask(0, 14, 1), new ScheduledTask(16, 30, 0), new ScheduledTask(35, 49, 1), new ScheduledTask(49, 68, 1), new ScheduledTask(68, 82, 1), new ScheduledTask(30, 38, 0), new ScheduledTask(82, 86, 1)};
        int[] expectedProcessorEndTimes = new int[]{38, 86};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot90_CCR_0dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.90_CCR_0.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 86;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 16, 0), new ScheduledTask(20, 35, 1), new ScheduledTask(0, 14, 2), new ScheduledTask(16, 30, 0), new ScheduledTask(35, 49, 1), new ScheduledTask(49, 68, 1), new ScheduledTask(68, 82, 1), new ScheduledTask(0, 8, 3), new ScheduledTask(82, 86, 1)};
        int[] expectedProcessorEndTimes = new int[]{30, 86, 14, 8};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot90_CCR_0dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.90_CCR_0.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 86;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 16, 0), new ScheduledTask(20, 35, 1), new ScheduledTask(0, 14, 2), new ScheduledTask(16, 30, 0), new ScheduledTask(35, 49, 1), new ScheduledTask(49, 68, 1), new ScheduledTask(68, 82, 1), new ScheduledTask(0, 8, 3), new ScheduledTask(82, 86, 1)};
        int[] expectedProcessorEndTimes = new int[]{30, 86, 14, 8};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot90_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.90_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(9, 14, 0), new ScheduledTask(0, 6, 0), new ScheduledTask(22, 27, 0), new ScheduledTask(6, 9, 0), new ScheduledTask(14, 22, 0), new ScheduledTask(27, 30, 0), new ScheduledTask(30, 38, 0), new ScheduledTask(40, 50, 1), new ScheduledTask(38, 46, 0), new ScheduledTask(33, 40, 1)};
        int[] expectedProcessorEndTimes = new int[]{46, 50};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot90_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.90_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(9, 14, 0), new ScheduledTask(0, 6, 0), new ScheduledTask(22, 27, 0), new ScheduledTask(6, 9, 0), new ScheduledTask(14, 22, 0), new ScheduledTask(27, 30, 0), new ScheduledTask(30, 38, 0), new ScheduledTask(40, 50, 1), new ScheduledTask(38, 46, 0), new ScheduledTask(33, 40, 2)};
        int[] expectedProcessorEndTimes = new int[]{46, 50, 40};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot90_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.90_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(9, 14, 0), new ScheduledTask(0, 6, 0), new ScheduledTask(22, 27, 0), new ScheduledTask(6, 9, 0), new ScheduledTask(14, 22, 0), new ScheduledTask(27, 30, 0), new ScheduledTask(30, 38, 0), new ScheduledTask(40, 50, 1), new ScheduledTask(38, 46, 0), new ScheduledTask(33, 40, 2)};
        int[] expectedProcessorEndTimes = new int[]{46, 50, 40};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot00_CCR_1dot02_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.00_CCR_1.02_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 79;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(14, 35, 0), new ScheduledTask(35, 49, 0), new ScheduledTask(18, 26, 1), new ScheduledTask(49, 57, 0), new ScheduledTask(57, 65, 0), new ScheduledTask(17, 34, 2), new ScheduledTask(65, 79, 0), new ScheduledTask(57, 69, 1)};
        int[] expectedProcessorEndTimes = new int[]{79, 69, 34};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot00_CCR_1dot02_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.00_CCR_1.02_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 79;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(14, 35, 0), new ScheduledTask(35, 49, 0), new ScheduledTask(18, 26, 1), new ScheduledTask(49, 57, 0), new ScheduledTask(57, 65, 0), new ScheduledTask(26, 43, 1), new ScheduledTask(65, 79, 0), new ScheduledTask(57, 69, 1)};
        int[] expectedProcessorEndTimes = new int[]{79, 69};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot00_CCR_1dot02_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.00_CCR_1.02_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 79;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(14, 35, 0), new ScheduledTask(35, 49, 0), new ScheduledTask(18, 26, 1), new ScheduledTask(49, 57, 0), new ScheduledTask(57, 65, 0), new ScheduledTask(17, 34, 2), new ScheduledTask(65, 79, 0), new ScheduledTask(57, 69, 1)};
        int[] expectedProcessorEndTimes = new int[]{79, 69, 34};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot00_CCR_1dot02_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.00_CCR_1.02_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 79;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(0, 10, 1), new ScheduledTask(14, 35, 0), new ScheduledTask(35, 49, 0), new ScheduledTask(18, 26, 1), new ScheduledTask(49, 57, 0), new ScheduledTask(57, 65, 0), new ScheduledTask(17, 34, 2), new ScheduledTask(65, 79, 0), new ScheduledTask(57, 69, 1)};
        int[] expectedProcessorEndTimes = new int[]{79, 69, 34};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot00_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.00_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(7, 12, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(12, 20, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(20, 25, 0), new ScheduledTask(25, 30, 0), new ScheduledTask(32, 34, 0), new ScheduledTask(30, 32, 0), new ScheduledTask(34, 37, 0), new ScheduledTask(37, 46, 0)};
        int[] expectedProcessorEndTimes = new int[]{46, 3};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot00_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.00_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(7, 12, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(12, 20, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(20, 25, 0), new ScheduledTask(25, 30, 0), new ScheduledTask(32, 34, 0), new ScheduledTask(30, 32, 0), new ScheduledTask(34, 37, 0), new ScheduledTask(37, 46, 0)};
        int[] expectedProcessorEndTimes = new int[]{46, 3};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot00_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.00_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(7, 12, 0), new ScheduledTask(0, 7, 0), new ScheduledTask(12, 20, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(20, 25, 0), new ScheduledTask(25, 30, 0), new ScheduledTask(32, 34, 0), new ScheduledTask(30, 32, 0), new ScheduledTask(34, 37, 0), new ScheduledTask(37, 46, 0)};
        int[] expectedProcessorEndTimes = new int[]{46, 3};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot10_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.10_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 16, 0), new ScheduledTask(0, 12, 1), new ScheduledTask(19, 37, 0), new ScheduledTask(12, 17, 1), new ScheduledTask(33, 47, 1), new ScheduledTask(24, 33, 1), new ScheduledTask(37, 42, 0), new ScheduledTask(48, 55, 1), new ScheduledTask(42, 58, 0), new ScheduledTask(55, 59, 1)};
        int[] expectedProcessorEndTimes = new int[]{58, 59};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot10_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.10_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 16, 0), new ScheduledTask(0, 12, 1), new ScheduledTask(19, 37, 0), new ScheduledTask(0, 5, 2), new ScheduledTask(12, 26, 1), new ScheduledTask(24, 33, 3), new ScheduledTask(37, 42, 0), new ScheduledTask(48, 55, 2), new ScheduledTask(42, 58, 0), new ScheduledTask(55, 59, 2)};
        int[] expectedProcessorEndTimes = new int[]{58, 26, 59, 33};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot10_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.10_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 16, 0), new ScheduledTask(0, 12, 1), new ScheduledTask(19, 37, 0), new ScheduledTask(0, 5, 2), new ScheduledTask(15, 29, 3), new ScheduledTask(24, 33, 4), new ScheduledTask(37, 42, 0), new ScheduledTask(48, 55, 4), new ScheduledTask(42, 58, 0), new ScheduledTask(55, 59, 4)};
        int[] expectedProcessorEndTimes = new int[]{58, 12, 5, 29, 59};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot10_CCR_1dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.10_CCR_1.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 13, 0), new ScheduledTask(13, 30, 0), new ScheduledTask(0, 15, 1), new ScheduledTask(30, 38, 0), new ScheduledTask(38, 55, 0), new ScheduledTask(55, 63, 0), new ScheduledTask(63, 84, 0), new ScheduledTask(65, 78, 1), new ScheduledTask(78, 88, 1), new ScheduledTask(84, 90, 0)};
        int[] expectedProcessorEndTimes = new int[]{90, 88};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot10_CCR_1dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.10_CCR_1.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 13, 0), new ScheduledTask(13, 30, 0), new ScheduledTask(0, 15, 1), new ScheduledTask(30, 38, 0), new ScheduledTask(38, 55, 0), new ScheduledTask(55, 63, 0), new ScheduledTask(63, 84, 0), new ScheduledTask(65, 78, 1), new ScheduledTask(78, 88, 1), new ScheduledTask(84, 90, 0)};
        int[] expectedProcessorEndTimes = new int[]{90, 88};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot10_CCR_1dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.10_CCR_1.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 13, 0), new ScheduledTask(13, 30, 0), new ScheduledTask(0, 15, 1), new ScheduledTask(30, 38, 0), new ScheduledTask(38, 55, 0), new ScheduledTask(55, 63, 0), new ScheduledTask(63, 84, 0), new ScheduledTask(65, 78, 1), new ScheduledTask(78, 88, 1), new ScheduledTask(84, 90, 0)};
        int[] expectedProcessorEndTimes = new int[]{90, 88};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot10_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.10_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 111;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(11, 29, 0), new ScheduledTask(29, 44, 0), new ScheduledTask(44, 61, 0), new ScheduledTask(31, 38, 1), new ScheduledTask(61, 78, 0), new ScheduledTask(65, 74, 1), new ScheduledTask(83, 100, 0), new ScheduledTask(100, 111, 0), new ScheduledTask(87, 94, 1)};
        int[] expectedProcessorEndTimes = new int[]{111, 94};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot10_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.10_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 111;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(11, 29, 0), new ScheduledTask(29, 44, 0), new ScheduledTask(44, 61, 0), new ScheduledTask(31, 38, 1), new ScheduledTask(61, 78, 0), new ScheduledTask(65, 74, 1), new ScheduledTask(83, 100, 0), new ScheduledTask(100, 111, 0), new ScheduledTask(87, 94, 1)};
        int[] expectedProcessorEndTimes = new int[]{111, 94};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot10_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.10_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 111;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(11, 29, 0), new ScheduledTask(29, 44, 0), new ScheduledTask(44, 61, 0), new ScheduledTask(31, 38, 1), new ScheduledTask(61, 78, 0), new ScheduledTask(65, 74, 1), new ScheduledTask(83, 100, 0), new ScheduledTask(100, 111, 0), new ScheduledTask(87, 94, 1)};
        int[] expectedProcessorEndTimes = new int[]{111, 94};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot10_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.10_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 10, 0), new ScheduledTask(10, 17, 0), new ScheduledTask(17, 27, 0), new ScheduledTask(27, 34, 0), new ScheduledTask(34, 38, 0), new ScheduledTask(38, 43, 0), new ScheduledTask(43, 47, 0), new ScheduledTask(47, 57, 0), new ScheduledTask(57, 62, 0)};
        int[] expectedProcessorEndTimes = new int[]{62};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot10_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.10_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 10, 0), new ScheduledTask(10, 17, 0), new ScheduledTask(17, 27, 0), new ScheduledTask(27, 34, 0), new ScheduledTask(34, 38, 0), new ScheduledTask(38, 43, 0), new ScheduledTask(43, 47, 0), new ScheduledTask(47, 57, 0), new ScheduledTask(57, 62, 0)};
        int[] expectedProcessorEndTimes = new int[]{62};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot10_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.10_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 10, 0), new ScheduledTask(10, 17, 0), new ScheduledTask(17, 27, 0), new ScheduledTask(27, 34, 0), new ScheduledTask(34, 38, 0), new ScheduledTask(38, 43, 0), new ScheduledTask(43, 47, 0), new ScheduledTask(47, 57, 0), new ScheduledTask(57, 62, 0)};
        int[] expectedProcessorEndTimes = new int[]{62};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot20_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.20_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1144;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 243, 0), new ScheduledTask(243, 438, 0), new ScheduledTask(0, 73, 1), new ScheduledTask(438, 487, 0), new ScheduledTask(487, 633, 0), new ScheduledTask(73, 146, 1), new ScheduledTask(633, 706, 0), new ScheduledTask(706, 949, 0), new ScheduledTask(949, 1144, 0), new ScheduledTask(957, 1127, 1)};
        int[] expectedProcessorEndTimes = new int[]{1144, 1127};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot20_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.20_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 1144;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 243, 0), new ScheduledTask(243, 438, 0), new ScheduledTask(0, 73, 1), new ScheduledTask(438, 487, 0), new ScheduledTask(487, 633, 0), new ScheduledTask(0, 73, 2), new ScheduledTask(633, 706, 0), new ScheduledTask(706, 949, 0), new ScheduledTask(949, 1144, 0), new ScheduledTask(957, 1127, 1)};
        int[] expectedProcessorEndTimes = new int[]{1144, 1127, 73};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot20_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.20_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 1144;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 243, 0), new ScheduledTask(243, 438, 0), new ScheduledTask(0, 73, 1), new ScheduledTask(438, 487, 0), new ScheduledTask(487, 633, 0), new ScheduledTask(0, 73, 2), new ScheduledTask(633, 706, 0), new ScheduledTask(706, 949, 0), new ScheduledTask(949, 1144, 0), new ScheduledTask(957, 1127, 1)};
        int[] expectedProcessorEndTimes = new int[]{1144, 1127, 73};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot20_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.20_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 11, 0), new ScheduledTask(11, 17, 0), new ScheduledTask(17, 20, 0), new ScheduledTask(20, 24, 0), new ScheduledTask(24, 28, 0), new ScheduledTask(28, 30, 0), new ScheduledTask(30, 33, 0), new ScheduledTask(33, 40, 0), new ScheduledTask(40, 46, 0)};
        int[] expectedProcessorEndTimes = new int[]{46};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot20_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.20_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 11, 0), new ScheduledTask(11, 17, 0), new ScheduledTask(17, 20, 0), new ScheduledTask(20, 24, 0), new ScheduledTask(24, 28, 0), new ScheduledTask(28, 30, 0), new ScheduledTask(30, 33, 0), new ScheduledTask(33, 40, 0), new ScheduledTask(40, 46, 0)};
        int[] expectedProcessorEndTimes = new int[]{46};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot20_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.20_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 11, 0), new ScheduledTask(11, 17, 0), new ScheduledTask(17, 20, 0), new ScheduledTask(20, 24, 0), new ScheduledTask(24, 28, 0), new ScheduledTask(28, 30, 0), new ScheduledTask(30, 33, 0), new ScheduledTask(33, 40, 0), new ScheduledTask(40, 46, 0)};
        int[] expectedProcessorEndTimes = new int[]{46};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot20_CCR_10dot04_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.20_CCR_10.04_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 10, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(10, 20, 0), new ScheduledTask(35, 45, 0), new ScheduledTask(20, 25, 0), new ScheduledTask(25, 35, 0), new ScheduledTask(51, 60, 0), new ScheduledTask(45, 51, 0), new ScheduledTask(60, 65, 0)};
        int[] expectedProcessorEndTimes = new int[]{65, 8};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot20_CCR_10dot04_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.20_CCR_10.04_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 10, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(10, 20, 0), new ScheduledTask(35, 45, 0), new ScheduledTask(20, 25, 0), new ScheduledTask(25, 35, 0), new ScheduledTask(51, 60, 0), new ScheduledTask(45, 51, 0), new ScheduledTask(60, 65, 0)};
        int[] expectedProcessorEndTimes = new int[]{65, 8};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot20_CCR_10dot04_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.20_CCR_10.04_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 10, 0), new ScheduledTask(0, 8, 1), new ScheduledTask(10, 20, 0), new ScheduledTask(35, 45, 0), new ScheduledTask(20, 25, 0), new ScheduledTask(25, 35, 0), new ScheduledTask(51, 60, 0), new ScheduledTask(45, 51, 0), new ScheduledTask(60, 65, 0)};
        int[] expectedProcessorEndTimes = new int[]{65, 8};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot20_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.20_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 11, 0), new ScheduledTask(11, 16, 0), new ScheduledTask(16, 22, 0), new ScheduledTask(22, 32, 0), new ScheduledTask(32, 40, 0), new ScheduledTask(40, 45, 0), new ScheduledTask(45, 49, 0), new ScheduledTask(49, 58, 0), new ScheduledTask(58, 61, 0)};
        int[] expectedProcessorEndTimes = new int[]{61};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot20_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.20_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 11, 0), new ScheduledTask(11, 16, 0), new ScheduledTask(16, 22, 0), new ScheduledTask(22, 32, 0), new ScheduledTask(32, 40, 0), new ScheduledTask(40, 45, 0), new ScheduledTask(45, 49, 0), new ScheduledTask(49, 58, 0), new ScheduledTask(58, 61, 0)};
        int[] expectedProcessorEndTimes = new int[]{61};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot20_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.20_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 11, 0), new ScheduledTask(11, 16, 0), new ScheduledTask(16, 22, 0), new ScheduledTask(22, 32, 0), new ScheduledTask(32, 40, 0), new ScheduledTask(40, 45, 0), new ScheduledTask(45, 49, 0), new ScheduledTask(49, 58, 0), new ScheduledTask(58, 61, 0)};
        int[] expectedProcessorEndTimes = new int[]{61};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot30_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.30_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 895;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 192, 0), new ScheduledTask(192, 320, 0), new ScheduledTask(196, 281, 1), new ScheduledTask(320, 533, 0), new ScheduledTask(201, 393, 2), new ScheduledTask(533, 746, 0), new ScheduledTask(540, 625, 1), new ScheduledTask(541, 605, 2), new ScheduledTask(327, 497, 3), new ScheduledTask(746, 895, 0)};
        int[] expectedProcessorEndTimes = new int[]{895, 625, 605, 497};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot30_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.30_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 895;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 192, 0), new ScheduledTask(192, 320, 0), new ScheduledTask(196, 281, 1), new ScheduledTask(320, 533, 0), new ScheduledTask(281, 473, 1), new ScheduledTask(533, 746, 0), new ScheduledTask(540, 625, 1), new ScheduledTask(625, 689, 1), new ScheduledTask(689, 859, 1), new ScheduledTask(746, 895, 0)};
        int[] expectedProcessorEndTimes = new int[]{895, 859};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot30_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.30_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 895;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 192, 0), new ScheduledTask(192, 320, 0), new ScheduledTask(196, 281, 1), new ScheduledTask(320, 533, 0), new ScheduledTask(201, 393, 2), new ScheduledTask(533, 746, 0), new ScheduledTask(540, 625, 1), new ScheduledTask(541, 605, 2), new ScheduledTask(327, 497, 3), new ScheduledTask(746, 895, 0)};
        int[] expectedProcessorEndTimes = new int[]{895, 625, 605, 497};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot30_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.30_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 895;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 192, 0), new ScheduledTask(192, 320, 0), new ScheduledTask(196, 281, 1), new ScheduledTask(320, 533, 0), new ScheduledTask(201, 393, 2), new ScheduledTask(533, 746, 0), new ScheduledTask(540, 625, 1), new ScheduledTask(541, 605, 2), new ScheduledTask(327, 497, 3), new ScheduledTask(746, 895, 0)};
        int[] expectedProcessorEndTimes = new int[]{895, 625, 605, 497};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot30_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.30_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 896;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 224, 0), new ScheduledTask(224, 269, 0), new ScheduledTask(269, 426, 0), new ScheduledTask(229, 318, 1), new ScheduledTask(426, 560, 0), new ScheduledTask(560, 784, 0), new ScheduledTask(566, 678, 1), new ScheduledTask(428, 495, 1), new ScheduledTask(678, 835, 1), new ScheduledTask(784, 896, 0)};
        int[] expectedProcessorEndTimes = new int[]{896, 835};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot30_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.30_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 896;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 224, 0), new ScheduledTask(224, 269, 0), new ScheduledTask(269, 426, 0), new ScheduledTask(229, 318, 1), new ScheduledTask(426, 560, 0), new ScheduledTask(560, 784, 0), new ScheduledTask(566, 678, 1), new ScheduledTask(428, 495, 2), new ScheduledTask(678, 835, 1), new ScheduledTask(784, 896, 0)};
        int[] expectedProcessorEndTimes = new int[]{896, 835, 495};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot30_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.30_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 896;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 224, 0), new ScheduledTask(224, 269, 0), new ScheduledTask(269, 426, 0), new ScheduledTask(229, 318, 1), new ScheduledTask(426, 560, 0), new ScheduledTask(560, 784, 0), new ScheduledTask(566, 678, 1), new ScheduledTask(428, 495, 2), new ScheduledTask(678, 835, 1), new ScheduledTask(784, 896, 0)};
        int[] expectedProcessorEndTimes = new int[]{896, 835, 495};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot30_CCR_1dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.30_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 101;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(12, 30, 0), new ScheduledTask(16, 26, 1), new ScheduledTask(33, 53, 1), new ScheduledTask(53, 71, 1), new ScheduledTask(71, 91, 1), new ScheduledTask(74, 80, 0), new ScheduledTask(91, 101, 1), new ScheduledTask(80, 84, 0)};
        int[] expectedProcessorEndTimes = new int[]{84, 101};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot30_CCR_1dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.30_CCR_1.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 101;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(12, 30, 0), new ScheduledTask(16, 26, 1), new ScheduledTask(33, 53, 1), new ScheduledTask(53, 71, 1), new ScheduledTask(71, 91, 1), new ScheduledTask(74, 80, 0), new ScheduledTask(91, 101, 1), new ScheduledTask(80, 84, 0)};
        int[] expectedProcessorEndTimes = new int[]{84, 101};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot30_CCR_1dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.30_CCR_1.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 101;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 12, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(12, 30, 0), new ScheduledTask(16, 26, 1), new ScheduledTask(33, 53, 1), new ScheduledTask(53, 71, 1), new ScheduledTask(71, 91, 1), new ScheduledTask(74, 80, 0), new ScheduledTask(91, 101, 1), new ScheduledTask(80, 84, 0)};
        int[] expectedProcessorEndTimes = new int[]{84, 101};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot40_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.40_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 885;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 45, 0), new ScheduledTask(0, 45, 1), new ScheduledTask(48, 252, 0), new ScheduledTask(45, 136, 1), new ScheduledTask(252, 365, 0), new ScheduledTask(259, 485, 1), new ScheduledTask(365, 501, 0), new ScheduledTask(501, 659, 0), new ScheduledTask(659, 885, 0), new ScheduledTask(485, 530, 1)};
        int[] expectedProcessorEndTimes = new int[]{885, 530};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot40_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.40_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 885;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 45, 0), new ScheduledTask(0, 45, 1), new ScheduledTask(48, 252, 0), new ScheduledTask(0, 91, 2), new ScheduledTask(252, 365, 0), new ScheduledTask(259, 485, 1), new ScheduledTask(365, 501, 0), new ScheduledTask(501, 659, 0), new ScheduledTask(659, 885, 0), new ScheduledTask(485, 530, 1)};
        int[] expectedProcessorEndTimes = new int[]{885, 530, 91};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot40_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.40_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 885;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 45, 0), new ScheduledTask(0, 45, 1), new ScheduledTask(48, 252, 0), new ScheduledTask(0, 91, 2), new ScheduledTask(252, 365, 0), new ScheduledTask(259, 485, 1), new ScheduledTask(365, 501, 0), new ScheduledTask(501, 659, 0), new ScheduledTask(659, 885, 0), new ScheduledTask(485, 530, 1)};
        int[] expectedProcessorEndTimes = new int[]{885, 530, 91};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot40_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.40_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1048;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 79, 0), new ScheduledTask(79, 236, 0), new ScheduledTask(236, 498, 0), new ScheduledTask(87, 323, 1), new ScheduledTask(498, 550, 0), new ScheduledTask(550, 760, 0), new ScheduledTask(760, 891, 0), new ScheduledTask(505, 636, 1), new ScheduledTask(891, 1048, 0), new ScheduledTask(636, 688, 1)};
        int[] expectedProcessorEndTimes = new int[]{1048, 688};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot40_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.40_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 1048;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 79, 0), new ScheduledTask(79, 236, 0), new ScheduledTask(236, 498, 0), new ScheduledTask(87, 323, 1), new ScheduledTask(498, 550, 0), new ScheduledTask(550, 760, 0), new ScheduledTask(760, 891, 0), new ScheduledTask(505, 636, 1), new ScheduledTask(891, 1048, 0), new ScheduledTask(331, 383, 2)};
        int[] expectedProcessorEndTimes = new int[]{1048, 636, 383};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot40_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.40_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 1048;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 79, 0), new ScheduledTask(79, 236, 0), new ScheduledTask(236, 498, 0), new ScheduledTask(87, 323, 1), new ScheduledTask(498, 550, 0), new ScheduledTask(550, 760, 0), new ScheduledTask(760, 891, 0), new ScheduledTask(505, 636, 1), new ScheduledTask(891, 1048, 0), new ScheduledTask(331, 383, 2)};
        int[] expectedProcessorEndTimes = new int[]{1048, 636, 383};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot40_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.40_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 123;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 13, 0), new ScheduledTask(13, 20, 0), new ScheduledTask(20, 38, 0), new ScheduledTask(0, 22, 1), new ScheduledTask(38, 58, 0), new ScheduledTask(58, 80, 0), new ScheduledTask(80, 102, 0), new ScheduledTask(89, 111, 1), new ScheduledTask(102, 109, 0), new ScheduledTask(116, 123, 1)};
        int[] expectedProcessorEndTimes = new int[]{109, 123};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot40_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.40_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 123;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 13, 0), new ScheduledTask(13, 20, 0), new ScheduledTask(20, 38, 0), new ScheduledTask(0, 22, 1), new ScheduledTask(38, 58, 0), new ScheduledTask(58, 80, 0), new ScheduledTask(80, 102, 0), new ScheduledTask(89, 111, 1), new ScheduledTask(102, 109, 0), new ScheduledTask(116, 123, 1)};
        int[] expectedProcessorEndTimes = new int[]{109, 123};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot40_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.40_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 123;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 13, 0), new ScheduledTask(13, 20, 0), new ScheduledTask(20, 38, 0), new ScheduledTask(0, 22, 1), new ScheduledTask(38, 58, 0), new ScheduledTask(58, 80, 0), new ScheduledTask(80, 102, 0), new ScheduledTask(89, 111, 1), new ScheduledTask(102, 109, 0), new ScheduledTask(116, 123, 1)};
        int[] expectedProcessorEndTimes = new int[]{109, 123};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot40_CCR_1dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.40_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 110;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 21, 0), new ScheduledTask(21, 34, 0), new ScheduledTask(34, 55, 0), new ScheduledTask(0, 21, 1), new ScheduledTask(55, 71, 0), new ScheduledTask(65, 73, 1), new ScheduledTask(76, 89, 0), new ScheduledTask(81, 105, 1), new ScheduledTask(89, 94, 0), new ScheduledTask(94, 110, 0)};
        int[] expectedProcessorEndTimes = new int[]{110, 105};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot40_CCR_1dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.40_CCR_1.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 110;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 21, 0), new ScheduledTask(21, 34, 0), new ScheduledTask(34, 55, 0), new ScheduledTask(0, 21, 1), new ScheduledTask(55, 71, 0), new ScheduledTask(65, 73, 1), new ScheduledTask(76, 89, 0), new ScheduledTask(81, 105, 1), new ScheduledTask(89, 94, 0), new ScheduledTask(94, 110, 0)};
        int[] expectedProcessorEndTimes = new int[]{110, 105};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot40_CCR_1dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.40_CCR_1.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 110;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 21, 0), new ScheduledTask(21, 34, 0), new ScheduledTask(34, 55, 0), new ScheduledTask(0, 21, 1), new ScheduledTask(55, 71, 0), new ScheduledTask(65, 73, 1), new ScheduledTask(76, 89, 0), new ScheduledTask(81, 105, 1), new ScheduledTask(89, 94, 0), new ScheduledTask(94, 110, 0)};
        int[] expectedProcessorEndTimes = new int[]{110, 105};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot50_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.50_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 117;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 15, 0), new ScheduledTask(15, 37, 0), new ScheduledTask(37, 46, 0), new ScheduledTask(46, 57, 0), new ScheduledTask(57, 63, 0), new ScheduledTask(63, 85, 0), new ScheduledTask(19, 36, 1), new ScheduledTask(85, 104, 0), new ScheduledTask(104, 117, 0), new ScheduledTask(72, 85, 1)};
        int[] expectedProcessorEndTimes = new int[]{117, 85};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot50_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.50_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 117;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 15, 0), new ScheduledTask(15, 37, 0), new ScheduledTask(37, 46, 0), new ScheduledTask(46, 57, 0), new ScheduledTask(57, 63, 0), new ScheduledTask(63, 85, 0), new ScheduledTask(19, 36, 1), new ScheduledTask(85, 104, 0), new ScheduledTask(104, 117, 0), new ScheduledTask(72, 85, 1)};
        int[] expectedProcessorEndTimes = new int[]{117, 85};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot50_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.50_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 117;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 15, 0), new ScheduledTask(15, 37, 0), new ScheduledTask(37, 46, 0), new ScheduledTask(46, 57, 0), new ScheduledTask(57, 63, 0), new ScheduledTask(63, 85, 0), new ScheduledTask(19, 36, 1), new ScheduledTask(85, 104, 0), new ScheduledTask(104, 117, 0), new ScheduledTask(72, 85, 1)};
        int[] expectedProcessorEndTimes = new int[]{117, 85};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot60_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.60_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 102;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 23, 0), new ScheduledTask(0, 16, 1), new ScheduledTask(16, 32, 1), new ScheduledTask(25, 43, 0), new ScheduledTask(43, 48, 0), new ScheduledTask(48, 69, 0), new ScheduledTask(69, 74, 0), new ScheduledTask(78, 94, 1), new ScheduledTask(74, 95, 0), new ScheduledTask(94, 102, 1)};
        int[] expectedProcessorEndTimes = new int[]{95, 102};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot60_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.60_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 102;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 23, 0), new ScheduledTask(0, 16, 1), new ScheduledTask(0, 16, 2), new ScheduledTask(25, 43, 0), new ScheduledTask(43, 48, 0), new ScheduledTask(48, 69, 0), new ScheduledTask(69, 74, 0), new ScheduledTask(78, 94, 3), new ScheduledTask(74, 95, 0), new ScheduledTask(94, 102, 3)};
        int[] expectedProcessorEndTimes = new int[]{95, 16, 16, 102};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot60_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.60_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 102;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 23, 0), new ScheduledTask(0, 16, 1), new ScheduledTask(0, 16, 2), new ScheduledTask(25, 43, 0), new ScheduledTask(43, 48, 0), new ScheduledTask(48, 69, 0), new ScheduledTask(69, 74, 0), new ScheduledTask(78, 94, 3), new ScheduledTask(74, 95, 0), new ScheduledTask(94, 102, 3)};
        int[] expectedProcessorEndTimes = new int[]{95, 16, 16, 102};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2792;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 147, 0), new ScheduledTask(147, 245, 0), new ScheduledTask(245, 539, 0), new ScheduledTask(539, 735, 0), new ScheduledTask(735, 1224, 0), new ScheduledTask(1224, 1665, 0), new ScheduledTask(1665, 1910, 0), new ScheduledTask(1910, 2253, 0), new ScheduledTask(2253, 2351, 0), new ScheduledTask(2351, 2792, 0)};
        int[] expectedProcessorEndTimes = new int[]{2792};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2792;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 147, 0), new ScheduledTask(147, 245, 0), new ScheduledTask(245, 539, 0), new ScheduledTask(539, 735, 0), new ScheduledTask(735, 1224, 0), new ScheduledTask(1224, 1665, 0), new ScheduledTask(1665, 1910, 0), new ScheduledTask(1910, 2253, 0), new ScheduledTask(2253, 2351, 0), new ScheduledTask(2351, 2792, 0)};
        int[] expectedProcessorEndTimes = new int[]{2792};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2792;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 147, 0), new ScheduledTask(147, 245, 0), new ScheduledTask(245, 539, 0), new ScheduledTask(539, 735, 0), new ScheduledTask(735, 1224, 0), new ScheduledTask(1224, 1665, 0), new ScheduledTask(1665, 1910, 0), new ScheduledTask(1910, 2253, 0), new ScheduledTask(2253, 2351, 0), new ScheduledTask(2351, 2792, 0)};
        int[] expectedProcessorEndTimes = new int[]{2792};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2598;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 343, 0), new ScheduledTask(343, 686, 0), new ScheduledTask(686, 833, 0), new ScheduledTask(833, 980, 0), new ScheduledTask(980, 1471, 0), new ScheduledTask(1471, 1716, 0), new ScheduledTask(1716, 1863, 0), new ScheduledTask(1863, 2059, 0), new ScheduledTask(2059, 2451, 0), new ScheduledTask(2451, 2598, 0)};
        int[] expectedProcessorEndTimes = new int[]{2598};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2598;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 343, 0), new ScheduledTask(343, 686, 0), new ScheduledTask(686, 833, 0), new ScheduledTask(833, 980, 0), new ScheduledTask(980, 1471, 0), new ScheduledTask(1471, 1716, 0), new ScheduledTask(1716, 1863, 0), new ScheduledTask(1863, 2059, 0), new ScheduledTask(2059, 2451, 0), new ScheduledTask(2451, 2598, 0)};
        int[] expectedProcessorEndTimes = new int[]{2598};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2598;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 343, 0), new ScheduledTask(343, 686, 0), new ScheduledTask(686, 833, 0), new ScheduledTask(833, 980, 0), new ScheduledTask(980, 1471, 0), new ScheduledTask(1471, 1716, 0), new ScheduledTask(1716, 1863, 0), new ScheduledTask(1863, 2059, 0), new ScheduledTask(2059, 2451, 0), new ScheduledTask(2451, 2598, 0)};
        int[] expectedProcessorEndTimes = new int[]{2598};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2819;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 227, 0), new ScheduledTask(227, 545, 0), new ScheduledTask(545, 636, 0), new ScheduledTask(636, 727, 0), new ScheduledTask(727, 1091, 0), new ScheduledTask(1091, 1500, 0), new ScheduledTask(1500, 1955, 0), new ScheduledTask(1955, 2182, 0), new ScheduledTask(2182, 2637, 0), new ScheduledTask(2637, 2819, 0)};
        int[] expectedProcessorEndTimes = new int[]{2819};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2819;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 227, 0), new ScheduledTask(227, 545, 0), new ScheduledTask(545, 636, 0), new ScheduledTask(636, 727, 0), new ScheduledTask(727, 1091, 0), new ScheduledTask(1091, 1500, 0), new ScheduledTask(1500, 1955, 0), new ScheduledTask(1955, 2182, 0), new ScheduledTask(2182, 2637, 0), new ScheduledTask(2637, 2819, 0)};
        int[] expectedProcessorEndTimes = new int[]{2819};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2819;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 227, 0), new ScheduledTask(227, 545, 0), new ScheduledTask(545, 636, 0), new ScheduledTask(636, 727, 0), new ScheduledTask(727, 1091, 0), new ScheduledTask(1091, 1500, 0), new ScheduledTask(1500, 1955, 0), new ScheduledTask(1955, 2182, 0), new ScheduledTask(2182, 2637, 0), new ScheduledTask(2637, 2819, 0)};
        int[] expectedProcessorEndTimes = new int[]{2819};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2902;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 102, 0), new ScheduledTask(102, 306, 0), new ScheduledTask(306, 662, 0), new ScheduledTask(662, 815, 0), new ScheduledTask(815, 1273, 0), new ScheduledTask(1273, 1629, 0), new ScheduledTask(1629, 2138, 0), new ScheduledTask(2138, 2291, 0), new ScheduledTask(2291, 2495, 0), new ScheduledTask(2495, 2902, 0)};
        int[] expectedProcessorEndTimes = new int[]{2902};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2902;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 102, 0), new ScheduledTask(102, 306, 0), new ScheduledTask(306, 662, 0), new ScheduledTask(662, 815, 0), new ScheduledTask(815, 1273, 0), new ScheduledTask(1273, 1629, 0), new ScheduledTask(1629, 2138, 0), new ScheduledTask(2138, 2291, 0), new ScheduledTask(2291, 2495, 0), new ScheduledTask(2495, 2902, 0)};
        int[] expectedProcessorEndTimes = new int[]{2902};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2902;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 102, 0), new ScheduledTask(102, 306, 0), new ScheduledTask(306, 662, 0), new ScheduledTask(662, 815, 0), new ScheduledTask(815, 1273, 0), new ScheduledTask(1273, 1629, 0), new ScheduledTask(1629, 2138, 0), new ScheduledTask(2138, 2291, 0), new ScheduledTask(2291, 2495, 0), new ScheduledTask(2495, 2902, 0)};
        int[] expectedProcessorEndTimes = new int[]{2902};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2758;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 438, 0), new ScheduledTask(438, 832, 0), new ScheduledTask(832, 1226, 0), new ScheduledTask(1226, 1357, 0), new ScheduledTask(1357, 1445, 0), new ScheduledTask(1445, 1620, 0), new ScheduledTask(1620, 1708, 0), new ScheduledTask(1708, 2058, 0), new ScheduledTask(2058, 2408, 0), new ScheduledTask(2408, 2758, 0)};
        int[] expectedProcessorEndTimes = new int[]{2758};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2758;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 438, 0), new ScheduledTask(438, 832, 0), new ScheduledTask(832, 1226, 0), new ScheduledTask(1226, 1357, 0), new ScheduledTask(1357, 1445, 0), new ScheduledTask(1445, 1620, 0), new ScheduledTask(1620, 1708, 0), new ScheduledTask(1708, 2058, 0), new ScheduledTask(2058, 2408, 0), new ScheduledTask(2408, 2758, 0)};
        int[] expectedProcessorEndTimes = new int[]{2758};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2758;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 438, 0), new ScheduledTask(438, 832, 0), new ScheduledTask(832, 1226, 0), new ScheduledTask(1226, 1357, 0), new ScheduledTask(1357, 1445, 0), new ScheduledTask(1445, 1620, 0), new ScheduledTask(1620, 1708, 0), new ScheduledTask(1708, 2058, 0), new ScheduledTask(2058, 2408, 0), new ScheduledTask(2408, 2758, 0)};
        int[] expectedProcessorEndTimes = new int[]{2758};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2789;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 320, 0), new ScheduledTask(320, 732, 0), new ScheduledTask(732, 1006, 0), new ScheduledTask(1006, 1463, 0), new ScheduledTask(1463, 1600, 0), new ScheduledTask(1600, 1783, 0), new ScheduledTask(1783, 1920, 0), new ScheduledTask(1920, 2103, 0), new ScheduledTask(2103, 2560, 0), new ScheduledTask(2560, 2789, 0)};
        int[] expectedProcessorEndTimes = new int[]{2789};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2789;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 320, 0), new ScheduledTask(320, 732, 0), new ScheduledTask(732, 1006, 0), new ScheduledTask(1006, 1463, 0), new ScheduledTask(1463, 1600, 0), new ScheduledTask(1600, 1783, 0), new ScheduledTask(1783, 1920, 0), new ScheduledTask(1920, 2103, 0), new ScheduledTask(2103, 2560, 0), new ScheduledTask(2560, 2789, 0)};
        int[] expectedProcessorEndTimes = new int[]{2789};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2789;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 320, 0), new ScheduledTask(320, 732, 0), new ScheduledTask(732, 1006, 0), new ScheduledTask(1006, 1463, 0), new ScheduledTask(1463, 1600, 0), new ScheduledTask(1600, 1783, 0), new ScheduledTask(1783, 1920, 0), new ScheduledTask(1920, 2103, 0), new ScheduledTask(2103, 2560, 0), new ScheduledTask(2560, 2789, 0)};
        int[] expectedProcessorEndTimes = new int[]{2789};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2822;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 103, 0), new ScheduledTask(103, 257, 0), new ScheduledTask(257, 565, 0), new ScheduledTask(565, 1026, 0), new ScheduledTask(1026, 1539, 0), new ScheduledTask(1539, 1642, 0), new ScheduledTask(1642, 1745, 0), new ScheduledTask(1745, 1899, 0), new ScheduledTask(1899, 2412, 0), new ScheduledTask(2412, 2822, 0)};
        int[] expectedProcessorEndTimes = new int[]{2822};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2822;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 103, 0), new ScheduledTask(103, 257, 0), new ScheduledTask(257, 565, 0), new ScheduledTask(565, 1026, 0), new ScheduledTask(1026, 1539, 0), new ScheduledTask(1539, 1642, 0), new ScheduledTask(1642, 1745, 0), new ScheduledTask(1745, 1899, 0), new ScheduledTask(1899, 2412, 0), new ScheduledTask(2412, 2822, 0)};
        int[] expectedProcessorEndTimes = new int[]{2822};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2822;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 103, 0), new ScheduledTask(103, 257, 0), new ScheduledTask(257, 565, 0), new ScheduledTask(565, 1026, 0), new ScheduledTask(1026, 1539, 0), new ScheduledTask(1539, 1642, 0), new ScheduledTask(1642, 1745, 0), new ScheduledTask(1745, 1899, 0), new ScheduledTask(1899, 2412, 0), new ScheduledTask(2412, 2822, 0)};
        int[] expectedProcessorEndTimes = new int[]{2822};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2841;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 316, 0), new ScheduledTask(316, 722, 0), new ScheduledTask(722, 992, 0), new ScheduledTask(992, 1082, 0), new ScheduledTask(1082, 1533, 0), new ScheduledTask(1533, 1713, 0), new ScheduledTask(1713, 2029, 0), new ScheduledTask(2029, 2435, 0), new ScheduledTask(2435, 2525, 0), new ScheduledTask(2525, 2841, 0)};
        int[] expectedProcessorEndTimes = new int[]{2841};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2841;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 316, 0), new ScheduledTask(316, 722, 0), new ScheduledTask(722, 992, 0), new ScheduledTask(992, 1082, 0), new ScheduledTask(1082, 1533, 0), new ScheduledTask(1533, 1713, 0), new ScheduledTask(1713, 2029, 0), new ScheduledTask(2029, 2435, 0), new ScheduledTask(2435, 2525, 0), new ScheduledTask(2525, 2841, 0)};
        int[] expectedProcessorEndTimes = new int[]{2841};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2841;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 316, 0), new ScheduledTask(316, 722, 0), new ScheduledTask(722, 992, 0), new ScheduledTask(992, 1082, 0), new ScheduledTask(1082, 1533, 0), new ScheduledTask(1533, 1713, 0), new ScheduledTask(1713, 2029, 0), new ScheduledTask(2029, 2435, 0), new ScheduledTask(2435, 2525, 0), new ScheduledTask(2525, 2841, 0)};
        int[] expectedProcessorEndTimes = new int[]{2841};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2769;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 331, 0), new ScheduledTask(331, 620, 0), new ScheduledTask(620, 1033, 0), new ScheduledTask(1033, 1157, 0), new ScheduledTask(1157, 1405, 0), new ScheduledTask(1405, 1694, 0), new ScheduledTask(1694, 2025, 0), new ScheduledTask(2025, 2356, 0), new ScheduledTask(2356, 2480, 0), new ScheduledTask(2480, 2769, 0)};
        int[] expectedProcessorEndTimes = new int[]{2769};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2769;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 331, 0), new ScheduledTask(331, 620, 0), new ScheduledTask(620, 1033, 0), new ScheduledTask(1033, 1157, 0), new ScheduledTask(1157, 1405, 0), new ScheduledTask(1405, 1694, 0), new ScheduledTask(1694, 2025, 0), new ScheduledTask(2025, 2356, 0), new ScheduledTask(2356, 2480, 0), new ScheduledTask(2480, 2769, 0)};
        int[] expectedProcessorEndTimes = new int[]{2769};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2769;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 331, 0), new ScheduledTask(331, 620, 0), new ScheduledTask(620, 1033, 0), new ScheduledTask(1033, 1157, 0), new ScheduledTask(1157, 1405, 0), new ScheduledTask(1405, 1694, 0), new ScheduledTask(1694, 2025, 0), new ScheduledTask(2025, 2356, 0), new ScheduledTask(2356, 2480, 0), new ScheduledTask(2480, 2769, 0)};
        int[] expectedProcessorEndTimes = new int[]{2769};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2680;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 152, 0), new ScheduledTask(152, 354, 0), new ScheduledTask(354, 657, 0), new ScheduledTask(657, 910, 0), new ScheduledTask(910, 1163, 0), new ScheduledTask(1163, 1517, 0), new ScheduledTask(1517, 1618, 0), new ScheduledTask(1618, 1770, 0), new ScheduledTask(1770, 2225, 0), new ScheduledTask(2225, 2680, 0)};
        int[] expectedProcessorEndTimes = new int[]{2680};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2680;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 152, 0), new ScheduledTask(152, 354, 0), new ScheduledTask(354, 657, 0), new ScheduledTask(657, 910, 0), new ScheduledTask(910, 1163, 0), new ScheduledTask(1163, 1517, 0), new ScheduledTask(1517, 1618, 0), new ScheduledTask(1618, 1770, 0), new ScheduledTask(1770, 2225, 0), new ScheduledTask(2225, 2680, 0)};
        int[] expectedProcessorEndTimes = new int[]{2680};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2680;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 152, 0), new ScheduledTask(152, 354, 0), new ScheduledTask(354, 657, 0), new ScheduledTask(657, 910, 0), new ScheduledTask(910, 1163, 0), new ScheduledTask(1163, 1517, 0), new ScheduledTask(1517, 1618, 0), new ScheduledTask(1618, 1770, 0), new ScheduledTask(1770, 2225, 0), new ScheduledTask(2225, 2680, 0)};
        int[] expectedProcessorEndTimes = new int[]{2680};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2680;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 152, 0), new ScheduledTask(152, 354, 0), new ScheduledTask(354, 657, 0), new ScheduledTask(657, 910, 0), new ScheduledTask(910, 1163, 0), new ScheduledTask(1163, 1517, 0), new ScheduledTask(1517, 1618, 0), new ScheduledTask(1618, 1770, 0), new ScheduledTask(1770, 2225, 0), new ScheduledTask(2225, 2680, 0)};
        int[] expectedProcessorEndTimes = new int[]{2680};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2961;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 304, 0), new ScheduledTask(304, 608, 0), new ScheduledTask(608, 987, 0), new ScheduledTask(987, 1366, 0), new ScheduledTask(1366, 1594, 0), new ScheduledTask(1594, 1746, 0), new ScheduledTask(1746, 2125, 0), new ScheduledTask(2125, 2277, 0), new ScheduledTask(2277, 2619, 0), new ScheduledTask(2619, 2961, 0)};
        int[] expectedProcessorEndTimes = new int[]{2961};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2961;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 304, 0), new ScheduledTask(304, 608, 0), new ScheduledTask(608, 987, 0), new ScheduledTask(987, 1366, 0), new ScheduledTask(1366, 1594, 0), new ScheduledTask(1594, 1746, 0), new ScheduledTask(1746, 2125, 0), new ScheduledTask(2125, 2277, 0), new ScheduledTask(2277, 2619, 0), new ScheduledTask(2619, 2961, 0)};
        int[] expectedProcessorEndTimes = new int[]{2961};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2961;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 304, 0), new ScheduledTask(304, 608, 0), new ScheduledTask(608, 987, 0), new ScheduledTask(987, 1366, 0), new ScheduledTask(1366, 1594, 0), new ScheduledTask(1594, 1746, 0), new ScheduledTask(1746, 2125, 0), new ScheduledTask(2125, 2277, 0), new ScheduledTask(2277, 2619, 0), new ScheduledTask(2619, 2961, 0)};
        int[] expectedProcessorEndTimes = new int[]{2961};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot99_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.99_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 261;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 44, 0), new ScheduledTask(44, 84, 0), new ScheduledTask(84, 93, 0), new ScheduledTask(93, 137, 0), new ScheduledTask(137, 150, 0), new ScheduledTask(150, 176, 0), new ScheduledTask(176, 216, 0), new ScheduledTask(216, 234, 0), new ScheduledTask(234, 243, 0), new ScheduledTask(243, 261, 0)};
        int[] expectedProcessorEndTimes = new int[]{261};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot99_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.99_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 261;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 44, 0), new ScheduledTask(44, 84, 0), new ScheduledTask(84, 93, 0), new ScheduledTask(93, 137, 0), new ScheduledTask(137, 150, 0), new ScheduledTask(150, 176, 0), new ScheduledTask(176, 216, 0), new ScheduledTask(216, 234, 0), new ScheduledTask(234, 243, 0), new ScheduledTask(243, 261, 0)};
        int[] expectedProcessorEndTimes = new int[]{261};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot99_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.99_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 261;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 44, 0), new ScheduledTask(44, 84, 0), new ScheduledTask(84, 93, 0), new ScheduledTask(93, 137, 0), new ScheduledTask(137, 150, 0), new ScheduledTask(150, 176, 0), new ScheduledTask(176, 216, 0), new ScheduledTask(216, 234, 0), new ScheduledTask(234, 243, 0), new ScheduledTask(243, 261, 0)};
        int[] expectedProcessorEndTimes = new int[]{261};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot99_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.99_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 274;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 32, 0), new ScheduledTask(32, 64, 0), new ScheduledTask(64, 96, 0), new ScheduledTask(96, 135, 0), new ScheduledTask(135, 167, 0), new ScheduledTask(167, 206, 0), new ScheduledTask(206, 222, 0), new ScheduledTask(222, 250, 0), new ScheduledTask(250, 274, 0)};
        int[] expectedProcessorEndTimes = new int[]{274};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot99_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.99_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 274;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 32, 0), new ScheduledTask(32, 64, 0), new ScheduledTask(64, 96, 0), new ScheduledTask(96, 135, 0), new ScheduledTask(135, 167, 0), new ScheduledTask(167, 206, 0), new ScheduledTask(206, 222, 0), new ScheduledTask(222, 250, 0), new ScheduledTask(250, 274, 0)};
        int[] expectedProcessorEndTimes = new int[]{274};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot99_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.99_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 274;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 32, 0), new ScheduledTask(32, 64, 0), new ScheduledTask(64, 96, 0), new ScheduledTask(96, 135, 0), new ScheduledTask(135, 167, 0), new ScheduledTask(167, 206, 0), new ScheduledTask(206, 222, 0), new ScheduledTask(222, 250, 0), new ScheduledTask(250, 274, 0)};
        int[] expectedProcessorEndTimes = new int[]{274};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot99_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.99_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 274;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 32, 0), new ScheduledTask(32, 64, 0), new ScheduledTask(64, 96, 0), new ScheduledTask(96, 135, 0), new ScheduledTask(135, 167, 0), new ScheduledTask(167, 206, 0), new ScheduledTask(206, 222, 0), new ScheduledTask(222, 250, 0), new ScheduledTask(250, 274, 0)};
        int[] expectedProcessorEndTimes = new int[]{274};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 276;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 40, 0), new ScheduledTask(40, 60, 0), new ScheduledTask(60, 96, 0), new ScheduledTask(96, 120, 0), new ScheduledTask(120, 160, 0), new ScheduledTask(160, 180, 0), new ScheduledTask(180, 200, 0), new ScheduledTask(200, 216, 0), new ScheduledTask(216, 248, 0), new ScheduledTask(248, 276, 0)};
        int[] expectedProcessorEndTimes = new int[]{276};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 276;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 40, 0), new ScheduledTask(40, 60, 0), new ScheduledTask(60, 96, 0), new ScheduledTask(96, 120, 0), new ScheduledTask(120, 160, 0), new ScheduledTask(160, 180, 0), new ScheduledTask(180, 200, 0), new ScheduledTask(200, 216, 0), new ScheduledTask(216, 248, 0), new ScheduledTask(248, 276, 0)};
        int[] expectedProcessorEndTimes = new int[]{276};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 276;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 40, 0), new ScheduledTask(40, 60, 0), new ScheduledTask(60, 96, 0), new ScheduledTask(96, 120, 0), new ScheduledTask(120, 160, 0), new ScheduledTask(160, 180, 0), new ScheduledTask(180, 200, 0), new ScheduledTask(200, 216, 0), new ScheduledTask(216, 248, 0), new ScheduledTask(248, 276, 0)};
        int[] expectedProcessorEndTimes = new int[]{276};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 261;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 17, 0), new ScheduledTask(17, 34, 0), new ScheduledTask(34, 86, 0), new ScheduledTask(86, 133, 0), new ScheduledTask(133, 150, 0), new ScheduledTask(150, 162, 0), new ScheduledTask(162, 174, 0), new ScheduledTask(174, 226, 0), new ScheduledTask(226, 249, 0), new ScheduledTask(249, 261, 0)};
        int[] expectedProcessorEndTimes = new int[]{261};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 261;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 17, 0), new ScheduledTask(17, 34, 0), new ScheduledTask(34, 86, 0), new ScheduledTask(86, 133, 0), new ScheduledTask(133, 150, 0), new ScheduledTask(150, 162, 0), new ScheduledTask(162, 174, 0), new ScheduledTask(174, 226, 0), new ScheduledTask(226, 249, 0), new ScheduledTask(249, 261, 0)};
        int[] expectedProcessorEndTimes = new int[]{261};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 261;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 17, 0), new ScheduledTask(17, 34, 0), new ScheduledTask(34, 86, 0), new ScheduledTask(86, 133, 0), new ScheduledTask(133, 150, 0), new ScheduledTask(150, 162, 0), new ScheduledTask(162, 174, 0), new ScheduledTask(174, 226, 0), new ScheduledTask(226, 249, 0), new ScheduledTask(249, 261, 0)};
        int[] expectedProcessorEndTimes = new int[]{261};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 273;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 22, 0), new ScheduledTask(22, 55, 0), new ScheduledTask(55, 105, 0), new ScheduledTask(105, 122, 0), new ScheduledTask(122, 139, 0), new ScheduledTask(139, 150, 0), new ScheduledTask(150, 167, 0), new ScheduledTask(167, 189, 0), new ScheduledTask(189, 217, 0), new ScheduledTask(217, 273, 0)};
        int[] expectedProcessorEndTimes = new int[]{273};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 273;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 22, 0), new ScheduledTask(22, 55, 0), new ScheduledTask(55, 105, 0), new ScheduledTask(105, 122, 0), new ScheduledTask(122, 139, 0), new ScheduledTask(139, 150, 0), new ScheduledTask(150, 167, 0), new ScheduledTask(167, 189, 0), new ScheduledTask(189, 217, 0), new ScheduledTask(217, 273, 0)};
        int[] expectedProcessorEndTimes = new int[]{273};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 273;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 22, 0), new ScheduledTask(22, 55, 0), new ScheduledTask(55, 105, 0), new ScheduledTask(105, 122, 0), new ScheduledTask(122, 139, 0), new ScheduledTask(139, 150, 0), new ScheduledTask(150, 167, 0), new ScheduledTask(167, 189, 0), new ScheduledTask(189, 217, 0), new ScheduledTask(217, 273, 0)};
        int[] expectedProcessorEndTimes = new int[]{273};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 276;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 30, 0), new ScheduledTask(30, 67, 0), new ScheduledTask(67, 93, 0), new ScheduledTask(93, 115, 0), new ScheduledTask(115, 145, 0), new ScheduledTask(145, 175, 0), new ScheduledTask(175, 190, 0), new ScheduledTask(190, 209, 0), new ScheduledTask(209, 239, 0), new ScheduledTask(239, 276, 0)};
        int[] expectedProcessorEndTimes = new int[]{276};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 276;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 30, 0), new ScheduledTask(30, 67, 0), new ScheduledTask(67, 93, 0), new ScheduledTask(93, 115, 0), new ScheduledTask(115, 145, 0), new ScheduledTask(145, 175, 0), new ScheduledTask(175, 190, 0), new ScheduledTask(190, 209, 0), new ScheduledTask(209, 239, 0), new ScheduledTask(239, 276, 0)};
        int[] expectedProcessorEndTimes = new int[]{276};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 276;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 30, 0), new ScheduledTask(30, 67, 0), new ScheduledTask(67, 93, 0), new ScheduledTask(93, 115, 0), new ScheduledTask(115, 145, 0), new ScheduledTask(145, 175, 0), new ScheduledTask(175, 190, 0), new ScheduledTask(190, 209, 0), new ScheduledTask(209, 239, 0), new ScheduledTask(239, 276, 0)};
        int[] expectedProcessorEndTimes = new int[]{276};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 288;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(14, 56, 0), new ScheduledTask(56, 89, 0), new ScheduledTask(89, 98, 0), new ScheduledTask(98, 140, 0), new ScheduledTask(140, 186, 0), new ScheduledTask(186, 200, 0), new ScheduledTask(200, 246, 0), new ScheduledTask(246, 255, 0), new ScheduledTask(255, 288, 0)};
        int[] expectedProcessorEndTimes = new int[]{288};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 288;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(14, 56, 0), new ScheduledTask(56, 89, 0), new ScheduledTask(89, 98, 0), new ScheduledTask(98, 140, 0), new ScheduledTask(140, 186, 0), new ScheduledTask(186, 200, 0), new ScheduledTask(200, 246, 0), new ScheduledTask(246, 255, 0), new ScheduledTask(255, 288, 0)};
        int[] expectedProcessorEndTimes = new int[]{288};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 288;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(14, 56, 0), new ScheduledTask(56, 89, 0), new ScheduledTask(89, 98, 0), new ScheduledTask(98, 140, 0), new ScheduledTask(140, 186, 0), new ScheduledTask(186, 200, 0), new ScheduledTask(200, 246, 0), new ScheduledTask(246, 255, 0), new ScheduledTask(255, 288, 0)};
        int[] expectedProcessorEndTimes = new int[]{288};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 288;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 36, 0), new ScheduledTask(36, 57, 0), new ScheduledTask(57, 72, 0), new ScheduledTask(72, 98, 0), new ScheduledTask(98, 129, 0), new ScheduledTask(129, 160, 0), new ScheduledTask(160, 201, 0), new ScheduledTask(201, 216, 0), new ScheduledTask(216, 262, 0), new ScheduledTask(262, 288, 0)};
        int[] expectedProcessorEndTimes = new int[]{288};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 288;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 36, 0), new ScheduledTask(36, 57, 0), new ScheduledTask(57, 72, 0), new ScheduledTask(72, 98, 0), new ScheduledTask(98, 129, 0), new ScheduledTask(129, 160, 0), new ScheduledTask(160, 201, 0), new ScheduledTask(201, 216, 0), new ScheduledTask(216, 262, 0), new ScheduledTask(262, 288, 0)};
        int[] expectedProcessorEndTimes = new int[]{288};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 288;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 36, 0), new ScheduledTask(36, 57, 0), new ScheduledTask(57, 72, 0), new ScheduledTask(72, 98, 0), new ScheduledTask(98, 129, 0), new ScheduledTask(129, 160, 0), new ScheduledTask(160, 201, 0), new ScheduledTask(201, 216, 0), new ScheduledTask(216, 262, 0), new ScheduledTask(262, 288, 0)};
        int[] expectedProcessorEndTimes = new int[]{288};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 253;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 33, 0), new ScheduledTask(33, 59, 0), new ScheduledTask(59, 66, 0), new ScheduledTask(66, 73, 0), new ScheduledTask(73, 91, 0), new ScheduledTask(91, 128, 0), new ScheduledTask(128, 165, 0), new ScheduledTask(165, 183, 0), new ScheduledTask(183, 216, 0), new ScheduledTask(216, 253, 0)};
        int[] expectedProcessorEndTimes = new int[]{253};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 253;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 33, 0), new ScheduledTask(33, 59, 0), new ScheduledTask(59, 66, 0), new ScheduledTask(66, 73, 0), new ScheduledTask(73, 91, 0), new ScheduledTask(91, 128, 0), new ScheduledTask(128, 165, 0), new ScheduledTask(165, 183, 0), new ScheduledTask(183, 216, 0), new ScheduledTask(216, 253, 0)};
        int[] expectedProcessorEndTimes = new int[]{253};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 253;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 33, 0), new ScheduledTask(33, 59, 0), new ScheduledTask(59, 66, 0), new ScheduledTask(66, 73, 0), new ScheduledTask(73, 91, 0), new ScheduledTask(91, 128, 0), new ScheduledTask(128, 165, 0), new ScheduledTask(165, 183, 0), new ScheduledTask(183, 216, 0), new ScheduledTask(216, 253, 0)};
        int[] expectedProcessorEndTimes = new int[]{253};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 291;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 35, 0), new ScheduledTask(35, 66, 0), new ScheduledTask(66, 78, 0), new ScheduledTask(78, 113, 0), new ScheduledTask(113, 148, 0), new ScheduledTask(148, 171, 0), new ScheduledTask(171, 202, 0), new ScheduledTask(202, 229, 0), new ScheduledTask(229, 256, 0), new ScheduledTask(256, 291, 0)};
        int[] expectedProcessorEndTimes = new int[]{291};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 291;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 35, 0), new ScheduledTask(35, 66, 0), new ScheduledTask(66, 78, 0), new ScheduledTask(78, 113, 0), new ScheduledTask(113, 148, 0), new ScheduledTask(148, 171, 0), new ScheduledTask(171, 202, 0), new ScheduledTask(202, 229, 0), new ScheduledTask(229, 256, 0), new ScheduledTask(256, 291, 0)};
        int[] expectedProcessorEndTimes = new int[]{291};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 291;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 35, 0), new ScheduledTask(35, 66, 0), new ScheduledTask(66, 78, 0), new ScheduledTask(78, 113, 0), new ScheduledTask(113, 148, 0), new ScheduledTask(148, 171, 0), new ScheduledTask(171, 202, 0), new ScheduledTask(202, 229, 0), new ScheduledTask(229, 256, 0), new ScheduledTask(256, 291, 0)};
        int[] expectedProcessorEndTimes = new int[]{291};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 258;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 20, 0), new ScheduledTask(20, 56, 0), new ScheduledTask(56, 81, 0), new ScheduledTask(81, 127, 0), new ScheduledTask(127, 142, 0), new ScheduledTask(142, 162, 0), new ScheduledTask(162, 177, 0), new ScheduledTask(177, 197, 0), new ScheduledTask(197, 243, 0), new ScheduledTask(243, 258, 0)};
        int[] expectedProcessorEndTimes = new int[]{258};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 258;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 20, 0), new ScheduledTask(20, 56, 0), new ScheduledTask(56, 81, 0), new ScheduledTask(81, 127, 0), new ScheduledTask(127, 142, 0), new ScheduledTask(142, 162, 0), new ScheduledTask(162, 177, 0), new ScheduledTask(177, 197, 0), new ScheduledTask(197, 243, 0), new ScheduledTask(243, 258, 0)};
        int[] expectedProcessorEndTimes = new int[]{258};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 258;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 20, 0), new ScheduledTask(20, 56, 0), new ScheduledTask(56, 81, 0), new ScheduledTask(81, 127, 0), new ScheduledTask(127, 142, 0), new ScheduledTask(142, 162, 0), new ScheduledTask(162, 177, 0), new ScheduledTask(177, 197, 0), new ScheduledTask(197, 243, 0), new ScheduledTask(243, 258, 0)};
        int[] expectedProcessorEndTimes = new int[]{258};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot00_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.00_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 15, 0), new ScheduledTask(15, 25, 0), new ScheduledTask(25, 31, 0), new ScheduledTask(31, 34, 0), new ScheduledTask(34, 39, 0), new ScheduledTask(39, 48, 0), new ScheduledTask(48, 54, 0), new ScheduledTask(54, 64, 0), new ScheduledTask(64, 66, 0)};
        int[] expectedProcessorEndTimes = new int[]{66};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 15, 0), new ScheduledTask(15, 25, 0), new ScheduledTask(25, 31, 0), new ScheduledTask(31, 34, 0), new ScheduledTask(34, 39, 0), new ScheduledTask(39, 48, 0), new ScheduledTask(48, 54, 0), new ScheduledTask(54, 64, 0), new ScheduledTask(64, 66, 0)};
        int[] expectedProcessorEndTimes = new int[]{66};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot00_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.00_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 15, 0), new ScheduledTask(15, 25, 0), new ScheduledTask(25, 31, 0), new ScheduledTask(31, 34, 0), new ScheduledTask(34, 39, 0), new ScheduledTask(39, 48, 0), new ScheduledTask(48, 54, 0), new ScheduledTask(54, 64, 0), new ScheduledTask(64, 66, 0)};
        int[] expectedProcessorEndTimes = new int[]{66};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot00_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.00_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 15, 0), new ScheduledTask(15, 25, 0), new ScheduledTask(25, 31, 0), new ScheduledTask(31, 34, 0), new ScheduledTask(34, 39, 0), new ScheduledTask(39, 48, 0), new ScheduledTask(48, 54, 0), new ScheduledTask(54, 64, 0), new ScheduledTask(64, 66, 0)};
        int[] expectedProcessorEndTimes = new int[]{66};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 10, 0), new ScheduledTask(10, 18, 0), new ScheduledTask(18, 23, 0), new ScheduledTask(23, 28, 0), new ScheduledTask(28, 34, 0), new ScheduledTask(34, 38, 0), new ScheduledTask(38, 44, 0), new ScheduledTask(44, 48, 0), new ScheduledTask(48, 51, 0)};
        int[] expectedProcessorEndTimes = new int[]{51};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 10, 0), new ScheduledTask(10, 18, 0), new ScheduledTask(18, 23, 0), new ScheduledTask(23, 28, 0), new ScheduledTask(28, 34, 0), new ScheduledTask(34, 38, 0), new ScheduledTask(38, 44, 0), new ScheduledTask(44, 48, 0), new ScheduledTask(48, 51, 0)};
        int[] expectedProcessorEndTimes = new int[]{51};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 10, 0), new ScheduledTask(10, 18, 0), new ScheduledTask(18, 23, 0), new ScheduledTask(23, 28, 0), new ScheduledTask(28, 34, 0), new ScheduledTask(34, 38, 0), new ScheduledTask(38, 44, 0), new ScheduledTask(44, 48, 0), new ScheduledTask(48, 51, 0)};
        int[] expectedProcessorEndTimes = new int[]{51};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 11, 0), new ScheduledTask(11, 20, 0), new ScheduledTask(20, 22, 0), new ScheduledTask(22, 30, 0), new ScheduledTask(30, 33, 0), new ScheduledTask(33, 36, 0), new ScheduledTask(36, 39, 0), new ScheduledTask(39, 48, 0), new ScheduledTask(48, 56, 0)};
        int[] expectedProcessorEndTimes = new int[]{56};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 11, 0), new ScheduledTask(11, 20, 0), new ScheduledTask(20, 22, 0), new ScheduledTask(22, 30, 0), new ScheduledTask(30, 33, 0), new ScheduledTask(33, 36, 0), new ScheduledTask(36, 39, 0), new ScheduledTask(39, 48, 0), new ScheduledTask(48, 56, 0)};
        int[] expectedProcessorEndTimes = new int[]{56};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 11, 0), new ScheduledTask(11, 20, 0), new ScheduledTask(20, 22, 0), new ScheduledTask(22, 30, 0), new ScheduledTask(30, 33, 0), new ScheduledTask(33, 36, 0), new ScheduledTask(36, 39, 0), new ScheduledTask(39, 48, 0), new ScheduledTask(48, 56, 0)};
        int[] expectedProcessorEndTimes = new int[]{56};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot05_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.05_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 14, 0), new ScheduledTask(14, 16, 0), new ScheduledTask(16, 22, 0), new ScheduledTask(22, 32, 0), new ScheduledTask(32, 36, 0), new ScheduledTask(36, 41, 0), new ScheduledTask(41, 47, 0), new ScheduledTask(47, 53, 0), new ScheduledTask(53, 57, 0)};
        int[] expectedProcessorEndTimes = new int[]{57};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot05_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.05_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 14, 0), new ScheduledTask(14, 16, 0), new ScheduledTask(16, 22, 0), new ScheduledTask(22, 32, 0), new ScheduledTask(32, 36, 0), new ScheduledTask(36, 41, 0), new ScheduledTask(41, 47, 0), new ScheduledTask(47, 53, 0), new ScheduledTask(53, 57, 0)};
        int[] expectedProcessorEndTimes = new int[]{57};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot05_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.05_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 14, 0), new ScheduledTask(14, 16, 0), new ScheduledTask(16, 22, 0), new ScheduledTask(22, 32, 0), new ScheduledTask(32, 36, 0), new ScheduledTask(36, 41, 0), new ScheduledTask(41, 47, 0), new ScheduledTask(47, 53, 0), new ScheduledTask(53, 57, 0)};
        int[] expectedProcessorEndTimes = new int[]{57};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot05_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.05_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 11, 0), new ScheduledTask(11, 15, 0), new ScheduledTask(15, 19, 0), new ScheduledTask(19, 27, 0), new ScheduledTask(27, 35, 0), new ScheduledTask(35, 37, 0), new ScheduledTask(37, 40, 0), new ScheduledTask(40, 48, 0), new ScheduledTask(48, 58, 0)};
        int[] expectedProcessorEndTimes = new int[]{58};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot05_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.05_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 11, 0), new ScheduledTask(11, 15, 0), new ScheduledTask(15, 19, 0), new ScheduledTask(19, 27, 0), new ScheduledTask(27, 35, 0), new ScheduledTask(35, 37, 0), new ScheduledTask(37, 40, 0), new ScheduledTask(40, 48, 0), new ScheduledTask(48, 58, 0)};
        int[] expectedProcessorEndTimes = new int[]{58};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot05_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.05_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 11, 0), new ScheduledTask(11, 15, 0), new ScheduledTask(15, 19, 0), new ScheduledTask(19, 27, 0), new ScheduledTask(27, 35, 0), new ScheduledTask(35, 37, 0), new ScheduledTask(37, 40, 0), new ScheduledTask(40, 48, 0), new ScheduledTask(48, 58, 0)};
        int[] expectedProcessorEndTimes = new int[]{58};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot12_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.12_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 8, 0), new ScheduledTask(8, 17, 0), new ScheduledTask(17, 25, 0), new ScheduledTask(25, 27, 0), new ScheduledTask(27, 34, 0), new ScheduledTask(34, 42, 0), new ScheduledTask(42, 45, 0), new ScheduledTask(45, 55, 0), new ScheduledTask(55, 65, 0)};
        int[] expectedProcessorEndTimes = new int[]{65};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot12_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.12_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 8, 0), new ScheduledTask(8, 17, 0), new ScheduledTask(17, 25, 0), new ScheduledTask(25, 27, 0), new ScheduledTask(27, 34, 0), new ScheduledTask(34, 42, 0), new ScheduledTask(42, 45, 0), new ScheduledTask(45, 55, 0), new ScheduledTask(55, 65, 0)};
        int[] expectedProcessorEndTimes = new int[]{65};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot12_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.12_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 8, 0), new ScheduledTask(8, 17, 0), new ScheduledTask(17, 25, 0), new ScheduledTask(25, 27, 0), new ScheduledTask(27, 34, 0), new ScheduledTask(34, 42, 0), new ScheduledTask(42, 45, 0), new ScheduledTask(45, 55, 0), new ScheduledTask(55, 65, 0)};
        int[] expectedProcessorEndTimes = new int[]{65};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot12_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.12_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 49;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 11, 0), new ScheduledTask(11, 19, 0), new ScheduledTask(19, 24, 0), new ScheduledTask(24, 28, 0), new ScheduledTask(28, 31, 0), new ScheduledTask(31, 39, 0), new ScheduledTask(39, 43, 0), new ScheduledTask(43, 46, 0), new ScheduledTask(46, 49, 0)};
        int[] expectedProcessorEndTimes = new int[]{49};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot12_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.12_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 49;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 11, 0), new ScheduledTask(11, 19, 0), new ScheduledTask(19, 24, 0), new ScheduledTask(24, 28, 0), new ScheduledTask(28, 31, 0), new ScheduledTask(31, 39, 0), new ScheduledTask(39, 43, 0), new ScheduledTask(43, 46, 0), new ScheduledTask(46, 49, 0)};
        int[] expectedProcessorEndTimes = new int[]{49};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot12_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.12_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 49;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 11, 0), new ScheduledTask(11, 19, 0), new ScheduledTask(19, 24, 0), new ScheduledTask(24, 28, 0), new ScheduledTask(28, 31, 0), new ScheduledTask(31, 39, 0), new ScheduledTask(39, 43, 0), new ScheduledTask(43, 46, 0), new ScheduledTask(46, 49, 0)};
        int[] expectedProcessorEndTimes = new int[]{49};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot13_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.13_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 10, 0), new ScheduledTask(10, 12, 0), new ScheduledTask(12, 14, 0), new ScheduledTask(14, 18, 0), new ScheduledTask(18, 26, 0), new ScheduledTask(26, 31, 0), new ScheduledTask(31, 33, 0), new ScheduledTask(33, 38, 0), new ScheduledTask(38, 47, 0)};
        int[] expectedProcessorEndTimes = new int[]{47};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot13_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.13_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 10, 0), new ScheduledTask(10, 12, 0), new ScheduledTask(12, 14, 0), new ScheduledTask(14, 18, 0), new ScheduledTask(18, 26, 0), new ScheduledTask(26, 31, 0), new ScheduledTask(31, 33, 0), new ScheduledTask(33, 38, 0), new ScheduledTask(38, 47, 0)};
        int[] expectedProcessorEndTimes = new int[]{47};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot13_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.13_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 10, 0), new ScheduledTask(10, 12, 0), new ScheduledTask(12, 14, 0), new ScheduledTask(14, 18, 0), new ScheduledTask(18, 26, 0), new ScheduledTask(26, 31, 0), new ScheduledTask(31, 33, 0), new ScheduledTask(33, 38, 0), new ScheduledTask(38, 47, 0)};
        int[] expectedProcessorEndTimes = new int[]{47};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_2dot00_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_2.00_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 126;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 21, 0), new ScheduledTask(21, 25, 0), new ScheduledTask(25, 39, 0), new ScheduledTask(39, 56, 0), new ScheduledTask(56, 77, 0), new ScheduledTask(77, 89, 0), new ScheduledTask(89, 95, 0), new ScheduledTask(95, 109, 0), new ScheduledTask(109, 126, 0)};
        int[] expectedProcessorEndTimes = new int[]{126};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_2dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_2.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 126;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 21, 0), new ScheduledTask(21, 25, 0), new ScheduledTask(25, 39, 0), new ScheduledTask(39, 56, 0), new ScheduledTask(56, 77, 0), new ScheduledTask(77, 89, 0), new ScheduledTask(89, 95, 0), new ScheduledTask(95, 109, 0), new ScheduledTask(109, 126, 0)};
        int[] expectedProcessorEndTimes = new int[]{126};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_2dot00_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_2.00_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 126;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 21, 0), new ScheduledTask(21, 25, 0), new ScheduledTask(25, 39, 0), new ScheduledTask(39, 56, 0), new ScheduledTask(56, 77, 0), new ScheduledTask(77, 89, 0), new ScheduledTask(89, 95, 0), new ScheduledTask(95, 109, 0), new ScheduledTask(109, 126, 0)};
        int[] expectedProcessorEndTimes = new int[]{126};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_2dot00_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_2.00_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 126;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 21, 0), new ScheduledTask(21, 25, 0), new ScheduledTask(25, 39, 0), new ScheduledTask(39, 56, 0), new ScheduledTask(56, 77, 0), new ScheduledTask(77, 89, 0), new ScheduledTask(89, 95, 0), new ScheduledTask(95, 109, 0), new ScheduledTask(109, 126, 0)};
        int[] expectedProcessorEndTimes = new int[]{126};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_9dot92_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_9.92_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 14, 0), new ScheduledTask(14, 16, 0), new ScheduledTask(16, 22, 0), new ScheduledTask(22, 32, 0), new ScheduledTask(32, 39, 0), new ScheduledTask(39, 45, 0), new ScheduledTask(45, 47, 0), new ScheduledTask(47, 53, 0), new ScheduledTask(53, 59, 0)};
        int[] expectedProcessorEndTimes = new int[]{59};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_9dot92_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_9.92_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 14, 0), new ScheduledTask(14, 16, 0), new ScheduledTask(16, 22, 0), new ScheduledTask(22, 32, 0), new ScheduledTask(32, 39, 0), new ScheduledTask(39, 45, 0), new ScheduledTask(45, 47, 0), new ScheduledTask(47, 53, 0), new ScheduledTask(53, 59, 0)};
        int[] expectedProcessorEndTimes = new int[]{59};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_9dot92_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_9.92_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 14, 0), new ScheduledTask(14, 16, 0), new ScheduledTask(16, 22, 0), new ScheduledTask(22, 32, 0), new ScheduledTask(32, 39, 0), new ScheduledTask(39, 45, 0), new ScheduledTask(45, 47, 0), new ScheduledTask(47, 53, 0), new ScheduledTask(53, 59, 0)};
        int[] expectedProcessorEndTimes = new int[]{59};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_9dot96_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_9.96_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 49;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 9, 0), new ScheduledTask(9, 16, 0), new ScheduledTask(16, 18, 0), new ScheduledTask(18, 26, 0), new ScheduledTask(26, 29, 0), new ScheduledTask(29, 32, 0), new ScheduledTask(32, 38, 0), new ScheduledTask(38, 43, 0), new ScheduledTask(43, 49, 0)};
        int[] expectedProcessorEndTimes = new int[]{49};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_9dot96_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_9.96_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 49;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 9, 0), new ScheduledTask(9, 16, 0), new ScheduledTask(16, 18, 0), new ScheduledTask(18, 26, 0), new ScheduledTask(26, 29, 0), new ScheduledTask(29, 32, 0), new ScheduledTask(32, 38, 0), new ScheduledTask(38, 43, 0), new ScheduledTask(43, 49, 0)};
        int[] expectedProcessorEndTimes = new int[]{49};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_9dot96_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_9.96_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 49;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 9, 0), new ScheduledTask(9, 16, 0), new ScheduledTask(16, 18, 0), new ScheduledTask(18, 26, 0), new ScheduledTask(26, 29, 0), new ScheduledTask(29, 32, 0), new ScheduledTask(32, 38, 0), new ScheduledTask(38, 43, 0), new ScheduledTask(43, 49, 0)};
        int[] expectedProcessorEndTimes = new int[]{49};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_9dot97_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_9.97_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 13, 0), new ScheduledTask(13, 18, 0), new ScheduledTask(18, 28, 0), new ScheduledTask(28, 35, 0), new ScheduledTask(35, 45, 0), new ScheduledTask(45, 52, 0), new ScheduledTask(52, 56, 0), new ScheduledTask(56, 64, 0), new ScheduledTask(64, 67, 0)};
        int[] expectedProcessorEndTimes = new int[]{67};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_9dot97_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_9.97_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 13, 0), new ScheduledTask(13, 18, 0), new ScheduledTask(18, 28, 0), new ScheduledTask(28, 35, 0), new ScheduledTask(35, 45, 0), new ScheduledTask(45, 52, 0), new ScheduledTask(52, 56, 0), new ScheduledTask(56, 64, 0), new ScheduledTask(64, 67, 0)};
        int[] expectedProcessorEndTimes = new int[]{67};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_9dot97_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_9.97_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 13, 0), new ScheduledTask(13, 18, 0), new ScheduledTask(18, 28, 0), new ScheduledTask(28, 35, 0), new ScheduledTask(35, 45, 0), new ScheduledTask(45, 52, 0), new ScheduledTask(52, 56, 0), new ScheduledTask(56, 64, 0), new ScheduledTask(64, 67, 0)};
        int[] expectedProcessorEndTimes = new int[]{67};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 494;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 105, 0), new ScheduledTask(105, 189, 0), new ScheduledTask(189, 294, 0), new ScheduledTask(195, 237, 1), new ScheduledTask(294, 326, 0), new ScheduledTask(107, 181, 2), new ScheduledTask(326, 410, 0), new ScheduledTask(181, 202, 2), new ScheduledTask(410, 473, 0), new ScheduledTask(473, 494, 0)};
        int[] expectedProcessorEndTimes = new int[]{494, 237, 202};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 494;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 105, 0), new ScheduledTask(105, 189, 0), new ScheduledTask(189, 294, 0), new ScheduledTask(195, 237, 1), new ScheduledTask(294, 326, 0), new ScheduledTask(237, 311, 1), new ScheduledTask(326, 410, 0), new ScheduledTask(311, 332, 1), new ScheduledTask(410, 473, 0), new ScheduledTask(473, 494, 0)};
        int[] expectedProcessorEndTimes = new int[]{494, 332};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 494;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 105, 0), new ScheduledTask(105, 189, 0), new ScheduledTask(189, 294, 0), new ScheduledTask(195, 237, 1), new ScheduledTask(294, 326, 0), new ScheduledTask(107, 181, 2), new ScheduledTask(326, 410, 0), new ScheduledTask(181, 202, 2), new ScheduledTask(410, 473, 0), new ScheduledTask(473, 494, 0)};
        int[] expectedProcessorEndTimes = new int[]{494, 237, 202};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 494;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 105, 0), new ScheduledTask(105, 189, 0), new ScheduledTask(189, 294, 0), new ScheduledTask(195, 237, 1), new ScheduledTask(294, 326, 0), new ScheduledTask(107, 181, 2), new ScheduledTask(326, 410, 0), new ScheduledTask(181, 202, 2), new ScheduledTask(410, 473, 0), new ScheduledTask(473, 494, 0)};
        int[] expectedProcessorEndTimes = new int[]{494, 237, 202};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_1dot02_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_1.02_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 48;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 18, 0), new ScheduledTask(22, 32, 1), new ScheduledTask(17, 19, 2), new ScheduledTask(18, 28, 0), new ScheduledTask(19, 26, 2), new ScheduledTask(32, 36, 1), new ScheduledTask(26, 29, 2), new ScheduledTask(36, 39, 1), new ScheduledTask(39, 48, 1)};
        int[] expectedProcessorEndTimes = new int[]{28, 48, 29};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_1dot02_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_1.02_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(12, 20, 0), new ScheduledTask(25, 35, 1), new ScheduledTask(10, 12, 0), new ScheduledTask(20, 30, 0), new ScheduledTask(18, 25, 1), new ScheduledTask(35, 39, 1), new ScheduledTask(30, 33, 0), new ScheduledTask(39, 42, 1), new ScheduledTask(42, 51, 1)};
        int[] expectedProcessorEndTimes = new int[]{33, 51};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_1dot02_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_1.02_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 48;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 18, 0), new ScheduledTask(22, 32, 1), new ScheduledTask(17, 19, 2), new ScheduledTask(18, 28, 0), new ScheduledTask(19, 26, 2), new ScheduledTask(32, 36, 1), new ScheduledTask(26, 29, 2), new ScheduledTask(36, 39, 1), new ScheduledTask(39, 48, 1)};
        int[] expectedProcessorEndTimes = new int[]{28, 48, 29};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_1dot02_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_1.02_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 48;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 18, 0), new ScheduledTask(22, 32, 1), new ScheduledTask(17, 19, 2), new ScheduledTask(18, 28, 0), new ScheduledTask(19, 26, 2), new ScheduledTask(32, 36, 1), new ScheduledTask(26, 29, 2), new ScheduledTask(36, 39, 1), new ScheduledTask(39, 48, 1)};
        int[] expectedProcessorEndTimes = new int[]{28, 48, 29};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_1dot98_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_1.98_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 12, 0), new ScheduledTask(12, 14, 0), new ScheduledTask(14, 24, 0), new ScheduledTask(24, 27, 0), new ScheduledTask(27, 31, 0), new ScheduledTask(31, 40, 0), new ScheduledTask(29, 39, 1), new ScheduledTask(44, 46, 0), new ScheduledTask(46, 55, 0)};
        int[] expectedProcessorEndTimes = new int[]{55, 39};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_1dot98_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_1.98_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 12, 0), new ScheduledTask(12, 14, 0), new ScheduledTask(14, 24, 0), new ScheduledTask(24, 27, 0), new ScheduledTask(27, 31, 0), new ScheduledTask(31, 40, 0), new ScheduledTask(29, 39, 1), new ScheduledTask(44, 46, 0), new ScheduledTask(46, 55, 0)};
        int[] expectedProcessorEndTimes = new int[]{55, 39};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_1dot98_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_1.98_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 12, 0), new ScheduledTask(12, 14, 0), new ScheduledTask(14, 24, 0), new ScheduledTask(24, 27, 0), new ScheduledTask(27, 31, 0), new ScheduledTask(31, 40, 0), new ScheduledTask(29, 39, 1), new ScheduledTask(44, 46, 0), new ScheduledTask(46, 55, 0)};
        int[] expectedProcessorEndTimes = new int[]{55, 39};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_1dot98_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_1.98_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 12, 0), new ScheduledTask(12, 14, 0), new ScheduledTask(14, 24, 0), new ScheduledTask(24, 27, 0), new ScheduledTask(27, 31, 0), new ScheduledTask(31, 40, 0), new ScheduledTask(29, 39, 1), new ScheduledTask(44, 46, 0), new ScheduledTask(46, 55, 0)};
        int[] expectedProcessorEndTimes = new int[]{55, 39};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_10dot03_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_10.03_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 12, 0), new ScheduledTask(12, 17, 0), new ScheduledTask(17, 25, 0), new ScheduledTask(25, 32, 0), new ScheduledTask(32, 42, 0), new ScheduledTask(42, 52, 0), new ScheduledTask(52, 57, 0), new ScheduledTask(57, 66, 0), new ScheduledTask(66, 76, 0)};
        int[] expectedProcessorEndTimes = new int[]{76};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_10dot03_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_10.03_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 12, 0), new ScheduledTask(12, 17, 0), new ScheduledTask(17, 25, 0), new ScheduledTask(25, 32, 0), new ScheduledTask(32, 42, 0), new ScheduledTask(42, 52, 0), new ScheduledTask(52, 57, 0), new ScheduledTask(57, 66, 0), new ScheduledTask(66, 76, 0)};
        int[] expectedProcessorEndTimes = new int[]{76};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_10dot03_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_10.03_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 12, 0), new ScheduledTask(12, 17, 0), new ScheduledTask(17, 25, 0), new ScheduledTask(25, 32, 0), new ScheduledTask(32, 42, 0), new ScheduledTask(42, 52, 0), new ScheduledTask(52, 57, 0), new ScheduledTask(57, 66, 0), new ScheduledTask(66, 76, 0)};
        int[] expectedProcessorEndTimes = new int[]{76};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_10dot03_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_10.03_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 12, 0), new ScheduledTask(12, 17, 0), new ScheduledTask(17, 25, 0), new ScheduledTask(25, 32, 0), new ScheduledTask(32, 42, 0), new ScheduledTask(42, 52, 0), new ScheduledTask(52, 57, 0), new ScheduledTask(57, 66, 0), new ScheduledTask(66, 76, 0)};
        int[] expectedProcessorEndTimes = new int[]{76};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 515;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 113, 0), new ScheduledTask(113, 136, 0), new ScheduledTask(136, 249, 0), new ScheduledTask(249, 283, 0), new ScheduledTask(283, 351, 0), new ScheduledTask(251, 364, 1), new ScheduledTask(351, 385, 0), new ScheduledTask(364, 432, 1), new ScheduledTask(385, 430, 0), new ScheduledTask(436, 515, 1)};
        int[] expectedProcessorEndTimes = new int[]{430, 515};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 475;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 113, 0), new ScheduledTask(113, 136, 0), new ScheduledTask(136, 249, 0), new ScheduledTask(249, 283, 0), new ScheduledTask(283, 351, 0), new ScheduledTask(251, 364, 1), new ScheduledTask(288, 322, 2), new ScheduledTask(258, 326, 3), new ScheduledTask(351, 396, 0), new ScheduledTask(396, 475, 0)};
        int[] expectedProcessorEndTimes = new int[]{475, 364, 322, 326};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 475;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 113, 0), new ScheduledTask(113, 136, 0), new ScheduledTask(136, 249, 0), new ScheduledTask(249, 283, 0), new ScheduledTask(283, 351, 0), new ScheduledTask(251, 364, 1), new ScheduledTask(288, 322, 2), new ScheduledTask(258, 326, 3), new ScheduledTask(351, 396, 0), new ScheduledTask(396, 475, 0)};
        int[] expectedProcessorEndTimes = new int[]{475, 364, 322, 326};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 457;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 47, 0), new ScheduledTask(47, 154, 0), new ScheduledTask(159, 266, 1), new ScheduledTask(154, 178, 0), new ScheduledTask(214, 273, 0), new ScheduledTask(266, 349, 1), new ScheduledTask(178, 214, 0), new ScheduledTask(273, 309, 0), new ScheduledTask(309, 345, 0), new ScheduledTask(350, 457, 1)};
        int[] expectedProcessorEndTimes = new int[]{345, 457};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 404;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 47, 0), new ScheduledTask(47, 154, 0), new ScheduledTask(154, 261, 0), new ScheduledTask(164, 188, 1), new ScheduledTask(188, 247, 1), new ScheduledTask(161, 244, 2), new ScheduledTask(196, 232, 3), new ScheduledTask(261, 297, 0), new ScheduledTask(247, 283, 1), new ScheduledTask(297, 404, 0)};
        int[] expectedProcessorEndTimes = new int[]{404, 283, 244, 232};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 404;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 47, 0), new ScheduledTask(47, 154, 0), new ScheduledTask(154, 261, 0), new ScheduledTask(164, 188, 1), new ScheduledTask(188, 247, 1), new ScheduledTask(161, 244, 2), new ScheduledTask(196, 232, 3), new ScheduledTask(261, 297, 0), new ScheduledTask(247, 283, 1), new ScheduledTask(297, 404, 0)};
        int[] expectedProcessorEndTimes = new int[]{404, 283, 244, 232};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 366;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 36, 0), new ScheduledTask(36, 125, 0), new ScheduledTask(40, 67, 1), new ScheduledTask(67, 138, 1), new ScheduledTask(125, 205, 0), new ScheduledTask(138, 227, 1), new ScheduledTask(205, 250, 0), new ScheduledTask(227, 245, 1), new ScheduledTask(250, 330, 0), new ScheduledTask(330, 366, 0)};
        int[] expectedProcessorEndTimes = new int[]{366, 245};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 330;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 36, 0), new ScheduledTask(36, 125, 0), new ScheduledTask(40, 67, 1), new ScheduledTask(67, 138, 1), new ScheduledTask(45, 125, 2), new ScheduledTask(125, 214, 0), new ScheduledTask(138, 183, 1), new ScheduledTask(125, 143, 2), new ScheduledTask(214, 294, 0), new ScheduledTask(294, 330, 0)};
        int[] expectedProcessorEndTimes = new int[]{330, 183, 143};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 330;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 36, 0), new ScheduledTask(36, 125, 0), new ScheduledTask(40, 67, 1), new ScheduledTask(67, 138, 1), new ScheduledTask(45, 125, 2), new ScheduledTask(125, 214, 0), new ScheduledTask(138, 183, 1), new ScheduledTask(125, 143, 2), new ScheduledTask(214, 294, 0), new ScheduledTask(294, 330, 0)};
        int[] expectedProcessorEndTimes = new int[]{330, 183, 143};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 33, 0), new ScheduledTask(36, 186, 1), new ScheduledTask(33, 133, 0), new ScheduledTask(200, 300, 0), new ScheduledTask(219, 286, 1), new ScheduledTask(186, 219, 1), new ScheduledTask(133, 200, 0), new ScheduledTask(300, 350, 0), new ScheduledTask(286, 336, 1), new ScheduledTask(350, 400, 0)};
        int[] expectedProcessorEndTimes = new int[]{400, 336};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 383;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 33, 0), new ScheduledTask(33, 183, 0), new ScheduledTask(42, 142, 1), new ScheduledTask(183, 283, 0), new ScheduledTask(191, 258, 1), new ScheduledTask(186, 219, 2), new ScheduledTask(147, 214, 3), new ScheduledTask(283, 333, 0), new ScheduledTask(214, 264, 3), new ScheduledTask(333, 383, 0)};
        int[] expectedProcessorEndTimes = new int[]{383, 258, 219, 264};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 383;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 33, 0), new ScheduledTask(33, 183, 0), new ScheduledTask(42, 142, 1), new ScheduledTask(183, 283, 0), new ScheduledTask(191, 258, 1), new ScheduledTask(186, 219, 2), new ScheduledTask(147, 214, 3), new ScheduledTask(283, 333, 0), new ScheduledTask(39, 89, 4), new ScheduledTask(333, 383, 0)};
        int[] expectedProcessorEndTimes = new int[]{383, 258, 219, 214, 89};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 554;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 87, 0), new ScheduledTask(87, 116, 0), new ScheduledTask(159, 303, 0), new ScheduledTask(250, 337, 1), new ScheduledTask(91, 120, 1), new ScheduledTask(116, 159, 0), new ScheduledTask(120, 250, 1), new ScheduledTask(303, 418, 0), new ScheduledTask(337, 424, 1), new ScheduledTask(424, 554, 1)};
        int[] expectedProcessorEndTimes = new int[]{418, 554};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 477;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 87, 0), new ScheduledTask(87, 116, 0), new ScheduledTask(116, 260, 0), new ScheduledTask(119, 206, 1), new ScheduledTask(91, 120, 2), new ScheduledTask(123, 166, 2), new ScheduledTask(126, 256, 3), new ScheduledTask(166, 281, 2), new ScheduledTask(260, 347, 0), new ScheduledTask(347, 477, 0)};
        int[] expectedProcessorEndTimes = new int[]{477, 206, 281, 256};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 477;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 87, 0), new ScheduledTask(87, 116, 0), new ScheduledTask(116, 260, 0), new ScheduledTask(119, 206, 1), new ScheduledTask(91, 120, 2), new ScheduledTask(123, 166, 2), new ScheduledTask(126, 256, 3), new ScheduledTask(97, 212, 4), new ScheduledTask(260, 347, 0), new ScheduledTask(347, 477, 0)};
        int[] expectedProcessorEndTimes = new int[]{477, 206, 166, 256, 212};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 586;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 39, 0), new ScheduledTask(39, 137, 0), new ScheduledTask(137, 196, 0), new ScheduledTask(196, 313, 0), new ScheduledTask(313, 508, 0), new ScheduledTask(322, 439, 1), new ScheduledTask(257, 316, 1), new ScheduledTask(198, 257, 1), new ScheduledTask(508, 547, 0), new ScheduledTask(547, 586, 0)};
        int[] expectedProcessorEndTimes = new int[]{586, 439};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 586;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 39, 0), new ScheduledTask(39, 137, 0), new ScheduledTask(137, 196, 0), new ScheduledTask(196, 313, 0), new ScheduledTask(313, 508, 0), new ScheduledTask(322, 439, 1), new ScheduledTask(199, 258, 2), new ScheduledTask(198, 257, 3), new ScheduledTask(508, 547, 0), new ScheduledTask(547, 586, 0)};
        int[] expectedProcessorEndTimes = new int[]{586, 439, 258, 257};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 586;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 39, 0), new ScheduledTask(39, 137, 0), new ScheduledTask(137, 196, 0), new ScheduledTask(196, 313, 0), new ScheduledTask(313, 508, 0), new ScheduledTask(322, 439, 1), new ScheduledTask(199, 258, 2), new ScheduledTask(198, 257, 3), new ScheduledTask(508, 547, 0), new ScheduledTask(547, 586, 0)};
        int[] expectedProcessorEndTimes = new int[]{586, 439, 258, 257};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 458;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 76, 0), new ScheduledTask(76, 183, 0), new ScheduledTask(183, 290, 0), new ScheduledTask(141, 187, 1), new ScheduledTask(251, 312, 1), new ScheduledTask(190, 251, 1), new ScheduledTask(290, 412, 0), new ScheduledTask(312, 404, 1), new ScheduledTask(80, 141, 1), new ScheduledTask(412, 458, 0)};
        int[] expectedProcessorEndTimes = new int[]{458, 404};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 428;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 76, 0), new ScheduledTask(76, 183, 0), new ScheduledTask(183, 290, 0), new ScheduledTask(80, 126, 1), new ScheduledTask(191, 252, 1), new ScheduledTask(190, 251, 2), new ScheduledTask(133, 255, 3), new ScheduledTask(290, 382, 0), new ScheduledTask(251, 312, 2), new ScheduledTask(382, 428, 0)};
        int[] expectedProcessorEndTimes = new int[]{428, 252, 312, 255};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 428;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 76, 0), new ScheduledTask(76, 183, 0), new ScheduledTask(183, 290, 0), new ScheduledTask(80, 126, 1), new ScheduledTask(191, 252, 1), new ScheduledTask(190, 251, 2), new ScheduledTask(133, 255, 3), new ScheduledTask(290, 382, 0), new ScheduledTask(80, 141, 4), new ScheduledTask(382, 428, 0)};
        int[] expectedProcessorEndTimes = new int[]{428, 252, 251, 255, 141};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 622;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 50, 0), new ScheduledTask(50, 100, 0), new ScheduledTask(100, 199, 0), new ScheduledTask(199, 331, 0), new ScheduledTask(207, 306, 1), new ScheduledTask(306, 339, 1), new ScheduledTask(341, 506, 1), new ScheduledTask(331, 397, 0), new ScheduledTask(397, 447, 0), new ScheduledTask(506, 622, 1)};
        int[] expectedProcessorEndTimes = new int[]{447, 622};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 612;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 50, 0), new ScheduledTask(50, 100, 0), new ScheduledTask(100, 199, 0), new ScheduledTask(199, 331, 0), new ScheduledTask(207, 306, 1), new ScheduledTask(204, 237, 2), new ScheduledTask(331, 496, 0), new ScheduledTask(102, 168, 3), new ScheduledTask(168, 218, 3), new ScheduledTask(496, 612, 0)};
        int[] expectedProcessorEndTimes = new int[]{612, 306, 237, 218};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 612;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 50, 0), new ScheduledTask(50, 100, 0), new ScheduledTask(100, 199, 0), new ScheduledTask(199, 331, 0), new ScheduledTask(207, 306, 1), new ScheduledTask(204, 237, 2), new ScheduledTask(331, 496, 0), new ScheduledTask(102, 168, 3), new ScheduledTask(103, 153, 4), new ScheduledTask(496, 612, 0)};
        int[] expectedProcessorEndTimes = new int[]{612, 306, 237, 168, 153};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 425;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 79, 0), new ScheduledTask(136, 181, 0), new ScheduledTask(85, 187, 1), new ScheduledTask(187, 289, 1), new ScheduledTask(181, 249, 0), new ScheduledTask(249, 317, 0), new ScheduledTask(79, 136, 0), new ScheduledTask(289, 346, 1), new ScheduledTask(317, 340, 0), new ScheduledTask(346, 425, 1)};
        int[] expectedProcessorEndTimes = new int[]{340, 425};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 329;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 79, 0), new ScheduledTask(79, 124, 0), new ScheduledTask(85, 187, 1), new ScheduledTask(124, 226, 0), new ScheduledTask(146, 214, 2), new ScheduledTask(129, 197, 3), new ScheduledTask(89, 146, 2), new ScheduledTask(187, 244, 1), new ScheduledTask(226, 249, 0), new ScheduledTask(250, 329, 0)};
        int[] expectedProcessorEndTimes = new int[]{329, 244, 214, 197};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 329;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 79, 0), new ScheduledTask(79, 124, 0), new ScheduledTask(85, 187, 1), new ScheduledTask(124, 226, 0), new ScheduledTask(128, 196, 2), new ScheduledTask(129, 197, 3), new ScheduledTask(89, 146, 4), new ScheduledTask(187, 244, 1), new ScheduledTask(226, 249, 0), new ScheduledTask(250, 329, 0)};
        int[] expectedProcessorEndTimes = new int[]{329, 244, 196, 197, 146};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 358;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 53, 0), new ScheduledTask(53, 106, 0), new ScheduledTask(112, 208, 1), new ScheduledTask(106, 202, 0), new ScheduledTask(57, 164, 2), new ScheduledTask(111, 164, 3), new ScheduledTask(61, 157, 4), new ScheduledTask(208, 294, 1), new ScheduledTask(171, 235, 5), new ScheduledTask(294, 358, 1)};
        int[] expectedProcessorEndTimes = new int[]{202, 358, 164, 164, 157, 235};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 448;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 53, 0), new ScheduledTask(56, 109, 1), new ScheduledTask(202, 298, 0), new ScheduledTask(109, 205, 1), new ScheduledTask(205, 312, 1), new ScheduledTask(149, 202, 0), new ScheduledTask(53, 149, 0), new ScheduledTask(298, 384, 0), new ScheduledTask(312, 376, 1), new ScheduledTask(384, 448, 0)};
        int[] expectedProcessorEndTimes = new int[]{448, 376};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 358;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 53, 0), new ScheduledTask(53, 106, 0), new ScheduledTask(112, 208, 1), new ScheduledTask(106, 202, 0), new ScheduledTask(57, 164, 2), new ScheduledTask(111, 164, 3), new ScheduledTask(164, 260, 2), new ScheduledTask(208, 294, 1), new ScheduledTask(202, 266, 0), new ScheduledTask(294, 358, 1)};
        int[] expectedProcessorEndTimes = new int[]{266, 358, 260, 164};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 358;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 53, 0), new ScheduledTask(53, 106, 0), new ScheduledTask(112, 208, 1), new ScheduledTask(106, 202, 0), new ScheduledTask(57, 164, 2), new ScheduledTask(111, 164, 3), new ScheduledTask(61, 157, 4), new ScheduledTask(208, 294, 1), new ScheduledTask(171, 235, 5), new ScheduledTask(294, 358, 1)};
        int[] expectedProcessorEndTimes = new int[]{202, 358, 164, 164, 157, 235};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 484;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 108, 0), new ScheduledTask(115, 191, 1), new ScheduledTask(227, 324, 0), new ScheduledTask(267, 343, 1), new ScheduledTask(151, 227, 0), new ScheduledTask(108, 151, 0), new ScheduledTask(324, 411, 0), new ScheduledTask(343, 419, 1), new ScheduledTask(191, 267, 1), new ScheduledTask(419, 484, 1)};
        int[] expectedProcessorEndTimes = new int[]{411, 484};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 422;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 108, 0), new ScheduledTask(108, 184, 0), new ScheduledTask(184, 281, 0), new ScheduledTask(187, 263, 1), new ScheduledTask(117, 193, 2), new ScheduledTask(117, 160, 3), new ScheduledTask(193, 280, 2), new ScheduledTask(281, 357, 0), new ScheduledTask(160, 236, 3), new ScheduledTask(357, 422, 0)};
        int[] expectedProcessorEndTimes = new int[]{422, 263, 280, 236};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 422;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 108, 0), new ScheduledTask(108, 184, 0), new ScheduledTask(184, 281, 0), new ScheduledTask(187, 263, 1), new ScheduledTask(117, 193, 2), new ScheduledTask(117, 160, 3), new ScheduledTask(193, 280, 2), new ScheduledTask(281, 357, 0), new ScheduledTask(160, 236, 3), new ScheduledTask(357, 422, 0)};
        int[] expectedProcessorEndTimes = new int[]{422, 263, 280, 236};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot94_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.94_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 11, 0), new ScheduledTask(22, 30, 1), new ScheduledTask(11, 20, 0), new ScheduledTask(17, 22, 1), new ScheduledTask(20, 29, 0), new ScheduledTask(30, 39, 1), new ScheduledTask(9, 17, 1), new ScheduledTask(29, 34, 0), new ScheduledTask(39, 45, 1)};
        int[] expectedProcessorEndTimes = new int[]{34, 45};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot94_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.94_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 42;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 11, 0), new ScheduledTask(14, 22, 1), new ScheduledTask(11, 20, 0), new ScheduledTask(22, 27, 1), new ScheduledTask(8, 17, 2), new ScheduledTask(27, 36, 1), new ScheduledTask(9, 17, 3), new ScheduledTask(20, 25, 0), new ScheduledTask(36, 42, 1)};
        int[] expectedProcessorEndTimes = new int[]{25, 42, 17, 17};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot94_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.94_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 42;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 11, 0), new ScheduledTask(14, 22, 1), new ScheduledTask(11, 20, 0), new ScheduledTask(22, 27, 1), new ScheduledTask(8, 17, 2), new ScheduledTask(27, 36, 1), new ScheduledTask(9, 17, 3), new ScheduledTask(19, 24, 4), new ScheduledTask(36, 42, 1)};
        int[] expectedProcessorEndTimes = new int[]{20, 42, 17, 17, 24};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(8, 14, 1), new ScheduledTask(4, 17, 0), new ScheduledTask(14, 29, 1), new ScheduledTask(28, 39, 0), new ScheduledTask(17, 24, 0), new ScheduledTask(29, 42, 1), new ScheduledTask(39, 45, 0), new ScheduledTask(24, 28, 0), new ScheduledTask(45, 51, 0)};
        int[] expectedProcessorEndTimes = new int[]{51, 42};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 10, 0), new ScheduledTask(10, 23, 0), new ScheduledTask(18, 33, 1), new ScheduledTask(16, 27, 2), new ScheduledTask(11, 18, 3), new ScheduledTask(23, 36, 0), new ScheduledTask(35, 41, 1), new ScheduledTask(18, 22, 3), new ScheduledTask(41, 47, 1)};
        int[] expectedProcessorEndTimes = new int[]{36, 47, 27, 22};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 10, 0), new ScheduledTask(10, 23, 0), new ScheduledTask(18, 33, 1), new ScheduledTask(16, 27, 2), new ScheduledTask(11, 18, 3), new ScheduledTask(23, 36, 0), new ScheduledTask(35, 41, 1), new ScheduledTask(18, 22, 3), new ScheduledTask(41, 47, 1)};
        int[] expectedProcessorEndTimes = new int[]{36, 47, 27, 22};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 12, 0), new ScheduledTask(12, 20, 0), new ScheduledTask(20, 30, 0), new ScheduledTask(30, 39, 0), new ScheduledTask(39, 49, 0), new ScheduledTask(41, 46, 1), new ScheduledTask(46, 50, 1), new ScheduledTask(49, 51, 0), new ScheduledTask(53, 63, 1)};
        int[] expectedProcessorEndTimes = new int[]{51, 63};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 12, 0), new ScheduledTask(12, 20, 0), new ScheduledTask(20, 30, 0), new ScheduledTask(30, 39, 0), new ScheduledTask(39, 49, 0), new ScheduledTask(41, 46, 1), new ScheduledTask(46, 50, 1), new ScheduledTask(49, 51, 0), new ScheduledTask(53, 63, 1)};
        int[] expectedProcessorEndTimes = new int[]{51, 63};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 12, 0), new ScheduledTask(12, 20, 0), new ScheduledTask(20, 30, 0), new ScheduledTask(30, 39, 0), new ScheduledTask(39, 49, 0), new ScheduledTask(41, 46, 1), new ScheduledTask(46, 50, 1), new ScheduledTask(49, 51, 0), new ScheduledTask(53, 63, 1)};
        int[] expectedProcessorEndTimes = new int[]{51, 63};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 17, 0), new ScheduledTask(17, 26, 0), new ScheduledTask(26, 28, 0), new ScheduledTask(28, 37, 0), new ScheduledTask(37, 45, 0), new ScheduledTask(44, 47, 1), new ScheduledTask(45, 55, 0), new ScheduledTask(47, 50, 1), new ScheduledTask(57, 64, 0)};
        int[] expectedProcessorEndTimes = new int[]{64, 50};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 17, 0), new ScheduledTask(17, 26, 0), new ScheduledTask(26, 28, 0), new ScheduledTask(28, 37, 0), new ScheduledTask(37, 45, 0), new ScheduledTask(44, 47, 1), new ScheduledTask(45, 55, 0), new ScheduledTask(42, 45, 2), new ScheduledTask(56, 63, 0)};
        int[] expectedProcessorEndTimes = new int[]{63, 47, 45};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 17, 0), new ScheduledTask(17, 26, 0), new ScheduledTask(26, 28, 0), new ScheduledTask(28, 37, 0), new ScheduledTask(37, 45, 0), new ScheduledTask(44, 47, 1), new ScheduledTask(45, 55, 0), new ScheduledTask(42, 45, 2), new ScheduledTask(56, 63, 0)};
        int[] expectedProcessorEndTimes = new int[]{63, 47, 45};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 16, 0), new ScheduledTask(16, 27, 0), new ScheduledTask(16, 25, 1), new ScheduledTask(21, 29, 2), new ScheduledTask(24, 33, 3), new ScheduledTask(25, 34, 1), new ScheduledTask(12, 22, 4), new ScheduledTask(36, 44, 2), new ScheduledTask(44, 47, 2)};
        int[] expectedProcessorEndTimes = new int[]{27, 34, 47, 33, 22};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(11, 20, 1), new ScheduledTask(20, 31, 1), new ScheduledTask(7, 16, 0), new ScheduledTask(25, 33, 0), new ScheduledTask(33, 42, 0), new ScheduledTask(16, 25, 0), new ScheduledTask(31, 41, 1), new ScheduledTask(42, 50, 0), new ScheduledTask(50, 53, 0)};
        int[] expectedProcessorEndTimes = new int[]{53, 41};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 16, 0), new ScheduledTask(16, 27, 0), new ScheduledTask(16, 25, 1), new ScheduledTask(21, 29, 2), new ScheduledTask(24, 33, 3), new ScheduledTask(25, 34, 1), new ScheduledTask(12, 22, 3), new ScheduledTask(36, 44, 2), new ScheduledTask(44, 47, 2)};
        int[] expectedProcessorEndTimes = new int[]{27, 34, 47, 33};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 16, 0), new ScheduledTask(16, 27, 0), new ScheduledTask(16, 25, 1), new ScheduledTask(21, 29, 2), new ScheduledTask(24, 33, 3), new ScheduledTask(25, 34, 1), new ScheduledTask(12, 22, 4), new ScheduledTask(36, 44, 2), new ScheduledTask(44, 47, 2)};
        int[] expectedProcessorEndTimes = new int[]{27, 34, 47, 33, 22};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 13, 0), new ScheduledTask(13, 20, 0), new ScheduledTask(20, 30, 0), new ScheduledTask(30, 35, 0), new ScheduledTask(35, 45, 0), new ScheduledTask(45, 55, 0), new ScheduledTask(23, 29, 1), new ScheduledTask(30, 32, 1), new ScheduledTask(55, 63, 0)};
        int[] expectedProcessorEndTimes = new int[]{63, 32};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 13, 0), new ScheduledTask(13, 20, 0), new ScheduledTask(20, 30, 0), new ScheduledTask(30, 35, 0), new ScheduledTask(35, 45, 0), new ScheduledTask(45, 55, 0), new ScheduledTask(23, 29, 1), new ScheduledTask(30, 32, 1), new ScheduledTask(55, 63, 0)};
        int[] expectedProcessorEndTimes = new int[]{63, 32};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 13, 0), new ScheduledTask(13, 20, 0), new ScheduledTask(20, 30, 0), new ScheduledTask(30, 35, 0), new ScheduledTask(35, 45, 0), new ScheduledTask(45, 55, 0), new ScheduledTask(23, 29, 1), new ScheduledTask(30, 32, 1), new ScheduledTask(55, 63, 0)};
        int[] expectedProcessorEndTimes = new int[]{63, 32};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 15, 0), new ScheduledTask(21, 26, 1), new ScheduledTask(15, 30, 0), new ScheduledTask(26, 39, 1), new ScheduledTask(39, 47, 1), new ScheduledTask(37, 50, 0), new ScheduledTask(47, 52, 1), new ScheduledTask(30, 37, 0), new ScheduledTask(52, 55, 1)};
        int[] expectedProcessorEndTimes = new int[]{50, 55};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 15, 0), new ScheduledTask(15, 20, 0), new ScheduledTask(20, 35, 0), new ScheduledTask(30, 43, 1), new ScheduledTask(28, 36, 2), new ScheduledTask(20, 33, 3), new ScheduledTask(43, 48, 1), new ScheduledTask(35, 42, 0), new ScheduledTask(49, 52, 1)};
        int[] expectedProcessorEndTimes = new int[]{42, 52, 36, 33};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 15, 0), new ScheduledTask(15, 20, 0), new ScheduledTask(20, 35, 0), new ScheduledTask(30, 43, 1), new ScheduledTask(28, 36, 2), new ScheduledTask(20, 33, 3), new ScheduledTask(43, 48, 1), new ScheduledTask(35, 42, 0), new ScheduledTask(49, 52, 1)};
        int[] expectedProcessorEndTimes = new int[]{42, 52, 36, 33};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 12, 0), new ScheduledTask(12, 14, 0), new ScheduledTask(14, 16, 0), new ScheduledTask(16, 22, 0), new ScheduledTask(24, 36, 1), new ScheduledTask(36, 44, 1), new ScheduledTask(22, 27, 0), new ScheduledTask(27, 36, 0), new ScheduledTask(44, 54, 1)};
        int[] expectedProcessorEndTimes = new int[]{36, 54};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 12, 0), new ScheduledTask(12, 14, 0), new ScheduledTask(14, 16, 0), new ScheduledTask(16, 22, 0), new ScheduledTask(22, 34, 0), new ScheduledTask(34, 42, 0), new ScheduledTask(28, 33, 1), new ScheduledTask(29, 38, 2), new ScheduledTask(43, 53, 0)};
        int[] expectedProcessorEndTimes = new int[]{53, 33, 38};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 12, 0), new ScheduledTask(12, 14, 0), new ScheduledTask(14, 16, 0), new ScheduledTask(16, 22, 0), new ScheduledTask(22, 34, 0), new ScheduledTask(34, 42, 0), new ScheduledTask(28, 33, 1), new ScheduledTask(29, 38, 2), new ScheduledTask(43, 53, 0)};
        int[] expectedProcessorEndTimes = new int[]{53, 33, 38};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 43;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(13, 22, 1), new ScheduledTask(16, 18, 0), new ScheduledTask(10, 16, 0), new ScheduledTask(22, 29, 0), new ScheduledTask(18, 22, 0), new ScheduledTask(30, 40, 1), new ScheduledTask(22, 30, 1), new ScheduledTask(29, 36, 0), new ScheduledTask(40, 43, 1)};
        int[] expectedProcessorEndTimes = new int[]{36, 43};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 39;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(13, 22, 1), new ScheduledTask(12, 14, 2), new ScheduledTask(10, 16, 0), new ScheduledTask(14, 21, 2), new ScheduledTask(18, 22, 3), new ScheduledTask(22, 32, 1), new ScheduledTask(16, 24, 0), new ScheduledTask(25, 32, 3), new ScheduledTask(36, 39, 1)};
        int[] expectedProcessorEndTimes = new int[]{24, 39, 21, 32};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 39;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(13, 22, 1), new ScheduledTask(12, 14, 2), new ScheduledTask(10, 16, 0), new ScheduledTask(18, 25, 3), new ScheduledTask(14, 18, 2), new ScheduledTask(22, 32, 1), new ScheduledTask(16, 24, 0), new ScheduledTask(25, 32, 3), new ScheduledTask(36, 39, 1)};
        int[] expectedProcessorEndTimes = new int[]{24, 39, 18, 32};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot04_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.04_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 10, 0), new ScheduledTask(19, 28, 1), new ScheduledTask(10, 20, 0), new ScheduledTask(20, 25, 0), new ScheduledTask(9, 11, 1), new ScheduledTask(11, 19, 1), new ScheduledTask(28, 38, 1), new ScheduledTask(25, 29, 0), new ScheduledTask(38, 47, 1)};
        int[] expectedProcessorEndTimes = new int[]{29, 47};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot04_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.04_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 44;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 10, 0), new ScheduledTask(16, 25, 1), new ScheduledTask(10, 20, 0), new ScheduledTask(9, 14, 2), new ScheduledTask(9, 11, 3), new ScheduledTask(14, 22, 2), new ScheduledTask(25, 35, 1), new ScheduledTask(23, 27, 0), new ScheduledTask(35, 44, 1)};
        int[] expectedProcessorEndTimes = new int[]{27, 44, 22, 11};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot04_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.04_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 44;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 10, 0), new ScheduledTask(16, 25, 1), new ScheduledTask(10, 20, 0), new ScheduledTask(9, 14, 2), new ScheduledTask(9, 11, 3), new ScheduledTask(13, 21, 4), new ScheduledTask(25, 35, 1), new ScheduledTask(23, 27, 5), new ScheduledTask(35, 44, 1)};
        int[] expectedProcessorEndTimes = new int[]{20, 44, 14, 11, 21, 27};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot06_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.06_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 16, 0), new ScheduledTask(16, 18, 0), new ScheduledTask(18, 21, 0), new ScheduledTask(21, 31, 0), new ScheduledTask(32, 38, 1), new ScheduledTask(24, 32, 1), new ScheduledTask(31, 38, 0), new ScheduledTask(38, 44, 1), new ScheduledTask(45, 52, 1)};
        int[] expectedProcessorEndTimes = new int[]{38, 52};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot06_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.06_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 16, 0), new ScheduledTask(16, 18, 0), new ScheduledTask(18, 21, 0), new ScheduledTask(27, 37, 0), new ScheduledTask(21, 27, 0), new ScheduledTask(24, 32, 1), new ScheduledTask(37, 44, 0), new ScheduledTask(29, 35, 2), new ScheduledTask(44, 51, 0)};
        int[] expectedProcessorEndTimes = new int[]{51, 32, 35};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot06_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.06_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 16, 0), new ScheduledTask(16, 18, 0), new ScheduledTask(18, 21, 0), new ScheduledTask(27, 37, 1), new ScheduledTask(21, 27, 0), new ScheduledTask(24, 32, 2), new ScheduledTask(37, 44, 1), new ScheduledTask(27, 33, 0), new ScheduledTask(44, 51, 1)};
        int[] expectedProcessorEndTimes = new int[]{33, 51, 32};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot98_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.98_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 9, 0), new ScheduledTask(9, 19, 0), new ScheduledTask(26, 31, 1), new ScheduledTask(31, 34, 1), new ScheduledTask(34, 36, 1), new ScheduledTask(19, 28, 0), new ScheduledTask(36, 44, 1), new ScheduledTask(22, 25, 2), new ScheduledTask(44, 50, 1)};
        int[] expectedProcessorEndTimes = new int[]{28, 50, 25};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot98_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.98_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 9, 0), new ScheduledTask(9, 19, 0), new ScheduledTask(26, 31, 1), new ScheduledTask(31, 34, 1), new ScheduledTask(34, 36, 1), new ScheduledTask(19, 28, 0), new ScheduledTask(36, 44, 1), new ScheduledTask(28, 31, 0), new ScheduledTask(44, 50, 1)};
        int[] expectedProcessorEndTimes = new int[]{31, 50};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot98_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.98_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 9, 0), new ScheduledTask(9, 19, 0), new ScheduledTask(26, 31, 1), new ScheduledTask(31, 34, 1), new ScheduledTask(34, 36, 1), new ScheduledTask(19, 28, 0), new ScheduledTask(36, 44, 1), new ScheduledTask(22, 25, 2), new ScheduledTask(44, 50, 1)};
        int[] expectedProcessorEndTimes = new int[]{28, 50, 25};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot98_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.98_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 9, 0), new ScheduledTask(9, 19, 0), new ScheduledTask(26, 31, 1), new ScheduledTask(31, 34, 1), new ScheduledTask(34, 36, 1), new ScheduledTask(19, 28, 0), new ScheduledTask(36, 44, 1), new ScheduledTask(22, 25, 2), new ScheduledTask(44, 50, 1)};
        int[] expectedProcessorEndTimes = new int[]{28, 50, 25};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 5, 0), new ScheduledTask(5, 12, 0), new ScheduledTask(12, 18, 0), new ScheduledTask(18, 22, 0), new ScheduledTask(22, 29, 0), new ScheduledTask(29, 36, 0), new ScheduledTask(36, 40, 0), new ScheduledTask(40, 48, 0), new ScheduledTask(48, 54, 0)};
        int[] expectedProcessorEndTimes = new int[]{54};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 5, 0), new ScheduledTask(5, 12, 0), new ScheduledTask(12, 18, 0), new ScheduledTask(18, 22, 0), new ScheduledTask(22, 29, 0), new ScheduledTask(29, 36, 0), new ScheduledTask(36, 40, 0), new ScheduledTask(40, 48, 0), new ScheduledTask(48, 54, 0)};
        int[] expectedProcessorEndTimes = new int[]{54};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 5, 0), new ScheduledTask(5, 12, 0), new ScheduledTask(12, 18, 0), new ScheduledTask(18, 22, 0), new ScheduledTask(22, 29, 0), new ScheduledTask(29, 36, 0), new ScheduledTask(36, 40, 0), new ScheduledTask(40, 48, 0), new ScheduledTask(48, 54, 0)};
        int[] expectedProcessorEndTimes = new int[]{54};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 9, 0), new ScheduledTask(9, 15, 0), new ScheduledTask(15, 24, 0), new ScheduledTask(24, 28, 0), new ScheduledTask(28, 32, 0), new ScheduledTask(32, 34, 0), new ScheduledTask(34, 40, 0), new ScheduledTask(40, 48, 0), new ScheduledTask(48, 56, 0)};
        int[] expectedProcessorEndTimes = new int[]{56};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 9, 0), new ScheduledTask(9, 15, 0), new ScheduledTask(15, 24, 0), new ScheduledTask(24, 28, 0), new ScheduledTask(28, 32, 0), new ScheduledTask(32, 34, 0), new ScheduledTask(34, 40, 0), new ScheduledTask(40, 48, 0), new ScheduledTask(48, 56, 0)};
        int[] expectedProcessorEndTimes = new int[]{56};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 9, 0), new ScheduledTask(9, 15, 0), new ScheduledTask(15, 24, 0), new ScheduledTask(24, 28, 0), new ScheduledTask(28, 32, 0), new ScheduledTask(32, 34, 0), new ScheduledTask(34, 40, 0), new ScheduledTask(40, 48, 0), new ScheduledTask(48, 56, 0)};
        int[] expectedProcessorEndTimes = new int[]{56};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 19, 0), new ScheduledTask(19, 27, 0), new ScheduledTask(27, 32, 0), new ScheduledTask(32, 35, 0), new ScheduledTask(35, 45, 0), new ScheduledTask(45, 53, 0), new ScheduledTask(53, 57, 0), new ScheduledTask(57, 61, 0), new ScheduledTask(61, 68, 0)};
        int[] expectedProcessorEndTimes = new int[]{68};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 19, 0), new ScheduledTask(19, 27, 0), new ScheduledTask(27, 32, 0), new ScheduledTask(32, 35, 0), new ScheduledTask(35, 45, 0), new ScheduledTask(45, 53, 0), new ScheduledTask(53, 57, 0), new ScheduledTask(57, 61, 0), new ScheduledTask(61, 68, 0)};
        int[] expectedProcessorEndTimes = new int[]{68};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 19, 0), new ScheduledTask(19, 27, 0), new ScheduledTask(27, 32, 0), new ScheduledTask(32, 35, 0), new ScheduledTask(35, 45, 0), new ScheduledTask(45, 53, 0), new ScheduledTask(53, 57, 0), new ScheduledTask(57, 61, 0), new ScheduledTask(61, 68, 0)};
        int[] expectedProcessorEndTimes = new int[]{68};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 12, 0), new ScheduledTask(12, 19, 0), new ScheduledTask(19, 23, 0), new ScheduledTask(23, 27, 0), new ScheduledTask(27, 35, 0), new ScheduledTask(35, 38, 0), new ScheduledTask(38, 46, 0), new ScheduledTask(46, 52, 0), new ScheduledTask(52, 62, 0)};
        int[] expectedProcessorEndTimes = new int[]{62};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 12, 0), new ScheduledTask(12, 19, 0), new ScheduledTask(19, 23, 0), new ScheduledTask(23, 27, 0), new ScheduledTask(27, 35, 0), new ScheduledTask(35, 38, 0), new ScheduledTask(38, 46, 0), new ScheduledTask(46, 52, 0), new ScheduledTask(52, 62, 0)};
        int[] expectedProcessorEndTimes = new int[]{62};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 12, 0), new ScheduledTask(12, 19, 0), new ScheduledTask(19, 23, 0), new ScheduledTask(23, 27, 0), new ScheduledTask(27, 35, 0), new ScheduledTask(35, 38, 0), new ScheduledTask(38, 46, 0), new ScheduledTask(46, 52, 0), new ScheduledTask(52, 62, 0)};
        int[] expectedProcessorEndTimes = new int[]{62};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 12, 0), new ScheduledTask(12, 18, 0), new ScheduledTask(18, 20, 0), new ScheduledTask(20, 22, 0), new ScheduledTask(22, 32, 0), new ScheduledTask(32, 41, 0), new ScheduledTask(41, 49, 0), new ScheduledTask(49, 52, 0), new ScheduledTask(52, 62, 0)};
        int[] expectedProcessorEndTimes = new int[]{62};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 12, 0), new ScheduledTask(12, 18, 0), new ScheduledTask(18, 20, 0), new ScheduledTask(20, 22, 0), new ScheduledTask(22, 32, 0), new ScheduledTask(32, 41, 0), new ScheduledTask(41, 49, 0), new ScheduledTask(49, 52, 0), new ScheduledTask(52, 62, 0)};
        int[] expectedProcessorEndTimes = new int[]{62};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 12, 0), new ScheduledTask(12, 18, 0), new ScheduledTask(18, 20, 0), new ScheduledTask(20, 22, 0), new ScheduledTask(22, 32, 0), new ScheduledTask(32, 41, 0), new ScheduledTask(41, 49, 0), new ScheduledTask(49, 52, 0), new ScheduledTask(52, 62, 0)};
        int[] expectedProcessorEndTimes = new int[]{62};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 12, 0), new ScheduledTask(12, 18, 0), new ScheduledTask(18, 20, 0), new ScheduledTask(20, 22, 0), new ScheduledTask(22, 32, 0), new ScheduledTask(32, 41, 0), new ScheduledTask(41, 49, 0), new ScheduledTask(49, 52, 0), new ScheduledTask(52, 62, 0)};
        int[] expectedProcessorEndTimes = new int[]{62};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 6, 0), new ScheduledTask(6, 13, 0), new ScheduledTask(13, 17, 0), new ScheduledTask(17, 26, 0), new ScheduledTask(26, 35, 0), new ScheduledTask(35, 43, 0), new ScheduledTask(43, 51, 0), new ScheduledTask(51, 58, 0), new ScheduledTask(58, 64, 0)};
        int[] expectedProcessorEndTimes = new int[]{64};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 6, 0), new ScheduledTask(6, 13, 0), new ScheduledTask(13, 17, 0), new ScheduledTask(17, 26, 0), new ScheduledTask(26, 35, 0), new ScheduledTask(35, 43, 0), new ScheduledTask(43, 51, 0), new ScheduledTask(51, 58, 0), new ScheduledTask(58, 64, 0)};
        int[] expectedProcessorEndTimes = new int[]{64};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 6, 0), new ScheduledTask(6, 13, 0), new ScheduledTask(13, 17, 0), new ScheduledTask(17, 26, 0), new ScheduledTask(26, 35, 0), new ScheduledTask(35, 43, 0), new ScheduledTask(43, 51, 0), new ScheduledTask(51, 58, 0), new ScheduledTask(58, 64, 0)};
        int[] expectedProcessorEndTimes = new int[]{64};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot03_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.03_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 12, 0), new ScheduledTask(12, 19, 0), new ScheduledTask(19, 24, 0), new ScheduledTask(24, 30, 0), new ScheduledTask(30, 40, 0), new ScheduledTask(40, 47, 0), new ScheduledTask(47, 50, 0), new ScheduledTask(50, 59, 0), new ScheduledTask(59, 66, 0)};
        int[] expectedProcessorEndTimes = new int[]{66};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot03_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.03_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 12, 0), new ScheduledTask(12, 19, 0), new ScheduledTask(19, 24, 0), new ScheduledTask(24, 30, 0), new ScheduledTask(30, 40, 0), new ScheduledTask(40, 47, 0), new ScheduledTask(47, 50, 0), new ScheduledTask(50, 59, 0), new ScheduledTask(59, 66, 0)};
        int[] expectedProcessorEndTimes = new int[]{66};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot03_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.03_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 12, 0), new ScheduledTask(12, 19, 0), new ScheduledTask(19, 24, 0), new ScheduledTask(24, 30, 0), new ScheduledTask(30, 40, 0), new ScheduledTask(40, 47, 0), new ScheduledTask(47, 50, 0), new ScheduledTask(50, 59, 0), new ScheduledTask(59, 66, 0)};
        int[] expectedProcessorEndTimes = new int[]{66};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot04_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.04_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 8, 0), new ScheduledTask(8, 10, 0), new ScheduledTask(10, 15, 0), new ScheduledTask(15, 25, 0), new ScheduledTask(25, 29, 0), new ScheduledTask(29, 34, 0), new ScheduledTask(34, 41, 0), new ScheduledTask(41, 43, 0), new ScheduledTask(43, 53, 0)};
        int[] expectedProcessorEndTimes = new int[]{53};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot04_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.04_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 8, 0), new ScheduledTask(8, 10, 0), new ScheduledTask(10, 15, 0), new ScheduledTask(15, 25, 0), new ScheduledTask(25, 29, 0), new ScheduledTask(29, 34, 0), new ScheduledTask(34, 41, 0), new ScheduledTask(41, 43, 0), new ScheduledTask(43, 53, 0)};
        int[] expectedProcessorEndTimes = new int[]{53};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot04_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.04_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 8, 0), new ScheduledTask(8, 10, 0), new ScheduledTask(10, 15, 0), new ScheduledTask(15, 25, 0), new ScheduledTask(25, 29, 0), new ScheduledTask(29, 34, 0), new ScheduledTask(34, 41, 0), new ScheduledTask(41, 43, 0), new ScheduledTask(43, 53, 0)};
        int[] expectedProcessorEndTimes = new int[]{53};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 6, 0), new ScheduledTask(6, 15, 0), new ScheduledTask(15, 20, 0), new ScheduledTask(20, 30, 0), new ScheduledTask(30, 40, 0), new ScheduledTask(40, 44, 0), new ScheduledTask(44, 53, 0), new ScheduledTask(53, 56, 0), new ScheduledTask(56, 65, 0)};
        int[] expectedProcessorEndTimes = new int[]{65};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 6, 0), new ScheduledTask(6, 15, 0), new ScheduledTask(15, 20, 0), new ScheduledTask(20, 30, 0), new ScheduledTask(30, 40, 0), new ScheduledTask(40, 44, 0), new ScheduledTask(44, 53, 0), new ScheduledTask(53, 56, 0), new ScheduledTask(56, 65, 0)};
        int[] expectedProcessorEndTimes = new int[]{65};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 6, 0), new ScheduledTask(6, 15, 0), new ScheduledTask(15, 20, 0), new ScheduledTask(20, 30, 0), new ScheduledTask(30, 40, 0), new ScheduledTask(40, 44, 0), new ScheduledTask(44, 53, 0), new ScheduledTask(53, 56, 0), new ScheduledTask(56, 65, 0)};
        int[] expectedProcessorEndTimes = new int[]{65};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 11, 0), new ScheduledTask(11, 14, 0), new ScheduledTask(14, 16, 0), new ScheduledTask(16, 23, 0), new ScheduledTask(23, 31, 0), new ScheduledTask(31, 33, 0), new ScheduledTask(33, 43, 0), new ScheduledTask(43, 52, 0), new ScheduledTask(52, 58, 0)};
        int[] expectedProcessorEndTimes = new int[]{58};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 11, 0), new ScheduledTask(11, 14, 0), new ScheduledTask(14, 16, 0), new ScheduledTask(16, 23, 0), new ScheduledTask(23, 31, 0), new ScheduledTask(31, 33, 0), new ScheduledTask(33, 43, 0), new ScheduledTask(43, 52, 0), new ScheduledTask(52, 58, 0)};
        int[] expectedProcessorEndTimes = new int[]{58};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 11, 0), new ScheduledTask(11, 14, 0), new ScheduledTask(14, 16, 0), new ScheduledTask(16, 23, 0), new ScheduledTask(23, 31, 0), new ScheduledTask(31, 33, 0), new ScheduledTask(33, 43, 0), new ScheduledTask(43, 52, 0), new ScheduledTask(52, 58, 0)};
        int[] expectedProcessorEndTimes = new int[]{58};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 15, 0), new ScheduledTask(15, 22, 0), new ScheduledTask(22, 24, 0), new ScheduledTask(24, 30, 0), new ScheduledTask(30, 36, 0), new ScheduledTask(36, 44, 0), new ScheduledTask(44, 53, 0), new ScheduledTask(53, 60, 0), new ScheduledTask(60, 66, 0)};
        int[] expectedProcessorEndTimes = new int[]{66};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 15, 0), new ScheduledTask(15, 22, 0), new ScheduledTask(22, 24, 0), new ScheduledTask(24, 30, 0), new ScheduledTask(30, 36, 0), new ScheduledTask(36, 44, 0), new ScheduledTask(44, 53, 0), new ScheduledTask(53, 60, 0), new ScheduledTask(60, 66, 0)};
        int[] expectedProcessorEndTimes = new int[]{66};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 15, 0), new ScheduledTask(15, 22, 0), new ScheduledTask(22, 24, 0), new ScheduledTask(24, 30, 0), new ScheduledTask(30, 36, 0), new ScheduledTask(36, 44, 0), new ScheduledTask(44, 53, 0), new ScheduledTask(53, 60, 0), new ScheduledTask(60, 66, 0)};
        int[] expectedProcessorEndTimes = new int[]{66};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 476;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 136, 0), new ScheduledTask(136, 238, 0), new ScheduledTask(238, 340, 0), new ScheduledTask(245, 330, 1), new ScheduledTask(244, 278, 2), new ScheduledTask(143, 262, 3), new ScheduledTask(340, 442, 0), new ScheduledTask(141, 226, 4), new ScheduledTask(144, 195, 5), new ScheduledTask(442, 476, 0)};
        int[] expectedProcessorEndTimes = new int[]{476, 330, 278, 262, 226, 195};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 515;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 136, 0), new ScheduledTask(136, 238, 0), new ScheduledTask(277, 379, 1), new ScheduledTask(272, 357, 0), new ScheduledTask(238, 272, 0), new ScheduledTask(357, 476, 0), new ScheduledTask(379, 481, 1), new ScheduledTask(141, 226, 1), new ScheduledTask(226, 277, 1), new ScheduledTask(481, 515, 1)};
        int[] expectedProcessorEndTimes = new int[]{476, 515};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 476;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 136, 0), new ScheduledTask(136, 238, 0), new ScheduledTask(238, 340, 0), new ScheduledTask(245, 330, 1), new ScheduledTask(244, 278, 2), new ScheduledTask(143, 262, 3), new ScheduledTask(340, 442, 0), new ScheduledTask(262, 347, 3), new ScheduledTask(278, 329, 2), new ScheduledTask(442, 476, 0)};
        int[] expectedProcessorEndTimes = new int[]{476, 330, 329, 347};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 476;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 136, 0), new ScheduledTask(136, 238, 0), new ScheduledTask(238, 340, 0), new ScheduledTask(245, 330, 1), new ScheduledTask(244, 278, 2), new ScheduledTask(143, 262, 3), new ScheduledTask(340, 442, 0), new ScheduledTask(141, 226, 4), new ScheduledTask(144, 195, 5), new ScheduledTask(442, 476, 0)};
        int[] expectedProcessorEndTimes = new int[]{476, 330, 278, 262, 226, 195};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_0dot97_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_0.97_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 11, 0), new ScheduledTask(11, 18, 0), new ScheduledTask(24, 34, 1), new ScheduledTask(18, 26, 0), new ScheduledTask(23, 26, 2), new ScheduledTask(34, 43, 1), new ScheduledTask(16, 20, 3), new ScheduledTask(13, 17, 4), new ScheduledTask(43, 51, 1)};
        int[] expectedProcessorEndTimes = new int[]{26, 51, 26, 20, 17};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_0dot97_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_0.97_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 11, 0), new ScheduledTask(11, 18, 0), new ScheduledTask(24, 34, 1), new ScheduledTask(18, 26, 0), new ScheduledTask(26, 29, 0), new ScheduledTask(34, 43, 1), new ScheduledTask(29, 33, 0), new ScheduledTask(33, 37, 0), new ScheduledTask(43, 51, 1)};
        int[] expectedProcessorEndTimes = new int[]{37, 51};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_0dot97_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_0.97_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 11, 0), new ScheduledTask(11, 18, 0), new ScheduledTask(24, 34, 1), new ScheduledTask(18, 26, 0), new ScheduledTask(23, 26, 2), new ScheduledTask(34, 43, 1), new ScheduledTask(16, 20, 3), new ScheduledTask(26, 30, 0), new ScheduledTask(43, 51, 1)};
        int[] expectedProcessorEndTimes = new int[]{30, 51, 26, 20};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_0dot97_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_0.97_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 11, 0), new ScheduledTask(11, 18, 0), new ScheduledTask(24, 34, 1), new ScheduledTask(18, 26, 0), new ScheduledTask(23, 26, 2), new ScheduledTask(34, 43, 1), new ScheduledTask(16, 20, 3), new ScheduledTask(13, 17, 4), new ScheduledTask(43, 51, 1)};
        int[] expectedProcessorEndTimes = new int[]{26, 51, 26, 20, 17};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_10dot04_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_10.04_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 13, 0), new ScheduledTask(13, 22, 0), new ScheduledTask(22, 27, 0), new ScheduledTask(27, 32, 0), new ScheduledTask(32, 38, 0), new ScheduledTask(38, 41, 0), new ScheduledTask(41, 45, 0), new ScheduledTask(45, 48, 0), new ScheduledTask(48, 50, 0)};
        int[] expectedProcessorEndTimes = new int[]{50};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_10dot04_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_10.04_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 13, 0), new ScheduledTask(13, 22, 0), new ScheduledTask(22, 27, 0), new ScheduledTask(27, 32, 0), new ScheduledTask(32, 38, 0), new ScheduledTask(38, 41, 0), new ScheduledTask(41, 45, 0), new ScheduledTask(45, 48, 0), new ScheduledTask(48, 50, 0)};
        int[] expectedProcessorEndTimes = new int[]{50};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_10dot04_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_10.04_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 13, 0), new ScheduledTask(13, 22, 0), new ScheduledTask(22, 27, 0), new ScheduledTask(27, 32, 0), new ScheduledTask(32, 38, 0), new ScheduledTask(38, 41, 0), new ScheduledTask(41, 45, 0), new ScheduledTask(45, 48, 0), new ScheduledTask(48, 50, 0)};
        int[] expectedProcessorEndTimes = new int[]{50};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_10dot04_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_10.04_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 13, 0), new ScheduledTask(13, 22, 0), new ScheduledTask(22, 27, 0), new ScheduledTask(27, 32, 0), new ScheduledTask(32, 38, 0), new ScheduledTask(38, 41, 0), new ScheduledTask(41, 45, 0), new ScheduledTask(45, 48, 0), new ScheduledTask(48, 50, 0)};
        int[] expectedProcessorEndTimes = new int[]{50};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_2dot05_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_2.05_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 49;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 13, 0), new ScheduledTask(13, 20, 0), new ScheduledTask(27, 29, 0), new ScheduledTask(26, 30, 1), new ScheduledTask(29, 37, 0), new ScheduledTask(20, 27, 0), new ScheduledTask(26, 31, 2), new ScheduledTask(30, 34, 1), new ScheduledTask(42, 49, 0)};
        int[] expectedProcessorEndTimes = new int[]{49, 34, 31};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_2dot05_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_2.05_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 49;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 13, 0), new ScheduledTask(13, 20, 0), new ScheduledTask(32, 34, 0), new ScheduledTask(26, 30, 1), new ScheduledTask(34, 42, 0), new ScheduledTask(25, 32, 0), new ScheduledTask(20, 25, 0), new ScheduledTask(30, 34, 1), new ScheduledTask(42, 49, 0)};
        int[] expectedProcessorEndTimes = new int[]{49, 34};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_2dot05_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_2.05_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 49;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 13, 0), new ScheduledTask(13, 20, 0), new ScheduledTask(32, 34, 0), new ScheduledTask(26, 30, 1), new ScheduledTask(34, 42, 0), new ScheduledTask(25, 32, 0), new ScheduledTask(20, 25, 0), new ScheduledTask(30, 34, 1), new ScheduledTask(42, 49, 0)};
        int[] expectedProcessorEndTimes = new int[]{49, 34};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_2dot05_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_2.05_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 49;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 13, 0), new ScheduledTask(13, 20, 0), new ScheduledTask(32, 34, 0), new ScheduledTask(26, 30, 1), new ScheduledTask(34, 42, 0), new ScheduledTask(25, 32, 0), new ScheduledTask(20, 25, 0), new ScheduledTask(30, 34, 1), new ScheduledTask(42, 49, 0)};
        int[] expectedProcessorEndTimes = new int[]{49, 34};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 414;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 49, 0), new ScheduledTask(49, 118, 0), new ScheduledTask(122, 201, 1), new ScheduledTask(118, 167, 0), new ScheduledTask(280, 379, 1), new ScheduledTask(295, 384, 0), new ScheduledTask(201, 280, 1), new ScheduledTask(167, 236, 0), new ScheduledTask(236, 295, 0), new ScheduledTask(384, 414, 0)};
        int[] expectedProcessorEndTimes = new int[]{414, 379};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 296;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 49, 0), new ScheduledTask(49, 118, 0), new ScheduledTask(122, 201, 1), new ScheduledTask(122, 171, 2), new ScheduledTask(128, 227, 3), new ScheduledTask(171, 260, 2), new ScheduledTask(187, 266, 0), new ScheduledTask(118, 187, 0), new ScheduledTask(201, 260, 1), new ScheduledTask(266, 296, 0)};
        int[] expectedProcessorEndTimes = new int[]{296, 260, 260, 227};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 286;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 49, 0), new ScheduledTask(49, 118, 0), new ScheduledTask(118, 197, 0), new ScheduledTask(122, 171, 1), new ScheduledTask(128, 227, 2), new ScheduledTask(124, 213, 3), new ScheduledTask(171, 250, 1), new ScheduledTask(126, 195, 4), new ScheduledTask(197, 256, 0), new ScheduledTask(256, 286, 0)};
        int[] expectedProcessorEndTimes = new int[]{286, 250, 227, 213, 195};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 580;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 97, 0), new ScheduledTask(97, 119, 0), new ScheduledTask(119, 227, 0), new ScheduledTask(227, 335, 0), new ScheduledTask(338, 435, 1), new ScheduledTask(335, 389, 0), new ScheduledTask(389, 443, 0), new ScheduledTask(435, 467, 1), new ScheduledTask(443, 465, 0), new ScheduledTask(472, 580, 1)};
        int[] expectedProcessorEndTimes = new int[]{465, 580};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 541;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 97, 0), new ScheduledTask(97, 119, 0), new ScheduledTask(119, 227, 0), new ScheduledTask(227, 335, 0), new ScheduledTask(335, 432, 0), new ScheduledTask(338, 392, 1), new ScheduledTask(343, 397, 2), new ScheduledTask(392, 424, 1), new ScheduledTask(341, 363, 3), new ScheduledTask(433, 541, 0)};
        int[] expectedProcessorEndTimes = new int[]{541, 424, 397, 363};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 541;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 97, 0), new ScheduledTask(97, 119, 0), new ScheduledTask(119, 227, 0), new ScheduledTask(227, 335, 0), new ScheduledTask(335, 432, 0), new ScheduledTask(338, 392, 1), new ScheduledTask(343, 397, 2), new ScheduledTask(392, 424, 1), new ScheduledTask(341, 363, 3), new ScheduledTask(433, 541, 0)};
        int[] expectedProcessorEndTimes = new int[]{541, 424, 397, 363};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 493;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 79, 0), new ScheduledTask(82, 177, 1), new ScheduledTask(237, 379, 0), new ScheduledTask(158, 237, 0), new ScheduledTask(79, 158, 0), new ScheduledTask(224, 287, 1), new ScheduledTask(334, 381, 1), new ScheduledTask(177, 224, 1), new ScheduledTask(287, 334, 1), new ScheduledTask(382, 493, 1)};
        int[] expectedProcessorEndTimes = new int[]{379, 493};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 427;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 79, 0), new ScheduledTask(79, 174, 0), new ScheduledTask(174, 316, 0), new ScheduledTask(83, 162, 1), new ScheduledTask(89, 168, 2), new ScheduledTask(88, 151, 3), new ScheduledTask(151, 198, 3), new ScheduledTask(168, 215, 2), new ScheduledTask(162, 209, 1), new ScheduledTask(316, 427, 0)};
        int[] expectedProcessorEndTimes = new int[]{427, 209, 215, 198};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 427;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 79, 0), new ScheduledTask(79, 174, 0), new ScheduledTask(174, 316, 0), new ScheduledTask(83, 162, 1), new ScheduledTask(89, 168, 2), new ScheduledTask(88, 151, 3), new ScheduledTask(151, 198, 3), new ScheduledTask(168, 215, 2), new ScheduledTask(162, 209, 1), new ScheduledTask(316, 427, 0)};
        int[] expectedProcessorEndTimes = new int[]{427, 209, 215, 198};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 534;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 76, 0), new ScheduledTask(76, 198, 0), new ScheduledTask(82, 174, 1), new ScheduledTask(174, 281, 1), new ScheduledTask(198, 335, 0), new ScheduledTask(281, 388, 1), new ScheduledTask(335, 427, 0), new ScheduledTask(388, 449, 1), new ScheduledTask(427, 458, 0), new ScheduledTask(458, 534, 0)};
        int[] expectedProcessorEndTimes = new int[]{534, 449};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 381;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 76, 0), new ScheduledTask(76, 198, 0), new ScheduledTask(82, 174, 1), new ScheduledTask(81, 188, 2), new ScheduledTask(85, 222, 3), new ScheduledTask(198, 305, 0), new ScheduledTask(174, 266, 1), new ScheduledTask(188, 249, 2), new ScheduledTask(222, 253, 3), new ScheduledTask(305, 381, 0)};
        int[] expectedProcessorEndTimes = new int[]{381, 266, 249, 253};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 381;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 76, 0), new ScheduledTask(76, 198, 0), new ScheduledTask(82, 174, 1), new ScheduledTask(81, 188, 2), new ScheduledTask(85, 222, 3), new ScheduledTask(198, 305, 0), new ScheduledTask(174, 266, 1), new ScheduledTask(83, 144, 4), new ScheduledTask(188, 219, 2), new ScheduledTask(305, 381, 0)};
        int[] expectedProcessorEndTimes = new int[]{381, 266, 219, 222, 144};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 465;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 44, 0), new ScheduledTask(44, 143, 0), new ScheduledTask(143, 187, 0), new ScheduledTask(187, 209, 0), new ScheduledTask(211, 322, 1), new ScheduledTask(209, 275, 0), new ScheduledTask(275, 374, 0), new ScheduledTask(344, 377, 1), new ScheduledTask(322, 344, 1), new ScheduledTask(377, 465, 1)};
        int[] expectedProcessorEndTimes = new int[]{374, 465};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 430;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 44, 0), new ScheduledTask(44, 143, 0), new ScheduledTask(143, 187, 0), new ScheduledTask(187, 209, 0), new ScheduledTask(209, 320, 0), new ScheduledTask(219, 285, 1), new ScheduledTask(217, 316, 2), new ScheduledTask(285, 318, 1), new ScheduledTask(320, 342, 0), new ScheduledTask(342, 430, 0)};
        int[] expectedProcessorEndTimes = new int[]{430, 318, 316};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 430;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 44, 0), new ScheduledTask(44, 143, 0), new ScheduledTask(143, 187, 0), new ScheduledTask(187, 209, 0), new ScheduledTask(209, 320, 0), new ScheduledTask(219, 285, 1), new ScheduledTask(217, 316, 2), new ScheduledTask(285, 318, 1), new ScheduledTask(320, 342, 0), new ScheduledTask(342, 430, 0)};
        int[] expectedProcessorEndTimes = new int[]{430, 318, 316};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 463;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 77, 0), new ScheduledTask(77, 162, 0), new ScheduledTask(162, 239, 0), new ScheduledTask(239, 282, 0), new ScheduledTask(292, 377, 1), new ScheduledTask(282, 359, 0), new ScheduledTask(241, 292, 1), new ScheduledTask(359, 410, 0), new ScheduledTask(377, 411, 1), new ScheduledTask(412, 463, 1)};
        int[] expectedProcessorEndTimes = new int[]{410, 463};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 410;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 77, 0), new ScheduledTask(77, 162, 0), new ScheduledTask(162, 239, 0), new ScheduledTask(239, 282, 0), new ScheduledTask(243, 328, 1), new ScheduledTask(282, 359, 0), new ScheduledTask(241, 292, 2), new ScheduledTask(242, 293, 3), new ScheduledTask(292, 326, 2), new ScheduledTask(359, 410, 0)};
        int[] expectedProcessorEndTimes = new int[]{410, 328, 326, 293};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 410;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 77, 0), new ScheduledTask(77, 162, 0), new ScheduledTask(162, 239, 0), new ScheduledTask(239, 282, 0), new ScheduledTask(243, 328, 1), new ScheduledTask(282, 359, 0), new ScheduledTask(241, 292, 2), new ScheduledTask(242, 293, 3), new ScheduledTask(245, 279, 4), new ScheduledTask(359, 410, 0)};
        int[] expectedProcessorEndTimes = new int[]{410, 328, 292, 293, 279};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 471;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 58, 0), new ScheduledTask(58, 87, 0), new ScheduledTask(91, 164, 1), new ScheduledTask(193, 266, 1), new ScheduledTask(204, 262, 0), new ScheduledTask(87, 204, 0), new ScheduledTask(266, 383, 1), new ScheduledTask(262, 379, 0), new ScheduledTask(164, 193, 1), new ScheduledTask(383, 471, 1)};
        int[] expectedProcessorEndTimes = new int[]{379, 471};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 438;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 58, 0), new ScheduledTask(58, 87, 0), new ScheduledTask(87, 160, 0), new ScheduledTask(160, 233, 0), new ScheduledTask(168, 226, 1), new ScheduledTask(93, 210, 2), new ScheduledTask(233, 350, 0), new ScheduledTask(95, 212, 3), new ScheduledTask(210, 239, 2), new ScheduledTask(350, 438, 0)};
        int[] expectedProcessorEndTimes = new int[]{438, 226, 239, 212};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 438;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 58, 0), new ScheduledTask(58, 87, 0), new ScheduledTask(87, 160, 0), new ScheduledTask(160, 233, 0), new ScheduledTask(168, 226, 1), new ScheduledTask(93, 210, 2), new ScheduledTask(233, 350, 0), new ScheduledTask(95, 212, 3), new ScheduledTask(96, 125, 4), new ScheduledTask(350, 438, 0)};
        int[] expectedProcessorEndTimes = new int[]{438, 226, 210, 212, 125};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 406;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 95, 0), new ScheduledTask(95, 122, 0), new ScheduledTask(122, 190, 0), new ScheduledTask(157, 211, 1), new ScheduledTask(211, 279, 1), new ScheduledTask(190, 244, 0), new ScheduledTask(244, 379, 0), new ScheduledTask(279, 374, 1), new ScheduledTask(130, 157, 1), new ScheduledTask(379, 406, 0)};
        int[] expectedProcessorEndTimes = new int[]{406, 374};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 380;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 95, 0), new ScheduledTask(95, 122, 0), new ScheduledTask(122, 190, 0), new ScheduledTask(124, 178, 1), new ScheduledTask(190, 258, 0), new ScheduledTask(200, 254, 1), new ScheduledTask(180, 315, 2), new ScheduledTask(258, 353, 0), new ScheduledTask(130, 157, 3), new ScheduledTask(353, 380, 0)};
        int[] expectedProcessorEndTimes = new int[]{380, 254, 315, 157};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 380;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 95, 0), new ScheduledTask(95, 122, 0), new ScheduledTask(122, 190, 0), new ScheduledTask(124, 178, 1), new ScheduledTask(190, 258, 0), new ScheduledTask(200, 254, 1), new ScheduledTask(180, 315, 2), new ScheduledTask(258, 353, 0), new ScheduledTask(130, 157, 3), new ScheduledTask(353, 380, 0)};
        int[] expectedProcessorEndTimes = new int[]{380, 254, 315, 157};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 410;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 68, 0), new ScheduledTask(68, 124, 0), new ScheduledTask(105, 218, 1), new ScheduledTask(169, 270, 0), new ScheduledTask(124, 169, 0), new ScheduledTask(274, 387, 1), new ScheduledTask(270, 383, 0), new ScheduledTask(218, 274, 1), new ScheduledTask(71, 105, 1), new ScheduledTask(387, 410, 1)};
        int[] expectedProcessorEndTimes = new int[]{383, 410};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 361;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 68, 0), new ScheduledTask(68, 124, 0), new ScheduledTask(73, 186, 1), new ScheduledTask(124, 225, 0), new ScheduledTask(126, 171, 2), new ScheduledTask(186, 299, 1), new ScheduledTask(225, 338, 0), new ScheduledTask(77, 133, 3), new ScheduledTask(133, 167, 3), new ScheduledTask(338, 361, 0)};
        int[] expectedProcessorEndTimes = new int[]{361, 299, 171, 167};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 361;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 68, 0), new ScheduledTask(68, 124, 0), new ScheduledTask(73, 186, 1), new ScheduledTask(124, 225, 0), new ScheduledTask(126, 171, 2), new ScheduledTask(186, 299, 1), new ScheduledTask(225, 338, 0), new ScheduledTask(77, 133, 3), new ScheduledTask(71, 105, 4), new ScheduledTask(338, 361, 0)};
        int[] expectedProcessorEndTimes = new int[]{361, 299, 171, 133, 105};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 467;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 96, 0), new ScheduledTask(96, 256, 0), new ScheduledTask(259, 371, 1), new ScheduledTask(256, 320, 0), new ScheduledTask(259, 355, 2), new ScheduledTask(320, 416, 0), new ScheduledTask(265, 345, 3), new ScheduledTask(266, 314, 4), new ScheduledTask(371, 419, 1), new ScheduledTask(419, 467, 1)};
        int[] expectedProcessorEndTimes = new int[]{416, 467, 355, 345, 314};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 579;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 96, 0), new ScheduledTask(96, 256, 0), new ScheduledTask(320, 432, 0), new ScheduledTask(256, 320, 0), new ScheduledTask(259, 355, 1), new ScheduledTask(432, 528, 0), new ScheduledTask(403, 483, 1), new ScheduledTask(355, 403, 1), new ScheduledTask(483, 531, 1), new ScheduledTask(531, 579, 1)};
        int[] expectedProcessorEndTimes = new int[]{528, 579};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 467;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 96, 0), new ScheduledTask(96, 256, 0), new ScheduledTask(259, 371, 1), new ScheduledTask(256, 320, 0), new ScheduledTask(314, 410, 2), new ScheduledTask(320, 416, 0), new ScheduledTask(265, 345, 3), new ScheduledTask(266, 314, 2), new ScheduledTask(371, 419, 1), new ScheduledTask(419, 467, 1)};
        int[] expectedProcessorEndTimes = new int[]{416, 467, 410, 345};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 467;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 96, 0), new ScheduledTask(96, 256, 0), new ScheduledTask(259, 371, 1), new ScheduledTask(256, 320, 0), new ScheduledTask(259, 355, 2), new ScheduledTask(320, 416, 0), new ScheduledTask(265, 345, 3), new ScheduledTask(266, 314, 4), new ScheduledTask(371, 419, 1), new ScheduledTask(419, 467, 1)};
        int[] expectedProcessorEndTimes = new int[]{416, 467, 355, 345, 314};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 355;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 20, 0), new ScheduledTask(23, 114, 1), new ScheduledTask(114, 205, 1), new ScheduledTask(162, 233, 0), new ScheduledTask(81, 162, 0), new ScheduledTask(20, 81, 0), new ScheduledTask(233, 304, 0), new ScheduledTask(246, 297, 1), new ScheduledTask(205, 246, 1), new ScheduledTask(304, 355, 0)};
        int[] expectedProcessorEndTimes = new int[]{355, 297};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 324;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 20, 0), new ScheduledTask(20, 111, 0), new ScheduledTask(111, 202, 0), new ScheduledTask(116, 187, 1), new ScheduledTask(26, 107, 2), new ScheduledTask(28, 89, 3), new ScheduledTask(202, 273, 0), new ScheduledTask(107, 158, 2), new ScheduledTask(89, 130, 3), new ScheduledTask(273, 324, 0)};
        int[] expectedProcessorEndTimes = new int[]{324, 187, 158, 130};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 324;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 20, 0), new ScheduledTask(20, 111, 0), new ScheduledTask(111, 202, 0), new ScheduledTask(116, 187, 1), new ScheduledTask(26, 107, 2), new ScheduledTask(28, 89, 3), new ScheduledTask(202, 273, 0), new ScheduledTask(107, 158, 2), new ScheduledTask(89, 130, 3), new ScheduledTask(273, 324, 0)};
        int[] expectedProcessorEndTimes = new int[]{324, 187, 158, 130};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot97_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.97_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 20, 0), new ScheduledTask(20, 24, 0), new ScheduledTask(24, 33, 0), new ScheduledTask(33, 37, 0), new ScheduledTask(37, 40, 0), new ScheduledTask(28, 38, 1), new ScheduledTask(40, 48, 0), new ScheduledTask(38, 46, 1), new ScheduledTask(48, 55, 0)};
        int[] expectedProcessorEndTimes = new int[]{55, 46};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot97_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.97_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 20, 0), new ScheduledTask(20, 24, 0), new ScheduledTask(24, 33, 0), new ScheduledTask(33, 37, 0), new ScheduledTask(37, 40, 0), new ScheduledTask(28, 38, 1), new ScheduledTask(40, 48, 0), new ScheduledTask(34, 42, 2), new ScheduledTask(48, 55, 0)};
        int[] expectedProcessorEndTimes = new int[]{55, 38, 42};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot97_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.97_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 20, 0), new ScheduledTask(20, 24, 0), new ScheduledTask(24, 33, 0), new ScheduledTask(33, 37, 0), new ScheduledTask(37, 40, 0), new ScheduledTask(28, 38, 1), new ScheduledTask(40, 48, 0), new ScheduledTask(34, 42, 2), new ScheduledTask(48, 55, 0)};
        int[] expectedProcessorEndTimes = new int[]{55, 38, 42};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 41;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(11, 15, 1), new ScheduledTask(25, 30, 1), new ScheduledTask(15, 23, 0), new ScheduledTask(9, 15, 0), new ScheduledTask(15, 25, 1), new ScheduledTask(30, 36, 1), new ScheduledTask(27, 34, 0), new ScheduledTask(23, 27, 0), new ScheduledTask(36, 41, 1)};
        int[] expectedProcessorEndTimes = new int[]{34, 41};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(11, 15, 1), new ScheduledTask(18, 23, 2), new ScheduledTask(15, 23, 0), new ScheduledTask(9, 15, 0), new ScheduledTask(15, 25, 1), new ScheduledTask(23, 29, 2), new ScheduledTask(18, 25, 3), new ScheduledTask(23, 27, 0), new ScheduledTask(30, 35, 2)};
        int[] expectedProcessorEndTimes = new int[]{27, 25, 35, 25};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(11, 15, 1), new ScheduledTask(18, 23, 2), new ScheduledTask(15, 23, 0), new ScheduledTask(9, 15, 0), new ScheduledTask(15, 25, 1), new ScheduledTask(23, 29, 2), new ScheduledTask(18, 25, 3), new ScheduledTask(23, 27, 0), new ScheduledTask(30, 35, 2)};
        int[] expectedProcessorEndTimes = new int[]{27, 25, 35, 25};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 11, 0), new ScheduledTask(11, 22, 0), new ScheduledTask(22, 34, 0), new ScheduledTask(34, 46, 0), new ScheduledTask(32, 43, 1), new ScheduledTask(20, 26, 1), new ScheduledTask(15, 19, 1), new ScheduledTask(47, 49, 0), new ScheduledTask(49, 56, 0)};
        int[] expectedProcessorEndTimes = new int[]{56, 43};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 11, 0), new ScheduledTask(11, 22, 0), new ScheduledTask(22, 34, 0), new ScheduledTask(29, 41, 1), new ScheduledTask(32, 43, 2), new ScheduledTask(20, 26, 3), new ScheduledTask(26, 30, 3), new ScheduledTask(47, 49, 1), new ScheduledTask(49, 56, 1)};
        int[] expectedProcessorEndTimes = new int[]{34, 56, 43, 30};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 11, 0), new ScheduledTask(11, 22, 0), new ScheduledTask(22, 34, 0), new ScheduledTask(29, 41, 1), new ScheduledTask(32, 43, 2), new ScheduledTask(20, 26, 3), new ScheduledTask(15, 19, 4), new ScheduledTask(47, 49, 1), new ScheduledTask(49, 56, 1)};
        int[] expectedProcessorEndTimes = new int[]{34, 56, 43, 26, 19};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 18, 0), new ScheduledTask(18, 30, 0), new ScheduledTask(30, 36, 0), new ScheduledTask(36, 48, 0), new ScheduledTask(51, 58, 1), new ScheduledTask(46, 50, 1), new ScheduledTask(48, 54, 0), new ScheduledTask(42, 46, 1), new ScheduledTask(58, 72, 1)};
        int[] expectedProcessorEndTimes = new int[]{54, 72};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 18, 0), new ScheduledTask(18, 30, 0), new ScheduledTask(30, 36, 0), new ScheduledTask(36, 48, 0), new ScheduledTask(48, 55, 0), new ScheduledTask(46, 50, 1), new ScheduledTask(46, 52, 2), new ScheduledTask(42, 46, 3), new ScheduledTask(57, 71, 0)};
        int[] expectedProcessorEndTimes = new int[]{71, 50, 52, 46};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 18, 0), new ScheduledTask(18, 30, 0), new ScheduledTask(30, 36, 0), new ScheduledTask(36, 48, 0), new ScheduledTask(48, 55, 0), new ScheduledTask(46, 50, 1), new ScheduledTask(46, 52, 2), new ScheduledTask(42, 46, 3), new ScheduledTask(57, 71, 0)};
        int[] expectedProcessorEndTimes = new int[]{71, 50, 52, 46};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 16, 0), new ScheduledTask(16, 21, 0), new ScheduledTask(23, 26, 1), new ScheduledTask(21, 27, 0), new ScheduledTask(29, 39, 1), new ScheduledTask(26, 29, 1), new ScheduledTask(27, 37, 0), new ScheduledTask(18, 23, 1), new ScheduledTask(39, 45, 1)};
        int[] expectedProcessorEndTimes = new int[]{37, 45};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 43;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 16, 0), new ScheduledTask(16, 21, 0), new ScheduledTask(21, 24, 1), new ScheduledTask(19, 25, 2), new ScheduledTask(21, 31, 0), new ScheduledTask(33, 36, 0), new ScheduledTask(25, 35, 2), new ScheduledTask(18, 23, 3), new ScheduledTask(37, 43, 0)};
        int[] expectedProcessorEndTimes = new int[]{43, 24, 35, 23};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 43;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 16, 0), new ScheduledTask(16, 21, 0), new ScheduledTask(21, 24, 1), new ScheduledTask(19, 25, 2), new ScheduledTask(21, 31, 0), new ScheduledTask(24, 27, 1), new ScheduledTask(25, 35, 2), new ScheduledTask(27, 32, 1), new ScheduledTask(37, 43, 0)};
        int[] expectedProcessorEndTimes = new int[]{43, 32, 35};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 15, 0), new ScheduledTask(15, 24, 0), new ScheduledTask(21, 30, 1), new ScheduledTask(11, 21, 2), new ScheduledTask(20, 23, 3), new ScheduledTask(13, 25, 4), new ScheduledTask(14, 20, 5), new ScheduledTask(30, 34, 1), new ScheduledTask(34, 37, 1)};
        int[] expectedProcessorEndTimes = new int[]{24, 37, 21, 23, 25, 20};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 15, 0), new ScheduledTask(15, 24, 0), new ScheduledTask(24, 33, 0), new ScheduledTask(11, 21, 1), new ScheduledTask(21, 24, 1), new ScheduledTask(30, 42, 1), new ScheduledTask(24, 30, 1), new ScheduledTask(33, 37, 0), new ScheduledTask(42, 45, 1)};
        int[] expectedProcessorEndTimes = new int[]{37, 45};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 15, 0), new ScheduledTask(15, 24, 0), new ScheduledTask(21, 30, 1), new ScheduledTask(11, 21, 2), new ScheduledTask(21, 24, 2), new ScheduledTask(13, 25, 3), new ScheduledTask(14, 20, 1), new ScheduledTask(30, 34, 1), new ScheduledTask(34, 37, 1)};
        int[] expectedProcessorEndTimes = new int[]{24, 37, 24, 25};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 15, 0), new ScheduledTask(15, 24, 0), new ScheduledTask(21, 30, 1), new ScheduledTask(11, 21, 2), new ScheduledTask(20, 23, 3), new ScheduledTask(13, 25, 4), new ScheduledTask(14, 20, 5), new ScheduledTask(30, 34, 1), new ScheduledTask(34, 37, 1)};
        int[] expectedProcessorEndTimes = new int[]{24, 37, 21, 23, 25, 20};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(14, 17, 0), new ScheduledTask(17, 29, 0), new ScheduledTask(29, 35, 0), new ScheduledTask(9, 22, 1), new ScheduledTask(28, 42, 1), new ScheduledTask(4, 14, 0), new ScheduledTask(22, 28, 1), new ScheduledTask(35, 39, 0), new ScheduledTask(42, 54, 1)};
        int[] expectedProcessorEndTimes = new int[]{39, 54};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 41;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 7, 0), new ScheduledTask(7, 19, 0), new ScheduledTask(19, 25, 0), new ScheduledTask(9, 22, 1), new ScheduledTask(12, 26, 2), new ScheduledTask(8, 18, 3), new ScheduledTask(18, 24, 3), new ScheduledTask(25, 29, 0), new ScheduledTask(29, 41, 0)};
        int[] expectedProcessorEndTimes = new int[]{41, 22, 26, 24};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 41;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 7, 0), new ScheduledTask(7, 19, 0), new ScheduledTask(19, 25, 0), new ScheduledTask(9, 22, 1), new ScheduledTask(12, 26, 2), new ScheduledTask(8, 18, 3), new ScheduledTask(9, 15, 4), new ScheduledTask(25, 29, 0), new ScheduledTask(29, 41, 0)};
        int[] expectedProcessorEndTimes = new int[]{41, 22, 26, 18, 15};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 49;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(16, 22, 1), new ScheduledTask(19, 27, 0), new ScheduledTask(8, 19, 0), new ScheduledTask(11, 16, 1), new ScheduledTask(22, 33, 1), new ScheduledTask(30, 39, 0), new ScheduledTask(27, 30, 0), new ScheduledTask(33, 38, 1), new ScheduledTask(40, 49, 0)};
        int[] expectedProcessorEndTimes = new int[]{49, 38};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 43;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 14, 0), new ScheduledTask(11, 19, 1), new ScheduledTask(17, 28, 2), new ScheduledTask(11, 16, 3), new ScheduledTask(14, 25, 0), new ScheduledTask(19, 28, 1), new ScheduledTask(16, 19, 3), new ScheduledTask(28, 33, 2), new ScheduledTask(34, 43, 2)};
        int[] expectedProcessorEndTimes = new int[]{25, 28, 43, 19};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 43;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 14, 0), new ScheduledTask(11, 19, 1), new ScheduledTask(17, 28, 2), new ScheduledTask(11, 16, 3), new ScheduledTask(14, 25, 0), new ScheduledTask(19, 28, 1), new ScheduledTask(16, 19, 3), new ScheduledTask(28, 33, 2), new ScheduledTask(34, 43, 2)};
        int[] expectedProcessorEndTimes = new int[]{25, 28, 43, 19};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 14, 0), new ScheduledTask(12, 19, 1), new ScheduledTask(16, 25, 0), new ScheduledTask(19, 30, 1), new ScheduledTask(14, 16, 0), new ScheduledTask(33, 44, 0), new ScheduledTask(30, 41, 1), new ScheduledTask(25, 33, 0), new ScheduledTask(44, 47, 0)};
        int[] expectedProcessorEndTimes = new int[]{47, 41};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 44;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 14, 0), new ScheduledTask(12, 19, 1), new ScheduledTask(16, 25, 0), new ScheduledTask(17, 28, 2), new ScheduledTask(14, 16, 0), new ScheduledTask(19, 30, 1), new ScheduledTask(30, 41, 2), new ScheduledTask(16, 24, 3), new ScheduledTask(41, 44, 2)};
        int[] expectedProcessorEndTimes = new int[]{25, 30, 44, 24};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 44;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 14, 0), new ScheduledTask(12, 19, 1), new ScheduledTask(16, 25, 0), new ScheduledTask(17, 28, 2), new ScheduledTask(14, 16, 0), new ScheduledTask(19, 30, 1), new ScheduledTask(30, 41, 2), new ScheduledTask(16, 24, 3), new ScheduledTask(41, 44, 2)};
        int[] expectedProcessorEndTimes = new int[]{25, 30, 44, 24};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 15, 0), new ScheduledTask(15, 23, 0), new ScheduledTask(23, 38, 0), new ScheduledTask(39, 47, 1), new ScheduledTask(38, 46, 0), new ScheduledTask(22, 39, 1), new ScheduledTask(48, 58, 1), new ScheduledTask(46, 49, 0), new ScheduledTask(49, 52, 0), new ScheduledTask(58, 66, 1)};
        int[] expectedProcessorEndTimes = new int[]{52, 66};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 15, 0), new ScheduledTask(15, 23, 0), new ScheduledTask(23, 38, 0), new ScheduledTask(32, 40, 1), new ScheduledTask(31, 39, 2), new ScheduledTask(22, 39, 3), new ScheduledTask(44, 54, 1), new ScheduledTask(38, 41, 0), new ScheduledTask(39, 42, 2), new ScheduledTask(54, 62, 1)};
        int[] expectedProcessorEndTimes = new int[]{41, 62, 42, 39};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 15, 0), new ScheduledTask(15, 23, 0), new ScheduledTask(23, 38, 0), new ScheduledTask(32, 40, 1), new ScheduledTask(31, 39, 2), new ScheduledTask(22, 39, 3), new ScheduledTask(44, 54, 1), new ScheduledTask(23, 26, 4), new ScheduledTask(22, 25, 5), new ScheduledTask(54, 62, 1)};
        int[] expectedProcessorEndTimes = new int[]{38, 62, 39, 39, 26, 25};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot03_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.03_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 49;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 19, 0), new ScheduledTask(19, 23, 0), new ScheduledTask(23, 33, 0), new ScheduledTask(33, 35, 0), new ScheduledTask(29, 34, 1), new ScheduledTask(35, 42, 0), new ScheduledTask(24, 29, 1), new ScheduledTask(34, 36, 1), new ScheduledTask(42, 49, 0)};
        int[] expectedProcessorEndTimes = new int[]{49, 36};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot03_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.03_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 49;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 19, 0), new ScheduledTask(19, 23, 0), new ScheduledTask(23, 33, 0), new ScheduledTask(33, 35, 0), new ScheduledTask(23, 28, 1), new ScheduledTask(35, 42, 0), new ScheduledTask(24, 29, 2), new ScheduledTask(33, 35, 3), new ScheduledTask(42, 49, 0)};
        int[] expectedProcessorEndTimes = new int[]{49, 28, 29, 35};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot03_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.03_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 49;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 19, 0), new ScheduledTask(19, 23, 0), new ScheduledTask(23, 33, 0), new ScheduledTask(33, 35, 0), new ScheduledTask(23, 28, 1), new ScheduledTask(35, 42, 0), new ScheduledTask(24, 29, 2), new ScheduledTask(33, 35, 3), new ScheduledTask(42, 49, 0)};
        int[] expectedProcessorEndTimes = new int[]{49, 28, 29, 35};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot99_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.99_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 13, 0), new ScheduledTask(13, 20, 0), new ScheduledTask(35, 43, 0), new ScheduledTask(30, 35, 0), new ScheduledTask(20, 30, 0), new ScheduledTask(27, 32, 1), new ScheduledTask(43, 49, 0), new ScheduledTask(28, 33, 2), new ScheduledTask(49, 57, 0)};
        int[] expectedProcessorEndTimes = new int[]{57, 32, 33};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot99_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.99_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 13, 0), new ScheduledTask(13, 20, 0), new ScheduledTask(35, 43, 0), new ScheduledTask(30, 35, 0), new ScheduledTask(20, 30, 0), new ScheduledTask(27, 32, 1), new ScheduledTask(43, 49, 0), new ScheduledTask(32, 37, 1), new ScheduledTask(49, 57, 0)};
        int[] expectedProcessorEndTimes = new int[]{57, 37};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot99_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.99_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 13, 0), new ScheduledTask(13, 20, 0), new ScheduledTask(35, 43, 0), new ScheduledTask(30, 35, 0), new ScheduledTask(20, 30, 0), new ScheduledTask(27, 32, 1), new ScheduledTask(43, 49, 0), new ScheduledTask(28, 33, 2), new ScheduledTask(49, 57, 0)};
        int[] expectedProcessorEndTimes = new int[]{57, 32, 33};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot99_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.99_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 13, 0), new ScheduledTask(13, 20, 0), new ScheduledTask(35, 43, 0), new ScheduledTask(30, 35, 0), new ScheduledTask(20, 30, 0), new ScheduledTask(27, 32, 1), new ScheduledTask(43, 49, 0), new ScheduledTask(28, 33, 2), new ScheduledTask(49, 57, 0)};
        int[] expectedProcessorEndTimes = new int[]{57, 32, 33};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 14, 0), new ScheduledTask(14, 20, 0), new ScheduledTask(20, 27, 0), new ScheduledTask(27, 37, 0), new ScheduledTask(37, 39, 0), new ScheduledTask(39, 48, 0), new ScheduledTask(48, 58, 0), new ScheduledTask(58, 63, 0), new ScheduledTask(63, 65, 0)};
        int[] expectedProcessorEndTimes = new int[]{65};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 14, 0), new ScheduledTask(14, 20, 0), new ScheduledTask(20, 27, 0), new ScheduledTask(27, 37, 0), new ScheduledTask(37, 39, 0), new ScheduledTask(39, 48, 0), new ScheduledTask(48, 58, 0), new ScheduledTask(58, 63, 0), new ScheduledTask(63, 65, 0)};
        int[] expectedProcessorEndTimes = new int[]{65};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 14, 0), new ScheduledTask(14, 20, 0), new ScheduledTask(20, 27, 0), new ScheduledTask(27, 37, 0), new ScheduledTask(37, 39, 0), new ScheduledTask(39, 48, 0), new ScheduledTask(48, 58, 0), new ScheduledTask(58, 63, 0), new ScheduledTask(63, 65, 0)};
        int[] expectedProcessorEndTimes = new int[]{65};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 7, 0), new ScheduledTask(7, 15, 0), new ScheduledTask(15, 18, 0), new ScheduledTask(18, 27, 0), new ScheduledTask(27, 32, 0), new ScheduledTask(32, 42, 0), new ScheduledTask(42, 50, 0), new ScheduledTask(50, 60, 0), new ScheduledTask(60, 63, 0)};
        int[] expectedProcessorEndTimes = new int[]{63};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 7, 0), new ScheduledTask(7, 15, 0), new ScheduledTask(15, 18, 0), new ScheduledTask(18, 27, 0), new ScheduledTask(27, 32, 0), new ScheduledTask(32, 42, 0), new ScheduledTask(42, 50, 0), new ScheduledTask(50, 60, 0), new ScheduledTask(60, 63, 0)};
        int[] expectedProcessorEndTimes = new int[]{63};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 7, 0), new ScheduledTask(7, 15, 0), new ScheduledTask(15, 18, 0), new ScheduledTask(18, 27, 0), new ScheduledTask(27, 32, 0), new ScheduledTask(32, 42, 0), new ScheduledTask(42, 50, 0), new ScheduledTask(50, 60, 0), new ScheduledTask(60, 63, 0)};
        int[] expectedProcessorEndTimes = new int[]{63};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 13, 0), new ScheduledTask(13, 19, 0), new ScheduledTask(19, 25, 0), new ScheduledTask(25, 29, 0), new ScheduledTask(29, 37, 0), new ScheduledTask(37, 42, 0), new ScheduledTask(42, 49, 0), new ScheduledTask(49, 54, 0), new ScheduledTask(54, 57, 0)};
        int[] expectedProcessorEndTimes = new int[]{57};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 13, 0), new ScheduledTask(13, 19, 0), new ScheduledTask(19, 25, 0), new ScheduledTask(25, 29, 0), new ScheduledTask(29, 37, 0), new ScheduledTask(37, 42, 0), new ScheduledTask(42, 49, 0), new ScheduledTask(49, 54, 0), new ScheduledTask(54, 57, 0)};
        int[] expectedProcessorEndTimes = new int[]{57};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 13, 0), new ScheduledTask(13, 19, 0), new ScheduledTask(19, 25, 0), new ScheduledTask(25, 29, 0), new ScheduledTask(29, 37, 0), new ScheduledTask(37, 42, 0), new ScheduledTask(42, 49, 0), new ScheduledTask(49, 54, 0), new ScheduledTask(54, 57, 0)};
        int[] expectedProcessorEndTimes = new int[]{57};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 18, 0), new ScheduledTask(18, 24, 0), new ScheduledTask(24, 30, 0), new ScheduledTask(30, 34, 0), new ScheduledTask(34, 40, 0), new ScheduledTask(40, 45, 0), new ScheduledTask(45, 53, 0), new ScheduledTask(53, 61, 0), new ScheduledTask(61, 70, 0)};
        int[] expectedProcessorEndTimes = new int[]{70};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 18, 0), new ScheduledTask(18, 24, 0), new ScheduledTask(24, 30, 0), new ScheduledTask(30, 34, 0), new ScheduledTask(34, 40, 0), new ScheduledTask(40, 45, 0), new ScheduledTask(45, 53, 0), new ScheduledTask(53, 61, 0), new ScheduledTask(61, 70, 0)};
        int[] expectedProcessorEndTimes = new int[]{70};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 18, 0), new ScheduledTask(18, 24, 0), new ScheduledTask(24, 30, 0), new ScheduledTask(30, 34, 0), new ScheduledTask(34, 40, 0), new ScheduledTask(40, 45, 0), new ScheduledTask(45, 53, 0), new ScheduledTask(53, 61, 0), new ScheduledTask(61, 70, 0)};
        int[] expectedProcessorEndTimes = new int[]{70};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_10dot03_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_10.03_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 4, 0), new ScheduledTask(4, 11, 0), new ScheduledTask(11, 18, 0), new ScheduledTask(18, 26, 0), new ScheduledTask(26, 33, 0), new ScheduledTask(33, 42, 0), new ScheduledTask(42, 49, 0), new ScheduledTask(49, 55, 0), new ScheduledTask(55, 64, 0)};
        int[] expectedProcessorEndTimes = new int[]{64};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_10dot03_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_10.03_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 4, 0), new ScheduledTask(4, 11, 0), new ScheduledTask(11, 18, 0), new ScheduledTask(18, 26, 0), new ScheduledTask(26, 33, 0), new ScheduledTask(33, 42, 0), new ScheduledTask(42, 49, 0), new ScheduledTask(49, 55, 0), new ScheduledTask(55, 64, 0)};
        int[] expectedProcessorEndTimes = new int[]{64};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_10dot03_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_10.03_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 4, 0), new ScheduledTask(4, 11, 0), new ScheduledTask(11, 18, 0), new ScheduledTask(18, 26, 0), new ScheduledTask(26, 33, 0), new ScheduledTask(33, 42, 0), new ScheduledTask(42, 49, 0), new ScheduledTask(49, 55, 0), new ScheduledTask(55, 64, 0)};
        int[] expectedProcessorEndTimes = new int[]{64};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot94_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.94_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 9, 0), new ScheduledTask(9, 11, 0), new ScheduledTask(11, 16, 0), new ScheduledTask(16, 22, 0), new ScheduledTask(22, 32, 0), new ScheduledTask(32, 34, 0), new ScheduledTask(34, 37, 0), new ScheduledTask(37, 40, 0), new ScheduledTask(40, 50, 0)};
        int[] expectedProcessorEndTimes = new int[]{50};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot94_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.94_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 9, 0), new ScheduledTask(9, 11, 0), new ScheduledTask(11, 16, 0), new ScheduledTask(16, 22, 0), new ScheduledTask(22, 32, 0), new ScheduledTask(32, 34, 0), new ScheduledTask(34, 37, 0), new ScheduledTask(37, 40, 0), new ScheduledTask(40, 50, 0)};
        int[] expectedProcessorEndTimes = new int[]{50};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot94_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.94_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 9, 0), new ScheduledTask(9, 11, 0), new ScheduledTask(11, 16, 0), new ScheduledTask(16, 22, 0), new ScheduledTask(22, 32, 0), new ScheduledTask(32, 34, 0), new ScheduledTask(34, 37, 0), new ScheduledTask(37, 40, 0), new ScheduledTask(40, 50, 0)};
        int[] expectedProcessorEndTimes = new int[]{50};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot97_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.97_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 11, 0), new ScheduledTask(11, 17, 0), new ScheduledTask(17, 26, 0), new ScheduledTask(26, 33, 0), new ScheduledTask(33, 40, 0), new ScheduledTask(40, 46, 0), new ScheduledTask(46, 51, 0), new ScheduledTask(51, 53, 0), new ScheduledTask(53, 59, 0)};
        int[] expectedProcessorEndTimes = new int[]{59};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot97_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.97_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 11, 0), new ScheduledTask(11, 17, 0), new ScheduledTask(17, 26, 0), new ScheduledTask(26, 33, 0), new ScheduledTask(33, 40, 0), new ScheduledTask(40, 46, 0), new ScheduledTask(46, 51, 0), new ScheduledTask(51, 53, 0), new ScheduledTask(53, 59, 0)};
        int[] expectedProcessorEndTimes = new int[]{59};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot97_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.97_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 11, 0), new ScheduledTask(11, 17, 0), new ScheduledTask(17, 26, 0), new ScheduledTask(26, 33, 0), new ScheduledTask(33, 40, 0), new ScheduledTask(40, 46, 0), new ScheduledTask(46, 51, 0), new ScheduledTask(51, 53, 0), new ScheduledTask(53, 59, 0)};
        int[] expectedProcessorEndTimes = new int[]{59};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot97_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.97_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 11, 0), new ScheduledTask(11, 17, 0), new ScheduledTask(17, 26, 0), new ScheduledTask(26, 33, 0), new ScheduledTask(33, 40, 0), new ScheduledTask(40, 46, 0), new ScheduledTask(46, 51, 0), new ScheduledTask(51, 53, 0), new ScheduledTask(53, 59, 0)};
        int[] expectedProcessorEndTimes = new int[]{59};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot98_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.98_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 14, 0), new ScheduledTask(14, 20, 0), new ScheduledTask(20, 26, 0), new ScheduledTask(26, 28, 0), new ScheduledTask(28, 37, 0), new ScheduledTask(37, 47, 0), new ScheduledTask(47, 57, 0), new ScheduledTask(57, 59, 0), new ScheduledTask(59, 66, 0)};
        int[] expectedProcessorEndTimes = new int[]{66};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot98_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.98_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 14, 0), new ScheduledTask(14, 20, 0), new ScheduledTask(20, 26, 0), new ScheduledTask(26, 28, 0), new ScheduledTask(28, 37, 0), new ScheduledTask(37, 47, 0), new ScheduledTask(47, 57, 0), new ScheduledTask(57, 59, 0), new ScheduledTask(59, 66, 0)};
        int[] expectedProcessorEndTimes = new int[]{66};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot98_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.98_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 14, 0), new ScheduledTask(14, 20, 0), new ScheduledTask(20, 26, 0), new ScheduledTask(26, 28, 0), new ScheduledTask(28, 37, 0), new ScheduledTask(37, 47, 0), new ScheduledTask(47, 57, 0), new ScheduledTask(57, 59, 0), new ScheduledTask(59, 66, 0)};
        int[] expectedProcessorEndTimes = new int[]{66};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot98_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.98_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(18, 26, 0), new ScheduledTask(35, 37, 0), new ScheduledTask(6, 9, 0), new ScheduledTask(28, 31, 1), new ScheduledTask(26, 35, 0), new ScheduledTask(46, 48, 0), new ScheduledTask(9, 18, 0), new ScheduledTask(37, 44, 0), new ScheduledTask(48, 54, 0)};
        int[] expectedProcessorEndTimes = new int[]{54, 31};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot98_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.98_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(18, 26, 0), new ScheduledTask(35, 37, 0), new ScheduledTask(6, 9, 0), new ScheduledTask(28, 31, 1), new ScheduledTask(26, 35, 0), new ScheduledTask(46, 48, 0), new ScheduledTask(9, 18, 0), new ScheduledTask(37, 44, 0), new ScheduledTask(48, 54, 0)};
        int[] expectedProcessorEndTimes = new int[]{54, 31};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot98_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.98_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(18, 26, 0), new ScheduledTask(35, 37, 0), new ScheduledTask(6, 9, 0), new ScheduledTask(28, 31, 1), new ScheduledTask(26, 35, 0), new ScheduledTask(46, 48, 0), new ScheduledTask(9, 18, 0), new ScheduledTask(37, 44, 0), new ScheduledTask(48, 54, 0)};
        int[] expectedProcessorEndTimes = new int[]{54, 31};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot98_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.98_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 6, 0), new ScheduledTask(6, 13, 0), new ScheduledTask(13, 20, 0), new ScheduledTask(20, 30, 0), new ScheduledTask(30, 33, 0), new ScheduledTask(33, 35, 0), new ScheduledTask(35, 44, 0), new ScheduledTask(44, 47, 0), new ScheduledTask(47, 56, 0)};
        int[] expectedProcessorEndTimes = new int[]{56};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot98_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.98_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 6, 0), new ScheduledTask(6, 13, 0), new ScheduledTask(13, 20, 0), new ScheduledTask(20, 30, 0), new ScheduledTask(30, 33, 0), new ScheduledTask(33, 35, 0), new ScheduledTask(35, 44, 0), new ScheduledTask(44, 47, 0), new ScheduledTask(47, 56, 0)};
        int[] expectedProcessorEndTimes = new int[]{56};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot98_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.98_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 4, 0), new ScheduledTask(4, 6, 0), new ScheduledTask(6, 13, 0), new ScheduledTask(13, 20, 0), new ScheduledTask(20, 30, 0), new ScheduledTask(30, 33, 0), new ScheduledTask(33, 35, 0), new ScheduledTask(35, 44, 0), new ScheduledTask(44, 47, 0), new ScheduledTask(47, 56, 0)};
        int[] expectedProcessorEndTimes = new int[]{56};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 14, 0), new ScheduledTask(14, 19, 0), new ScheduledTask(19, 27, 0), new ScheduledTask(27, 29, 0), new ScheduledTask(29, 32, 0), new ScheduledTask(32, 40, 0), new ScheduledTask(40, 42, 0), new ScheduledTask(42, 48, 0), new ScheduledTask(48, 52, 0)};
        int[] expectedProcessorEndTimes = new int[]{52};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 14, 0), new ScheduledTask(14, 19, 0), new ScheduledTask(19, 27, 0), new ScheduledTask(27, 29, 0), new ScheduledTask(29, 32, 0), new ScheduledTask(32, 40, 0), new ScheduledTask(40, 42, 0), new ScheduledTask(42, 48, 0), new ScheduledTask(48, 52, 0)};
        int[] expectedProcessorEndTimes = new int[]{52};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(8, 14, 0), new ScheduledTask(14, 19, 0), new ScheduledTask(19, 27, 0), new ScheduledTask(27, 29, 0), new ScheduledTask(29, 32, 0), new ScheduledTask(32, 40, 0), new ScheduledTask(40, 42, 0), new ScheduledTask(42, 48, 0), new ScheduledTask(48, 52, 0)};
        int[] expectedProcessorEndTimes = new int[]{52};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 583;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 118, 0), new ScheduledTask(0, 89, 1), new ScheduledTask(118, 221, 0), new ScheduledTask(121, 195, 1), new ScheduledTask(221, 354, 0), new ScheduledTask(225, 358, 1), new ScheduledTask(361, 494, 0), new ScheduledTask(361, 405, 1), new ScheduledTask(494, 583, 0), new ScheduledTask(498, 572, 1)};
        int[] expectedProcessorEndTimes = new int[]{583, 572};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 583;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 118, 0), new ScheduledTask(0, 89, 1), new ScheduledTask(118, 221, 0), new ScheduledTask(121, 195, 1), new ScheduledTask(221, 354, 0), new ScheduledTask(225, 358, 1), new ScheduledTask(361, 494, 0), new ScheduledTask(361, 405, 1), new ScheduledTask(494, 583, 0), new ScheduledTask(498, 572, 1)};
        int[] expectedProcessorEndTimes = new int[]{583, 572};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 583;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 118, 0), new ScheduledTask(0, 89, 1), new ScheduledTask(118, 221, 0), new ScheduledTask(121, 195, 1), new ScheduledTask(221, 354, 0), new ScheduledTask(225, 358, 1), new ScheduledTask(361, 494, 0), new ScheduledTask(361, 405, 1), new ScheduledTask(494, 583, 0), new ScheduledTask(498, 572, 1)};
        int[] expectedProcessorEndTimes = new int[]{583, 572};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 147, 0), new ScheduledTask(0, 37, 1), new ScheduledTask(147, 221, 0), new ScheduledTask(154, 191, 1), new ScheduledTask(221, 387, 0), new ScheduledTask(226, 300, 1), new ScheduledTask(387, 553, 0), new ScheduledTask(393, 540, 1), new ScheduledTask(553, 700, 0), new ScheduledTask(563, 600, 1)};
        int[] expectedProcessorEndTimes = new int[]{700, 600};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 147, 0), new ScheduledTask(0, 37, 1), new ScheduledTask(147, 221, 0), new ScheduledTask(154, 191, 1), new ScheduledTask(221, 387, 0), new ScheduledTask(226, 300, 1), new ScheduledTask(387, 553, 0), new ScheduledTask(393, 540, 1), new ScheduledTask(553, 700, 0), new ScheduledTask(563, 600, 1)};
        int[] expectedProcessorEndTimes = new int[]{700, 600};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 147, 0), new ScheduledTask(0, 37, 1), new ScheduledTask(147, 221, 0), new ScheduledTask(154, 191, 1), new ScheduledTask(221, 387, 0), new ScheduledTask(226, 300, 1), new ScheduledTask(387, 553, 0), new ScheduledTask(393, 540, 1), new ScheduledTask(553, 700, 0), new ScheduledTask(563, 600, 1)};
        int[] expectedProcessorEndTimes = new int[]{700, 600};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 521;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 96, 0), new ScheduledTask(0, 96, 1), new ScheduledTask(102, 198, 1), new ScheduledTask(98, 194, 0), new ScheduledTask(201, 345, 0), new ScheduledTask(198, 342, 1), new ScheduledTask(349, 421, 1), new ScheduledTask(346, 418, 0), new ScheduledTask(425, 521, 1), new ScheduledTask(425, 473, 0)};
        int[] expectedProcessorEndTimes = new int[]{473, 521};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 521;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 96, 0), new ScheduledTask(0, 96, 1), new ScheduledTask(102, 198, 1), new ScheduledTask(98, 194, 0), new ScheduledTask(201, 345, 0), new ScheduledTask(198, 342, 1), new ScheduledTask(351, 423, 2), new ScheduledTask(346, 418, 0), new ScheduledTask(425, 521, 2), new ScheduledTask(427, 475, 3)};
        int[] expectedProcessorEndTimes = new int[]{418, 342, 521, 475};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 521;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 96, 0), new ScheduledTask(0, 96, 1), new ScheduledTask(102, 198, 1), new ScheduledTask(98, 194, 0), new ScheduledTask(201, 345, 0), new ScheduledTask(198, 342, 1), new ScheduledTask(351, 423, 2), new ScheduledTask(346, 418, 0), new ScheduledTask(425, 521, 2), new ScheduledTask(427, 475, 0)};
        int[] expectedProcessorEndTimes = new int[]{475, 342, 521};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 612;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 149, 0), new ScheduledTask(0, 132, 1), new ScheduledTask(149, 232, 0), new ScheduledTask(154, 204, 1), new ScheduledTask(232, 348, 0), new ScheduledTask(241, 324, 1), new ScheduledTask(348, 513, 0), new ScheduledTask(356, 488, 1), new ScheduledTask(513, 612, 0), new ScheduledTask(517, 550, 1)};
        int[] expectedProcessorEndTimes = new int[]{612, 550};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 612;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 149, 0), new ScheduledTask(0, 132, 1), new ScheduledTask(149, 232, 0), new ScheduledTask(154, 204, 1), new ScheduledTask(232, 348, 0), new ScheduledTask(241, 324, 1), new ScheduledTask(348, 513, 0), new ScheduledTask(356, 488, 1), new ScheduledTask(513, 612, 0), new ScheduledTask(517, 550, 1)};
        int[] expectedProcessorEndTimes = new int[]{612, 550};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 612;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 149, 0), new ScheduledTask(0, 132, 1), new ScheduledTask(149, 232, 0), new ScheduledTask(154, 204, 1), new ScheduledTask(232, 348, 0), new ScheduledTask(241, 324, 1), new ScheduledTask(348, 513, 0), new ScheduledTask(356, 488, 1), new ScheduledTask(513, 612, 0), new ScheduledTask(517, 550, 1)};
        int[] expectedProcessorEndTimes = new int[]{612, 550};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 474;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 115, 0), new ScheduledTask(0, 104, 1), new ScheduledTask(115, 207, 0), new ScheduledTask(123, 146, 1), new ScheduledTask(207, 265, 0), new ScheduledTask(210, 245, 1), new ScheduledTask(265, 380, 0), new ScheduledTask(272, 376, 1), new ScheduledTask(382, 474, 0), new ScheduledTask(384, 465, 1)};
        int[] expectedProcessorEndTimes = new int[]{474, 465};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 474;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 115, 0), new ScheduledTask(0, 104, 1), new ScheduledTask(115, 207, 0), new ScheduledTask(123, 146, 1), new ScheduledTask(207, 265, 0), new ScheduledTask(210, 245, 1), new ScheduledTask(265, 380, 0), new ScheduledTask(272, 376, 1), new ScheduledTask(382, 474, 0), new ScheduledTask(384, 465, 1)};
        int[] expectedProcessorEndTimes = new int[]{474, 465};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 474;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 115, 0), new ScheduledTask(0, 104, 1), new ScheduledTask(115, 207, 0), new ScheduledTask(123, 146, 1), new ScheduledTask(207, 265, 0), new ScheduledTask(210, 245, 1), new ScheduledTask(265, 380, 0), new ScheduledTask(272, 376, 1), new ScheduledTask(382, 474, 0), new ScheduledTask(384, 465, 1)};
        int[] expectedProcessorEndTimes = new int[]{474, 465};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 644;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 141, 0), new ScheduledTask(0, 31, 1), new ScheduledTask(141, 298, 0), new ScheduledTask(149, 212, 1), new ScheduledTask(298, 424, 0), new ScheduledTask(300, 379, 1), new ScheduledTask(424, 581, 0), new ScheduledTask(428, 554, 1), new ScheduledTask(581, 644, 0), new ScheduledTask(591, 638, 1)};
        int[] expectedProcessorEndTimes = new int[]{644, 638};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 644;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 141, 0), new ScheduledTask(0, 31, 1), new ScheduledTask(141, 298, 0), new ScheduledTask(149, 212, 1), new ScheduledTask(298, 424, 0), new ScheduledTask(300, 379, 1), new ScheduledTask(424, 581, 0), new ScheduledTask(428, 554, 1), new ScheduledTask(581, 644, 0), new ScheduledTask(591, 638, 1)};
        int[] expectedProcessorEndTimes = new int[]{644, 638};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 644;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 141, 0), new ScheduledTask(0, 31, 1), new ScheduledTask(141, 298, 0), new ScheduledTask(149, 212, 1), new ScheduledTask(298, 424, 0), new ScheduledTask(300, 379, 1), new ScheduledTask(424, 581, 0), new ScheduledTask(428, 554, 1), new ScheduledTask(581, 644, 0), new ScheduledTask(591, 638, 1)};
        int[] expectedProcessorEndTimes = new int[]{644, 638};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 683;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 175, 0), new ScheduledTask(0, 53, 1), new ScheduledTask(175, 315, 0), new ScheduledTask(184, 237, 1), new ScheduledTask(315, 473, 0), new ScheduledTask(325, 448, 1), new ScheduledTask(473, 543, 0), new ScheduledTask(476, 529, 1), new ScheduledTask(543, 683, 0), new ScheduledTask(551, 639, 1)};
        int[] expectedProcessorEndTimes = new int[]{683, 639};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 683;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 175, 0), new ScheduledTask(0, 53, 1), new ScheduledTask(175, 315, 0), new ScheduledTask(184, 237, 1), new ScheduledTask(315, 473, 0), new ScheduledTask(325, 448, 1), new ScheduledTask(473, 543, 0), new ScheduledTask(476, 529, 1), new ScheduledTask(543, 683, 0), new ScheduledTask(551, 639, 1)};
        int[] expectedProcessorEndTimes = new int[]{683, 639};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 683;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 175, 0), new ScheduledTask(0, 53, 1), new ScheduledTask(175, 315, 0), new ScheduledTask(184, 237, 1), new ScheduledTask(315, 473, 0), new ScheduledTask(325, 448, 1), new ScheduledTask(473, 543, 0), new ScheduledTask(476, 529, 1), new ScheduledTask(543, 683, 0), new ScheduledTask(551, 639, 1)};
        int[] expectedProcessorEndTimes = new int[]{683, 639};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 573;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 129, 0), new ScheduledTask(0, 129, 1), new ScheduledTask(132, 261, 0), new ScheduledTask(132, 180, 1), new ScheduledTask(261, 390, 0), new ScheduledTask(267, 315, 1), new ScheduledTask(390, 455, 0), new ScheduledTask(393, 458, 1), new ScheduledTask(460, 573, 0), new ScheduledTask(458, 571, 1)};
        int[] expectedProcessorEndTimes = new int[]{573, 571};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 573;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 129, 0), new ScheduledTask(0, 129, 1), new ScheduledTask(132, 261, 0), new ScheduledTask(132, 180, 1), new ScheduledTask(261, 390, 0), new ScheduledTask(267, 315, 1), new ScheduledTask(390, 455, 0), new ScheduledTask(393, 458, 1), new ScheduledTask(460, 573, 0), new ScheduledTask(458, 571, 1)};
        int[] expectedProcessorEndTimes = new int[]{573, 571};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 573;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 129, 0), new ScheduledTask(0, 129, 1), new ScheduledTask(132, 261, 0), new ScheduledTask(132, 180, 1), new ScheduledTask(261, 390, 0), new ScheduledTask(267, 315, 1), new ScheduledTask(390, 455, 0), new ScheduledTask(393, 458, 1), new ScheduledTask(460, 573, 0), new ScheduledTask(458, 571, 1)};
        int[] expectedProcessorEndTimes = new int[]{573, 571};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 591;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 138, 0), new ScheduledTask(0, 121, 1), new ScheduledTask(138, 293, 0), new ScheduledTask(145, 197, 1), new ScheduledTask(293, 362, 0), new ScheduledTask(303, 337, 1), new ScheduledTask(362, 483, 0), new ScheduledTask(369, 472, 1), new ScheduledTask(483, 586, 0), new ScheduledTask(488, 591, 1)};
        int[] expectedProcessorEndTimes = new int[]{586, 591};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 591;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 138, 0), new ScheduledTask(0, 121, 1), new ScheduledTask(138, 293, 0), new ScheduledTask(145, 197, 1), new ScheduledTask(293, 362, 0), new ScheduledTask(303, 337, 1), new ScheduledTask(362, 483, 0), new ScheduledTask(369, 472, 1), new ScheduledTask(483, 586, 0), new ScheduledTask(488, 591, 1)};
        int[] expectedProcessorEndTimes = new int[]{586, 591};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 591;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 138, 0), new ScheduledTask(0, 121, 1), new ScheduledTask(138, 293, 0), new ScheduledTask(145, 197, 1), new ScheduledTask(293, 362, 0), new ScheduledTask(303, 337, 1), new ScheduledTask(362, 483, 0), new ScheduledTask(369, 472, 1), new ScheduledTask(483, 586, 0), new ScheduledTask(488, 591, 1)};
        int[] expectedProcessorEndTimes = new int[]{586, 591};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 450;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 40, 0), new ScheduledTask(0, 27, 1), new ScheduledTask(47, 141, 2), new ScheduledTask(40, 134, 0), new ScheduledTask(141, 261, 2), new ScheduledTask(143, 250, 3), new ScheduledTask(263, 343, 0), new ScheduledTask(261, 341, 2), new ScheduledTask(343, 450, 0), new ScheduledTask(348, 428, 4)};
        int[] expectedProcessorEndTimes = new int[]{450, 27, 341, 250, 428};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 450;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 40, 0), new ScheduledTask(0, 27, 1), new ScheduledTask(47, 141, 1), new ScheduledTask(40, 134, 0), new ScheduledTask(141, 261, 1), new ScheduledTask(143, 250, 0), new ScheduledTask(263, 343, 0), new ScheduledTask(261, 341, 1), new ScheduledTask(343, 450, 0), new ScheduledTask(345, 425, 1)};
        int[] expectedProcessorEndTimes = new int[]{450, 425};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 450;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 40, 0), new ScheduledTask(0, 27, 1), new ScheduledTask(47, 141, 2), new ScheduledTask(40, 134, 0), new ScheduledTask(141, 261, 2), new ScheduledTask(143, 250, 1), new ScheduledTask(263, 343, 0), new ScheduledTask(261, 341, 2), new ScheduledTask(343, 450, 0), new ScheduledTask(348, 428, 3)};
        int[] expectedProcessorEndTimes = new int[]{450, 250, 341, 428};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 450;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 40, 0), new ScheduledTask(0, 27, 1), new ScheduledTask(47, 141, 2), new ScheduledTask(40, 134, 0), new ScheduledTask(141, 261, 2), new ScheduledTask(143, 250, 1), new ScheduledTask(263, 343, 0), new ScheduledTask(261, 341, 2), new ScheduledTask(343, 450, 0), new ScheduledTask(348, 428, 3)};
        int[] expectedProcessorEndTimes = new int[]{450, 250, 341, 428};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 625;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 155, 0), new ScheduledTask(0, 93, 1), new ScheduledTask(155, 279, 0), new ScheduledTask(165, 227, 1), new ScheduledTask(279, 434, 0), new ScheduledTask(282, 390, 1), new ScheduledTask(434, 558, 0), new ScheduledTask(443, 489, 1), new ScheduledTask(558, 620, 0), new ScheduledTask(563, 625, 1)};
        int[] expectedProcessorEndTimes = new int[]{620, 625};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 625;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 155, 0), new ScheduledTask(0, 93, 1), new ScheduledTask(155, 279, 0), new ScheduledTask(165, 227, 1), new ScheduledTask(279, 434, 0), new ScheduledTask(282, 390, 1), new ScheduledTask(434, 558, 0), new ScheduledTask(443, 489, 1), new ScheduledTask(558, 620, 0), new ScheduledTask(563, 625, 1)};
        int[] expectedProcessorEndTimes = new int[]{620, 625};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 625;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 155, 0), new ScheduledTask(0, 93, 1), new ScheduledTask(155, 279, 0), new ScheduledTask(165, 227, 1), new ScheduledTask(279, 434, 0), new ScheduledTask(282, 390, 1), new ScheduledTask(434, 558, 0), new ScheduledTask(443, 489, 1), new ScheduledTask(558, 620, 0), new ScheduledTask(563, 625, 1)};
        int[] expectedProcessorEndTimes = new int[]{620, 625};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot97_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.97_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(0, 14, 1), new ScheduledTask(19, 26, 0), new ScheduledTask(16, 19, 0), new ScheduledTask(29, 35, 1), new ScheduledTask(26, 32, 0), new ScheduledTask(38, 45, 0), new ScheduledTask(38, 44, 1), new ScheduledTask(46, 56, 0), new ScheduledTask(50, 57, 1)};
        int[] expectedProcessorEndTimes = new int[]{56, 57};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot97_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.97_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(0, 14, 1), new ScheduledTask(19, 26, 0), new ScheduledTask(16, 19, 0), new ScheduledTask(29, 35, 2), new ScheduledTask(26, 32, 0), new ScheduledTask(38, 45, 3), new ScheduledTask(38, 44, 2), new ScheduledTask(46, 56, 3), new ScheduledTask(50, 57, 2)};
        int[] expectedProcessorEndTimes = new int[]{32, 14, 57, 56};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot97_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.97_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(0, 14, 1), new ScheduledTask(19, 26, 0), new ScheduledTask(16, 19, 0), new ScheduledTask(29, 35, 2), new ScheduledTask(26, 32, 0), new ScheduledTask(38, 45, 3), new ScheduledTask(38, 44, 2), new ScheduledTask(46, 56, 3), new ScheduledTask(50, 57, 2)};
        int[] expectedProcessorEndTimes = new int[]{32, 14, 57, 56};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 13, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(16, 25, 1), new ScheduledTask(13, 22, 0), new ScheduledTask(25, 43, 1), new ScheduledTask(29, 33, 0), new ScheduledTask(43, 54, 1), new ScheduledTask(47, 54, 0), new ScheduledTask(58, 69, 1), new ScheduledTask(62, 71, 0)};
        int[] expectedProcessorEndTimes = new int[]{71, 69};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 13, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(16, 25, 2), new ScheduledTask(13, 22, 0), new ScheduledTask(25, 43, 2), new ScheduledTask(29, 33, 3), new ScheduledTask(43, 54, 2), new ScheduledTask(47, 54, 3), new ScheduledTask(58, 69, 2), new ScheduledTask(62, 71, 1)};
        int[] expectedProcessorEndTimes = new int[]{22, 71, 69, 54};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 13, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(16, 25, 1), new ScheduledTask(13, 22, 0), new ScheduledTask(25, 43, 1), new ScheduledTask(29, 33, 2), new ScheduledTask(43, 54, 1), new ScheduledTask(47, 54, 3), new ScheduledTask(58, 69, 1), new ScheduledTask(62, 71, 4)};
        int[] expectedProcessorEndTimes = new int[]{22, 69, 33, 54, 71};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot99_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.99_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 83;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(11, 22, 0), new ScheduledTask(22, 28, 0), new ScheduledTask(28, 41, 0), new ScheduledTask(34, 45, 1), new ScheduledTask(48, 61, 1), new ScheduledTask(51, 59, 0), new ScheduledTask(64, 83, 1), new ScheduledTask(65, 80, 0)};
        int[] expectedProcessorEndTimes = new int[]{80, 83};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot99_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.99_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 83;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(11, 22, 0), new ScheduledTask(16, 22, 1), new ScheduledTask(31, 44, 1), new ScheduledTask(32, 43, 2), new ScheduledTask(51, 64, 3), new ScheduledTask(49, 57, 1), new ScheduledTask(64, 83, 3), new ScheduledTask(68, 83, 2)};
        int[] expectedProcessorEndTimes = new int[]{22, 57, 83, 83};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot99_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.99_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 83;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 11, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(11, 22, 0), new ScheduledTask(16, 22, 2), new ScheduledTask(31, 44, 2), new ScheduledTask(32, 43, 3), new ScheduledTask(51, 64, 4), new ScheduledTask(49, 57, 2), new ScheduledTask(64, 83, 4), new ScheduledTask(68, 83, 5)};
        int[] expectedProcessorEndTimes = new int[]{22, 6, 57, 43, 83, 83};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(18, 26, 0), new ScheduledTask(14, 18, 0), new ScheduledTask(26, 32, 0), new ScheduledTask(28, 34, 1), new ScheduledTask(36, 48, 0), new ScheduledTask(34, 40, 1), new ScheduledTask(48, 62, 0), new ScheduledTask(55, 66, 1)};
        int[] expectedProcessorEndTimes = new int[]{62, 66};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(18, 26, 0), new ScheduledTask(14, 18, 0), new ScheduledTask(26, 32, 0), new ScheduledTask(28, 34, 2), new ScheduledTask(36, 48, 0), new ScheduledTask(38, 44, 1), new ScheduledTask(50, 64, 0), new ScheduledTask(55, 66, 3)};
        int[] expectedProcessorEndTimes = new int[]{64, 44, 34, 66};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(18, 26, 0), new ScheduledTask(14, 18, 0), new ScheduledTask(26, 32, 0), new ScheduledTask(28, 34, 2), new ScheduledTask(36, 48, 0), new ScheduledTask(38, 44, 1), new ScheduledTask(50, 64, 0), new ScheduledTask(55, 66, 3)};
        int[] expectedProcessorEndTimes = new int[]{64, 44, 34, 66};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 16, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(21, 35, 1), new ScheduledTask(16, 25, 0), new ScheduledTask(35, 42, 1), new ScheduledTask(40, 44, 0), new ScheduledTask(46, 60, 1), new ScheduledTask(46, 51, 0), new ScheduledTask(60, 72, 1), new ScheduledTask(65, 69, 0)};
        int[] expectedProcessorEndTimes = new int[]{69, 72};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 16, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(21, 35, 2), new ScheduledTask(16, 25, 0), new ScheduledTask(35, 42, 2), new ScheduledTask(40, 44, 0), new ScheduledTask(46, 60, 2), new ScheduledTask(46, 51, 0), new ScheduledTask(60, 72, 2), new ScheduledTask(65, 69, 0)};
        int[] expectedProcessorEndTimes = new int[]{69, 4, 72};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 16, 0), new ScheduledTask(0, 4, 1), new ScheduledTask(21, 35, 1), new ScheduledTask(16, 25, 0), new ScheduledTask(35, 42, 1), new ScheduledTask(40, 44, 2), new ScheduledTask(46, 60, 1), new ScheduledTask(46, 51, 2), new ScheduledTask(60, 72, 1), new ScheduledTask(65, 69, 3)};
        int[] expectedProcessorEndTimes = new int[]{25, 72, 51, 69};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 17, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(17, 24, 0), new ScheduledTask(23, 28, 1), new ScheduledTask(33, 42, 0), new ScheduledTask(29, 36, 1), new ScheduledTask(44, 53, 1), new ScheduledTask(42, 54, 0), new ScheduledTask(55, 62, 0), new ScheduledTask(58, 63, 1)};
        int[] expectedProcessorEndTimes = new int[]{62, 63};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 17, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(17, 24, 0), new ScheduledTask(23, 28, 2), new ScheduledTask(33, 42, 0), new ScheduledTask(29, 36, 2), new ScheduledTask(44, 53, 3), new ScheduledTask(42, 54, 0), new ScheduledTask(55, 62, 0), new ScheduledTask(58, 63, 3)};
        int[] expectedProcessorEndTimes = new int[]{62, 3, 36, 63};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 17, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(17, 24, 0), new ScheduledTask(23, 28, 1), new ScheduledTask(33, 42, 0), new ScheduledTask(29, 36, 1), new ScheduledTask(44, 53, 2), new ScheduledTask(42, 54, 0), new ScheduledTask(55, 62, 0), new ScheduledTask(58, 63, 2)};
        int[] expectedProcessorEndTimes = new int[]{62, 36, 63};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(14, 26, 1), new ScheduledTask(10, 15, 0), new ScheduledTask(32, 37, 0), new ScheduledTask(26, 34, 1), new ScheduledTask(38, 55, 0), new ScheduledTask(42, 52, 1), new ScheduledTask(55, 68, 0), new ScheduledTask(61, 71, 1)};
        int[] expectedProcessorEndTimes = new int[]{68, 71};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(14, 26, 2), new ScheduledTask(10, 15, 0), new ScheduledTask(32, 37, 0), new ScheduledTask(26, 34, 2), new ScheduledTask(38, 55, 0), new ScheduledTask(42, 52, 3), new ScheduledTask(55, 68, 0), new ScheduledTask(61, 71, 3)};
        int[] expectedProcessorEndTimes = new int[]{68, 3, 34, 71};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(14, 26, 2), new ScheduledTask(10, 15, 0), new ScheduledTask(32, 37, 0), new ScheduledTask(26, 34, 2), new ScheduledTask(38, 55, 0), new ScheduledTask(42, 52, 3), new ScheduledTask(55, 68, 0), new ScheduledTask(61, 71, 4)};
        int[] expectedProcessorEndTimes = new int[]{68, 3, 34, 52, 71};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 13, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(13, 24, 0), new ScheduledTask(18, 24, 1), new ScheduledTask(27, 42, 0), new ScheduledTask(34, 37, 1), new ScheduledTask(45, 58, 1), new ScheduledTask(42, 47, 0), new ScheduledTask(58, 66, 1), new ScheduledTask(63, 66, 0)};
        int[] expectedProcessorEndTimes = new int[]{66, 66};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 13, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(13, 24, 0), new ScheduledTask(18, 24, 2), new ScheduledTask(27, 42, 0), new ScheduledTask(34, 37, 3), new ScheduledTask(45, 58, 2), new ScheduledTask(42, 47, 0), new ScheduledTask(58, 66, 2), new ScheduledTask(63, 66, 3)};
        int[] expectedProcessorEndTimes = new int[]{47, 3, 66, 66};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 13, 0), new ScheduledTask(0, 3, 1), new ScheduledTask(13, 24, 0), new ScheduledTask(18, 24, 2), new ScheduledTask(27, 42, 0), new ScheduledTask(34, 37, 3), new ScheduledTask(45, 58, 1), new ScheduledTask(42, 47, 0), new ScheduledTask(58, 66, 1), new ScheduledTask(63, 66, 0)};
        int[] expectedProcessorEndTimes = new int[]{66, 66, 24, 37};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot01_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.01_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 17, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(20, 37, 1), new ScheduledTask(17, 34, 0), new ScheduledTask(43, 48, 1), new ScheduledTask(40, 43, 0), new ScheduledTask(51, 68, 1), new ScheduledTask(56, 65, 0), new ScheduledTask(74, 88, 1), new ScheduledTask(75, 84, 0)};
        int[] expectedProcessorEndTimes = new int[]{84, 88};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot01_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.01_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 17, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(20, 37, 1), new ScheduledTask(17, 34, 0), new ScheduledTask(43, 48, 1), new ScheduledTask(40, 43, 0), new ScheduledTask(51, 68, 1), new ScheduledTask(56, 65, 0), new ScheduledTask(74, 88, 1), new ScheduledTask(75, 84, 0)};
        int[] expectedProcessorEndTimes = new int[]{84, 88};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot01_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.01_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 17, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(20, 37, 2), new ScheduledTask(17, 34, 0), new ScheduledTask(43, 48, 2), new ScheduledTask(40, 43, 0), new ScheduledTask(51, 68, 2), new ScheduledTask(56, 65, 0), new ScheduledTask(74, 88, 2), new ScheduledTask(75, 84, 3)};
        int[] expectedProcessorEndTimes = new int[]{65, 7, 88, 84};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot01_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.01_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(14, 24, 0), new ScheduledTask(21, 32, 2), new ScheduledTask(36, 49, 0), new ScheduledTask(32, 40, 2), new ScheduledTask(49, 62, 0), new ScheduledTask(54, 62, 3), new ScheduledTask(69, 77, 4), new ScheduledTask(69, 76, 3)};
        int[] expectedProcessorEndTimes = new int[]{62, 6, 40, 76, 77};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot01_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.01_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(14, 24, 0), new ScheduledTask(21, 32, 1), new ScheduledTask(36, 49, 0), new ScheduledTask(32, 40, 1), new ScheduledTask(49, 62, 0), new ScheduledTask(54, 62, 1), new ScheduledTask(69, 77, 0), new ScheduledTask(69, 76, 1)};
        int[] expectedProcessorEndTimes = new int[]{77, 76};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot01_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.01_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(14, 24, 0), new ScheduledTask(21, 32, 2), new ScheduledTask(36, 49, 0), new ScheduledTask(32, 40, 2), new ScheduledTask(49, 62, 0), new ScheduledTask(54, 62, 3), new ScheduledTask(69, 77, 2), new ScheduledTask(69, 76, 3)};
        int[] expectedProcessorEndTimes = new int[]{62, 6, 77, 76};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot01_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.01_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 14, 0), new ScheduledTask(0, 6, 1), new ScheduledTask(14, 24, 0), new ScheduledTask(21, 32, 1), new ScheduledTask(36, 49, 2), new ScheduledTask(32, 40, 1), new ScheduledTask(49, 62, 2), new ScheduledTask(54, 62, 3), new ScheduledTask(69, 77, 4), new ScheduledTask(69, 76, 3)};
        int[] expectedProcessorEndTimes = new int[]{24, 40, 62, 76, 77};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 13, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(13, 28, 0), new ScheduledTask(22, 35, 1), new ScheduledTask(40, 55, 0), new ScheduledTask(38, 51, 1), new ScheduledTask(55, 67, 0), new ScheduledTask(62, 66, 1), new ScheduledTask(69, 78, 1), new ScheduledTask(70, 74, 0)};
        int[] expectedProcessorEndTimes = new int[]{74, 78};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 13, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(13, 28, 0), new ScheduledTask(22, 35, 2), new ScheduledTask(40, 55, 3), new ScheduledTask(38, 51, 2), new ScheduledTask(55, 67, 3), new ScheduledTask(62, 66, 2), new ScheduledTask(69, 78, 2), new ScheduledTask(70, 74, 3)};
        int[] expectedProcessorEndTimes = new int[]{28, 7, 78, 74};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 13, 0), new ScheduledTask(0, 7, 1), new ScheduledTask(17, 32, 2), new ScheduledTask(15, 28, 0), new ScheduledTask(33, 48, 2), new ScheduledTask(42, 55, 3), new ScheduledTask(55, 67, 3), new ScheduledTask(65, 69, 4), new ScheduledTask(69, 78, 4), new ScheduledTask(73, 77, 3)};
        int[] expectedProcessorEndTimes = new int[]{28, 7, 48, 77, 78};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(12, 22, 0), new ScheduledTask(9, 12, 0), new ScheduledTask(27, 37, 0), new ScheduledTask(22, 27, 0), new ScheduledTask(41, 50, 0), new ScheduledTask(37, 41, 0), new ScheduledTask(50, 55, 0), new ScheduledTask(54, 57, 2)};
        int[] expectedProcessorEndTimes = new int[]{55, 5, 57};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(12, 22, 0), new ScheduledTask(9, 12, 0), new ScheduledTask(27, 37, 0), new ScheduledTask(22, 27, 0), new ScheduledTask(41, 50, 0), new ScheduledTask(37, 41, 0), new ScheduledTask(50, 55, 0), new ScheduledTask(54, 57, 1)};
        int[] expectedProcessorEndTimes = new int[]{55, 57};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(12, 22, 0), new ScheduledTask(9, 12, 0), new ScheduledTask(27, 37, 0), new ScheduledTask(22, 27, 0), new ScheduledTask(41, 50, 0), new ScheduledTask(37, 41, 0), new ScheduledTask(50, 55, 0), new ScheduledTask(54, 57, 2)};
        int[] expectedProcessorEndTimes = new int[]{55, 5, 57};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 8, 0), new ScheduledTask(0, 5, 1), new ScheduledTask(12, 22, 0), new ScheduledTask(9, 12, 0), new ScheduledTask(27, 37, 0), new ScheduledTask(22, 27, 0), new ScheduledTask(41, 50, 0), new ScheduledTask(37, 41, 0), new ScheduledTask(50, 55, 0), new ScheduledTask(54, 57, 2)};
        int[] expectedProcessorEndTimes = new int[]{55, 5, 57};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 6, 0), new ScheduledTask(6, 13, 0), new ScheduledTask(13, 16, 0), new ScheduledTask(16, 24, 0), new ScheduledTask(24, 29, 0), new ScheduledTask(29, 32, 0), new ScheduledTask(32, 36, 0), new ScheduledTask(36, 42, 0), new ScheduledTask(42, 47, 0)};
        int[] expectedProcessorEndTimes = new int[]{47};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 6, 0), new ScheduledTask(6, 13, 0), new ScheduledTask(13, 16, 0), new ScheduledTask(16, 24, 0), new ScheduledTask(24, 29, 0), new ScheduledTask(29, 32, 0), new ScheduledTask(32, 36, 0), new ScheduledTask(36, 42, 0), new ScheduledTask(42, 47, 0)};
        int[] expectedProcessorEndTimes = new int[]{47};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 6, 0), new ScheduledTask(6, 13, 0), new ScheduledTask(13, 16, 0), new ScheduledTask(16, 24, 0), new ScheduledTask(24, 29, 0), new ScheduledTask(29, 32, 0), new ScheduledTask(32, 36, 0), new ScheduledTask(36, 42, 0), new ScheduledTask(42, 47, 0)};
        int[] expectedProcessorEndTimes = new int[]{47};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 14, 0), new ScheduledTask(14, 17, 0), new ScheduledTask(17, 22, 0), new ScheduledTask(22, 27, 0), new ScheduledTask(27, 33, 0), new ScheduledTask(33, 39, 0), new ScheduledTask(39, 48, 0), new ScheduledTask(48, 57, 0), new ScheduledTask(57, 61, 0)};
        int[] expectedProcessorEndTimes = new int[]{61};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 14, 0), new ScheduledTask(14, 17, 0), new ScheduledTask(17, 22, 0), new ScheduledTask(22, 27, 0), new ScheduledTask(27, 33, 0), new ScheduledTask(33, 39, 0), new ScheduledTask(39, 48, 0), new ScheduledTask(48, 57, 0), new ScheduledTask(57, 61, 0)};
        int[] expectedProcessorEndTimes = new int[]{61};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 14, 0), new ScheduledTask(14, 17, 0), new ScheduledTask(17, 22, 0), new ScheduledTask(22, 27, 0), new ScheduledTask(27, 33, 0), new ScheduledTask(33, 39, 0), new ScheduledTask(39, 48, 0), new ScheduledTask(48, 57, 0), new ScheduledTask(57, 61, 0)};
        int[] expectedProcessorEndTimes = new int[]{61};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 11, 0), new ScheduledTask(11, 20, 0), new ScheduledTask(20, 22, 0), new ScheduledTask(22, 30, 0), new ScheduledTask(30, 40, 0), new ScheduledTask(40, 45, 0), new ScheduledTask(45, 50, 0), new ScheduledTask(50, 60, 0), new ScheduledTask(60, 67, 0)};
        int[] expectedProcessorEndTimes = new int[]{67};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 11, 0), new ScheduledTask(11, 20, 0), new ScheduledTask(20, 22, 0), new ScheduledTask(22, 30, 0), new ScheduledTask(30, 40, 0), new ScheduledTask(40, 45, 0), new ScheduledTask(45, 50, 0), new ScheduledTask(50, 60, 0), new ScheduledTask(60, 67, 0)};
        int[] expectedProcessorEndTimes = new int[]{67};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 11, 0), new ScheduledTask(11, 20, 0), new ScheduledTask(20, 22, 0), new ScheduledTask(22, 30, 0), new ScheduledTask(30, 40, 0), new ScheduledTask(40, 45, 0), new ScheduledTask(45, 50, 0), new ScheduledTask(50, 60, 0), new ScheduledTask(60, 67, 0)};
        int[] expectedProcessorEndTimes = new int[]{67};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 9, 0), new ScheduledTask(9, 12, 0), new ScheduledTask(12, 15, 0), new ScheduledTask(15, 25, 0), new ScheduledTask(25, 31, 0), new ScheduledTask(31, 33, 0), new ScheduledTask(33, 36, 0), new ScheduledTask(36, 45, 0), new ScheduledTask(45, 52, 0)};
        int[] expectedProcessorEndTimes = new int[]{52};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 9, 0), new ScheduledTask(9, 12, 0), new ScheduledTask(12, 15, 0), new ScheduledTask(15, 25, 0), new ScheduledTask(25, 31, 0), new ScheduledTask(31, 33, 0), new ScheduledTask(33, 36, 0), new ScheduledTask(36, 45, 0), new ScheduledTask(45, 52, 0)};
        int[] expectedProcessorEndTimes = new int[]{52};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 7, 0), new ScheduledTask(7, 9, 0), new ScheduledTask(9, 12, 0), new ScheduledTask(12, 15, 0), new ScheduledTask(15, 25, 0), new ScheduledTask(25, 31, 0), new ScheduledTask(31, 33, 0), new ScheduledTask(33, 36, 0), new ScheduledTask(36, 45, 0), new ScheduledTask(45, 52, 0)};
        int[] expectedProcessorEndTimes = new int[]{52};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_10dot03_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.03_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 20, 0), new ScheduledTask(20, 28, 0), new ScheduledTask(28, 30, 0), new ScheduledTask(30, 35, 0), new ScheduledTask(35, 41, 0), new ScheduledTask(41, 45, 0), new ScheduledTask(45, 52, 0), new ScheduledTask(52, 59, 0), new ScheduledTask(59, 65, 0)};
        int[] expectedProcessorEndTimes = new int[]{65};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_10dot03_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.03_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 20, 0), new ScheduledTask(20, 28, 0), new ScheduledTask(28, 30, 0), new ScheduledTask(30, 35, 0), new ScheduledTask(35, 41, 0), new ScheduledTask(41, 45, 0), new ScheduledTask(45, 52, 0), new ScheduledTask(52, 59, 0), new ScheduledTask(59, 65, 0)};
        int[] expectedProcessorEndTimes = new int[]{65};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_10dot03_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.03_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 10, 0), new ScheduledTask(10, 20, 0), new ScheduledTask(20, 28, 0), new ScheduledTask(28, 30, 0), new ScheduledTask(30, 35, 0), new ScheduledTask(35, 41, 0), new ScheduledTask(41, 45, 0), new ScheduledTask(45, 52, 0), new ScheduledTask(52, 59, 0), new ScheduledTask(59, 65, 0)};
        int[] expectedProcessorEndTimes = new int[]{65};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_10dot08_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.08_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 14, 0), new ScheduledTask(14, 17, 0), new ScheduledTask(17, 19, 0), new ScheduledTask(19, 21, 0), new ScheduledTask(21, 31, 0), new ScheduledTask(31, 34, 0), new ScheduledTask(34, 39, 0), new ScheduledTask(39, 46, 0), new ScheduledTask(46, 50, 0)};
        int[] expectedProcessorEndTimes = new int[]{50};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_10dot08_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.08_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 14, 0), new ScheduledTask(14, 17, 0), new ScheduledTask(17, 19, 0), new ScheduledTask(19, 21, 0), new ScheduledTask(21, 31, 0), new ScheduledTask(31, 34, 0), new ScheduledTask(34, 39, 0), new ScheduledTask(39, 46, 0), new ScheduledTask(46, 50, 0)};
        int[] expectedProcessorEndTimes = new int[]{50};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_10dot08_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.08_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 14, 0), new ScheduledTask(14, 17, 0), new ScheduledTask(17, 19, 0), new ScheduledTask(19, 21, 0), new ScheduledTask(21, 31, 0), new ScheduledTask(31, 34, 0), new ScheduledTask(34, 39, 0), new ScheduledTask(39, 46, 0), new ScheduledTask(46, 50, 0)};
        int[] expectedProcessorEndTimes = new int[]{50};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_10dot11_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.11_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 13, 0), new ScheduledTask(13, 15, 0), new ScheduledTask(15, 25, 0), new ScheduledTask(25, 30, 0), new ScheduledTask(30, 37, 0), new ScheduledTask(37, 47, 0), new ScheduledTask(47, 50, 0), new ScheduledTask(50, 53, 0), new ScheduledTask(53, 55, 0)};
        int[] expectedProcessorEndTimes = new int[]{55};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_10dot11_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.11_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 13, 0), new ScheduledTask(13, 15, 0), new ScheduledTask(15, 25, 0), new ScheduledTask(25, 30, 0), new ScheduledTask(30, 37, 0), new ScheduledTask(37, 47, 0), new ScheduledTask(47, 50, 0), new ScheduledTask(50, 53, 0), new ScheduledTask(53, 55, 0)};
        int[] expectedProcessorEndTimes = new int[]{55};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_10dot11_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.11_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 5, 0), new ScheduledTask(5, 13, 0), new ScheduledTask(13, 15, 0), new ScheduledTask(15, 25, 0), new ScheduledTask(25, 30, 0), new ScheduledTask(30, 37, 0), new ScheduledTask(37, 47, 0), new ScheduledTask(47, 50, 0), new ScheduledTask(50, 53, 0), new ScheduledTask(53, 55, 0)};
        int[] expectedProcessorEndTimes = new int[]{55};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_9dot93_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_9.93_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 14, 0), new ScheduledTask(14, 19, 0), new ScheduledTask(19, 25, 0), new ScheduledTask(25, 27, 0), new ScheduledTask(27, 30, 0), new ScheduledTask(30, 40, 0), new ScheduledTask(40, 50, 0), new ScheduledTask(50, 56, 0), new ScheduledTask(56, 61, 0)};
        int[] expectedProcessorEndTimes = new int[]{61};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_9dot93_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_9.93_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 14, 0), new ScheduledTask(14, 19, 0), new ScheduledTask(19, 25, 0), new ScheduledTask(25, 27, 0), new ScheduledTask(27, 30, 0), new ScheduledTask(30, 40, 0), new ScheduledTask(40, 50, 0), new ScheduledTask(50, 56, 0), new ScheduledTask(56, 61, 0)};
        int[] expectedProcessorEndTimes = new int[]{61};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_9dot93_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_9.93_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 9, 0), new ScheduledTask(9, 14, 0), new ScheduledTask(14, 19, 0), new ScheduledTask(19, 25, 0), new ScheduledTask(25, 27, 0), new ScheduledTask(27, 30, 0), new ScheduledTask(30, 40, 0), new ScheduledTask(40, 50, 0), new ScheduledTask(50, 56, 0), new ScheduledTask(56, 61, 0)};
        int[] expectedProcessorEndTimes = new int[]{61};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_9dot94_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_9.94_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 7, 0), new ScheduledTask(7, 17, 0), new ScheduledTask(17, 27, 0), new ScheduledTask(27, 29, 0), new ScheduledTask(29, 34, 0), new ScheduledTask(34, 36, 0), new ScheduledTask(36, 38, 0), new ScheduledTask(38, 48, 0), new ScheduledTask(48, 52, 0)};
        int[] expectedProcessorEndTimes = new int[]{52};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_9dot94_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_9.94_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 7, 0), new ScheduledTask(7, 17, 0), new ScheduledTask(17, 27, 0), new ScheduledTask(27, 29, 0), new ScheduledTask(29, 34, 0), new ScheduledTask(34, 36, 0), new ScheduledTask(36, 38, 0), new ScheduledTask(38, 48, 0), new ScheduledTask(48, 52, 0)};
        int[] expectedProcessorEndTimes = new int[]{52};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_9dot94_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_9.94_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 2, 0), new ScheduledTask(2, 7, 0), new ScheduledTask(7, 17, 0), new ScheduledTask(17, 27, 0), new ScheduledTask(27, 29, 0), new ScheduledTask(29, 34, 0), new ScheduledTask(34, 36, 0), new ScheduledTask(36, 38, 0), new ScheduledTask(38, 48, 0), new ScheduledTask(48, 52, 0)};
        int[] expectedProcessorEndTimes = new int[]{52};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_9dot98_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_9.98_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 8, 0), new ScheduledTask(8, 16, 0), new ScheduledTask(16, 20, 0), new ScheduledTask(20, 22, 0), new ScheduledTask(22, 26, 0), new ScheduledTask(26, 31, 0), new ScheduledTask(31, 33, 0), new ScheduledTask(33, 41, 0), new ScheduledTask(41, 46, 0)};
        int[] expectedProcessorEndTimes = new int[]{46};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_9dot98_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_9.98_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 8, 0), new ScheduledTask(8, 16, 0), new ScheduledTask(16, 20, 0), new ScheduledTask(20, 22, 0), new ScheduledTask(22, 26, 0), new ScheduledTask(26, 31, 0), new ScheduledTask(31, 33, 0), new ScheduledTask(33, 41, 0), new ScheduledTask(41, 46, 0)};
        int[] expectedProcessorEndTimes = new int[]{46};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_9dot98_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_9.98_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 8, 0), new ScheduledTask(8, 16, 0), new ScheduledTask(16, 20, 0), new ScheduledTask(20, 22, 0), new ScheduledTask(22, 26, 0), new ScheduledTask(26, 31, 0), new ScheduledTask(31, 33, 0), new ScheduledTask(33, 41, 0), new ScheduledTask(41, 46, 0)};
        int[] expectedProcessorEndTimes = new int[]{46};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_9dot98_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_9.98_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 3, 0), new ScheduledTask(3, 8, 0), new ScheduledTask(8, 16, 0), new ScheduledTask(16, 20, 0), new ScheduledTask(20, 22, 0), new ScheduledTask(22, 26, 0), new ScheduledTask(26, 31, 0), new ScheduledTask(31, 33, 0), new ScheduledTask(33, 41, 0), new ScheduledTask(41, 46, 0)};
        int[] expectedProcessorEndTimes = new int[]{46};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 8, 0), new ScheduledTask(8, 18, 0), new ScheduledTask(18, 22, 0), new ScheduledTask(22, 27, 0), new ScheduledTask(27, 29, 0), new ScheduledTask(29, 34, 0), new ScheduledTask(34, 43, 0), new ScheduledTask(43, 49, 0), new ScheduledTask(49, 52, 0)};
        int[] expectedProcessorEndTimes = new int[]{52};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 8, 0), new ScheduledTask(8, 18, 0), new ScheduledTask(18, 22, 0), new ScheduledTask(22, 27, 0), new ScheduledTask(27, 29, 0), new ScheduledTask(29, 34, 0), new ScheduledTask(34, 43, 0), new ScheduledTask(43, 49, 0), new ScheduledTask(49, 52, 0)};
        int[] expectedProcessorEndTimes = new int[]{52};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());

        ScheduledTask[] expectedScheduledTasks = new ScheduledTask[]{new ScheduledTask(0, 6, 0), new ScheduledTask(6, 8, 0), new ScheduledTask(8, 18, 0), new ScheduledTask(18, 22, 0), new ScheduledTask(22, 27, 0), new ScheduledTask(27, 29, 0), new ScheduledTask(29, 34, 0), new ScheduledTask(34, 43, 0), new ScheduledTask(43, 49, 0), new ScheduledTask(49, 52, 0)};
        int[] expectedProcessorEndTimes = new int[]{52};

        Schedule expectedSchedule = new Schedule(expectedScheduledTasks, expectedProcessorEndTimes, expectedScheduleEndTime, 10);
        
        Assertions.assertEquals(expectedSchedule, actualSchedule);
    }
    
}
