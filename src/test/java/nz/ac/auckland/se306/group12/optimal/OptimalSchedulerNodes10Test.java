package nz.ac.auckland.se306.group12.optimal;

import nz.ac.auckland.se306.group12.ScheduleValidator;
import nz.ac.auckland.se306.group12.TestUtil;
import nz.ac.auckland.se306.group12.models.Graph;
import nz.ac.auckland.se306.group12.models.Schedule;
import nz.ac.auckland.se306.group12.scheduler.Scheduler;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;

/**
 * This class has been automatically generated by the GenerateUnitTests.py script.
 * Do not modify this file directly as it will be overwritten the next time the script is run.
 * <p>
 * The optimal schedules for each test have been sourced from 
 * <a href="https://parallel.auckland.ac.nz/OptimalTaskScheduling/OptimalSchedules.html">the amazing work</a>
 * done by the Parallel and Reconfigurable Computing Lab at the University of Auckland.
 */
public class OptimalSchedulerNodes10Test {

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 548;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 380;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 322;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 600;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 411;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 365;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 578;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 432;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 393;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 554;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 328;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 298;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 564;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 393;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 363;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 570;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 365;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 323;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 522;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 386;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 348;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 574;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 385;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 346;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 605;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 412;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 353;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 262;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 499;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 342;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 262;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 465;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 288;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 211;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 48;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 49;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 48;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 41;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 74;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 41;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 39;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot01_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.01_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 44;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot01_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.01_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot01_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.01_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot01_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.01_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 44;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot84_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.84_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 33;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot84_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.84_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 38;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot84_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.84_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 33;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_1dot84_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.84_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 33;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_10dot01_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.01_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_10dot01_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.01_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_10dot01_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.01_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_10dot01_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.01_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 69;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_10dot02_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.02_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_10dot02_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.02_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_10dot02_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.02_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 60;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 60;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 60;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_10dot03_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.03_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_10dot03_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.03_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_10dot03_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.03_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 73;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_10dot05_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.05_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_10dot05_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.05_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_10dot05_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.05_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 81;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_9dot92_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_9.92_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 60;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_9dot92_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_9.92_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 60;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_9dot92_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_9.92_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 60;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_9dot95_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_9.95_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_9dot95_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_9.95_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_9dot95_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_9.95_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_9dot97_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_9.97_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_9dot97_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_9.97_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_9dot97_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_9.97_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_9dot98_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_9.98_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_9dot98_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_9.98_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_9dot98_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_9.98_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 84;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Join_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 208;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 117;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 91;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 307;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 169;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 132;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 278;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 172;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 144;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 157;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 91;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 317;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 200;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 164;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 273;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 153;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 119;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 302;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 174;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 140;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 318;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 214;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 176;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 282;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 164;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 132;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 9;
        int expectedScheduleEndTime = 167;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 204;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 167;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 357;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 238;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 163;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot98_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.98_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 28;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot98_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.98_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 21;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot98_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.98_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 21;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 30;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 20;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 18;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot99_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.99_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 20;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot99_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.99_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 39;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot99_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.99_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 25;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot99_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.99_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 20;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 40;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 27;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 27;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 44;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 34;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 38;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 24;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 22;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot02_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.02_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot02_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.02_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 19;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot02_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.02_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 19;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 40;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 27;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 26;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot04_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.04_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 41;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot04_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.04_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 28;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot04_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.04_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 27;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot09_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.09_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 30;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot09_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.09_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 19;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot09_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.09_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 17;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 34;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 34;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 34;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 33;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 33;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 33;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_9dot97_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_9.97_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_9dot97_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_9.97_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_9dot97_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_9.97_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_9dot98_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_9.98_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_9dot98_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_9.98_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_9dot98_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_9.98_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalFork_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 30;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 15;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 10;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 17;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 11;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 33;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 17;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 12;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 16;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 12;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 30;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 15;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 11;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 24;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 12;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 9;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 28;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 14;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 11;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 25;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 13;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 9;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 15;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 10;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 10;
        int expectedScheduleEndTime = 10;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 16;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 10;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 26;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 13;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalIndependent_Nodes_10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 9;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 317;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 212;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 212;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 286;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 216;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 216;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 278;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 171;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 171;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 273;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 207;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 207;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 283;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 227;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 227;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 235;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 170;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 145;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 349;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 236;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 210;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 282;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 181;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 161;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 304;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 196;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 196;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 144;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 222;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 144;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 144;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 372;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 319;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 319;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot91_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.91_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot91_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.91_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot91_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.91_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 27;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot98_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.98_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 34;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot98_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.98_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 25;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot98_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.98_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 25;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 39;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 30;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 38;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 30;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 28;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 39;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 41;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 33;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 39;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 28;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 28;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot04_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.04_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 21;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot04_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.04_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 27;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot04_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.04_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 21;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot04_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.04_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 21;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 48;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 48;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 48;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 49;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 49;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 49;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot04_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.04_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 44;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot04_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.04_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 44;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot04_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.04_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 44;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_2dot02_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_2.02_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 36;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_2dot02_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_2.02_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 39;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_2dot02_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_2.02_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 36;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_2dot02_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_2.02_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 36;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_9dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_9.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 278;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 344;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 278;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 278;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 38;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 40;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 38;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 38;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_2dot02_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_2.02_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 34;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_2dot02_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_2.02_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_2dot02_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_2.02_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 34;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_2dot02_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_2.02_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 34;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 255;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 159;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 134;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 286;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 182;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 148;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 300;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 190;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 167;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 245;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 151;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 120;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 369;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 244;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 218;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 216;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 120;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 96;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 301;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 182;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 163;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 321;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 212;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 174;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 382;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 233;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 204;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 9;
        int expectedScheduleEndTime = 130;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 292;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 178;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 130;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 283;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 184;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 149;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot91_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.91_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 33;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot91_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.91_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 23;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot91_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.91_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 23;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot96_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.96_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 41;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot96_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.96_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot96_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.96_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot98_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.98_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 38;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot98_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.98_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 25;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot98_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.98_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 24;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 22;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 22;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_1dot00_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.00_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 26;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_1dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_1dot00_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.00_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 26;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_1dot00_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.00_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 26;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 34;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 24;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 24;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_1dot02_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.02_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_1dot02_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.02_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 18;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_1dot02_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.02_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 16;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 22;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 22;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_1dot05_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.05_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 30;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_1dot05_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.05_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 19;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_1dot05_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.05_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 17;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_1dot06_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.06_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_1dot06_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.06_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 22;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_1dot06_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.06_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 21;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_1dot07_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.07_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_1dot07_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.07_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 20;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_1dot07_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.07_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 18;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 44;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 44;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 44;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 42;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 42;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot00_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.00_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot00_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.00_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot00_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.00_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot02_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.02_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot02_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.02_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot02_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.02_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot02_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.02_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot02_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.02_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot02_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.02_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot07_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.07_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot07_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.07_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot07_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.07_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_10dot07_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.07_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_2dot00_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_2.00_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 24;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_2dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_2.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_2dot00_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_2.00_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 27;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_2dot00_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_2.00_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 8;
        int expectedScheduleEndTime = 24;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalJoin_Nodes_10_CCR_9dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Join_Nodes_10_CCR_9.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 299;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 215;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 215;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 239;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 156;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 156;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 242;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 161;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 161;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 284;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 189;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 176;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 355;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 226;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 204;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 304;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 209;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 193;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 376;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 276;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 276;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 265;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 178;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 170;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 411;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 327;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 327;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 206;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 253;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 206;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 206;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 354;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 244;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 242;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot91_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.91_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 33;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot91_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.91_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 26;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot91_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.91_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 26;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot93_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.93_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 22;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot93_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.93_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 30;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot93_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.93_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 22;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot93_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.93_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 22;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot94_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.94_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 38;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot94_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.94_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot94_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.94_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 43;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 43;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 30;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 25;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 25;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 36;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 30;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 26;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 21;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 21;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot06_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.06_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 39;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot06_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.06_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 28;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot06_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.06_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 27;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot09_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.09_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot09_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.09_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 24;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot09_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.09_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 24;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 39;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 43;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 43;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 43;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 280;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 349;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 280;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 280;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_1dot09_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_1.09_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_1dot09_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_1.09_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 38;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_1dot09_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_1.09_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_1dot09_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_1.09_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_1dot96_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_1.96_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 26;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_1dot96_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_1.96_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 29;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_1dot96_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_1.96_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 26;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_1dot96_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_1.96_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 26;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_10dot01_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_10.01_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_10dot01_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_10.01_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_10dot01_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_10.01_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_10dot01_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_10.01_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 518;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 518;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 518;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 455;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 455;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 455;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 660;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 660;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 660;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 553;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 553;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 553;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 639;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 639;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 639;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 560;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 560;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 560;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 443;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 443;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 443;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 554;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 554;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 554;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 409;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 409;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 409;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 481;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 481;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 481;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 481;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 604;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 604;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 604;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot97_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.97_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot97_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.97_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot97_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.97_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot99_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.99_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot99_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.99_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot99_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.99_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot99_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.99_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot99_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.99_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot99_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.99_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot00_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.00_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot00_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.00_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot00_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.00_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot03_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.03_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot03_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.03_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot03_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.03_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot09_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.09_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot09_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.09_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot09_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.09_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot03_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.03_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot03_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.03_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_10dot03_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.03_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalPipeline_Nodes_10_CCR_9dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_9.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot20_CCR_1dot00_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.20_CCR_1.00_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 7;
        int expectedScheduleEndTime = 17;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot20_CCR_1dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.20_CCR_1.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 26;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot20_CCR_1dot00_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.20_CCR_1.00_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 17;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot20_CCR_1dot00_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.20_CCR_1.00_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 7;
        int expectedScheduleEndTime = 17;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot40_CCR_10dot00_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.40_CCR_10.00_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 17;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot40_CCR_10dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.40_CCR_10.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 31;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot40_CCR_10dot00_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.40_CCR_10.00_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 17;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot40_CCR_10dot00_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.40_CCR_10.00_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 17;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot40_CCR_10dot02_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.40_CCR_10.02_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 18;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot40_CCR_10dot02_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.40_CCR_10.02_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot40_CCR_10dot02_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.40_CCR_10.02_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 18;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot40_CCR_10dot02_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.40_CCR_10.02_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 18;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot50_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.50_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot50_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.50_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 181;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot50_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.50_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 98;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot50_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.50_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot60_CCR_1dot02_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.60_CCR_1.02_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 18;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot60_CCR_1dot02_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.60_CCR_1.02_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 22;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot60_CCR_1dot02_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.60_CCR_1.02_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 18;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot60_CCR_1dot02_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.60_CCR_1.02_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 18;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot60_CCR_2dot00_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.60_CCR_2.00_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot60_CCR_2dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.60_CCR_2.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot60_CCR_2dot00_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.60_CCR_2.00_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_0dot60_CCR_2dot00_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.60_CCR_2.00_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot30_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.30_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 341;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot30_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.30_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 386;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot30_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.30_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 341;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot30_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.30_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 341;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot40_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.40_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 449;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot40_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.40_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 427;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot40_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.40_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 427;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot40_CCR_1dot85_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.40_CCR_1.85_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot40_CCR_1dot85_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.40_CCR_1.85_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot40_CCR_1dot85_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.40_CCR_1.85_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot40_CCR_1dot85_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.40_CCR_1.85_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 32;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot40_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.40_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot40_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.40_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot40_CCR_10dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.40_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot50_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.50_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 476;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot50_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.50_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 450;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot50_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.50_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 450;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot50_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.50_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot50_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.50_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot50_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.50_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot50_CCR_10dot00_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.50_CCR_10.00_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot50_CCR_10dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.50_CCR_10.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot50_CCR_10dot00_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.50_CCR_10.00_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot50_CCR_10dot00_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.50_CCR_10.00_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot50_CCR_2dot03_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.50_CCR_2.03_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 34;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot50_CCR_2dot03_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.50_CCR_2.03_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot50_CCR_2dot03_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.50_CCR_2.03_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 34;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot50_CCR_2dot03_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.50_CCR_2.03_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 34;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot60_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.60_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 699;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot60_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.60_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 699;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot60_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.60_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 699;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot60_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.60_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 558;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot60_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.60_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 558;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot60_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.60_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 558;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot60_CCR_9dot97_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.60_CCR_9.97_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot60_CCR_9dot97_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.60_CCR_9.97_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot60_CCR_9dot97_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.60_CCR_9.97_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot70_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.70_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 601;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot70_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.70_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 547;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot70_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.70_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 547;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot70_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.70_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 507;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot70_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.70_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 492;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot70_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.70_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 492;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot80_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.80_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot80_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.80_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot80_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.80_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot80_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.80_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot80_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.80_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot80_CCR_10dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.80_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot90_CCR_0dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.90_CCR_0.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 86;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot90_CCR_0dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.90_CCR_0.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 86;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot90_CCR_0dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.90_CCR_0.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 86;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot90_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.90_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot90_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.90_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_1dot90_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.90_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot00_CCR_1dot02_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.00_CCR_1.02_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 79;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot00_CCR_1dot02_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.00_CCR_1.02_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 79;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot00_CCR_1dot02_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.00_CCR_1.02_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 79;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot00_CCR_1dot02_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.00_CCR_1.02_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 79;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot00_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.00_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot00_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.00_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot00_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.00_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot10_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.10_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot10_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.10_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot10_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.10_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot10_CCR_1dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.10_CCR_1.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot10_CCR_1dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.10_CCR_1.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot10_CCR_1dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.10_CCR_1.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 90;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot10_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.10_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 111;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot10_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.10_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 111;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot10_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.10_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 111;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot10_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.10_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot10_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.10_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot10_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.10_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot20_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.20_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1144;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot20_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.20_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 1144;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot20_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.20_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 1144;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot20_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.20_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot20_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.20_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot20_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.20_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot20_CCR_10dot04_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.20_CCR_10.04_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot20_CCR_10dot04_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.20_CCR_10.04_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot20_CCR_10dot04_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.20_CCR_10.04_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot20_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.20_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot20_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.20_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot20_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.20_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot30_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.30_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 895;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot30_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.30_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 895;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot30_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.30_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 895;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot30_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.30_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 895;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot30_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.30_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 896;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot30_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.30_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 896;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot30_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.30_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 896;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot30_CCR_1dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.30_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 101;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot30_CCR_1dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.30_CCR_1.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 101;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot30_CCR_1dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.30_CCR_1.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 101;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot40_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.40_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 885;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot40_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.40_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 885;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot40_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.40_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 885;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot40_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.40_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 1048;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot40_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.40_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 1048;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot40_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.40_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 1048;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot40_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.40_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 123;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot40_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.40_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 123;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot40_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.40_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 123;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot40_CCR_1dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.40_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 110;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot40_CCR_1dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.40_CCR_1.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 110;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot40_CCR_1dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.40_CCR_1.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 110;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot50_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.50_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 117;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot50_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.50_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 117;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot50_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.50_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 117;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot60_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.60_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 102;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot60_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.60_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 102;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_2dot60_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.60_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 102;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2792;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2792;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2792;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2598;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2598;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2598;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2819;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2819;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2819;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2902;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2902;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2902;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2758;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2758;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2758;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2789;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2789;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2789;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2822;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2822;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2822;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2841;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2841;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2841;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2769;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2769;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2769;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2680;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2680;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2680;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2680;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2961;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2961;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 2961;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot99_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.99_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 261;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot99_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.99_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 261;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot99_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.99_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 261;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot99_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.99_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 274;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot99_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.99_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 274;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot99_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.99_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 274;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot99_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.99_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 274;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 276;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 276;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 276;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 261;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 261;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 261;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 273;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 273;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 273;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 276;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 276;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 276;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 288;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 288;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 288;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 288;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 288;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 288;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 253;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 253;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 253;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 291;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 291;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 291;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 258;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 258;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 258;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot00_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.00_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot00_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.00_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot00_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.00_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot05_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.05_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot05_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.05_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot05_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.05_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot05_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.05_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot05_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.05_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot05_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.05_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot12_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.12_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot12_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.12_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot12_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.12_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot12_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.12_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 49;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot12_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.12_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 49;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot12_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.12_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 49;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot13_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.13_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot13_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.13_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot13_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.13_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_2dot00_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_2.00_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 126;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_2dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_2.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 126;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_2dot00_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_2.00_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 126;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_2dot00_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_2.00_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 126;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_9dot92_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_9.92_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_9dot92_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_9.92_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_9dot92_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_9.92_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_9dot96_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_9.96_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 49;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_9dot96_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_9.96_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 49;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_9dot96_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_9.96_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 49;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_9dot97_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_9.97_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_9dot97_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_9.97_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalRandom_Nodes_10_Density_4dot50_CCR_9dot97_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_9.97_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 494;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 494;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 494;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 494;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_1dot02_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_1.02_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 48;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_1dot02_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_1.02_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_1dot02_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_1.02_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 48;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_1dot02_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_1.02_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 48;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_1dot98_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_1.98_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_1dot98_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_1.98_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_1dot98_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_1.98_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_1dot98_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_1.98_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_10dot03_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_10.03_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_10dot03_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_10.03_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_10dot03_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_10.03_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_10dot03_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_10.03_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 76;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 515;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 475;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 475;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 457;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 404;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 404;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 366;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 330;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 330;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 400;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 383;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 383;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 554;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 477;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 477;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 586;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 586;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 586;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 458;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 428;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 428;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 622;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 612;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 612;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 425;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 329;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 329;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 358;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 448;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 358;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 358;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 484;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 422;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 422;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot94_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.94_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot94_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.94_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 42;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot94_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.94_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 42;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 43;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 39;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 39;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot04_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.04_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot04_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.04_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 44;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot04_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.04_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 44;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot06_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.06_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot06_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.06_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot06_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.06_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot98_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.98_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot98_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.98_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot98_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.98_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot98_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.98_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 68;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot03_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.03_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot03_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.03_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot03_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.03_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot04_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.04_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot04_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.04_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot04_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.04_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 53;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 58;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 476;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 515;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 476;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 476;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_0dot97_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_0.97_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_0dot97_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_0.97_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_0dot97_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_0.97_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_0dot97_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_0.97_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 51;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_10dot04_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_10.04_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_10dot04_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_10.04_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_10dot04_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_10.04_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_10dot04_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_10.04_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_2dot05_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_2.05_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 49;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_2dot05_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_2.05_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 49;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_2dot05_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_2.05_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 49;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_2dot05_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_2.05_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 49;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 414;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 296;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 286;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 580;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 541;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 541;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 493;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 427;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 427;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 534;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 381;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 381;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 465;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 430;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 430;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 463;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 410;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 410;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 471;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 438;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 438;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 406;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 380;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 380;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 410;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 361;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 361;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 467;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 579;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 467;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 467;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 355;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 324;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 324;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot97_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.97_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot97_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.97_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot97_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.97_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 41;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 35;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 43;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 43;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 45;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 37;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 41;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 41;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 49;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 43;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 43;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 44;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 44;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 62;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot03_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.03_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 49;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot03_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.03_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 49;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot03_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.03_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 49;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot99_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.99_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot99_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.99_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot99_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.99_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot99_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.99_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 70;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_10dot03_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_10.03_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_10dot03_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_10.03_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_10dot03_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_10.03_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 64;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot94_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.94_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot94_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.94_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot94_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.94_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot97_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.97_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot97_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.97_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot97_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.97_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot97_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.97_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 59;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot98_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.98_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot98_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.98_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot98_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.98_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot98_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.98_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot98_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.98_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot98_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.98_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 54;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot98_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.98_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot98_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.98_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot98_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.98_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 56;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 583;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 583;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 583;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 700;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 521;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 521;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 521;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 612;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 612;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 612;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 474;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 474;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 474;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 644;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 644;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 644;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 683;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 683;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 683;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 573;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 573;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 573;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 591;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 591;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 591;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 450;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 450;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 450;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 450;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 625;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 625;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 625;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot97_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.97_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot97_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.97_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot97_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.97_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot99_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.99_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 83;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot99_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.99_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 83;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot99_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.99_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 6;
        int expectedScheduleEndTime = 83;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 72;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.00_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.00_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.00_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 63;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 71;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.01_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.01_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.01_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 66;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot01_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.01_WeightType_Random#2_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot01_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.01_WeightType_Random#2_Homogeneous-4.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot01_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.01_WeightType_Random#2_Homogeneous-6.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 88;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot01_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.01_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot01_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.01_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot01_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.01_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot01_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.01_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 77;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 4;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 5;
        int expectedScheduleEndTime = 78;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 2;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 3;
        int expectedScheduleEndTime = 57;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 47;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 67;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_10dot03_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.03_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_10dot03_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.03_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_10dot03_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.03_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 65;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_10dot08_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.08_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_10dot08_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.08_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_10dot08_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.08_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 50;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_10dot11_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.11_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_10dot11_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.11_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_10dot11_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.11_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 55;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_9dot93_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_9.93_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_9dot93_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_9.93_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_9dot93_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_9.93_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 61;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_9dot94_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_9.94_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_9dot94_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_9.94_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_9dot94_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_9.94_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_9dot98_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_9.98_WeightType_Random_GB_Homogeneous-16.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_9dot98_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_9.98_WeightType_Random_GB_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_9dot98_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_9.98_WeightType_Random_GB_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_9dot98_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_9.98_WeightType_Random_GB_Homogeneous-8.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 46;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

    @ParameterizedTest
    @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
    void testOptimalStencil_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
        Graph graph = TestUtil.loadGraph("./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
        int processorCount = 1;
        int expectedScheduleEndTime = 52;

        Schedule actualSchedule = scheduler.schedule(graph, processorCount);

        Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
        ScheduleValidator.assertValidSchedule(actualSchedule, graph);
    } 

}
